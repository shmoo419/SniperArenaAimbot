// Image 0: mscorlib.dll - 0
// Image 1: System.Security.dll - 1067
// Image 2: Mono.Security.dll - 1068
// Image 3: System.Configuration.dll - 1191
// Image 4: System.dll - 1259
// Image 5: System.Xml.dll - 1702
// Image 6: Mono.Posix.dll - 2015
// Image 7: System.Core.dll - 2016
// Image 8: UnityEngine.dll - 2059
// Image 9: Boo.Lang.dll - 2459
// Image 10: Facebook.Unity.Settings.dll - 2475
// Image 11: JsonFx.Json.dll - 2479
// Image 12: Tapjoy.dll - 2496
// Image 13: Facebook.Unity.dll - 2534
// Image 14: SmartFox2X.dll - 2649
// Image 15: Tapjoy.iOS.dll - 2907
// Image 16: UnityEngine.UI.dll - 2909
// Image 17: UnityScript.Lang.dll - 3075
// Image 18: Facebook.Unity.Android.dll - 3077
// Image 19: Facebook.Unity.IOS.dll - 3079
// Image 20: Assembly-CSharp-firstpass.dll - 3081
// Image 21: Assembly-UnityScript-firstpass.dll - 3155
// Image 22: Assembly-CSharp.dll - 3165
// Image 23: Assembly-UnityScript.dll - 4881

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{
}

// Namespace: System
public class Object // TypeDefIndex: 1
{
	// Methods
	public void .ctor(); // 0x100896D04
	public virtual bool Equals(object obj); // 0x1008A4BC0
	public static bool Equals(object objA, object objB); // 0x1008A4BCC
	protected override void Finalize(); // 0x100896F50
	public virtual int GetHashCode(); // 0x1008A4C54
	public Type GetType(); // 0x10089824C
	protected object MemberwiseClone(); // 0x1008A4BA8
	public virtual string ToString(); // 0x1008A4C60
	public static bool ReferenceEquals(object objA, object objB); // 0x1008A4CB8
	internal static int InternalGetHashCode(object o); // 0x1008A4C58
}

// Namespace: System
public abstract class ValueType // TypeDefIndex: 2
{
	// Methods
	protected void .ctor(); // 0x1009B52D0
	private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x1009B52D8
	internal static bool DefaultEquals(object o1, object o2); // 0x1009B52E8
	public override bool Equals(object obj); // 0x1009B53E8
	internal static int InternalGetHashCode(object o, out object[] fields); // 0x1009B53F8
	public override int GetHashCode(); // 0x1009B5404
	public override string ToString(); // 0x1009B54DC
}

// Namespace: System
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Methods
	protected void .ctor(); // 0x10082FA4C
	public virtual object get_TypeId(); // 0x10082FA54
	private static void CheckParameters(object element, Type attributeType); // 0x10082FA5C
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType); // 0x10082FBC0
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x10082FBC8
	public override int GetHashCode(); // 0x10082FC58
	public virtual bool IsDefaultAttribute(); // 0x10082FC60
	public static bool IsDefined(ParameterInfo element, Type attributeType); // 0x10082FC68
	public static bool IsDefined(MemberInfo element, Type attributeType); // 0x10082FD28
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x10082FD30
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit); // 0x10082FC70
	public override bool Equals(object obj); // 0x10082FEBC
}

// Namespace: System.Runtime.InteropServices
public interface _Attribute // TypeDefIndex: 4
{
}

// Namespace: System
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable`1<int>, IEquatable`1<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647; // 0x0
	public const int MinValue = -2147483648; // 0x0
	internal int m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x10087A894
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10087A908
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x10087A97C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10087A9F0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x10087AA64
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10087AAD8
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x10087AB4C
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10087AB54
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x10087ABC8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10087AC3C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x10087ACB0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x10087ADA0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x10087AE14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x10087AE88
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x10087AEFC
	public int CompareTo(object value); // 0x10087AFE0
	public override bool Equals(object obj); // 0x10087B070
	public override int GetHashCode(); // 0x10087B080
	public int CompareTo(int value); // 0x10087B0A8
	public bool Equals(int obj); // 0x10087B0D0
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, Exception exc); // 0x10087A4A4
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc); // 0x10087B0E0
	public static int Parse(string s, IFormatProvider provider); // 0x10087B3B0
	public static int Parse(string s, NumberStyles style); // 0x10087B3C0
	internal static bool CheckStyle(NumberStyles style, bool tryParse, Exception exc); // 0x10087B3C8
	internal static bool JumpOverWhite(int pos, string s, bool reportError, bool tryParse, Exception exc); // 0x10087B4A8
	internal static void FindSign(int pos, string s, NumberFormatInfo nfi, bool foundSign, bool negative); // 0x10087B5D4
	internal static void FindCurrency(int pos, string s, NumberFormatInfo nfi, bool foundCurrency); // 0x10087B740
	internal static bool FindExponent(int pos, string s, int exponent, bool tryParse, Exception exc); // 0x10087B860
	internal static bool FindOther(int pos, string s, string other); // 0x10087BB3C
	internal static bool ValidDigit(char e, bool allowHex); // 0x10087BC44
	internal static Exception GetFormatException(); // 0x100867F50
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc); // 0x10087BD14
	public static int Parse(string s); // 0x10087C838
	public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x10087A654
	public static bool TryParse(string s, out int result); // 0x10086A690
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x10087C878
	public override string ToString(); // 0x10087C8C4
	public string ToString(IFormatProvider provider); // 0x10087C948
	public string ToString(string format); // 0x10087C9D4
	public string ToString(string format, IFormatProvider provider); // 0x10087C9E0
	public TypeCode GetTypeCode(); // 0x10087C9E8
}

// Namespace: System
public interface IFormattable // TypeDefIndex: 6
{
	// Methods
	public abstract string ToString(string format, IFormatProvider formatProvider); // 0
}

// Namespace: System
public interface IConvertible // TypeDefIndex: 7
{
	// Methods
	public abstract bool ToBoolean(IFormatProvider provider); // 0
	public abstract byte ToByte(IFormatProvider provider); // 0
	public abstract char ToChar(IFormatProvider provider); // 0
	public abstract DateTime ToDateTime(IFormatProvider provider); // 0
	public abstract Decimal ToDecimal(IFormatProvider provider); // 0
	public abstract double ToDouble(IFormatProvider provider); // 0
	public abstract short ToInt16(IFormatProvider provider); // 0
	public abstract int ToInt32(IFormatProvider provider); // 0
	public abstract long ToInt64(IFormatProvider provider); // 0
	public abstract sbyte ToSByte(IFormatProvider provider); // 0
	public abstract float ToSingle(IFormatProvider provider); // 0
	public abstract string ToString(IFormatProvider provider); // 0
	public abstract object ToType(Type conversionType, IFormatProvider provider); // 0
	public abstract ushort ToUInt16(IFormatProvider provider); // 0
	public abstract uint ToUInt32(IFormatProvider provider); // 0
	public abstract ulong ToUInt64(IFormatProvider provider); // 0
}

// Namespace: System
public interface IComparable // TypeDefIndex: 8
{
	// Methods
	public abstract int CompareTo(object obj); // 0
}

// Namespace: System
public interface IComparable`1 // TypeDefIndex: 9
{
	// Methods
	public abstract int CompareTo(T other); // 0
}

// Namespace: System
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Methods
	public void .ctor(); // 0x100984A80
}

// Namespace: System
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x10
	private bool allow_multiple; // 0x14
	private bool inherited; // 0x15

	// Methods
	public void .ctor(AttributeTargets validOn); // 0x10082FF64
	public bool get_AllowMultiple(); // 0x10082FF98
	public void set_AllowMultiple(bool value); // 0x10082FFA0
	public bool get_Inherited(); // 0x10082FFA8
	public void set_Inherited(bool value); // 0x10082FFB0
}

// Namespace: System.Runtime.InteropServices
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x10

	// Methods
	public void .ctor(bool visibility); // 0x1008CC1D4
}

// Namespace: System
public interface IEquatable`1 // TypeDefIndex: 13
{
	// Methods
	public abstract bool Equals(T other); // 0
}

// Namespace: System
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable`1<long>, IEquatable`1<long> // TypeDefIndex: 14
{
	// Fields
	public const long MaxValue = 9223372036854775807; // 0x0
	public const long MinValue = -9223372036854775808; // 0x0
	internal long m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x10087CA5C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10087CAD0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x10087CB44
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10087CBB8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x10087CC2C
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10087CCA0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x10087CD14
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10087CD88
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x10087CDFC
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10087CE70
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x10087CEE4
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x10087CFD4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x10087D048
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x10087D0BC
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x10087D130
	public int CompareTo(object value); // 0x10087D214
	public override bool Equals(object obj); // 0x10087D2A4
	public override int GetHashCode(); // 0x10087D2AC
	public int CompareTo(long value); // 0x10087D2B8
	public bool Equals(long obj); // 0x10087D2E0
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc); // 0x10087D2F0
	public static long Parse(string s, IFormatProvider provider); // 0x10087D5B8
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc); // 0x10087D604
	public static long Parse(string s); // 0x10087E558
	public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x10087D5C8
	public static bool TryParse(string s, out long result); // 0x10086A814
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result); // 0x10087E594
	public override string ToString(); // 0x10087E5E0
	public string ToString(IFormatProvider provider); // 0x10087E664
	public string ToString(string format); // 0x10087E6F0
	public string ToString(string format, IFormatProvider provider); // 0x10087E6FC
	public TypeCode GetTypeCode(); // 0x10087E704
}

// Namespace: System
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable`1<uint>, IEquatable`1<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295; // 0x0
	public const uint MinValue = 0; // 0x0
	internal uint m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x1009B16D4
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1009B1748
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x1009B17BC
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x1009B1830
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1009B18A4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x1009B1918
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x1009B198C
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x1009B1A00
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x1009B1A74
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1009B1AE8
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x1009B1B5C
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1009B1C4C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x1009B1CC0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x1009B1CC8
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x1009B1D3C
	public int CompareTo(object value); // 0x1009B1E20
	public override bool Equals(object obj); // 0x1009B1EB0
	public override int GetHashCode(); // 0x1009B1EC0
	public int CompareTo(uint value); // 0x1009B1EC8
	public bool Equals(uint obj); // 0x1009B1EE0
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc); // 0x1009B1EF0
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc); // 0x1009B219C
	public static uint Parse(string s); // 0x1009B2D10
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x1009B13C0
	public static uint Parse(string s, IFormatProvider provider); // 0x1009B2D50
	public static bool TryParse(string s, out uint result); // 0x1009B2D60
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x1009B1480
	public override string ToString(); // 0x1009B2E1C
	public string ToString(IFormatProvider provider); // 0x1009B2EA0
	public string ToString(string format); // 0x1009B2F34
	public string ToString(string format, IFormatProvider provider); // 0x1009B2F40
}

// Namespace: System
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x10

	// Methods
	public void .ctor(bool isCompliant); // 0x100836500
}

// Namespace: System
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable`1<ulong>, IEquatable`1<ulong> // TypeDefIndex: 17
{
	// Fields
	internal ulong m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x1009B2FB4
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1009B3028
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x1009B309C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x1009B3110
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1009B3184
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x1009B31F8
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x1009B326C
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x1009B32E0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x1009B3354
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1009B33C8
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x1009B343C
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1009B352C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x1009B35A0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x1009B3614
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x1009B361C
	public int CompareTo(object value); // 0x1009B3700
	public override bool Equals(object obj); // 0x1009B3790
	public override int GetHashCode(); // 0x1009B3798
	public int CompareTo(ulong value); // 0x1009B37A4
	public bool Equals(ulong obj); // 0x1009B37BC
	public static ulong Parse(string s, IFormatProvider provider); // 0x1009B37CC
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc); // 0x1009B3818
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x1009B37DC
	public static bool TryParse(string s, out ulong result); // 0x1009B43DC
	public override string ToString(); // 0x1009B44A0
	public string ToString(IFormatProvider provider); // 0x1009B4524
	public string ToString(string format); // 0x1009B45B8
	public string ToString(string format, IFormatProvider provider); // 0x1009B45C4
}

// Namespace: System
public struct Byte : IFormattable, IConvertible, IComparable, IComparable`1<byte>, IEquatable`1<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0; // 0x0
	public const byte MaxValue = 255; // 0x0
	internal byte m_value; // 0x10

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1008333B4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100833434
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10083343C
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x1008334B0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10083350C
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1008335E4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10083365C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x1008336D0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100833744
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x1008337B8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1008338B0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100833928
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x10083399C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100833A10
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100833A84
	public int CompareTo(object value); // 0x100833B64
	public override bool Equals(object obj); // 0x100833BF4
	public override int GetHashCode(); // 0x100833C04
	public int CompareTo(byte value); // 0x100833C2C
	public bool Equals(byte obj); // 0x100833C54
	public static byte Parse(string s, IFormatProvider provider); // 0x100833C64
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x100833C74
	public static byte Parse(string s); // 0x100833D2C
	public static bool TryParse(string s, out byte result); // 0x100833D38
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result); // 0x100833DA4
	public override string ToString(); // 0x100833E78
	public string ToString(string format); // 0x100833F0C
	public string ToString(IFormatProvider provider); // 0x100833F94
	public string ToString(string format, IFormatProvider provider); // 0x100833F9C
}

// Namespace: System
public struct SByte : IFormattable, IConvertible, IComparable, IComparable`1<sbyte>, IEquatable`1<sbyte> // TypeDefIndex: 19
{
	// Fields
	internal sbyte m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x10090C6A8
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10090C71C
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x10090C790
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10090C804
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x10090C878
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10090C8EC
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x10090C960
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10090C9D4
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x10090CA48
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10090CA50
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x10090CAC4
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x10090CBB4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x10090CC28
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x10090CC9C
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x10090CD10
	public int CompareTo(object obj); // 0x10090CE00
	public override bool Equals(object obj); // 0x10090CE90
	public override int GetHashCode(); // 0x10090CE98
	public int CompareTo(sbyte value); // 0x10090CEA0
	public bool Equals(sbyte obj); // 0x10090CEC0
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc); // 0x10090CED0
	public static sbyte Parse(string s, IFormatProvider provider); // 0x10090D1FC
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x10090D20C
	public static bool TryParse(string s, out sbyte result); // 0x10090D2C8
	public override string ToString(); // 0x10090D384
	public string ToString(IFormatProvider provider); // 0x10090D408
	public string ToString(string format); // 0x10090D49C
	public string ToString(string format, IFormatProvider provider); // 0x10090D4A8
}

// Namespace: System
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable`1<short>, IEquatable`1<short> // TypeDefIndex: 20
{
	// Fields
	internal short m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100879950
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1008799C4
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100879A38
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x100879AAC
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100879B20
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100879B94
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100879C08
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100879C7C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100879CF0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x100879D64
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100879DD8
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x100879EC8
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100879F3C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100879FB0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x10087A024
	public int CompareTo(object value); // 0x10087A114
	public override bool Equals(object obj); // 0x10087A1A4
	public override int GetHashCode(); // 0x10087A1AC
	public int CompareTo(short value); // 0x10087A1B4
	public bool Equals(short obj); // 0x10087A1D4
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc); // 0x10087A1E4
	public static short Parse(string s, IFormatProvider provider); // 0x10087A5A4
	public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x10087A5B4
	public static bool TryParse(string s, out short result); // 0x10086A50C
	public override string ToString(); // 0x10087A704
	public string ToString(IFormatProvider provider); // 0x10087A788
	public string ToString(string format); // 0x10087A814
	public string ToString(string format, IFormatProvider provider); // 0x10087A820
}

// Namespace: System
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable`1<ushort>, IEquatable`1<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535; // 0x0
	public const ushort MinValue = 0; // 0x0
	internal ushort m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x1009B0B0C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1009B0B80
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x1009B0BF4
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x1009B0C68
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1009B0CDC
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x1009B0D50
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x1009B0DC4
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x1009B0E38
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x1009B0EAC
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1009B0F20
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x1009B0F94
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1009B1084
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x1009B108C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x1009B1100
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x1009B1174
	public int CompareTo(object value); // 0x1009B1244
	public override bool Equals(object obj); // 0x1009B12D4
	public override int GetHashCode(); // 0x1009B12DC
	public int CompareTo(ushort value); // 0x1009B12E4
	public bool Equals(ushort obj); // 0x1009B12F0
	public static ushort Parse(string s, IFormatProvider provider); // 0x1009B1300
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x1009B1310
	public static bool TryParse(string s, out ushort result); // 0x1009B1400
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result); // 0x1009B1414
	public override string ToString(); // 0x1009B153C
	public string ToString(IFormatProvider provider); // 0x1009B15C0
	public string ToString(string format); // 0x1009B1654
	public string ToString(string format, IFormatProvider provider); // 0x1009B1660
}

// Namespace: System.Collections
public interface IEnumerator // TypeDefIndex: 22
{
	// Methods
	public abstract object get_Current(); // 0
	public abstract bool MoveNext(); // 0
	public abstract void Reset(); // 0
}

// Namespace: System.Collections
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods
	public abstract IEnumerator GetEnumerator(); // 0
}

// Namespace: System
public interface IDisposable // TypeDefIndex: 24
{
	// Methods
	public abstract void Dispose(); // 0
}

// Namespace: System.Collections.Generic
public interface IEnumerator`1 : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Methods
	public abstract T get_Current(); // 0
}

// Namespace: System
public struct Char : IConvertible, IComparable, IComparable`1<char>, IEquatable`1<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = ￿; // 0x0
	public const char MinValue =  ; // 0x0
	internal char m_value; // 0x10
	private static readonly PTR category_data; // 0x0
	private static readonly PTR numeric_data; // 0x8
	private static readonly PTR numeric_data_values; // 0x10
	private static readonly PTR to_lower_data_low; // 0x18
	private static readonly PTR to_lower_data_high; // 0x20
	private static readonly PTR to_upper_data_low; // 0x28
	private static readonly PTR to_upper_data_high; // 0x30

	// Methods
	private static void .cctor(); // 0x10083476C
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1008348CC
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100834928
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x100834A28
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100834A30
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x100834A8C
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100834AEC
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100834B4C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100834C48
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100834CBC
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100834D30
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x100834E2C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100834E88
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100834F00
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100834F74
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100834FE8
	private static void GetDataTablePointers(out PTR category_data, out PTR numeric_data, out PTR numeric_data_values, out PTR to_lower_data_low, out PTR to_lower_data_high, out PTR to_upper_data_low, out PTR to_upper_data_high); // 0x1008347D0
	public int CompareTo(object value); // 0x1008350C8
	public override bool Equals(object obj); // 0x100835158
	public int CompareTo(char value); // 0x100835160
	public static string ConvertFromUtf32(int utf32); // 0x100835178
	public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x1008352E0
	public static int ConvertToUtf32(string s, int index); // 0x1008353A4
	public bool Equals(char obj); // 0x100835740
	public override int GetHashCode(); // 0x100835750
	public static UnicodeCategory GetUnicodeCategory(char c); // 0x100824D20
	public static bool IsDigit(char c); // 0x100835758
	public static bool IsDigit(string s, int index); // 0x1008357D0
	public static bool IsHighSurrogate(char c); // 0x100835710
	public static bool IsLetter(char c); // 0x100835864
	public static bool IsLetterOrDigit(char c); // 0x1008358DC
	public static bool IsLetterOrDigit(string s, int index); // 0x100835960
	public static bool IsLower(char c); // 0x1008359F4
	public static bool IsLowSurrogate(char c); // 0x100835720
	public static bool IsNumber(char c); // 0x100835A6C
	public static bool IsSurrogate(char c); // 0x100835698
	public static bool IsUpper(char c); // 0x100835AE8
	public static bool IsWhiteSpace(char c); // 0x100828AAC
	public static bool IsWhiteSpace(string s, int index); // 0x100835B60
	private static void CheckParameter(string s, int index); // 0x1008355C4
	public static char Parse(string s); // 0x100835BF4
	public static char ToLower(char c); // 0x100835CC8
	public static char ToLowerInvariant(char c); // 0x100835DA8
	public static char ToLower(char c, CultureInfo culture); // 0x100835E78
	public static char ToUpper(char c); // 0x100835FBC
	public static char ToUpperInvariant(char c); // 0x10083609C
	public static char ToUpper(char c, CultureInfo culture); // 0x10083616C
	public override string ToString(); // 0x1008362C4
	public string ToString(IFormatProvider provider); // 0x1008362D8
	public TypeCode GetTypeCode(); // 0x1008362EC
}

// Namespace: System
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable`1<string>, IEquatable`1<string>, IEnumerable`1<char> // TypeDefIndex: 27
{
	// Fields
	private int length; // 0x10
	private char start_char; // 0x14
	public static readonly string Empty; // 0x0
	private static readonly char[] WhiteChars; // 0x8

	// Methods
	public void .ctor(PTR value, int startIndex, int length); // 0x100985AA8
	public void .ctor(char[] value, int startIndex, int length); // 0x100985AAC
	public void .ctor(char[] value); // 0x100985AB0
	public void .ctor(char c, int count); // 0x100985AB4
	private static void .cctor(); // 0x100985AB8
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100985B60
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x100985BDC
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100985C58
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x100985CD4
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100985D50
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100985DCC
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100985E48
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100985EC4
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100985F40
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x100985FBC
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100986038
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1009860B4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100986170
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x1009861EC
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100986268
	private IEnumerator`1<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator(); // 0x1009862E4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100986348
	public static bool Equals(string a, string b); // 0x1009863AC
	public override bool Equals(object obj); // 0x1009864B8
	public bool Equals(string value); // 0x100986544
	public char get_Chars(int index); // 0x10097D56C
	public object Clone(); // 0x1009865B8
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x1009865BC
	public char[] ToCharArray(); // 0x10098689C
	public char[] ToCharArray(int startIndex, int length); // 0x1009868A8
	public string[] Split(char[] separator); // 0x100986A30
	public string[] Split(char[] separator, int count); // 0x100986A38
	public string[] Split(char[] separator, int count, StringSplitOptions options); // 0x100986BB4
	public string[] Split(string[] separator, int count, StringSplitOptions options); // 0x100986F20
	public string[] Split(char[] separator, StringSplitOptions options); // 0x1009873D4
	public string[] Split(string[] separator, StringSplitOptions options); // 0x1009873E4
	public string Substring(int startIndex); // 0x10097D4B8
	public string Substring(int startIndex, int length); // 0x10097D5F4
	internal string SubstringUnchecked(int startIndex, int length); // 0x1009873F4
	public string Trim(); // 0x1009874DC
	public string Trim(char[] trimChars); // 0x1009876AC
	public string TrimStart(char[] trimChars); // 0x10098788C
	public string TrimEnd(char[] trimChars); // 0x10098796C
	private int FindNotWhiteSpace(int pos, int target, int change); // 0x1009875B0
	private int FindNotInTable(int pos, int target, int change, char[] table); // 0x1009877B8
	public static int Compare(string strA, string strB); // 0x100987A54
	public static int Compare(string strA, string strB, bool ignoreCase); // 0x100987B48
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x10097CB78
	public static int Compare(string strA, int indexA, string strB, int indexB, int length); // 0x100987C40
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase); // 0x100987D18
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture); // 0x10097DC94
	public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x100987DFC
	public bool Equals(string value, StringComparison comparisonType); // 0x100988440
	public int CompareTo(object value); // 0x1009884C8
	public int CompareTo(string strB); // 0x1009885EC
	public static int CompareOrdinal(string strA, string strB); // 0x100988678
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x1009886FC
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x10098812C
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x10098827C
	public bool EndsWith(string value); // 0x1009887E8
	public int IndexOfAny(char[] anyOf); // 0x100980770
	public int IndexOfAny(char[] anyOf, int startIndex); // 0x1009889F4
	public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x100988AAC
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x100988910
	public int IndexOf(string value, StringComparison comparisonType); // 0x100988D8C
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x100988DA0
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options); // 0x100989174
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count); // 0x1009892A4
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count); // 0x1009893E0
	public int IndexOf(char value); // 0x100989550
	public int IndexOf(char value, int startIndex); // 0x100989568
	public int IndexOf(char value, int startIndex, int count); // 0x100989664
	internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x100988BC0
	public int IndexOf(string value); // 0x10097C8D8
	public int IndexOf(string value, int startIndex); // 0x1009873C8
	public int IndexOf(string value, int startIndex, int count); // 0x1009897B4
	public int LastIndexOfAny(char[] anyOf); // 0x1009899B4
	public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x100989B18
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x100989A38
	public int LastIndexOf(char value); // 0x100989DD4
	public int LastIndexOf(char value, int startIndex); // 0x100989DEC
	public int LastIndexOf(char value, int startIndex, int count); // 0x100989DF4
	internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x100989C04
	public int LastIndexOf(string value); // 0x100989F4C
	public int LastIndexOf(string value, int startIndex, int count); // 0x100989F64
	public bool Contains(string value); // 0x10098A1B8
	public static bool IsNullOrEmpty(string value); // 0x10098A1D4
	public string PadLeft(int totalWidth, char paddingChar); // 0x10098A1F0
	public string PadRight(int totalWidth, char paddingChar); // 0x10098A33C
	public bool StartsWith(string value); // 0x10097D390
	public bool StartsWith(string value, StringComparison comparisonType); // 0x10098A494
	public string Replace(char oldChar, char newChar); // 0x10098A960
	public string Replace(string oldValue, string newValue); // 0x10098AAA8
	private string ReplaceUnchecked(string oldValue, string newValue); // 0x10098ABBC
	private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x10098AEEC
	public string Remove(int startIndex, int count); // 0x10098B0AC
	public string ToLower(); // 0x10098B228
	public string ToLower(CultureInfo culture); // 0x10098B29C
	public string ToLowerInvariant(); // 0x10098B3C4
	public string ToUpper(); // 0x10098B4D4
	public string ToUpper(CultureInfo culture); // 0x10098B548
	public string ToUpperInvariant(); // 0x10098B670
	public override string ToString(); // 0x10098B780
	public string ToString(IFormatProvider provider); // 0x10098B784
	public static string Format(string format, object arg0); // 0x10097D98C
	public static string Format(string format, object arg0, object arg1); // 0x10098B814
	public static string Format(string format, object arg0, object arg1, object arg2); // 0x10098B928
	public static string Format(string format, object[] args); // 0x10098BA80
	public static string Format(IFormatProvider provider, string format, object[] args); // 0x10098B788
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args); // 0x10098BAF8
	public static string Concat(object arg0, object arg1); // 0x10097E738
	public static string Concat(object arg0, object arg1, object arg2); // 0x100986D80
	public static string Concat(string str0, string str1); // 0x10097CA40
	public static string Concat(string str0, string str1, string str2); // 0x10097F45C
	public static string Concat(string str0, string str1, string str2, string str3); // 0x10098C84C
	public static string Concat(object[] args); // 0x10098CBA0
	public static string Concat(string[] values); // 0x10098CF18
	private static string ConcatInternal(string[] values, int length); // 0x10098CDC0
	public string Insert(int startIndex, string value); // 0x10098D00C
	public static string Join(string separator, string[] value); // 0x10098D1A4
	public static string Join(string separator, string[] value, int startIndex, int count); // 0x10098D558
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count); // 0x10098D284
	public int get_Length(); // 0x10097D564
	private static void ParseFormatSpecifier(string str, int ptr, out int n, out int width, out bool left_align, out string format); // 0x10098C3CC
	private static int ParseDecimal(string str, int ptr); // 0x10098D728
	internal void InternalSetChar(int idx, char val); // 0x10098D7D0
	internal void InternalSetLength(int newLength); // 0x10098D864
	public override int GetHashCode(); // 0x10097CD38
	internal int GetCaseInsensitiveHashCode(); // 0x10098D91C
	private string CreateString(PTR value); // 0x10098DA70
	private string CreateString(PTR value, int startIndex, int length); // 0x10098DE48
	private string CreateString(PTR value, int startIndex, int length, Encoding enc); // 0x10098DB1C
	private string CreateString(PTR value); // 0x10098E358
	private string CreateString(PTR value, int startIndex, int length); // 0x10098E46C
	private string CreateString(char[] val, int startIndex, int length); // 0x10098E5D0
	private string CreateString(char[] val); // 0x10098E7A0
	private string CreateString(char c, int count); // 0x10098E8C0
	private static void memcpy4(PTR dest, PTR src, int size); // 0x10098E9BC
	private static void memcpy2(PTR dest, PTR src, int size); // 0x10098EA48
	private static void memcpy1(PTR dest, PTR src, int size); // 0x10098EAC4
	internal static void memcpy(PTR dest, PTR src, int size); // 0x10098E214
	internal static void CharCopy(PTR dest, PTR src, int count); // 0x1009867B4
	internal static void CharCopyReverse(PTR dest, PTR src, int count); // 0x10098EB70
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count); // 0x10098EBA4
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count); // 0x10098EC68
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count); // 0x10098ED24
	private string[] InternalSplit(char[] separator, int count, int options); // 0x100986BB0
	internal static string InternalAllocateStr(int length); // 0x1009874D4
	public static bool op_Equality(string a, string b); // 0x10097D31C
	public static bool op_Inequality(string a, string b); // 0x10097EC68
}

// Namespace: System
public interface ICloneable // TypeDefIndex: 28
{
	// Methods
	public abstract object Clone(); // 0
}

// Namespace: System.Collections.Generic
public interface IEnumerable`1 : IEnumerable // TypeDefIndex: 29
{
	// Methods
	public abstract IEnumerator`1<T> GetEnumerator(); // 0
}

// Namespace: System
public struct Single : IFormattable, IConvertible, IComparable, IComparable`1<float>, IEquatable`1<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1.401298E-45; // 0x0
	public const float MaxValue = 3.402823E+38; // 0x0
	public const float MinValue = -3.402823E+38; // 0x0
	public const float NaN = NaN; // 0x0
	public const float PositiveInfinity = ∞; // 0x0
	public const float NegativeInfinity = -∞; // 0x0
	private const double MaxValueEpsilon = 3.61471124579618E+29; // 0x0
	internal float m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100984AF4
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x100984B68
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100984BDC
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x100984C50
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100984CC4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100984D38
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100984DAC
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100984E20
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100984E94
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x100984F08
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100984F7C
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x10098506C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x1009850E0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100985154
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x1009851C8
	public int CompareTo(object value); // 0x1009853EC
	public override bool Equals(object obj); // 0x100985490
	public int CompareTo(float value); // 0x100985574
	public bool Equals(float obj); // 0x10098559C
	public override int GetHashCode(); // 0x1009855C4
	public static bool IsInfinity(float f); // 0x1009855CC
	public static bool IsNaN(float f); // 0x1009853E0
	public static bool IsNegativeInfinity(float f); // 0x1009853A4
	public static bool IsPositiveInfinity(float f); // 0x100985368
	public static float Parse(string s); // 0x1009855F4
	public static float Parse(string s, IFormatProvider provider); // 0x1009856B0
	public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x100985778
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result); // 0x100985844
	public static bool TryParse(string s, out float result); // 0x1009858D4
	public override string ToString(); // 0x100985958
	public string ToString(IFormatProvider provider); // 0x1009859DC
	public string ToString(string format); // 0x100985A70
	public string ToString(string format, IFormatProvider provider); // 0x100985A7C
	public TypeCode GetTypeCode(); // 0x100985A84
}

// Namespace: System
public struct Double : IFormattable, IConvertible, IComparable, IComparable`1<double>, IEquatable`1<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 4.94065645841247E-324; // 0x0
	public const double MaxValue = 1.79769313486232E+308; // 0x0
	public const double MinValue = -1.79769313486232E+308; // 0x0
	public const double NaN = NaN; // 0x0
	public const double NegativeInfinity = -∞; // 0x0
	public const double PositiveInfinity = ∞; // 0x0
	private const int State_AllowSign = 1; // 0x0
	private const int State_Digits = 2; // 0x0
	private const int State_Decimal = 3; // 0x0
	private const int State_ExponentSign = 4; // 0x0
	private const int State_Exponent = 5; // 0x0
	private const int State_ConsumeWhiteSpace = 6; // 0x0
	private const int State_Exit = 7; // 0x0
	internal double m_value; // 0x10

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1008664B8
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x10086652C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1008665A0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x10086666C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x1008666C8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100866740
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x1008667B4
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100866828
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10086689C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100866910
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x100866984
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x1008669F8
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100866A6C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100866AE0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100866B54
	public int CompareTo(object value); // 0x100866D6C
	public override bool Equals(object obj); // 0x100866E10
	public int CompareTo(double value); // 0x100866EF0
	public bool Equals(double obj); // 0x100866F1C
	public override int GetHashCode(); // 0x100866F54
	public static bool IsInfinity(double d); // 0x100866F60
	public static bool IsNaN(double d); // 0x100866D60
	public static bool IsNegativeInfinity(double d); // 0x100866D24
	public static bool IsPositiveInfinity(double d); // 0x100866CE8
	public static double Parse(string s); // 0x100866F88
	public static double Parse(string s, IFormatProvider provider); // 0x100866FD0
	public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x100866F94
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc); // 0x100866FE0
	private static bool TryParseStringConstant(string format, string s, int start, int end); // 0x100867FCC
	private static bool ParseImpl(PTR byte_ptr, out double value); // 0x100868118
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result); // 0x100868124
	public static bool TryParse(string s, out double result); // 0x100868170
	public override string ToString(); // 0x100868234
	public string ToString(IFormatProvider provider); // 0x1008682B8
	public string ToString(string format); // 0x10086834C
	public string ToString(string format, IFormatProvider provider); // 0x100868358
	public TypeCode GetTypeCode(); // 0x100868360
}

// Namespace: System
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable`1<Decimal>, IEquatable`1<Decimal> // TypeDefIndex: 32
{
	// Fields
	public static readonly Decimal MinValue; // 0x0
	public static readonly Decimal MaxValue; // 0x10
	public static readonly Decimal MinusOne; // 0x20
	public static readonly Decimal One; // 0x30
	private static readonly Decimal MaxValueDiv10; // 0x40
	private uint flags; // 0x10
	private uint hi; // 0x14
	private uint lo; // 0x18
	private uint mid; // 0x1C

	// Methods
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale); // 0x10085FF04
	public void .ctor(int value); // 0x10085FF0C
	public void .ctor(uint value); // 0x10085FF34
	public void .ctor(long value); // 0x10085FF40
	public void .ctor(ulong value); // 0x10085FF68
	public void .ctor(float value); // 0x100860278
	public void .ctor(double value); // 0x10086047C
	private static void .cctor(); // 0x100860484
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x100860614
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100860680
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x1008606EC
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100860748
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x1008607A8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1008607B4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100860824
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100860890
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x1008608FC
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100860968
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1008609D4
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100860A40
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100860AAC
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100860B18
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100860B84
	public static int[] GetBits(Decimal d); // 0x100860B8C
	public static Decimal Add(Decimal d1, Decimal d2); // 0x100860C6C
	public static Decimal Subtract(Decimal d1, Decimal d2); // 0x100860D68
	public override int GetHashCode(); // 0x100860EC0
	private static ulong u64(Decimal value); // 0x100860ED8
	private static long s64(Decimal value); // 0x100860FCC
	public static bool Equals(Decimal d1, Decimal d2); // 0x1008610B4
	public override bool Equals(object value); // 0x100861298
	private bool IsZero(); // 0x1008612A0
	public static Decimal Floor(Decimal d); // 0x1008612C8
	public static Decimal Truncate(Decimal d); // 0x10086136C
	public static Decimal Multiply(Decimal d1, Decimal d2); // 0x100861410
	public static Decimal Divide(Decimal d1, Decimal d2); // 0x100861548
	public static int Compare(Decimal d1, Decimal d2); // 0x10086114C
	public int CompareTo(object value); // 0x1008617AC
	public int CompareTo(Decimal value); // 0x100861830
	public bool Equals(Decimal value); // 0x1008618B4
	public static Decimal Parse(string s, IFormatProvider provider); // 0x10084CCA8
	private static void ThrowAtPos(int pos); // 0x1008618BC
	private static void ThrowInvalidExp(); // 0x10086198C
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex); // 0x100861A00
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x100860174
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex); // 0x10086252C
	public string ToString(string format, IFormatProvider provider); // 0x100862A88
	public override string ToString(); // 0x100862AE4
	public string ToString(IFormatProvider provider); // 0x100862AEC
	private static int decimal2UInt64(Decimal val, out ulong result); // 0x100860FC0
	private static int decimal2Int64(Decimal val, out long result); // 0x1008610A8
	private static int decimalIncr(Decimal d1, Decimal d2); // 0x100860D5C
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign); // 0x1008629E4
	internal static int decimalSetExponent(Decimal val, int exp); // 0x1008629F8
	private static double decimal2double(Decimal val); // 0x100862AF4
	private static void decimalFloorAndTrunc(Decimal val, int floorFlag); // 0x100860FB4
	private static int decimalMult(Decimal pd1, Decimal pd2); // 0x10086153C
	private static int decimalDiv(out Decimal pc, Decimal pa, Decimal pb); // 0x1008616A0
	private static int decimalCompare(Decimal d1, Decimal d2); // 0x1008616B0
	public static Decimal op_Addition(Decimal d1, Decimal d2); // 0x100862AFC
	public static Decimal op_Increment(Decimal d); // 0x100862B88
	public static Decimal op_Subtraction(Decimal d1, Decimal d2); // 0x100862C04
	public static Decimal op_Multiply(Decimal d1, Decimal d2); // 0x100862C90
	public static Decimal op_Division(Decimal d1, Decimal d2); // 0x100862D1C
	public static byte op_Explicit(Decimal value); // 0x10084AD2C
	public static sbyte op_Explicit(Decimal value); // 0x10084F5FC
	public static short op_Explicit(Decimal value); // 0x10084D5E0
	public static ushort op_Explicit(Decimal value); // 0x1008511A0
	public static int op_Explicit(Decimal value); // 0x10084E034
	public static uint op_Explicit(Decimal value); // 0x100851B7C
	public static long op_Explicit(Decimal value); // 0x10084EA3C
	public static ulong op_Explicit(Decimal value); // 0x10085253C
	public static Decimal op_Implicit(byte value); // 0x10084C804
	public static Decimal op_Implicit(sbyte value); // 0x10084CB78
	public static Decimal op_Implicit(short value); // 0x10084CBFC
	public static Decimal op_Implicit(ushort value); // 0x10084CE6C
	public static Decimal op_Implicit(int value); // 0x10084C7F0
	public static Decimal op_Implicit(uint value); // 0x10084CD88
	public static Decimal op_Implicit(long value); // 0x10084CAF0
	public static Decimal op_Implicit(ulong value); // 0x10084CDFC
	public static Decimal op_Explicit(float value); // 0x10084C9C0
	public static Decimal op_Explicit(double value); // 0x10084C8BC
	public static float op_Explicit(Decimal value); // 0x10084FFD0
	public static double op_Explicit(Decimal value); // 0x10084D154
	public static bool op_Inequality(Decimal d1, Decimal d2); // 0x10084A690
	public static bool op_Equality(Decimal d1, Decimal d2); // 0x100862DA8
	public static bool op_GreaterThan(Decimal d1, Decimal d2); // 0x10084AC00
	public static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2); // 0x100862E34
	public static bool op_LessThan(Decimal d1, Decimal d2); // 0x10084AC98
	public static bool op_LessThanOrEqual(Decimal d1, Decimal d2); // 0x100862ECC
}

// Namespace: System
public struct Boolean : IConvertible, IComparable, IComparable`1<bool>, IEquatable`1<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x0
	public static readonly string TrueString; // 0x8
	internal bool m_value; // 0x10

	// Methods
	private static void .cctor(); // 0x1008310D8
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1008322E4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x1008322EC
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x100832370
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x1008323CC
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10083242C
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x10083250C
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10083259C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100832618
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100832694
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100832710
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10083278C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x10083281C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100832898
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100832914
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100832990
	public int CompareTo(object obj); // 0x100832A70
	public override bool Equals(object obj); // 0x100832B08
	public int CompareTo(bool value); // 0x100832B2C
	public bool Equals(bool obj); // 0x100832B58
	public override int GetHashCode(); // 0x100832B78
	public static bool Parse(string value); // 0x100832B88
	public static bool TryParse(string value, out bool result); // 0x100832D90
	public override string ToString(); // 0x100832FD4
	public TypeCode GetTypeCode(); // 0x100832FDC
	public string ToString(IFormatProvider provider); // 0x100832FE4
}

// Namespace: System
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private PTR m_value; // 0x10
	public static readonly IntPtr Zero; // 0x0

	// Methods
	public void .ctor(int value); // 0x10087E718
	public void .ctor(long value); // 0x10087E72C
	public void .ctor(PTR value); // 0x10087E73C
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10087E7B4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10087E85C
	public static int get_Size(); // 0x10087E864
	public override bool Equals(object obj); // 0x10087E8F4
	public override int GetHashCode(); // 0x10087E904
	public long ToInt64(); // 0x10087E90C
	public PTR ToPointer(); // 0x10087E91C
	public override string ToString(); // 0x10087E924
	public string ToString(string format); // 0x10087E954
	public static bool op_Equality(IntPtr value1, IntPtr value2); // 0x10087E980
	public static bool op_Inequality(IntPtr value1, IntPtr value2); // 0x10087E98C
	public static IntPtr op_Explicit(int value); // 0x10087E998
	public static IntPtr op_Explicit(long value); // 0x10087E9A0
	public static IntPtr op_Explicit(PTR value); // 0x10087E9A8
	public static int op_Explicit(IntPtr value); // 0x10087E9B0
	public static PTR op_Explicit(IntPtr value); // 0x10087E9B8
}

// Namespace: System.Runtime.Serialization
public interface ISerializable // TypeDefIndex: 35
{
	// Methods
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context); // 0
}

// Namespace: System
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private PTR _pointer; // 0x10

	// Methods
	public void .ctor(ulong value); // 0x1009B464C
	public void .ctor(uint value); // 0x1009B4654
	public void .ctor(PTR value); // 0x1009B4660
	private static void .cctor(); // 0x1009B4668
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009B4750
	public override bool Equals(object obj); // 0x1009B47E0
	public override int GetHashCode(); // 0x1009B47E8
	public uint ToUInt32(); // 0x1009B47F0
	public ulong ToUInt64(); // 0x1009B47F8
	public PTR ToPointer(); // 0x1009B4800
	public override string ToString(); // 0x1009B4808
	public static int get_Size(); // 0x1009B4644
	public static bool op_Equality(UIntPtr value1, UIntPtr value2); // 0x1009B4830
	public static bool op_Inequality(UIntPtr value1, UIntPtr value2); // 0x1009B483C
	public static ulong op_Explicit(UIntPtr value); // 0x1009B4848
	public static uint op_Explicit(UIntPtr value); // 0x1009B4850
	public static UIntPtr op_Explicit(ulong value); // 0x1009B4858
	public static UIntPtr op_Explicit(PTR value); // 0x1009B4880
	public static PTR op_Explicit(UIntPtr value); // 0x1009B4888
	public static UIntPtr op_Explicit(uint value); // 0x1009B4890
}

// Namespace: System
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x58
	private MulticastDelegate kpm_next; // 0x60

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10089D3D8
	public sealed override bool Equals(object obj); // 0x10089D3E0
	public sealed override int GetHashCode(); // 0x10089D4A0
	public sealed override Delegate[] GetInvocationList(); // 0x10089D4A8
	protected sealed override Delegate CombineImpl(Delegate follow); // 0x10089D774
	private bool BaseEquals(MulticastDelegate value); // 0x10089D978
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail); // 0x10089D980
	protected sealed override Delegate RemoveImpl(Delegate value); // 0x10089DAB4
	public static bool op_Equality(MulticastDelegate d1, MulticastDelegate d2); // 0x10089DC2C
}

// Namespace: System
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x18
	private object m_target; // 0x20
	private IntPtr method; // 0x28
	private IntPtr delegate_trampoline; // 0x30
	private IntPtr method_code; // 0x38
	private MethodInfo method_info; // 0x40
	private MethodInfo original_method_info; // 0x48
	private DelegateData data; // 0x50

	// Methods
	public MethodInfo get_Method(); // 0x100862F90
	public object get_Target(); // 0x100863044
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x10086304C
	internal void SetMulticastInvoke(); // 0x100863060
	private static bool arg_type_match(Type delArgType, Type argType); // 0x100863064
	private static bool return_type_match(Type delReturnType, Type returnType); // 0x100863100
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x1008631A0
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x100863A5C
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x100863A64
	public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x100863A7C
	public static Delegate CreateDelegate(Type type, object target, string method); // 0x100863A90
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x100863AA4
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x100863EB4
	public static Delegate CreateDelegate(Type type, Type target, string method); // 0x100863F84
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x100863F90
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x100863A9C
	public virtual object Clone(); // 0x10086406C
	public override bool Equals(object obj); // 0x100864074
	public override int GetHashCode(); // 0x100864198
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100864204
	public virtual Delegate[] GetInvocationList(); // 0x100864230
	public static Delegate Combine(Delegate a, Delegate b); // 0x1008281B0
	public static Delegate Combine(Delegate[] delegates); // 0x1008642D4
	protected virtual Delegate CombineImpl(Delegate d); // 0x100864350
	public static Delegate Remove(Delegate source, Delegate value); // 0x100828390
	protected virtual Delegate RemoveImpl(Delegate d); // 0x1008643D4
	public static bool op_Equality(Delegate d1, Delegate d2); // 0x10086442C
	public static bool op_Inequality(Delegate d1, Delegate d2); // 0x1008644B0
}

// Namespace: System
public abstract struct Enum : IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x0

	// Methods
	protected void .ctor(); // 0x1008683E4
	private static void .cctor(); // 0x1008683EC
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100868480
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10086850C
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100868594
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10086861C
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x1008686A4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10086872C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x1008687B4
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10086883C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x1008688C4
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10086894C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x1008689D4
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x100868A5C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100868BCC
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100868C54
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x100868CDC
	public TypeCode GetTypeCode(); // 0x100868D64
	private object get_value(); // 0x100868EF0
	private object get_Value(); // 0x100868508
	public static Array GetValues(Type enumType); // 0x100868EF4
	public static string[] GetNames(Type enumType); // 0x10086901C
	private static int FindPosition(object value, Array values); // 0x1008691AC
	public static string GetName(Type enumType, object value); // 0x1008693A4
	public static bool IsDefined(Type enumType, object value); // 0x10086955C
	private static Type get_underlying_type(Type enumType); // 0x100869848
	public static Type GetUnderlyingType(Type enumType); // 0x100868E0C
	public static object Parse(Type enumType, string value); // 0x100869850
	private static int FindName(Hashtable name_hash, string[] names, string name, bool ignoreCase); // 0x100869F78
	private static ulong GetValue(object value, TypeCode typeCode); // 0x10086A1C4
	public static object Parse(Type enumType, string value, bool ignoreCase); // 0x1008698C8
	private int compare_value_to(object other); // 0x10086A8FC
	public int CompareTo(object target); // 0x10086A900
	public override string ToString(); // 0x10086AA0C
	public string ToString(IFormatProvider provider); // 0x100868B7C
	public string ToString(string format); // 0x10086AA5C
	public string ToString(string format, IFormatProvider provider); // 0x10086AB4C
	public static object ToObject(Type enumType, byte value); // 0x10086A470
	public static object ToObject(Type enumType, short value); // 0x10086A558
	public static object ToObject(Type enumType, int value); // 0x10086A6DC
	public static object ToObject(Type enumType, long value); // 0x10086A860
	public static object ToObject(Type enumType, object value); // 0x100869550
	public static object ToObject(Type enumType, sbyte value); // 0x10086A3D4
	public static object ToObject(Type enumType, ushort value); // 0x10086A5F4
	public static object ToObject(Type enumType, uint value); // 0x10086A778
	public static object ToObject(Type enumType, ulong value); // 0x10086A338
	public override bool Equals(object obj); // 0x10086B34C
	private int get_hashcode(); // 0x10086B368
	public override int GetHashCode(); // 0x10086B36C
	private static string FormatSpecifier_X(Type enumType, object value, bool upper); // 0x10086B370
	private static string FormatFlags(Type enumType, object value); // 0x10086B6E0
	public static string Format(Type enumType, object value, string format); // 0x10086AC3C
}

// Namespace: System
public abstract class Array : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 40
{
	// Methods
	private void .ctor(); // 0x100829F34
	private object System.Collections.IList.get_Item(int index); // 0x100829F3C
	private void System.Collections.IList.set_Item(int index, object value); // 0x10082A094
	private int System.Collections.IList.Add(object value); // 0x10082A184
	private void System.Collections.IList.Clear(); // 0x10082A1D8
	private bool System.Collections.IList.Contains(object value); // 0x10082A348
	private int System.Collections.IList.IndexOf(object value); // 0x10082A43C
	private void System.Collections.IList.Insert(int index, object value); // 0x10082A548
	private void System.Collections.IList.Remove(object value); // 0x10082A59C
	private void System.Collections.IList.RemoveAt(int index); // 0x10082A5F0
	private int System.Collections.ICollection.get_Count(); // 0x10082A644
	internal int InternalArray__ICollection_get_Count(); // 0x10082A648
	internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x10082A64C
	internal IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator(); // 0
	internal void InternalArray__ICollection_Clear(); // 0x10082A654
	internal void InternalArray__ICollection_Add(T item); // 0
	internal bool InternalArray__ICollection_Remove(T item); // 0
	internal bool InternalArray__ICollection_Contains(T item); // 0
	internal void InternalArray__ICollection_CopyTo(T[] array, int index); // 0
	internal void InternalArray__Insert(int index, T item); // 0
	internal void InternalArray__RemoveAt(int index); // 0x10082A6B4
	internal int InternalArray__IndexOf(T item); // 0
	internal T InternalArray__get_Item(int index); // 0
	internal void InternalArray__set_Item(int index, T item); // 0
	internal void GetGenericValueImpl(int pos, out T value); // 0
	internal void SetGenericValueImpl(int pos, T value); // 0
	public int get_Length(); // 0x10082A020
	public long get_LongLength(); // 0x10082A718
	public int get_Rank(); // 0x10082A08C
	private int GetRank(); // 0x10082A730
	public int GetLength(int dimension); // 0x10082A714
	public long GetLongLength(int dimension); // 0x10082A734
	public int GetLowerBound(int dimension); // 0x10082A214
	public object GetValue(int[] indices); // 0x10082A74C
	public void SetValue(object value, int[] indices); // 0x10082A750
	internal object GetValueImpl(int pos); // 0x10082A090
	internal void SetValueImpl(object value, int pos); // 0x10082A180
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x10082A754
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x10082A76C
	public bool get_IsSynchronized(); // 0x10082A77C
	public object get_SyncRoot(); // 0x10082A784
	public bool get_IsFixedSize(); // 0x10082A788
	public bool get_IsReadOnly(); // 0x10082A790
	public IEnumerator GetEnumerator(); // 0x10082A798
	public int GetUpperBound(int dimension); // 0x10082A840
	public object GetValue(int index); // 0x10082A884
	public object GetValue(int index1, int index2); // 0x10082A9B8
	public object GetValue(int index1, int index2, int index3); // 0x10082AA68
	public object GetValue(long index); // 0x10082AB3C
	public object GetValue(long index1, long index2); // 0x10082ABE4
	public object GetValue(long index1, long index2, long index3); // 0x10082ACDC
	public void SetValue(object value, long index); // 0x10082AE28
	public void SetValue(object value, long index1, long index2); // 0x10082B014
	public void SetValue(object value, long index1, long index2, long index3); // 0x10082B170
	public void SetValue(object value, int index); // 0x10082AED8
	public void SetValue(object value, int index1, int index2); // 0x10082B32C
	public void SetValue(object value, int index1, int index2, int index3); // 0x10082B3EC
	public static Array CreateInstance(Type elementType, int length); // 0x10082B4C8
	public static Array CreateInstance(Type elementType, int length1, int length2); // 0x10082B784
	public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x10082B834
	public static Array CreateInstance(Type elementType, int[] lengths); // 0x10082B55C
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x10082B908
	private static int[] GetIntArray(long[] values); // 0x10082BC98
	public static Array CreateInstance(Type elementType, long[] lengths); // 0x10082BDD4
	public object GetValue(long[] indices); // 0x10082BE60
	public void SetValue(object value, long[] indices); // 0x10082BEEC
	public static int BinarySearch(Array array, object value); // 0x10082BF80
	public static int BinarySearch(Array array, object value, IComparer comparer); // 0x10082C36C
	public static int BinarySearch(Array array, int index, int length, object value); // 0x10082C4EC
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x10082C740
	private static int DoBinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x10082C0F8
	public static void Clear(Array array, int index, int length); // 0x10082A218
	private static void ClearInternal(Array a, int index, int count); // 0x10082C99C
	public object Clone(); // 0x10082C9AC
	public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x1008255D4
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x10082C9B0
	public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x10082D070
	public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x10082D22C
	public static int IndexOf(Array array, object value); // 0x10082D2DC
	public static int IndexOf(Array array, object value, int startIndex); // 0x10082D50C
	public static int IndexOf(Array array, object value, int startIndex, int count); // 0x10082D370
	public void Initialize(); // 0x10082D5A4
	public static int LastIndexOf(Array array, object value); // 0x10082D5A8
	public static int LastIndexOf(Array array, object value, int startIndex); // 0x10082D664
	public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x10082D704
	private static Swapper get_swapper(Array array); // 0x10082D8A8
	private static Swapper get_swapper(T[] array); // 0
	public static void Reverse(Array array); // 0x10082D98C
	public static void Reverse(Array array, int index, int length); // 0x10082DA24
	public static void Sort(Array array); // 0x10082DEF8
	public static void Sort(Array keys, Array items); // 0x10082E364
	public static void Sort(Array array, IComparer comparer); // 0x10082E410
	public static void Sort(Array array, int index, int length); // 0x10082E4BC
	public static void Sort(Array keys, Array items, IComparer comparer); // 0x10082E4D8
	public static void Sort(Array keys, Array items, int index, int length); // 0x10082E588
	public static void Sort(Array array, int index, int length, IComparer comparer); // 0x10082E590
	public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x10082DF98
	private void int_swapper(int i, int j); // 0x10082EC58
	private void obj_swapper(int i, int j); // 0x10082ED40
	private void slow_swapper(int i, int j); // 0x10082EE68
	private void double_swapper(int i, int j); // 0x10082EEC4
	private static int new_gap(int gap); // 0x10082EFAC
	private static void combsort(double[] array, int start, int size, Swapper swap_items); // 0x10082E5B0
	private static void combsort(int[] array, int start, int size, Swapper swap_items); // 0x10082E78C
	private static void combsort(char[] array, int start, int size, Swapper swap_items); // 0x10082E950
	private static void qsort(Array keys, Array items, int low0, int high0, IComparer comparer); // 0x10082EB14
	private static void swap(Array keys, Array items, int i, int j); // 0x10082F26C
	private static int compare(object value1, object value2, IComparer comparer); // 0x10082EFF4
	public static void Sort(T[] array); // 0
	public static void Sort(T[] keys, T[] items); // 0
	public static void Sort(T[] array, IComparer`1<T> comparer); // 0
	public static void Sort(T[] keys, T[] items, IComparer`1<T> comparer); // 0
	public static void Sort(T[] array, int index, int length); // 0
	public static void Sort(T[] keys, T[] items, int index, int length); // 0
	public static void Sort(T[] array, int index, int length, IComparer`1<T> comparer); // 0
	public static void Sort(T[] keys, T[] items, int index, int length, IComparer`1<T> comparer); // 0
	public static void Sort(T[] array, Comparison`1<T> comparison); // 0
	internal static void Sort(T[] array, int length, Comparison`1<T> comparison); // 0
	private static void qsort(T[] keys, T[] items, int low0, int high0, IComparer`1<T> comparer); // 0
	private static int compare(T value1, T value2, IComparer`1<T> comparer); // 0
	private static void qsort(T[] array, int low0, int high0, Comparison`1<T> comparison); // 0
	private static void swap(T[] keys, T[] items, int i, int j); // 0
	private static void swap(T[] array, int i, int j); // 0
	public void CopyTo(Array array, int index); // 0x10082F338
	public void CopyTo(Array array, long index); // 0x10082F50C
	public static void Resize(T[] array, int newSize); // 0
	internal static void Resize(T[] array, int length, int newSize); // 0
	public static bool TrueForAll(T[] array, Predicate`1<T> match); // 0
	public static void ForEach(T[] array, Action`1<T> action); // 0
	public static T[] ConvertAll(T[] array, Converter`2<T, T> converter); // 0
	public static int FindLastIndex(T[] array, Predicate`1<T> match); // 0
	public static int FindLastIndex(T[] array, int startIndex, Predicate`1<T> match); // 0
	public static int FindLastIndex(T[] array, int startIndex, int count, Predicate`1<T> match); // 0
	public static int FindIndex(T[] array, Predicate`1<T> match); // 0
	public static int FindIndex(T[] array, int startIndex, Predicate`1<T> match); // 0
	public static int FindIndex(T[] array, int startIndex, int count, Predicate`1<T> match); // 0
	public static int BinarySearch(T[] array, T value); // 0
	public static int BinarySearch(T[] array, T value, IComparer`1<T> comparer); // 0
	public static int BinarySearch(T[] array, int index, int length, T value); // 0
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer`1<T> comparer); // 0
	public static int IndexOf(T[] array, T value); // 0
	public static int IndexOf(T[] array, T value, int startIndex); // 0
	public static int IndexOf(T[] array, T value, int startIndex, int count); // 0
	public static int LastIndexOf(T[] array, T value); // 0
	public static int LastIndexOf(T[] array, T value, int startIndex); // 0
	public static int LastIndexOf(T[] array, T value, int startIndex, int count); // 0
	public static T[] FindAll(T[] array, Predicate`1<T> match); // 0
	public static bool Exists(T[] array, Predicate`1<T> match); // 0
	public static ReadOnlyCollection`1<T> AsReadOnly(T[] array); // 0
	public static T Find(T[] array, Predicate`1<T> match); // 0
	public static T FindLast(T[] array, Predicate`1<T> match); // 0
	public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x10082F5BC
}

// Namespace: 
internal struct InternalEnumerator`1 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 41
{
	// Fields
	private Array array; // 0x0
	private int idx; // 0x0

	// Methods
	internal void .ctor(Array array); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: 
internal class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 42
{
	// Fields
	private Array enumeratee; // 0x10
	private int currentpos; // 0x18
	private int length; // 0x1C

	// Methods
	public void .ctor(Array arrayToEnumerate); // 0x10082A7F8
	public object get_Current(); // 0x10082F5C0
	public bool MoveNext(); // 0x10082F670
	public void Reset(); // 0x10082F690
	public object Clone(); // 0x10082F69C
}

// Namespace: 
private class ArrayReadOnlyList`1 : IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 43
{
	// Fields
	private T[] array; // 0x0

	// Methods
	public void .ctor(T[] array); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public T get_Item(int index); // 0
	public void set_Item(int index, T value); // 0
	public int get_Count(); // 0
	public bool get_IsReadOnly(); // 0
	public void Add(T item); // 0
	public void Clear(); // 0
	public bool Contains(T item); // 0
	public void CopyTo(T[] array, int index); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public int IndexOf(T item); // 0
	public void Insert(int index, T item); // 0
	public bool Remove(T item); // 0
	public void RemoveAt(int index); // 0
	private static Exception ReadOnlyError(); // 0
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 44
{
	// Fields
	internal int <i>__0; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal ArrayReadOnlyList`1<T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<T>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class Swapper : MulticastDelegate // TypeDefIndex: 45
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10082D97C
	public virtual void Invoke(int i, int j); // 0x10082DE68
	public virtual IAsyncResult BeginInvoke(int i, int j, AsyncCallback callback, object object); // 0x10082F6B8
	public virtual void EndInvoke(IAsyncResult result); // 0x10082F780
}

// Namespace: System.Collections
public interface ICollection : IEnumerable // TypeDefIndex: 46
{
	// Methods
	public abstract int get_Count(); // 0
	public abstract bool get_IsSynchronized(); // 0
	public abstract object get_SyncRoot(); // 0
	public abstract void CopyTo(Array array, int index); // 0
}

// Namespace: System.Collections
public interface IList : IEnumerable, ICollection // TypeDefIndex: 47
{
	// Methods
	public abstract bool get_IsFixedSize(); // 0
	public abstract bool get_IsReadOnly(); // 0
	public abstract object get_Item(int index); // 0
	public abstract void set_Item(int index, object value); // 0
	public abstract int Add(object value); // 0
	public abstract void Clear(); // 0
	public abstract bool Contains(object value); // 0
	public abstract int IndexOf(object value); // 0
	public abstract void Insert(int index, object value); // 0
	public abstract void Remove(object value); // 0
	public abstract void RemoveAt(int index); // 0
}

// Namespace: System.Collections.Generic
public interface IList`1 : IEnumerable, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 48
{
	// Methods
	public abstract int IndexOf(T item); // 0
	public abstract void Insert(int index, T item); // 0
	public abstract void RemoveAt(int index); // 0
	public abstract T get_Item(int index); // 0
	public abstract void set_Item(int index, T value); // 0
}

// Namespace: System.Collections.Generic
public interface ICollection`1 : IEnumerable, IEnumerable`1<T> // TypeDefIndex: 49
{
	// Methods
	public abstract int get_Count(); // 0
	public abstract bool get_IsReadOnly(); // 0
	public abstract void Add(T item); // 0
	public abstract void Clear(); // 0
	public abstract bool Contains(T item); // 0
	public abstract void CopyTo(T[] array, int arrayIndex); // 0
	public abstract bool Remove(T item); // 0
}

// Namespace: System
public struct Void // TypeDefIndex: 50
{
}

// Namespace: System
public abstract class Type : MemberInfo, IReflect, _Type // TypeDefIndex: 51
{
	// Fields
	internal const BindingFlags DefaultBindingFlags = 28; // 0x0
	internal RuntimeTypeHandle _impl; // 0x10
	public static readonly char Delimiter; // 0x0
	public static readonly Type[] EmptyTypes; // 0x8
	public static readonly MemberFilter FilterAttribute; // 0x10
	public static readonly MemberFilter FilterName; // 0x18
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x20
	public static readonly object Missing; // 0x28

	// Methods
	protected void .ctor(); // 0x1009AD358
	private static void .cctor(); // 0x1009AD360
	private static bool FilterName_impl(MemberInfo m, object filterCriteria); // 0x1009AD4BC
	private static bool FilterNameIgnoreCase_impl(MemberInfo m, object filterCriteria); // 0x1009AD678
	private static bool FilterAttribute_impl(MemberInfo m, object filterCriteria); // 0x1009AD874
	public abstract Assembly get_Assembly(); // 0
	public abstract string get_AssemblyQualifiedName(); // 0
	public TypeAttributes get_Attributes(); // 0x1009ADB7C
	public abstract Type get_BaseType(); // 0
	public override Type get_DeclaringType(); // 0x1009ADBCC
	public abstract string get_FullName(); // 0
	public bool get_HasElementType(); // 0x1009ADBD4
	public bool get_IsAbstract(); // 0x1009ADC24
	public bool get_IsArray(); // 0x1009ADC74
	public bool get_IsByRef(); // 0x1009ADCC4
	public bool get_IsClass(); // 0x1009ADD14
	public bool get_IsContextful(); // 0x1009ADE14
	public bool get_IsEnum(); // 0x1009ADE64
	public bool get_IsExplicitLayout(); // 0x1009ADF18
	public bool get_IsInterface(); // 0x1009ADD74
	public bool get_IsMarshalByRef(); // 0x1009ADF70
	public bool get_IsPointer(); // 0x1009ADFC0
	public bool get_IsPrimitive(); // 0x1009AE010
	public bool get_IsSealed(); // 0x1009AE060
	public bool get_IsSerializable(); // 0x1009AE0B0
	public bool get_IsValueType(); // 0x1009ADDC4
	public override MemberTypes get_MemberType(); // 0x1009AE318
	public abstract override Module get_Module(); // 0
	public abstract string get_Namespace(); // 0
	public override Type get_ReflectedType(); // 0x1009AE320
	public virtual RuntimeTypeHandle get_TypeHandle(); // 0x1009AE328
	public abstract Type get_UnderlyingSystemType(); // 0
	public override bool Equals(object o); // 0x1009AE3A4
	public bool Equals(Type o); // 0x1009AE444
	internal bool EqualsInternal(Type type); // 0x1009AE4E8
	private static Type internal_from_handle(IntPtr handle); // 0x1009AE4EC
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x1009AE4F4
	public static Type GetType(string typeName); // 0x10099AF48
	public static Type GetType(string typeName, bool throwOnError); // 0x1009AE504
	internal static TypeCode GetTypeCodeInternal(Type type); // 0x1009AE628
	public static TypeCode GetTypeCode(Type type); // 0x1009AE630
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x10097D8D0
	public static RuntimeTypeHandle GetTypeHandle(object o); // 0x1009AE72C
	internal static bool type_is_subtype_of(Type a, Type b, bool check_interfaces); // 0x1009AE308
	internal static bool type_is_assignable_from(Type a, Type b); // 0x1009AE7E0
	public Type GetType(); // 0x1009AE7EC
	public virtual bool IsSubclassOf(Type c); // 0x1009AE7F4
	public Type GetInterface(string name); // 0x1009AE8E4
	public abstract Type GetInterface(string name, bool ignoreCase); // 0
	public abstract Type[] GetInterfaces(); // 0
	public virtual bool IsAssignableFrom(Type c); // 0x1009AE948
	public virtual bool IsInstanceOfType(object o); // 0x1009AEAFC
	public virtual int GetArrayRank(); // 0x1009AEB00
	public abstract Type GetElementType(); // 0
	public EventInfo GetEvent(string name); // 0x1009AEB54
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0
	public virtual EventInfo[] GetEvents(); // 0x1009AEBB8
	public abstract EventInfo[] GetEvents(BindingFlags bindingAttr); // 0
	public FieldInfo GetField(string name); // 0x1009AEC0C
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr); // 0
	public FieldInfo[] GetFields(); // 0x1009AEC70
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr); // 0
	public override int GetHashCode(); // 0x1009AECC4
	public MethodInfo GetMethod(string name); // 0x1009AED7C
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x1009AEE48
	public MethodInfo GetMethod(string name, Type[] types); // 0x1009AEF18
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x1009AF090
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1009AEF34
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0
	internal MethodInfo GetMethodImplInternal(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1009AF0A8
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0
	public PropertyInfo[] GetProperties(); // 0x1009AF140
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0
	public PropertyInfo GetProperty(string name); // 0x1009AF194
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr); // 0x1009AF260
	public PropertyInfo GetProperty(string name, Type returnType); // 0x1009AF330
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x1009AF400
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1009AF420
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0
	internal PropertyInfo GetPropertyImplInternal(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1009AF57C
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0
	protected abstract TypeAttributes GetAttributeFlagsImpl(); // 0
	protected abstract bool HasElementTypeImpl(); // 0
	protected abstract bool IsArrayImpl(); // 0
	protected abstract bool IsByRefImpl(); // 0
	protected abstract bool IsPointerImpl(); // 0
	protected abstract bool IsPrimitiveImpl(); // 0
	internal static bool IsArrayImpl(Type type); // 0x1009AF614
	protected virtual bool IsValueTypeImpl(); // 0x1009AF61C
	protected virtual bool IsContextfulImpl(); // 0x1009AF740
	protected virtual bool IsMarshalByRefImpl(); // 0x1009AF7FC
	public ConstructorInfo GetConstructor(Type[] types); // 0x1009AF8B8
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x1009AF9F8
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1009AF8D4
	public ConstructorInfo[] GetConstructors(); // 0x1009AFA10
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0
	public override string ToString(); // 0x1009AFA64
	internal bool get_IsSystemType(); // 0x1009AE29C
	public virtual Type[] GetGenericArguments(); // 0x1009AFAB0
	public virtual bool get_ContainsGenericParameters(); // 0x1009AFB04
	public virtual bool get_IsGenericTypeDefinition(); // 0x1009AFB0C
	internal Type GetGenericTypeDefinition_impl(); // 0x1009AFB10
	public virtual Type GetGenericTypeDefinition(); // 0x1009AFB14
	public virtual bool get_IsGenericType(); // 0x1009AFB74
	private static Type MakeGenericType(Type gt, Type[] types); // 0x1009AFB78
	public virtual Type MakeGenericType(Type[] typeArguments); // 0x1009AFB84
	public virtual bool get_IsGenericParameter(); // 0x1009AFEEC
	public bool get_IsNested(); // 0x1009AFEF4
	private Type make_byref_type(); // 0x1009AFF44
	public virtual Type MakeByRefType(); // 0x1009AFF48
	internal object[] GetPseudoCustomAttributes(); // 0x1009AFF4C
	internal bool get_IsUserType(); // 0x1009B0144
}

// Namespace: System.Reflection
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 52
{
	// Methods
	protected void .ctor(); // 0x1008BECD4
	public abstract Type get_DeclaringType(); // 0
	public abstract MemberTypes get_MemberType(); // 0
	public abstract string get_Name(); // 0
	public abstract Type get_ReflectedType(); // 0
	public virtual Module get_Module(); // 0x1008BAD80
	public abstract bool IsDefined(Type attributeType, bool inherit); // 0
	public abstract object[] GetCustomAttributes(bool inherit); // 0
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit); // 0
}

// Namespace: System.Reflection
public interface ICustomAttributeProvider // TypeDefIndex: 53
{
	// Methods
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit); // 0
	public abstract bool IsDefined(Type attributeType, bool inherit); // 0
}

// Namespace: System.Runtime.InteropServices
public interface _MemberInfo // TypeDefIndex: 54
{
}

// Namespace: System.Reflection
public interface IReflect // TypeDefIndex: 55
{
}

// Namespace: System.Runtime.InteropServices
public interface _Type // TypeDefIndex: 56
{
}

// Namespace: System
public class Exception : ISerializable, _Exception // TypeDefIndex: 57
{
	// Fields
	private IntPtr[] trace_ips; // 0x10
	private Exception inner_exception; // 0x18
	internal string message; // 0x20
	private string help_link; // 0x28
	private string class_name; // 0x30
	private string stack_trace; // 0x38
	private string _remoteStackTraceString; // 0x40
	private int remote_stack_index; // 0x48
	internal int hresult; // 0x4C
	private string source; // 0x50
	private IDictionary _data; // 0x58

	// Methods
	public void .ctor(); // 0x10086D624
	public void .ctor(string message); // 0x100867F18
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10086D638
	public void .ctor(string message, Exception innerException); // 0x10086D970
	public Exception get_InnerException(); // 0x10086D9B4
	protected int get_HResult(); // 0x10086D9BC
	protected void set_HResult(int value); // 0x100866344
	private string get_ClassName(); // 0x10086D9C4
	public virtual string get_Message(); // 0x10086DA38
	public virtual string get_Source(); // 0x10086DAE4
	public virtual string get_StackTrace(); // 0x10086DC80
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10086E564
	public override string ToString(); // 0x10086E7A4
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x10086E0A0
	public Type GetType(); // 0x10086DA30
}

// Namespace: System.Runtime.InteropServices
public interface _Exception // TypeDefIndex: 58
{
}

// Namespace: System
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 59
{
	// Fields
	private IntPtr value; // 0x10

	// Methods
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10090BBCC
	public IntPtr get_Value(); // 0x10090BBD4
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10090BD30
	public override bool Equals(object obj); // 0x10090BE00
	public override int GetHashCode(); // 0x10090BE08
}

// Namespace: System
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 60
{
	// Fields
	private IntPtr value; // 0x10

	// Methods
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10090C3B8
	public IntPtr get_Value(); // 0x10090C3C0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10090C53C
	public override bool Equals(object obj); // 0x10090C60C
	public override int GetHashCode(); // 0x10090C614
}

// Namespace: System
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 61
{
	// Methods
	public void .ctor(); // 0x1008A5630
}

// Namespace: System.Runtime.InteropServices
public sealed class OutAttribute : Attribute // TypeDefIndex: 62
{
	// Methods
	public void .ctor(); // 0x1008CCCE0
}

// Namespace: System
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 63
{
	// Fields
	private string _message; // 0x10
	private bool _error; // 0x18

	// Methods
	public void .ctor(); // 0x1008A4E34
	public void .ctor(string message); // 0x1008A4E3C
	public void .ctor(string message, bool error); // 0x1008A4E68
}

// Namespace: System.Runtime.InteropServices
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 64
{
	// Fields
	public CallingConvention CallingConvention; // 0x10
	public CharSet CharSet; // 0x14
	private string Dll; // 0x18
	public string EntryPoint; // 0x20
	public bool ExactSpelling; // 0x28
	public bool PreserveSig; // 0x29
	public bool SetLastError; // 0x2A
	public bool BestFitMapping; // 0x2B
	public bool ThrowOnUnmappableChar; // 0x2C

	// Methods
	public void .ctor(string dllName); // 0x1008CC22C
	public string get_Value(); // 0x1008CC258
}

// Namespace: System.Runtime.InteropServices
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 65
{
	// Fields
	private UnmanagedType utype; // 0x10
	public UnmanagedType ArraySubType; // 0x14
	public string MarshalCookie; // 0x18
	public string MarshalType; // 0x20
	public Type MarshalTypeRef; // 0x28
	public int SizeConst; // 0x30
	public short SizeParamIndex; // 0x34

	// Methods
	public void .ctor(UnmanagedType unmanagedType); // 0x1008CCC2C
}

// Namespace: System.Runtime.InteropServices
public sealed class InAttribute : Attribute // TypeDefIndex: 66
{
	// Methods
	public void .ctor(); // 0x1008CC8CC
}

// Namespace: System.Security.Permissions
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 67
{
	// Methods
	public abstract IPermission CreatePermission(); // 0
}

// Namespace: System.Runtime.InteropServices
public sealed class GuidAttribute : Attribute // TypeDefIndex: 68
{
	// Fields
	private string guidValue; // 0x10

	// Methods
	public void .ctor(string guid); // 0x1008CC8A0
}

// Namespace: System.Reflection
public sealed class AssemblyCultureAttribute : Attribute // TypeDefIndex: 69
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string culture); // 0x1008A7150
}

// Namespace: System.Reflection
public sealed class AssemblyVersionAttribute : Attribute // TypeDefIndex: 70
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string version); // 0x1008A8280
	public string get_Version(); // 0x1008A82AC
}

// Namespace: System.Runtime.InteropServices
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 71
{
	// Methods
	public void .ctor(); // 0x1008CC1CC
}

// Namespace: System.Runtime.InteropServices
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 72
{
	// Methods
	public void .ctor(); // 0x1008CCCD8
}

// Namespace: System.Runtime.CompilerServices
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 73
{
	// Methods
	public void .ctor(); // 0x1008CBA10
}

// Namespace: System.Runtime.CompilerServices
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 74
{
	// Fields
	private string assemblyName; // 0x10
	private bool all_visible; // 0x18

	// Methods
	public void .ctor(string assemblyName); // 0x1008CBAFC
}

// Namespace: System.Runtime.CompilerServices
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 75
{
	// Fields
	private bool wrap_non_exception_throws; // 0x10

	// Methods
	public void .ctor(); // 0x1008CBB30
	public void set_WrapNonExceptionThrows(bool value); // 0x1008CBB38
}

// Namespace: System.Diagnostics
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 76
{
	// Methods
	public void .ctor(); // 0x100864EE0
}

// Namespace: System.Reflection
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 77
{
	// Fields
	private string member_name; // 0x10

	// Methods
	public void .ctor(string memberName); // 0x1008AC338
	public string get_MemberName(); // 0x10089CBB8
}

// Namespace: System.Runtime.CompilerServices
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 78
{
	// Fields
	private byte scale; // 0x10
	private bool sign; // 0x11
	private int hi; // 0x14
	private int mid; // 0x18
	private int low; // 0x1C

	// Methods
	public void .ctor(byte scale, byte sign, uint hi, uint mid, uint low); // 0x1008CBA18
}

// Namespace: System.Runtime.InteropServices
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 79
{
	// Fields
	private int val; // 0x10

	// Methods
	public void .ctor(int offset); // 0x1008CC314
}

// Namespace: System
public struct RuntimeArgumentHandle // TypeDefIndex: 80
{
	// Fields
	internal IntPtr args; // 0x10

}

// Namespace: System
public sealed class AsyncCallback : MulticastDelegate // TypeDefIndex: 81
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10082F944
	public virtual void Invoke(IAsyncResult ar); // 0x10082F954
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object); // 0x10082F9F0
	public virtual void EndInvoke(IAsyncResult result); // 0x10082FA40
}

// Namespace: System
public interface IAsyncResult // TypeDefIndex: 82
{
	// Methods
	public abstract object get_AsyncState(); // 0
	public abstract WaitHandle get_AsyncWaitHandle(); // 0
	public abstract bool get_IsCompleted(); // 0
}

// Namespace: System
public struct TypedReference // TypeDefIndex: 83
{
	// Fields
	private RuntimeTypeHandle type; // 0x10
	private IntPtr value; // 0x18
	private IntPtr klass; // 0x20

	// Methods
	public override bool Equals(object o); // 0x1009B0328
	public override int GetHashCode(); // 0x1009B0424
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 84
{
	// Fields
	private IntPtr sig; // 0x10
	private IntPtr args; // 0x18
	private int next_arg; // 0x20
	private int num_args; // 0x24

	// Methods
	public override bool Equals(object o); // 0x10082961C
	public override int GetHashCode(); // 0x100829628
}

// Namespace: System
public abstract class MarshalByRefObject // TypeDefIndex: 85
{
	// Fields
	private ServerIdentity _identity; // 0x10

	// Methods
	protected void .ctor(); // 0x100893D7C
	internal ServerIdentity get_ObjectIdentity(); // 0x100896F54
	internal void set_ObjectIdentity(ServerIdentity value); // 0x100896F5C
	public virtual ObjRef CreateObjRef(Type requestedType); // 0x100896F64
	public virtual object InitializeLifetimeService(); // 0x100897030
}

// Namespace: System
public struct Nullable`1 // TypeDefIndex: 86
{
	// Fields
	internal T value; // 0x0
	internal bool has_value; // 0x0

	// Methods
	public void .ctor(T value); // 0
	public bool get_HasValue(); // 0
	public T get_Value(); // 0
	public override bool Equals(object other); // 0
	private bool Equals(Nullable`1<T> other); // 0
	public override int GetHashCode(); // 0
	public T GetValueOrDefault(); // 0
	public override string ToString(); // 0
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 87
{
	// Methods
	private static void InitializeArray(Array array, IntPtr fldHandle); // 0x1008CBB40
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x1008CBB4C
	public static int get_OffsetToStringData(); // 0x1008CBC0C
	private static void RunClassConstructor(IntPtr type); // 0x1008CBC10
	public static void RunClassConstructor(RuntimeTypeHandle type); // 0x1008CBC18
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 88
{
	// Methods
	public static string GetText(string msg); // 0x1007EF084
	public static string GetText(string fmt, object[] args); // 0x1007EF08C
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 89
{
	// Methods
	protected void .ctor(bool ownsHandle); // 0x1007EF108
	public override bool get_IsInvalid(); // 0x1007EF148
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 90
{
	// Methods
	public void .ctor(IntPtr existingHandle, bool ownsHandle); // 0x1007EF1C4
	protected override bool ReleaseHandle(); // 0x1007EF220
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 91
{
	// Fields
	private readonly TableRange[] ranges; // 0x10
	public readonly int TotalCount; // 0x18
	private int defaultIndex; // 0x1C
	private int defaultCP; // 0x20

	// Methods
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x1007EF244
	public int ToIndex(int cp); // 0x1007EF474
}

// Namespace: 
internal struct TableRange // TypeDefIndex: 92
{
	// Fields
	public readonly int Start; // 0x10
	public readonly int End; // 0x14
	public readonly int Count; // 0x18
	public readonly int IndexStart; // 0x1C
	public readonly int IndexEnd; // 0x20

	// Methods
	public void .ctor(int start, int end, int indexStart); // 0x1007EF584
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 93
{
	// Fields
	public readonly int LCID; // 0x10
	public readonly int TailoringIndex; // 0x14
	public readonly int TailoringCount; // 0x18
	public readonly bool FrenchSort; // 0x1C

	// Methods
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x1007EFDB0
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 94
{
	// Fields
	public readonly char[] Source; // 0x10
	public readonly string Replacement; // 0x18
	public readonly byte[] SortKey; // 0x20

	// Methods
	public void .ctor(char[] source, string replacement, byte[] sortkey); // 0x1007EF5D8
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 95
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x0

	// Methods
	public void .ctor(); // 0x1007EF618
	private static void .cctor(); // 0x1007EF620
	public int Compare(object o1, object o2); // 0x1007EF684
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 96
{
	// Fields
	public byte Source; // 0x10
	public byte Replace; // 0x11

	// Methods
	public void .ctor(byte source, byte replace); // 0x1007EF7D4
}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 97
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x0

	// Methods
	public void .ctor(); // 0x1007EF810
	private static void .cctor(); // 0x1007EF818
	public int Compare(object o1, object o2); // 0x1007EF87C
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 98
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly PTR ignorableFlags; // 0x8
	private static readonly PTR categories; // 0x10
	private static readonly PTR level1; // 0x18
	private static readonly PTR level2; // 0x20
	private static readonly PTR level3; // 0x28
	private static PTR cjkCHScategory; // 0x30
	private static PTR cjkCHTcategory; // 0x38
	private static PTR cjkJAcategory; // 0x40
	private static PTR cjkKOcategory; // 0x48
	private static PTR cjkCHSlv1; // 0x50
	private static PTR cjkCHTlv1; // 0x58
	private static PTR cjkJAlv1; // 0x60
	private static PTR cjkKOlv1; // 0x68
	private static PTR cjkKOlv2; // 0x70
	private static readonly char[] tailoringArr; // 0x78
	private static readonly TailoringInfo[] tailoringInfos; // 0x80
	private static object forLock; // 0x88
	public static readonly bool isReady; // 0x90
	private static Dictionary`2<string, int> <>f__switch$map2; // 0x98
	private static Dictionary`2<string, int> <>f__switch$map3; // 0xA0
	private static Dictionary`2<string, int> <>f__switch$map4; // 0xA8

	// Methods
	private static void .cctor(); // 0x1007EF904
	public static TailoringInfo GetTailoringInfo(int lcid); // 0x1007EFE00
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, Contraction[] contractions, Level2Map[] diacriticals); // 0x1007EFF34
	private static void SetCJKReferences(string name, CodePointIndexer cjkIndexer, PTR catTable, PTR lv1Table, CodePointIndexer lv2Indexer, PTR lv2Table); // 0x1007F06B8
	public static byte Category(int cp); // 0x1007F0A54
	public static byte Level1(int cp); // 0x1007F0B08
	public static byte Level2(int cp); // 0x1007F0BBC
	public static byte Level3(int cp); // 0x1007F0C70
	public static bool IsIgnorable(int cp, byte flag); // 0x1007F0D24
	public static bool IsIgnorableNonSpacing(int cp); // 0x1007F0E4C
	public static int ToKanaTypeInsensitive(int i); // 0x1007F0EB4
	public static int ToWidthCompat(int i); // 0x1007F0EDC
	public static bool HasSpecialWeight(char c); // 0x1007F10E8
	public static bool IsHalfWidthKana(char c); // 0x1007F1168
	public static bool IsHiragana(char c); // 0x1007F117C
	public static bool IsJapaneseSmallLetter(char c); // 0x1007F1190
	public static bool get_IsReady(); // 0x1007F12D8
	private static IntPtr GetResource(string name); // 0x1007EFD38
	private static uint UInt32FromBytePtr(PTR raw, uint idx); // 0x1007EFD8C
	public static void FillCJK(string culture, CodePointIndexer cjkIndexer, PTR catTable, PTR lv1Table, CodePointIndexer lv2Indexer, PTR lv2Table); // 0x1007F1340
	private static void FillCJKCore(string culture, CodePointIndexer cjkIndexer, PTR catTable, PTR lv1Table, CodePointIndexer cjkLv2Indexer, PTR lv2Table); // 0x1007F14A0
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 99
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x8
	public static readonly CodePointIndexer Level1; // 0x10
	public static readonly CodePointIndexer Level2; // 0x18
	public static readonly CodePointIndexer Level3; // 0x20
	public static readonly CodePointIndexer CjkCHS; // 0x28
	public static readonly CodePointIndexer Cjk; // 0x30

	// Methods
	private static void .cctor(); // 0x1007F1BC8
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 100
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x8
	private readonly TextInfo textInfo; // 0x10
	private readonly bool frenchSort; // 0x18
	private readonly PTR cjkCatTable; // 0x20
	private readonly PTR cjkLv1Table; // 0x28
	private readonly CodePointIndexer cjkIndexer; // 0x30
	private readonly PTR cjkLv2Table; // 0x38
	private readonly CodePointIndexer cjkLv2Indexer; // 0x40
	private readonly int lcid; // 0x48
	private readonly Contraction[] contractions; // 0x50
	private readonly Level2Map[] level2Maps; // 0x58
	private readonly byte[] unsafeFlags; // 0x60

	// Methods
	public void .ctor(CultureInfo culture); // 0x1007F2258
	private static void .cctor(); // 0x1007F2740
	private void SetCJKTable(CultureInfo culture, CodePointIndexer cjkIndexer, PTR catTable, PTR lv1Table, CodePointIndexer lv2Indexer, PTR lv2Table); // 0x1007F2640
	private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x1007F2840
	private byte Category(int cp); // 0x1007F2920
	private byte Level1(int cp); // 0x1007F29FC
	private byte Level2(int cp, ExtenderType ext); // 0x1007F2AD8
	private static bool IsHalfKana(int cp, CompareOptions opt); // 0x1007F2C9C
	private Contraction GetContraction(string s, int start, int end); // 0x1007F2D24
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x1007F2E00
	private Contraction GetTailContraction(string s, int start, int end); // 0x1007F2F54
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x1007F3030
	private int FilterOptions(int i, CompareOptions opt); // 0x1007F3288
	private ExtenderType GetExtenderType(int i); // 0x1007F33D8
	private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x1007F34D0
	private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x1007F3518
	private static bool IsIgnorable(int i, CompareOptions opt); // 0x1007F376C
	private bool IsSafe(int i); // 0x1007F3808
	public SortKey GetSortKey(string s, CompareOptions options); // 0x1007F3898
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x1007F38EC
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x1007F3BEC
	private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x1007F4054
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x1007F4634
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x1007F479C
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup); // 0x1007F4B88
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x1007F52B0
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x1007F5798
	private void ClearBuffer(PTR buffer, int size); // 0x1007F4038
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2); // 0x1007F5948
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, Context ctx); // 0x1007F5950
	private int CompareFlagPair(bool b1, bool b2); // 0x1007F6CCC
	public bool IsPrefix(string src, string target, CompareOptions opt); // 0x1007F6CF0
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x1007F6D4C
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, Context ctx); // 0x1007F6E5C
	public bool IsSuffix(string src, string target, CompareOptions opt); // 0x1007F6F08
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x1007F6F7C
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x1007F71B4
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x1007F7340
	private int IndexOfOrdinal(string s, string target, int start, int length); // 0x1007F7524
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x1007F762C
	private int IndexOfSortKey(string s, int start, int length, PTR sortkey, char target, int ti, bool noLv4, Context ctx); // 0x1007F7CB4
	private int IndexOf(string s, string target, int start, int length, PTR targetSortKey, Context ctx); // 0x1007F77C0
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x1007F705C
	private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x1007F7F18
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x1007F809C
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, PTR sortkey, int ti, bool noLv4, Context ctx); // 0x1007F8874
	private int LastIndexOf(string s, string target, int start, int length, PTR targetSortKey, Context ctx); // 0x1007F831C
	private bool MatchesForward(string s, int idx, int end, int ti, PTR sortkey, bool noLv4, Context ctx); // 0x1007F7D54
	private bool MatchesForwardCore(string s, int idx, int end, int ti, PTR sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x1007F8AFC
	private bool MatchesPrimitive(CompareOptions opt, PTR source, int si, ExtenderType ext, PTR target, int ti, bool noLv4); // 0x1007F8E6C
	private bool MatchesBackward(string s, int idx, int end, int orgStart, int ti, PTR sortkey, bool noLv4, Context ctx); // 0x1007F8924
	private bool MatchesBackwardCore(string s, int idx, int end, int orgStart, int ti, PTR sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x1007F9110
}

// Namespace: 
internal struct Context // TypeDefIndex: 101
{
	// Fields
	public readonly CompareOptions Option; // 0x10
	public readonly PTR NeverMatchFlags; // 0x18
	public readonly PTR AlwaysMatchFlags; // 0x20
	public PTR Buffer1; // 0x28
	public PTR Buffer2; // 0x30
	public int PrevCode; // 0x38
	public PTR PrevSortKey; // 0x40
	public readonly bool QuickCheckPossible; // 0x48

	// Methods
	public void .ctor(CompareOptions opt, PTR alwaysMatchFlags, PTR neverMatchFlags, PTR buffer1, PTR buffer2, PTR prev1, bool quickCheckPossible); // 0x1007F958C
}

// Namespace: 
private struct PreviousInfo // TypeDefIndex: 102
{
	// Fields
	public int Code; // 0x10
	public PTR SortKey; // 0x18

	// Methods
	public void .ctor(bool dummy); // 0x1007F96E0
}

// Namespace: 
private struct Escape // TypeDefIndex: 103
{
	// Fields
	public string Source; // 0x10
	public int Index; // 0x18
	public int Start; // 0x1C
	public int End; // 0x20
	public int Optional; // 0x24

}

// Namespace: 
private sealed class ExtenderType : Enum // TypeDefIndex: 104
{
	// Fields
	public int value__; // 0x10
	public const ExtenderType None = 0; // 0x0
	public const ExtenderType Simple = 1; // 0x0
	public const ExtenderType Voiced = 2; // 0x0
	public const ExtenderType Conditional = 3; // 0x0
	public const ExtenderType Buggy = 4; // 0x0

}

// Namespace: System.Globalization
public class SortKey // TypeDefIndex: 105
{
	// Fields
	private readonly string source; // 0x10
	private readonly CompareOptions options; // 0x18
	private readonly byte[] key; // 0x20
	private readonly int lcid; // 0x28

	// Methods
	internal void .ctor(int lcid, string source, CompareOptions opt); // 0x100870178
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x100876620
	public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x100876674
	public virtual string get_OriginalString(); // 0x1008768D4
	public virtual byte[] get_KeyData(); // 0x1008768DC
	public override bool Equals(object value); // 0x1008768E4
	public override int GetHashCode(); // 0x1008769A4
	public override string ToString(); // 0x100876A44
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 106
{
	// Fields
	private int l1; // 0x10
	private int l2; // 0x14
	private int l3; // 0x18
	private int l4s; // 0x1C
	private int l4t; // 0x20
	private int l4k; // 0x24
	private int l4w; // 0x28
	private int l5; // 0x2C
	private byte[] l1b; // 0x30
	private byte[] l2b; // 0x38
	private byte[] l3b; // 0x40
	private byte[] l4sb; // 0x48
	private byte[] l4tb; // 0x50
	private byte[] l4kb; // 0x58
	private byte[] l4wb; // 0x60
	private byte[] l5b; // 0x68
	private string source; // 0x70
	private bool processLevel2; // 0x78
	private bool frenchSort; // 0x79
	private bool frenchSorted; // 0x7A
	private int lcid; // 0x7C
	private CompareOptions options; // 0x80

	// Methods
	public void .ctor(int lcid); // 0x1007F39B8
	public void Reset(); // 0x1007F971C
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x1007F39C0
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x1007F4594
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x1007F46F8
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x1007F4430
	private void AppendLevel5(byte category, byte lv1); // 0x1007F9814
	private void AppendBufferPrimitive(byte value, byte[] buf, int bidx); // 0x1007F972C
	public SortKey GetResultAndReset(); // 0x1007F400C
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x1007F9D98
	public SortKey GetResult(); // 0x1007F98C0
}

// Namespace: Mono
internal class Runtime // TypeDefIndex: 107
{
	// Methods
	internal static string GetDisplayName(); // 0x1007FFC78
}

// Namespace: Mono.Math
internal class BigInteger // TypeDefIndex: 108
{
	// Fields
	private uint length; // 0x10
	private uint[] data; // 0x18
	internal static readonly uint[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x8

	// Methods
	public void .ctor(Sign sign, uint len); // 0x1007F9E20
	public void .ctor(BigInteger bi); // 0x1007F9EA8
	public void .ctor(BigInteger bi, uint len); // 0x1007F9FB8
	public void .ctor(byte[] inData); // 0x1007FA0B8
	public void .ctor(uint ui); // 0x1007FA4A0
	private static void .cctor(); // 0x1007FA544
	private static RandomNumberGenerator get_Rng(); // 0x1007FA5D4
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x1007FA694
	public static BigInteger GenerateRandom(int bits); // 0x1007FA85C
	public void Randomize(RandomNumberGenerator rng); // 0x1007FA8C8
	public void Randomize(); // 0x1007FABD0
	public int BitCount(); // 0x1007FAB3C
	public bool TestBit(uint bitNum); // 0x1007FAC3C
	public bool TestBit(int bitNum); // 0x1007FAC9C
	public void SetBit(uint bitNum); // 0x1007FAD94
	public void SetBit(uint bitNum, bool value); // 0x1007FAD9C
	public int LowestSetBit(); // 0x1007FAE28
	public byte[] GetBytes(); // 0x1007FAEB4
	public string ToString(uint radix); // 0x1007FB058
	public string ToString(uint radix, string characterSet); // 0x1007FB0B8
	private void Normalize(); // 0x1007FA424
	public void Clear(); // 0x1007FB448
	public override int GetHashCode(); // 0x1007FB4B0
	public override string ToString(); // 0x1007FB52C
	public override bool Equals(object o); // 0x1007FB534
	public BigInteger ModInverse(BigInteger modulus); // 0x1007FB950
	public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x1007FBFC0
	public bool IsProbablePrime(); // 0x1007FC250
	public static BigInteger GeneratePseudoPrime(int bits); // 0x1007FC504
	public void Incr2(); // 0x1007FC5AC
	public static BigInteger op_Implicit(uint value); // 0x1007FC438
	public static BigInteger op_Implicit(int value); // 0x1007FC6F4
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2); // 0x1007FC788
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2); // 0x1007FCAE4
	public static uint op_Modulus(BigInteger bi, uint ui); // 0x1007FC4B4
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2); // 0x1007FCF54
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2); // 0x1007FD608
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2); // 0x1007FD644
	public static BigInteger op_Multiply(BigInteger bi, int i); // 0x1007FD914
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal); // 0x1007FDB48
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal); // 0x1007FDD78
	public static bool op_Equality(BigInteger bi1, uint ui); // 0x1007FAAC8
	public static bool op_Inequality(BigInteger bi1, uint ui); // 0x1007FB3D4
	public static bool op_Equality(BigInteger bi1, BigInteger bi2); // 0x1007FB670
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2); // 0x1007FDF68
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2); // 0x1007FE038
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2); // 0x1007FE054
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x1007FE06C
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x1007FC498
}

// Namespace: 
public sealed class Sign : Enum // TypeDefIndex: 109
{
	// Fields
	public int value__; // 0x10
	public const Sign Negative = -1; // 0x0
	public const Sign Zero = 0; // 0x0
	public const Sign Positive = 1; // 0x0

}

// Namespace: 
internal sealed class ModulusRing // TypeDefIndex: 110
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x18

	// Methods
	public void .ctor(BigInteger modulus); // 0x1007FC040
	public void BarrettReduction(BigInteger x); // 0x1007FEA74
	public BigInteger Multiply(BigInteger a, BigInteger b); // 0x1007FECD4
	public BigInteger Difference(BigInteger a, BigInteger b); // 0x1007FE870
	public BigInteger Pow(BigInteger a, BigInteger k); // 0x1007FC134
	public BigInteger Pow(uint b, BigInteger exp); // 0x1007FEEA4
}

// Namespace: 
private sealed class Kernel // TypeDefIndex: 111
{
	// Methods
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2); // 0x1007FC870
	public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x1007FCC58
	public static void MinusEq(BigInteger big, BigInteger small); // 0x1007FE088
	public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x1007FE220
	public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x1007FB740
	public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x1007FB304
	public static uint DwordMod(BigInteger n, uint d); // 0x1007FCEBC
	public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x1007FE474
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x1007FCF94
	public static BigInteger LeftShift(BigInteger bi, int n); // 0x1007FDB4C
	public static BigInteger RightShift(BigInteger bi, int n); // 0x1007FDD7C
	public static BigInteger MultiplyByDword(BigInteger n, uint f); // 0x1007FDA0C
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x1007FD804
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x1007FE64C
	public static uint modInverse(BigInteger bi, uint modulus); // 0x1007FE7A8
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x1007FB960
}

// Namespace: Mono.Math.Prime
internal sealed class ConfidenceFactor : Enum // TypeDefIndex: 112
{
	// Fields
	public int value__; // 0x10
	public const ConfidenceFactor ExtraLow = 0; // 0x0
	public const ConfidenceFactor Low = 1; // 0x0
	public const ConfidenceFactor Medium = 2; // 0x0
	public const ConfidenceFactor High = 3; // 0x0
	public const ConfidenceFactor ExtraHigh = 4; // 0x0
	public const ConfidenceFactor Provable = 5; // 0x0

}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests // TypeDefIndex: 113
{
	// Methods
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x1007FF5C8
	public static bool Test(BigInteger n, ConfidenceFactor confidence); // 0x1007FC4B8
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x1007FF998
	public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence); // 0x1007FF7A4
}

// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase // TypeDefIndex: 114
{
	// Methods
	protected void .ctor(); // 0x1007FEF1C
	public virtual ConfidenceFactor get_Confidence(); // 0x1007FEF24
	public virtual PrimalityTest get_PrimalityTest(); // 0x1007FEF2C
	public virtual int get_TrialDivisionBounds(); // 0x1007FEFA0
	public abstract BigInteger GenerateNewPrime(int bits); // 0
}

// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 115
{
	// Methods
	public void .ctor(); // 0x1007FC5A4
	protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x1007FEFA8
	public override BigInteger GenerateNewPrime(int bits); // 0x1007FF030
	public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x1007FF090
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x1007FF4CC
}

// Namespace: Mono.Security
internal class ASN1 // TypeDefIndex: 116
{
	// Fields
	private byte m_nTag; // 0x10
	private byte[] m_aValue; // 0x18
	private ArrayList elist; // 0x20

	// Methods
	public void .ctor(byte tag); // 0x1007FFC7C
	public void .ctor(byte tag, byte[] data); // 0x1007FFCAC
	public void .ctor(byte[] data); // 0x1007FFCE8
	public int get_Count(); // 0x1007FFFB8
	public byte get_Tag(); // 0x10080001C
	public int get_Length(); // 0x100800024
	public byte[] get_Value(); // 0x10080003C
	public void set_Value(byte[] value); // 0x100800150
	private bool CompareArray(byte[] array1, byte[] array2); // 0x10080023C
	public bool CompareValue(byte[] value); // 0x1008002EC
	public ASN1 Add(ASN1 asn1); // 0x1008002FC
	public virtual byte[] GetBytes(); // 0x1008003A8
	protected void Decode(byte[] asn1, int anPos, int anLength); // 0x1007FFE8C
	protected void DecodeTLV(byte[] asn1, int pos, out byte tag, out int length, out byte[] content); // 0x100800BCC
	public ASN1 get_Item(int index); // 0x100800D44
	public ASN1 Element(int index, byte anTag); // 0x100800E8C
	public override string ToString(); // 0x100800FF0
}

// Namespace: Mono.Security
internal static class ASN1Convert // TypeDefIndex: 117
{
	// Methods
	public static ASN1 FromInt32(int value); // 0x100801220
	public static ASN1 FromOid(string oid); // 0x1008013E4
	public static int ToInt32(ASN1 asn1); // 0x1008014AC
	public static string ToOid(ASN1 asn1); // 0x1008015D0
	public static DateTime ToDateTime(ASN1 time); // 0x1008018BC
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 118
{
	// Methods
	private static byte[] GetUIntBytes(PTR bytes); // 0x100805AB4
	private static byte[] GetULongBytes(PTR bytes); // 0x100805C30
	internal static byte[] GetBytes(int value); // 0x1008013C0
	internal static byte[] GetBytes(float value); // 0x100805E8C
	internal static byte[] GetBytes(double value); // 0x100805EB0
	private static void UShortFromBytes(PTR dst, byte[] src, int startIndex); // 0x100805ED4
	private static void UIntFromBytes(PTR dst, byte[] src, int startIndex); // 0x100805FD4
	private static void ULongFromBytes(PTR dst, byte[] src, int startIndex); // 0x100806164
	internal static short ToInt16(byte[] value, int startIndex); // 0x100806274
	internal static int ToInt32(byte[] value, int startIndex); // 0x100802364
	internal static ushort ToUInt16(byte[] value, int startIndex); // 0x10080232C
	internal static uint ToUInt32(byte[] value, int startIndex); // 0x10080239C
	internal static float ToSingle(byte[] value, int startIndex); // 0x1008062AC
	internal static double ToDouble(byte[] value, int startIndex); // 0x1008062E4
}

// Namespace: Mono.Security
internal sealed class PKCS7 // TypeDefIndex: 119
{
}

// Namespace: 
public class ContentInfo // TypeDefIndex: 120
{
	// Fields
	private string contentType; // 0x10
	private ASN1 content; // 0x18

	// Methods
	public void .ctor(); // 0x10081210C
	public void .ctor(string oid); // 0x100812184
	public void .ctor(byte[] data); // 0x100802FDC
	public void .ctor(ASN1 asn1); // 0x1008121AC
	public ASN1 get_ASN1(); // 0x10081231C
	public ASN1 get_Content(); // 0x100803054
	public void set_Content(ASN1 value); // 0x1008123C8
	public string get_ContentType(); // 0x10080304C
	public void set_ContentType(string value); // 0x1008123D0
	internal ASN1 GetASN1(); // 0x100812320
}

// Namespace: 
public class EncryptedData // TypeDefIndex: 121
{
	// Fields
	private byte _version; // 0x10
	private ContentInfo _content; // 0x18
	private ContentInfo _encryptionAlgorithm; // 0x20
	private byte[] _encrypted; // 0x28

	// Methods
	public void .ctor(); // 0x1008123D8
	public void .ctor(ASN1 asn1); // 0x100812400
	public ContentInfo get_EncryptionAlgorithm(); // 0x10081269C
	public byte[] get_EncryptedContent(); // 0x1008126A4
}

// Namespace: 
public class SignedData // TypeDefIndex: 122
{
	// Fields
	private byte version; // 0x10
	private string hashAlgorithm; // 0x18
	private ContentInfo contentInfo; // 0x20
	private X509CertificateCollection certs; // 0x28
	private ArrayList crls; // 0x30
	private SignerInfo signerInfo; // 0x38
	private bool mda; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x0

	// Methods
	public void .ctor(ASN1 asn1); // 0x10080305C
	public X509CertificateCollection get_Certificates(); // 0x100803510
	public ContentInfo get_ContentInfo(); // 0x100803508
	public void set_HashName(string value); // 0x100812C94
	public SignerInfo get_SignerInfo(); // 0x10080429C
	internal string OidToName(string oid); // 0x100812A74
}

// Namespace: 
public class SignerInfo // TypeDefIndex: 123
{
	// Fields
	private byte version; // 0x10
	private string hashAlgorithm; // 0x18
	private ArrayList authenticatedAttributes; // 0x20
	private ArrayList unauthenticatedAttributes; // 0x28
	private byte[] signature; // 0x30
	private string issuer; // 0x38
	private byte[] serial; // 0x40
	private byte[] ski; // 0x48

	// Methods
	public void .ctor(); // 0x1008129D8
	public void .ctor(ASN1 asn1); // 0x100804A1C
	public string get_IssuerName(); // 0x100804388
	public byte[] get_SerialNumber(); // 0x100804390
	public ArrayList get_AuthenticatedAttributes(); // 0x1008042A4
	public string get_HashName(); // 0x100812A6C
	public void set_HashName(string value); // 0x100812CB4
	public byte[] get_Signature(); // 0x1008042AC
	public ArrayList get_UnauthenticatedAttributes(); // 0x100804A14
	public byte get_Version(); // 0x100805800
}

// Namespace: Mono.Security
internal sealed class StrongName // TypeDefIndex: 124
{
	// Fields
	private RSA rsa; // 0x10
	private byte[] publicKey; // 0x18
	private byte[] keyToken; // 0x20
	private string tokenAlgorithm; // 0x28
	private static object lockObject; // 0x0
	private static bool initialized; // 0x8

	// Methods
	public void .ctor(byte[] data); // 0x100812DD4
	public void .ctor(RSA rsa); // 0x100812FAC
	private static void .cctor(); // 0x100813040
	private void InvalidateCache(); // 0x1008130B8
	public void set_RSA(RSA value); // 0x100812FA0
	public byte[] get_PublicKey(); // 0x1008130C0
	public byte[] get_PublicKeyToken(); // 0x1008134F8
	public string get_TokenAlgorithm(); // 0x1008136BC
}

// Namespace: Mono.Security
internal sealed class UriPartial : Enum // TypeDefIndex: 125
{
	// Fields
	public int value__; // 0x10
	public const UriPartial Scheme = 0; // 0x0
	public const UriPartial Authority = 1; // 0x0
	public const UriPartial Path = 2; // 0x0

}

// Namespace: Mono.Security
internal class Uri // TypeDefIndex: 126
{
	// Fields
	private bool isUnixFilePath; // 0x10
	private string source; // 0x18
	private string scheme; // 0x20
	private string host; // 0x28
	private int port; // 0x30
	private string path; // 0x38
	private string query; // 0x40
	private string fragment; // 0x48
	private string userinfo; // 0x50
	private bool isUnc; // 0x58
	private bool isOpaquePart; // 0x59
	private bool userEscaped; // 0x5A
	private string cachedToString; // 0x60
	private string cachedLocalPath; // 0x68
	private int cachedHashCode; // 0x70
	private bool reduce; // 0x74
	private static readonly string hexUpperChars; // 0x0
	public static readonly string SchemeDelimiter; // 0x8
	public static readonly string UriSchemeFile; // 0x10
	public static readonly string UriSchemeFtp; // 0x18
	public static readonly string UriSchemeGopher; // 0x20
	public static readonly string UriSchemeHttp; // 0x28
	public static readonly string UriSchemeHttps; // 0x30
	public static readonly string UriSchemeMailto; // 0x38
	public static readonly string UriSchemeNews; // 0x40
	public static readonly string UriSchemeNntp; // 0x48
	private static UriScheme[] schemes; // 0x50
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x58

	// Methods
	public void .ctor(string uriString); // 0x100813714
	public void .ctor(string uriString, bool dontEscape); // 0x10081371C
	public void .ctor(string uriString, bool dontEscape, bool reduce); // 0x100813868
	private static void .cctor(); // 0x100813928
	public string get_AbsolutePath(); // 0x100813BF0
	public string get_Host(); // 0x100813BF8
	public bool get_IsFile(); // 0x100813C00
	public bool get_IsLoopback(); // 0x100813CA0
	public bool get_IsUnc(); // 0x100813DB8
	public string get_LocalPath(); // 0x100813DC0
	public string get_Scheme(); // 0x1008140F0
	public override bool Equals(object comparant); // 0x1008140F8
	public override int GetHashCode(); // 0x1008143C8
	public string GetLeftPart(UriPartial part); // 0x10081447C
	public static int FromHex(char digit); // 0x100814BB8
	public static string HexEscape(char character); // 0x100814C60
	public static char HexUnescape(string pattern, int index); // 0x100814DB4
	public static bool IsHexDigit(char digit); // 0x1008150CC
	public static bool IsHexEncoding(string pattern, int index); // 0x100815100
	public override string ToString(); // 0x100815244
	protected static string EscapeString(string str); // 0x100815554
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets); // 0x1008155C4
	protected void Parse(); // 0x1008137CC
	protected string Unescape(string str); // 0x1008140E8
	internal string Unescape(string str, bool excludeSharp); // 0x1008153A8
	private void ParseAsWindowsUNC(string uriString); // 0x100816618
	private void ParseAsWindowsAbsoluteFilePath(string uriString); // 0x1008167DC
	private void ParseAsUnixAbsoluteFilePath(string uriString); // 0x100816944
	private void Parse(string uriString); // 0x10081590C
	private static string Reduce(string path); // 0x100816D0C
	internal static string GetSchemeDelimiter(string scheme); // 0x1008171D4
	internal static int GetDefaultPort(string scheme); // 0x100814A50
	private string GetOpaqueWiseSchemeDelimiter(); // 0x1008149C8
	private static bool IsPredefinedScheme(string scheme); // 0x100816AF0
}

// Namespace: 
private struct UriScheme // TypeDefIndex: 127
{
	// Fields
	public string scheme; // 0x10
	public string delimiter; // 0x18
	public int defaultPort; // 0x20

	// Methods
	public void .ctor(string s, string d, int p); // 0x100817350
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeBase // TypeDefIndex: 128
{
	// Fields
	private byte[] fileblock; // 0x10
	private FileStream fs; // 0x18
	private int blockNo; // 0x20
	private int blockLength; // 0x24
	private int peOffset; // 0x28
	private int dirSecurityOffset; // 0x2C
	private int dirSecuritySize; // 0x30
	private int coffSymbolTableOffset; // 0x34

	// Methods
	public void .ctor(); // 0x100801F14
	internal int get_PEOffset(); // 0x100801F84
	internal void Open(string filename); // 0x100802248
	internal void Close(); // 0x1008022D4
	internal bool ReadFirstBlock(); // 0x100801FB8
	internal byte[] GetSecurityEntry(); // 0x1008023D4
	internal byte[] GetHash(HashAlgorithm hash); // 0x1008024F4
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeDeformatter : AuthenticodeBase // TypeDefIndex: 129
{
	// Fields
	private string filename; // 0x38
	private byte[] hash; // 0x40
	private X509CertificateCollection coll; // 0x48
	private ASN1 signedHash; // 0x50
	private DateTime timestamp; // 0x58
	private X509Certificate signingCertificate; // 0x68
	private int reason; // 0x70
	private bool trustedRoot; // 0x74
	private bool trustedTimestampRoot; // 0x75
	private byte[] entry; // 0x78
	private X509Chain signerChain; // 0x80
	private X509Chain timestampChain; // 0x88
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map8; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map9; // 0x10

	// Methods
	public void .ctor(); // 0x100802A70
	public void .ctor(string fileName); // 0x100802B64
	public void set_FileName(string value); // 0x100802B90
	public X509Certificate get_SigningCertificate(); // 0x100802FD4
	private bool CheckSignature(string fileName); // 0x100802D38
	private bool CompareIssuerSerial(string issuer, byte[] serial, X509Certificate x509); // 0x1008040F4
	private bool VerifySignature(SignedData sd, byte[] calculatedMessageDigest, HashAlgorithm ha); // 0x100803518
	private bool VerifyCounterSignature(SignerInfo cs, byte[] signature); // 0x100804DAC
	private void Reset(); // 0x100802C90
}

// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert // TypeDefIndex: 130
{
	// Methods
	private static int ToInt32LE(byte[] bytes, int offset); // 0x100806834
	private static uint ToUInt32LE(byte[] bytes, int offset); // 0x1008068F8
	private static byte[] GetBytesLE(int val); // 0x1008069BC
	private static byte[] Trim(byte[] array); // 0x100806A94
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset); // 0x100806B7C
	public static byte[] ToCapiPrivateKeyBlob(RSA rsa); // 0x1008073D8
	public static RSA FromCapiPublicKeyBlob(byte[] blob); // 0x1008078A8
	public static RSA FromCapiPublicKeyBlob(byte[] blob, int offset); // 0x1008078B0
	public static byte[] ToCapiPublicKeyBlob(RSA rsa); // 0x100807EDC
	public static RSA FromCapiKeyBlob(byte[] blob); // 0x1008081DC
	public static RSA FromCapiKeyBlob(byte[] blob, int offset); // 0x1008081E4
	public static byte[] ToCapiKeyBlob(RSA rsa, bool includePrivateKey); // 0x100808340
	public static string ToHex(byte[] input); // 0x1008083D8
	private static byte FromHexChar(char c); // 0x100808514
	public static byte[] FromHex(string hex); // 0x1008085C0
}

// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder // TypeDefIndex: 131
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Methods
	private static RandomNumberGenerator get_Rng(); // 0x10080A474
	public static byte[] Key(int size); // 0x10080A4E8
	public static byte[] IV(int size); // 0x10080A590
}

// Namespace: Mono.Security.Cryptography
internal class BlockProcessor // TypeDefIndex: 132
{
	// Fields
	private ICryptoTransform transform; // 0x10
	private byte[] block; // 0x18
	private int blockSize; // 0x20
	private int blockCount; // 0x24

	// Methods
	public void .ctor(ICryptoTransform transform, int blockSize); // 0x10080631C
	protected override void Finalize(); // 0x1008063A4
	public void Initialize(); // 0x100806424
	public void Core(byte[] rgb); // 0x10080645C
	public void Core(byte[] rgb, int ib, int cb); // 0x100806478
	public byte[] Final(); // 0x100806724
}

// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA // TypeDefIndex: 133
{
	// Fields
	private bool keypairGenerated; // 0x20
	private bool m_disposed; // 0x21
	private BigInteger p; // 0x28
	private BigInteger q; // 0x30
	private BigInteger g; // 0x38
	private BigInteger x; // 0x40
	private BigInteger y; // 0x48
	private BigInteger j; // 0x50
	private BigInteger seed; // 0x58
	private int counter; // 0x60
	private bool j_missing; // 0x64
	private RandomNumberGenerator rng; // 0x68
	private KeyGeneratedEventHandler KeyGenerated; // 0x70

	// Methods
	public void .ctor(int dwKeySize); // 0x10080873C
	public void add_KeyGenerated(KeyGeneratedEventHandler value); // 0x100808824
	public void remove_KeyGenerated(KeyGeneratedEventHandler value); // 0x100808904
	protected override void Finalize(); // 0x1008089E4
	private void Generate(); // 0x100808A84
	private void GenerateKeyPair(); // 0x100809114
	private void add(byte[] a, byte[] b, int value); // 0x1008092D4
	private void GenerateParams(int keyLength); // 0x100808AE4
	private RandomNumberGenerator get_Random(); // 0x1008093C0
	public override int get_KeySize(); // 0x1008093F0
	public bool get_PublicOnly(); // 0x100809418
	private byte[] NormalizeArray(byte[] array); // 0x10080949C
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x100809564
	public override void ImportParameters(DSAParameters parameters); // 0x1008097C0
	public override byte[] CreateSignature(byte[] rgbHash); // 0x100809A3C
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x100809D40
	protected override void Dispose(bool disposing); // 0x10080A1EC
}

// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 134
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10080A3FC
	public virtual void Invoke(object sender, EventArgs e); // 0x100809214
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object); // 0x10080A40C
	public virtual void EndInvoke(IAsyncResult result); // 0x10080A468
}

// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence // TypeDefIndex: 135
{
	// Fields
	private static bool _userPathExists; // 0x0
	private static string _userPath; // 0x8
	private static bool _machinePathExists; // 0x10
	private static string _machinePath; // 0x18
	private CspParameters _params; // 0x10
	private string _keyvalue; // 0x18
	private string _filename; // 0x20
	private string _container; // 0x28
	private static object lockobj; // 0x20

	// Methods
	public void .ctor(CspParameters parameters); // 0x10080A638
	public void .ctor(CspParameters parameters, string keyPair); // 0x10080A640
	private static void .cctor(); // 0x10080A794
	public string get_Filename(); // 0x10080A810
	public string get_KeyValue(); // 0x10080B4E8
	public void set_KeyValue(string value); // 0x10080B4F0
	public bool Load(); // 0x10080B510
	public void Save(); // 0x10080B870
	public void Remove(); // 0x10080BE08
	private static string get_UserPath(); // 0x10080B094
	private static string get_MachinePath(); // 0x10080AC40
	internal static bool _CanSecure(string root); // 0x10080BF84
	internal static bool _ProtectUser(string path); // 0x10080BF8C
	internal static bool _ProtectMachine(string path); // 0x10080BF94
	internal static bool _IsUserProtected(string path); // 0x10080BF9C
	internal static bool _IsMachineProtected(string path); // 0x10080BFA4
	private static bool CanSecure(string path); // 0x10080BFAC
	private static bool ProtectUser(string path); // 0x10080BD70
	private static bool ProtectMachine(string path); // 0x10080BCD8
	private static bool IsUserProtected(string path); // 0x10080BE54
	private static bool IsMachineProtected(string path); // 0x10080BEEC
	private bool get_CanChange(); // 0x10080B500
	private bool get_UseDefaultKeyContainer(); // 0x10080C088
	private bool get_UseMachineKeyStore(); // 0x10080AC18
	private string get_ContainerName(); // 0x10080AA94
	private CspParameters Copy(CspParameters p); // 0x10080A6DC
	private void FromXml(string xml); // 0x10080B6CC
	private string ToXml(); // 0x10080BAF4
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1 // TypeDefIndex: 136
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x8
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x18

	// Methods
	private static void .cctor(); // 0x10080C9B0
	private static bool Compare(byte[] array1, byte[] array2); // 0x10080CB14
	public static byte[] I2OSP(byte[] x, int size); // 0x10080CBC4
	public static byte[] OS2IP(byte[] x); // 0x10080CC68
	public static byte[] RSAEP(RSA rsa, byte[] m); // 0x10080CD50
	public static byte[] RSASP1(RSA rsa, byte[] m); // 0x10080CDB4
	public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x10080CE18
	public static byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, byte[] M); // 0x10080CE7C
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue); // 0x10080D08C
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature); // 0x10080D4F4
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x100805810
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x10080D160
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 137
{
}

// Namespace: 
public class PrivateKeyInfo // TypeDefIndex: 138
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Methods
	public void .ctor(); // 0x10080DA58
	public void .ctor(byte[] data); // 0x10080DAC8
	public byte[] get_PrivateKey(); // 0x10080DD38
	private void Decode(byte[] data); // 0x10080DAF4
	private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x10080DE14
	private static byte[] Normalize(byte[] bigInt, int length); // 0x10080DECC
	public static RSA DecodeRSA(byte[] keypair); // 0x10080DF90
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x10080E404
}

// Namespace: 
public class EncryptedPrivateKeyInfo // TypeDefIndex: 139
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Methods
	public void .ctor(); // 0x10080D584
	public void .ctor(byte[] data); // 0x10080D58C
	public string get_Algorithm(); // 0x10080D814
	public byte[] get_EncryptedData(); // 0x10080D81C
	public byte[] get_Salt(); // 0x10080D8F8
	public int get_IterationCount(); // 0x10080DA50
	private void Decode(byte[] data); // 0x10080D5BC
}

// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm // TypeDefIndex: 140
{
	// Fields
	private SymmetricAlgorithm algo; // 0x10
	private ICryptoTransform enc; // 0x18
	private byte[] block; // 0x20
	private int blockSize; // 0x28
	private int blockCount; // 0x2C

	// Methods
	public void .ctor(SymmetricAlgorithm algorithm); // 0x10080C1DC
	public void Initialize(byte[] key); // 0x10080C318
	public void Core(byte[] rgb, int ib, int cb); // 0x10080C3D0
	public byte[] Final(); // 0x10080C670
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 141
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected bool encrypt; // 0x18
	private int BlockSizeByte; // 0x1C
	private byte[] temp; // 0x20
	private byte[] temp2; // 0x28
	private byte[] workBuff; // 0x30
	private byte[] workout; // 0x38
	private int FeedBackByte; // 0x40
	private int FeedBackIter; // 0x44
	private bool m_disposed; // 0x48
	private bool lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Methods
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x100810338
	private void System.IDisposable.Dispose(); // 0x100810698
	protected override void Finalize(); // 0x1008106F0
	protected virtual void Dispose(bool disposing); // 0x100810790
	public virtual bool get_CanTransformMultipleBlocks(); // 0x1008107F8
	public virtual bool get_CanReuseTransform(); // 0x100810800
	public virtual int get_InputBlockSize(); // 0x100810808
	public virtual int get_OutputBlockSize(); // 0x100810810
	protected virtual void Transform(byte[] input, byte[] output); // 0x100810818
	protected abstract void ECB(byte[] input, byte[] output); // 0
	protected virtual void CBC(byte[] input, byte[] output); // 0x100810A68
	protected virtual void CFB(byte[] input, byte[] output); // 0x100810C3C
	protected virtual void OFB(byte[] input, byte[] output); // 0x100810EE8
	protected virtual void CTS(byte[] input, byte[] output); // 0x100810F48
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100810FA8
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1008110E4
	private bool get_KeepLastBlock(); // 0x100811334
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1008113D4
	private void Random(byte[] buffer, int start, int length); // 0x1008115E0
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x1008116D0
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100811880
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100811C4C
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x10081202C
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 142
{
	// Fields
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Methods
	public void .ctor(); // 0x100805808
	public void .ctor(int keySize); // 0x10080E574
	public void add_KeyGenerated(KeyGeneratedEventHandler value); // 0x10080E66C
	public void remove_KeyGenerated(KeyGeneratedEventHandler value); // 0x10080E74C
	protected override void Finalize(); // 0x10080E82C
	private void GenerateKeyPair(); // 0x10080E8CC
	public override int get_KeySize(); // 0x10080EC70
	public bool get_PublicOnly(); // 0x10080ECB4
	public override byte[] DecryptValue(byte[] rgb); // 0x10080ED78
	public override byte[] EncryptValue(byte[] rgb); // 0x10080F18C
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x10080F2A8
	public override void ImportParameters(RSAParameters parameters); // 0x10080F604
	protected override void Dispose(bool disposing); // 0x10080FA60
	public override string ToXmlString(bool includePrivateParameters); // 0x10080FCAC
	public bool get_IsCrtPossible(); // 0x1008102A0
	private byte[] GetPaddedValue(BigInteger value, int length); // 0x10080F0B8
}

// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 143
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008102C0
	public virtual void Invoke(object sender, EventArgs e); // 0x10080EBB0
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object); // 0x1008102D0
	public virtual void EndInvoke(IAsyncResult result); // 0x10081032C
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 144
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Methods
	public void .ctor(string bagOID, ASN1 asn1); // 0x10081A868
	public string get_BagOID(); // 0x10081940C
	public ASN1 get_ASN1(); // 0x100819414
}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 145
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	private static Dictionary`2<string, int> <>f__switch$mapA; // 0x8
	private static Dictionary`2<string, int> <>f__switch$mapB; // 0x10
	private static Dictionary`2<string, int> <>f__switch$mapC; // 0x18
	private static Dictionary`2<string, int> <>f__switch$mapD; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map11; // 0x28

	// Methods
	public void .ctor(); // 0x10081794C
	public void .ctor(byte[] data); // 0x100817A48
	public void .ctor(byte[] data, string password); // 0x100818398
	private static void .cctor(); // 0x1008183DC
	private void Decode(byte[] data); // 0x100817C7C
	protected override void Finalize(); // 0x100818EF4
	public void set_Password(string value); // 0x100817AA4
	public int get_IterationCount(); // 0x100818FE4
	public void set_IterationCount(int value); // 0x100818FEC
	public X509CertificateCollection get_Certificates(); // 0x100818FF4
	internal RandomNumberGenerator get_RNG(); // 0x10081941C
	private bool Compare(byte[] expected, byte[] actual); // 0x100818554
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x10081944C
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x100819D10
	public byte[] Decrypt(EncryptedData ed); // 0x100818E54
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x100819EE8
	private DSAParameters GetExistingParameters(out bool found); // 0x10081A140
	private void AddPrivateKey(PrivateKeyInfo pki); // 0x10081A6CC
	private void ReadSafeBag(ASN1 safeBag); // 0x100818604
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes); // 0x10081A8A0
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x100818434
	public byte[] GetBytes(); // 0x10081B7E0
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x10081DA64
	public void AddCertificate(X509Certificate cert); // 0x10081DA5C
	public void AddCertificate(X509Certificate cert, IDictionary attributes); // 0x10081DD84
	public void RemoveCertificate(X509Certificate cert); // 0x10081DA54
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs); // 0x10081DFE0
	public object Clone(); // 0x10081E514
	public static int get_MaximumPasswordLength(); // 0x100818F7C
}

// Namespace: 
public class DeriveBytes // TypeDefIndex: 146
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Methods
	public void .ctor(); // 0x1008199F4
	private static void .cctor(); // 0x10081E644
	public void set_HashName(string value); // 0x100819C08
	public void set_IterationCount(int value); // 0x100819C00
	public void set_Password(byte[] value); // 0x1008199FC
	public void set_Salt(byte[] value); // 0x100819B0C
	private void Adjust(byte[] a, int aOff, byte[] b); // 0x10081E764
	private byte[] Derive(byte[] diversifier, int n); // 0x10081E8F0
	public byte[] DeriveKey(int size); // 0x100819C10
	public byte[] DeriveIV(int size); // 0x100819C90
	public byte[] DeriveMAC(int size); // 0x10081B760
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 147
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70

	// Methods
	private static void .cctor(); // 0x10081EE24
	public static string ToString(ASN1 seq); // 0x100812CBC
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes); // 0x10081FC7C
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x10081F514
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 148
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private string m_issuername; // 0x48
	private string m_keyalgo; // 0x50
	private byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private string m_subject; // 0x68
	private byte[] m_publickey; // 0x70
	private byte[] signature; // 0x78
	private string m_signaturealgo; // 0x80
	private byte[] m_signaturealgoparams; // 0x88
	private byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xA0
	private int version; // 0xA8
	private byte[] serialnumber; // 0xB0
	private byte[] issuerUniqueID; // 0xB8
	private byte[] subjectUniqueID; // 0xC0
	private X509ExtensionCollection extensions; // 0xC8
	private static string encoding_error; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map13; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map14; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map15; // 0x18

	// Methods
	public void .ctor(byte[] data); // 0x100812788
	private static void .cctor(); // 0x1008208E0
	private void Parse(byte[] data); // 0x10081FFC4
	private byte[] GetUnsignedBigInteger(byte[] integer); // 0x100820A80
	public DSA get_DSA(); // 0x10081A3FC
	public X509ExtensionCollection get_Extensions(); // 0x100820B3C
	public byte[] get_Hash(); // 0x100820B44
	public virtual string get_IssuerName(); // 0x100820E7C
	public virtual byte[] get_KeyAlgorithmParameters(); // 0x100820E84
	public virtual byte[] get_PublicKey(); // 0x100820F60
	public virtual RSA get_RSA(); // 0x10082103C
	public virtual byte[] get_RawData(); // 0x10082122C
	public virtual byte[] get_SerialNumber(); // 0x100821308
	public virtual byte[] get_Signature(); // 0x1008213E4
	public virtual string get_SubjectName(); // 0x100821810
	public virtual DateTime get_ValidFrom(); // 0x100821818
	public virtual DateTime get_ValidUntil(); // 0x100821824
	public int get_Version(); // 0x100821830
	public bool get_IsCurrent(); // 0x100821838
	public bool WasCurrent(DateTime instant); // 0x1008218B8
	internal string GetHashNameFromOID(string oid); // 0x1008219EC
	internal bool VerifySignature(RSA rsa); // 0x100821BD8
	public bool get_IsSelfSigned(); // 0x100821D64
	public ASN1 GetIssuerName(); // 0x100821E28
	public ASN1 GetSubjectName(); // 0x100821E30
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100821E38
	private static byte[] PEM(string type, byte[] data); // 0x10081FE28
}

// Namespace: Mono.Security.X509
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 149
{
	// Methods
	public void .ctor(); // 0x100812780
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100821EA4
	public X509Certificate get_Item(int index); // 0x100821F04
	public int Add(X509Certificate value); // 0x10081290C
	public void AddRange(X509CertificateCollection value); // 0x100821F9C
	public bool Contains(X509Certificate value); // 0x1008220D8
	public X509CertificateEnumerator GetEnumerator(); // 0x10080446C
	public override int GetHashCode(); // 0x100822358
	public int IndexOf(X509Certificate value); // 0x1008220F4
	private bool Compare(byte[] array1, byte[] array2); // 0x1008223B4
}

// Namespace: 
public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 150
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	public void .ctor(X509CertificateCollection mappings); // 0x10082225C
	private object System.Collections.IEnumerator.get_Current(); // 0x10082246C
	private bool System.Collections.IEnumerator.MoveNext(); // 0x10082255C
	private void System.Collections.IEnumerator.Reset(); // 0x100822650
	public X509Certificate get_Current(); // 0x1008044CC
	public bool MoveNext(); // 0x100804920
	public void Reset(); // 0x100822744
}

// Namespace: Mono.Security.X509
internal class X509Chain // TypeDefIndex: 151
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Methods
	public void .ctor(); // 0x100802AF8
	public X509CertificateCollection get_TrustAnchors(); // 0x100822838
	public void LoadCertificates(X509CertificateCollection collection); // 0x1008045C4
	public bool Build(X509Certificate leaf); // 0x1008045DC
	public void Reset(); // 0x100805A64
	private bool IsValid(X509Certificate cert); // 0x100822EE8
	private X509Certificate FindCertificateParent(X509Certificate child); // 0x100822990
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot); // 0x100822B48
	private bool IsTrusted(X509Certificate potentialTrusted); // 0x100822F2C
	private bool IsParent(X509Certificate child, X509Certificate parent); // 0x100822D40
}

// Namespace: Mono.Security.X509
internal sealed class X509ChainStatusFlags : Enum // TypeDefIndex: 152
{
	// Fields
	public int value__; // 0x10
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024; // 0x0
	public const X509ChainStatusFlags NoError = 0; // 0x0
	public const X509ChainStatusFlags NotSignatureValid = 8; // 0x0
	public const X509ChainStatusFlags NotTimeNested = 2; // 0x0
	public const X509ChainStatusFlags NotTimeValid = 1; // 0x0
	public const X509ChainStatusFlags PartialChain = 65536; // 0x0
	public const X509ChainStatusFlags UntrustedRoot = 32; // 0x0

}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 153
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Methods
	public void .ctor(ASN1 asn1); // 0x100823020
	public void .ctor(X509Extension extension); // 0x100817414
	protected virtual void Decode(); // 0x100823338
	protected virtual void Encode(); // 0x10082333C
	public string get_Oid(); // 0x100823328
	public bool get_Critical(); // 0x100823330
	public ASN1 get_Value(); // 0x1008232D4
	public override bool Equals(object obj); // 0x100823340
	public override int GetHashCode(); // 0x1008234BC
	private void WriteLine(StringBuilder sb, int n, int pos); // 0x1008234D8
	public override string ToString(); // 0x1008236F0
}

// Namespace: Mono.Security.X509
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 154
{
	// Fields
	private bool readOnly; // 0x18

	// Methods
	public void .ctor(); // 0x1008237D8
	public void .ctor(ASN1 asn1); // 0x10082093C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008237E0
	public int IndexOf(string oid); // 0x100823840
	public X509Extension get_Item(string oid); // 0x100822F64
}

// Namespace: Mono.Security.X509
internal class X509Store // TypeDefIndex: 155
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private bool _crl; // 0x20

	// Methods
	internal void .ctor(string path, bool crl); // 0x1008239C4
	public X509CertificateCollection get_Certificates(); // 0x100823A00
	private byte[] Load(string filename); // 0x100823BF8
	private X509Certificate LoadCertificate(string filename); // 0x100823DFC
	private bool CheckStore(string path, bool throwException); // 0x100823E68
	private X509CertificateCollection BuildCertificatesCollection(string storeName); // 0x100823A34
}

// Namespace: Mono.Security.X509
internal class X509Stores // TypeDefIndex: 156
{
	// Fields
	private string _storePath; // 0x10
	private X509Store _trusted; // 0x18

	// Methods
	internal void .ctor(string path); // 0x100824078
	public X509Store get_TrustedRoot(); // 0x1008241A0
}

// Namespace: Mono.Security.X509
internal sealed class X509StoreManager // TypeDefIndex: 157
{
	// Fields
	private static X509Stores _userStore; // 0x0
	private static X509Stores _machineStore; // 0x8

	// Methods
	public static X509Stores get_CurrentUser(); // 0x100823F78
	public static X509Stores get_LocalMachine(); // 0x1008240A4
	public static X509CertificateCollection get_TrustedRootCertificates(); // 0x1008228BC
}

// Namespace: Mono.Security.X509.Extensions
internal class BasicConstraintsExtension : X509Extension // TypeDefIndex: 158
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Methods
	public void .ctor(X509Extension extension); // 0x100817410
	protected override void Decode(); // 0x100817560
	protected override void Encode(); // 0x100817698
	public bool get_CertificateAuthority(); // 0x1008177DC
	public override string ToString(); // 0x1008177E4
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 159
{
	// Fields
	private IContentHandler handler; // 0x10
	private TextReader reader; // 0x18
	private Stack elementNames; // 0x20
	private Stack xmlSpaces; // 0x28
	private string xmlSpace; // 0x30
	private StringBuilder buffer; // 0x38
	private char[] nameBuffer; // 0x40
	private bool isWhitespace; // 0x48
	private AttrListImpl attributes; // 0x50
	private int line; // 0x58
	private int column; // 0x5C
	private bool resetColumn; // 0x60
	private static Dictionary`2<string, int> <>f__switch$map18; // 0x0

	// Methods
	public void .ctor(); // 0x10082477C
	private Exception Error(string msg); // 0x100824970
	private Exception UnexpectedEndError(); // 0x100824AD8
	private bool IsNameChar(char c, bool start); // 0x100824C14
	private bool IsWhitespace(int c); // 0x100824D90
	public void SkipWhitespaces(); // 0x100824DD0
	private void HandleWhitespaces(); // 0x100824E98
	public void SkipWhitespaces(bool expected); // 0x100824DD8
	private int Peek(); // 0x100824FD4
	private int Read(); // 0x100824F40
	public void Expect(int c); // 0x100825028
	private string ReadUntil(char until, bool handleReferences); // 0x100825120
	public string ReadName(); // 0x100825458
	public void Parse(TextReader input, IContentHandler handler); // 0x1008256AC
	private void Cleanup(); // 0x10082639C
	public void ReadContent(); // 0x1008258FC
	private void HandleBufferedContent(); // 0x10082620C
	private void ReadCharacters(); // 0x1008267C4
	private void ReadReference(); // 0x1008251DC
	private int ReadCharacterReference(); // 0x100826840
	private void ReadAttribute(AttrListImpl a); // 0x100826668
	private void ReadCDATASection(); // 0x1008264E0
	private void ReadComment(); // 0x1008265C8
}

// Namespace: 
public interface IContentHandler // TypeDefIndex: 160
{
	// Methods
	public abstract void OnStartParsing(SmallXmlParser parser); // 0
	public abstract void OnEndParsing(SmallXmlParser parser); // 0
	public abstract void OnStartElement(string name, IAttrList attrs); // 0
	public abstract void OnEndElement(string name); // 0
	public abstract void OnProcessingInstruction(string name, string text); // 0
	public abstract void OnChars(string text); // 0
	public abstract void OnIgnorableWhitespace(string text); // 0
}

// Namespace: 
public interface IAttrList // TypeDefIndex: 161
{
	// Methods
	public abstract int get_Length(); // 0
	public abstract string GetName(int i); // 0
	public abstract string GetValue(int i); // 0
	public abstract string GetValue(string name); // 0
	public abstract string[] get_Names(); // 0
	public abstract string[] get_Values(); // 0
}

// Namespace: 
private class AttrListImpl : IAttrList // TypeDefIndex: 162
{
	// Fields
	private ArrayList attrNames; // 0x10
	private ArrayList attrValues; // 0x18

	// Methods
	public void .ctor(); // 0x1008248F0
	public int get_Length(); // 0x100826A3C
	public string GetName(int i); // 0x100826A90
	public string GetValue(int i); // 0x100826B8C
	public string GetValue(string name); // 0x100826C88
	public string[] get_Names(); // 0x100826E94
	public string[] get_Values(); // 0x100826FDC
	internal void Clear(); // 0x100826454
	internal void Add(string name, string value); // 0x10082691C
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 163
{
	// Fields
	private int line; // 0x60
	private int column; // 0x64

	// Methods
	public void .ctor(string msg, int line, int column); // 0x1008249EC
}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 164
{
	// Fields
	private SecurityElement root; // 0x68
	private SecurityElement current; // 0x70
	private Stack stack; // 0x78

	// Methods
	public void .ctor(); // 0x10080C0B0
	public void LoadXml(string xml); // 0x10080C11C
	public SecurityElement ToXml(); // 0x10080C1D4
	public void OnStartParsing(SmallXmlParser parser); // 0x100824264
	public void OnProcessingInstruction(string name, string text); // 0x100824268
	public void OnIgnorableWhitespace(string s); // 0x10082426C
	public void OnStartElement(string name, IAttrList attrs); // 0x100824270
	public void OnEndElement(string name); // 0x1008245EC
	public void OnChars(string ch); // 0x1008246E4
	public void OnEndParsing(SmallXmlParser parser); // 0x100824778
}

// Namespace: System
public class AccessViolationException : SystemException // TypeDefIndex: 165
{
	// Methods
	public void .ctor(); // 0x10082716C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008271E4
}

// Namespace: System
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 166
{
	// Fields
	private bool _disposed; // 0x10

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008271EC
	protected override void Finalize(); // 0x1008272F8
	public void Dispose(); // 0x100827324
	private void Dispose(bool disposing); // 0x100827310
}

// Namespace: System
public sealed class Activator : _Activator // TypeDefIndex: 167
{
	// Methods
	public static T CreateInstance(); // 0
	public static object CreateInstance(Type type); // 0x100827348
	public static object CreateInstance(Type type, object[] args); // 0x1008275EC
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes); // 0x100827664
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x1008276F8
	public static object CreateInstance(Type type, bool nonPublic); // 0x100827350
	private static void CheckType(Type type); // 0x100827D60
	private static void CheckAbstractType(Type type); // 0x100827FC0
	internal static object CreateInstanceInternal(Type type); // 0x100827FB8
}

// Namespace: System
public sealed class AppDomain : MarshalByRefObject, _AppDomain, IEvidenceFactory // TypeDefIndex: 168
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static string _process_guid; // 0x0
	private static Hashtable type_resolve_in_progress; // 0xFFFFFFFFFFFFFFFF
	private static Hashtable assembly_resolve_in_progress; // 0xFFFFFFFFFFFFFFFF
	private static Hashtable assembly_resolve_in_progress_refonly; // 0xFFFFFFFFFFFFFFFF
	private Evidence _evidence; // 0x20
	private PermissionSet _granted; // 0x28
	private PrincipalPolicy _principalPolicy; // 0x30
	private static IPrincipal _principal; // 0xFFFFFFFFFFFFFFFF
	private static AppDomain default_domain; // 0x8
	private AppDomainManager _domain_manager; // 0x38
	private ActivationContext _activation; // 0x40
	private ApplicationIdentity _applicationIdentity; // 0x48
	private AssemblyLoadEventHandler AssemblyLoad; // 0x50
	private ResolveEventHandler AssemblyResolve; // 0x58
	private EventHandler DomainUnload; // 0x60
	private EventHandler ProcessExit; // 0x68
	private ResolveEventHandler ResourceResolve; // 0x70
	private ResolveEventHandler TypeResolve; // 0x78
	private UnhandledExceptionEventHandler UnhandledException; // 0x80
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x88

	// Methods
	public void add_UnhandledException(UnhandledExceptionEventHandler value); // 0x1008280D8
	public void remove_UnhandledException(UnhandledExceptionEventHandler value); // 0x1008282B8
	private AppDomainSetup getSetup(); // 0x100828408
	public AppDomainSetup get_SetupInformation(); // 0x10082840C
	private string getFriendlyName(); // 0x100828550
	public string get_FriendlyName(); // 0x100828554
	private static AppDomain getCurDomain(); // 0x100828558
	public static AppDomain get_CurrentDomain(); // 0x10082855C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x100828560
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized); // 0x100828590
	internal AssemblyBuilder DefineInternalDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x1008287F8
	private Assembly[] GetAssemblies(bool refOnly); // 0x100828874
	public Assembly[] GetAssemblies(); // 0x100828878
	public override object InitializeLifetimeService(); // 0x100828880
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x100828888
	public Assembly Load(string assemblyString); // 0x10082888C
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x100828898
	internal static Context InternalSetContext(Context context); // 0x1008289D8
	internal static Context InternalGetContext(); // 0x1008289E0
	internal static Context InternalGetDefaultContext(); // 0x1008289E4
	internal static string InternalGetProcessGuid(string newguid); // 0x1008289E8
	internal static string GetProcessGuid(); // 0x1008289F0
	public override string ToString(); // 0x100828AA8
	private static void ValidateAssemblyName(string name); // 0x100828690
	internal Assembly DoTypeResolve(object name_or_tb); // 0x100828B64
	public AppDomainManager get_DomainManager(); // 0x100828F00
}

// Namespace: System
public class AppDomainManager : MarshalByRefObject // TypeDefIndex: 169
{
	// Methods
	public virtual HostSecurityManager get_HostSecurityManager(); // 0x100829090
}

// Namespace: System
public sealed class AppDomainSetup : IAppDomainSetup // TypeDefIndex: 170
{
	// Fields
	private string application_base; // 0x10
	private string application_name; // 0x18
	private string cache_path; // 0x20
	private string configuration_file; // 0x28
	private string dynamic_base; // 0x30
	private string license_file; // 0x38
	private string private_bin_path; // 0x40
	private string private_bin_path_probe; // 0x48
	private string shadow_copy_directories; // 0x50
	private string shadow_copy_files; // 0x58
	private bool publisher_policy; // 0x60
	private bool path_changed; // 0x61
	private LoaderOptimization loader_optimization; // 0x64
	private bool disallow_binding_redirects; // 0x68
	private bool disallow_code_downloads; // 0x69
	private ActivationArguments _activationArguments; // 0x70
	private AppDomainInitializer domain_initializer; // 0x78
	private ApplicationTrust application_trust; // 0x80
	private string[] domain_initializer_args; // 0x88
	private SecurityElement application_trust_xml; // 0x90
	private bool disallow_appbase_probe; // 0x98
	private byte[] configuration_bytes; // 0xA0

	// Methods
	public void .ctor(); // 0x100829098
	internal void .ctor(AppDomainSetup setup); // 0x100828478
	private static string GetAppBase(string appBase); // 0x1008290A0
	public string get_ApplicationBase(); // 0x100829234
	public string get_ConfigurationFile(); // 0x10082923C
}

// Namespace: System
public class ApplicationException : Exception // TypeDefIndex: 171
{
	// Methods
	public void .ctor(); // 0x100829350
	public void .ctor(string message); // 0x1008293C8
	public void .ctor(string message, Exception innerException); // 0x1008293FC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100829430
}

// Namespace: System
public sealed class ApplicationIdentity : ISerializable // TypeDefIndex: 172
{
	// Fields
	private string _fullName; // 0x10

	// Methods
	public void .ctor(string applicationIdentityFullName); // 0x100829438
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x100829528
	public string get_FullName(); // 0x100829598
	public override string ToString(); // 0x1008295A0
}

// Namespace: System
public class ArgumentException : SystemException // TypeDefIndex: 173
{
	// Fields
	private const int Result = -2147024809; // 0x0
	private string param_name; // 0x60

	// Methods
	public void .ctor(); // 0x100829634
	public void .ctor(string message); // 0x1008289A4
	public void .ctor(string message, Exception innerException); // 0x1008296AC
	public void .ctor(string message, string paramName); // 0x100827F7C
	public void .ctor(string message, string paramName, Exception innerException); // 0x1008296E0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100829720
	public virtual string get_ParamName(); // 0x1008297B8
	public override string get_Message(); // 0x1008297C0
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100829928
}

// Namespace: System
public class ArgumentNullException : ArgumentException // TypeDefIndex: 174
{
	// Fields
	private const int Result = -2147467261; // 0x0

	// Methods
	public void .ctor(); // 0x1008299E0
	public void .ctor(string paramName); // 0x10082725C
	public void .ctor(string paramName, string message); // 0x100829A6C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100829AC0
}

// Namespace: System
public class ArgumentOutOfRangeException : ArgumentException // TypeDefIndex: 175
{
	// Fields
	private object actual_value; // 0x68

	// Methods
	public void .ctor(); // 0x100829AC4
	public void .ctor(string paramName); // 0x100829B50
	public void .ctor(string paramName, string message); // 0x100829BEC
	public void .ctor(string paramName, object actualValue, string message); // 0x100829C40
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100829CA4
	public override string get_Message(); // 0x100829D38
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100829DF0
}

// Namespace: System
public class ArithmeticException : SystemException // TypeDefIndex: 176
{
	// Methods
	public void .ctor(); // 0x100829E80
	public void .ctor(string message); // 0x100829EF8
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100829F2C
}

// Namespace: System
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 177
{
	// Fields
	private const int Result = -2146233085; // 0x0

	// Methods
	public void .ctor(); // 0x10082F78C
	public void .ctor(string message); // 0x10082D03C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10082F804
}

// Namespace: System
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 178
{
}

// Namespace: System
public sealed class AttributeTargets : Enum // TypeDefIndex: 179
{
	// Fields
	public int value__; // 0x10
	public const AttributeTargets Assembly = 1; // 0x0
	public const AttributeTargets Module = 2; // 0x0
	public const AttributeTargets Class = 4; // 0x0
	public const AttributeTargets Struct = 8; // 0x0
	public const AttributeTargets Enum = 16; // 0x0
	public const AttributeTargets Constructor = 32; // 0x0
	public const AttributeTargets Method = 64; // 0x0
	public const AttributeTargets Property = 128; // 0x0
	public const AttributeTargets Field = 256; // 0x0
	public const AttributeTargets Event = 512; // 0x0
	public const AttributeTargets Interface = 1024; // 0x0
	public const AttributeTargets Parameter = 2048; // 0x0
	public const AttributeTargets Delegate = 4096; // 0x0
	public const AttributeTargets ReturnValue = 8192; // 0x0
	public const AttributeTargets GenericParameter = 16384; // 0x0
	public const AttributeTargets All = 32767; // 0x0

}

// Namespace: System
public static class BitConverter // TypeDefIndex: 180
{
	// Fields
	private static readonly bool SwappedWordsInDouble; // 0x0
	public static readonly bool IsLittleEndian; // 0x1

	// Methods
	private static void .cctor(); // 0x10082FFB8
	private static bool AmILittleEndian(); // 0x10083004C
	private static bool DoubleWordsAreSwapped(); // 0x10083002C
	public static long DoubleToInt64Bits(double value); // 0x100830054
	private static byte[] GetBytes(PTR ptr, int count); // 0x100830308
	public static byte[] GetBytes(short value); // 0x1008303C8
	public static byte[] GetBytes(int value); // 0x10083043C
	public static byte[] GetBytes(long value); // 0x1008304B0
	public static byte[] GetBytes(ushort value); // 0x100830524
	public static byte[] GetBytes(ulong value); // 0x100830598
	public static byte[] GetBytes(float value); // 0x10083060C
	public static byte[] GetBytes(double value); // 0x1008300CC
	private static void PutBytes(PTR dst, byte[] src, int start_index, int count); // 0x100830680
	public static short ToInt16(byte[] value, int startIndex); // 0x1008307D8
	public static int ToInt32(byte[] value, int startIndex); // 0x100830868
	public static long ToInt64(byte[] value, int startIndex); // 0x100830278
	public static ushort ToUInt16(byte[] value, int startIndex); // 0x1008308F8
	public static uint ToUInt32(byte[] value, int startIndex); // 0x100830988
	public static ulong ToUInt64(byte[] value, int startIndex); // 0x100830A18
	public static float ToSingle(byte[] value, int startIndex); // 0x100830AA8
	public static double ToDouble(byte[] value, int startIndex); // 0x100830B38
	public static string ToString(byte[] value); // 0x100830DB8
	public static string ToString(byte[] value, int startIndex, int length); // 0x100830E54
}

// Namespace: System
public static class Buffer // TypeDefIndex: 181
{
	// Methods
	public static int ByteLength(Array array); // 0x100832FEC
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x1008330B0
	private static int ByteLengthInternal(Array array); // 0x1008330A8
	internal static bool BlockCopyInternal(Array src, int src_offset, Array dest, int dest_offset, int count); // 0x1008332C0
}

// Namespace: System
public sealed class CharEnumerator : IEnumerator, IDisposable, ICloneable, IEnumerator`1<char> // TypeDefIndex: 182
{
	// Fields
	private string str; // 0x10
	private int index; // 0x18
	private int length; // 0x1C

	// Methods
	internal void .ctor(string s); // 0x1008362F4
	private object System.Collections.IEnumerator.get_Current(); // 0x100836340
	private void System.IDisposable.Dispose(); // 0x100836454
	public char get_Current(); // 0x1008363A8
	public object Clone(); // 0x100836458
	public bool MoveNext(); // 0x1008364D4
	public void Reset(); // 0x1008364F4
}

// Namespace: System.IO
internal class CStreamReader : StreamReader // TypeDefIndex: 183
{
	// Fields
	private TermInfoDriver driver; // 0x68

	// Methods
	public void .ctor(Stream stream, Encoding encoding); // 0x10088206C
	public override int Peek(); // 0x100882140
	public override int Read(); // 0x1008822CC
	public override int Read(out char[] dest, int index, int count); // 0x1008823D4
	public override string ReadLine(); // 0x1008825A4
	public override string ReadToEnd(); // 0x100882670
}

// Namespace: System.IO
internal class CStreamWriter : StreamWriter // TypeDefIndex: 184
{
	// Fields
	private TermInfoDriver driver; // 0x60

	// Methods
	public void .ctor(Stream stream, Encoding encoding); // 0x100882874
	public override void Write(char[] buffer, int index, int count); // 0x100882940
	public override void Write(char val); // 0x100882E80
	public void InternalWriteString(string val); // 0x1008830DC
	public void InternalWriteChar(char val); // 0x10088300C
	public void InternalWriteChars(char[] buffer, int n); // 0x1008833BC
	public override void Write(char[] val); // 0x100883498
	public override void Write(string val); // 0x100883508
}

// Namespace: System
public static class Console // TypeDefIndex: 185
{
	// Fields
	internal static TextWriter stdout; // 0x0
	private static TextWriter stderr; // 0x8
	private static TextReader stdin; // 0x10
	private static Encoding inputEncoding; // 0x18
	private static Encoding outputEncoding; // 0x20
	private static ConsoleCancelEventHandler cancel_event; // 0x28
	private static readonly InternalCancelHandler cancel_handler; // 0x30

	// Methods
	private static void .cctor(); // 0x100847E38
	private static void SetEncodings(Encoding inputEncoding, Encoding outputEncoding); // 0x10084808C
	public static TextWriter get_Error(); // 0x100848800
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x100848868
	public static Stream OpenStandardError(int bufferSize); // 0x1008484C0
	public static Stream OpenStandardInput(int bufferSize); // 0x100848764
	public static Stream OpenStandardOutput(int bufferSize); // 0x1008486C8
	public static void WriteLine(string value); // 0x100848984
	public static void WriteLine(string format, object arg0); // 0x100848A34
	public static void WriteLine(string format, object[] arg); // 0x100848AEC
	public static void WriteLine(string format, object arg0, object arg1); // 0x100848BA4
	public static void WriteLine(string format, object arg0, object arg1, object arg2); // 0x100848C6C
	public static Encoding get_InputEncoding(); // 0x100848D3C
	public static Encoding get_OutputEncoding(); // 0x100848DA4
	public static ConsoleKeyInfo ReadKey(); // 0x100848E0C
	public static ConsoleKeyInfo ReadKey(bool intercept); // 0x100848E74
	internal static void DoConsoleCancelEvent(); // 0x100848FFC
}

// Namespace: 
private class WindowsConsole // TypeDefIndex: 186
{
	// Methods
	private static extern int GetConsoleCP(); // 0x10084948C
	private static extern int GetConsoleOutputCP(); // 0x100849514
	public static int GetInputCodePage(); // 0x100848084
	public static int GetOutputCodePage(); // 0x100848088
}

// Namespace: 
private sealed class InternalCancelHandler : MulticastDelegate // TypeDefIndex: 187
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100848074
	public virtual void Invoke(); // 0x100849384
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100849420
	public virtual void EndInvoke(IAsyncResult result); // 0x100849480
}

// Namespace: System
public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 188
{
	// Fields
	private bool cancel; // 0x10
	private ConsoleSpecialKey specialKey; // 0x14

	// Methods
	internal void .ctor(ConsoleSpecialKey key); // 0x100849240
	public bool get_Cancel(); // 0x10084937C
}

// Namespace: System
public sealed class ConsoleColor : Enum // TypeDefIndex: 189
{
	// Fields
	public int value__; // 0x10
	public const ConsoleColor Black = 0; // 0x0
	public const ConsoleColor DarkBlue = 1; // 0x0
	public const ConsoleColor DarkGreen = 2; // 0x0
	public const ConsoleColor DarkCyan = 3; // 0x0
	public const ConsoleColor DarkRed = 4; // 0x0
	public const ConsoleColor DarkMagenta = 5; // 0x0
	public const ConsoleColor DarkYellow = 6; // 0x0
	public const ConsoleColor Gray = 7; // 0x0
	public const ConsoleColor DarkGray = 8; // 0x0
	public const ConsoleColor Blue = 9; // 0x0
	public const ConsoleColor Green = 10; // 0x0
	public const ConsoleColor Cyan = 11; // 0x0
	public const ConsoleColor Red = 12; // 0x0
	public const ConsoleColor Magenta = 13; // 0x0
	public const ConsoleColor Yellow = 14; // 0x0
	public const ConsoleColor White = 15; // 0x0

}

// Namespace: System
internal class ConsoleDriver // TypeDefIndex: 190
{
	// Fields
	internal static IConsoleDriver driver; // 0x0
	private static bool is_console; // 0x8
	private static bool called_isatty; // 0x9

	// Methods
	private static void .cctor(); // 0x10084961C
	private static IConsoleDriver CreateNullConsoleDriver(); // 0x100849718
	private static IConsoleDriver CreateWindowsConsoleDriver(); // 0x100849774
	private static IConsoleDriver CreateTermInfoDriver(string term); // 0x1008497D0
	public static ConsoleKeyInfo ReadKey(bool intercept); // 0x100848EE0
	public static bool get_IsConsole(); // 0x10084855C
	private static bool Isatty(IntPtr handle); // 0x100849834
	internal static int InternalKeyAvailable(int ms_timeout); // 0x10084983C
	internal static bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out PTR address); // 0x100849844
	internal static bool SetEcho(bool wantEcho); // 0x100849858
}

// Namespace: System
public sealed class ConsoleKey : Enum // TypeDefIndex: 191
{
	// Fields
	public int value__; // 0x10
	public const ConsoleKey Backspace = 8; // 0x0
	public const ConsoleKey Tab = 9; // 0x0
	public const ConsoleKey Clear = 12; // 0x0
	public const ConsoleKey Enter = 13; // 0x0
	public const ConsoleKey Pause = 19; // 0x0
	public const ConsoleKey Escape = 27; // 0x0
	public const ConsoleKey Spacebar = 32; // 0x0
	public const ConsoleKey PageUp = 33; // 0x0
	public const ConsoleKey PageDown = 34; // 0x0
	public const ConsoleKey End = 35; // 0x0
	public const ConsoleKey Home = 36; // 0x0
	public const ConsoleKey LeftArrow = 37; // 0x0
	public const ConsoleKey UpArrow = 38; // 0x0
	public const ConsoleKey RightArrow = 39; // 0x0
	public const ConsoleKey DownArrow = 40; // 0x0
	public const ConsoleKey Select = 41; // 0x0
	public const ConsoleKey Print = 42; // 0x0
	public const ConsoleKey Execute = 43; // 0x0
	public const ConsoleKey PrintScreen = 44; // 0x0
	public const ConsoleKey Insert = 45; // 0x0
	public const ConsoleKey Delete = 46; // 0x0
	public const ConsoleKey Help = 47; // 0x0
	public const ConsoleKey D0 = 48; // 0x0
	public const ConsoleKey D1 = 49; // 0x0
	public const ConsoleKey D2 = 50; // 0x0
	public const ConsoleKey D3 = 51; // 0x0
	public const ConsoleKey D4 = 52; // 0x0
	public const ConsoleKey D5 = 53; // 0x0
	public const ConsoleKey D6 = 54; // 0x0
	public const ConsoleKey D7 = 55; // 0x0
	public const ConsoleKey D8 = 56; // 0x0
	public const ConsoleKey D9 = 57; // 0x0
	public const ConsoleKey A = 65; // 0x0
	public const ConsoleKey B = 66; // 0x0
	public const ConsoleKey C = 67; // 0x0
	public const ConsoleKey D = 68; // 0x0
	public const ConsoleKey E = 69; // 0x0
	public const ConsoleKey F = 70; // 0x0
	public const ConsoleKey G = 71; // 0x0
	public const ConsoleKey H = 72; // 0x0
	public const ConsoleKey I = 73; // 0x0
	public const ConsoleKey J = 74; // 0x0
	public const ConsoleKey K = 75; // 0x0
	public const ConsoleKey L = 76; // 0x0
	public const ConsoleKey M = 77; // 0x0
	public const ConsoleKey N = 78; // 0x0
	public const ConsoleKey O = 79; // 0x0
	public const ConsoleKey P = 80; // 0x0
	public const ConsoleKey Q = 81; // 0x0
	public const ConsoleKey R = 82; // 0x0
	public const ConsoleKey S = 83; // 0x0
	public const ConsoleKey T = 84; // 0x0
	public const ConsoleKey U = 85; // 0x0
	public const ConsoleKey V = 86; // 0x0
	public const ConsoleKey W = 87; // 0x0
	public const ConsoleKey X = 88; // 0x0
	public const ConsoleKey Y = 89; // 0x0
	public const ConsoleKey Z = 90; // 0x0
	public const ConsoleKey LeftWindows = 91; // 0x0
	public const ConsoleKey RightWindows = 92; // 0x0
	public const ConsoleKey Applications = 93; // 0x0
	public const ConsoleKey Sleep = 95; // 0x0
	public const ConsoleKey NumPad0 = 96; // 0x0
	public const ConsoleKey NumPad1 = 97; // 0x0
	public const ConsoleKey NumPad2 = 98; // 0x0
	public const ConsoleKey NumPad3 = 99; // 0x0
	public const ConsoleKey NumPad4 = 100; // 0x0
	public const ConsoleKey NumPad5 = 101; // 0x0
	public const ConsoleKey NumPad6 = 102; // 0x0
	public const ConsoleKey NumPad7 = 103; // 0x0
	public const ConsoleKey NumPad8 = 104; // 0x0
	public const ConsoleKey NumPad9 = 105; // 0x0
	public const ConsoleKey Multiply = 106; // 0x0
	public const ConsoleKey Add = 107; // 0x0
	public const ConsoleKey Separator = 108; // 0x0
	public const ConsoleKey Subtract = 109; // 0x0
	public const ConsoleKey Decimal = 110; // 0x0
	public const ConsoleKey Divide = 111; // 0x0
	public const ConsoleKey F1 = 112; // 0x0
	public const ConsoleKey F2 = 113; // 0x0
	public const ConsoleKey F3 = 114; // 0x0
	public const ConsoleKey F4 = 115; // 0x0
	public const ConsoleKey F5 = 116; // 0x0
	public const ConsoleKey F6 = 117; // 0x0
	public const ConsoleKey F7 = 118; // 0x0
	public const ConsoleKey F8 = 119; // 0x0
	public const ConsoleKey F9 = 120; // 0x0
	public const ConsoleKey F10 = 121; // 0x0
	public const ConsoleKey F11 = 122; // 0x0
	public const ConsoleKey F12 = 123; // 0x0
	public const ConsoleKey F13 = 124; // 0x0
	public const ConsoleKey F14 = 125; // 0x0
	public const ConsoleKey F15 = 126; // 0x0
	public const ConsoleKey F16 = 127; // 0x0
	public const ConsoleKey F17 = 128; // 0x0
	public const ConsoleKey F18 = 129; // 0x0
	public const ConsoleKey F19 = 130; // 0x0
	public const ConsoleKey F20 = 131; // 0x0
	public const ConsoleKey F21 = 132; // 0x0
	public const ConsoleKey F22 = 133; // 0x0
	public const ConsoleKey F23 = 134; // 0x0
	public const ConsoleKey F24 = 135; // 0x0
	public const ConsoleKey BrowserBack = 166; // 0x0
	public const ConsoleKey BrowserForward = 167; // 0x0
	public const ConsoleKey BrowserRefresh = 168; // 0x0
	public const ConsoleKey BrowserStop = 169; // 0x0
	public const ConsoleKey BrowserSearch = 170; // 0x0
	public const ConsoleKey BrowserFavorites = 171; // 0x0
	public const ConsoleKey BrowserHome = 172; // 0x0
	public const ConsoleKey VolumeMute = 173; // 0x0
	public const ConsoleKey VolumeDown = 174; // 0x0
	public const ConsoleKey VolumeUp = 175; // 0x0
	public const ConsoleKey MediaNext = 176; // 0x0
	public const ConsoleKey MediaPrevious = 177; // 0x0
	public const ConsoleKey MediaStop = 178; // 0x0
	public const ConsoleKey MediaPlay = 179; // 0x0
	public const ConsoleKey LaunchMail = 180; // 0x0
	public const ConsoleKey LaunchMediaSelect = 181; // 0x0
	public const ConsoleKey LaunchApp1 = 182; // 0x0
	public const ConsoleKey LaunchApp2 = 183; // 0x0
	public const ConsoleKey Oem1 = 186; // 0x0
	public const ConsoleKey OemPlus = 187; // 0x0
	public const ConsoleKey OemComma = 188; // 0x0
	public const ConsoleKey OemMinus = 189; // 0x0
	public const ConsoleKey OemPeriod = 190; // 0x0
	public const ConsoleKey Oem2 = 191; // 0x0
	public const ConsoleKey Oem3 = 192; // 0x0
	public const ConsoleKey Oem4 = 219; // 0x0
	public const ConsoleKey Oem5 = 220; // 0x0
	public const ConsoleKey Oem6 = 221; // 0x0
	public const ConsoleKey Oem7 = 222; // 0x0
	public const ConsoleKey Oem8 = 223; // 0x0
	public const ConsoleKey Oem102 = 226; // 0x0
	public const ConsoleKey Process = 229; // 0x0
	public const ConsoleKey Packet = 231; // 0x0
	public const ConsoleKey Attention = 246; // 0x0
	public const ConsoleKey CrSel = 247; // 0x0
	public const ConsoleKey ExSel = 248; // 0x0
	public const ConsoleKey EraseEndOfFile = 249; // 0x0
	public const ConsoleKey Play = 250; // 0x0
	public const ConsoleKey Zoom = 251; // 0x0
	public const ConsoleKey NoName = 252; // 0x0
	public const ConsoleKey Pa1 = 253; // 0x0
	public const ConsoleKey OemClear = 254; // 0x0

}

// Namespace: System
public struct ConsoleKeyInfo // TypeDefIndex: 192
{
	// Fields
	internal static ConsoleKeyInfo Empty; // 0x0
	private ConsoleKey key; // 0x10
	private char keychar; // 0x14
	private ConsoleModifiers modifiers; // 0x18

	// Methods
	public void .ctor(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x100849890
	private static void .cctor(); // 0x1008498C0
	internal void SetModifiers(bool shift, bool alt, bool control); // 0x100849914
	public ConsoleKey get_Key(); // 0x100849944
	public char get_KeyChar(); // 0x100849954
	public override bool Equals(object value); // 0x100849A04
	public bool Equals(ConsoleKeyInfo obj); // 0x100849A0C
	public override int GetHashCode(); // 0x100849B3C
}

// Namespace: System
public sealed class ConsoleModifiers : Enum // TypeDefIndex: 193
{
	// Fields
	public int value__; // 0x10
	public const ConsoleModifiers Alt = 1; // 0x0
	public const ConsoleModifiers Shift = 2; // 0x0
	public const ConsoleModifiers Control = 4; // 0x0

}

// Namespace: System
public sealed class ConsoleSpecialKey : Enum // TypeDefIndex: 194
{
	// Fields
	public int value__; // 0x10
	public const ConsoleSpecialKey ControlC = 0; // 0x0
	public const ConsoleSpecialKey ControlBreak = 1; // 0x0

}

// Namespace: System
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 195
{
	// Methods
	protected void .ctor(); // 0x100849CA0
}

// Namespace: System
public static class Convert // TypeDefIndex: 196
{
	// Fields
	public static readonly object DBNull; // 0x0
	private static readonly Type[] conversionTable; // 0x8

	// Methods
	private static void .cctor(); // 0x100849CA8
	private static byte[] InternalFromBase64String(string str, bool allowWhitespaceOnly); // 0x10084A318
	public static byte[] FromBase64String(string s); // 0x10084A324
	public static string ToBase64String(byte[] inArray); // 0x10084A3F4
	public static string ToBase64String(byte[] inArray, int offset, int length); // 0x10084A490
	public static bool ToBoolean(byte value); // 0x100833428
	public static bool ToBoolean(Decimal value); // 0x10084A5EC
	public static bool ToBoolean(double value); // 0x10084A724
	public static bool ToBoolean(float value); // 0x10084A730
	public static bool ToBoolean(int value); // 0x10084A73C
	public static bool ToBoolean(long value); // 0x10084A748
	public static bool ToBoolean(sbyte value); // 0x10084A754
	public static bool ToBoolean(short value); // 0x10084A760
	public static bool ToBoolean(string value); // 0x10084A76C
	public static bool ToBoolean(string value, IFormatProvider provider); // 0x10084A7E4
	public static bool ToBoolean(uint value); // 0x10084A85C
	public static bool ToBoolean(ulong value); // 0x10084A868
	public static bool ToBoolean(ushort value); // 0x10084A874
	public static bool ToBoolean(object value); // 0x10084A880
	public static bool ToBoolean(object value, IFormatProvider provider); // 0x10084A8FC
	public static byte ToByte(bool value); // 0x100832368
	public static byte ToByte(byte value); // 0x10084AAC4
	public static byte ToByte(char value); // 0x100834998
	public static byte ToByte(Decimal value); // 0x10084AACC
	public static byte ToByte(double value); // 0x10084ADB8
	public static byte ToByte(float value); // 0x10084AF08
	public static byte ToByte(int value); // 0x10084B05C
	public static byte ToByte(long value); // 0x10084B0EC
	public static byte ToByte(sbyte value); // 0x10084B17C
	public static byte ToByte(short value); // 0x10084B208
	public static byte ToByte(string value); // 0x10084B29C
	public static byte ToByte(string value, IFormatProvider provider); // 0x10084B2B4
	public static byte ToByte(string value, int fromBase); // 0x10084B2D0
	public static byte ToByte(uint value); // 0x10084B79C
	public static byte ToByte(ulong value); // 0x10084B82C
	public static byte ToByte(ushort value); // 0x10084B8BC
	public static byte ToByte(object value); // 0x10084B94C
	public static byte ToByte(object value, IFormatProvider provider); // 0x10084B9C8
	public static char ToChar(byte value); // 0x1008334A8
	public static char ToChar(int value); // 0x10084BB94
	public static char ToChar(long value); // 0x10084BC24
	public static char ToChar(float value); // 0x10084BCB4
	public static char ToChar(sbyte value); // 0x10084BD14
	public static char ToChar(short value); // 0x10084BDA0
	public static char ToChar(string value); // 0x10084BE2C
	public static char ToChar(string value, IFormatProvider provider); // 0x10084BE90
	public static char ToChar(uint value); // 0x10084BEF4
	public static char ToChar(ulong value); // 0x10084BF84
	public static char ToChar(ushort value); // 0x10084C014
	public static char ToChar(object value, IFormatProvider provider); // 0x10084C01C
	public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x10084C1E8
	public static DateTime ToDateTime(short value); // 0x10084C2FC
	public static DateTime ToDateTime(int value); // 0x10084C35C
	public static DateTime ToDateTime(long value); // 0x10084C3BC
	public static DateTime ToDateTime(float value); // 0x10084C41C
	public static DateTime ToDateTime(object value, IFormatProvider provider); // 0x10084C47C
	public static DateTime ToDateTime(sbyte value); // 0x10084C670
	public static DateTime ToDateTime(ushort value); // 0x10084C6D0
	public static DateTime ToDateTime(uint value); // 0x10084C730
	public static DateTime ToDateTime(ulong value); // 0x10084C790
	public static Decimal ToDecimal(bool value); // 0x1008324A4
	public static Decimal ToDecimal(byte value); // 0x10083357C
	public static Decimal ToDecimal(double value); // 0x10084C80C
	public static Decimal ToDecimal(float value); // 0x10084C910
	public static Decimal ToDecimal(int value); // 0x10084CA14
	public static Decimal ToDecimal(long value); // 0x10084CA80
	public static Decimal ToDecimal(sbyte value); // 0x10084CB08
	public static Decimal ToDecimal(short value); // 0x10084CB8C
	public static Decimal ToDecimal(string value, IFormatProvider provider); // 0x10084CC10
	public static Decimal ToDecimal(uint value); // 0x10084CD20
	public static Decimal ToDecimal(ulong value); // 0x10084CD94
	public static Decimal ToDecimal(ushort value); // 0x10084CE04
	public static Decimal ToDecimal(object value); // 0x10084CE74
	public static Decimal ToDecimal(object value, IFormatProvider provider); // 0x10084CF00
	public static double ToDouble(bool value); // 0x100832588
	public static double ToDouble(byte value); // 0x100833654
	public static double ToDouble(Decimal value); // 0x10084D0E0
	public static double ToDouble(double value); // 0x10084D1F0
	public static double ToDouble(float value); // 0x10084D1F4
	public static double ToDouble(int value); // 0x10084D1FC
	public static double ToDouble(long value); // 0x10084D204
	public static double ToDouble(sbyte value); // 0x10084D20C
	public static double ToDouble(short value); // 0x10084D214
	public static double ToDouble(string value); // 0x10084D21C
	public static double ToDouble(string value, IFormatProvider provider); // 0x10084D234
	public static double ToDouble(uint value); // 0x10084D24C
	public static double ToDouble(ulong value); // 0x10084D254
	public static double ToDouble(ushort value); // 0x10084D25C
	public static double ToDouble(object value); // 0x10084D264
	public static double ToDouble(object value, IFormatProvider provider); // 0x10084D2E0
	public static short ToInt16(bool value); // 0x100832610
	public static short ToInt16(byte value); // 0x1008336C8
	public static short ToInt16(char value); // 0x100834BBC
	public static short ToInt16(Decimal value); // 0x10084D4AC
	public static short ToInt16(double value); // 0x10084D66C
	public static short ToInt16(float value); // 0x10084D790
	public static short ToInt16(int value); // 0x10084D8B8
	public static short ToInt16(long value); // 0x10084D94C
	public static short ToInt16(sbyte value); // 0x10084D9E0
	public static short ToInt16(short value); // 0x10084D9E8
	public static short ToInt16(string value, IFormatProvider provider); // 0x10084D9F0
	public static short ToInt16(string value, int fromBase); // 0x10084DA08
	public static short ToInt16(uint value); // 0x10084DB0C
	public static short ToInt16(ulong value); // 0x10084DB9C
	public static short ToInt16(ushort value); // 0x10084DC2C
	public static short ToInt16(object value); // 0x10084DCB8
	public static short ToInt16(object value, IFormatProvider provider); // 0x10084DD34
	public static int ToInt32(bool value); // 0x10083268C
	public static int ToInt32(byte value); // 0x10083373C
	public static int ToInt32(char value); // 0x100834CB4
	public static int ToInt32(Decimal value); // 0x10084DF00
	public static int ToInt32(double value); // 0x10084E0C0
	public static int ToInt32(float value); // 0x10084E1F4
	public static int ToInt32(long value); // 0x10084E334
	public static int ToInt32(sbyte value); // 0x10084E3CC
	public static int ToInt32(short value); // 0x10084E3D4
	public static int ToInt32(string value); // 0x10084E3DC
	public static int ToInt32(string value, IFormatProvider provider); // 0x10084E3F4
	public static int ToInt32(string value, int fromBase); // 0x10084E40C
	public static int ToInt32(uint value); // 0x10084E484
	public static int ToInt32(ulong value); // 0x10084E510
	public static int ToInt32(ushort value); // 0x10084E5A0
	public static int ToInt32(object value); // 0x10084E5A8
	public static int ToInt32(object value, IFormatProvider provider); // 0x10084E624
	public static long ToInt64(bool value); // 0x100832708
	public static long ToInt64(byte value); // 0x1008337B0
	public static long ToInt64(char value); // 0x100834D28
	public static long ToInt64(Decimal value); // 0x10084E7F0
	public static long ToInt64(double value); // 0x10084EAB0
	public static long ToInt64(float value); // 0x10084EBD4
	public static long ToInt64(int value); // 0x10084ECFC
	public static long ToInt64(long value); // 0x10084ED04
	public static long ToInt64(sbyte value); // 0x10084ED0C
	public static long ToInt64(short value); // 0x10084ED14
	public static long ToInt64(string value); // 0x10084ED1C
	public static long ToInt64(string value, IFormatProvider provider); // 0x10084ED30
	public static long ToInt64(string value, int fromBase); // 0x10084ED44
	public static long ToInt64(uint value); // 0x10084F1E4
	public static long ToInt64(ulong value); // 0x10084F1EC
	public static long ToInt64(ushort value); // 0x10084F278
	public static long ToInt64(object value); // 0x10084F280
	public static long ToInt64(object value, IFormatProvider provider); // 0x10084F2FC
	public static sbyte ToSByte(bool value); // 0x100832784
	public static sbyte ToSByte(byte value); // 0x100833824
	public static sbyte ToSByte(char value); // 0x100834D9C
	public static sbyte ToSByte(Decimal value); // 0x10084F4C8
	public static sbyte ToSByte(double value); // 0x10084F688
	public static sbyte ToSByte(float value); // 0x10084F7AC
	public static sbyte ToSByte(int value); // 0x10084F8D4
	public static sbyte ToSByte(long value); // 0x10084F968
	public static sbyte ToSByte(short value); // 0x10084F9FC
	public static sbyte ToSByte(string value, IFormatProvider provider); // 0x10084FA90
	public static sbyte ToSByte(string value, int fromBase); // 0x10084FB1C
	public static sbyte ToSByte(uint value); // 0x10084FBE0
	public static sbyte ToSByte(ulong value); // 0x10084FC70
	public static sbyte ToSByte(ushort value); // 0x10084FD00
	public static sbyte ToSByte(object value, IFormatProvider provider); // 0x10084FD90
	public static float ToSingle(bool value); // 0x100832808
	public static float ToSingle(byte value); // 0x100833920
	public static float ToSingle(Decimal value); // 0x10084FF5C
	public static float ToSingle(double value); // 0x10085004C
	public static float ToSingle(float value); // 0x100850054
	public static float ToSingle(int value); // 0x100850058
	public static float ToSingle(long value); // 0x100850060
	public static float ToSingle(sbyte value); // 0x100850068
	public static float ToSingle(short value); // 0x100850070
	public static float ToSingle(string value, IFormatProvider provider); // 0x100850078
	public static float ToSingle(uint value); // 0x100850090
	public static float ToSingle(ulong value); // 0x10085009C
	public static float ToSingle(ushort value); // 0x1008500A8
	public static float ToSingle(object value); // 0x1008500B0
	public static float ToSingle(object value, IFormatProvider provider); // 0x10085012C
	public static string ToString(byte value, int toBase); // 0x1008502F8
	public static string ToString(char value); // 0x100850A18
	public static string ToString(DateTime value, IFormatProvider provider); // 0x100850A28
	public static string ToString(Decimal value, IFormatProvider provider); // 0x100850A64
	public static string ToString(double value, IFormatProvider provider); // 0x100850B18
	public static string ToString(float value, IFormatProvider provider); // 0x100850B40
	public static string ToString(int value, int toBase); // 0x100850B68
	public static string ToString(int value, IFormatProvider provider); // 0x100850D14
	public static string ToString(long value); // 0x100850D40
	public static string ToString(long value, IFormatProvider provider); // 0x100850D68
	public static string ToString(object value); // 0x100850D94
	public static string ToString(object value, IFormatProvider provider); // 0x100850DFC
	public static string ToString(ulong value, IFormatProvider provider); // 0x100851040
	public static ushort ToUInt16(bool value); // 0x100832890
	public static ushort ToUInt16(byte value); // 0x100833994
	public static ushort ToUInt16(char value); // 0x100834EF8
	public static ushort ToUInt16(Decimal value); // 0x10085106C
	public static ushort ToUInt16(double value); // 0x10085122C
	public static ushort ToUInt16(float value); // 0x100851348
	public static ushort ToUInt16(int value); // 0x100851468
	public static ushort ToUInt16(long value); // 0x1008514F8
	public static ushort ToUInt16(sbyte value); // 0x100851588
	public static ushort ToUInt16(short value); // 0x100851614
	public static ushort ToUInt16(string value, IFormatProvider provider); // 0x1008516A0
	public static ushort ToUInt16(string value, int fromBase); // 0x1008516B8
	public static ushort ToUInt16(uint value); // 0x100851738
	public static ushort ToUInt16(ulong value); // 0x1008517C8
	public static ushort ToUInt16(object value, IFormatProvider provider); // 0x100851858
	public static uint ToUInt32(bool value); // 0x10083290C
	public static uint ToUInt32(byte value); // 0x100833A08
	public static uint ToUInt32(char value); // 0x100834F6C
	public static uint ToUInt32(Decimal value); // 0x100851A24
	public static uint ToUInt32(double value); // 0x100851C04
	public static uint ToUInt32(float value); // 0x100851D20
	public static uint ToUInt32(int value); // 0x100851E40
	public static uint ToUInt32(long value); // 0x100851ECC
	public static uint ToUInt32(sbyte value); // 0x100851F5C
	public static uint ToUInt32(short value); // 0x100851FE8
	public static uint ToUInt32(string value, IFormatProvider provider); // 0x100852074
	public static uint ToUInt32(string value, int fromBase); // 0x10085208C
	public static uint ToUInt32(ulong value); // 0x100852104
	public static uint ToUInt32(ushort value); // 0x100852194
	public static uint ToUInt32(object value); // 0x10085219C
	public static uint ToUInt32(object value, IFormatProvider provider); // 0x100852218
	public static ulong ToUInt64(bool value); // 0x100832988
	public static ulong ToUInt64(byte value); // 0x100833A7C
	public static ulong ToUInt64(char value); // 0x100834FE0
	public static ulong ToUInt64(Decimal value); // 0x1008523E4
	public static ulong ToUInt64(double value); // 0x1008525B0
	public static ulong ToUInt64(float value); // 0x1008526CC
	public static ulong ToUInt64(int value); // 0x1008527EC
	public static ulong ToUInt64(long value); // 0x100852878
	public static ulong ToUInt64(sbyte value); // 0x100852904
	public static ulong ToUInt64(short value); // 0x10085297C
	public static ulong ToUInt64(string value, IFormatProvider provider); // 0x100852A08
	public static ulong ToUInt64(string value, int fromBase); // 0x100852A1C
	public static ulong ToUInt64(uint value); // 0x100852A94
	public static ulong ToUInt64(ushort value); // 0x100852A9C
	public static ulong ToUInt64(object value); // 0x100852AA4
	public static ulong ToUInt64(object value, IFormatProvider provider); // 0x100852B20
	public static object ChangeType(object value, Type conversionType); // 0x100852CEC
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x100852E50
	private static bool NotValidBase(int value); // 0x100852F04
	private static int ConvertFromBase(string value, int fromBase, bool unsigned); // 0x10084B37C
	private static long ConvertFromBase64(string value, int fromBase, bool unsigned); // 0x10084EDBC
	private static void EndianSwap(byte[] value); // 0x100852F34
	private static string ConvertToBase2(byte[] value); // 0x1008504A0
	private static string ConvertToBase8(byte[] value); // 0x100850610
	private static string ConvertToBase16(byte[] value); // 0x100850838
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type); // 0x100831230
}

// Namespace: System
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable`1<DateTime>, IEquatable`1<DateTime> // TypeDefIndex: 197
{
	// Fields
	private const int dp400 = 146097; // 0x0
	private const int dp100 = 36524; // 0x0
	private const int dp4 = 1461; // 0x0
	private const long w32file_epoch = 504911232000000000; // 0x0
	private const long MAX_VALUE_TICKS = 3155378975999999999; // 0x0
	internal const long UnixEpoch = 621355968000000000; // 0x0
	private const long ticks18991230 = 599264352000000000; // 0x0
	private const double OAMinValue = -657435; // 0x0
	private const double OAMaxValue = 2958466; // 0x0
	private const string formatExceptionMessage = "String was not recognized as a valid DateTime."; // 0x0
	private TimeSpan ticks; // 0x10
	private DateTimeKind kind; // 0x18
	public static readonly DateTime MaxValue; // 0x0
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x20
	private static readonly string[] ParseYearDayMonthFormats; // 0x28
	private static readonly string[] ParseYearMonthDayFormats; // 0x30
	private static readonly string[] ParseDayMonthYearFormats; // 0x38
	private static readonly string[] ParseMonthDayYearFormats; // 0x40
	private static readonly string[] MonthDayShortFormats; // 0x48
	private static readonly string[] DayMonthShortFormats; // 0x50
	private static readonly int[] daysmonth; // 0x58
	private static readonly int[] daysmonthleap; // 0x60
	private static object to_local_time_span_object; // 0x68
	private static long last_now; // 0x70

	// Methods
	public void .ctor(long ticks); // 0x100854028
	public void .ctor(int year, int month, int day); // 0x1008541F8
	public void .ctor(int year, int month, int day, int hour, int minute, int second); // 0x100854248
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x10085451C
	internal void .ctor(bool check, TimeSpan value); // 0x100854658
	public void .ctor(long ticks, DateTimeKind kind); // 0x100854710
	public void .ctor(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x100854780
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind); // 0x1008547F8
	private static void .cctor(); // 0x100854834
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x100855DC4
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x100855E24
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x100855E84
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x100855E90
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x100855EF0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x100855F50
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x100855FB0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x100856010
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x100856070
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x1008560D0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x100856130
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x1008562C8
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x100856324
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x100856384
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x1008563E4
	private static int AbsoluteDays(int year, int month, int day); // 0x100854390
	private int FromTicks(Which what); // 0x1008566B4
	public DateTime get_Date(); // 0x10085674C
	public int get_Month(); // 0x100856754
	public int get_Day(); // 0x100856760
	public DayOfWeek get_DayOfWeek(); // 0x10085676C
	public int get_DayOfYear(); // 0x1008567B4
	public TimeSpan get_TimeOfDay(); // 0x100856824
	public int get_Hour(); // 0x100856894
	public int get_Minute(); // 0x1008568A8
	public int get_Second(); // 0x1008568BC
	public int get_Millisecond(); // 0x1008568C8
	internal static long GetTimeMonotonic(); // 0x1008568D4
	internal static long GetNow(); // 0x1008568D8
	public static DateTime get_Now(); // 0x100853E9C
	public long get_Ticks(); // 0x100856984
	public static DateTime get_Today(); // 0x100856990
	public static DateTime get_UtcNow(); // 0x100856A60
	public int get_Year(); // 0x100856B08
	public DateTimeKind get_Kind(); // 0x100856B1C
	public DateTime Add(TimeSpan value); // 0x100856C48
	public DateTime AddDays(double value); // 0x100856E54
	public DateTime AddTicks(long value); // 0x100856E5C
	public DateTime AddMilliseconds(double value); // 0x100856E64
	public DateTime AddSeconds(double value); // 0x100856E7C
	public static int Compare(DateTime t1, DateTime t2); // 0x100856E90
	public int CompareTo(object value); // 0x100857038
	public bool IsDaylightSavingTime(); // 0x100857120
	public int CompareTo(DateTime value); // 0x1008571A4
	public bool Equals(DateTime value); // 0x10085722C
	public long ToBinary(); // 0x100857354
	public static DateTime FromBinary(long dateData); // 0x10085735C
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x100857528
	public static int DaysInMonth(int year, int month); // 0x10085426C
	public override bool Equals(object value); // 0x100857638
	public string[] GetDateTimeFormats(); // 0x10085799C
	public string[] GetDateTimeFormats(IFormatProvider provider); // 0x100857BDC
	public string[] GetDateTimeFormats(char format, IFormatProvider provider); // 0x100857D34
	private string[] GetDateTimeFormats(bool adjustutc, string[] patterns, DateTimeFormatInfo dfi); // 0x100857DF0
	private void CheckDateTimeKind(DateTimeKind kind); // 0x100857DF8
	public override int GetHashCode(); // 0x100857E14
	public TypeCode GetTypeCode(); // 0x100857E30
	public static bool IsLeapYear(int year); // 0x1008563F0
	public static DateTime Parse(string s); // 0x100857E38
	public static DateTime Parse(string s, IFormatProvider provider); // 0x10084C284
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles); // 0x100857EA0
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, Exception exception); // 0x100857F88
	public static DateTime ParseExact(string s, string format, IFormatProvider provider); // 0x10085B3B8
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, Exception exc); // 0x100858920
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed); // 0x10085B550
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed); // 0x10085B730
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed); // 0x10085BA30
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, int ampm); // 0x10085BB6C
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x10085BF18
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x10085C008
	private static bool IsLetter(string s, int pos); // 0x10085BE64
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, bool incompleteFormat, bool longYear); // 0x100858C94
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style); // 0x10085B438
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style); // 0x10085C738
	private static void CheckStyle(DateTimeStyles style); // 0x10085C8F4
	public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result); // 0x10085C9A8
	public static bool TryParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style, out DateTime result); // 0x10085CB0C
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, bool longYear, bool setExceptionOnError, Exception exception); // 0x10085B1AC
	public DateTime Subtract(TimeSpan value); // 0x10085CD84
	public long ToFileTime(); // 0x10085CE48
	public long ToFileTimeUtc(); // 0x10085CEF8
	public string ToLongDateString(); // 0x10085CF5C
	public string ToLongTimeString(); // 0x10085CFB8
	public double ToOADate(); // 0x10085D0A4
	public string ToShortDateString(); // 0x10085D100
	public string ToShortTimeString(); // 0x10085D15C
	public override string ToString(); // 0x10085D348
	public string ToString(IFormatProvider provider); // 0x10085D350
	public string ToString(string format); // 0x10085D364
	public string ToString(string format, IFormatProvider provider); // 0x10085D370
	public DateTime ToLocalTime(); // 0x10085D378
	public DateTime ToUniversalTime(); // 0x10085D380
	public static DateTime op_Addition(DateTime d, TimeSpan t); // 0x1008568DC
	public static bool op_Equality(DateTime d1, DateTime d2); // 0x10085D388
	public static bool op_GreaterThan(DateTime t1, DateTime t2); // 0x10085D404
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2); // 0x10085D480
	public static bool op_Inequality(DateTime d1, DateTime d2); // 0x10085C164
	public static bool op_LessThan(DateTime t1, DateTime t2); // 0x10085D4FC
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2); // 0x10085D578
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2); // 0x10085D5F4
	public static DateTime op_Subtraction(DateTime d, TimeSpan t); // 0x10085D6A8
}

// Namespace: 
private sealed class Which : Enum // TypeDefIndex: 198
{
	// Fields
	public int value__; // 0x10
	public const Which Day = 0; // 0x0
	public const Which DayYear = 1; // 0x0
	public const Which Month = 2; // 0x0
	public const Which Year = 3; // 0x0

}

// Namespace: System
public sealed class DateTimeKind : Enum // TypeDefIndex: 199
{
	// Fields
	public int value__; // 0x10
	public const DateTimeKind Unspecified = 0; // 0x0
	public const DateTimeKind Utc = 1; // 0x0
	public const DateTimeKind Local = 2; // 0x0

}

// Namespace: System
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable`1<DateTimeOffset>, IEquatable`1<DateTimeOffset>, IDeserializationCallback // TypeDefIndex: 200
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x0
	public static readonly DateTimeOffset MinValue; // 0x18
	private DateTime dt; // 0x10
	private TimeSpan utc_offset; // 0x20

	// Methods
	public void .ctor(DateTime dateTime); // 0x10085D7DC
	public void .ctor(DateTime dateTime, TimeSpan offset); // 0x10085D7E4
	public void .ctor(long ticks, TimeSpan offset); // 0x10085D7EC
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10085D978
	private static void .cctor(); // 0x10085D980
	private int System.IComparable.CompareTo(object obj); // 0x10085DB6C
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10085DC68
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x10085DC70
	public int CompareTo(DateTimeOffset other); // 0x10085DC74
	public bool Equals(DateTimeOffset other); // 0x10085DD44
	public override bool Equals(object obj); // 0x10085DE68
	public override int GetHashCode(); // 0x10085DE70
	public override string ToString(); // 0x10085E198
	public string ToString(string format, IFormatProvider formatProvider); // 0x10085F4A0
	public DateTime get_DateTime(); // 0x10085F4A8
	public TimeSpan get_Offset(); // 0x10085F4B0
	public DateTime get_UtcDateTime(); // 0x10085F4B8
}

// Namespace: System
internal static class DateTimeUtils // TypeDefIndex: 201
{
	// Methods
	public static int CountRepeat(string fmt, int p, char c); // 0x10085F4C0
	public static void ZeroPad(StringBuilder output, int digits, int len); // 0x10085F53C
	public static int ParseQuotedString(string fmt, int pos, StringBuilder output); // 0x10085F644
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant); // 0x10085C15C
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant, bool date_time_offset); // 0x10085E1A8
	public static string ToString(DateTime dt, string format, DateTimeFormatInfo dfi); // 0x100857D3C
	public static string ToString(DateTime dt, Nullable`1<TimeSpan> utc_offset, string format, DateTimeFormatInfo dfi); // 0x10085E5B4
}

// Namespace: System
public sealed class DayOfWeek : Enum // TypeDefIndex: 202
{
	// Fields
	public int value__; // 0x10
	public const DayOfWeek Sunday = 0; // 0x0
	public const DayOfWeek Monday = 1; // 0x0
	public const DayOfWeek Tuesday = 2; // 0x0
	public const DayOfWeek Wednesday = 3; // 0x0
	public const DayOfWeek Thursday = 4; // 0x0
	public const DayOfWeek Friday = 5; // 0x0
	public const DayOfWeek Saturday = 6; // 0x0

}

// Namespace: System
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 203
{
	// Fields
	public static readonly DBNull Value; // 0x0

	// Methods
	private void .ctor(); // 0x10085F788
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10085F790
	private static void .cctor(); // 0x10085F7F4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x10085F858
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x10085F8AC
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x10085F900
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x10085F954
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x10085F9A8
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x10085F9FC
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x10085FA50
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x10085FAA4
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x10085FAF8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x10085FB4C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x10085FBA0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x10085FBF4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x10085FD0C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x10085FD60
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x10085FDB4
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10085FE08
	public override string ToString(); // 0x10085FE34
	public string ToString(IFormatProvider provider); // 0x10085FE9C
}

// Namespace: System
internal class DelegateData // TypeDefIndex: 204
{
	// Fields
	public Type target_type; // 0x10
	public string method_name; // 0x18

}

// Namespace: System
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 205
{
	// Fields
	private Delegate _delegate; // 0x10

	// Methods
	private void .ctor(SerializationInfo info, StreamingContext ctx); // 0x1008644C8
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x100864920
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100864D64
	public object GetRealObject(StreamingContext context); // 0x100864DB8
}

// Namespace: 
private class DelegateEntry // TypeDefIndex: 206
{
	// Fields
	private string type; // 0x10
	private string assembly; // 0x18
	public object target; // 0x20
	private string targetTypeAssembly; // 0x28
	private string targetTypeName; // 0x30
	private string methodName; // 0x38
	public DelegateEntry delegateEntry; // 0x40

	// Methods
	public void .ctor(Delegate del, string targetLabel); // 0x100864B44
	public Delegate DeserializeDelegate(SerializationInfo info); // 0x100864680
}

// Namespace: System
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 207
{
	// Fields
	private const int Result = -2147352558; // 0x0

	// Methods
	public void .ctor(); // 0x1008662D0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10086634C
}

// Namespace: System
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 208
{
	// Fields
	private const int Result = -2146233052; // 0x0

	// Methods
	public void .ctor(); // 0x100866354
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008663C8
}

// Namespace: System
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 209
{
	// Fields
	private const int Result = -2146233053; // 0x0

	// Methods
	public void .ctor(); // 0x100868368
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008683DC
}

// Namespace: System
internal struct MonoEnumInfo // TypeDefIndex: 210
{
	// Fields
	internal Type utype; // 0x10
	internal Array values; // 0x18
	internal string[] names; // 0x20
	internal Hashtable name_hash; // 0x28
	private static Hashtable cache; // 0xFFFFFFFFFFFFFFFF
	private static Hashtable global_cache; // 0x0
	private static object global_cache_monitor; // 0x8
	internal static SByteComparer sbyte_comparer; // 0x10
	internal static ShortComparer short_comparer; // 0x18
	internal static IntComparer int_comparer; // 0x20
	internal static LongComparer long_comparer; // 0x28

	// Methods
	private void .ctor(MonoEnumInfo other); // 0x100899E14
	private static void .cctor(); // 0x100899E28
	private static void get_enum_info(Type enumType, out MonoEnumInfo info); // 0x100899F30
	private static Hashtable get_Cache(); // 0x100899F3C
	internal static void GetInfo(Type enumType, out MonoEnumInfo info); // 0x10089A018
}

// Namespace: 
internal class SByteComparer : IComparer`1<sbyte>, IComparer // TypeDefIndex: 211
{
	// Methods
	public void .ctor(); // 0x100899F20
	public int Compare(object x, object y); // 0x10089A814
	public int Compare(sbyte ix, sbyte iy); // 0x10089A88C
}

// Namespace: 
internal class ShortComparer : IComparer`1<short>, IComparer // TypeDefIndex: 212
{
	// Methods
	public void .ctor(); // 0x100899F24
	public int Compare(object x, object y); // 0x10089A898
	public int Compare(short ix, short iy); // 0x10089A910
}

// Namespace: 
internal class IntComparer : IComparer`1<int>, IComparer // TypeDefIndex: 213
{
	// Methods
	public void .ctor(); // 0x100899F28
	public int Compare(object x, object y); // 0x10089A6C4
	public int Compare(int ix, int iy); // 0x10089A750
}

// Namespace: 
internal class LongComparer : IComparer`1<long>, IComparer // TypeDefIndex: 214
{
	// Methods
	public void .ctor(); // 0x100899F2C
	public int Compare(object x, object y); // 0x10089A76C
	public int Compare(long ix, long iy); // 0x10089A7F8
}

// Namespace: System
public static class Environment // TypeDefIndex: 215
{
	// Fields
	private static OperatingSystem os; // 0x0

	// Methods
	public static string get_CurrentDirectory(); // 0x10086C478
	public static bool get_SocketSecurityEnabled(); // 0x10086C5A4
	public static string get_MachineName(); // 0x10086C5A8
	public static string get_NewLine(); // 0x1008662CC
	internal static PlatformID get_Platform(); // 0x10086C5AC
	internal static string GetOSVersionString(); // 0x10086C5B0
	public static OperatingSystem get_OSVersion(); // 0x10086C5B4
	public static int get_TickCount(); // 0x10086C66C
	public static string get_UserName(); // 0x10086C670
	public static void Exit(int exitCode); // 0x10086C674
	public static string[] GetCommandLineArgs(); // 0x10086C67C
	internal static string internalGetEnvironmentVariable(string variable); // 0x10086C680
	public static string GetEnvironmentVariable(string variable); // 0x10086C688
	private static string GetWindowsFolderPath(int folder); // 0x10086C734
	public static string GetFolderPath(SpecialFolder folder); // 0x10086C73C
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x10086CB74
	internal static string InternalGetFolderPath(SpecialFolder folder); // 0x10086C840
	internal static bool get_IsRunningOnWindows(); // 0x10086C824
	internal static string GetMachineConfigPath(); // 0x10086D47C
	internal static string internalGetHome(); // 0x10086D478
}

// Namespace: 
public sealed class SpecialFolder : Enum // TypeDefIndex: 216
{
	// Fields
	public int value__; // 0x10
	public const SpecialFolder MyDocuments = 5; // 0x0
	public const SpecialFolder Desktop = 0; // 0x0
	public const SpecialFolder MyComputer = 17; // 0x0
	public const SpecialFolder Programs = 2; // 0x0
	public const SpecialFolder Personal = 5; // 0x0
	public const SpecialFolder Favorites = 6; // 0x0
	public const SpecialFolder Startup = 7; // 0x0
	public const SpecialFolder Recent = 8; // 0x0
	public const SpecialFolder SendTo = 9; // 0x0
	public const SpecialFolder StartMenu = 11; // 0x0
	public const SpecialFolder MyMusic = 13; // 0x0
	public const SpecialFolder DesktopDirectory = 16; // 0x0
	public const SpecialFolder Templates = 21; // 0x0
	public const SpecialFolder ApplicationData = 26; // 0x0
	public const SpecialFolder LocalApplicationData = 28; // 0x0
	public const SpecialFolder InternetCache = 32; // 0x0
	public const SpecialFolder Cookies = 33; // 0x0
	public const SpecialFolder History = 34; // 0x0
	public const SpecialFolder CommonApplicationData = 35; // 0x0
	public const SpecialFolder System = 37; // 0x0
	public const SpecialFolder ProgramFiles = 38; // 0x0
	public const SpecialFolder MyPictures = 39; // 0x0
	public const SpecialFolder CommonProgramFiles = 43; // 0x0

}

// Namespace: System
public class EventArgs // TypeDefIndex: 217
{
	// Fields
	public static readonly EventArgs Empty; // 0x0

	// Methods
	public void .ctor(); // 0x10086D480
	private static void .cctor(); // 0x10086D488
}

// Namespace: System
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 218
{
	// Methods
	public void .ctor(); // 0x10086E9B0
	public void .ctor(string message); // 0x10086EA14
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x10086EA1C
}

// Namespace: System
public class FieldAccessException : MemberAccessException // TypeDefIndex: 219
{
	// Methods
	public void .ctor(); // 0x10086EA24
	public void .ctor(string message); // 0x10086EA98
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10086EAC8
}

// Namespace: System
public class FlagsAttribute : Attribute // TypeDefIndex: 220
{
	// Methods
	public void .ctor(); // 0x10086EAD0
}

// Namespace: System
public class FormatException : SystemException // TypeDefIndex: 221
{
	// Fields
	private const int Result = -2146233033; // 0x0

	// Methods
	public void .ctor(); // 0x100867CE4
	public void .ctor(string message); // 0x1008680E8
	public void .ctor(string message, Exception innerException); // 0x10086EAD8
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10086EB08
}

// Namespace: System
public static class GC // TypeDefIndex: 222
{
	// Methods
	public static int get_MaxGeneration(); // 0x10086EB10
	private static void InternalCollect(int generation); // 0x10086EB14
	public static void Collect(); // 0x10086EB1C
	public static void SuppressFinalize(object obj); // 0x10086EB30
}

// Namespace: System
public struct Guid : IFormattable, IComparable, IComparable`1<Guid>, IEquatable`1<Guid> // TypeDefIndex: 223
{
	// Fields
	private int _a; // 0x10
	private short _b; // 0x14
	private short _c; // 0x16
	private byte _d; // 0x18
	private byte _e; // 0x19
	private byte _f; // 0x1A
	private byte _g; // 0x1B
	private byte _h; // 0x1C
	private byte _i; // 0x1D
	private byte _j; // 0x1E
	private byte _k; // 0x1F
	public static readonly Guid Empty; // 0x0
	private static object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x18
	private static RandomNumberGenerator _fastRng; // 0x20

	// Methods
	public void .ctor(byte[] b); // 0x1008779A0
	public void .ctor(string g); // 0x100877BFC
	public void .ctor(int a, short b, short c, byte[] d); // 0x100877D80
	public void .ctor(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x100877D88
	private static void .cctor(); // 0x100877DC8
	private static void CheckNull(object o); // 0x100877A6C
	private static void CheckLength(byte[] o, int l); // 0x100877E40
	private static void CheckArray(byte[] o, int l); // 0x100877924
	private static int Compare(int x, int y); // 0x100877F40
	public int CompareTo(object value); // 0x100878254
	public override bool Equals(object o); // 0x1008782E8
	public int CompareTo(Guid value); // 0x1008782F0
	public bool Equals(Guid g); // 0x1008782F8
	public override int GetHashCode(); // 0x100878370
	private static char ToHex(int b); // 0x100878378
	public static Guid NewGuid(); // 0x100878394
	internal static byte[] FastNewGuidArray(); // 0x100878578
	private static void AppendInt(StringBuilder builder, int value); // 0x10087881C
	private static void AppendShort(StringBuilder builder, short value); // 0x100878974
	private static void AppendByte(StringBuilder builder, byte value); // 0x100878A60
	private string BaseToString(bool h, bool p, bool b); // 0x100878D6C
	public override string ToString(); // 0x100878D84
	public string ToString(string format); // 0x100878F90
	public string ToString(string format, IFormatProvider provider); // 0x100878F98
	public static bool op_Equality(Guid a, Guid b); // 0x100878FA0
	public static bool op_Inequality(Guid a, Guid b); // 0x100879000
}

// Namespace: 
internal class GuidParser // TypeDefIndex: 224
{
	// Fields
	private string _src; // 0x10
	private int _length; // 0x18
	private int _cur; // 0x1C

	// Methods
	public void .ctor(string src); // 0x100877AF4
	private void Reset(); // 0x1008790AC
	private bool AtEnd(); // 0x1008790E4
	private void ThrowFormatException(); // 0x1008790F4
	private ulong ParseHex(int length, bool strictLength); // 0x100879164
	private bool ParseOptChar(char c); // 0x1008792A0
	private void ParseChar(char c); // 0x100879300
	private Guid ParseGuid1(); // 0x10087931C
	private void ParseHexPrefix(); // 0x100879588
	private Guid ParseGuid2(); // 0x1008795B4
	public Guid Parse(); // 0x100877B24
}

// Namespace: System
public interface IAppDomainSetup // TypeDefIndex: 225
{
}

// Namespace: System
internal interface IConsoleDriver // TypeDefIndex: 226
{
	// Methods
	public abstract ConsoleKeyInfo ReadKey(bool intercept); // 0
}

// Namespace: System
public interface ICustomFormatter // TypeDefIndex: 227
{
	// Methods
	public abstract string Format(string format, object arg, IFormatProvider formatProvider); // 0
}

// Namespace: System
public interface IFormatProvider // TypeDefIndex: 228
{
	// Methods
	public abstract object GetFormat(Type formatType); // 0
}

// Namespace: System
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 229
{
	// Methods
	public void .ctor(); // 0x1008797D4
	public void .ctor(string message); // 0x100879838
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x100879840
}

// Namespace: System
public class InvalidCastException : SystemException // TypeDefIndex: 230
{
	// Fields
	private const int Result = -2147467262; // 0x0

	// Methods
	public void .ctor(); // 0x1008665F8
	public void .ctor(string message); // 0x10087E9C0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10087E9F0
}

// Namespace: System
public class InvalidOperationException : SystemException // TypeDefIndex: 231
{
	// Fields
	private const int Result = -2146233079; // 0x0

	// Methods
	public void .ctor(); // 0x10087E9F8
	public void .ctor(string message); // 0x10086EC40
	public void .ctor(string message, Exception innerException); // 0x10087EA6C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10087EA9C
}

// Namespace: System
public interface IServiceProvider // TypeDefIndex: 232
{
	// Methods
	public abstract object GetService(Type serviceType); // 0
}

// Namespace: System
internal static class KnownTerminals // TypeDefIndex: 233
{
	// Methods
	public static byte[] get_linux(); // 0x1008968C8
	public static byte[] get_xterm(); // 0x100896948
	public static byte[] get_ansi(); // 0x1008969C8
}

// Namespace: System
public sealed class LoaderOptimization : Enum // TypeDefIndex: 234
{
	// Fields
	public int value__; // 0x10
	public const LoaderOptimization NotSpecified = 0; // 0x0
	public const LoaderOptimization SingleDomain = 1; // 0x0
	public const LoaderOptimization MultiDomain = 2; // 0x0
	public const LoaderOptimization MultiDomainHost = 3; // 0x0
	public const LoaderOptimization DomainMask = 3; // 0x0
	public const LoaderOptimization DisallowBindings = 4; // 0x0

}

// Namespace: System
public sealed class LocalDataStoreSlot // TypeDefIndex: 235
{
	// Fields
	internal int slot; // 0x10
	internal bool thread_local; // 0x14
	private static object lock_obj; // 0x0
	private static bool[] slot_bitmap_thread; // 0x8
	private static bool[] slot_bitmap_context; // 0x10

	// Methods
	internal void .ctor(bool in_thread); // 0x100896A48
	private static void .cctor(); // 0x100896D08
	protected override void Finalize(); // 0x100896D68
}

// Namespace: System
public static class Math // TypeDefIndex: 236
{
	// Methods
	public static float Abs(float value); // 0x1008970C0
	public static int Abs(int value); // 0x1008970D0
	public static long Abs(long value); // 0x100897198
	public static double Ceiling(double a); // 0x10089722C
	public static double Floor(double d); // 0x100897244
	public static double Log(double a, double newBase); // 0x100897248
	public static byte Max(byte val1, byte val2); // 0x100897284
	public static double Max(double val1, double val2); // 0x100897290
	public static float Max(float val1, float val2); // 0x1008972E8
	public static int Max(int val1, int val2); // 0x100897340
	public static float Min(float val1, float val2); // 0x10089734C
	public static int Min(int val1, int val2); // 0x1008973A4
	public static Decimal Round(Decimal d); // 0x1008973B0
	public static double Round(double a); // 0x10089768C
	public static double Sin(double a); // 0x100897690
	public static double Cos(double d); // 0x100897694
	public static double Tan(double a); // 0x100897698
	public static double Acos(double d); // 0x10089769C
	public static double Atan2(double y, double x); // 0x1008976A0
	public static double Log(double d); // 0x1008976A4
	public static double Pow(double x, double y); // 0x1008976A8
	public static double Sqrt(double d); // 0x1008976AC
}

// Namespace: System
public class MemberAccessException : SystemException // TypeDefIndex: 237
{
	// Methods
	public void .ctor(); // 0x1008976B0
	public void .ctor(string message); // 0x100897728
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10089775C
}

// Namespace: System
public class MethodAccessException : MemberAccessException // TypeDefIndex: 238
{
	// Methods
	public void .ctor(); // 0x100897764
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008977F4
}

// Namespace: System
public class MissingFieldException : MissingMemberException // TypeDefIndex: 239
{
	// Methods
	public void .ctor(); // 0x1008977FC
	public void .ctor(string message); // 0x1008978BC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008978EC
	public override string get_Message(); // 0x100897A88
}

// Namespace: System
public class MissingMemberException : MemberAccessException // TypeDefIndex: 240
{
	// Fields
	protected string ClassName; // 0x60
	protected string MemberName; // 0x68
	protected byte[] Signature; // 0x70

	// Methods
	public void .ctor(); // 0x100897C00
	public void .ctor(string message); // 0x100897870
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008978F0
	public void .ctor(string className, string memberName); // 0x100897C90
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100897CD4
	public override string get_Message(); // 0x100897B40
}

// Namespace: System
public class MissingMethodException : MissingMemberException // TypeDefIndex: 241
{
	// Fields
	private const int Result = -2146233069; // 0x0

	// Methods
	public void .ctor(); // 0x100897DA0
	public void .ctor(string message); // 0x100897E14
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100897E44
	public void .ctor(string className, string methodName); // 0x100897E48
	public override string get_Message(); // 0x100897EA4
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 242
{
	// Fields
	private object msg; // 0x10
	private IntPtr cb_method; // 0x18
	private object cb_target; // 0x20
	private object state; // 0x28
	private object res; // 0x30
	private object out_args; // 0x38
	private long wait_event; // 0x40

	// Methods
	public void .ctor(); // 0x100897F5C
}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 243
{
	// Fields
	private static Assembly corlib; // 0x0
	private static readonly Type AttributeUsageType; // 0x8
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x10

	// Methods
	private static void .cctor(); // 0x100897F60
	private static bool IsUserCattrProvider(object obj); // 0x100898014
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x100898250
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x100898260
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType); // 0x10089853C
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x100898738
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x100898858
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x1008994F4
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x1008996BC
	internal static IList`1<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x1008996C4
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x100899774
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x100899A40
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property); // 0x100899A4C
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x100899334
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x1008990C4
}

// Namespace: 
private class AttributeInfo // TypeDefIndex: 244
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private int _inheritanceLevel; // 0x18

	// Methods
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel); // 0x100899328
	public AttributeUsageAttribute get_Usage(); // 0x100899318
	public int get_InheritanceLevel(); // 0x100899320
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 245
{
	// Fields
	public string full_name; // 0x10
	public ConstructorInfo default_ctor; // 0x18

	// Methods
	public void .ctor(); // 0x10089AA1C
}

// Namespace: System
internal class MonoType : Type, ISerializable // TypeDefIndex: 246
{
	// Fields
	private MonoTypeInfo type_info; // 0x18

	// Methods
	private static TypeAttributes get_attributes(Type type); // 0x10089A950
	internal ConstructorInfo GetDefaultConstructor(); // 0x10089A958
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x10089AA20
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x10089AA24
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type); // 0x10089AEDC
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x10089AEE0
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr); // 0x10089AEE8
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x10089AEEC
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr, Type reflected_type); // 0x10089AF7C
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x10089AF80
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x10089AF88
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type); // 0x10089AF8C
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x10089AF90
	public override Type GetInterface(string name, bool ignoreCase); // 0x10089AF98
	public override Type[] GetInterfaces(); // 0x10089B228
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x10089B22C
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x10089B230
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x10089B248
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type); // 0x10089B838
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x10089B83C
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x10089B854
	protected override bool HasElementTypeImpl(); // 0x10089B9F4
	protected override bool IsArrayImpl(); // 0x10089BABC
	protected override bool IsByRefImpl(); // 0x10089BB28
	protected override bool IsPointerImpl(); // 0x10089BB2C
	protected override bool IsPrimitiveImpl(); // 0x10089BB30
	public override bool IsSubclassOf(Type type); // 0x10089BB34
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x10089BBC0
	public override Type GetElementType(); // 0x10089CE34
	public override Type get_UnderlyingSystemType(); // 0x10089CE38
	public override Assembly get_Assembly(); // 0x10089CE3C
	public override string get_AssemblyQualifiedName(); // 0x10089CE40
	private string getFullName(bool full_name, bool assembly_qualified); // 0x10089CE4C
	public override Type get_BaseType(); // 0x10089CE50
	public override string get_FullName(); // 0x10089CE54
	public override bool IsDefined(Type attributeType, bool inherit); // 0x10089CED8
	public override object[] GetCustomAttributes(bool inherit); // 0x10089CF54
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x10089CFC8
	public override MemberTypes get_MemberType(); // 0x10089D078
	public override string get_Name(); // 0x10089D0FC
	public override string get_Namespace(); // 0x10089D100
	public override Module get_Module(); // 0x10089D104
	public override Type get_DeclaringType(); // 0x10089D108
	public override Type get_ReflectedType(); // 0x10089D10C
	public override RuntimeTypeHandle get_TypeHandle(); // 0x10089D158
	public override int GetArrayRank(); // 0x10089D160
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10089D164
	public override string ToString(); // 0x10089D190
	public override Type[] GetGenericArguments(); // 0x10089D19C
	public override bool get_ContainsGenericParameters(); // 0x10089D1A0
	public override bool get_IsGenericParameter(); // 0x10089D360
	public override Type GetGenericTypeDefinition(); // 0x10089D364
	private MethodBase CheckMethodSecurity(MethodBase mb); // 0x10089ADC4
	private void ReorderParamArrayArguments(object[] args, MethodBase method); // 0x10089CBC0
}

// Namespace: System
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 247
{
	// Methods
	public void .ctor(); // 0x10089DC48
	public void .ctor(string message); // 0x10089DCAC
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x10089DCB4
}

// Namespace: System
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 248
{
	// Methods
	public void .ctor(); // 0x10089DCBC
}

// Namespace: System
public class NotImplementedException : SystemException // TypeDefIndex: 249
{
	// Methods
	public void .ctor(); // 0x10089DCC4
	public void .ctor(string message); // 0x10089DD3C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10089DD70
}

// Namespace: System
public class NotSupportedException : SystemException // TypeDefIndex: 250
{
	// Fields
	private const int Result = -2146233067; // 0x0

	// Methods
	public void .ctor(); // 0x10089DD78
	public void .ctor(string message); // 0x10089606C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10089DDF0
}

// Namespace: System
internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 251
{
	// Methods
	public void .ctor(); // 0x10089DDF8
	public ConsoleKeyInfo ReadKey(bool intercept); // 0x10089DDFC
}

// Namespace: System
public class NullReferenceException : SystemException // TypeDefIndex: 252
{
	// Fields
	private const int Result = -2147467261; // 0x0

	// Methods
	public void .ctor(); // 0x10089DE68
	public void .ctor(string message); // 0x10089DEE0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10089DF14
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 253
{
	// Fields
	private static readonly PTR MantissaBitsTable; // 0x0
	private static readonly PTR TensExponentTable; // 0x8
	private static readonly PTR DigitLowerTable; // 0x10
	private static readonly PTR DigitUpperTable; // 0x18
	private static readonly PTR TenPowersList; // 0x20
	private static readonly PTR DecHexDigits; // 0x28
	private Thread _thread; // 0x10
	private NumberFormatInfo _nfi; // 0x18
	private bool _NaN; // 0x20
	private bool _infinity; // 0x21
	private bool _isCustomFormat; // 0x22
	private bool _specifierIsUpper; // 0x23
	private bool _positive; // 0x24
	private char _specifier; // 0x26
	private int _precision; // 0x28
	private int _defPrecision; // 0x2C
	private int _digitsLen; // 0x30
	private int _offset; // 0x34
	private int _decPointPos; // 0x38
	private uint _val1; // 0x3C
	private uint _val2; // 0x40
	private uint _val3; // 0x44
	private uint _val4; // 0x48
	private char[] _cbuf; // 0x50
	private int _ind; // 0x58
	private static NumberFormatter threadNumberFormatter; // 0xFFFFFFFFFFFFFFFF

	// Methods
	public void .ctor(Thread current); // 0x10089DF1C
	private static void .cctor(); // 0x10089E024
	private static void GetFormatterTables(out PTR MantissaBitsTable, out PTR TensExponentTable, out PTR DigitLowerTable, out PTR DigitUpperTable, out PTR TenPowersList, out PTR DecHexDigits); // 0x10089E084
	private static long GetTenPowerOf(int i); // 0x10089E0A0
	private void InitDecHexDigits(uint value); // 0x10089E110
	private void InitDecHexDigits(ulong value); // 0x10089E36C
	private void InitDecHexDigits(uint hi, ulong lo); // 0x10089E490
	private static uint FastToDecHex(int val); // 0x10089E1D8
	private static uint ToDecHex(int val); // 0x10089E2A8
	private static int FastDecHexLen(int val); // 0x10089E678
	private static int DecHexLen(uint val); // 0x10089E6A0
	private int DecHexLen(); // 0x10089E768
	private static int ScaleOrder(long hi); // 0x10089E88C
	private int InitialFloatingPrecision(); // 0x10089E920
	private static int ParsePrecision(string format); // 0x10089E970
	private void Init(string format); // 0x10089EA18
	private void InitHex(ulong value); // 0x10089EB50
	private void Init(string format, int value, int defPrecision); // 0x10089EBF4
	private void Init(string format, uint value, int defPrecision); // 0x10089EC7C
	private void Init(string format, long value); // 0x10089ECFC
	private void Init(string format, ulong value); // 0x10089ED78
	private void Init(string format, double value, int defPrecision); // 0x10089EDEC
	private void Init(string format, Decimal value); // 0x10089F208
	private void ResetCharBuf(int size); // 0x10089F424
	private void Resize(int len); // 0x10089F4B0
	private void Append(char c); // 0x10089F53C
	private void Append(char c, int cnt); // 0x10089F5C4
	private void Append(string s); // 0x10089F66C
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x10089F740
	public void set_CurrentCulture(CultureInfo value); // 0x10089DFB8
	private int get_IntegerDigits(); // 0x10089F7D4
	private int get_DecimalDigits(); // 0x10089F7E4
	private bool get_IsFloatingSource(); // 0x10089F7F8
	private bool get_IsZero(); // 0x10089F80C
	private bool get_IsZeroInteger(); // 0x10089F81C
	private void RoundPos(int pos); // 0x10089F83C
	private bool RoundDecimal(int decimals); // 0x10089F990
	private bool RoundBits(int shift); // 0x10089F848
	private void RemoveTrailingZeros(); // 0x10089FAD8
	private void AddOneToDecHex(); // 0x10089F9A4
	private static uint AddOneToDecHex(uint val); // 0x10089FB1C
	private int CountTrailingZeros(); // 0x10089F0E4
	private static int CountTrailingZeros(uint val); // 0x10089FBC8
	private static NumberFormatter GetInstance(); // 0x10089FC1C
	private void Release(); // 0x10089FCEC
	internal static void SetThreadCurrentCulture(CultureInfo culture); // 0x10089FD5C
	public static string NumberToString(string format, sbyte value, IFormatProvider fp); // 0x10089FE10
	public static string NumberToString(string format, byte value, IFormatProvider fp); // 0x1008A0150
	public static string NumberToString(string format, ushort value, IFormatProvider fp); // 0x1008A0204
	public static string NumberToString(string format, short value, IFormatProvider fp); // 0x1008A02B8
	public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x1008A036C
	public static string NumberToString(string format, int value, IFormatProvider fp); // 0x1008A0420
	public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x1008A04D4
	public static string NumberToString(string format, long value, IFormatProvider fp); // 0x1008A0584
	public static string NumberToString(string format, float value, IFormatProvider fp); // 0x1008A0634
	public static string NumberToString(string format, double value, IFormatProvider fp); // 0x1008A0A70
	public static string NumberToString(string format, Decimal value, IFormatProvider fp); // 0x1008A0C64
	public static string NumberToString(uint value, IFormatProvider fp); // 0x1008A0D30
	public static string NumberToString(int value, IFormatProvider fp); // 0x1008A0EF4
	public static string NumberToString(ulong value, IFormatProvider fp); // 0x1008A0FD8
	public static string NumberToString(long value, IFormatProvider fp); // 0x1008A10B0
	public static string NumberToString(float value, IFormatProvider fp); // 0x1008A1194
	public static string NumberToString(double value, IFormatProvider fp); // 0x1008A140C
	private string FastIntegerToString(int value, IFormatProvider fp); // 0x1008A0E08
	private string IntegerToString(string format, IFormatProvider fp); // 0x10089FEC4
	private string NumberToString(string format, NumberFormatInfo nfi); // 0x1008A0808
	public string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x1008A173C
	private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x1008A1B88
	private string FormatHexadecimal(int precision); // 0x1008A225C
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x1008A1CB0
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x1008A0BA8
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x1008A076C
	private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x1008A12A4
	public string FormatNumber(int precision, NumberFormatInfo nfi); // 0x1008A1DBC
	public string FormatPercent(int precision, NumberFormatInfo nfi); // 0x1008A2020
	public string FormatExponential(int precision, NumberFormatInfo nfi); // 0x1008A1C5C
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x1008A2FC8
	public string FormatCustom(string format, NumberFormatInfo nfi); // 0x1008A23A8
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x1008A3F34
	private static bool IsZeroOnly(StringBuilder sb); // 0x1008A3E48
	private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x1008A3C9C
	private void AppendIntegerString(int minLength, StringBuilder sb); // 0x1008A3DA0
	private void AppendIntegerString(int minLength); // 0x1008A2E98
	private void AppendDecimalString(int precision, StringBuilder sb); // 0x1008A3E28
	private void AppendDecimalString(int precision); // 0x1008A2B2C
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x1008A28FC
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x1008A31B0
	private void AppendOneDigit(int start); // 0x1008A30D0
	private void FastAppendDigits(int val, bool force); // 0x1008A151C
	private void AppendDigits(int start, int end); // 0x1008A2B44
	private void AppendDigits(int start, int end, StringBuilder sb); // 0x1008A4904
	private void Multiply10(int count); // 0x1008A30B0
	private void Divide10(int count); // 0x1008A3C7C
	private NumberFormatter GetClone(); // 0x1008A2F04
}

// Namespace: 
private class CustomInfo // TypeDefIndex: 254
{
	// Fields
	public bool UseGroup; // 0x10
	public int DecimalDigits; // 0x14
	public int DecimalPointPos; // 0x18
	public int DecimalTailSharpDigits; // 0x1C
	public int IntegerDigits; // 0x20
	public int IntegerHeadSharpDigits; // 0x24
	public int IntegerHeadPos; // 0x28
	public bool UseExponent; // 0x2C
	public int ExponentDigits; // 0x30
	public int ExponentTailSharpDigits; // 0x34
	public bool ExponentNegativeSignOnly; // 0x38
	public int DividePlaces; // 0x3C
	public int Percents; // 0x40
	public int Permilles; // 0x44

	// Methods
	public void .ctor(); // 0x1008A4BAC
	public static void GetActiveSection(string format, bool positive, bool zero, int offset, int length); // 0x1008A3338
	public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x1008A376C
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x1008A401C
}

// Namespace: System
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 255
{
	// Fields
	private string obj_name; // 0x60
	private string msg; // 0x68

	// Methods
	public void .ctor(string objectName); // 0x100895C24
	public void .ctor(string objectName, string message); // 0x1008A4CC4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008A4D00
	public override string get_Message(); // 0x1008A4D98
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008A4DA0
}

// Namespace: System
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 256
{
	// Fields
	private PlatformID _platform; // 0x10
	private Version _version; // 0x18
	private string _servicePack; // 0x20

	// Methods
	public void .ctor(PlatformID platform, Version version); // 0x1008A4EA4
	public PlatformID get_Platform(); // 0x1008A4F74
	public Version get_Version(); // 0x1008A4F7C
	public object Clone(); // 0x1008A4F84
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008A4FF8
	public override string ToString(); // 0x1008A50C4
}

// Namespace: System
public class OutOfMemoryException : SystemException // TypeDefIndex: 257
{
	// Fields
	private const int Result = -2147024882; // 0x0

	// Methods
	public void .ctor(); // 0x1008A54FC
	public void .ctor(string message); // 0x1008A5574
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008A55A8
}

// Namespace: System
public class OverflowException : ArithmeticException // TypeDefIndex: 258
{
	// Fields
	private const int Result = -2146233066; // 0x0

	// Methods
	public void .ctor(); // 0x1008A55B0
	public void .ctor(string message); // 0x100897164
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008A5628
}

// Namespace: System
public sealed class PlatformID : Enum // TypeDefIndex: 259
{
	// Fields
	public int value__; // 0x10
	public const PlatformID Win32S = 0; // 0x0
	public const PlatformID Win32Windows = 1; // 0x0
	public const PlatformID Win32NT = 2; // 0x0
	public const PlatformID WinCE = 3; // 0x0
	public const PlatformID Unix = 4; // 0x0
	public const PlatformID Xbox = 5; // 0x0
	public const PlatformID MacOSX = 6; // 0x0

}

// Namespace: System
public class Random // TypeDefIndex: 260
{
	// Fields
	private int inext; // 0x10
	private int inextp; // 0x14
	private int[] SeedArray; // 0x18

	// Methods
	public void .ctor(); // 0x1008A5638
	public void .ctor(int Seed); // 0x1008A5668
	protected virtual double Sample(); // 0x1008A58D4
	public virtual int Next(int maxValue); // 0x1008A59C8
	public virtual int Next(int minValue, int maxValue); // 0x1008A5A8C
	public virtual void NextBytes(byte[] buffer); // 0x1008A5B70
}

// Namespace: System
public class RankException : SystemException // TypeDefIndex: 261
{
	// Methods
	public void .ctor(); // 0x1008A5C68
	public void .ctor(string message); // 0x1008A5CE0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008A5D14
}

// Namespace: System
public class ResolveEventArgs : EventArgs // TypeDefIndex: 262
{
	// Fields
	private string m_Name; // 0x10

	// Methods
	public void .ctor(string name); // 0x1008C7714
}

// Namespace: System
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 263
{
	// Fields
	private IntPtr value; // 0x10

	// Methods
	internal void .ctor(IntPtr v); // 0x10090BE38
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10090BFC8
	public IntPtr get_Value(); // 0x10090BFD0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10090C12C
	public override bool Equals(object obj); // 0x10090C1FC
	public override int GetHashCode(); // 0x10090C204
}

// Namespace: System
public sealed class StringSplitOptions : Enum // TypeDefIndex: 264
{
	// Fields
	public int value__; // 0x10
	public const StringSplitOptions None = 0; // 0x0
	public const StringSplitOptions RemoveEmptyEntries = 1; // 0x0

}

// Namespace: System
public abstract class StringComparer : IComparer`1<string>, IEqualityComparer`1<string>, IComparer, IEqualityComparer // TypeDefIndex: 265
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x0
	private static StringComparer invariantCulture; // 0x8
	private static StringComparer ordinalIgnoreCase; // 0x10
	private static StringComparer ordinal; // 0x18

	// Methods
	protected void .ctor(); // 0x10098EE1C
	private static void .cctor(); // 0x10098EE24
	public static StringComparer get_InvariantCultureIgnoreCase(); // 0x10098EF58
	public static StringComparer get_Ordinal(); // 0x10098EFC0
	public static StringComparer get_OrdinalIgnoreCase(); // 0x10098F028
	public int Compare(object x, object y); // 0x10098F090
	public bool Equals(object x, object y); // 0x10098F260
	public int GetHashCode(object obj); // 0x10098F378
	public abstract int Compare(string x, string y); // 0
	public abstract bool Equals(string x, string y); // 0
	public abstract int GetHashCode(string obj); // 0
}

// Namespace: System
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 266
{
	// Fields
	private readonly bool _ignoreCase; // 0x10
	private readonly CompareInfo _compareInfo; // 0x18

	// Methods
	public void .ctor(CultureInfo ci, bool ignore_case); // 0x10085302C
	public override int Compare(string x, string y); // 0x1008530E4
	public override bool Equals(string x, string y); // 0x100853160
	public override int GetHashCode(string s); // 0x10085317C
}

// Namespace: System
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 267
{
	// Fields
	private readonly bool _ignoreCase; // 0x10

	// Methods
	public void .ctor(bool ignoreCase); // 0x1008A5250
	public override int Compare(string x, string y); // 0x1008A52CC
	public override bool Equals(string x, string y); // 0x1008A53A4
	public override int GetHashCode(string s); // 0x1008A5454
}

// Namespace: System
public sealed class StringComparison : Enum // TypeDefIndex: 268
{
	// Fields
	public int value__; // 0x10
	public const StringComparison CurrentCulture = 0; // 0x0
	public const StringComparison CurrentCultureIgnoreCase = 1; // 0x0
	public const StringComparison InvariantCulture = 2; // 0x0
	public const StringComparison InvariantCultureIgnoreCase = 3; // 0x0
	public const StringComparison Ordinal = 4; // 0x0
	public const StringComparison OrdinalIgnoreCase = 5; // 0x0

}

// Namespace: System
public class SystemException : Exception // TypeDefIndex: 269
{
	// Methods
	public void .ctor(); // 0x1009849CC
	public void .ctor(string message); // 0x100981750
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100981950
	public void .ctor(string message, Exception innerException); // 0x100984A44
}

// Namespace: System
internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 270
{
	// Fields
	private static PTR native_terminal_size; // 0x0
	private static int terminal_size; // 0x8
	private static string[] locations; // 0x10
	private TermInfoReader reader; // 0x10
	private int cursorLeft; // 0x18
	private int cursorTop; // 0x1C
	private string title; // 0x20
	private string titleFormat; // 0x28
	private bool cursorVisible; // 0x30
	private string csrVisible; // 0x38
	private string csrInvisible; // 0x40
	private string clear; // 0x48
	private string bell; // 0x50
	private string term; // 0x58
	private StreamReader stdin; // 0x60
	private CStreamWriter stdout; // 0x68
	private int windowWidth; // 0x70
	private int windowHeight; // 0x74
	private int bufferHeight; // 0x78
	private int bufferWidth; // 0x7C
	private char[] buffer; // 0x80
	private int readpos; // 0x88
	private int writepos; // 0x8C
	private string keypadXmit; // 0x90
	private string keypadLocal; // 0x98
	private bool inited; // 0xA0
	private object initLock; // 0xA8
	private bool initKeys; // 0xB0
	private string origPair; // 0xB8
	private string origColors; // 0xC0
	private string cursorAddress; // 0xC8
	private ConsoleColor fgcolor; // 0xD0
	private bool color16; // 0xD4
	private string setlfgcolor; // 0xD8
	private string setlbgcolor; // 0xE0
	private string setfgcolor; // 0xE8
	private string setbgcolor; // 0xF0
	private bool noGetPosition; // 0xF8
	private Hashtable keymap; // 0x100
	private ByteMatcher rootmap; // 0x108
	private bool home_1_1; // 0x110
	private int rl_startx; // 0x114
	private int rl_starty; // 0x118
	private byte[] control_characters; // 0x120
	private char[] echobuf; // 0x128
	private int echon; // 0x130
	private static TermInfoStrings[] UsedKeys; // 0x18

	// Methods
	public void .ctor(string term); // 0x10098F480
	private static void .cctor(); // 0x10098FD24
	private static string SearchTerminfo(string term); // 0x10098F8A4
	private void WriteConsole(string str); // 0x100990534
	public bool get_Initialized(); // 0x100990558
	public void Init(); // 0x100990560
	private static string MangleParameters(string str); // 0x100990E30
	private void IncrementX(); // 0x100991294
	public void WriteSpecialKey(ConsoleKeyInfo key); // 0x100991374
	public void WriteSpecialKey(char c); // 0x100991684
	public bool IsSpecialKey(ConsoleKeyInfo key); // 0x1009918C0
	public bool IsSpecialKey(char c); // 0x100991984
	private void GetCursorPosition(); // 0x100990F04
	private void CheckWindowDimensions(); // 0x100991AE8
	public int get_WindowHeight(); // 0x10099133C
	public int get_WindowWidth(); // 0x100991304
	private void AddToBuffer(int b); // 0x1009919B8
	private void AdjustBuffer(); // 0x100991C8C
	private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt); // 0x1009916B8
	private object GetKeyFromBuffer(bool cooked); // 0x100991CA0
	private ConsoleKeyInfo ReadKeyInternal(out bool fresh); // 0x100991FC4
	private bool InputPending(); // 0x100992354
	private void QueueEcho(char c); // 0x100992384
	private void Echo(ConsoleKeyInfo key); // 0x1009924A0
	private void EchoFlush(); // 0x100992528
	public int Read(out char[] dest, int index, int count); // 0x100992568
	public ConsoleKeyInfo ReadKey(bool intercept); // 0x1009929CC
	public string ReadLine(); // 0x100992A3C
	public void SetCursorPosition(int left, int top); // 0x1009914C4
	private void CreateKeyMap(); // 0x100992C08
	private void InitKeys(); // 0x1009921D8
	private void AddStringMapping(TermInfoStrings s); // 0x100994F50
}

// Namespace: System
internal class ByteMatcher // TypeDefIndex: 271
{
	// Fields
	private Hashtable map; // 0x10
	private Hashtable starts; // 0x18

	// Methods
	public void .ctor(); // 0x100833FA4
	public void AddMapping(TermInfoStrings key, byte[] val); // 0x100834050
	public void Sort(); // 0x100834194
	public bool StartsWith(int c); // 0x100834198
	public TermInfoStrings Match(char[] buffer, int offset, int length, out int used); // 0x100834244
}

// Namespace: System
internal sealed class TermInfoNumbers : Enum // TypeDefIndex: 272
{
	// Fields
	public int value__; // 0x10
	public const TermInfoNumbers Columns = 0; // 0x0
	public const TermInfoNumbers InitTabs = 1; // 0x0
	public const TermInfoNumbers Lines = 2; // 0x0
	public const TermInfoNumbers LinesOfMemory = 3; // 0x0
	public const TermInfoNumbers MagicCookieGlitch = 4; // 0x0
	public const TermInfoNumbers PaddingBaudRate = 5; // 0x0
	public const TermInfoNumbers VirtualTerminal = 6; // 0x0
	public const TermInfoNumbers WidthStatusLine = 7; // 0x0
	public const TermInfoNumbers NumLabels = 8; // 0x0
	public const TermInfoNumbers LabelHeight = 9; // 0x0
	public const TermInfoNumbers LabelWidth = 10; // 0x0
	public const TermInfoNumbers MaxAttributes = 11; // 0x0
	public const TermInfoNumbers MaximumWindows = 12; // 0x0
	public const TermInfoNumbers MaxColors = 13; // 0x0
	public const TermInfoNumbers MaxPairs = 14; // 0x0
	public const TermInfoNumbers NoColorVideo = 15; // 0x0
	public const TermInfoNumbers BufferCapacity = 16; // 0x0
	public const TermInfoNumbers DotVertSpacing = 17; // 0x0
	public const TermInfoNumbers DotHorzSpacing = 18; // 0x0
	public const TermInfoNumbers MaxMicroAddress = 19; // 0x0
	public const TermInfoNumbers MaxMicroJump = 20; // 0x0
	public const TermInfoNumbers MicroColSize = 21; // 0x0
	public const TermInfoNumbers MicroLineSize = 22; // 0x0
	public const TermInfoNumbers NumberOfPins = 23; // 0x0
	public const TermInfoNumbers OutputResChar = 24; // 0x0
	public const TermInfoNumbers OutputResLine = 25; // 0x0
	public const TermInfoNumbers OutputResHorzInch = 26; // 0x0
	public const TermInfoNumbers OutputResVertInch = 27; // 0x0
	public const TermInfoNumbers PrintRate = 28; // 0x0
	public const TermInfoNumbers WideCharSize = 29; // 0x0
	public const TermInfoNumbers Buttons = 30; // 0x0
	public const TermInfoNumbers BitImageEntwining = 31; // 0x0
	public const TermInfoNumbers BitImageType = 32; // 0x0
	public const TermInfoNumbers Last = 33; // 0x0

}

// Namespace: System
internal class TermInfoReader // TypeDefIndex: 273
{
	// Fields
	private short boolSize; // 0x10
	private short numSize; // 0x12
	private short strOffsets; // 0x14
	private byte[] buffer; // 0x18
	private int booleansOffset; // 0x20

	// Methods
	public void .ctor(string term, string filename); // 0x10098FA64
	public void .ctor(string term, byte[] buffer); // 0x10098F7F4
	private void ReadHeader(byte[] buffer, int position); // 0x100995040
	private void ReadNames(byte[] buffer, int position); // 0x1009951A4
	public int Get(TermInfoNumbers number); // 0x100991C30
	public string Get(TermInfoStrings tstr); // 0x100990D9C
	public byte[] GetStringBytes(TermInfoStrings tstr); // 0x100994FAC
	private short GetInt16(byte[] buffer, int offset); // 0x1009951E4
	private string GetString(byte[] buffer, int offset); // 0x100995264
	private byte[] GetStringBytes(byte[] buffer, int offset); // 0x10099535C
}

// Namespace: System
internal sealed class TermInfoStrings : Enum // TypeDefIndex: 274
{
	// Fields
	public int value__; // 0x10
	public const TermInfoStrings BackTab = 0; // 0x0
	public const TermInfoStrings Bell = 1; // 0x0
	public const TermInfoStrings CarriageReturn = 2; // 0x0
	public const TermInfoStrings ChangeScrollRegion = 3; // 0x0
	public const TermInfoStrings ClearAllTabs = 4; // 0x0
	public const TermInfoStrings ClearScreen = 5; // 0x0
	public const TermInfoStrings ClrEol = 6; // 0x0
	public const TermInfoStrings ClrEos = 7; // 0x0
	public const TermInfoStrings ColumnAddress = 8; // 0x0
	public const TermInfoStrings CommandCharacter = 9; // 0x0
	public const TermInfoStrings CursorAddress = 10; // 0x0
	public const TermInfoStrings CursorDown = 11; // 0x0
	public const TermInfoStrings CursorHome = 12; // 0x0
	public const TermInfoStrings CursorInvisible = 13; // 0x0
	public const TermInfoStrings CursorLeft = 14; // 0x0
	public const TermInfoStrings CursorMemAddress = 15; // 0x0
	public const TermInfoStrings CursorNormal = 16; // 0x0
	public const TermInfoStrings CursorRight = 17; // 0x0
	public const TermInfoStrings CursorToLl = 18; // 0x0
	public const TermInfoStrings CursorUp = 19; // 0x0
	public const TermInfoStrings CursorVisible = 20; // 0x0
	public const TermInfoStrings DeleteCharacter = 21; // 0x0
	public const TermInfoStrings DeleteLine = 22; // 0x0
	public const TermInfoStrings DisStatusLine = 23; // 0x0
	public const TermInfoStrings DownHalfLine = 24; // 0x0
	public const TermInfoStrings EnterAltCharsetMode = 25; // 0x0
	public const TermInfoStrings EnterBlinkMode = 26; // 0x0
	public const TermInfoStrings EnterBoldMode = 27; // 0x0
	public const TermInfoStrings EnterCaMode = 28; // 0x0
	public const TermInfoStrings EnterDeleteMode = 29; // 0x0
	public const TermInfoStrings EnterDimMode = 30; // 0x0
	public const TermInfoStrings EnterInsertMode = 31; // 0x0
	public const TermInfoStrings EnterSecureMode = 32; // 0x0
	public const TermInfoStrings EnterProtectedMode = 33; // 0x0
	public const TermInfoStrings EnterReverseMode = 34; // 0x0
	public const TermInfoStrings EnterStandoutMode = 35; // 0x0
	public const TermInfoStrings EnterUnderlineMode = 36; // 0x0
	public const TermInfoStrings EraseChars = 37; // 0x0
	public const TermInfoStrings ExitAltCharsetMode = 38; // 0x0
	public const TermInfoStrings ExitAttributeMode = 39; // 0x0
	public const TermInfoStrings ExitCaMode = 40; // 0x0
	public const TermInfoStrings ExitDeleteMode = 41; // 0x0
	public const TermInfoStrings ExitInsertMode = 42; // 0x0
	public const TermInfoStrings ExitStandoutMode = 43; // 0x0
	public const TermInfoStrings ExitUnderlineMode = 44; // 0x0
	public const TermInfoStrings FlashScreen = 45; // 0x0
	public const TermInfoStrings FormFeed = 46; // 0x0
	public const TermInfoStrings FromStatusLine = 47; // 0x0
	public const TermInfoStrings Init1string = 48; // 0x0
	public const TermInfoStrings Init2string = 49; // 0x0
	public const TermInfoStrings Init3string = 50; // 0x0
	public const TermInfoStrings InitFile = 51; // 0x0
	public const TermInfoStrings InsertCharacter = 52; // 0x0
	public const TermInfoStrings InsertLine = 53; // 0x0
	public const TermInfoStrings InsertPadding = 54; // 0x0
	public const TermInfoStrings KeyBackspace = 55; // 0x0
	public const TermInfoStrings KeyCatab = 56; // 0x0
	public const TermInfoStrings KeyClear = 57; // 0x0
	public const TermInfoStrings KeyCtab = 58; // 0x0
	public const TermInfoStrings KeyDc = 59; // 0x0
	public const TermInfoStrings KeyDl = 60; // 0x0
	public const TermInfoStrings KeyDown = 61; // 0x0
	public const TermInfoStrings KeyEic = 62; // 0x0
	public const TermInfoStrings KeyEol = 63; // 0x0
	public const TermInfoStrings KeyEos = 64; // 0x0
	public const TermInfoStrings KeyF0 = 65; // 0x0
	public const TermInfoStrings KeyF1 = 66; // 0x0
	public const TermInfoStrings KeyF10 = 67; // 0x0
	public const TermInfoStrings KeyF2 = 68; // 0x0
	public const TermInfoStrings KeyF3 = 69; // 0x0
	public const TermInfoStrings KeyF4 = 70; // 0x0
	public const TermInfoStrings KeyF5 = 71; // 0x0
	public const TermInfoStrings KeyF6 = 72; // 0x0
	public const TermInfoStrings KeyF7 = 73; // 0x0
	public const TermInfoStrings KeyF8 = 74; // 0x0
	public const TermInfoStrings KeyF9 = 75; // 0x0
	public const TermInfoStrings KeyHome = 76; // 0x0
	public const TermInfoStrings KeyIc = 77; // 0x0
	public const TermInfoStrings KeyIl = 78; // 0x0
	public const TermInfoStrings KeyLeft = 79; // 0x0
	public const TermInfoStrings KeyLl = 80; // 0x0
	public const TermInfoStrings KeyNpage = 81; // 0x0
	public const TermInfoStrings KeyPpage = 82; // 0x0
	public const TermInfoStrings KeyRight = 83; // 0x0
	public const TermInfoStrings KeySf = 84; // 0x0
	public const TermInfoStrings KeySr = 85; // 0x0
	public const TermInfoStrings KeyStab = 86; // 0x0
	public const TermInfoStrings KeyUp = 87; // 0x0
	public const TermInfoStrings KeypadLocal = 88; // 0x0
	public const TermInfoStrings KeypadXmit = 89; // 0x0
	public const TermInfoStrings LabF0 = 90; // 0x0
	public const TermInfoStrings LabF1 = 91; // 0x0
	public const TermInfoStrings LabF10 = 92; // 0x0
	public const TermInfoStrings LabF2 = 93; // 0x0
	public const TermInfoStrings LabF3 = 94; // 0x0
	public const TermInfoStrings LabF4 = 95; // 0x0
	public const TermInfoStrings LabF5 = 96; // 0x0
	public const TermInfoStrings LabF6 = 97; // 0x0
	public const TermInfoStrings LabF7 = 98; // 0x0
	public const TermInfoStrings LabF8 = 99; // 0x0
	public const TermInfoStrings LabF9 = 100; // 0x0
	public const TermInfoStrings MetaOff = 101; // 0x0
	public const TermInfoStrings MetaOn = 102; // 0x0
	public const TermInfoStrings Newline = 103; // 0x0
	public const TermInfoStrings PadChar = 104; // 0x0
	public const TermInfoStrings ParmDch = 105; // 0x0
	public const TermInfoStrings ParmDeleteLine = 106; // 0x0
	public const TermInfoStrings ParmDownCursor = 107; // 0x0
	public const TermInfoStrings ParmIch = 108; // 0x0
	public const TermInfoStrings ParmIndex = 109; // 0x0
	public const TermInfoStrings ParmInsertLine = 110; // 0x0
	public const TermInfoStrings ParmLeftCursor = 111; // 0x0
	public const TermInfoStrings ParmRightCursor = 112; // 0x0
	public const TermInfoStrings ParmRindex = 113; // 0x0
	public const TermInfoStrings ParmUpCursor = 114; // 0x0
	public const TermInfoStrings PkeyKey = 115; // 0x0
	public const TermInfoStrings PkeyLocal = 116; // 0x0
	public const TermInfoStrings PkeyXmit = 117; // 0x0
	public const TermInfoStrings PrintScreen = 118; // 0x0
	public const TermInfoStrings PrtrOff = 119; // 0x0
	public const TermInfoStrings PrtrOn = 120; // 0x0
	public const TermInfoStrings RepeatChar = 121; // 0x0
	public const TermInfoStrings Reset1string = 122; // 0x0
	public const TermInfoStrings Reset2string = 123; // 0x0
	public const TermInfoStrings Reset3string = 124; // 0x0
	public const TermInfoStrings ResetFile = 125; // 0x0
	public const TermInfoStrings RestoreCursor = 126; // 0x0
	public const TermInfoStrings RowAddress = 127; // 0x0
	public const TermInfoStrings SaveCursor = 128; // 0x0
	public const TermInfoStrings ScrollForward = 129; // 0x0
	public const TermInfoStrings ScrollReverse = 130; // 0x0
	public const TermInfoStrings SetAttributes = 131; // 0x0
	public const TermInfoStrings SetTab = 132; // 0x0
	public const TermInfoStrings SetWindow = 133; // 0x0
	public const TermInfoStrings Tab = 134; // 0x0
	public const TermInfoStrings ToStatusLine = 135; // 0x0
	public const TermInfoStrings UnderlineChar = 136; // 0x0
	public const TermInfoStrings UpHalfLine = 137; // 0x0
	public const TermInfoStrings InitProg = 138; // 0x0
	public const TermInfoStrings KeyA1 = 139; // 0x0
	public const TermInfoStrings KeyA3 = 140; // 0x0
	public const TermInfoStrings KeyB2 = 141; // 0x0
	public const TermInfoStrings KeyC1 = 142; // 0x0
	public const TermInfoStrings KeyC3 = 143; // 0x0
	public const TermInfoStrings PrtrNon = 144; // 0x0
	public const TermInfoStrings CharPadding = 145; // 0x0
	public const TermInfoStrings AcsChars = 146; // 0x0
	public const TermInfoStrings PlabNorm = 147; // 0x0
	public const TermInfoStrings KeyBtab = 148; // 0x0
	public const TermInfoStrings EnterXonMode = 149; // 0x0
	public const TermInfoStrings ExitXonMode = 150; // 0x0
	public const TermInfoStrings EnterAmMode = 151; // 0x0
	public const TermInfoStrings ExitAmMode = 152; // 0x0
	public const TermInfoStrings XonCharacter = 153; // 0x0
	public const TermInfoStrings XoffCharacter = 154; // 0x0
	public const TermInfoStrings EnaAcs = 155; // 0x0
	public const TermInfoStrings LabelOn = 156; // 0x0
	public const TermInfoStrings LabelOff = 157; // 0x0
	public const TermInfoStrings KeyBeg = 158; // 0x0
	public const TermInfoStrings KeyCancel = 159; // 0x0
	public const TermInfoStrings KeyClose = 160; // 0x0
	public const TermInfoStrings KeyCommand = 161; // 0x0
	public const TermInfoStrings KeyCopy = 162; // 0x0
	public const TermInfoStrings KeyCreate = 163; // 0x0
	public const TermInfoStrings KeyEnd = 164; // 0x0
	public const TermInfoStrings KeyEnter = 165; // 0x0
	public const TermInfoStrings KeyExit = 166; // 0x0
	public const TermInfoStrings KeyFind = 167; // 0x0
	public const TermInfoStrings KeyHelp = 168; // 0x0
	public const TermInfoStrings KeyMark = 169; // 0x0
	public const TermInfoStrings KeyMessage = 170; // 0x0
	public const TermInfoStrings KeyMove = 171; // 0x0
	public const TermInfoStrings KeyNext = 172; // 0x0
	public const TermInfoStrings KeyOpen = 173; // 0x0
	public const TermInfoStrings KeyOptions = 174; // 0x0
	public const TermInfoStrings KeyPrevious = 175; // 0x0
	public const TermInfoStrings KeyPrint = 176; // 0x0
	public const TermInfoStrings KeyRedo = 177; // 0x0
	public const TermInfoStrings KeyReference = 178; // 0x0
	public const TermInfoStrings KeyRefresh = 179; // 0x0
	public const TermInfoStrings KeyReplace = 180; // 0x0
	public const TermInfoStrings KeyRestart = 181; // 0x0
	public const TermInfoStrings KeyResume = 182; // 0x0
	public const TermInfoStrings KeySave = 183; // 0x0
	public const TermInfoStrings KeySuspend = 184; // 0x0
	public const TermInfoStrings KeyUndo = 185; // 0x0
	public const TermInfoStrings KeySbeg = 186; // 0x0
	public const TermInfoStrings KeyScancel = 187; // 0x0
	public const TermInfoStrings KeyScommand = 188; // 0x0
	public const TermInfoStrings KeyScopy = 189; // 0x0
	public const TermInfoStrings KeyScreate = 190; // 0x0
	public const TermInfoStrings KeySdc = 191; // 0x0
	public const TermInfoStrings KeySdl = 192; // 0x0
	public const TermInfoStrings KeySelect = 193; // 0x0
	public const TermInfoStrings KeySend = 194; // 0x0
	public const TermInfoStrings KeySeol = 195; // 0x0
	public const TermInfoStrings KeySexit = 196; // 0x0
	public const TermInfoStrings KeySfind = 197; // 0x0
	public const TermInfoStrings KeyShelp = 198; // 0x0
	public const TermInfoStrings KeyShome = 199; // 0x0
	public const TermInfoStrings KeySic = 200; // 0x0
	public const TermInfoStrings KeySleft = 201; // 0x0
	public const TermInfoStrings KeySmessage = 202; // 0x0
	public const TermInfoStrings KeySmove = 203; // 0x0
	public const TermInfoStrings KeySnext = 204; // 0x0
	public const TermInfoStrings KeySoptions = 205; // 0x0
	public const TermInfoStrings KeySprevious = 206; // 0x0
	public const TermInfoStrings KeySprint = 207; // 0x0
	public const TermInfoStrings KeySredo = 208; // 0x0
	public const TermInfoStrings KeySreplace = 209; // 0x0
	public const TermInfoStrings KeySright = 210; // 0x0
	public const TermInfoStrings KeySrsume = 211; // 0x0
	public const TermInfoStrings KeySsave = 212; // 0x0
	public const TermInfoStrings KeySsuspend = 213; // 0x0
	public const TermInfoStrings KeySundo = 214; // 0x0
	public const TermInfoStrings ReqForInput = 215; // 0x0
	public const TermInfoStrings KeyF11 = 216; // 0x0
	public const TermInfoStrings KeyF12 = 217; // 0x0
	public const TermInfoStrings KeyF13 = 218; // 0x0
	public const TermInfoStrings KeyF14 = 219; // 0x0
	public const TermInfoStrings KeyF15 = 220; // 0x0
	public const TermInfoStrings KeyF16 = 221; // 0x0
	public const TermInfoStrings KeyF17 = 222; // 0x0
	public const TermInfoStrings KeyF18 = 223; // 0x0
	public const TermInfoStrings KeyF19 = 224; // 0x0
	public const TermInfoStrings KeyF20 = 225; // 0x0
	public const TermInfoStrings KeyF21 = 226; // 0x0
	public const TermInfoStrings KeyF22 = 227; // 0x0
	public const TermInfoStrings KeyF23 = 228; // 0x0
	public const TermInfoStrings KeyF24 = 229; // 0x0
	public const TermInfoStrings KeyF25 = 230; // 0x0
	public const TermInfoStrings KeyF26 = 231; // 0x0
	public const TermInfoStrings KeyF27 = 232; // 0x0
	public const TermInfoStrings KeyF28 = 233; // 0x0
	public const TermInfoStrings KeyF29 = 234; // 0x0
	public const TermInfoStrings KeyF30 = 235; // 0x0
	public const TermInfoStrings KeyF31 = 236; // 0x0
	public const TermInfoStrings KeyF32 = 237; // 0x0
	public const TermInfoStrings KeyF33 = 238; // 0x0
	public const TermInfoStrings KeyF34 = 239; // 0x0
	public const TermInfoStrings KeyF35 = 240; // 0x0
	public const TermInfoStrings KeyF36 = 241; // 0x0
	public const TermInfoStrings KeyF37 = 242; // 0x0
	public const TermInfoStrings KeyF38 = 243; // 0x0
	public const TermInfoStrings KeyF39 = 244; // 0x0
	public const TermInfoStrings KeyF40 = 245; // 0x0
	public const TermInfoStrings KeyF41 = 246; // 0x0
	public const TermInfoStrings KeyF42 = 247; // 0x0
	public const TermInfoStrings KeyF43 = 248; // 0x0
	public const TermInfoStrings KeyF44 = 249; // 0x0
	public const TermInfoStrings KeyF45 = 250; // 0x0
	public const TermInfoStrings KeyF46 = 251; // 0x0
	public const TermInfoStrings KeyF47 = 252; // 0x0
	public const TermInfoStrings KeyF48 = 253; // 0x0
	public const TermInfoStrings KeyF49 = 254; // 0x0
	public const TermInfoStrings KeyF50 = 255; // 0x0
	public const TermInfoStrings KeyF51 = 256; // 0x0
	public const TermInfoStrings KeyF52 = 257; // 0x0
	public const TermInfoStrings KeyF53 = 258; // 0x0
	public const TermInfoStrings KeyF54 = 259; // 0x0
	public const TermInfoStrings KeyF55 = 260; // 0x0
	public const TermInfoStrings KeyF56 = 261; // 0x0
	public const TermInfoStrings KeyF57 = 262; // 0x0
	public const TermInfoStrings KeyF58 = 263; // 0x0
	public const TermInfoStrings KeyF59 = 264; // 0x0
	public const TermInfoStrings KeyF60 = 265; // 0x0
	public const TermInfoStrings KeyF61 = 266; // 0x0
	public const TermInfoStrings KeyF62 = 267; // 0x0
	public const TermInfoStrings KeyF63 = 268; // 0x0
	public const TermInfoStrings ClrBol = 269; // 0x0
	public const TermInfoStrings ClearMargins = 270; // 0x0
	public const TermInfoStrings SetLeftMargin = 271; // 0x0
	public const TermInfoStrings SetRightMargin = 272; // 0x0
	public const TermInfoStrings LabelFormat = 273; // 0x0
	public const TermInfoStrings SetClock = 274; // 0x0
	public const TermInfoStrings DisplayClock = 275; // 0x0
	public const TermInfoStrings RemoveClock = 276; // 0x0
	public const TermInfoStrings CreateWindow = 277; // 0x0
	public const TermInfoStrings GotoWindow = 278; // 0x0
	public const TermInfoStrings Hangup = 279; // 0x0
	public const TermInfoStrings DialPhone = 280; // 0x0
	public const TermInfoStrings QuickDial = 281; // 0x0
	public const TermInfoStrings Tone = 282; // 0x0
	public const TermInfoStrings Pulse = 283; // 0x0
	public const TermInfoStrings FlashHook = 284; // 0x0
	public const TermInfoStrings FixedPause = 285; // 0x0
	public const TermInfoStrings WaitTone = 286; // 0x0
	public const TermInfoStrings User0 = 287; // 0x0
	public const TermInfoStrings User1 = 288; // 0x0
	public const TermInfoStrings User2 = 289; // 0x0
	public const TermInfoStrings User3 = 290; // 0x0
	public const TermInfoStrings User4 = 291; // 0x0
	public const TermInfoStrings User5 = 292; // 0x0
	public const TermInfoStrings User6 = 293; // 0x0
	public const TermInfoStrings User7 = 294; // 0x0
	public const TermInfoStrings User8 = 295; // 0x0
	public const TermInfoStrings User9 = 296; // 0x0
	public const TermInfoStrings OrigPair = 297; // 0x0
	public const TermInfoStrings OrigColors = 298; // 0x0
	public const TermInfoStrings InitializeColor = 299; // 0x0
	public const TermInfoStrings InitializePair = 300; // 0x0
	public const TermInfoStrings SetColorPair = 301; // 0x0
	public const TermInfoStrings SetForeground = 302; // 0x0
	public const TermInfoStrings SetBackground = 303; // 0x0
	public const TermInfoStrings ChangeCharPitch = 304; // 0x0
	public const TermInfoStrings ChangeLinePitch = 305; // 0x0
	public const TermInfoStrings ChangeResHorz = 306; // 0x0
	public const TermInfoStrings ChangeResVert = 307; // 0x0
	public const TermInfoStrings DefineChar = 308; // 0x0
	public const TermInfoStrings EnterDoublewideMode = 309; // 0x0
	public const TermInfoStrings EnterDraftQuality = 310; // 0x0
	public const TermInfoStrings EnterItalicsMode = 311; // 0x0
	public const TermInfoStrings EnterLeftwardMode = 312; // 0x0
	public const TermInfoStrings EnterMicroMode = 313; // 0x0
	public const TermInfoStrings EnterNearLetterQuality = 314; // 0x0
	public const TermInfoStrings EnterNormalQuality = 315; // 0x0
	public const TermInfoStrings EnterShadowMode = 316; // 0x0
	public const TermInfoStrings EnterSubscriptMode = 317; // 0x0
	public const TermInfoStrings EnterSuperscriptMode = 318; // 0x0
	public const TermInfoStrings EnterUpwardMode = 319; // 0x0
	public const TermInfoStrings ExitDoublewideMode = 320; // 0x0
	public const TermInfoStrings ExitItalicsMode = 321; // 0x0
	public const TermInfoStrings ExitLeftwardMode = 322; // 0x0
	public const TermInfoStrings ExitMicroMode = 323; // 0x0
	public const TermInfoStrings ExitShadowMode = 324; // 0x0
	public const TermInfoStrings ExitSubscriptMode = 325; // 0x0
	public const TermInfoStrings ExitSuperscriptMode = 326; // 0x0
	public const TermInfoStrings ExitUpwardMode = 327; // 0x0
	public const TermInfoStrings MicroColumnAddress = 328; // 0x0
	public const TermInfoStrings MicroDown = 329; // 0x0
	public const TermInfoStrings MicroLeft = 330; // 0x0
	public const TermInfoStrings MicroRight = 331; // 0x0
	public const TermInfoStrings MicroRowAddress = 332; // 0x0
	public const TermInfoStrings MicroUp = 333; // 0x0
	public const TermInfoStrings OrderOfPins = 334; // 0x0
	public const TermInfoStrings ParmDownMicro = 335; // 0x0
	public const TermInfoStrings ParmLeftMicro = 336; // 0x0
	public const TermInfoStrings ParmRightMicro = 337; // 0x0
	public const TermInfoStrings ParmUpMicro = 338; // 0x0
	public const TermInfoStrings SelectCharSet = 339; // 0x0
	public const TermInfoStrings SetBottomMargin = 340; // 0x0
	public const TermInfoStrings SetBottomMarginParm = 341; // 0x0
	public const TermInfoStrings SetLeftMarginParm = 342; // 0x0
	public const TermInfoStrings SetRightMarginParm = 343; // 0x0
	public const TermInfoStrings SetTopMargin = 344; // 0x0
	public const TermInfoStrings SetTopMarginParm = 345; // 0x0
	public const TermInfoStrings StartBitImage = 346; // 0x0
	public const TermInfoStrings StartCharSetDef = 347; // 0x0
	public const TermInfoStrings StopBitImage = 348; // 0x0
	public const TermInfoStrings StopCharSetDef = 349; // 0x0
	public const TermInfoStrings SubscriptCharacters = 350; // 0x0
	public const TermInfoStrings SuperscriptCharacters = 351; // 0x0
	public const TermInfoStrings TheseCauseCr = 352; // 0x0
	public const TermInfoStrings ZeroMotion = 353; // 0x0
	public const TermInfoStrings CharSetNames = 354; // 0x0
	public const TermInfoStrings KeyMouse = 355; // 0x0
	public const TermInfoStrings MouseInfo = 356; // 0x0
	public const TermInfoStrings ReqMousePos = 357; // 0x0
	public const TermInfoStrings GetMouse = 358; // 0x0
	public const TermInfoStrings SetAForeground = 359; // 0x0
	public const TermInfoStrings SetABackground = 360; // 0x0
	public const TermInfoStrings PkeyPlab = 361; // 0x0
	public const TermInfoStrings DeviceType = 362; // 0x0
	public const TermInfoStrings CodeSetInit = 363; // 0x0
	public const TermInfoStrings Set0DesSeq = 364; // 0x0
	public const TermInfoStrings Set1DesSeq = 365; // 0x0
	public const TermInfoStrings Set2DesSeq = 366; // 0x0
	public const TermInfoStrings Set3DesSeq = 367; // 0x0
	public const TermInfoStrings SetLrMargin = 368; // 0x0
	public const TermInfoStrings SetTbMargin = 369; // 0x0
	public const TermInfoStrings BitImageRepeat = 370; // 0x0
	public const TermInfoStrings BitImageNewline = 371; // 0x0
	public const TermInfoStrings BitImageCarriageReturn = 372; // 0x0
	public const TermInfoStrings ColorNames = 373; // 0x0
	public const TermInfoStrings DefineBitImageRegion = 374; // 0x0
	public const TermInfoStrings EndBitImageRegion = 375; // 0x0
	public const TermInfoStrings SetColorBand = 376; // 0x0
	public const TermInfoStrings SetPageLength = 377; // 0x0
	public const TermInfoStrings DisplayPcChar = 378; // 0x0
	public const TermInfoStrings EnterPcCharsetMode = 379; // 0x0
	public const TermInfoStrings ExitPcCharsetMode = 380; // 0x0
	public const TermInfoStrings EnterScancodeMode = 381; // 0x0
	public const TermInfoStrings ExitScancodeMode = 382; // 0x0
	public const TermInfoStrings PcTermOptions = 383; // 0x0
	public const TermInfoStrings ScancodeEscape = 384; // 0x0
	public const TermInfoStrings AltScancodeEsc = 385; // 0x0
	public const TermInfoStrings EnterHorizontalHlMode = 386; // 0x0
	public const TermInfoStrings EnterLeftHlMode = 387; // 0x0
	public const TermInfoStrings EnterLowHlMode = 388; // 0x0
	public const TermInfoStrings EnterRightHlMode = 389; // 0x0
	public const TermInfoStrings EnterTopHlMode = 390; // 0x0
	public const TermInfoStrings EnterVerticalHlMode = 391; // 0x0
	public const TermInfoStrings SetAAttributes = 392; // 0x0
	public const TermInfoStrings SetPglenInch = 393; // 0x0
	public const TermInfoStrings Last = 394; // 0x0

}

// Namespace: System
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 275
{
	// Methods
	public void .ctor(); // 0x1009AA81C
}

// Namespace: System
public struct TimeSpan : IComparable, IComparable`1<TimeSpan>, IEquatable`1<TimeSpan> // TypeDefIndex: 276
{
	// Fields
	public const long TicksPerDay = 864000000000; // 0x0
	public const long TicksPerHour = 36000000000; // 0x0
	public const long TicksPerMillisecond = 10000; // 0x0
	public const long TicksPerMinute = 600000000; // 0x0
	public const long TicksPerSecond = 10000000; // 0x0
	public static readonly TimeSpan MaxValue; // 0x0
	public static readonly TimeSpan MinValue; // 0x8
	public static readonly TimeSpan Zero; // 0x10
	private long _ticks; // 0x10

	// Methods
	public void .ctor(long ticks); // 0x1009AA82C
	public void .ctor(int hours, int minutes, int seconds); // 0x1009AAA04
	public void .ctor(int days, int hours, int minutes, int seconds); // 0x1009AAAA8
	public void .ctor(int days, int hours, int minutes, int seconds, int milliseconds); // 0x1009AAAB0
	private static void .cctor(); // 0x1009AAAB8
	internal static long CalculateTicks(int days, int hours, int minutes, int seconds, int milliseconds); // 0x1009AA8F8
	public int get_Days(); // 0x1009AAB50
	public int get_Hours(); // 0x1009AABD4
	public int get_Milliseconds(); // 0x1009AAC80
	public int get_Minutes(); // 0x1009AAD28
	public int get_Seconds(); // 0x1009AADD0
	public long get_Ticks(); // 0x1009AAE2C
	public double get_TotalDays(); // 0x1009AAE4C
	public double get_TotalHours(); // 0x1009AAE64
	public double get_TotalMilliseconds(); // 0x1009AAE7C
	public double get_TotalMinutes(); // 0x1009AAEAC
	public double get_TotalSeconds(); // 0x1009AAEDC
	public TimeSpan Add(TimeSpan ts); // 0x1009AB028
	public static int Compare(TimeSpan t1, TimeSpan t2); // 0x1009AB030
	public int CompareTo(object value); // 0x1009AB148
	public int CompareTo(TimeSpan value); // 0x1009AB1CC
	public bool Equals(TimeSpan obj); // 0x1009AB1D4
	public TimeSpan Duration(); // 0x1009AB1E4
	public override bool Equals(object value); // 0x1009AB2B8
	public static TimeSpan FromDays(double value); // 0x1009AB2C0
	public static TimeSpan FromHours(double value); // 0x1009AB64C
	public static TimeSpan FromMinutes(double value); // 0x1009AB6C4
	public static TimeSpan FromSeconds(double value); // 0x1009AB738
	public static TimeSpan FromMilliseconds(double value); // 0x1009AB7AC
	private static TimeSpan From(double value, long tickMultiplicator); // 0x1009AB338
	public static TimeSpan FromTicks(long value); // 0x1009AB81C
	public override int GetHashCode(); // 0x1009AB82C
	public TimeSpan Negate(); // 0x1009AB904
	public static TimeSpan Parse(string s); // 0x1009AB90C
	public TimeSpan Subtract(TimeSpan ts); // 0x1009ABD84
	public override string ToString(); // 0x1009ABFE4
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2); // 0x1009ABFEC
	public static bool op_Equality(TimeSpan t1, TimeSpan t2); // 0x1009AC014
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2); // 0x1009AC020
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x1009AC02C
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2); // 0x1009AC038
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2); // 0x1009AC044
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x1009AC050
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2); // 0x1009AC05C
}

// Namespace: 
private class Parser // TypeDefIndex: 277
{
	// Fields
	private string _src; // 0x10
	private int _cur; // 0x18
	private int _length; // 0x1C
	private bool formatError; // 0x20

	// Methods
	public void .ctor(string src); // 0x1009AB9A8
	public bool get_AtEnd(); // 0x1009AC0A0
	private void ParseWhiteSpace(); // 0x1009AC0B0
	private bool ParseSign(); // 0x1009AC154
	private int ParseInt(bool optional); // 0x1009AC1AC
	private bool ParseOptDot(); // 0x1009AC300
	private void ParseOptColon(); // 0x1009AC358
	private long ParseTicks(); // 0x1009AC3B0
	public TimeSpan Execute(); // 0x1009AB9E4
}

// Namespace: System
public abstract class TimeZone // TypeDefIndex: 278
{
	// Fields
	private static TimeZone currentTimeZone; // 0x0
	private static object tz_lock; // 0x8
	private static long timezone_check; // 0x10

	// Methods
	protected void .ctor(); // 0x1009AC4C8
	private static void .cctor(); // 0x1009AC4D0
	public static TimeZone get_CurrentTimeZone(); // 0x1009AC53C
	public abstract DaylightTime GetDaylightChanges(int year); // 0
	public abstract TimeSpan GetUtcOffset(DateTime time); // 0
	public virtual bool IsDaylightSavingTime(DateTime time); // 0x1009AC6FC
	public static bool IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes); // 0x1009AC7CC
	public virtual DateTime ToLocalTime(DateTime time); // 0x1009ACA44
	public virtual DateTime ToUniversalTime(DateTime time); // 0x1009ACDFC
	internal TimeSpan GetLocalTimeDiff(DateTime time); // 0x1009AD01C
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset); // 0x1009AD08C
}

// Namespace: System
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback // TypeDefIndex: 279
{
	// Fields
	private string m_standardName; // 0x10
	private string m_daylightName; // 0x18
	private Hashtable m_CachedDaylightChanges; // 0x20
	private long m_ticksOffset; // 0x28
	private TimeSpan utcOffsetWithOutDLS; // 0x30
	private TimeSpan utcOffsetWithDLS; // 0x38
	private static int this_year; // 0x0
	private static DaylightTime this_year_dlt; // 0x8

	// Methods
	internal void .ctor(); // 0x100853274
	internal void .ctor(long lnow); // 0x100853308
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x100853AE4
	private static bool GetTimeZoneData(int year, out long[] data, out string[] names); // 0x1008537DC
	public override DaylightTime GetDaylightChanges(int year); // 0x100853AEC
	public override TimeSpan GetUtcOffset(DateTime time); // 0x100853E28
	private void OnDeserialization(DaylightTime dlt); // 0x1008538D4
	private DaylightTime GetDaylightTimeFromData(long[] data); // 0x1008537EC
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 280
{
	// Fields
	private string comment; // 0x10

	// Methods
	public void .ctor(); // 0x10089A948
	public void .ctor(string comment); // 0x100899DE8
}

// Namespace: System
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 281
{
	// Methods
	public void .ctor(string comment); // 0x100899DBC
}

// Namespace: System
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 282
{
	// Methods
	public void .ctor(string comment); // 0x10089A91C
}

// Namespace: System
public sealed class TypeCode : Enum // TypeDefIndex: 283
{
	// Fields
	public int value__; // 0x10
	public const TypeCode Empty = 0; // 0x0
	public const TypeCode Object = 1; // 0x0
	public const TypeCode DBNull = 2; // 0x0
	public const TypeCode Boolean = 3; // 0x0
	public const TypeCode Char = 4; // 0x0
	public const TypeCode SByte = 5; // 0x0
	public const TypeCode Byte = 6; // 0x0
	public const TypeCode Int16 = 7; // 0x0
	public const TypeCode UInt16 = 8; // 0x0
	public const TypeCode Int32 = 9; // 0x0
	public const TypeCode UInt32 = 10; // 0x0
	public const TypeCode Int64 = 11; // 0x0
	public const TypeCode UInt64 = 12; // 0x0
	public const TypeCode Single = 13; // 0x0
	public const TypeCode Double = 14; // 0x0
	public const TypeCode Decimal = 15; // 0x0
	public const TypeCode DateTime = 16; // 0x0
	public const TypeCode String = 18; // 0x0

}

// Namespace: System
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 284
{
	// Fields
	private string type_name; // 0x60

	// Methods
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1009B04C4
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009B055C
}

// Namespace: System
public class TypeLoadException : SystemException // TypeDefIndex: 285
{
	// Fields
	private const int Result = -2146233054; // 0x0
	private string className; // 0x60
	private string assemblyName; // 0x68

	// Methods
	public void .ctor(); // 0x1009B05F0
	public void .ctor(string message); // 0x1009B0668
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009B069C
	public override string get_Message(); // 0x1009B077C
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009B08B0
}

// Namespace: System
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 286
{
	// Methods
	public void .ctor(); // 0x1009B4898
	public void .ctor(string message); // 0x1009B4910
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009B4944
}

// Namespace: System
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 287
{
	// Fields
	private object exception; // 0x10
	private bool m_isTerminating; // 0x18

	// Methods
	public void .ctor(object exception, bool isTerminating); // 0x1009B494C
	public object get_ExceptionObject(); // 0x1009B49D0
	public bool get_IsTerminating(); // 0x1009B49D8
}

// Namespace: System
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 288
{
	// Fields
	private string _data; // 0x10
	private UnityType _unityType; // 0x18
	private string _assemblyName; // 0x20

	// Methods
	private void .ctor(SerializationInfo info, StreamingContext ctx); // 0x1009B4B18
	public static void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx); // 0x1009B4BCC
	public static void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx); // 0x1009B4D30
	public static void GetAssemblyData(Assembly instance, SerializationInfo info, StreamingContext ctx); // 0x1009B4E84
	public static void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx); // 0x1009B4FBC
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009B50F0
	public virtual object GetRealObject(StreamingContext context); // 0x1009B5144
}

// Namespace: 
private sealed class UnityType : Enum // TypeDefIndex: 289
{
	// Fields
	public byte value__; // 0x10
	public const UnityType DBNull = 2; // 0x0
	public const UnityType Type = 4; // 0x0
	public const UnityType Module = 5; // 0x0
	public const UnityType Assembly = 6; // 0x0

}

// Namespace: System
public sealed class Version : IComparable, ICloneable, IComparable`1<Version>, IEquatable`1<Version> // TypeDefIndex: 290
{
	// Fields
	private const int UNDEFINED = -1; // 0x0
	private int _Major; // 0x10
	private int _Minor; // 0x14
	private int _Build; // 0x18
	private int _Revision; // 0x1C

	// Methods
	public void .ctor(); // 0x1009B5544
	public void .ctor(string version); // 0x1009B56E0
	public void .ctor(int major, int minor); // 0x1009B58E4
	public void .ctor(int major, int minor, int build); // 0x1009B5930
	public void .ctor(int major, int minor, int build, int revision); // 0x1009B5980
	private void CheckedSet(int defined, int major, int minor, int build, int revision); // 0x1009B5598
	public int get_Build(); // 0x1009B59DC
	public int get_Major(); // 0x1009B59E4
	public int get_Minor(); // 0x1009B59EC
	public int get_Revision(); // 0x1009B59F4
	public object Clone(); // 0x1009B59FC
	public int CompareTo(object version); // 0x1009B5AF8
	public override bool Equals(object obj); // 0x1009B5C54
	public int CompareTo(Version value); // 0x1009B5BB8
	public bool Equals(Version obj); // 0x1009B5CC8
	public override int GetHashCode(); // 0x1009B5D78
	public override string ToString(); // 0x1009B5D94
	internal static Version CreateFromString(string info); // 0x1009B5EF8
	public static bool op_Equality(Version v1, Version v2); // 0x1009B5D4C
	public static bool op_Inequality(Version v1, Version v2); // 0x1009B5D58
	public static bool op_GreaterThan(Version v1, Version v2); // 0x1009B61B4
	public static bool op_GreaterThanOrEqual(Version v1, Version v2); // 0x1009B61E0
	public static bool op_LessThan(Version v1, Version v2); // 0x1009B620C
}

// Namespace: System
public class WeakReference : ISerializable // TypeDefIndex: 291
{
	// Fields
	private bool isLongReference; // 0x10
	private GCHandle gcHandle; // 0x14

	// Methods
	public void .ctor(object target); // 0x1009B6234
	public void .ctor(object target, bool trackResurrection); // 0x1009B6268
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009B62EC
	private void AllocateHandle(object target); // 0x1009B62A8
	public virtual bool get_IsAlive(); // 0x1009B63F0
	public virtual object get_Target(); // 0x1009B6440
	public virtual void set_Target(object value); // 0x1009B644C
	public virtual bool get_TrackResurrection(); // 0x1009B6458
	protected override void Finalize(); // 0x1009B6460
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009B64D4
}

// Namespace: System
internal struct InputRecord // TypeDefIndex: 292
{
	// Fields
	public short EventType; // 0x10
	public bool KeyDown; // 0x12
	public short RepeatCount; // 0x14
	public short VirtualKeyCode; // 0x16
	public short VirtualScanCode; // 0x18
	public char Character; // 0x1A
	public int ControlKeyState; // 0x1C
	private int pad1; // 0x20
	private bool pad2; // 0x24

}

// Namespace: System
internal struct Coord // TypeDefIndex: 293
{
	// Fields
	public short X; // 0x10
	public short Y; // 0x12

}

// Namespace: System
internal struct SmallRect // TypeDefIndex: 294
{
	// Fields
	public short Left; // 0x10
	public short Top; // 0x12
	public short Right; // 0x14
	public short Bottom; // 0x16

}

// Namespace: System
internal struct ConsoleScreenBufferInfo // TypeDefIndex: 295
{
	// Fields
	public Coord Size; // 0x10
	public Coord CursorPosition; // 0x14
	public short Attribute; // 0x18
	public SmallRect Window; // 0x1A
	public Coord MaxWindowSize; // 0x22

}

// Namespace: System
internal sealed class Handles : Enum // TypeDefIndex: 296
{
	// Fields
	public int value__; // 0x10
	public const Handles STD_INPUT = -10; // 0x0
	public const Handles STD_OUTPUT = -11; // 0x0
	public const Handles STD_ERROR = -12; // 0x0

}

// Namespace: System
internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 297
{
	// Fields
	private IntPtr inputHandle; // 0x10
	private IntPtr outputHandle; // 0x18
	private short defaultAttribute; // 0x20

	// Methods
	public void .ctor(); // 0x1009B6668
	public ConsoleKeyInfo ReadKey(bool intercept); // 0x1009B68AC
	private static extern IntPtr GetStdHandle(Handles handle); // 0x1009B671C
	private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info); // 0x1009B67BC
	private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread); // 0x1009B6A44
}

// Namespace: System
public interface _AppDomain // TypeDefIndex: 298
{
}

// Namespace: System.Collections
public class ArrayList : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 299
{
	// Fields
	private const int DefaultInitialCapacity = 4; // 0x0
	private int _size; // 0x10
	private object[] _items; // 0x18
	private int _version; // 0x20
	private static readonly object[] EmptyArray; // 0x0

	// Methods
	public void .ctor(); // 0x1008269C0
	public void .ctor(ICollection c); // 0x10083652C
	public void .ctor(int capacity); // 0x100836714
	private void .ctor(object[] array, int index, int count); // 0x100836870
	private static void .cctor(); // 0x100836928
	public virtual object get_Item(int index); // 0x100836998
	public virtual void set_Item(int index, object value); // 0x100836A80
	public virtual int get_Count(); // 0x100836B98
	public virtual int get_Capacity(); // 0x100836BA0
	public virtual void set_Capacity(int value); // 0x100836BBC
	public virtual bool get_IsFixedSize(); // 0x100836CB8
	public virtual bool get_IsReadOnly(); // 0x100836CC0
	public virtual bool get_IsSynchronized(); // 0x100836CC8
	public virtual object get_SyncRoot(); // 0x100836CD0
	private void EnsureCapacity(int count); // 0x100836CD4
	private void Shift(int index, int count); // 0x100836D9C
	public virtual int Add(object value); // 0x100836F00
	public virtual void Clear(); // 0x100836FB0
	public virtual bool Contains(object item); // 0x100836FEC
	public virtual int IndexOf(object value); // 0x10083705C
	public virtual int IndexOf(object value, int startIndex); // 0x1008370C0
	public virtual int IndexOf(object value, int startIndex, int count); // 0x10083713C
	public virtual void Insert(int index, object value); // 0x1008372C8
	public virtual void InsertRange(int index, ICollection c); // 0x1008373FC
	public virtual void Remove(object obj); // 0x1008377A0
	public virtual void RemoveAt(int index); // 0x100837834
	public virtual void CopyTo(Array array); // 0x10083791C
	public virtual void CopyTo(Array array, int arrayIndex); // 0x100837930
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count); // 0x1008379AC
	public virtual IEnumerator GetEnumerator(); // 0x100837A98
	public virtual void AddRange(ICollection c); // 0x100837B9C
	public virtual void Sort(); // 0x100837C98
	public virtual void Sort(IComparer comparer); // 0x100837D04
	public virtual object[] ToArray(); // 0x100837D20
	public virtual Array ToArray(Type type); // 0x100837DC0
	public virtual object Clone(); // 0x100837E20
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message); // 0x100836804
	public static ArrayList Synchronized(ArrayList list); // 0x100837E98
	public static ArrayList ReadOnly(ArrayList list); // 0x100837FB8
}

// Namespace: 
private sealed class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 300
{
	// Fields
	private ArrayList list; // 0x10
	private int index; // 0x18
	private int version; // 0x1C
	private object currentElement; // 0x20
	private static object endFlag; // 0x0

	// Methods
	public void .ctor(ArrayList list); // 0x100837AF8
	private static void .cctor(); // 0x1008391D0
	public object Clone(); // 0x10083923C
	public bool MoveNext(); // 0x100839244
	public object get_Current(); // 0x100839394
	public void Reset(); // 0x100839464
}

// Namespace: 
private class ArrayListWrapper : ArrayList // TypeDefIndex: 301
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x28

	// Methods
	public void .ctor(ArrayList innerArrayList); // 0x100838080
	public override object get_Item(int index); // 0x1008380F8
	public override void set_Item(int index, object value); // 0x10083815C
	public override int get_Count(); // 0x1008381C8
	public override int get_Capacity(); // 0x10083821C
	public override void set_Capacity(int value); // 0x100838270
	public override bool get_IsFixedSize(); // 0x1008382D4
	public override bool get_IsReadOnly(); // 0x100838328
	public override bool get_IsSynchronized(); // 0x10083837C
	public override object get_SyncRoot(); // 0x1008383D0
	public override int Add(object value); // 0x100838424
	public override void Clear(); // 0x100838488
	public override bool Contains(object value); // 0x1008384DC
	public override int IndexOf(object value); // 0x100838544
	public override int IndexOf(object value, int startIndex); // 0x1008385AC
	public override int IndexOf(object value, int startIndex, int count); // 0x10083861C
	public override void Insert(int index, object value); // 0x10083869C
	public override void InsertRange(int index, ICollection c); // 0x10083870C
	public override void Remove(object value); // 0x10083877C
	public override void RemoveAt(int index); // 0x1008387E4
	public override void CopyTo(Array array); // 0x10083884C
	public override void CopyTo(Array array, int index); // 0x1008388B4
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x100838924
	public override IEnumerator GetEnumerator(); // 0x1008389AC
	public override void AddRange(ICollection c); // 0x100838A04
	public override object Clone(); // 0x100838A6C
	public override void Sort(); // 0x100838AC4
	public override void Sort(IComparer comparer); // 0x100838B1C
	public override object[] ToArray(); // 0x100838B84
	public override Array ToArray(Type elementType); // 0x100838BDC
}

// Namespace: 
private sealed class SynchronizedArrayListWrapper : ArrayListWrapper // TypeDefIndex: 302
{
	// Fields
	private object m_SyncRoot; // 0x30

	// Methods
	internal void .ctor(ArrayList innerArrayList); // 0x100837F5C
	public override object get_Item(int index); // 0x100839528
	public override void set_Item(int index, object value); // 0x1008395F8
	public override int get_Count(); // 0x1008396DC
	public override int get_Capacity(); // 0x10083979C
	public override void set_Capacity(int value); // 0x10083985C
	public override bool get_IsFixedSize(); // 0x100839938
	public override bool get_IsReadOnly(); // 0x1008399F8
	public override bool get_IsSynchronized(); // 0x100839AB8
	public override object get_SyncRoot(); // 0x100839AC0
	public override int Add(object value); // 0x100839AC8
	public override void Clear(); // 0x100839B98
	public override bool Contains(object value); // 0x100839C5C
	public override int IndexOf(object value); // 0x100839D30
	public override int IndexOf(object value, int startIndex); // 0x100839E04
	public override int IndexOf(object value, int startIndex, int count); // 0x100839EE0
	public override void Insert(int index, object value); // 0x100839FCC
	public override void InsertRange(int index, ICollection c); // 0x10083A0B4
	public override void Remove(object value); // 0x10083A19C
	public override void RemoveAt(int index); // 0x10083A27C
	public override void CopyTo(Array array); // 0x10083A35C
	public override void CopyTo(Array array, int index); // 0x10083A43C
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x10083A524
	public override IEnumerator GetEnumerator(); // 0x10083A62C
	public override void AddRange(ICollection c); // 0x10083A6F0
	public override object Clone(); // 0x10083A7D0
	public override void Sort(); // 0x10083A894
	public override void Sort(IComparer comparer); // 0x10083A95C
	public override object[] ToArray(); // 0x10083AA3C
	public override Array ToArray(Type elementType); // 0x10083AB00
}

// Namespace: 
private class FixedSizeArrayListWrapper : ArrayListWrapper // TypeDefIndex: 303
{
	// Methods
	public void .ctor(ArrayList innerList); // 0x100838C44
	protected virtual string get_ErrorMessage(); // 0x100838C48
	public override int get_Capacity(); // 0x100838C90
	public override void set_Capacity(int value); // 0x100838C94
	public override bool get_IsFixedSize(); // 0x100838D00
	public override int Add(object value); // 0x100838D08
	public override void AddRange(ICollection c); // 0x100838D74
	public override void Clear(); // 0x100838DE0
	public override void Insert(int index, object value); // 0x100838E4C
	public override void InsertRange(int index, ICollection c); // 0x100838EB8
	public override void Remove(object value); // 0x100838F24
	public override void RemoveAt(int index); // 0x100838F90
}

// Namespace: 
private sealed class ReadOnlyArrayListWrapper : FixedSizeArrayListWrapper // TypeDefIndex: 304
{
	// Methods
	public void .ctor(ArrayList innerArrayList); // 0x10083807C
	protected override string get_ErrorMessage(); // 0x100838FFC
	public override bool get_IsReadOnly(); // 0x100839044
	public override object get_Item(int index); // 0x10083904C
	public override void set_Item(int index, object value); // 0x1008390B0
	public override void Sort(); // 0x100839110
	public override void Sort(IComparer comparer); // 0x100839170
}

// Namespace: System.Collections
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 305
{
	// Fields
	private int[] m_array; // 0x10
	private int m_length; // 0x18
	private int _version; // 0x1C

	// Methods
	public void .ctor(BitArray bits); // 0x10083ABD4
	public void .ctor(int length); // 0x10083AD04
	private byte getByte(int byteIndex); // 0x10083ADC8
	public int get_Count(); // 0x10083AE44
	public bool get_IsSynchronized(); // 0x10083AE4C
	public bool get_Item(int index); // 0x10083AE54
	public void set_Item(int index, bool value); // 0x10083AF14
	public int get_Length(); // 0x10083B018
	public object get_SyncRoot(); // 0x10083B020
	public object Clone(); // 0x10083B024
	public void CopyTo(Array array, int index); // 0x10083B084
	public bool Get(int index); // 0x10083AE58
	public void Set(int index, bool value); // 0x10083AF18
	public IEnumerator GetEnumerator(); // 0x10083B490
}

// Namespace: 
private class BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 306
{
	// Fields
	private BitArray _bitArray; // 0x10
	private bool _current; // 0x18
	private int _index; // 0x1C
	private int _version; // 0x20

	// Methods
	public void .ctor(BitArray ba); // 0x10083B4F0
	public object Clone(); // 0x10083B534
	public object get_Current(); // 0x10083B53C
	public bool MoveNext(); // 0x10083B618
	public void Reset(); // 0x10083B6F8
	private void checkVersion(); // 0x10083B678
}

// Namespace: System.Collections
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 307
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x0
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x8
	private CultureInfo culture; // 0x10

	// Methods
	public void .ctor(); // 0x10083B720
	private void .ctor(bool invariant); // 0x10083B79C
	private static void .cctor(); // 0x10083B7A4
	public static CaseInsensitiveComparer get_Default(); // 0x10083B824
	public static CaseInsensitiveComparer get_DefaultInvariant(); // 0x10083B88C
	public int Compare(object a, object b); // 0x10083B8F4
}

// Namespace: System.Collections
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 308
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x0
	private static CaseInsensitiveHashCodeProvider singleton; // 0x8
	private static readonly object sync; // 0x10
	private TextInfo m_text; // 0x10

	// Methods
	public void .ctor(); // 0x10083BD68
	public void .ctor(CultureInfo culture); // 0x10083BF0C
	private static void .cctor(); // 0x10083C01C
	public static CaseInsensitiveHashCodeProvider get_Default(); // 0x10083C0E0
	private static bool AreEqual(CultureInfo a, CultureInfo b); // 0x10083BE84
	private static bool AreEqual(TextInfo info, CultureInfo culture); // 0x10083C3CC
	public static CaseInsensitiveHashCodeProvider get_DefaultInvariant(); // 0x10083C438
	public int GetHashCode(object obj); // 0x10083C4A0
}

// Namespace: System.Collections
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 309
{
	// Fields
	private ArrayList list; // 0x10

	// Methods
	protected void .ctor(); // 0x10083C748
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10083C750
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10083C82C
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10083C884
	private int System.Collections.IList.Add(object value); // 0x10083C8DC
	private bool System.Collections.IList.Contains(object value); // 0x10083CABC
	private int System.Collections.IList.IndexOf(object value); // 0x10083CB28
	private void System.Collections.IList.Insert(int index, object value); // 0x10083CB94
	private void System.Collections.IList.Remove(object value); // 0x10083CD44
	private bool System.Collections.IList.get_IsFixedSize(); // 0x10083CEE8
	private bool System.Collections.IList.get_IsReadOnly(); // 0x10083CF40
	private object System.Collections.IList.get_Item(int index); // 0x10083CF98
	private void System.Collections.IList.set_Item(int index, object value); // 0x10083D000
	public int get_Count(); // 0x10083D26C
	public IEnumerator GetEnumerator(); // 0x10083D2C4
	public void Clear(); // 0x10083D320
	public void RemoveAt(int index); // 0x10083D3D0
	protected ArrayList get_InnerList(); // 0x10083C7C4
	protected IList get_List(); // 0x10083D504
	protected virtual void OnClear(); // 0x10083D508
	protected virtual void OnClearComplete(); // 0x10083D50C
	protected virtual void OnInsert(int index, object value); // 0x10083D510
	protected virtual void OnInsertComplete(int index, object value); // 0x10083D514
	protected virtual void OnRemove(int index, object value); // 0x10083D518
	protected virtual void OnRemoveComplete(int index, object value); // 0x10083D51C
	protected virtual void OnSet(int index, object oldValue, object newValue); // 0x10083D520
	protected virtual void OnSetComplete(int index, object oldValue, object newValue); // 0x10083D524
	protected virtual void OnValidate(object value); // 0x10083D528
}

// Namespace: System.Collections
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 310
{
	// Fields
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x8
	private CompareInfo m_compareInfo; // 0x10

	// Methods
	private void .ctor(); // 0x10083D598
	public void .ctor(CultureInfo culture); // 0x10083D5A0
	private static void .cctor(); // 0x10083D650
	public int Compare(object a, object b); // 0x10083BA90
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10083D70C
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 311
{
}

// Namespace: System.Collections
public struct DictionaryEntry // TypeDefIndex: 312
{
	// Fields
	private object _key; // 0x10
	private object _value; // 0x18

	// Methods
	public void .ctor(object key, object value); // 0x10083D7E8
	public object get_Key(); // 0x10083D7F8
	public object get_Value(); // 0x10083D808
}

// Namespace: System.Collections
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 313
{
	// Fields
	private const int CHAIN_MARKER = -2147483648; // 0x0
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private float loadFactor; // 0x18
	private Slot[] table; // 0x20
	private int[] hashes; // 0x28
	private int threshold; // 0x30
	private HashKeys hashKeys; // 0x38
	private HashValues hashValues; // 0x40
	private IHashCodeProvider hcpRef; // 0x48
	private IComparer comparerRef; // 0x50
	private SerializationInfo serializationInfo; // 0x58
	private IEqualityComparer equalityComparer; // 0x60
	private static readonly int[] primeTbl; // 0x0

	// Methods
	public void .ctor(); // 0x100828EEC
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x10083D9B8
	public void .ctor(int capacity, float loadFactor); // 0x10083D9AC
	public void .ctor(int capacity); // 0x10083DD90
	internal void .ctor(Hashtable source); // 0x10083DDA0
	public void .ctor(int capacity, IHashCodeProvider hcp, IComparer comparer); // 0x10083DF48
	public void .ctor(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x10083DF50
	public void .ctor(IDictionary d, IHashCodeProvider hcp, IComparer comparer); // 0x10083E2FC
	public void .ctor(IHashCodeProvider hcp, IComparer comparer); // 0x10083E304
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10083E320
	public void .ctor(int capacity, IEqualityComparer equalityComparer); // 0x10083E34C
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x10083E380
	private static void .cctor(); // 0x10083E3B0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10083E440
	protected void set_comparer(IComparer value); // 0x10083DD88
	protected void set_hcp(IHashCodeProvider value); // 0x10083DD80
	public virtual int get_Count(); // 0x10083E510
	public virtual bool get_IsSynchronized(); // 0x10083E518
	public virtual object get_SyncRoot(); // 0x10083E520
	public virtual ICollection get_Keys(); // 0x10083E524
	public virtual ICollection get_Values(); // 0x10083E610
	public virtual object get_Item(object key); // 0x10083E6FC
	public virtual void set_Item(object key, object value); // 0x10083E8EC
	public virtual void CopyTo(Array array, int arrayIndex); // 0x10083ED20
	public virtual void Add(object key, object value); // 0x10083F020
	public virtual void Clear(); // 0x10083F028
	public virtual bool Contains(object key); // 0x10083F0FC
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x10083F300
	public virtual void Remove(object key); // 0x10083F364
	public virtual bool ContainsKey(object key); // 0x10083F4AC
	public virtual object Clone(); // 0x10083F508
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10083F568
	public virtual void OnDeserialization(object sender); // 0x10083F910
	public static Hashtable Synchronized(Hashtable table); // 0x10084010C
	protected virtual int GetHash(object key); // 0x100840248
	protected virtual bool KeyEquals(object item, object key); // 0x1008403E8
	private void AdjustThreshold(); // 0x1008400D0
	private void SetTable(Slot[] table, int[] hashes); // 0x10083DCF8
	private int Find(object key); // 0x10083F118
	private void Rehash(); // 0x100840624
	private void PutImpl(object key, object value, bool overwrite); // 0x10083E8F4
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x10083F75C
	internal static bool TestPrime(int x); // 0x1008408A0
	internal static int CalcPrime(int x); // 0x1008408F0
	internal static int ToPrime(int x); // 0x10083DBAC
}

// Namespace: 
internal struct Slot // TypeDefIndex: 314
{
	// Fields
	internal object key; // 0x10
	internal object value; // 0x18

}

// Namespace: 
internal class KeyMarker : IObjectReference // TypeDefIndex: 315
{
	// Fields
	public static readonly KeyMarker Removed; // 0x0

	// Methods
	public void .ctor(); // 0x100841400
	private static void .cctor(); // 0x100841408
	public object GetRealObject(StreamingContext context); // 0x10084146C
}

// Namespace: 
private sealed class EnumeratorMode : Enum // TypeDefIndex: 316
{
	// Fields
	public int value__; // 0x10
	public const EnumeratorMode KEY_MODE = 0; // 0x0
	public const EnumeratorMode VALUE_MODE = 1; // 0x0
	public const EnumeratorMode ENTRY_MODE = 2; // 0x0

}

// Namespace: 
private sealed class Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 317
{
	// Fields
	private Hashtable host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private static readonly string xstr; // 0x0

	// Methods
	public void .ctor(Hashtable host, EnumeratorMode mode); // 0x10083E4A4
	private static void .cctor(); // 0x1008409FC
	private void FailFast(); // 0x100840A58
	public void Reset(); // 0x1008409D0
	public bool MoveNext(); // 0x100840B08
	public DictionaryEntry get_Entry(); // 0x100840C08
	public object get_Key(); // 0x100840C80
	public object get_Value(); // 0x100840CF8
	public object get_Current(); // 0x100840D70
}

// Namespace: 
private class HashKeys : IEnumerable, ICollection // TypeDefIndex: 318
{
	// Fields
	private Hashtable host; // 0x10

	// Methods
	public void .ctor(Hashtable host); // 0x10083E590
	public virtual int get_Count(); // 0x100840E60
	public virtual bool get_IsSynchronized(); // 0x100840EB4
	public virtual object get_SyncRoot(); // 0x100840F08
	public virtual void CopyTo(Array array, int arrayIndex); // 0x100840F5C
	public virtual IEnumerator GetEnumerator(); // 0x1008410C8
}

// Namespace: 
private class HashValues : IEnumerable, ICollection // TypeDefIndex: 319
{
	// Fields
	private Hashtable host; // 0x10

	// Methods
	public void .ctor(Hashtable host); // 0x10083E67C
	public virtual int get_Count(); // 0x100841130
	public virtual bool get_IsSynchronized(); // 0x100841184
	public virtual object get_SyncRoot(); // 0x1008411D8
	public virtual void CopyTo(Array array, int arrayIndex); // 0x10084122C
	public virtual IEnumerator GetEnumerator(); // 0x100841398
}

// Namespace: 
private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 320
{
	// Fields
	private Hashtable host; // 0x68

	// Methods
	public void .ctor(Hashtable host); // 0x10084019C
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x100841508
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008415F4
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10084165C
	public override int get_Count(); // 0x1008416C8
	public override bool get_IsSynchronized(); // 0x10084171C
	public override object get_SyncRoot(); // 0x100841724
	public override ICollection get_Keys(); // 0x100841778
	public override ICollection get_Values(); // 0x100841868
	public override object get_Item(object key); // 0x100841958
	public override void set_Item(object key, object value); // 0x1008419BC
	public override void CopyTo(Array array, int arrayIndex); // 0x100841AD0
	public override void Add(object key, object value); // 0x100841B3C
	public override void Clear(); // 0x100841C50
	public override bool Contains(object key); // 0x100841D44
	public override IDictionaryEnumerator GetEnumerator(); // 0x100841D6C
	public override void Remove(object key); // 0x100841DD4
	public override bool ContainsKey(object key); // 0x100841EE4
	public override object Clone(); // 0x100841F48
}

// Namespace: System.Collections
public interface IComparer // TypeDefIndex: 321
{
	// Methods
	public abstract int Compare(object x, object y); // 0
}

// Namespace: System.Collections
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 322
{
	// Methods
	public abstract object get_Item(object key); // 0
	public abstract void set_Item(object key, object value); // 0
	public abstract ICollection get_Keys(); // 0
	public abstract ICollection get_Values(); // 0
	public abstract void Add(object key, object value); // 0
	public abstract void Clear(); // 0
	public abstract bool Contains(object key); // 0
	public abstract IDictionaryEnumerator GetEnumerator(); // 0
	public abstract void Remove(object key); // 0
}

// Namespace: System.Collections
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 323
{
	// Methods
	public abstract DictionaryEntry get_Entry(); // 0
	public abstract object get_Key(); // 0
	public abstract object get_Value(); // 0
}

// Namespace: System.Collections
public interface IEqualityComparer // TypeDefIndex: 324
{
	// Methods
	public abstract bool Equals(object x, object y); // 0
	public abstract int GetHashCode(object obj); // 0
}

// Namespace: System.Collections
public interface IHashCodeProvider // TypeDefIndex: 325
{
	// Methods
	public abstract int GetHashCode(object obj); // 0
}

// Namespace: System.Collections
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 326
{
	// Fields
	private object[] _array; // 0x10
	private int _head; // 0x18
	private int _size; // 0x1C
	private int _tail; // 0x20
	private int _growFactor; // 0x24
	private int _version; // 0x28

	// Methods
	public void .ctor(); // 0x100842098
	public void .ctor(int capacity); // 0x1008421C0
	public void .ctor(ICollection col); // 0x1008421C8
	public void .ctor(int capacity, float growFactor); // 0x1008420A4
	public virtual int get_Count(); // 0x1008425F0
	public virtual bool get_IsSynchronized(); // 0x1008425F8
	public virtual object get_SyncRoot(); // 0x100842600
	public virtual void CopyTo(Array array, int index); // 0x100842604
	public virtual IEnumerator GetEnumerator(); // 0x100842788
	public virtual object Clone(); // 0x100842828
	public virtual void Clear(); // 0x1008428D8
	public virtual object Dequeue(); // 0x100842964
	public virtual void Enqueue(object obj); // 0x100842A7C
	public virtual object Peek(); // 0x100842C24
	public static Queue Synchronized(Queue queue); // 0x100842CC0
	public virtual object[] ToArray(); // 0x100842D88
	private void grow(); // 0x100842B44
}

// Namespace: 
private class SyncQueue : Queue // TypeDefIndex: 327
{
	// Fields
	private Queue queue; // 0x30

	// Methods
	internal void .ctor(Queue queue); // 0x100842D58
	public override int get_Count(); // 0x1008430A4
	public override bool get_IsSynchronized(); // 0x100843164
	public override object get_SyncRoot(); // 0x10084316C
	public override void CopyTo(Array array, int index); // 0x1008431C0
	public override IEnumerator GetEnumerator(); // 0x1008432A4
	public override object Clone(); // 0x100843364
	public override void Clear(); // 0x10084348C
	public override object Dequeue(); // 0x100843550
	public override void Enqueue(object obj); // 0x100843610
	public override object Peek(); // 0x1008436EC
	public override object[] ToArray(); // 0x1008437AC
}

// Namespace: 
private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 328
{
	// Fields
	private Queue queue; // 0x10
	private int _version; // 0x18
	private int current; // 0x1C

	// Methods
	internal void .ctor(Queue q); // 0x1008427E8
	public object Clone(); // 0x100842E28
	public virtual object get_Current(); // 0x100842EA4
	public virtual bool MoveNext(); // 0x100842F7C
	public virtual void Reset(); // 0x10084301C
}

// Namespace: System.Collections
public abstract class ReadOnlyCollectionBase : IEnumerable, ICollection // TypeDefIndex: 329
{
	// Fields
	private ArrayList list; // 0x10

	// Methods
	protected void .ctor(); // 0x10084386C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008438D4
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x100843920
	private object System.Collections.ICollection.get_SyncRoot(); // 0x100843A10
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x100843A64
	public virtual int get_Count(); // 0x100843AB8
	public virtual IEnumerator GetEnumerator(); // 0x100843B0C
	protected ArrayList get_InnerList(); // 0x100843A08
}

// Namespace: System.Collections
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 330
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x0
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private Slot[] table; // 0x18
	private IComparer comparer; // 0x20
	private int defaultCapacity; // 0x28

	// Methods
	public void .ctor(); // 0x100843B64
	public void .ctor(int initialCapacity); // 0x100843CB0
	public void .ctor(IComparer comparer, int capacity); // 0x100843BD8
	public void .ctor(IDictionary d, IComparer comparer); // 0x100843D44
	private static void .cctor(); // 0x1008440BC
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100844110
	public virtual int get_Count(); // 0x1008441F0
	public virtual bool get_IsSynchronized(); // 0x1008441F8
	public virtual object get_SyncRoot(); // 0x100844200
	public virtual bool get_IsFixedSize(); // 0x100844204
	public virtual bool get_IsReadOnly(); // 0x10084420C
	public virtual ICollection get_Keys(); // 0x100844214
	public virtual ICollection get_Values(); // 0x1008442F4
	public virtual object get_Item(object key); // 0x1008443D4
	public virtual void set_Item(object key, object value); // 0x1008444A4
	public virtual int get_Capacity(); // 0x100844CE0
	public virtual void set_Capacity(int value); // 0x100844CFC
	public virtual void Add(object key, object value); // 0x100844E14
	public virtual void Clear(); // 0x100844E1C
	public virtual bool Contains(object key); // 0x100844EC4
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x100844FD8
	public virtual void Remove(object key); // 0x10084503C
	public virtual void CopyTo(Array array, int arrayIndex); // 0x1008450E4
	public virtual object Clone(); // 0x1008453EC
	public virtual void RemoveAt(int index); // 0x10084546C
	public virtual int IndexOfKey(object key); // 0x10084559C
	public virtual int IndexOfValue(object value); // 0x1008456AC
	public virtual bool ContainsKey(object key); // 0x100845744
	public virtual bool ContainsValue(object value); // 0x100845870
	public virtual object GetByIndex(int index); // 0x1008458CC
	public virtual object GetKey(int index); // 0x10084599C
	private void EnsureCapacity(int n, int free); // 0x100845A6C
	private void PutImpl(object key, object value, bool overwrite); // 0x1008447C4
	private object GetImpl(object key); // 0x10084444C
	private void InitTable(int capacity, bool forceSize); // 0x100843CC0
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x100845C5C
	private int Find(object key); // 0x1008445E4
}

// Namespace: 
internal struct Slot // TypeDefIndex: 331
{
	// Fields
	internal object key; // 0x10
	internal object value; // 0x18

}

// Namespace: 
private sealed class EnumeratorMode : Enum // TypeDefIndex: 332
{
	// Fields
	public int value__; // 0x10
	public const EnumeratorMode KEY_MODE = 0; // 0x0
	public const EnumeratorMode VALUE_MODE = 1; // 0x0
	public const EnumeratorMode ENTRY_MODE = 2; // 0x0

}

// Namespace: 
private sealed class Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 333
{
	// Fields
	private SortedList host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private bool invalid; // 0x38
	private static readonly string xstr; // 0x0

	// Methods
	public void .ctor(SortedList host, EnumeratorMode mode); // 0x100844174
	private static void .cctor(); // 0x100845F6C
	public void Reset(); // 0x100845EA8
	public bool MoveNext(); // 0x100845FC8
	public DictionaryEntry get_Entry(); // 0x1008460D8
	public object get_Key(); // 0x100846188
	public object get_Value(); // 0x100846238
	public object get_Current(); // 0x1008462E8
	public object Clone(); // 0x100846488
}

// Namespace: 
private class ListKeys : IEnumerable, ICollection, IList // TypeDefIndex: 334
{
	// Fields
	private SortedList host; // 0x10

	// Methods
	public void .ctor(SortedList host); // 0x100844274
	public virtual int get_Count(); // 0x10084652C
	public virtual bool get_IsSynchronized(); // 0x100846580
	public virtual object get_SyncRoot(); // 0x1008465D4
	public virtual void CopyTo(Array array, int arrayIndex); // 0x100846628
	public virtual bool get_IsFixedSize(); // 0x100846644
	public virtual bool get_IsReadOnly(); // 0x10084664C
	public virtual object get_Item(int index); // 0x100846654
	public virtual void set_Item(int index, object value); // 0x1008466BC
	public virtual int Add(object value); // 0x10084671C
	public virtual void Clear(); // 0x10084677C
	public virtual bool Contains(object key); // 0x1008467DC
	public virtual int IndexOf(object key); // 0x100846844
	public virtual void Insert(int index, object value); // 0x1008468AC
	public virtual void Remove(object value); // 0x10084690C
	public virtual void RemoveAt(int index); // 0x10084696C
	public virtual IEnumerator GetEnumerator(); // 0x1008469CC
}

// Namespace: 
private class ListValues : IEnumerable, ICollection, IList // TypeDefIndex: 335
{
	// Fields
	private SortedList host; // 0x10

	// Methods
	public void .ctor(SortedList host); // 0x100844354
	public virtual int get_Count(); // 0x100846A34
	public virtual bool get_IsSynchronized(); // 0x100846A88
	public virtual object get_SyncRoot(); // 0x100846ADC
	public virtual void CopyTo(Array array, int arrayIndex); // 0x100846B30
	public virtual bool get_IsFixedSize(); // 0x100846B4C
	public virtual bool get_IsReadOnly(); // 0x100846B54
	public virtual object get_Item(int index); // 0x100846B5C
	public virtual void set_Item(int index, object value); // 0x100846BC4
	public virtual int Add(object value); // 0x100846C24
	public virtual void Clear(); // 0x100846C84
	public virtual bool Contains(object value); // 0x100846CE4
	public virtual int IndexOf(object value); // 0x100846D4C
	public virtual void Insert(int index, object value); // 0x100846DB4
	public virtual void Remove(object value); // 0x100846E14
	public virtual void RemoveAt(int index); // 0x100846E74
	public virtual IEnumerator GetEnumerator(); // 0x100846ED4
}

// Namespace: System.Collections
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 336
{
	// Fields
	private object[] contents; // 0x10
	private int current; // 0x18
	private int count; // 0x1C
	private int capacity; // 0x20
	private int modCount; // 0x24

	// Methods
	public void .ctor(); // 0x100824868
	public void .ctor(ICollection col); // 0x100846F70
	public void .ctor(int initialCapacity); // 0x100847394
	private void Resize(int ncapacity); // 0x10084744C
	public virtual int get_Count(); // 0x1008474EC
	public virtual bool get_IsSynchronized(); // 0x1008474F4
	public virtual object get_SyncRoot(); // 0x1008474FC
	public virtual void Clear(); // 0x100847500
	public virtual object Clone(); // 0x100847580
	public virtual bool Contains(object obj); // 0x1008475FC
	public virtual void CopyTo(Array array, int index); // 0x1008476FC
	public virtual IEnumerator GetEnumerator(); // 0x100847884
	public virtual object Peek(); // 0x100847924
	public virtual object Pop(); // 0x1008479BC
	public virtual void Push(object obj); // 0x100847AF4
	public virtual object[] ToArray(); // 0x100847BA0
}

// Namespace: 
private class Enumerator : IEnumerator, ICloneable // TypeDefIndex: 337
{
	// Fields
	private Stack stack; // 0x10
	private int modCount; // 0x18
	private int current; // 0x1C

	// Methods
	internal void .ctor(Stack s); // 0x1008478E4
	public object Clone(); // 0x100847C2C
	public virtual object get_Current(); // 0x100847C34
	public virtual bool MoveNext(); // 0x100847CF4
	public virtual void Reset(); // 0x100847DB0
}

// Namespace: System.Configuration.Assemblies
public sealed class AssemblyHashAlgorithm : Enum // TypeDefIndex: 338
{
	// Fields
	public int value__; // 0x10
	public const AssemblyHashAlgorithm None = 0; // 0x0
	public const AssemblyHashAlgorithm MD5 = 32771; // 0x0
	public const AssemblyHashAlgorithm SHA1 = 32772; // 0x0

}

// Namespace: System.Configuration.Assemblies
public sealed class AssemblyVersionCompatibility : Enum // TypeDefIndex: 339
{
	// Fields
	public int value__; // 0x10
	public const AssemblyVersionCompatibility SameMachine = 1; // 0x0
	public const AssemblyVersionCompatibility SameProcess = 2; // 0x0
	public const AssemblyVersionCompatibility SameDomain = 3; // 0x0

}

// Namespace: System.Diagnostics
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 340
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x10
	private bool JITOptimizerDisabledFlag; // 0x11
	private DebuggingModes debuggingModes; // 0x14

	// Methods
	public void .ctor(DebuggingModes modes); // 0x100864DC0
}

// Namespace: 
public sealed class DebuggingModes : Enum // TypeDefIndex: 341
{
	// Fields
	public int value__; // 0x10
	public const DebuggingModes None = 0; // 0x0
	public const DebuggingModes Default = 1; // 0x0
	public const DebuggingModes IgnoreSymbolStoreSequencePoints = 2; // 0x0
	public const DebuggingModes EnableEditAndContinue = 4; // 0x0
	public const DebuggingModes DisableOptimizations = 256; // 0x0

}

// Namespace: System.Diagnostics
public sealed class DebuggerBrowsableState : Enum // TypeDefIndex: 342
{
	// Fields
	public int value__; // 0x10
	public const DebuggerBrowsableState Never = 0; // 0x0
	public const DebuggerBrowsableState Collapsed = 2; // 0x0
	public const DebuggerBrowsableState RootHidden = 3; // 0x0

}

// Namespace: System.Diagnostics
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 343
{
	// Fields
	private DebuggerBrowsableState state; // 0x10

	// Methods
	public void .ctor(DebuggerBrowsableState state); // 0x100864DFC
}

// Namespace: System.Diagnostics
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 344
{
	// Fields
	private string value; // 0x10
	private string type; // 0x18
	private string name; // 0x20

	// Methods
	public void .ctor(string value); // 0x100864E28
	public void set_Name(string value); // 0x100864ED8
}

// Namespace: System.Diagnostics
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 345
{
	// Methods
	public void .ctor(); // 0x100864EE8
}

// Namespace: System.Diagnostics
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 346
{
	// Fields
	private string proxy_type_name; // 0x10

	// Methods
	public void .ctor(Type type); // 0x100864EF0
}

// Namespace: System.Diagnostics
public class StackFrame // TypeDefIndex: 347
{
	// Fields
	public const int OFFSET_UNKNOWN = -1; // 0x0
	private int ilOffset; // 0x10
	private int nativeOffset; // 0x14
	private MethodBase methodBase; // 0x18
	private string fileName; // 0x20
	private int lineNumber; // 0x28
	private int columnNumber; // 0x2C
	private string internalMethodName; // 0x30

	// Methods
	public void .ctor(); // 0x100864F50
	public void .ctor(int skipFrames, bool fNeedFileInfo); // 0x100864FD4
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x100864FAC
	public virtual int GetFileLineNumber(); // 0x100865040
	public virtual string GetFileName(); // 0x100865048
	internal string GetSecureFileName(); // 0x10086521C
	public virtual int GetILOffset(); // 0x100865314
	public virtual MethodBase GetMethod(); // 0x10086531C
	public virtual int GetNativeOffset(); // 0x100865324
	internal string GetInternalMethodName(); // 0x10086532C
	public override string ToString(); // 0x100865334
}

// Namespace: System.Diagnostics
public class StackTrace // TypeDefIndex: 348
{
	// Fields
	public const int METHODS_TO_SKIP = 0; // 0x0
	private StackFrame[] frames; // 0x10
	private bool debug_info; // 0x18

	// Methods
	public void .ctor(); // 0x100865548
	public void .ctor(bool fNeedFileInfo); // 0x1008657F4
	public void .ctor(int skipFrames, bool fNeedFileInfo); // 0x100865828
	public void .ctor(Exception e, bool fNeedFileInfo); // 0x100865868
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo); // 0x10086587C
	internal void .ctor(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames); // 0x100865884
	private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x100865578
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x100865BD8
	public virtual int get_FrameCount(); // 0x100865BE8
	public virtual StackFrame GetFrame(int index); // 0x100865C00
	public override string ToString(); // 0x100865C88
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolWriter // TypeDefIndex: 349
{
	// Methods
	public abstract void Initialize(IntPtr emitter, string filename, bool fFullBuild); // 0
}

// Namespace: System.Globalization
public abstract class Calendar : ICloneable // TypeDefIndex: 350
{
	// Fields
	private bool m_isReadOnly; // 0x10
	internal int twoDigitYearMax; // 0x14
	internal string[] M_AbbrEraNames; // 0x18
	internal string[] M_EraNames; // 0x20

	// Methods
	protected void .ctor(); // 0x10086EB38
	public abstract int[] get_Eras(); // 0
	public virtual object Clone(); // 0x10086EB64
	internal void CheckReadOnly(); // 0x10086EBCC
	public abstract int GetDayOfMonth(DateTime time); // 0
	public abstract DayOfWeek GetDayOfWeek(DateTime time); // 0
	public abstract int GetEra(DateTime time); // 0
	public abstract int GetMonth(DateTime time); // 0
	public abstract int GetYear(DateTime time); // 0
	internal string[] get_EraNames(); // 0x10086EC70
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 351
{
	// Methods
	public static int div(int x, int y); // 0x10086EF6C
	public static int mod(int x, int y); // 0x10086EE34
	public static int div_mod(out int remainder, int x, int y); // 0x10086F024
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 352
{
	// Methods
	public static int FromDateTime(DateTime time); // 0x10086EDC8
	public static DayOfWeek day_of_week(int date); // 0x10086EE18
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 353
{
	// Methods
	public static bool is_leap_year(int year); // 0x10086EE4C
	public static int fixed_from_dmy(int day, int month, int year); // 0x10086EEA4
	public static int year_from_fixed(int date); // 0x10086EF80
	public static void my_from_fixed(out int month, out int year, int date); // 0x10086F040
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x10086F17C
	public static int month_from_fixed(int date); // 0x10086F1D8
	public static int day_from_fixed(int date); // 0x10086F210
	public static int GetDayOfMonth(DateTime time); // 0x10086F25C
	public static int GetMonth(DateTime time); // 0x10086F2B0
	public static int GetYear(DateTime time); // 0x10086F318
}

// Namespace: System.Globalization
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 354
{
	// Fields
	private static readonly bool useManagedCollation; // 0x0
	private int culture; // 0x10
	private string icu_name; // 0x18
	private SimpleCollator collator; // 0x20
	private static Hashtable collators; // 0x8
	private static object monitor; // 0x10

	// Methods
	private void .ctor(); // 0x10086F36C
	internal void .ctor(CultureInfo ci); // 0x10086F374
	private static void .cctor(); // 0x10086F798
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x10086F890
	internal static bool get_UseManagedCollation(); // 0x10086F6F0
	private void construct_compareinfo(string locale); // 0x10086F794
	private void free_internal_collator(); // 0x10086F9E0
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x10086F9E4
	private void assign_sortkey(object key, string source, CompareOptions options); // 0x10086F9E8
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x10086F9EC
	protected override void Finalize(); // 0x10086F9F0
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x10086FA5C
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x10086FA7C
	public virtual int Compare(string string1, string string2); // 0x10086FB7C
	public virtual int Compare(string string1, string string2, CompareOptions options); // 0x10086FBE4
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x10086FD04
	public override bool Equals(object value); // 0x10086FF88
	public override int GetHashCode(); // 0x100870024
	public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x100870034
	public virtual int IndexOf(string source, string value); // 0x1008701BC
	public virtual int IndexOf(string source, string value, int startIndex, int count); // 0x10087024C
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x1008702CC
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x100870308
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x100870408
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x1008705D4
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x100870790
	public virtual int LastIndexOf(string source, string value, int startIndex, int count); // 0x10087097C
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x1008709FC
	public override string ToString(); // 0x100870BB8
	public int get_LCID(); // 0x10087002C
}

// Namespace: System.Globalization
public sealed class CompareOptions : Enum // TypeDefIndex: 355
{
	// Fields
	public int value__; // 0x10
	public const CompareOptions None = 0; // 0x0
	public const CompareOptions IgnoreCase = 1; // 0x0
	public const CompareOptions IgnoreNonSpace = 2; // 0x0
	public const CompareOptions IgnoreSymbols = 4; // 0x0
	public const CompareOptions IgnoreKanaType = 8; // 0x0
	public const CompareOptions IgnoreWidth = 16; // 0x0
	public const CompareOptions StringSort = 536870912; // 0x0
	public const CompareOptions Ordinal = 1073741824; // 0x0
	public const CompareOptions OrdinalIgnoreCase = 268435456; // 0x0

}

// Namespace: System.Globalization
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 356
{
	// Fields
	private const int NumOptionalCalendars = 5; // 0x0
	private const int GregorianTypeMask = 16777215; // 0x0
	private const int CalendarTypeBits = 24; // 0x0
	private const int InvariantCultureId = 127; // 0x0
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x8
	internal static int BootstrapCultureID; // 0x10
	private bool m_isReadOnly; // 0x10
	private int cultureID; // 0x14
	private int parent_lcid; // 0x18
	private int specific_lcid; // 0x1C
	private int datetime_index; // 0x20
	private int number_index; // 0x24
	private bool m_useUserOverride; // 0x28
	private NumberFormatInfo numInfo; // 0x30
	private DateTimeFormatInfo dateTimeInfo; // 0x38
	private TextInfo textInfo; // 0x40
	private string m_name; // 0x48
	private string displayname; // 0x50
	private string englishname; // 0x58
	private string nativename; // 0x60
	private string iso3lang; // 0x68
	private string iso2lang; // 0x70
	private string icu_name; // 0x78
	private string win3lang; // 0x80
	private string territory; // 0x88
	private CompareInfo compareInfo; // 0x90
	private readonly PTR calendar_data; // 0x98
	private readonly PTR textinfo_data; // 0xA0
	private Calendar[] optional_calendars; // 0xA8
	private CultureInfo parent_culture; // 0xB0
	private int m_dataItem; // 0xB8
	private Calendar calendar; // 0xC0
	private bool constructed; // 0xC8
	internal byte[] cached_serialized_form; // 0xD0
	private static readonly string MSG_READONLY; // 0x18
	private static Hashtable shared_by_number; // 0x20
	private static Hashtable shared_by_name; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map19; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map1A; // 0x38
	private static Dictionary`2<string, int> <>f__switch$map1B; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map1C; // 0x48

	// Methods
	public void .ctor(int culture); // 0x10086F9D4
	public void .ctor(int culture, bool useUserOverride); // 0x100870C5C
	private void .ctor(int culture, bool useUserOverride, bool read_only); // 0x100870C64
	public void .ctor(string name); // 0x100871044
	public void .ctor(string name, bool useUserOverride); // 0x100871050
	private void .ctor(string name, bool useUserOverride, bool read_only); // 0x100871058
	private void .ctor(); // 0x10087136C
	private static void .cctor(); // 0x100871398
	public static CultureInfo get_InvariantCulture(); // 0x10086A154
	public static CultureInfo CreateSpecificCulture(string name); // 0x10087143C
	public static CultureInfo get_CurrentCulture(); // 0x100871670
	public static CultureInfo get_CurrentUICulture(); // 0x1008716E4
	internal static CultureInfo ConstructCurrentCulture(); // 0x100871758
	internal static CultureInfo ConstructCurrentUICulture(); // 0x10087189C
	public virtual int get_LCID(); // 0x1008718F8
	public virtual string get_Name(); // 0x100871900
	public virtual CultureInfo get_Parent(); // 0x100871908
	public virtual TextInfo get_TextInfo(); // 0x100871A28
	internal string get_IcuName(); // 0x10086F758
	public virtual object Clone(); // 0x100871B80
	public override bool Equals(object value); // 0x100871F68
	public static CultureInfo[] GetCultures(CultureTypes types); // 0x100872004
	public override int GetHashCode(); // 0x100872158
	public override string ToString(); // 0x100872160
	public virtual CompareInfo get_CompareInfo(); // 0x100872168
	public virtual bool get_IsNeutralCulture(); // 0x10087226C
	internal void CheckNeutral(); // 0x1008722D4
	public virtual NumberFormatInfo get_NumberFormat(); // 0x1008723BC
	public virtual void set_NumberFormat(NumberFormatInfo value); // 0x1008724F8
	public virtual DateTimeFormatInfo get_DateTimeFormat(); // 0x1008725F4
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value); // 0x1008729F0
	public virtual string get_DisplayName(); // 0x100872AEC
	public bool get_IsReadOnly(); // 0x100872B28
	public virtual object GetFormat(Type formatType); // 0x100872B30
	private void Construct(); // 0x1008719FC
	private bool ConstructInternalLocaleFromName(string locale); // 0x1008711CC
	private bool ConstructInternalLocaleFromLcid(int lcid); // 0x100871040
	private static bool ConstructInternalLocaleFromSpecificName(CultureInfo ci, string name); // 0x1008715FC
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci); // 0x100871838
	private bool construct_internal_locale_from_lcid(int lcid); // 0x100872C34
	private bool construct_internal_locale_from_name(string name); // 0x100872C38
	private static bool construct_internal_locale_from_specific_name(CultureInfo ci, string name); // 0x100872C3C
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci); // 0x100872C48
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed); // 0x100872148
	private void construct_datetime_format(); // 0x10087291C
	private void construct_number_format(); // 0x1008724F4
	private void ConstructInvariant(bool read_only); // 0x100870DE8
	private TextInfo CreateTextInfo(bool readOnly); // 0x100871AF8
	internal static CultureInfo CreateCulture(string name, bool reference); // 0x100872FAC
}

// Namespace: System.Globalization
public sealed class CultureTypes : Enum // TypeDefIndex: 357
{
	// Fields
	public int value__; // 0x10
	public const CultureTypes NeutralCultures = 1; // 0x0
	public const CultureTypes SpecificCultures = 2; // 0x0
	public const CultureTypes InstalledWin32Cultures = 4; // 0x0
	public const CultureTypes AllCultures = 7; // 0x0
	public const CultureTypes UserCustomCulture = 8; // 0x0
	public const CultureTypes ReplacementCultures = 16; // 0x0
	public const CultureTypes WindowsOnlyCultures = 32; // 0x0
	public const CultureTypes FrameworkCultures = 64; // 0x0

}

// Namespace: System.Globalization
internal sealed class DateTimeFormatFlags : Enum // TypeDefIndex: 358
{
	// Fields
	public int value__; // 0x10
	public const DateTimeFormatFlags Unused = 0; // 0x0
	public const DateTimeFormatFlags But = 1; // 0x0
	public const DateTimeFormatFlags Serialized = 2; // 0x0
	public const DateTimeFormatFlags By = 3; // 0x0
	public const DateTimeFormatFlags Microsoft = 4; // 0x0

}

// Namespace: System.Globalization
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 359
{
	// Fields
	private const string _RoundtripPattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK"; // 0x0
	private static readonly string MSG_READONLY; // 0x0
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x8
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x18
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x20
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x28
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x30
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x38
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x40
	private bool m_isReadOnly; // 0x10
	private string amDesignator; // 0x18
	private string pmDesignator; // 0x20
	private string dateSeparator; // 0x28
	private string timeSeparator; // 0x30
	private string shortDatePattern; // 0x38
	private string longDatePattern; // 0x40
	private string shortTimePattern; // 0x48
	private string longTimePattern; // 0x50
	private string monthDayPattern; // 0x58
	private string yearMonthPattern; // 0x60
	private string fullDateTimePattern; // 0x68
	private string _RFC1123Pattern; // 0x70
	private string _SortableDateTimePattern; // 0x78
	private string _UniversalSortableDateTimePattern; // 0x80
	private int firstDayOfWeek; // 0x88
	private Calendar calendar; // 0x90
	private int calendarWeekRule; // 0x98
	private string[] abbreviatedDayNames; // 0xA0
	private string[] dayNames; // 0xA8
	private string[] monthNames; // 0xB0
	private string[] abbreviatedMonthNames; // 0xB8
	private string[] allShortDatePatterns; // 0xC0
	private string[] allLongDatePatterns; // 0xC8
	private string[] allShortTimePatterns; // 0xD0
	private string[] allLongTimePatterns; // 0xD8
	private string[] monthDayPatterns; // 0xE0
	private string[] yearMonthPatterns; // 0xE8
	private string[] shortDayNames; // 0xF0
	private int nDataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool m_isDefaultCalendar; // 0xFD
	private int CultureID; // 0x100
	private bool bUseCalendarInfo; // 0x104
	private string generalShortTimePattern; // 0x108
	private string generalLongTimePattern; // 0x110
	private string[] m_eraNames; // 0x118
	private string[] m_abbrevEraNames; // 0x120
	private string[] m_abbrevEnglishEraNames; // 0x128
	private string[] m_dateWords; // 0x130
	private int[] optionalCalendars; // 0x138
	private string[] m_superShortDayNames; // 0x140
	private string[] genitiveMonthNames; // 0x148
	private string[] m_genitiveAbbreviatedMonthNames; // 0x150
	private string[] leapYearMonthNames; // 0x158
	private DateTimeFormatFlags formatFlags; // 0x160
	private string m_name; // 0x168
	private string[] all_date_time_patterns; // 0x170

	// Methods
	internal void .ctor(bool read_only); // 0x100872764
	public void .ctor(); // 0x100873040
	private static void .cctor(); // 0x100873048
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x100873EF8
	public bool get_IsReadOnly(); // 0x100874168
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi); // 0x100874170
	public object Clone(); // 0x100871E9C
	public object GetFormat(Type formatType); // 0x100874244
	public string GetAbbreviatedMonthName(int month); // 0x100874274
	public string GetEraName(int era); // 0x100874318
	public string GetMonthName(int month); // 0x10087447C
	internal string[] get_RawAbbreviatedDayNames(); // 0x100874520
	internal string[] get_RawAbbreviatedMonthNames(); // 0x100874528
	internal string[] get_RawDayNames(); // 0x100874530
	internal string[] get_RawMonthNames(); // 0x100874538
	public string get_AMDesignator(); // 0x100874540
	public string get_PMDesignator(); // 0x100874548
	public string get_DateSeparator(); // 0x100874550
	public string get_TimeSeparator(); // 0x100874558
	public string get_LongDatePattern(); // 0x100874560
	public string get_ShortDatePattern(); // 0x100874568
	public string get_ShortTimePattern(); // 0x100874570
	public string get_LongTimePattern(); // 0x100874578
	public string get_MonthDayPattern(); // 0x100874580
	public string get_YearMonthPattern(); // 0x100874588
	public string get_FullDateTimePattern(); // 0x100874590
	public static DateTimeFormatInfo get_CurrentInfo(); // 0x1008740B8
	public static DateTimeFormatInfo get_InvariantInfo(); // 0x100872CCC
	public Calendar get_Calendar(); // 0x1008749C4
	public void set_Calendar(Calendar value); // 0x100872920
	public string get_RFC1123Pattern(); // 0x1008749CC
	internal string get_RoundtripPattern(); // 0x1008749D4
	public string get_SortableDateTimePattern(); // 0x100874A1C
	public string get_UniversalSortableDateTimePattern(); // 0x100874A24
	internal string[] GetAllDateTimePatternsInternal(); // 0x100874A2C
	private void FillAllDateTimePatterns(); // 0x100874A58
	internal string[] GetAllRawDateTimePatterns(char format); // 0x100874FD0
	public string GetDayName(DayOfWeek dayofweek); // 0x100875788
	public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x100875828
	private void FillInvariantPatterns(); // 0x100874628
	private string[] PopulateCombinedList(string[] dates, string[] times); // 0x1008755B0
}

// Namespace: System.Globalization
public sealed class DateTimeStyles : Enum // TypeDefIndex: 360
{
	// Fields
	public int value__; // 0x10
	public const DateTimeStyles None = 0; // 0x0
	public const DateTimeStyles AllowLeadingWhite = 1; // 0x0
	public const DateTimeStyles AllowTrailingWhite = 2; // 0x0
	public const DateTimeStyles AllowInnerWhite = 4; // 0x0
	public const DateTimeStyles AllowWhiteSpaces = 7; // 0x0
	public const DateTimeStyles NoCurrentDateDefault = 8; // 0x0
	public const DateTimeStyles AdjustToUniversal = 16; // 0x0
	public const DateTimeStyles AssumeLocal = 32; // 0x0
	public const DateTimeStyles AssumeUniversal = 64; // 0x0
	public const DateTimeStyles RoundtripKind = 128; // 0x0

}

// Namespace: System.Globalization
public class DaylightTime // TypeDefIndex: 361
{
	// Fields
	private DateTime m_start; // 0x10
	private DateTime m_end; // 0x20
	private TimeSpan m_delta; // 0x30

	// Methods
	public void .ctor(DateTime start, DateTime end, TimeSpan delta); // 0x1008758C8
	public DateTime get_Start(); // 0x10087591C
	public DateTime get_End(); // 0x100875928
	public TimeSpan get_Delta(); // 0x100875934
}

// Namespace: System.Globalization
public class GregorianCalendar : Calendar // TypeDefIndex: 362
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x28

	// Methods
	public void .ctor(GregorianCalendarTypes type); // 0x10087593C
	public void .ctor(); // 0x100873038
	public override int[] get_Eras(); // 0x100875AB4
	public virtual void set_CalendarType(GregorianCalendarTypes value); // 0x100875B38
	public override int GetDayOfMonth(DateTime time); // 0x100875B60
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x100875BB4
	public override int GetEra(DateTime time); // 0x100875C1C
	public override int GetMonth(DateTime time); // 0x100875C24
	public override int GetYear(DateTime time); // 0x100875C28
}

// Namespace: System.Globalization
public sealed class GregorianCalendarTypes : Enum // TypeDefIndex: 363
{
	// Fields
	public int value__; // 0x10
	public const GregorianCalendarTypes Localized = 1; // 0x0
	public const GregorianCalendarTypes USEnglish = 2; // 0x0
	public const GregorianCalendarTypes MiddleEastFrench = 9; // 0x0
	public const GregorianCalendarTypes Arabic = 10; // 0x0
	public const GregorianCalendarTypes TransliteratedEnglish = 11; // 0x0
	public const GregorianCalendarTypes TransliteratedFrench = 12; // 0x0

}

// Namespace: System.Globalization
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 364
{
	// Fields
	private bool isReadOnly; // 0x10
	private string decimalFormats; // 0x18
	private string currencyFormats; // 0x20
	private string percentFormats; // 0x28
	private string digitPattern; // 0x30
	private string zeroPattern; // 0x38
	private int currencyDecimalDigits; // 0x40
	private string currencyDecimalSeparator; // 0x48
	private string currencyGroupSeparator; // 0x50
	private int[] currencyGroupSizes; // 0x58
	private int currencyNegativePattern; // 0x60
	private int currencyPositivePattern; // 0x64
	private string currencySymbol; // 0x68
	private string nanSymbol; // 0x70
	private string negativeInfinitySymbol; // 0x78
	private string negativeSign; // 0x80
	private int numberDecimalDigits; // 0x88
	private string numberDecimalSeparator; // 0x90
	private string numberGroupSeparator; // 0x98
	private int[] numberGroupSizes; // 0xA0
	private int numberNegativePattern; // 0xA8
	private int percentDecimalDigits; // 0xAC
	private string percentDecimalSeparator; // 0xB0
	private string percentGroupSeparator; // 0xB8
	private int[] percentGroupSizes; // 0xC0
	private int percentNegativePattern; // 0xC8
	private int percentPositivePattern; // 0xCC
	private string percentSymbol; // 0xD0
	private string perMilleSymbol; // 0xD8
	private string positiveInfinitySymbol; // 0xE0
	private string positiveSign; // 0xE8
	private string ansiCurrencySymbol; // 0xF0
	private int m_dataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool validForParseAsNumber; // 0xFD
	private bool validForParseAsCurrency; // 0xFE
	private string[] nativeDigits; // 0x100
	private int digitSubstitution; // 0x108
	private static readonly string[] invariantNativeDigits; // 0x0

	// Methods
	internal void .ctor(int lcid, bool read_only); // 0x100875C7C
	internal void .ctor(bool read_only); // 0x1008724E4
	public void .ctor(); // 0x100875ED0
	private static void .cctor(); // 0x100875EDC
	public int get_CurrencyDecimalDigits(); // 0x100876224
	public string get_CurrencyDecimalSeparator(); // 0x10087622C
	public string get_CurrencyGroupSeparator(); // 0x100876234
	internal int[] get_RawCurrencyGroupSizes(); // 0x10087623C
	public int get_CurrencyNegativePattern(); // 0x100876244
	public int get_CurrencyPositivePattern(); // 0x10087624C
	public string get_CurrencySymbol(); // 0x1008680D0
	public static NumberFormatInfo get_CurrentInfo(); // 0x100876254
	public static NumberFormatInfo get_InvariantInfo(); // 0x100872C50
	public string get_NaNSymbol(); // 0x100867FC4
	public string get_NegativeInfinitySymbol(); // 0x1008680B8
	public string get_NegativeSign(); // 0x1008680E0
	public int get_NumberDecimalDigits(); // 0x1008763C8
	public void set_NumberDecimalDigits(int value); // 0x1008763D0
	public string get_NumberDecimalSeparator(); // 0x1008680C0
	public string get_NumberGroupSeparator(); // 0x1008680C8
	public void set_NumberGroupSeparator(string value); // 0x10087648C
	internal int[] get_RawNumberGroupSizes(); // 0x100876544
	public int get_NumberNegativePattern(); // 0x10087654C
	public void set_NumberNegativePattern(int value); // 0x10087630C
	public int get_PercentDecimalDigits(); // 0x100876554
	public string get_PercentDecimalSeparator(); // 0x10087655C
	public string get_PercentGroupSeparator(); // 0x100876564
	internal int[] get_RawPercentGroupSizes(); // 0x10087656C
	public int get_PercentNegativePattern(); // 0x100876574
	public int get_PercentPositivePattern(); // 0x10087657C
	public string get_PercentSymbol(); // 0x100876584
	public string get_PerMilleSymbol(); // 0x10087658C
	public string get_PositiveInfinitySymbol(); // 0x1008680B0
	public string get_PositiveSign(); // 0x1008680D8
	public object GetFormat(Type formatType); // 0x100876594
	public object Clone(); // 0x100871DD0
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x100867D58
}

// Namespace: System.Globalization
public sealed class NumberStyles : Enum // TypeDefIndex: 365
{
	// Fields
	public int value__; // 0x10
	public const NumberStyles None = 0; // 0x0
	public const NumberStyles AllowLeadingWhite = 1; // 0x0
	public const NumberStyles AllowTrailingWhite = 2; // 0x0
	public const NumberStyles AllowLeadingSign = 4; // 0x0
	public const NumberStyles AllowTrailingSign = 8; // 0x0
	public const NumberStyles AllowParentheses = 16; // 0x0
	public const NumberStyles AllowDecimalPoint = 32; // 0x0
	public const NumberStyles AllowThousands = 64; // 0x0
	public const NumberStyles AllowExponent = 128; // 0x0
	public const NumberStyles AllowCurrencySymbol = 256; // 0x0
	public const NumberStyles AllowHexSpecifier = 512; // 0x0
	public const NumberStyles Integer = 7; // 0x0
	public const NumberStyles HexNumber = 515; // 0x0
	public const NumberStyles Number = 111; // 0x0
	public const NumberStyles Float = 167; // 0x0
	public const NumberStyles Currency = 383; // 0x0
	public const NumberStyles Any = 511; // 0x0

}

// Namespace: System.Globalization
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 366
{
	// Fields
	private string m_listSeparator; // 0x10
	private bool m_isReadOnly; // 0x18
	private string customCultureName; // 0x20
	private int m_nDataItem; // 0x28
	private bool m_useUserOverride; // 0x2C
	private int m_win32LangID; // 0x30
	private readonly CultureInfo ci; // 0x38
	private readonly bool handleDotI; // 0x40
	private readonly Data data; // 0x44

	// Methods
	internal void .ctor(CultureInfo ci, int lcid, PTR data, bool read_only); // 0x100872DA4
	private void .ctor(TextInfo textInfo); // 0x100876CA8
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x100876DAC
	public int get_LCID(); // 0x100876DB0
	public virtual string get_ListSeparator(); // 0x100876DB8
	public string get_CultureName(); // 0x100876D4C
	public override bool Equals(object obj); // 0x100876E00
	public override int GetHashCode(); // 0x100876EAC
	public override string ToString(); // 0x100876EB4
	public virtual char ToLower(char c); // 0x100876F58
	public virtual char ToUpper(char c); // 0x100877130
	public virtual string ToLower(string str); // 0x100877388
	public virtual string ToUpper(string str); // 0x100877534
	public virtual object Clone(); // 0x1008776E0
}

// Namespace: 
private struct Data // TypeDefIndex: 367
{
	// Fields
	public int ansi; // 0x10
	public int ebcdic; // 0x14
	public int mac; // 0x18
	public int oem; // 0x1C
	public byte list_sep; // 0x20

}

// Namespace: System.Globalization
public sealed class UnicodeCategory : Enum // TypeDefIndex: 368
{
	// Fields
	public int value__; // 0x10
	public const UnicodeCategory UppercaseLetter = 0; // 0x0
	public const UnicodeCategory LowercaseLetter = 1; // 0x0
	public const UnicodeCategory TitlecaseLetter = 2; // 0x0
	public const UnicodeCategory ModifierLetter = 3; // 0x0
	public const UnicodeCategory OtherLetter = 4; // 0x0
	public const UnicodeCategory NonSpacingMark = 5; // 0x0
	public const UnicodeCategory SpacingCombiningMark = 6; // 0x0
	public const UnicodeCategory EnclosingMark = 7; // 0x0
	public const UnicodeCategory DecimalDigitNumber = 8; // 0x0
	public const UnicodeCategory LetterNumber = 9; // 0x0
	public const UnicodeCategory OtherNumber = 10; // 0x0
	public const UnicodeCategory SpaceSeparator = 11; // 0x0
	public const UnicodeCategory LineSeparator = 12; // 0x0
	public const UnicodeCategory ParagraphSeparator = 13; // 0x0
	public const UnicodeCategory Control = 14; // 0x0
	public const UnicodeCategory Format = 15; // 0x0
	public const UnicodeCategory Surrogate = 16; // 0x0
	public const UnicodeCategory PrivateUse = 17; // 0x0
	public const UnicodeCategory ConnectorPunctuation = 18; // 0x0
	public const UnicodeCategory DashPunctuation = 19; // 0x0
	public const UnicodeCategory OpenPunctuation = 20; // 0x0
	public const UnicodeCategory ClosePunctuation = 21; // 0x0
	public const UnicodeCategory InitialQuotePunctuation = 22; // 0x0
	public const UnicodeCategory FinalQuotePunctuation = 23; // 0x0
	public const UnicodeCategory OtherPunctuation = 24; // 0x0
	public const UnicodeCategory MathSymbol = 25; // 0x0
	public const UnicodeCategory CurrencySymbol = 26; // 0x0
	public const UnicodeCategory ModifierSymbol = 27; // 0x0
	public const UnicodeCategory OtherSymbol = 28; // 0x0
	public const UnicodeCategory OtherNotAssigned = 29; // 0x0

}

// Namespace: System.IO
public class BinaryReader : IDisposable // TypeDefIndex: 369
{
	// Fields
	private Stream m_stream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] m_buffer; // 0x20
	private Decoder decoder; // 0x28
	private char[] charBuffer; // 0x30
	private bool m_disposed; // 0x38

	// Methods
	public void .ctor(Stream input); // 0x10087EAA4
	public void .ctor(Stream input, Encoding encoding); // 0x10087EB28
	private void System.IDisposable.Dispose(); // 0x10087EC94
	public virtual Stream get_BaseStream(); // 0x10087ECE4
	public virtual void Close(); // 0x10087ECEC
	protected virtual void Dispose(bool disposing); // 0x10087ED40
	protected virtual void FillBuffer(int numBytes); // 0x10087EDA8
	public virtual int Read(); // 0x10087F024
	public virtual int Read(byte[] buffer, int index, int count); // 0x10087F0F8
	public virtual int Read(char[] buffer, int index, int count); // 0x10087F2D8
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read); // 0x10087F4A0
	protected int Read7BitEncodedInt(); // 0x10087F600
	public virtual bool ReadBoolean(); // 0x10087F6DC
	public virtual byte ReadByte(); // 0x10087F72C
	public virtual byte[] ReadBytes(int count); // 0x10087F83C
	public virtual char ReadChar(); // 0x10087FA14
	public virtual Decimal ReadDecimal(); // 0x10087FAAC
	public virtual double ReadDouble(); // 0x10087FCE0
	public virtual short ReadInt16(); // 0x10087FD3C
	public virtual int ReadInt32(); // 0x10087FDD4
	public virtual long ReadInt64(); // 0x10087FEC4
	public virtual sbyte ReadSByte(); // 0x100880064
	public virtual string ReadString(); // 0x1008800B0
	public virtual float ReadSingle(); // 0x1008802E8
	public virtual ushort ReadUInt16(); // 0x100880344
	public virtual uint ReadUInt32(); // 0x1008803DC
	public virtual ulong ReadUInt64(); // 0x1008804CC
	private void CheckBuffer(int length); // 0x10087EF10
}

// Namespace: System.IO
public class BinaryWriter : IDisposable // TypeDefIndex: 370
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] buffer; // 0x20
	private bool disposed; // 0x28
	private byte[] stringBuffer; // 0x30
	private int maxCharsPerRound; // 0x38

	// Methods
	protected void .ctor(); // 0x10088066C
	public void .ctor(Stream output); // 0x100880864
	public void .ctor(Stream output, Encoding encoding); // 0x100880710
	private static void .cctor(); // 0x1008808E8
	private void System.IDisposable.Dispose(); // 0x100880948
	protected virtual void Dispose(bool disposing); // 0x100880998
	public virtual void Flush(); // 0x1008809F8
	public virtual void Write(bool value); // 0x100880A4C
	public virtual void Write(byte value); // 0x100880B44
	public virtual void Write(byte[] buffer); // 0x100880C14
	public virtual void Write(byte[] buffer, int index, int count); // 0x100880D24
	public virtual void Write(char ch); // 0x100880E40
	public virtual void Write(char[] chars); // 0x100880FA0
	public virtual void Write(Decimal value); // 0x1008810FC
	public virtual void Write(double value); // 0x1008813BC
	public virtual void Write(short value); // 0x1008814B0
	public virtual void Write(int value); // 0x1008815CC
	public virtual void Write(long value); // 0x100881730
	public virtual void Write(sbyte value); // 0x100881858
	public virtual void Write(float value); // 0x100881950
	public virtual void Write(string value); // 0x100881A44
	public virtual void Write(ushort value); // 0x100881CC4
	public virtual void Write(uint value); // 0x100881DE0
	public virtual void Write(ulong value); // 0x100881F44
	protected void Write7BitEncodedInt(int value); // 0x100881C54
}

// Namespace: System.IO
public static class Directory // TypeDefIndex: 371
{
	// Methods
	public static DirectoryInfo CreateDirectory(string path); // 0x100883650
	private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x10088387C
	public static bool Exists(string path); // 0x10088433C
	public static string GetCurrentDirectory(); // 0x10086C47C
	public static string[] GetFiles(string path, string searchPattern); // 0x1008845A8
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs); // 0x1008845B4
}

// Namespace: System.IO
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 372
{
	// Fields
	private string current; // 0x60
	private string parent; // 0x68

	// Methods
	public void .ctor(string path); // 0x100884EC4
	internal void .ctor(string path, bool simpleOriginalPath); // 0x100883A04
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x1008853D4
	private void Initialize(); // 0x100885124
	public override bool get_Exists(); // 0x100883B54
	public DirectoryInfo get_Parent(); // 0x100883AD0
	public void Create(); // 0x100883BF0
	public override string ToString(); // 0x1008855AC
}

// Namespace: System.IO
public class DirectoryNotFoundException : IOException // TypeDefIndex: 373
{
	// Methods
	public void .ctor(); // 0x1008855B4
	public void .ctor(string message); // 0x100884EA4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100885608
}

// Namespace: System.IO
public class DriveNotFoundException : IOException // TypeDefIndex: 374
{
	// Methods
	public void .ctor(); // 0x100885618
	public void .ctor(string message); // 0x10088567C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008856AC
}

// Namespace: System.IO
public class EndOfStreamException : IOException // TypeDefIndex: 375
{
	// Methods
	public void .ctor(); // 0x10087EFC0
	public void .ctor(string message); // 0x1008856B4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008856BC
}

// Namespace: System.IO
public static class File // TypeDefIndex: 376
{
	// Methods
	public static void Copy(string sourceFileName, string destFileName); // 0x1008856C4
	public static void Copy(string sourceFileName, string destFileName, bool overwrite); // 0x1008856CC
	public static FileStream Create(string path); // 0x100885FE8
	public static FileStream Create(string path, int bufferSize); // 0x100885FF0
	public static void Delete(string path); // 0x1008860A0
	public static bool Exists(string path); // 0x10086D30C
	public static FileAttributes GetAttributes(string path); // 0x100885E48
	public static FileStream Open(string path, FileMode mode); // 0x1008863CC
	public static FileStream OpenRead(string path); // 0x10088648C
	public static StreamReader OpenText(string path); // 0x10088650C
	public static FileStream OpenWrite(string path); // 0x10088656C
	public static byte[] ReadAllBytes(string path); // 0x1008865EC
	public static string ReadAllText(string path); // 0x10088685C
	public static string ReadAllText(string path, Encoding encoding); // 0x1008868D0
	public static void WriteAllBytes(string path, byte[] bytes); // 0x100886A7C
	public static void WriteAllText(string path, string contents); // 0x100886C0C
	public static void WriteAllText(string path, string contents, Encoding encoding); // 0x100886C90
}

// Namespace: System.IO
public sealed class FileAccess : Enum // TypeDefIndex: 377
{
	// Fields
	public int value__; // 0x10
	public const FileAccess Read = 1; // 0x0
	public const FileAccess Write = 2; // 0x0
	public const FileAccess ReadWrite = 3; // 0x0

}

// Namespace: System.IO
public sealed class FileAttributes : Enum // TypeDefIndex: 378
{
	// Fields
	public int value__; // 0x10
	public const FileAttributes Archive = 32; // 0x0
	public const FileAttributes Compressed = 2048; // 0x0
	public const FileAttributes Device = 64; // 0x0
	public const FileAttributes Directory = 16; // 0x0
	public const FileAttributes Encrypted = 16384; // 0x0
	public const FileAttributes Hidden = 2; // 0x0
	public const FileAttributes Normal = 128; // 0x0
	public const FileAttributes NotContentIndexed = 8192; // 0x0
	public const FileAttributes Offline = 4096; // 0x0
	public const FileAttributes ReadOnly = 1; // 0x0
	public const FileAttributes ReparsePoint = 1024; // 0x0
	public const FileAttributes SparseFile = 512; // 0x0
	public const FileAttributes System = 4; // 0x0
	public const FileAttributes Temporary = 256; // 0x0

}

// Namespace: System.IO
public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 379
{
	// Fields
	private bool exists; // 0x59

	// Methods
	public void .ctor(string fileName); // 0x100886E30
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x100886EFC
	internal override void InternalRefresh(); // 0x100886F00
	public override bool get_Exists(); // 0x100886F28
	public string get_DirectoryName(); // 0x100886FD0
	public DirectoryInfo get_Directory(); // 0x100887038
	public override string ToString(); // 0x1008870A8
}

// Namespace: System.IO
public sealed class FileMode : Enum // TypeDefIndex: 380
{
	// Fields
	public int value__; // 0x10
	public const FileMode CreateNew = 1; // 0x0
	public const FileMode Create = 2; // 0x0
	public const FileMode Open = 3; // 0x0
	public const FileMode OpenOrCreate = 4; // 0x0
	public const FileMode Truncate = 5; // 0x0
	public const FileMode Append = 6; // 0x0

}

// Namespace: System.IO
public class FileNotFoundException : IOException // TypeDefIndex: 381
{
	// Fields
	private string fileName; // 0x60
	private string fusionLog; // 0x68

	// Methods
	public void .ctor(); // 0x1008870B0
	public void .ctor(string message); // 0x100887124
	public void .ctor(string message, string fileName); // 0x100885E10
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100887154
	public override string get_Message(); // 0x100887208
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100887340
	public override string ToString(); // 0x1008873D4
}

// Namespace: System.IO
public sealed class FileOptions : Enum // TypeDefIndex: 382
{
	// Fields
	public int value__; // 0x10
	public const FileOptions None = 0; // 0x0
	public const FileOptions Encrypted = 16384; // 0x0
	public const FileOptions DeleteOnClose = 67108864; // 0x0
	public const FileOptions SequentialScan = 134217728; // 0x0
	public const FileOptions RandomAccess = 268435456; // 0x0
	public const FileOptions Asynchronous = 1073741824; // 0x0
	public const FileOptions WriteThrough = -2147483648; // 0x0

}

// Namespace: System.IO
public sealed class FileShare : Enum // TypeDefIndex: 383
{
	// Fields
	public int value__; // 0x10
	public const FileShare None = 0; // 0x0
	public const FileShare Read = 1; // 0x0
	public const FileShare Write = 2; // 0x0
	public const FileShare ReadWrite = 3; // 0x0
	public const FileShare Delete = 4; // 0x0
	public const FileShare Inheritable = 16; // 0x0

}

// Namespace: System.IO
public class FileStream : Stream // TypeDefIndex: 384
{
	// Fields
	private FileAccess access; // 0x18
	private bool owner; // 0x1C
	private bool async; // 0x1D
	private bool canseek; // 0x1E
	private long append_startpos; // 0x20
	private bool anonymous; // 0x28
	private byte[] buf; // 0x30
	private int buf_size; // 0x38
	private int buf_length; // 0x3C
	private int buf_offset; // 0x40
	private bool buf_dirty; // 0x44
	private long buf_start; // 0x48
	private string name; // 0x50
	private IntPtr handle; // 0x58

	// Methods
	internal void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool noBuffering); // 0x1008875A0
	public void .ctor(string path, FileMode mode, FileAccess access); // 0x10088794C
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share); // 0x100886464
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x10088607C
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous); // 0x100887984
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x1008879B0
	public override bool get_CanRead(); // 0x100888324
	public override bool get_CanWrite(); // 0x100888338
	public override bool get_CanSeek(); // 0x10088834C
	public override long get_Length(); // 0x100888354
	public override long get_Position(); // 0x100888508
	public override void set_Position(long value); // 0x10088861C
	public override int ReadByte(); // 0x100888794
	public override void WriteByte(byte value); // 0x100888A98
	public override int Read(out byte[] array, int offset, int count); // 0x100888C58
	private int ReadInternal(byte[] dest, int offset, int count); // 0x100888F1C
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x10088902C
	public override int EndRead(IAsyncResult asyncResult); // 0x100889574
	public override void Write(byte[] array, int offset, int count); // 0x100889828
	private void WriteInternal(byte[] src, int offset, int count); // 0x100889AC0
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x100889CBC
	public override void EndWrite(IAsyncResult asyncResult); // 0x10088A54C
	public override long Seek(long offset, SeekOrigin origin); // 0x10088A7EC
	public override void SetLength(long value); // 0x10088AA9C
	public override void Flush(); // 0x10088AD34
	protected override void Finalize(); // 0x10088ADEC
	protected override void Dispose(bool disposing); // 0x10088AE8C
	private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x100888FC4
	private int WriteSegment(byte[] src, int src_offset, int count); // 0x100889C4C
	private void FlushBuffer(Stream st); // 0x10088A2B0
	private void FlushBuffer(); // 0x100888C50
	private void FlushBufferIfDirty(); // 0x1008884E8
	private void RefillBuffer(); // 0x100888A58
	private int ReadData(IntPtr handle, byte[] buf, int offset, int count); // 0x100888938
	private void InitBuffer(int size, bool noBuffering); // 0x100887838
	private string GetSecureFileName(string filename); // 0x10088826C
	private string GetSecureFileName(string filename, bool full); // 0x1008881A4
}

// Namespace: 
private sealed class ReadDelegate : MulticastDelegate // TypeDefIndex: 385
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10088948C
	public virtual int Invoke(byte[] buffer, int offset, int count); // 0x10088B0E4
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object); // 0x10088949C
	public virtual int EndInvoke(IAsyncResult result); // 0x1008897FC
}

// Namespace: 
private sealed class WriteDelegate : MulticastDelegate // TypeDefIndex: 386
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10088A464
	public virtual void Invoke(byte[] buffer, int offset, int count); // 0x10088B20C
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object); // 0x10088A474
	public virtual void EndInvoke(IAsyncResult result); // 0x10088A7E0
}

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 387
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x18
	private ManualResetEvent wh; // 0x20
	private AsyncCallback cb; // 0x28
	public int Count; // 0x30
	public int OriginalCount; // 0x34
	public int BytesRead; // 0x38
	private AsyncCallback realcb; // 0x40

	// Methods
	public void .ctor(AsyncCallback cb, object state); // 0x10088A1E8
	private static void CBWrapper(IAsyncResult ares); // 0x10088B334
	public object get_AsyncState(); // 0x10088B3A8
	public WaitHandle get_AsyncWaitHandle(); // 0x10088B3B0
	public bool get_IsCompleted(); // 0x10088B3B8
}

// Namespace: System.IO
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 388
{
	// Fields
	protected string FullPath; // 0x18
	protected string OriginalPath; // 0x20
	internal MonoIOStat stat; // 0x28
	internal bool valid; // 0x58

	// Methods
	protected void .ctor(); // 0x100884ECC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008853F8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10088B3C0
	public abstract bool get_Exists(); // 0
	public virtual string get_FullName(); // 0x10088B4A0
	internal void Refresh(bool force); // 0x1008854BC
	internal virtual void InternalRefresh(); // 0x10088B4B8
	internal void CheckPath(string path); // 0x100884EF8
}

// Namespace: System.IO
public class IOException : SystemException // TypeDefIndex: 389
{
	// Methods
	public void .ctor(); // 0x10088B090
	public void .ctor(string message); // 0x10087EF08
	public void .ctor(string message, Exception innerException); // 0x10088B4BC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100885610
	public void .ctor(string message, int hresult); // 0x10088B4C4
}

// Namespace: System.IO
public class MemoryStream : Stream // TypeDefIndex: 390
{
	// Fields
	private bool canWrite; // 0x18
	private bool allowGetBuffer; // 0x19
	private int capacity; // 0x1C
	private int length; // 0x20
	private byte[] internalBuffer; // 0x28
	private int initialIndex; // 0x30
	private bool expandable; // 0x34
	private bool streamClosed; // 0x35
	private int position; // 0x38
	private int dirty_bytes; // 0x3C

	// Methods
	public void .ctor(); // 0x10088A2A8
	public void .ctor(int capacity); // 0x10088B4F0
	public void .ctor(byte[] buffer); // 0x10088B5D4
	private void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible); // 0x10088B698
	private void CheckIfClosedThrowDisposed(); // 0x10088B7DC
	public override bool get_CanRead(); // 0x10088B854
	public override bool get_CanSeek(); // 0x10088B864
	public override bool get_CanWrite(); // 0x10088B874
	public virtual void set_Capacity(int value); // 0x10088B894
	public override long get_Length(); // 0x10088BB68
	public override long get_Position(); // 0x10088BB94
	public override void set_Position(long value); // 0x10088BBC0
	protected override void Dispose(bool disposing); // 0x10088BC9C
	public override void Flush(); // 0x10088BCA8
	public virtual byte[] GetBuffer(); // 0x10088BCAC
	public override int Read(out byte[] buffer, int offset, int count); // 0x10088BD1C
	public override int ReadByte(); // 0x10088BE88
	public override long Seek(long offset, SeekOrigin loc); // 0x10088BEF8
	private int CalculateNewCapacity(int minimum); // 0x10088C0D8
	private void Expand(int newSize); // 0x10088C0F8
	public override void SetLength(long value); // 0x10088C1AC
	public virtual byte[] ToArray(); // 0x10088C310
	public override void Write(byte[] buffer, int offset, int count); // 0x10088C3B0
	public override void WriteByte(byte value); // 0x10088C554
}

// Namespace: System.IO
internal sealed class MonoIO // TypeDefIndex: 391
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x0
	public static readonly IntPtr InvalidHandle; // 0x8

	// Methods
	private static void .cctor(); // 0x10088C638
	public static Exception GetException(MonoIOError error); // 0x100884490
	public static Exception GetException(string path, MonoIOError error); // 0x100883C04
	public static bool CreateDirectory(string path, out MonoIOError error); // 0x100883BF8
	public static string[] GetFileSystemEntries(string path, string path_with_pattern, int attrs, int mask, out MonoIOError error); // 0x100884EAC
	public static string GetCurrentDirectory(out MonoIOError error); // 0x100884488
	public static bool CopyFile(string path, string dest, bool overwrite, out MonoIOError error); // 0x100885FD4
	public static bool DeleteFile(string path, out MonoIOError error); // 0x1008863B4
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x1008863C0
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x10088782C
	public static bool Exists(string path, out MonoIOError error); // 0x100885D84
	public static bool ExistsFile(string path, out MonoIOError error); // 0x100884E08
	public static bool ExistsDirectory(string path, out MonoIOError error); // 0x1008843C0
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x10088B4A8
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x100888308
	public static bool Close(IntPtr handle, out MonoIOError error); // 0x10088B06C
	public static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x10088B078
	public static int Write(IntPtr handle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x100889C34
	public static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x100887938
	public static long GetLength(IntPtr handle, out MonoIOError error); // 0x1008884FC
	public static bool SetLength(IntPtr handle, long length, out MonoIOError error); // 0x10088AD24
	public static IntPtr get_ConsoleOutput(); // 0x10088C69C
	public static IntPtr get_ConsoleInput(); // 0x10088C6A0
	public static IntPtr get_ConsoleError(); // 0x10088C6A4
	public static char get_VolumeSeparatorChar(); // 0x10088C6A8
	public static char get_DirectorySeparatorChar(); // 0x10088C6AC
	public static char get_AltDirectorySeparatorChar(); // 0x10088C6B0
	public static char get_PathSeparator(); // 0x10088C6B4
}

// Namespace: System.IO
internal sealed class MonoIOError : Enum // TypeDefIndex: 392
{
	// Fields
	public int value__; // 0x10
	public const MonoIOError ERROR_SUCCESS = 0; // 0x0
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2; // 0x0
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3; // 0x0
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4; // 0x0
	public const MonoIOError ERROR_ACCESS_DENIED = 5; // 0x0
	public const MonoIOError ERROR_INVALID_HANDLE = 6; // 0x0
	public const MonoIOError ERROR_INVALID_DRIVE = 15; // 0x0
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17; // 0x0
	public const MonoIOError ERROR_NO_MORE_FILES = 18; // 0x0
	public const MonoIOError ERROR_WRITE_FAULT = 29; // 0x0
	public const MonoIOError ERROR_READ_FAULT = 30; // 0x0
	public const MonoIOError ERROR_GEN_FAILURE = 31; // 0x0
	public const MonoIOError ERROR_SHARING_VIOLATION = 32; // 0x0
	public const MonoIOError ERROR_LOCK_VIOLATION = 33; // 0x0
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39; // 0x0
	public const MonoIOError ERROR_FILE_EXISTS = 80; // 0x0
	public const MonoIOError ERROR_CANNOT_MAKE = 82; // 0x0
	public const MonoIOError ERROR_INVALID_PARAMETER = 87; // 0x0
	public const MonoIOError ERROR_BROKEN_PIPE = 109; // 0x0
	public const MonoIOError ERROR_INVALID_NAME = 123; // 0x0
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145; // 0x0
	public const MonoIOError ERROR_ALREADY_EXISTS = 183; // 0x0
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206; // 0x0
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000; // 0x0

}

// Namespace: System.IO
internal sealed class MonoFileType : Enum // TypeDefIndex: 393
{
	// Fields
	public int value__; // 0x10
	public const MonoFileType Unknown = 0; // 0x0
	public const MonoFileType Disk = 1; // 0x0
	public const MonoFileType Char = 2; // 0x0
	public const MonoFileType Pipe = 3; // 0x0
	public const MonoFileType Remote = 32768; // 0x0

}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 394
{
	// Fields
	public string Name; // 0x10
	public FileAttributes Attributes; // 0x18
	public long Length; // 0x20
	public long CreationTime; // 0x28
	public long LastAccessTime; // 0x30
	public long LastWriteTime; // 0x38

}

// Namespace: System.IO
public static class Path // TypeDefIndex: 395
{
	// Fields
	public static readonly char[] InvalidPathChars; // 0x0
	public static readonly char AltDirectorySeparatorChar; // 0x8
	public static readonly char DirectorySeparatorChar; // 0xA
	public static readonly char PathSeparator; // 0xC
	internal static readonly string DirectorySeparatorStr; // 0x10
	public static readonly char VolumeSeparatorChar; // 0x18
	internal static readonly char[] PathSeparatorChars; // 0x20
	private static readonly bool dirEqualsVolume; // 0x28

	// Methods
	private static void .cctor(); // 0x10088C844
	public static string Combine(string path1, string path2); // 0x10086D030
	internal static string CleanPath(string s); // 0x10088CC34
	public static string GetDirectoryName(string path); // 0x100884AA8
	public static string GetExtension(string path); // 0x10088D550
	public static string GetFileName(string path); // 0x100885010
	public static string GetFullPath(string path); // 0x100865144
	internal static string WindowsDriveAdjustment(string path); // 0x10088DD3C
	internal static string InsecureGetFullPath(string path); // 0x10088D738
	private static bool IsDsc(char c); // 0x10088E068
	public static string GetPathRoot(string path); // 0x10088D080
	public static bool IsPathRooted(string path); // 0x10088CA78
	public static char[] GetInvalidFileNameChars(); // 0x10088EA1C
	public static char[] GetInvalidPathChars(); // 0x10088C9D4
	private static int findExtension(string path); // 0x10088D690
	private static string GetServerAndShare(string path); // 0x10088EAE4
	private static bool SameRoot(string root, string path); // 0x10088EC6C
	private static string CanonicalizePath(string path); // 0x10088E10C
	internal static bool IsPathSubsetOf(string subset, string path); // 0x10088EFA4
}

// Namespace: System.IO
public class PathTooLongException : IOException // TypeDefIndex: 396
{
	// Methods
	public void .ctor(); // 0x10088F1A0
	public void .ctor(string message); // 0x10088C694
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10088F204
}

// Namespace: System.IO
internal class SearchPattern // TypeDefIndex: 397
{
	// Fields
	internal static readonly char[] WildcardChars; // 0x0
	internal static readonly char[] InvalidChars; // 0x8

	// Methods
	private static void .cctor(); // 0x10088F20C
}

// Namespace: System.IO
public sealed class SeekOrigin : Enum // TypeDefIndex: 398
{
	// Fields
	public int value__; // 0x10
	public const SeekOrigin Begin = 0; // 0x0
	public const SeekOrigin Current = 1; // 0x0
	public const SeekOrigin End = 2; // 0x0

}

// Namespace: System.IO
public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 399
{
	// Fields
	public static readonly Stream Null; // 0x0

	// Methods
	protected void .ctor(); // 0x100887824
	private static void .cctor(); // 0x10088F354
	public abstract bool get_CanRead(); // 0
	public abstract bool get_CanSeek(); // 0
	public abstract bool get_CanWrite(); // 0
	public abstract long get_Length(); // 0
	public abstract long get_Position(); // 0
	public abstract void set_Position(long value); // 0
	public void Dispose(); // 0x10088F3BC
	protected virtual void Dispose(bool disposing); // 0x10088F408
	public virtual void Close(); // 0x10088F40C
	public virtual int get_ReadTimeout(); // 0x10088F45C
	public virtual int get_WriteTimeout(); // 0x10088F4B8
	public abstract void Flush(); // 0
	public abstract int Read(out byte[] buffer, int offset, int count); // 0
	public virtual int ReadByte(); // 0x10088F514
	public abstract long Seek(long offset, SeekOrigin origin); // 0
	public abstract void SetLength(long value); // 0
	public abstract void Write(byte[] buffer, int offset, int count); // 0
	public virtual void WriteByte(byte value); // 0x10088F5DC
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x1008892B0
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x10088A00C
	public virtual int EndRead(IAsyncResult asyncResult); // 0x1008896C0
	public virtual void EndWrite(IAsyncResult asyncResult); // 0x10088A69C
}

// Namespace: System.IO
internal class NullStream : Stream // TypeDefIndex: 400
{
	// Methods
	public void .ctor(); // 0x10088C788
	public override bool get_CanRead(); // 0x10088C7F0
	public override bool get_CanSeek(); // 0x10088C7F8
	public override bool get_CanWrite(); // 0x10088C800
	public override long get_Length(); // 0x10088C808
	public override long get_Position(); // 0x10088C810
	public override void set_Position(long value); // 0x10088C818
	public override void Flush(); // 0x10088C81C
	public override int Read(byte[] buffer, int offset, int count); // 0x10088C820
	public override int ReadByte(); // 0x10088C828
	public override long Seek(long offset, SeekOrigin origin); // 0x10088C830
	public override void SetLength(long value); // 0x10088C838
	public override void Write(byte[] buffer, int offset, int count); // 0x10088C83C
	public override void WriteByte(byte value); // 0x10088C840
}

// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult // TypeDefIndex: 401
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x18
	private bool done; // 0x19
	private Exception exc; // 0x20
	private int nbytes; // 0x28
	private ManualResetEvent wh; // 0x30

	// Methods
	public void .ctor(object state); // 0x10088F6A4
	public void SetComplete(Exception e); // 0x10088F6E0
	public void SetComplete(Exception e, int nbytes); // 0x10088F6D8
	public object get_AsyncState(); // 0x10088F79C
	public WaitHandle get_AsyncWaitHandle(); // 0x10088F7A4
	public bool get_IsCompleted(); // 0x10088F884
	public Exception get_Exception(); // 0x10088F794
	public int get_NBytes(); // 0x10088F77C
	public bool get_Done(); // 0x10088F784
	public void set_Done(bool value); // 0x10088F78C
}

// Namespace: System.IO
public class StreamReader : TextReader // TypeDefIndex: 402
{
	// Fields
	private byte[] input_buffer; // 0x18
	private char[] decoded_buffer; // 0x20
	private int decoded_count; // 0x28
	private int pos; // 0x2C
	private int buffer_size; // 0x30
	private int do_checks; // 0x34
	private Encoding encoding; // 0x38
	private Decoder decoder; // 0x40
	private Stream base_stream; // 0x48
	private bool mayBlock; // 0x50
	private StringBuilder line_builder; // 0x58
	public static readonly StreamReader Null; // 0x0
	private bool foundCR; // 0x60

	// Methods
	internal void .ctor(); // 0x10088F88C
	public void .ctor(Stream stream, Encoding encoding); // 0x100882134
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x10088F8F4
	public void .ctor(string path); // 0x10086D3EC
	public void .ctor(string path, Encoding encoding); // 0x100886A70
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x10088FBFC
	private static void .cctor(); // 0x10088FE18
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x10088F994
	public override void Close(); // 0x10088FEE4
	protected override void Dispose(bool disposing); // 0x10088FF34
	private int DoChecks(int count); // 0x10088FFAC
	private int ReadBuffer(); // 0x100890448
	public override int Peek(); // 0x1008821FC
	internal bool DataAvailable(); // 0x100890668
	public override int Read(); // 0x100890678
	public override int Read(out char[] buffer, int index, int count); // 0x100890758
	private int FindNextEOL(); // 0x100890960
	public override string ReadLine(); // 0x100890A28
	public override string ReadToEnd(); // 0x10088272C
}

// Namespace: 
private class NullStreamReader : StreamReader // TypeDefIndex: 403
{
	// Methods
	public void .ctor(); // 0x10088FE80
	public override int Peek(); // 0x100890C9C
	public override int Read(); // 0x100890CA4
	public override int Read(out char[] buffer, int index, int count); // 0x100890CAC
	public override string ReadLine(); // 0x100890CB4
	public override string ReadToEnd(); // 0x100890CBC
}

// Namespace: System.IO
public class StreamWriter : TextWriter // TypeDefIndex: 404
{
	// Fields
	private Encoding internalEncoding; // 0x28
	private Stream internalStream; // 0x30
	private bool iflush; // 0x38
	private byte[] byte_buf; // 0x40
	private int byte_pos; // 0x48
	private char[] decode_buf; // 0x50
	private int decode_pos; // 0x58
	private bool DisposedAlready; // 0x5C
	private bool preamble_done; // 0x5D
	public static readonly StreamWriter Null; // 0x0

	// Methods
	public void .ctor(Stream stream); // 0x100890D24
	public void .ctor(Stream stream, Encoding encoding); // 0x100882938
	public void .ctor(Stream stream, Encoding encoding, int bufferSize); // 0x100890DAC
	public void .ctor(string path); // 0x100891094
	public void .ctor(string path, bool append); // 0x100891308
	public void .ctor(string path, bool append, Encoding encoding); // 0x100886E28
	public void .ctor(string path, bool append, Encoding encoding, int bufferSize); // 0x100891120
	private static void .cctor(); // 0x100891398
	internal void Initialize(Encoding encoding, int bufferSize); // 0x100890F30
	public virtual void set_AutoFlush(bool value); // 0x100891468
	public virtual Stream get_BaseStream(); // 0x1008914CC
	public override Encoding get_Encoding(); // 0x1008914D4
	protected override void Dispose(bool disposing); // 0x1008914DC
	public override void Flush(); // 0x1008916B0
	private void FlushBytes(); // 0x100891844
	private void Decode(); // 0x100891790
	public override void Write(char[] buffer, int index, int count); // 0x100882CAC
	private void LowLevelWrite(char[] buffer, int index, int count); // 0x10089194C
	private void LowLevelWrite(string s); // 0x100891A00
	public override void Write(char value); // 0x10088328C
	public override void Write(char[] buffer); // 0x100891B34
	public override void Write(string value); // 0x1008831AC
	public override void Close(); // 0x100891C1C
	protected override void Finalize(); // 0x100891C6C
}

// Namespace: System.IO
public class StringReader : TextReader // TypeDefIndex: 405
{
	// Fields
	private string source; // 0x18
	private int nextChar; // 0x20
	private int sourceLength; // 0x24

	// Methods
	public void .ctor(string s); // 0x100891D0C
	public override void Close(); // 0x100891DD0
	protected override void Dispose(bool disposing); // 0x100891E20
	public override int Peek(); // 0x100891E2C
	public override int Read(); // 0x100891F0C
	public override int Read(out char[] buffer, int index, int count); // 0x100891F5C
	public override string ReadLine(); // 0x100892098
	public override string ReadToEnd(); // 0x1008921C0
	private void CheckObjectDisposedException(); // 0x100891E74
}

// Namespace: System.IO
public class StringWriter : TextWriter // TypeDefIndex: 406
{
	// Fields
	private StringBuilder internalString; // 0x28
	private bool disposed; // 0x30

	// Methods
	public void .ctor(); // 0x100892204
	public void .ctor(StringBuilder sb); // 0x10089226C
	public void .ctor(StringBuilder sb, IFormatProvider formatProvider); // 0x100892274
	public override Encoding get_Encoding(); // 0x100892328
	public override void Close(); // 0x10089238C
	protected override void Dispose(bool disposing); // 0x1008923E0
	public virtual StringBuilder GetStringBuilder(); // 0x10089240C
	public override string ToString(); // 0x100892414
	public override void Write(char value); // 0x100892430
	public override void Write(string value); // 0x1008924E8
	public override void Write(char[] buffer, int index, int count); // 0x1008925A0
}

// Namespace: System.IO
public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 407
{
	// Fields
	public static readonly TextReader Null; // 0x0

	// Methods
	protected void .ctor(); // 0x100893D78
	private static void .cctor(); // 0x100893D80
	public virtual void Close(); // 0x100893E4C
	public void Dispose(); // 0x100893E9C
	protected virtual void Dispose(bool disposing); // 0x100893EEC
	public virtual int Peek(); // 0x100893F08
	public virtual int Read(); // 0x100893F10
	public virtual int Read(out char[] buffer, int index, int count); // 0x100893F18
	public virtual string ReadLine(); // 0x100893FD8
	public virtual string ReadToEnd(); // 0x100894040
	public static TextReader Synchronized(TextReader reader); // 0x1008940A8
}

// Namespace: 
private class NullTextReader : TextReader // TypeDefIndex: 408
{
	// Methods
	public void .ctor(); // 0x100893DE8
	public override string ReadLine(); // 0x10089416C
}

// Namespace: System.IO
internal class SynchronizedReader : TextReader // TypeDefIndex: 409
{
	// Fields
	private TextReader reader; // 0x18

	// Methods
	public void .ctor(TextReader reader); // 0x10089274C
	public override void Close(); // 0x1008927C8
	public override int Peek(); // 0x100892888
	public override string ReadLine(); // 0x100892944
	public override string ReadToEnd(); // 0x100892A00
	public override int Read(); // 0x100892ABC
	public override int Read(char[] buffer, int index, int count); // 0x100892B78
}

// Namespace: System.IO
public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 410
{
	// Fields
	protected char[] CoreNewLine; // 0x18
	internal IFormatProvider internalFormatProvider; // 0x20
	public static readonly TextWriter Null; // 0x0

	// Methods
	protected void .ctor(); // 0x100892CDC
	private static void .cctor(); // 0x100894174
	public abstract Encoding get_Encoding(); // 0
	public virtual string get_NewLine(); // 0x100894240
	public virtual void set_NewLine(string value); // 0x100894250
	public virtual void Close(); // 0x10089429C
	protected virtual void Dispose(bool disposing); // 0x1008942EC
	public void Dispose(); // 0x100894308
	public virtual void Flush(); // 0x100894360
	public static TextWriter Synchronized(TextWriter writer); // 0x100894364
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose); // 0x1008943CC
	public virtual void Write(char value); // 0x10089449C
	public virtual void Write(char[] buffer); // 0x1008944A0
	public virtual void Write(string value); // 0x100894520
	public virtual void Write(string format, object arg0); // 0x1008945A0
	public virtual void Write(string format, object[] arg); // 0x10089465C
	public virtual void Write(char[] buffer, int index, int count); // 0x100894718
	public virtual void Write(string format, object arg0, object arg1); // 0x10089488C
	public virtual void Write(string format, object arg0, object arg1, object arg2); // 0x100894958
	public virtual void WriteLine(); // 0x100894A2C
	public virtual void WriteLine(string value); // 0x100894A88
	public virtual void WriteLine(string format, object arg0); // 0x100894B08
	public virtual void WriteLine(string format, object[] arg); // 0x100894B98
	public virtual void WriteLine(string format, object arg0, object arg1); // 0x100894C28
	public virtual void WriteLine(string format, object arg0, object arg1, object arg2); // 0x100894CC0
}

// Namespace: 
private sealed class NullTextWriter : TextWriter // TypeDefIndex: 411
{
	// Methods
	public void .ctor(); // 0x1008941DC
	public override Encoding get_Encoding(); // 0x100894D68
	public override void Write(string s); // 0x100894DCC
	public override void Write(char value); // 0x100894DD0
	public override void Write(char[] value, int index, int count); // 0x100894DD4
}

// Namespace: System.IO
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 412
{
	// Fields
	private TextWriter writer; // 0x28
	private bool neverClose; // 0x30

	// Methods
	public void .ctor(TextWriter writer, bool neverClose); // 0x100892C5C
	public override void Close(); // 0x100892D18
	public override void Flush(); // 0x100892DE0
	public override void Write(char value); // 0x100892EA0
	public override void Write(char[] value); // 0x100892F78
	public override void Write(string value); // 0x100893050
	public override void Write(string format, object value); // 0x100893128
	public override void Write(string format, object[] value); // 0x100893208
	public override void Write(char[] buffer, int index, int count); // 0x1008932E8
	public override void Write(string format, object arg0, object arg1); // 0x1008933E0
	public override void Write(string format, object arg0, object arg1, object arg2); // 0x1008934D8
	public override void WriteLine(); // 0x1008935D8
	public override void WriteLine(string value); // 0x100893698
	public override void WriteLine(string format, object value); // 0x100893770
	public override void WriteLine(string format, object[] value); // 0x100893850
	public override void WriteLine(string format, object arg0, object arg1); // 0x100893930
	public override void WriteLine(string format, object arg0, object arg1, object arg2); // 0x100893A28
	public override Encoding get_Encoding(); // 0x100893B28
	public override string get_NewLine(); // 0x100893BE4
	public override void set_NewLine(string value); // 0x100893CA0
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 413
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x8

	// Methods
	public void .ctor(Stream stream, Encoding encoding); // 0x100894DD8
	private static void .cctor(); // 0x100894E58
	public override int Peek(); // 0x100894F34
	public override int Read(); // 0x100894FF4
	public override int Read(out char[] dest_buffer, int index, int count); // 0x1008950B4
	private bool CheckEOL(char current); // 0x10089532C
	public override string ReadLine(); // 0x100895530
	public override string ReadToEnd(); // 0x1008955F0
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 414
{
	// Methods
	public void .ctor(Stream stream, Encoding encoding); // 0x1008956B0
	public override void Flush(); // 0x100895730
	public override void Write(char[] buffer, int index, int count); // 0x1008957F0
	public override void Write(char value); // 0x1008958E0
	public override void Write(char[] value); // 0x1008959B4
	public override void Write(string value); // 0x100895A88
}

// Namespace: System.IO
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 415
{
	// Fields
	private long length; // 0x18
	private bool closed; // 0x20
	private long capacity; // 0x28
	private FileAccess fileaccess; // 0x30
	private IntPtr initial_pointer; // 0x38
	private long initial_position; // 0x40
	private long current_position; // 0x48
	private EventHandler Closed; // 0x50

	// Methods
	public override bool get_CanRead(); // 0x100895B5C
	public override bool get_CanSeek(); // 0x100895B7C
	public override bool get_CanWrite(); // 0x100895B8C
	public override long get_Length(); // 0x100895BAC
	public override long get_Position(); // 0x100895CB0
	public override void set_Position(long value); // 0x100895D28
	public override int Read(out byte[] buffer, int offset, int count); // 0x100895E28
	public override int ReadByte(); // 0x1008960A0
	public override long Seek(long offset, SeekOrigin loc); // 0x1008961AC
	public override void SetLength(long value); // 0x100896310
	public override void Flush(); // 0x100896458
	protected override void Dispose(bool disposing); // 0x1008964CC
	public override void Write(byte[] buffer, int offset, int count); // 0x1008964FC
	public override void WriteByte(byte value); // 0x100896784
}

// Namespace: System.Reflection
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 416
{
	// Methods
	public void .ctor(); // 0x10089AD70
	public void .ctor(string message); // 0x1008990BC
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1008A5D1C
}

// Namespace: System.Reflection
public class Assembly : ISerializable, ICustomAttributeProvider, _Assembly, IEvidenceFactory // TypeDefIndex: 417
{
	// Fields
	private IntPtr _mono_assembly; // 0x10
	private ResolveEventHolder resolve_event_holder; // 0x18
	private Evidence _evidence; // 0x20
	internal PermissionSet _minimum; // 0x28
	internal PermissionSet _optional; // 0x30
	internal PermissionSet _refuse; // 0x38
	private PermissionSet _granted; // 0x40
	private PermissionSet _denied; // 0x48
	private bool fromByteArray; // 0x50
	private string assemblyName; // 0x58

	// Methods
	internal void .ctor(); // 0x1008A5D24
	private string get_code_base(bool escaped); // 0x1008A5D7C
	private string get_fullname(); // 0x1008A5D80
	private string get_location(); // 0x1008A5D84
	private string GetCodeBase(bool escaped); // 0x1008A5D88
	public virtual string get_EscapedCodeBase(); // 0x1008A5EF4
	public virtual string get_FullName(); // 0x1008A5EFC
	internal Evidence UnprotectedGetEvidence(); // 0x1008A5F48
	private bool get_global_assembly_cache(); // 0x1008A5FDC
	public bool get_GlobalAssemblyCache(); // 0x1008A5FE0
	public virtual string get_Location(); // 0x1008A5FE4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008A6114
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x1008A61BC
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008A6238
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x1008A62B4
	internal virtual Type[] GetTypes(bool exportedOnly); // 0x1008A62B8
	public virtual Type[] GetTypes(); // 0x1008A62BC
	public virtual Type GetType(string name, bool throwOnError); // 0x1008A630C
	public virtual Type GetType(string name); // 0x1008A63FC
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x1008A6408
	public Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x1008A6314
	private static void FillName(Assembly ass, AssemblyName aname); // 0x1008A640C
	public virtual AssemblyName GetName(bool copiedName); // 0x1008A6418
	public virtual AssemblyName GetName(); // 0x1008A64C4
	internal virtual AssemblyName UnprotectedGetName(); // 0x1008A6514
	public override string ToString(); // 0x1008A658C
	public static Assembly GetEntryAssembly(); // 0x1008A65BC
	public static Assembly Load(string assemblyString); // 0x1008A65C0
	public static Assembly LoadWithPartialName(string partialName); // 0x1008A65F8
	private static Assembly load_with_partial_name(string name, Evidence e); // 0x1008A660C
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x1008A6604
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x1008A6618
	public Module GetModule(string name); // 0x1008A66B8
	internal virtual Module[] GetModulesInternal(); // 0x1008A6A54
	public Module[] GetModules(bool getResourceModules); // 0x1008A682C
	public static Assembly GetExecutingAssembly(); // 0x1008A6A58
	internal virtual Module GetManifestModule(); // 0x1008A6A5C
	internal Module GetManifestModuleInternal(); // 0x1008A6A60
	internal void Resolve(); // 0x1008A6A64
	internal PermissionSet get_GrantedPermissionSet(); // 0x1008A6EAC
	internal PermissionSet get_DeniedPermissionSet(); // 0x1008A6FAC
	internal static bool LoadPermissions(Assembly a, IntPtr minimum, int minLength, IntPtr optional, int optLength, IntPtr refused, int refLength); // 0x1008A70AC
	private void LoadAssemblyPermissions(); // 0x1008A6C0C
}

// Namespace: 
internal class ResolveEventHolder // TypeDefIndex: 418
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x10

	// Methods
	public void .ctor(); // 0x1008A5D78
}

// Namespace: System.Reflection
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 419
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string company); // 0x1008A70CC
}

// Namespace: System.Reflection
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 420
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string configuration); // 0x1008A70F8
}

// Namespace: System.Reflection
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 421
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string copyright); // 0x1008A7124
}

// Namespace: System.Reflection
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 422
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string defaultAlias); // 0x1008A717C
}

// Namespace: System.Reflection
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 423
{
	// Fields
	private bool delay; // 0x10

	// Methods
	public void .ctor(bool delaySign); // 0x1008A71A8
}

// Namespace: System.Reflection
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 424
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string description); // 0x1008A71D4
}

// Namespace: System.Reflection
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 425
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string version); // 0x1008A7200
}

// Namespace: System.Reflection
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 426
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string informationalVersion); // 0x1008A7290
}

// Namespace: System.Reflection
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 427
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string keyFile); // 0x1008A72BC
}

// Namespace: System.Reflection
public sealed class AssemblyKeyNameAttribute : Attribute // TypeDefIndex: 428
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string keyName); // 0x1008A72E8
}

// Namespace: System.Reflection
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 429
{
	// Fields
	private string name; // 0x10
	private string codebase; // 0x18
	private int major; // 0x20
	private int minor; // 0x24
	private int build; // 0x28
	private int revision; // 0x2C
	private CultureInfo cultureinfo; // 0x30
	private AssemblyNameFlags flags; // 0x38
	private AssemblyHashAlgorithm hashalg; // 0x3C
	private StrongNameKeyPair keypair; // 0x40
	private byte[] publicKey; // 0x48
	private byte[] keyToken; // 0x50
	private AssemblyVersionCompatibility versioncompat; // 0x58
	private Version version; // 0x60
	private ProcessorArchitecture processor_architecture; // 0x68

	// Methods
	public void .ctor(); // 0x1008A6580
	internal void .ctor(SerializationInfo si, StreamingContext sc); // 0x1008A7314
	public string get_Name(); // 0x1008A7718
	public void set_Name(string value); // 0x1008A7720
	public CultureInfo get_CultureInfo(); // 0x1008A7728
	public AssemblyNameFlags get_Flags(); // 0x1008A7730
	public string get_FullName(); // 0x1008A7738
	public StrongNameKeyPair get_KeyPair(); // 0x1008A7AF8
	public Version get_Version(); // 0x1008A7A20
	public void set_Version(Version value); // 0x1008A7B00
	public override string ToString(); // 0x1008A7B88
	public byte[] GetPublicKey(); // 0x1008A7BBC
	private bool get_IsPublicKeyValid(); // 0x1008A7BC4
	private byte[] InternalGetPublicKeyToken(); // 0x1008A7A28
	private byte[] ComputePublicKeyToken(); // 0x1008A7DC4
	public void SetPublicKey(byte[] publicKey); // 0x1008A7E90
	public void SetPublicKeyToken(byte[] publicKeyToken); // 0x1008A7EB0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008A7EB8
	public object Clone(); // 0x1008A8134
	public void OnDeserialization(object sender); // 0x1008A81EC
}

// Namespace: System.Reflection
public sealed class AssemblyNameFlags : Enum // TypeDefIndex: 430
{
	// Fields
	public int value__; // 0x10
	public const AssemblyNameFlags None = 0; // 0x0
	public const AssemblyNameFlags PublicKey = 1; // 0x0
	public const AssemblyNameFlags Retargetable = 256; // 0x0
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384; // 0x0
	public const AssemblyNameFlags EnableJITcompileTracking = 32768; // 0x0

}

// Namespace: System.Reflection
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 431
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string product); // 0x1008A81F4
	public string get_Product(); // 0x1008A8220
}

// Namespace: System.Reflection
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 432
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string title); // 0x1008A8228
}

// Namespace: System.Reflection
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 433
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string trademark); // 0x1008A8254
}

// Namespace: System.Reflection
public abstract class Binder // TypeDefIndex: 434
{
	// Fields
	private static Binder default_binder; // 0x0

	// Methods
	protected void .ctor(); // 0x1008A82B4
	private static void .cctor(); // 0x1008A82B8
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state); // 0
	public abstract object ChangeType(object value, Type type, CultureInfo culture); // 0
	public abstract void ReorderArgumentArray(object[] args, object state); // 0
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0
	internal static Binder get_DefaultBinder(); // 0x10089AE74
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture); // 0x1008A8384
	internal static int GetDerivedLevel(Type type); // 0x1008A8558
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match); // 0x10089B580
}

// Namespace: 
internal sealed class Default : Binder // TypeDefIndex: 435
{
	// Methods
	public void .ctor(); // 0x1008A8320
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state); // 0x1008A85E4
	private void ReorderParameters(string[] names, object[] args, MethodBase selected); // 0x1008A8C78
	private static bool IsArrayAssignable(Type object_type, Type target_type); // 0x1008A8EFC
	public override object ChangeType(object value, Type type, CultureInfo culture); // 0x1008A8FEC
	public override void ReorderArgumentArray(object[] args, object state); // 0x1008A98FC
	private static bool check_type(Type from, Type to); // 0x1008A9380
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch); // 0x1008A9900
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x1008A9AA0
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch); // 0x1008A87A0
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types); // 0x1008A9AA8
	private int CompareCloserType(Type t1, Type t2); // 0x1008A9E8C
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x1008AA160
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args); // 0x1008AA408
	private static int check_type_with_score(Type from, Type to); // 0x1008AA4FC
}

// Namespace: System.Reflection
public sealed class BindingFlags : Enum // TypeDefIndex: 436
{
	// Fields
	public int value__; // 0x10
	public const BindingFlags Default = 0; // 0x0
	public const BindingFlags IgnoreCase = 1; // 0x0
	public const BindingFlags DeclaredOnly = 2; // 0x0
	public const BindingFlags Instance = 4; // 0x0
	public const BindingFlags Static = 8; // 0x0
	public const BindingFlags Public = 16; // 0x0
	public const BindingFlags NonPublic = 32; // 0x0
	public const BindingFlags FlattenHierarchy = 64; // 0x0
	public const BindingFlags InvokeMethod = 256; // 0x0
	public const BindingFlags CreateInstance = 512; // 0x0
	public const BindingFlags GetField = 1024; // 0x0
	public const BindingFlags SetField = 2048; // 0x0
	public const BindingFlags GetProperty = 4096; // 0x0
	public const BindingFlags SetProperty = 8192; // 0x0
	public const BindingFlags PutDispProperty = 16384; // 0x0
	public const BindingFlags PutRefDispProperty = 32768; // 0x0
	public const BindingFlags ExactBinding = 65536; // 0x0
	public const BindingFlags SuppressChangeType = 131072; // 0x0
	public const BindingFlags OptionalParamBinding = 262144; // 0x0
	public const BindingFlags IgnoreReturn = 16777216; // 0x0

}

// Namespace: System.Reflection
public sealed class CallingConventions : Enum // TypeDefIndex: 437
{
	// Fields
	public int value__; // 0x10
	public const CallingConventions Standard = 1; // 0x0
	public const CallingConventions VarArgs = 2; // 0x0
	public const CallingConventions Any = 3; // 0x0
	public const CallingConventions HasThis = 32; // 0x0
	public const CallingConventions ExplicitThis = 64; // 0x0

}

// Namespace: System.Reflection
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 438
{
	// Fields
	public static readonly string ConstructorName; // 0x0
	public static readonly string TypeConstructorName; // 0x8

	// Methods
	protected void .ctor(); // 0x1008AA8A4
	private static void .cctor(); // 0x1008AA8AC
	public override MemberTypes get_MemberType(); // 0x1008AA920
	public object Invoke(object[] parameters); // 0x1008AA928
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0
}

// Namespace: System.Reflection
public sealed class CustomAttributeData // TypeDefIndex: 439
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList`1<CustomAttributeTypedArgument> ctorArgs; // 0x18
	private IList`1<CustomAttributeNamedArgument> namedArgs; // 0x20

	// Methods
	internal void .ctor(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs); // 0x1008AA9DC
	public ConstructorInfo get_Constructor(); // 0x1008AAAF4
	public IList`1<CustomAttributeTypedArgument> get_ConstructorArguments(); // 0x1008AAAFC
	public IList`1<CustomAttributeNamedArgument> get_NamedArguments(); // 0x1008AAB04
	public static IList`1<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x1008AAB0C
	public static IList`1<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x1008AAB70
	public static IList`1<CustomAttributeData> GetCustomAttributes(Module target); // 0x1008AABD4
	public static IList`1<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x1008AAC38
	public override string ToString(); // 0x1008AAC9C
	private static T[] UnboxValues(object[] values); // 0
	public override bool Equals(object obj); // 0x1008AB5BC
	public override int GetHashCode(); // 0x1008ABE60
}

// Namespace: System.Reflection
public struct CustomAttributeNamedArgument // TypeDefIndex: 440
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x10
	private MemberInfo memberInfo; // 0x20

	// Methods
	public override string ToString(); // 0x1008AC2A0
	public override bool Equals(object obj); // 0x1008AC2A8
	public override int GetHashCode(); // 0x1008AC2B0
}

// Namespace: System.Reflection
public struct CustomAttributeTypedArgument // TypeDefIndex: 441
{
	// Fields
	private Type argumentType; // 0x10
	private object value; // 0x18

	// Methods
	public override string ToString(); // 0x1008AC2EC
	public override bool Equals(object obj); // 0x1008AC2F4
	public override int GetHashCode(); // 0x1008AC2FC
}

// Namespace: System.Reflection
public sealed class EventAttributes : Enum // TypeDefIndex: 442
{
	// Fields
	public int value__; // 0x10
	public const EventAttributes None = 0; // 0x0
	public const EventAttributes SpecialName = 512; // 0x0
	public const EventAttributes ReservedMask = 1024; // 0x0
	public const EventAttributes RTSpecialName = 1024; // 0x0

}

// Namespace: System.Reflection
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 443
{
	// Fields
	private AddEventAdapter cached_add_event; // 0x10

	// Methods
	protected void .ctor(); // 0x1008BECCC
	public abstract EventAttributes get_Attributes(); // 0
	public Type get_EventHandlerType(); // 0x1008BECDC
	public override MemberTypes get_MemberType(); // 0x1008BEDB8
	public MethodInfo GetAddMethod(); // 0x1008BEDC0
	public abstract MethodInfo GetAddMethod(bool nonPublic); // 0
	public MethodInfo GetRemoveMethod(); // 0x1008BEE10
	public abstract MethodInfo GetRemoveMethod(bool nonPublic); // 0
}

// Namespace: 
private sealed class AddEventAdapter : MulticastDelegate // TypeDefIndex: 444
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008BEE60
	public virtual void Invoke(object _this, Delegate dele); // 0x1008BEE70
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object); // 0x1008BEF30
	public virtual void EndInvoke(IAsyncResult result); // 0x1008BEF8C
}

// Namespace: System.Reflection
public sealed class FieldAttributes : Enum // TypeDefIndex: 445
{
	// Fields
	public int value__; // 0x10
	public const FieldAttributes FieldAccessMask = 7; // 0x0
	public const FieldAttributes PrivateScope = 0; // 0x0
	public const FieldAttributes Private = 1; // 0x0
	public const FieldAttributes FamANDAssem = 2; // 0x0
	public const FieldAttributes Assembly = 3; // 0x0
	public const FieldAttributes Family = 4; // 0x0
	public const FieldAttributes FamORAssem = 5; // 0x0
	public const FieldAttributes Public = 6; // 0x0
	public const FieldAttributes Static = 16; // 0x0
	public const FieldAttributes InitOnly = 32; // 0x0
	public const FieldAttributes Literal = 64; // 0x0
	public const FieldAttributes NotSerialized = 128; // 0x0
	public const FieldAttributes HasFieldRVA = 256; // 0x0
	public const FieldAttributes SpecialName = 512; // 0x0
	public const FieldAttributes RTSpecialName = 1024; // 0x0
	public const FieldAttributes HasFieldMarshal = 4096; // 0x0
	public const FieldAttributes PinvokeImpl = 8192; // 0x0
	public const FieldAttributes HasDefault = 32768; // 0x0
	public const FieldAttributes ReservedMask = 38144; // 0x0

}

// Namespace: System.Reflection
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 446
{
	// Methods
	protected void .ctor(); // 0x1008BEF98
	public abstract FieldAttributes get_Attributes(); // 0
	public abstract RuntimeFieldHandle get_FieldHandle(); // 0
	public abstract Type get_FieldType(); // 0
	public abstract object GetValue(object obj); // 0
	public override MemberTypes get_MemberType(); // 0x1008BEFA0
	public bool get_IsLiteral(); // 0x1008BEFA8
	public bool get_IsStatic(); // 0x1008BCF14
	public bool get_IsPublic(); // 0x1008BEFF4
	public bool get_IsNotSerialized(); // 0x1008BF048
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0
	public void SetValue(object obj, object value); // 0x1008BF094
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x1008BF104
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x1008BF110
	internal virtual int GetFieldOffset(); // 0x1008BF1D8
	private UnmanagedMarshal GetUnmanagedMarshal(); // 0x1008BF238
	internal virtual UnmanagedMarshal get_UMarshal(); // 0x1008BF23C
	internal object[] GetPseudoCustomAttributes(); // 0x1008BF240
}

// Namespace: System.Reflection
public class LocalVariableInfo // TypeDefIndex: 447
{
	// Fields
	internal Type type; // 0x10
	internal bool is_pinned; // 0x18
	internal ushort position; // 0x1A

	// Methods
	internal void .ctor(); // 0x1008BF4C8
	public override string ToString(); // 0x1008BF4D0
}

// Namespace: System.Reflection
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 448
{
	// Fields
	private readonly string _memberName; // 0x10
	private readonly string _memberSignature; // 0x18
	private readonly MemberTypes _memberType; // 0x20
	private readonly Type _reflectedType; // 0x28
	private readonly Type[] _genericArguments; // 0x30

	// Methods
	private void .ctor(SerializationInfo info, StreamingContext ctx); // 0x1008BF724
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type); // 0x1008BF840
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments); // 0x1008BF848
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008BFAA8
	public object GetRealObject(StreamingContext context); // 0x1008BFAFC
}

// Namespace: System.Reflection
public sealed class MemberTypes : Enum // TypeDefIndex: 449
{
	// Fields
	public int value__; // 0x10
	public const MemberTypes Constructor = 1; // 0x0
	public const MemberTypes Event = 2; // 0x0
	public const MemberTypes Field = 4; // 0x0
	public const MemberTypes Method = 8; // 0x0
	public const MemberTypes Property = 16; // 0x0
	public const MemberTypes TypeInfo = 32; // 0x0
	public const MemberTypes Custom = 64; // 0x0
	public const MemberTypes NestedType = 128; // 0x0
	public const MemberTypes All = 191; // 0x0

}

// Namespace: System.Reflection
public sealed class MethodAttributes : Enum // TypeDefIndex: 450
{
	// Fields
	public int value__; // 0x10
	public const MethodAttributes MemberAccessMask = 7; // 0x0
	public const MethodAttributes PrivateScope = 0; // 0x0
	public const MethodAttributes Private = 1; // 0x0
	public const MethodAttributes FamANDAssem = 2; // 0x0
	public const MethodAttributes Assembly = 3; // 0x0
	public const MethodAttributes Family = 4; // 0x0
	public const MethodAttributes FamORAssem = 5; // 0x0
	public const MethodAttributes Public = 6; // 0x0
	public const MethodAttributes Static = 16; // 0x0
	public const MethodAttributes Final = 32; // 0x0
	public const MethodAttributes Virtual = 64; // 0x0
	public const MethodAttributes HideBySig = 128; // 0x0
	public const MethodAttributes VtableLayoutMask = 256; // 0x0
	public const MethodAttributes CheckAccessOnOverride = 512; // 0x0
	public const MethodAttributes ReuseSlot = 0; // 0x0
	public const MethodAttributes NewSlot = 256; // 0x0
	public const MethodAttributes Abstract = 1024; // 0x0
	public const MethodAttributes SpecialName = 2048; // 0x0
	public const MethodAttributes PinvokeImpl = 8192; // 0x0
	public const MethodAttributes UnmanagedExport = 8; // 0x0
	public const MethodAttributes RTSpecialName = 4096; // 0x0
	public const MethodAttributes ReservedMask = 53248; // 0x0
	public const MethodAttributes HasSecurity = 16384; // 0x0
	public const MethodAttributes RequireSecObject = 32768; // 0x0

}

// Namespace: System.Reflection
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 451
{
	// Methods
	protected void .ctor(); // 0x1008C0120
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x1008C0128
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType); // 0x1008C0198
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x1008C0258
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x1008C024C
	public abstract MethodImplAttributes GetMethodImplementationFlags(); // 0
	public abstract ParameterInfo[] GetParameters(); // 0
	internal virtual int GetParameterCount(); // 0x1008C0394
	public object Invoke(object obj, object[] parameters); // 0x1008C03E4
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0
	public abstract RuntimeMethodHandle get_MethodHandle(); // 0
	public abstract MethodAttributes get_Attributes(); // 0
	public virtual CallingConventions get_CallingConvention(); // 0x1008C0454
	public bool get_IsPublic(); // 0x1008C045C
	public bool get_IsStatic(); // 0x1008BDEE8
	public bool get_IsVirtual(); // 0x1008C04B0
	public bool get_IsAbstract(); // 0x1008BCF60
	internal virtual int get_next_table_index(object obj, int table, bool inc); // 0x1008C04FC
	public virtual Type[] GetGenericArguments(); // 0x1008C05EC
	public virtual bool get_ContainsGenericParameters(); // 0x1008C0640
	public virtual bool get_IsGenericMethodDefinition(); // 0x1008C0648
	public virtual bool get_IsGenericMethod(); // 0x1008C0650
}

// Namespace: System.Reflection
public sealed class MethodImplAttributes : Enum // TypeDefIndex: 452
{
	// Fields
	public int value__; // 0x10
	public const MethodImplAttributes CodeTypeMask = 3; // 0x0
	public const MethodImplAttributes IL = 0; // 0x0
	public const MethodImplAttributes Native = 1; // 0x0
	public const MethodImplAttributes OPTIL = 2; // 0x0
	public const MethodImplAttributes Runtime = 3; // 0x0
	public const MethodImplAttributes ManagedMask = 4; // 0x0
	public const MethodImplAttributes Unmanaged = 4; // 0x0
	public const MethodImplAttributes Managed = 0; // 0x0
	public const MethodImplAttributes ForwardRef = 16; // 0x0
	public const MethodImplAttributes PreserveSig = 128; // 0x0
	public const MethodImplAttributes InternalCall = 4096; // 0x0
	public const MethodImplAttributes Synchronized = 32; // 0x0
	public const MethodImplAttributes NoInlining = 8; // 0x0
	public const MethodImplAttributes MaxMethodImplVal = 65535; // 0x0

}

// Namespace: System.Reflection
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 453
{
	// Methods
	protected void .ctor(); // 0x1008C0658
	public abstract MethodInfo GetBaseDefinition(); // 0
	public override MemberTypes get_MemberType(); // 0x1008C0660
	public virtual Type get_ReturnType(); // 0x1008C0668
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x1008C0670
	public override Type[] GetGenericArguments(); // 0x1008C06F0
	public override bool get_IsGenericMethod(); // 0x1008C0758
	public override bool get_IsGenericMethodDefinition(); // 0x1008C0760
	public override bool get_ContainsGenericParameters(); // 0x1008C0768
}

// Namespace: System.Reflection
public sealed class Missing : ISerializable // TypeDefIndex: 454
{
	// Fields
	public static readonly Missing Value; // 0x0

	// Methods
	internal void .ctor(); // 0x1008C0770
	private static void .cctor(); // 0x1008C0778
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C07DC
}

// Namespace: System.Reflection
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 455
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28; // 0x0
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x8
	private IntPtr _impl; // 0x10
	internal Assembly assembly; // 0x18
	internal string fqname; // 0x20
	internal string name; // 0x28
	internal string scopename; // 0x30
	internal bool is_resource; // 0x38
	internal int token; // 0x3C

	// Methods
	internal void .ctor(); // 0x1008C07E0
	private static void .cctor(); // 0x1008C07E8
	public Assembly get_Assembly(); // 0x1008BB4E4
	public string get_Name(); // 0x1008C08A4
	public string get_ScopeName(); // 0x1008C08AC
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C08B4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C0938
	public virtual Type GetType(string className); // 0x1008C09E0
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x1008C0A44
	private Type[] InternalGetTypes(); // 0x1008C0B64
	public virtual Type[] GetTypes(); // 0x1008C0B68
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x1008C0B6C
	public bool IsResource(); // 0x1008C0BF0
	public override string ToString(); // 0x1008C0BF8
	private static bool filter_by_type_name(Type m, object filterCriteria); // 0x1008C0C00
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x1008C0D84
}

// Namespace: System.Reflection
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 456
{
	// Methods
	internal void .ctor(); // 0x1008C2D94
	public override Type get_ReflectedType(); // 0x1008C2DFC
}

// Namespace: System.Reflection
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 457
{
	// Methods
	internal void .ctor(); // 0x1008C2D30
	public override Type get_ReflectedType(); // 0x1008C2D90
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 458
{
	// Fields
	public Type declaring_type; // 0x10
	public Type reflected_type; // 0x18
	public string name; // 0x20
	public MethodInfo add_method; // 0x28
	public MethodInfo remove_method; // 0x30
	public MethodInfo raise_method; // 0x38
	public EventAttributes attrs; // 0x40
	public MethodInfo[] other_methods; // 0x48

	// Methods
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x1008C221C
	internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x1008C1DAC
}

// Namespace: System.Reflection
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 459
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x20

	// Methods
	public void .ctor(); // 0x1008C1D70
	public override EventAttributes get_Attributes(); // 0x1008C1D78
	public override MethodInfo GetAddMethod(bool nonPublic); // 0x1008C1E00
	public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x1008C1E5C
	public override Type get_DeclaringType(); // 0x1008C1EB8
	public override Type get_ReflectedType(); // 0x1008C1EEC
	public override string get_Name(); // 0x1008C1F20
	public override string ToString(); // 0x1008C1F54
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C2008
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C208C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C2108
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C218C
}

// Namespace: System.Reflection
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 460
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x18
	private string name; // 0x20
	private Type type; // 0x28
	private FieldAttributes attrs; // 0x30

	// Methods
	public void .ctor(); // 0x1008C225C
	public override FieldAttributes get_Attributes(); // 0x1008C2264
	public override RuntimeFieldHandle get_FieldHandle(); // 0x1008C226C
	public override Type get_FieldType(); // 0x1008C2274
	private Type GetParentType(bool declaring); // 0x1008C227C
	public override Type get_ReflectedType(); // 0x1008C2280
	public override Type get_DeclaringType(); // 0x1008C2288
	public override string get_Name(); // 0x1008C2290
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C2298
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C231C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C2398
	internal override int GetFieldOffset(); // 0x1008C241C
	private object GetValueInternal(object obj); // 0x1008C2420
	public override object GetValue(object obj); // 0x1008C2424
	public override string ToString(); // 0x1008C26F8
	private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x1008C2778
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x1008C2788
	internal MonoField Clone(string newName); // 0x1008C2BDC
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C2C74
	private void CheckGeneric(); // 0x1008C2624
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 461
{
	// Fields
	private Type parent; // 0x10
	private Type ret; // 0x18
	internal MethodAttributes attrs; // 0x20
	internal MethodImplAttributes iattrs; // 0x24
	private CallingConventions callconv; // 0x28

	// Methods
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x1008C41A4
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x1008C375C
	internal static Type GetDeclaringType(IntPtr handle); // 0x1008C1898
	internal static Type GetReturnType(IntPtr handle); // 0x1008C2E7C
	internal static MethodAttributes GetAttributes(IntPtr handle); // 0x1008C17C8
	internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x1008C182C
	internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x1008C1104
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x1008C41B0
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x1008C1148
}

// Namespace: System.Reflection
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 462
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Methods
	internal void .ctor(); // 0x1008C2DF4
	internal void .ctor(RuntimeMethodHandle mhandle); // 0x1008C2E00
	internal static string get_name(MethodBase method); // 0x1008C18F0
	internal static MonoMethod get_base_definition(MonoMethod method); // 0x1008C2E40
	public override MethodInfo GetBaseDefinition(); // 0x1008C2E48
	public override Type get_ReturnType(); // 0x1008C2E4C
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x1008C2EB0
	public override ParameterInfo[] GetParameters(); // 0x1008C2EE0
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x1008C2F80
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008C2F84
	public override RuntimeMethodHandle get_MethodHandle(); // 0x1008C3364
	public override MethodAttributes get_Attributes(); // 0x1008C3394
	public override CallingConventions get_CallingConvention(); // 0x1008C33C4
	public override Type get_ReflectedType(); // 0x1008C33F4
	public override Type get_DeclaringType(); // 0x1008C33FC
	public override string get_Name(); // 0x1008C342C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C3450
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C34D4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C3550
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle); // 0x1008C35D4
	internal object[] GetPseudoCustomAttributes(); // 0x1008C35DC
	private static bool ShouldPrintFullName(Type type); // 0x1008C37A0
	public override string ToString(); // 0x1008C386C
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C3D14
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation); // 0x1008C3E58
	private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x1008C4020
	public override Type[] GetGenericArguments(); // 0x1008C4024
	public override bool get_IsGenericMethodDefinition(); // 0x1008C4028
	public override bool get_IsGenericMethod(); // 0x1008C402C
	public override bool get_ContainsGenericParameters(); // 0x1008C4030
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 463
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Methods
	public void .ctor(); // 0x1008C106C
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x1008C10D4
	public override ParameterInfo[] GetParameters(); // 0x1008C1138
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x1008C1154
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008C1158
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008C16E8
	public override RuntimeMethodHandle get_MethodHandle(); // 0x1008C1768
	public override MethodAttributes get_Attributes(); // 0x1008C1798
	public override CallingConventions get_CallingConvention(); // 0x1008C17FC
	public override Type get_ReflectedType(); // 0x1008C1860
	public override Type get_DeclaringType(); // 0x1008C1868
	public override string get_Name(); // 0x1008C18CC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C18F8
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C197C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C19F8
	public override string ToString(); // 0x1008C1A7C
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C1CB4
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 464
{
	// Fields
	public Type parent; // 0x10
	public string name; // 0x18
	public MethodInfo get_method; // 0x20
	public MethodInfo set_method; // 0x28
	public PropertyAttributes attrs; // 0x30

	// Methods
	internal static void get_property_info(MonoProperty prop, MonoPropertyInfo info, PInfo req_info); // 0x1008C4248
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x1008C5638
}

// Namespace: System.Reflection
internal sealed class PInfo : Enum // TypeDefIndex: 465
{
	// Fields
	public int value__; // 0x10
	public const PInfo Attributes = 1; // 0x0
	public const PInfo GetMethod = 2; // 0x0
	public const PInfo SetMethod = 4; // 0x0
	public const PInfo ReflectedType = 8; // 0x0
	public const PInfo DeclaringType = 16; // 0x0
	public const PInfo Name = 32; // 0x0

}

// Namespace: System.Reflection
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 466
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x18
	private MonoPropertyInfo info; // 0x20
	private PInfo cached; // 0x48
	private GetterAdapter cached_getter; // 0x50

	// Methods
	public void .ctor(); // 0x1008C41F0
	private void CachePropertyInfo(PInfo flags); // 0x1008C4200
	public override PropertyAttributes get_Attributes(); // 0x1008C4258
	public override bool get_CanRead(); // 0x1008C429C
	public override bool get_CanWrite(); // 0x1008C42E8
	public override Type get_PropertyType(); // 0x1008C4334
	public override Type get_ReflectedType(); // 0x1008C4444
	public override Type get_DeclaringType(); // 0x1008C4488
	public override string get_Name(); // 0x1008C44CC
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x1008C4510
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x1008C4698
	public override ParameterInfo[] GetIndexParameters(); // 0x1008C46FC
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x1008C49E0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C4A44
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C4AC4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C4B34
	private static object GetterAdapterFrame(Getter`2<T, T> getter, object obj); // 0
	private static object StaticGetterAdapterFrame(StaticGetter`1<T> getter, object obj); // 0
	private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x1008C4BB4
	public override object GetValue(object obj, object[] index); // 0x1008C4F88
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x1008C4FF8
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x1008C5244
	public override string ToString(); // 0x1008C54B8
	public override Type[] GetOptionalCustomModifiers(); // 0x1008C55BC
	public override Type[] GetRequiredCustomModifiers(); // 0x1008C5644
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C56C0
}

// Namespace: 
private sealed class GetterAdapter : MulticastDelegate // TypeDefIndex: 467
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008C577C
	public virtual object Invoke(object _this); // 0x1008C578C
	public virtual IAsyncResult BeginInvoke(object _this, AsyncCallback callback, object object); // 0x1008C5828
	public virtual object EndInvoke(IAsyncResult result); // 0x1008C5878
}

// Namespace: 
private sealed class Getter`2 : MulticastDelegate // TypeDefIndex: 468
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(T _this); // 0
	public virtual IAsyncResult BeginInvoke(T _this, AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: 
private sealed class StaticGetter`1 : MulticastDelegate // TypeDefIndex: 469
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(); // 0
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: System.Reflection
public sealed class ObfuscateAssemblyAttribute : Attribute // TypeDefIndex: 470
{
	// Fields
	private bool is_private; // 0x10
	private bool strip; // 0x11

	// Methods
	public void .ctor(bool assemblyIsPrivate); // 0x1008C58B8
	public void set_StripAfterObfuscation(bool value); // 0x1008C58EC
}

// Namespace: System.Reflection
public sealed class ParameterAttributes : Enum // TypeDefIndex: 471
{
	// Fields
	public int value__; // 0x10
	public const ParameterAttributes None = 0; // 0x0
	public const ParameterAttributes In = 1; // 0x0
	public const ParameterAttributes Out = 2; // 0x0
	public const ParameterAttributes Lcid = 4; // 0x0
	public const ParameterAttributes Retval = 8; // 0x0
	public const ParameterAttributes Optional = 16; // 0x0
	public const ParameterAttributes ReservedMask = 61440; // 0x0
	public const ParameterAttributes HasDefault = 4096; // 0x0
	public const ParameterAttributes HasFieldMarshal = 8192; // 0x0
	public const ParameterAttributes Reserved3 = 16384; // 0x0
	public const ParameterAttributes Reserved4 = 32768; // 0x0

}

// Namespace: System.Reflection
public class ParameterInfo : ICustomAttributeProvider, _ParameterInfo // TypeDefIndex: 472
{
	// Fields
	protected Type ClassImpl; // 0x10
	protected object DefaultValueImpl; // 0x18
	protected MemberInfo MemberImpl; // 0x20
	protected string NameImpl; // 0x28
	protected int PositionImpl; // 0x30
	protected ParameterAttributes AttrsImpl; // 0x34
	private UnmanagedMarshal marshalAs; // 0x38

	// Methods
	protected void .ctor(); // 0x1008C58F4
	internal void .ctor(ParameterBuilder pb, Type type, MemberInfo member, int position); // 0x1008C58FC
	internal void .ctor(ParameterInfo pinfo, MemberInfo member); // 0x1008C48F8
	public override string ToString(); // 0x1008C59D8
	public virtual Type get_ParameterType(); // 0x1008C5CAC
	public virtual ParameterAttributes get_Attributes(); // 0x1008C5CB4
	public bool get_IsIn(); // 0x1008C5CBC
	public bool get_IsOptional(); // 0x1008C5D08
	public bool get_IsOut(); // 0x1008C5D54
	public bool get_IsRetval(); // 0x1008C5C60
	public virtual MemberInfo get_Member(); // 0x1008C5DA0
	public virtual string get_Name(); // 0x1008C5DA8
	public virtual int get_Position(); // 0x1008C5DB0
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C5DB8
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x1008C5E3C
	internal object[] GetPseudoCustomAttributes(); // 0x1008C5EC0
}

// Namespace: System.Reflection
public struct ParameterModifier // TypeDefIndex: 473
{
	// Fields
	private bool[] _byref; // 0x10

}

// Namespace: System.Reflection
public sealed class Pointer : ISerializable // TypeDefIndex: 474
{
	// Fields
	private PTR data; // 0x10
	private Type type; // 0x18

	// Methods
	private void .ctor(); // 0x1008C6274
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C627C
}

// Namespace: System.Reflection
public sealed class ProcessorArchitecture : Enum // TypeDefIndex: 475
{
	// Fields
	public int value__; // 0x10
	public const ProcessorArchitecture None = 0; // 0x0
	public const ProcessorArchitecture MSIL = 1; // 0x0
	public const ProcessorArchitecture X86 = 2; // 0x0
	public const ProcessorArchitecture IA64 = 3; // 0x0
	public const ProcessorArchitecture Amd64 = 4; // 0x0

}

// Namespace: System.Reflection
public sealed class PropertyAttributes : Enum // TypeDefIndex: 476
{
	// Fields
	public int value__; // 0x10
	public const PropertyAttributes None = 0; // 0x0
	public const PropertyAttributes SpecialName = 512; // 0x0
	public const PropertyAttributes ReservedMask = 62464; // 0x0
	public const PropertyAttributes RTSpecialName = 1024; // 0x0
	public const PropertyAttributes HasDefault = 4096; // 0x0
	public const PropertyAttributes Reserved2 = 8192; // 0x0
	public const PropertyAttributes Reserved3 = 16384; // 0x0
	public const PropertyAttributes Reserved4 = 32768; // 0x0

}

// Namespace: System.Reflection
public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 477
{
	// Methods
	protected void .ctor(); // 0x1008C41F8
	public abstract PropertyAttributes get_Attributes(); // 0
	public abstract bool get_CanRead(); // 0
	public abstract bool get_CanWrite(); // 0
	public override MemberTypes get_MemberType(); // 0x1008C62DC
	public abstract Type get_PropertyType(); // 0
	public abstract MethodInfo[] GetAccessors(bool nonPublic); // 0
	public MethodInfo GetGetMethod(); // 0x1008C62E4
	public abstract MethodInfo GetGetMethod(bool nonPublic); // 0
	public abstract ParameterInfo[] GetIndexParameters(); // 0
	public abstract MethodInfo GetSetMethod(bool nonPublic); // 0
	public virtual object GetValue(object obj, object[] index); // 0x1008C6334
	public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0
	public virtual void SetValue(object obj, object value, object[] index); // 0x1008C63A4
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0
	public virtual Type[] GetOptionalCustomModifiers(); // 0x1008C6424
	public virtual Type[] GetRequiredCustomModifiers(); // 0x1008C648C
}

// Namespace: System.Reflection
public sealed class ResourceAttributes : Enum // TypeDefIndex: 478
{
	// Fields
	public int value__; // 0x10
	public const ResourceAttributes Public = 1; // 0x0
	public const ResourceAttributes Private = 2; // 0x0

}

// Namespace: System.Reflection
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 479
{
	// Fields
	private byte[] _publicKey; // 0x10
	private string _keyPairContainer; // 0x18
	private bool _keyPairExported; // 0x20
	private byte[] _keyPairArray; // 0x28
	private RSA _rsa; // 0x30

	// Methods
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008C64F4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008C670C
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x1008C6824
	private RSA GetRSA(); // 0x1008C6828
	internal StrongName StrongName(); // 0x1008C6970
}

// Namespace: System.Reflection
public class TargetException : ApplicationException // TypeDefIndex: 480
{
	// Methods
	public void .ctor(); // 0x1008C6A18
	public void .ctor(string message); // 0x1008C261C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008C6A7C
}

// Namespace: System.Reflection
public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 481
{
	// Methods
	public void .ctor(Exception inner); // 0x1008C1684
	public void .ctor(string message, Exception inner); // 0x1008C6A84
	internal void .ctor(SerializationInfo info, StreamingContext sc); // 0x1008C6A8C
}

// Namespace: System.Reflection
public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 482
{
	// Methods
	public void .ctor(); // 0x1008C6A94
	public void .ctor(string message); // 0x1008C167C
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1008C6AF8
}

// Namespace: System.Reflection
public sealed class TypeAttributes : Enum // TypeDefIndex: 483
{
	// Fields
	public int value__; // 0x10
	public const TypeAttributes VisibilityMask = 7; // 0x0
	public const TypeAttributes NotPublic = 0; // 0x0
	public const TypeAttributes Public = 1; // 0x0
	public const TypeAttributes NestedPublic = 2; // 0x0
	public const TypeAttributes NestedPrivate = 3; // 0x0
	public const TypeAttributes NestedFamily = 4; // 0x0
	public const TypeAttributes NestedAssembly = 5; // 0x0
	public const TypeAttributes NestedFamANDAssem = 6; // 0x0
	public const TypeAttributes NestedFamORAssem = 7; // 0x0
	public const TypeAttributes LayoutMask = 24; // 0x0
	public const TypeAttributes AutoLayout = 0; // 0x0
	public const TypeAttributes SequentialLayout = 8; // 0x0
	public const TypeAttributes ExplicitLayout = 16; // 0x0
	public const TypeAttributes ClassSemanticsMask = 32; // 0x0
	public const TypeAttributes Class = 0; // 0x0
	public const TypeAttributes Interface = 32; // 0x0
	public const TypeAttributes Abstract = 128; // 0x0
	public const TypeAttributes Sealed = 256; // 0x0
	public const TypeAttributes SpecialName = 1024; // 0x0
	public const TypeAttributes Import = 4096; // 0x0
	public const TypeAttributes Serializable = 8192; // 0x0
	public const TypeAttributes StringFormatMask = 196608; // 0x0
	public const TypeAttributes AnsiClass = 0; // 0x0
	public const TypeAttributes UnicodeClass = 65536; // 0x0
	public const TypeAttributes AutoClass = 131072; // 0x0
	public const TypeAttributes BeforeFieldInit = 1048576; // 0x0
	public const TypeAttributes ReservedMask = 264192; // 0x0
	public const TypeAttributes RTSpecialName = 2048; // 0x0
	public const TypeAttributes HasSecurity = 262144; // 0x0
	public const TypeAttributes CustomFormatClass = 196608; // 0x0
	public const TypeAttributes CustomFormatMask = 12582912; // 0x0

}

// Namespace: System.Reflection
public class TypeDelegator : Type // TypeDefIndex: 484
{
	// Fields
	protected Type typeImpl; // 0x18

	// Methods
	protected void .ctor(); // 0x1008C6B00
	public override Assembly get_Assembly(); // 0x1008C6B68
	public override string get_AssemblyQualifiedName(); // 0x1008C6BBC
	public override Type get_BaseType(); // 0x1008C6C10
	public override string get_FullName(); // 0x1008C6C64
	public override Module get_Module(); // 0x1008C6CB8
	public override string get_Name(); // 0x1008C6D0C
	public override string get_Namespace(); // 0x1008C6D60
	public override RuntimeTypeHandle get_TypeHandle(); // 0x1008C6DB8
	public override Type get_UnderlyingSystemType(); // 0x1008C6E10
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x1008C6E68
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008C6E84
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x1008C6EA0
	public override object[] GetCustomAttributes(bool inherit); // 0x1008C6F08
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008C6F6C
	public override Type GetElementType(); // 0x1008C6FD8
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x1008C7030
	public override EventInfo[] GetEvents(); // 0x1008C70A0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x1008C70F4
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x1008C715C
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x1008C71CC
	public override Type GetInterface(string name, bool ignoreCase); // 0x1008C7234
	public override Type[] GetInterfaces(); // 0x1008C72A4
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008C72FC
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x1008C7318
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x1008C7380
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1008C73E8
	protected override bool HasElementTypeImpl(); // 0x1008C7404
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x1008C7420
	protected override bool IsArrayImpl(); // 0x1008C74D4
	protected override bool IsByRefImpl(); // 0x1008C74F0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008C750C
	protected override bool IsPointerImpl(); // 0x1008C7578
	protected override bool IsPrimitiveImpl(); // 0x1008C7594
	protected override bool IsValueTypeImpl(); // 0x1008C75B0
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 485
{
	// Fields
	public SecurityAction action; // 0x10
	public string pset; // 0x18

	// Methods
	public void .ctor(SecurityAction action, string pset); // 0x1008BAE10
}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 486
{
	// Fields
	public byte[] data; // 0x10
	public string name; // 0x18
	public string filename; // 0x20
	public ResourceAttributes attrs; // 0x28
	public int offset; // 0x2C
	public Stream stream; // 0x30

}

// Namespace: System.Reflection.Emit
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 487
{
	// Fields
	private ModuleBuilder[] modules; // 0x60
	private string name; // 0x68
	private string dir; // 0x70
	private MonoResource[] resources; // 0x78
	private string version; // 0x80
	private string culture; // 0x88
	private uint flags; // 0x90
	private PEFileKinds pekind; // 0x94
	private uint access; // 0x98
	private Module[] loaded_modules; // 0xA0
	private RefEmitPermissionSet[] permissions_minimum; // 0xA8
	private RefEmitPermissionSet[] permissions_optional; // 0xB0
	private RefEmitPermissionSet[] permissions_refused; // 0xB8
	private bool corlib_internal; // 0xC0
	private byte[] pktoken; // 0xC8
	internal Type corlib_object_type; // 0xD0
	internal Type corlib_value_type; // 0xD8
	internal Type corlib_enum_type; // 0xE0
	internal Type corlib_void_type; // 0xE8
	private bool created; // 0xF0
	private bool is_module_only; // 0xF1
	private StrongName sn; // 0xF8
	private readonly bool is_compiler_context; // 0x100
	private string versioninfo_culture; // 0x108
	private ModuleBuilder manifest_module; // 0x110

	// Methods
	internal void .ctor(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal); // 0x1008AC364
	private static void basic_init(AssemblyBuilder ab); // 0x1008AC8AC
	public override string get_Location(); // 0x1008AC8B4
	internal void AddPermissionRequests(PermissionSet required, PermissionSet optional, PermissionSet refused); // 0x1008AC940
	public ModuleBuilder DefineDynamicModule(string name); // 0x1008ACBA0
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo); // 0x1008ACE9C
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient); // 0x1008ACBB0
	internal override Module[] GetModulesInternal(); // 0x1008AD8A8
	internal override Type[] GetTypes(bool exportedOnly); // 0x1008AD9A8
	internal bool get_IsCompilerContext(); // 0x1008ADC1C
	internal bool get_IsSave(); // 0x1008AC89C
	internal bool get_IsRun(); // 0x1008ADC24
	internal string get_AssemblyDir(); // 0x1008ADC38
	internal override Module GetManifestModule(); // 0x1008ADC40
	private Exception not_supported(); // 0x1008AC8C4
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists); // 0x1008ACEB0
	internal override AssemblyName UnprotectedGetName(); // 0x1008ADCBC
}

// Namespace: System.Reflection.Emit
public sealed class AssemblyBuilderAccess : Enum // TypeDefIndex: 488
{
	// Fields
	public int value__; // 0x10
	public const AssemblyBuilderAccess Run = 1; // 0x0
	public const AssemblyBuilderAccess Save = 2; // 0x0
	public const AssemblyBuilderAccess RunAndSave = 3; // 0x0
	public const AssemblyBuilderAccess ReflectionOnly = 6; // 0x0

}

// Namespace: System.Reflection.Emit
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 489
{
	// Fields
	private ILGenerator ilgen; // 0x10
	internal Type[] parameters; // 0x18
	private MethodAttributes attrs; // 0x20
	private MethodImplAttributes iattrs; // 0x24
	private int table_idx; // 0x28
	private CallingConventions call_conv; // 0x2C
	private TypeBuilder type; // 0x30
	internal ParameterBuilder[] pinfo; // 0x38
	private bool init_locals; // 0x40
	private Type[][] paramModReq; // 0x48
	private Type[][] paramModOpt; // 0x50

	// Methods
	internal void .ctor(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x1008ADF10
	public override CallingConventions get_CallingConvention(); // 0x1008AE110
	internal TypeBuilder get_TypeBuilder(); // 0x1008AE118
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x1008AE120
	public override ParameterInfo[] GetParameters(); // 0x1008AE128
	internal ParameterInfo[] GetParametersInternal(); // 0x1008AE2E4
	internal override int GetParameterCount(); // 0x1008AE488
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008AE4A0
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008AE52C
	public override RuntimeMethodHandle get_MethodHandle(); // 0x1008AE53C
	public override MethodAttributes get_Attributes(); // 0x1008AE54C
	public override Type get_ReflectedType(); // 0x1008AE554
	public override Type get_DeclaringType(); // 0x1008AE55C
	public override string get_Name(); // 0x1008AE564
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008AE5F8
	public override object[] GetCustomAttributes(bool inherit); // 0x1008AE608
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008AE6A8
	public ILGenerator GetILGenerator(); // 0x1008AE750
	public ILGenerator GetILGenerator(int streamSize); // 0x1008AE758
	public MethodToken GetToken(); // 0x1008AE100
	public override Module get_Module(); // 0x1008AE958
	public override string ToString(); // 0x1008AE960
	internal void fixup(); // 0x1008AE9FC
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x1008AE0E4
	private bool get_IsCompilerContext(); // 0x1008AE174
	private Exception not_supported(); // 0x1008AE4B0
	private Exception not_created(); // 0x1008AE268
}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 490
{
	// Fields
	internal Type elementType; // 0x18

	// Methods
	internal void .ctor(Type elementType); // 0x1008ADD30
	internal static void create_unmanaged_type(Type type); // 0x1008AED9C
	internal abstract string FormatName(string elementName); // 0
	public override Type GetInterface(string name, bool ignoreCase); // 0x1008AEDA4
	public override Type[] GetInterfaces(); // 0x1008AEDF4
	public override Type GetElementType(); // 0x1008AEE44
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x1008AEE4C
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x1008AEE9C
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x1008AEEEC
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x1008AEF3C
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008AEF8C
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x1008AEFDC
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x1008AF02C
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1008AF07C
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008AF0CC
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x1008AF11C
	protected override bool HasElementTypeImpl(); // 0x1008AF138
	protected override bool IsArrayImpl(); // 0x1008AF140
	protected override bool IsByRefImpl(); // 0x1008AF148
	protected override bool IsPointerImpl(); // 0x1008AF150
	protected override bool IsPrimitiveImpl(); // 0x1008AF158
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x1008AF160
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x1008AF1B0
	public override bool IsInstanceOfType(object o); // 0x1008AF200
	public override bool IsAssignableFrom(Type c); // 0x1008AF208
	public override bool get_ContainsGenericParameters(); // 0x1008AF210
	public override Type MakeGenericType(Type[] typeArguments); // 0x1008AF268
	public override Type MakeByRefType(); // 0x1008AF2B8
	public override string ToString(); // 0x1008AF318
	public override Assembly get_Assembly(); // 0x1008AF3A8
	public override string get_AssemblyQualifiedName(); // 0x1008AF3FC
	public override string get_FullName(); // 0x1008AF558
	public override string get_Name(); // 0x1008AF5E8
	public override Module get_Module(); // 0x1008AF678
	public override string get_Namespace(); // 0x1008AF6CC
	public override RuntimeTypeHandle get_TypeHandle(); // 0x1008AF724
	public override Type get_UnderlyingSystemType(); // 0x1008AF774
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008AF798
	public override object[] GetCustomAttributes(bool inherit); // 0x1008AF7E8
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008AF838
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 491
{
	// Methods
	internal void .ctor(Type elementType); // 0x1008ADD2C
	protected override bool IsByRefImpl(); // 0x1008ADDAC
	public override Type get_BaseType(); // 0x1008ADDB4
	internal override string FormatName(string elementName); // 0x1008ADE24
	public override Type MakeByRefType(); // 0x1008ADEB0
}

// Namespace: System.Reflection.Emit
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 492
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private string name; // 0x18
	private Type returnType; // 0x20
	private Type[] parameters; // 0x28
	private MethodAttributes attributes; // 0x30
	private CallingConventions callingConvention; // 0x34
	private Module module; // 0x38
	private bool skipVisibility; // 0x40
	private bool init_locals; // 0x41
	private ILGenerator ilgen; // 0x48
	private int nrefs; // 0x50
	private object[] refs; // 0x58
	private Type owner; // 0x60
	private Delegate deleg; // 0x68
	private MonoMethod method; // 0x70
	private ParameterBuilder[] pinfo; // 0x78
	internal bool creating; // 0x80

	// Methods
	public void .ctor(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x1008AF888
	public void .ctor(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x1008AF8CC
	private void .ctor(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, Module m, bool skipVisibility, bool anonHosted); // 0x1008AF984
	private void create_dynamic_method(DynamicMethod m); // 0x1008AFC40
	private void destroy_dynamic_method(DynamicMethod m); // 0x1008AFC44
	private void CreateDynMethod(); // 0x1008AFC48
	protected override void Finalize(); // 0x1008AFEEC
	public Delegate CreateDelegate(Type delegateType); // 0x1008AFF38
	public override MethodInfo GetBaseDefinition(); // 0x1008AFFE0
	public override object[] GetCustomAttributes(bool inherit); // 0x1008AFFE4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008B0034
	public ILGenerator GetILGenerator(); // 0x1008B0084
	public ILGenerator GetILGenerator(int streamSize); // 0x1008B008C
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x1008B0130
	public override ParameterInfo[] GetParameters(); // 0x1008B0148
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008B02EC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008B0448
	public override string ToString(); // 0x1008B0498
	public override MethodAttributes get_Attributes(); // 0x1008B0848
	public override CallingConventions get_CallingConvention(); // 0x1008B0850
	public override Type get_DeclaringType(); // 0x1008B0858
	public override RuntimeMethodHandle get_MethodHandle(); // 0x1008B0860
	public override Module get_Module(); // 0x1008B0138
	public override string get_Name(); // 0x1008B0840
	public override Type get_ReflectedType(); // 0x1008B0868
	public override Type get_ReturnType(); // 0x1008B0838
	internal int AddRef(object reference); // 0x1008B0870
}

// Namespace: 
private class AnonHostModuleHolder // TypeDefIndex: 493
{
	// Fields
	public static Module anon_host_module; // 0x0

	// Methods
	private static void .cctor(); // 0x1008B09D0
}

// Namespace: System.Reflection.Emit
internal class DynamicMethodTokenGenerator : TokenGenerator // TypeDefIndex: 494
{
	// Fields
	private DynamicMethod m; // 0x10

	// Methods
	public void .ctor(DynamicMethod m); // 0x1008B0140
	public int GetToken(string str); // 0x1008B0A7C
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x1008B0A94
	public int GetToken(MemberInfo member); // 0x1008B0AE8
}

// Namespace: System.Reflection.Emit
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 495
{
	// Fields
	private TypeBuilder _tb; // 0x18
	private Type _underlyingType; // 0x20

	// Methods
	public override Assembly get_Assembly(); // 0x1008B0B00
	public override string get_AssemblyQualifiedName(); // 0x1008B0B1C
	public override Type get_BaseType(); // 0x1008B0B38
	public override Type get_DeclaringType(); // 0x1008B0B54
	public override string get_FullName(); // 0x1008B0B70
	public override Module get_Module(); // 0x1008B0B8C
	public override string get_Name(); // 0x1008B0BA8
	public override string get_Namespace(); // 0x1008B0BC4
	public override Type get_ReflectedType(); // 0x1008B0BE0
	public override RuntimeTypeHandle get_TypeHandle(); // 0x1008B0BFC
	public override Type get_UnderlyingSystemType(); // 0x1008B0C18
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x1008B0C20
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008B0C3C
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x1008B0C58
	public override object[] GetCustomAttributes(bool inherit); // 0x1008B0C74
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008B0C90
	public override Type GetElementType(); // 0x1008B0CAC
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x1008B0CC8
	public override EventInfo[] GetEvents(); // 0x1008B0CE4
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x1008B0D00
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x1008B0D1C
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x1008B0D38
	public override Type GetInterface(string name, bool ignoreCase); // 0x1008B0D54
	public override Type[] GetInterfaces(); // 0x1008B0D70
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008B0D8C
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x1008B0DB4
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x1008B0DD0
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1008B0DEC
	protected override bool HasElementTypeImpl(); // 0x1008B0E78
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x1008B0E94
	protected override bool IsArrayImpl(); // 0x1008B0EB8
	protected override bool IsByRefImpl(); // 0x1008B0EC0
	protected override bool IsPointerImpl(); // 0x1008B0EC8
	protected override bool IsPrimitiveImpl(); // 0x1008B0ED0
	protected override bool IsValueTypeImpl(); // 0x1008B0ED8
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008B0EE0
	public override Type MakeByRefType(); // 0x1008B0EFC
	private Exception CreateNotSupportedException(); // 0x1008B0DFC
}

// Namespace: System.Reflection.Emit
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 496
{
	// Fields
	private FieldAttributes attrs; // 0x10
	private Type type; // 0x18
	private string name; // 0x20
	internal TypeBuilder typeb; // 0x28
	private UnmanagedMarshal marshal_info; // 0x30

	// Methods
	public override FieldAttributes get_Attributes(); // 0x1008B0F5C
	public override Type get_DeclaringType(); // 0x1008B0F64
	public override RuntimeFieldHandle get_FieldHandle(); // 0x1008B0F6C
	public override Type get_FieldType(); // 0x1008B0FF8
	public override string get_Name(); // 0x1008B1000
	public override Type get_ReflectedType(); // 0x1008B1008
	public override object[] GetCustomAttributes(bool inherit); // 0x1008B1010
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008B10A4
	public override object GetValue(object obj); // 0x1008B1140
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008B1150
	internal override int GetFieldOffset(); // 0x1008B1160
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x1008B1168
	internal override UnmanagedMarshal get_UMarshal(); // 0x1008B1178
	private Exception CreateNotSupportedException(); // 0x1008B0F7C
	public override Module get_Module(); // 0x1008B1180
}

// Namespace: System.Reflection.Emit
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 497
{
	// Fields
	private TypeBuilder tbuilder; // 0x18
	private MethodBuilder mbuilder; // 0x20
	private string name; // 0x28
	private Type base_type; // 0x30

	// Methods
	public override bool IsSubclassOf(Type c); // 0x1008B1188
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x1008B12EC
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008B1380
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x1008B1390
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x1008B13A0
	public override EventInfo[] GetEvents(); // 0x1008B13B0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x1008B13C0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x1008B13D0
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x1008B13E0
	public override Type GetInterface(string name, bool ignoreCase); // 0x1008B13F0
	public override Type[] GetInterfaces(); // 0x1008B1400
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x1008B1410
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008B1420
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x1008B1430
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1008B1440
	protected override bool HasElementTypeImpl(); // 0x1008B1450
	public override bool IsAssignableFrom(Type c); // 0x1008B1458
	public override bool IsInstanceOfType(object o); // 0x1008B1468
	protected override bool IsArrayImpl(); // 0x1008B1478
	protected override bool IsByRefImpl(); // 0x1008B1480
	protected override bool IsPointerImpl(); // 0x1008B1488
	protected override bool IsPrimitiveImpl(); // 0x1008B1490
	protected override bool IsValueTypeImpl(); // 0x1008B1498
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x1008B14AC
	public override Type GetElementType(); // 0x1008B14BC
	public override Type get_UnderlyingSystemType(); // 0x1008B14CC
	public override Assembly get_Assembly(); // 0x1008B14D0
	public override string get_AssemblyQualifiedName(); // 0x1008B14EC
	public override Type get_BaseType(); // 0x1008B12E4
	public override string get_FullName(); // 0x1008B14F4
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008B14FC
	public override object[] GetCustomAttributes(bool inherit); // 0x1008B150C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008B151C
	public override string get_Name(); // 0x1008B152C
	public override string get_Namespace(); // 0x1008B1534
	public override Module get_Module(); // 0x1008B153C
	public override Type get_DeclaringType(); // 0x1008B1558
	public override Type get_ReflectedType(); // 0x1008B157C
	public override RuntimeTypeHandle get_TypeHandle(); // 0x1008B1598
	public override Type[] GetGenericArguments(); // 0x1008B15A8
	public override Type GetGenericTypeDefinition(); // 0x1008B15FC
	public override bool get_ContainsGenericParameters(); // 0x1008B1650
	public override bool get_IsGenericParameter(); // 0x1008B1658
	public override bool get_IsGenericType(); // 0x1008B1660
	public override bool get_IsGenericTypeDefinition(); // 0x1008B1668
	private Exception not_supported(); // 0x1008B128C
	public override string ToString(); // 0x1008B1670
	public override bool Equals(object o); // 0x1008B1678
	public override int GetHashCode(); // 0x1008B1680
	public override Type MakeByRefType(); // 0x1008B1688
	public override Type MakeGenericType(Type[] typeArguments); // 0x1008B16E8
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 498
{
	// Fields
	public MemberInfo member; // 0x10
	public int code_pos; // 0x18

}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 499
{
	// Methods
	public abstract int GetToken(string str); // 0
	public abstract int GetToken(MemberInfo member); // 0
	public abstract int GetToken(MethodInfo method, Type[] opt_param_types); // 0
}

// Namespace: System.Reflection.Emit
public class ILGenerator : _ILGenerator // TypeDefIndex: 500
{
	// Fields
	private static readonly Type void_type; // 0x0
	private byte[] code; // 0x10
	private int code_len; // 0x18
	private int max_stack; // 0x1C
	private int cur_stack; // 0x20
	private LocalBuilder[] locals; // 0x28
	private int num_token_fixups; // 0x30
	private ILTokenInfo[] token_fixups; // 0x38
	private LabelData[] labels; // 0x40
	private int num_labels; // 0x48
	private LabelFixup[] fixups; // 0x50
	private int num_fixups; // 0x58
	internal Module module; // 0x60
	private TokenGenerator token_gen; // 0x68

	// Methods
	internal void .ctor(Module m, TokenGenerator token_gen, int size); // 0x1008AE8A4
	private static void .cctor(); // 0x1008B16F0
	private void add_token_fixup(MemberInfo mi); // 0x1008B1778
	private void make_room(int nbytes); // 0x1008B1898
	private void emit_int(int val); // 0x1008B1958
	private void ll_emit(OpCode opcode); // 0x1008B1A50
	private static int target_len(OpCode opcode); // 0x1008B1C14
	public virtual LocalBuilder DeclareLocal(Type localType); // 0x1008B1C48
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned); // 0x1008B1CA8
	public virtual Label DefineLabel(); // 0x1008B1EE8
	public virtual void Emit(OpCode opcode); // 0x1008B2000
	public virtual void Emit(OpCode opcode, byte arg); // 0x1008B2030
	public virtual void Emit(OpCode opcode, ConstructorInfo con); // 0x1008B20A4
	public virtual void Emit(OpCode opcode, FieldInfo field); // 0x1008B2290
	public virtual void Emit(OpCode opcode, int arg); // 0x1008B2428
	public virtual void Emit(OpCode opcode, long arg); // 0x1008B2470
	public virtual void Emit(OpCode opcode, Label label); // 0x1008B2650
	public virtual void Emit(OpCode opcode, LocalBuilder local); // 0x1008B28B8
	public virtual void Emit(OpCode opcode, MethodInfo meth); // 0x1008B2D34
	private void Emit(OpCode opcode, MethodInfo method, int token); // 0x1008B30B0
	public virtual void Emit(OpCode opcode, string str); // 0x1008B325C
	public virtual void Emit(OpCode opcode, Type cls); // 0x1008B3380
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes); // 0x1008B34A4
	public virtual void MarkLabel(Label loc); // 0x1008B3778
	internal void label_fixup(); // 0x1008AEB38
	internal static int Mono_GetCurrentOffset(ILGenerator ig); // 0x1008AEB20
}

// Namespace: 
private struct LabelFixup // TypeDefIndex: 501
{
	// Fields
	public int offset; // 0x10
	public int pos; // 0x14
	public int label_idx; // 0x18

}

// Namespace: 
private struct LabelData // TypeDefIndex: 502
{
	// Fields
	public int addr; // 0x10
	public int maxStack; // 0x14

	// Methods
	public void .ctor(int addr, int maxStack); // 0x1008B38F0
}

// Namespace: System.Reflection.Emit
public struct Label // TypeDefIndex: 503
{
	// Fields
	internal int label; // 0x10

	// Methods
	internal void .ctor(int val); // 0x1008B3974
	public override bool Equals(object obj); // 0x1008B3A04
	public override int GetHashCode(); // 0x1008B3A14
}

// Namespace: System.Reflection.Emit
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 504
{
	// Fields
	internal ILGenerator ilgen; // 0x20

	// Methods
	internal void .ctor(Type t, ILGenerator ilgen); // 0x1008B1EAC
}

// Namespace: System.Reflection.Emit
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 505
{
	// Fields
	private Type rtype; // 0x10
	internal Type[] parameters; // 0x18
	private MethodAttributes attrs; // 0x20
	private MethodImplAttributes iattrs; // 0x24
	private string name; // 0x28
	private int table_idx; // 0x30
	private byte[] code; // 0x38
	private ILGenerator ilgen; // 0x40
	private TypeBuilder type; // 0x48
	internal ParameterBuilder[] pinfo; // 0x50
	private MethodInfo override_method; // 0x58
	private CallingConventions call_conv; // 0x60
	private bool init_locals; // 0x64
	internal GenericTypeParameterBuilder[] generic_params; // 0x68
	private Type[] returnModReq; // 0x70
	private Type[] returnModOpt; // 0x78
	private Type[][] paramModReq; // 0x80
	private Type[][] paramModOpt; // 0x88

	// Methods
	internal void .ctor(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x1008B3A3C
	public override bool get_ContainsGenericParameters(); // 0x1008B3C50
	public override RuntimeMethodHandle get_MethodHandle(); // 0x1008B3CA0
	public override Type get_ReturnType(); // 0x1008B3D2C
	public override Type get_ReflectedType(); // 0x1008B3D34
	public override Type get_DeclaringType(); // 0x1008B1574
	public override string get_Name(); // 0x1008B3D3C
	public override MethodAttributes get_Attributes(); // 0x1008B3D44
	public override CallingConventions get_CallingConvention(); // 0x1008B3D4C
	public MethodToken GetToken(); // 0x1008B3C44
	public override MethodInfo GetBaseDefinition(); // 0x1008B3D54
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x1008B3D58
	public override ParameterInfo[] GetParameters(); // 0x1008B3D60
	internal override int GetParameterCount(); // 0x1008B3F0C
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x1008B3F24
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008B3F34
	public override object[] GetCustomAttributes(bool inherit); // 0x1008B3F44
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008B3FD8
	public ILGenerator GetILGenerator(); // 0x1008B4074
	public ILGenerator GetILGenerator(int size); // 0x1008B407C
	internal void check_override(); // 0x1008B4194
	internal void fixup(); // 0x1008B426C
	public override string ToString(); // 0x1008B43D0
	public override bool Equals(object obj); // 0x1008B45CC
	public override int GetHashCode(); // 0x1008B45D8
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x1008B3C28
	internal void set_override(MethodInfo mdecl); // 0x1008B45F4
	private Exception NotSupported(); // 0x1008B3CB0
	public override MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x1008B45FC
	public override bool get_IsGenericMethodDefinition(); // 0x1008B4600
	public override bool get_IsGenericMethod(); // 0x1008B4610
	public override Type[] GetGenericArguments(); // 0x1008B4620
	public override Module get_Module(); // 0x1008B4750
}

// Namespace: System.Reflection.Emit
public struct MethodToken // TypeDefIndex: 506
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly MethodToken Empty; // 0x0

	// Methods
	internal void .ctor(int val); // 0x1008B4758
	private static void .cctor(); // 0x1008B4760
	public override bool Equals(object obj); // 0x1008B4864
	public override int GetHashCode(); // 0x1008B486C
	public int get_Token(); // 0x1008B4874
}

// Namespace: System.Reflection.Emit
public class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 507
{
	// Fields
	private int num_types; // 0x40
	private TypeBuilder[] types; // 0x48
	private byte[] guid; // 0x50
	private int table_idx; // 0x58
	internal AssemblyBuilder assemblyb; // 0x60
	private TypeBuilder global_type; // 0x68
	private Hashtable name_cache; // 0x70
	private Hashtable us_string_cache; // 0x78
	private int[] table_indexes; // 0x80
	private bool transient; // 0x88
	private ModuleBuilderTokenGenerator token_gen; // 0x90
	private ISymbolWriter symbolWriter; // 0x98
	private static readonly char[] type_modifiers; // 0x0

	// Methods
	internal void .ctor(AssemblyBuilder assb, string name, string fullyqname, bool emitSymbolInfo, bool transient); // 0x1008AD420
	private static void .cctor(); // 0x1008B4A60
	private static void basic_init(ModuleBuilder ab); // 0x1008B49D8
	private static void set_wrappers_type(ModuleBuilder mb, Type ab); // 0x1008B4A54
	public bool IsTransient(); // 0x1008ADCAC
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent); // 0x1008B4B2C
	private void AddType(TypeBuilder tb); // 0x1008B4B48
	private TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize); // 0x1008B4C84
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces); // 0x1008B4B3C
	public override Type GetType(string className); // 0x1008B4DF0
	private TypeBuilder search_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x1008B4E54
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x1008B4FA0
	private static Type create_modified_type(TypeBuilder tb, string modifiers); // 0x1008B50EC
	private TypeBuilder GetMaybeNested(TypeBuilder t, string className); // 0x1008B50F8
	public override Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x1008B51B8
	internal int get_next_table_index(object obj, int table, bool inc); // 0x1008B4898
	public override Type[] GetTypes(); // 0x1008B54CC
	private static int getUSIndex(ModuleBuilder mb, string str); // 0x1008B5660
	private static int getToken(ModuleBuilder mb, object obj); // 0x1008B566C
	private static int getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types); // 0x1008B5678
	internal int GetToken(string str); // 0x1008B5688
	internal int GetToken(MemberInfo member); // 0x1008B57E8
	internal int GetToken(MethodInfo method, Type[] opt_param_types); // 0x1008B585C
	internal void RegisterToken(object obj, int token); // 0x1008AE10C
	internal TokenGenerator GetTokenGenerator(); // 0x1008AE834
	internal string get_FileName(); // 0x1008ADCB4
	internal void CreateGlobalType(); // 0x1008B49E0
}

// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator // TypeDefIndex: 508
{
	// Fields
	private ModuleBuilder mb; // 0x10

	// Methods
	public void .ctor(ModuleBuilder mb); // 0x1008B58D8
	public int GetToken(string str); // 0x1008B5904
	public int GetToken(MemberInfo member); // 0x1008B5920
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x1008B593C
}

// Namespace: System.Reflection.Emit
internal class OpCodeNames // TypeDefIndex: 509
{
	// Fields
	internal static readonly string[] names; // 0x0

	// Methods
	private static void .cctor(); // 0x1008B5C4C
}

// Namespace: System.Reflection.Emit
public struct OpCode // TypeDefIndex: 510
{
	// Fields
	internal byte op1; // 0x10
	internal byte op2; // 0x11
	private byte push; // 0x12
	private byte pop; // 0x13
	private byte size; // 0x14
	private byte type; // 0x15
	private byte args; // 0x16
	private byte flow; // 0x17

	// Methods
	internal void .ctor(int p, int q); // 0x1008B598C
	public override int GetHashCode(); // 0x1008B5AD0
	public override bool Equals(object obj); // 0x1008B5B74
	public override string ToString(); // 0x1008B5B7C
	public string get_Name(); // 0x1008B5B84
	public int get_Size(); // 0x1008B5B94
	public OperandType get_OperandType(); // 0x1008B5BA4
	public StackBehaviour get_StackBehaviourPop(); // 0x1008B5BB4
	public StackBehaviour get_StackBehaviourPush(); // 0x1008B5BC4
	public short get_Value(); // 0x1008B5BEC
	public static bool op_Equality(OpCode a, OpCode b); // 0x1008B5C0C
}

// Namespace: System.Reflection.Emit
public class OpCodes // TypeDefIndex: 511
{
	// Fields
	public static readonly OpCode Nop; // 0x0
	public static readonly OpCode Break; // 0x8
	public static readonly OpCode Ldarg_0; // 0x10
	public static readonly OpCode Ldarg_1; // 0x18
	public static readonly OpCode Ldarg_2; // 0x20
	public static readonly OpCode Ldarg_3; // 0x28
	public static readonly OpCode Ldloc_0; // 0x30
	public static readonly OpCode Ldloc_1; // 0x38
	public static readonly OpCode Ldloc_2; // 0x40
	public static readonly OpCode Ldloc_3; // 0x48
	public static readonly OpCode Stloc_0; // 0x50
	public static readonly OpCode Stloc_1; // 0x58
	public static readonly OpCode Stloc_2; // 0x60
	public static readonly OpCode Stloc_3; // 0x68
	public static readonly OpCode Ldarg_S; // 0x70
	public static readonly OpCode Ldarga_S; // 0x78
	public static readonly OpCode Starg_S; // 0x80
	public static readonly OpCode Ldloc_S; // 0x88
	public static readonly OpCode Ldloca_S; // 0x90
	public static readonly OpCode Stloc_S; // 0x98
	public static readonly OpCode Ldnull; // 0xA0
	public static readonly OpCode Ldc_I4_M1; // 0xA8
	public static readonly OpCode Ldc_I4_0; // 0xB0
	public static readonly OpCode Ldc_I4_1; // 0xB8
	public static readonly OpCode Ldc_I4_2; // 0xC0
	public static readonly OpCode Ldc_I4_3; // 0xC8
	public static readonly OpCode Ldc_I4_4; // 0xD0
	public static readonly OpCode Ldc_I4_5; // 0xD8
	public static readonly OpCode Ldc_I4_6; // 0xE0
	public static readonly OpCode Ldc_I4_7; // 0xE8
	public static readonly OpCode Ldc_I4_8; // 0xF0
	public static readonly OpCode Ldc_I4_S; // 0xF8
	public static readonly OpCode Ldc_I4; // 0x100
	public static readonly OpCode Ldc_I8; // 0x108
	public static readonly OpCode Ldc_R4; // 0x110
	public static readonly OpCode Ldc_R8; // 0x118
	public static readonly OpCode Dup; // 0x120
	public static readonly OpCode Pop; // 0x128
	public static readonly OpCode Jmp; // 0x130
	public static readonly OpCode Call; // 0x138
	public static readonly OpCode Calli; // 0x140
	public static readonly OpCode Ret; // 0x148
	public static readonly OpCode Br_S; // 0x150
	public static readonly OpCode Brfalse_S; // 0x158
	public static readonly OpCode Brtrue_S; // 0x160
	public static readonly OpCode Beq_S; // 0x168
	public static readonly OpCode Bge_S; // 0x170
	public static readonly OpCode Bgt_S; // 0x178
	public static readonly OpCode Ble_S; // 0x180
	public static readonly OpCode Blt_S; // 0x188
	public static readonly OpCode Bne_Un_S; // 0x190
	public static readonly OpCode Bge_Un_S; // 0x198
	public static readonly OpCode Bgt_Un_S; // 0x1A0
	public static readonly OpCode Ble_Un_S; // 0x1A8
	public static readonly OpCode Blt_Un_S; // 0x1B0
	public static readonly OpCode Br; // 0x1B8
	public static readonly OpCode Brfalse; // 0x1C0
	public static readonly OpCode Brtrue; // 0x1C8
	public static readonly OpCode Beq; // 0x1D0
	public static readonly OpCode Bge; // 0x1D8
	public static readonly OpCode Bgt; // 0x1E0
	public static readonly OpCode Ble; // 0x1E8
	public static readonly OpCode Blt; // 0x1F0
	public static readonly OpCode Bne_Un; // 0x1F8
	public static readonly OpCode Bge_Un; // 0x200
	public static readonly OpCode Bgt_Un; // 0x208
	public static readonly OpCode Ble_Un; // 0x210
	public static readonly OpCode Blt_Un; // 0x218
	public static readonly OpCode Switch; // 0x220
	public static readonly OpCode Ldind_I1; // 0x228
	public static readonly OpCode Ldind_U1; // 0x230
	public static readonly OpCode Ldind_I2; // 0x238
	public static readonly OpCode Ldind_U2; // 0x240
	public static readonly OpCode Ldind_I4; // 0x248
	public static readonly OpCode Ldind_U4; // 0x250
	public static readonly OpCode Ldind_I8; // 0x258
	public static readonly OpCode Ldind_I; // 0x260
	public static readonly OpCode Ldind_R4; // 0x268
	public static readonly OpCode Ldind_R8; // 0x270
	public static readonly OpCode Ldind_Ref; // 0x278
	public static readonly OpCode Stind_Ref; // 0x280
	public static readonly OpCode Stind_I1; // 0x288
	public static readonly OpCode Stind_I2; // 0x290
	public static readonly OpCode Stind_I4; // 0x298
	public static readonly OpCode Stind_I8; // 0x2A0
	public static readonly OpCode Stind_R4; // 0x2A8
	public static readonly OpCode Stind_R8; // 0x2B0
	public static readonly OpCode Add; // 0x2B8
	public static readonly OpCode Sub; // 0x2C0
	public static readonly OpCode Mul; // 0x2C8
	public static readonly OpCode Div; // 0x2D0
	public static readonly OpCode Div_Un; // 0x2D8
	public static readonly OpCode Rem; // 0x2E0
	public static readonly OpCode Rem_Un; // 0x2E8
	public static readonly OpCode And; // 0x2F0
	public static readonly OpCode Or; // 0x2F8
	public static readonly OpCode Xor; // 0x300
	public static readonly OpCode Shl; // 0x308
	public static readonly OpCode Shr; // 0x310
	public static readonly OpCode Shr_Un; // 0x318
	public static readonly OpCode Neg; // 0x320
	public static readonly OpCode Not; // 0x328
	public static readonly OpCode Conv_I1; // 0x330
	public static readonly OpCode Conv_I2; // 0x338
	public static readonly OpCode Conv_I4; // 0x340
	public static readonly OpCode Conv_I8; // 0x348
	public static readonly OpCode Conv_R4; // 0x350
	public static readonly OpCode Conv_R8; // 0x358
	public static readonly OpCode Conv_U4; // 0x360
	public static readonly OpCode Conv_U8; // 0x368
	public static readonly OpCode Callvirt; // 0x370
	public static readonly OpCode Cpobj; // 0x378
	public static readonly OpCode Ldobj; // 0x380
	public static readonly OpCode Ldstr; // 0x388
	public static readonly OpCode Newobj; // 0x390
	public static readonly OpCode Castclass; // 0x398
	public static readonly OpCode Isinst; // 0x3A0
	public static readonly OpCode Conv_R_Un; // 0x3A8
	public static readonly OpCode Unbox; // 0x3B0
	public static readonly OpCode Throw; // 0x3B8
	public static readonly OpCode Ldfld; // 0x3C0
	public static readonly OpCode Ldflda; // 0x3C8
	public static readonly OpCode Stfld; // 0x3D0
	public static readonly OpCode Ldsfld; // 0x3D8
	public static readonly OpCode Ldsflda; // 0x3E0
	public static readonly OpCode Stsfld; // 0x3E8
	public static readonly OpCode Stobj; // 0x3F0
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x3F8
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x400
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x408
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x410
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x418
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x420
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x428
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x430
	public static readonly OpCode Conv_Ovf_I_Un; // 0x438
	public static readonly OpCode Conv_Ovf_U_Un; // 0x440
	public static readonly OpCode Box; // 0x448
	public static readonly OpCode Newarr; // 0x450
	public static readonly OpCode Ldlen; // 0x458
	public static readonly OpCode Ldelema; // 0x460
	public static readonly OpCode Ldelem_I1; // 0x468
	public static readonly OpCode Ldelem_U1; // 0x470
	public static readonly OpCode Ldelem_I2; // 0x478
	public static readonly OpCode Ldelem_U2; // 0x480
	public static readonly OpCode Ldelem_I4; // 0x488
	public static readonly OpCode Ldelem_U4; // 0x490
	public static readonly OpCode Ldelem_I8; // 0x498
	public static readonly OpCode Ldelem_I; // 0x4A0
	public static readonly OpCode Ldelem_R4; // 0x4A8
	public static readonly OpCode Ldelem_R8; // 0x4B0
	public static readonly OpCode Ldelem_Ref; // 0x4B8
	public static readonly OpCode Stelem_I; // 0x4C0
	public static readonly OpCode Stelem_I1; // 0x4C8
	public static readonly OpCode Stelem_I2; // 0x4D0
	public static readonly OpCode Stelem_I4; // 0x4D8
	public static readonly OpCode Stelem_I8; // 0x4E0
	public static readonly OpCode Stelem_R4; // 0x4E8
	public static readonly OpCode Stelem_R8; // 0x4F0
	public static readonly OpCode Stelem_Ref; // 0x4F8
	public static readonly OpCode Ldelem; // 0x500
	public static readonly OpCode Stelem; // 0x508
	public static readonly OpCode Unbox_Any; // 0x510
	public static readonly OpCode Conv_Ovf_I1; // 0x518
	public static readonly OpCode Conv_Ovf_U1; // 0x520
	public static readonly OpCode Conv_Ovf_I2; // 0x528
	public static readonly OpCode Conv_Ovf_U2; // 0x530
	public static readonly OpCode Conv_Ovf_I4; // 0x538
	public static readonly OpCode Conv_Ovf_U4; // 0x540
	public static readonly OpCode Conv_Ovf_I8; // 0x548
	public static readonly OpCode Conv_Ovf_U8; // 0x550
	public static readonly OpCode Refanyval; // 0x558
	public static readonly OpCode Ckfinite; // 0x560
	public static readonly OpCode Mkrefany; // 0x568
	public static readonly OpCode Ldtoken; // 0x570
	public static readonly OpCode Conv_U2; // 0x578
	public static readonly OpCode Conv_U1; // 0x580
	public static readonly OpCode Conv_I; // 0x588
	public static readonly OpCode Conv_Ovf_I; // 0x590
	public static readonly OpCode Conv_Ovf_U; // 0x598
	public static readonly OpCode Add_Ovf; // 0x5A0
	public static readonly OpCode Add_Ovf_Un; // 0x5A8
	public static readonly OpCode Mul_Ovf; // 0x5B0
	public static readonly OpCode Mul_Ovf_Un; // 0x5B8
	public static readonly OpCode Sub_Ovf; // 0x5C0
	public static readonly OpCode Sub_Ovf_Un; // 0x5C8
	public static readonly OpCode Endfinally; // 0x5D0
	public static readonly OpCode Leave; // 0x5D8
	public static readonly OpCode Leave_S; // 0x5E0
	public static readonly OpCode Stind_I; // 0x5E8
	public static readonly OpCode Conv_U; // 0x5F0
	public static readonly OpCode Prefix7; // 0x5F8
	public static readonly OpCode Prefix6; // 0x600
	public static readonly OpCode Prefix5; // 0x608
	public static readonly OpCode Prefix4; // 0x610
	public static readonly OpCode Prefix3; // 0x618
	public static readonly OpCode Prefix2; // 0x620
	public static readonly OpCode Prefix1; // 0x628
	public static readonly OpCode Prefixref; // 0x630
	public static readonly OpCode Arglist; // 0x638
	public static readonly OpCode Ceq; // 0x640
	public static readonly OpCode Cgt; // 0x648
	public static readonly OpCode Cgt_Un; // 0x650
	public static readonly OpCode Clt; // 0x658
	public static readonly OpCode Clt_Un; // 0x660
	public static readonly OpCode Ldftn; // 0x668
	public static readonly OpCode Ldvirtftn; // 0x670
	public static readonly OpCode Ldarg; // 0x678
	public static readonly OpCode Ldarga; // 0x680
	public static readonly OpCode Starg; // 0x688
	public static readonly OpCode Ldloc; // 0x690
	public static readonly OpCode Ldloca; // 0x698
	public static readonly OpCode Stloc; // 0x6A0
	public static readonly OpCode Localloc; // 0x6A8
	public static readonly OpCode Endfilter; // 0x6B0
	public static readonly OpCode Unaligned; // 0x6B8
	public static readonly OpCode Volatile; // 0x6C0
	public static readonly OpCode Tailcall; // 0x6C8
	public static readonly OpCode Initobj; // 0x6D0
	public static readonly OpCode Constrained; // 0x6D8
	public static readonly OpCode Cpblk; // 0x6E0
	public static readonly OpCode Initblk; // 0x6E8
	public static readonly OpCode Rethrow; // 0x6F0
	public static readonly OpCode Sizeof; // 0x6F8
	public static readonly OpCode Refanytype; // 0x700
	public static readonly OpCode Readonly; // 0x708

	// Methods
	private static void .cctor(); // 0x1008B9C54
}

// Namespace: System.Reflection.Emit
public sealed class OperandType : Enum // TypeDefIndex: 512
{
	// Fields
	public int value__; // 0x10
	public const OperandType InlineBrTarget = 0; // 0x0
	public const OperandType InlineField = 1; // 0x0
	public const OperandType InlineI = 2; // 0x0
	public const OperandType InlineI8 = 3; // 0x0
	public const OperandType InlineMethod = 4; // 0x0
	public const OperandType InlineNone = 5; // 0x0
	public const OperandType InlinePhi = 6; // 0x0
	public const OperandType InlineR = 7; // 0x0
	public const OperandType InlineSig = 9; // 0x0
	public const OperandType InlineString = 10; // 0x0
	public const OperandType InlineSwitch = 11; // 0x0
	public const OperandType InlineTok = 12; // 0x0
	public const OperandType InlineType = 13; // 0x0
	public const OperandType InlineVar = 14; // 0x0
	public const OperandType ShortInlineBrTarget = 15; // 0x0
	public const OperandType ShortInlineI = 16; // 0x0
	public const OperandType ShortInlineR = 17; // 0x0
	public const OperandType ShortInlineVar = 18; // 0x0

}

// Namespace: System.Reflection.Emit
public sealed class PackingSize : Enum // TypeDefIndex: 513
{
	// Fields
	public int value__; // 0x10
	public const PackingSize Unspecified = 0; // 0x0
	public const PackingSize Size1 = 1; // 0x0
	public const PackingSize Size2 = 2; // 0x0
	public const PackingSize Size4 = 4; // 0x0
	public const PackingSize Size8 = 8; // 0x0
	public const PackingSize Size16 = 16; // 0x0
	public const PackingSize Size32 = 32; // 0x0
	public const PackingSize Size64 = 64; // 0x0
	public const PackingSize Size128 = 128; // 0x0

}

// Namespace: System.Reflection.Emit
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 514
{
	// Fields
	private string name; // 0x10
	private ParameterAttributes attrs; // 0x18
	private int position; // 0x1C

	// Methods
	public virtual int get_Attributes(); // 0x1008BAC3C
	public virtual string get_Name(); // 0x1008BAC44
	public virtual int get_Position(); // 0x1008BAC4C
}

// Namespace: System.Reflection.Emit
public sealed class PEFileKinds : Enum // TypeDefIndex: 515
{
	// Fields
	public int value__; // 0x10
	public const PEFileKinds Dll = 1; // 0x0
	public const PEFileKinds ConsoleApplication = 2; // 0x0
	public const PEFileKinds WindowApplication = 3; // 0x0

}

// Namespace: System.Reflection.Emit
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 516
{
	// Fields
	private PropertyAttributes attrs; // 0x10
	private string name; // 0x18
	private Type type; // 0x20
	private MethodBuilder set_method; // 0x28
	private MethodBuilder get_method; // 0x30
	internal TypeBuilder typeb; // 0x38

	// Methods
	public override PropertyAttributes get_Attributes(); // 0x1008BAC54
	public override bool get_CanRead(); // 0x1008BAC5C
	public override bool get_CanWrite(); // 0x1008BAC6C
	public override Type get_DeclaringType(); // 0x1008BAC7C
	public override string get_Name(); // 0x1008BAC84
	public override Type get_PropertyType(); // 0x1008BAC8C
	public override Type get_ReflectedType(); // 0x1008BAC94
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x1008BAC9C
	public override object[] GetCustomAttributes(bool inherit); // 0x1008BACA4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008BAD1C
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x1008BAD2C
	public override ParameterInfo[] GetIndexParameters(); // 0x1008BAD34
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x1008BAD44
	public override object GetValue(object obj, object[] index); // 0x1008BAD4C
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x1008BAD54
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008BAD64
	public override void SetValue(object obj, object value, object[] index); // 0x1008BAD74
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x1008BAD78
	public override Module get_Module(); // 0x1008BAD7C
	private Exception not_supported(); // 0x1008BACB4
}

// Namespace: System.Reflection.Emit
public sealed class StackBehaviour : Enum // TypeDefIndex: 517
{
	// Fields
	public int value__; // 0x10
	public const StackBehaviour Pop0 = 0; // 0x0
	public const StackBehaviour Pop1 = 1; // 0x0
	public const StackBehaviour Pop1_pop1 = 2; // 0x0
	public const StackBehaviour Popi = 3; // 0x0
	public const StackBehaviour Popi_pop1 = 4; // 0x0
	public const StackBehaviour Popi_popi = 5; // 0x0
	public const StackBehaviour Popi_popi8 = 6; // 0x0
	public const StackBehaviour Popi_popi_popi = 7; // 0x0
	public const StackBehaviour Popi_popr4 = 8; // 0x0
	public const StackBehaviour Popi_popr8 = 9; // 0x0
	public const StackBehaviour Popref = 10; // 0x0
	public const StackBehaviour Popref_pop1 = 11; // 0x0
	public const StackBehaviour Popref_popi = 12; // 0x0
	public const StackBehaviour Popref_popi_popi = 13; // 0x0
	public const StackBehaviour Popref_popi_popi8 = 14; // 0x0
	public const StackBehaviour Popref_popi_popr4 = 15; // 0x0
	public const StackBehaviour Popref_popi_popr8 = 16; // 0x0
	public const StackBehaviour Popref_popi_popref = 17; // 0x0
	public const StackBehaviour Push0 = 18; // 0x0
	public const StackBehaviour Push1 = 19; // 0x0
	public const StackBehaviour Push1_push1 = 20; // 0x0
	public const StackBehaviour Pushi = 21; // 0x0
	public const StackBehaviour Pushi8 = 22; // 0x0
	public const StackBehaviour Pushr4 = 23; // 0x0
	public const StackBehaviour Pushr8 = 24; // 0x0
	public const StackBehaviour Pushref = 25; // 0x0
	public const StackBehaviour Varpop = 26; // 0x0
	public const StackBehaviour Varpush = 27; // 0x0
	public const StackBehaviour Popref_popi_pop1 = 28; // 0x0

}

// Namespace: System.Reflection.Emit
public sealed class TypeBuilder : Type, _TypeBuilder // TypeDefIndex: 518
{
	// Fields
	private string tname; // 0x18
	private string nspace; // 0x20
	private Type parent; // 0x28
	private Type nesting_type; // 0x30
	internal Type[] interfaces; // 0x38
	internal int num_methods; // 0x40
	internal MethodBuilder[] methods; // 0x48
	internal ConstructorBuilder[] ctors; // 0x50
	internal PropertyBuilder[] properties; // 0x58
	internal FieldBuilder[] fields; // 0x60
	internal TypeBuilder[] subtypes; // 0x68
	internal TypeAttributes attrs; // 0x70
	private int table_idx; // 0x74
	private ModuleBuilder pmodule; // 0x78
	private int class_size; // 0x80
	private PackingSize packing_size; // 0x84
	private GenericTypeParameterBuilder[] generic_params; // 0x88
	private Type created; // 0x90
	private string fullname; // 0x98
	private bool createTypeCalled; // 0xA0
	private Type underlying_type; // 0xA8

	// Methods
	internal void .ctor(ModuleBuilder mb, TypeAttributes attr, int table_idx); // 0x1008BAEA4
	internal void .ctor(ModuleBuilder mb, string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, int type_size, Type nesting_type); // 0x1008BB00C
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x1008BB4BC
	private void setup_internal_class(TypeBuilder tb); // 0x1008BB008
	private void create_generic_class(); // 0x1008BB4C4
	public override Assembly get_Assembly(); // 0x1008BB4C8
	public override string get_AssemblyQualifiedName(); // 0x1008BB4EC
	public override Type get_BaseType(); // 0x1008BB5B0
	public override Type get_DeclaringType(); // 0x1008BB5B8
	public override Type get_UnderlyingSystemType(); // 0x1008BB5C0
	private string GetFullName(); // 0x1008BB398
	public override string get_FullName(); // 0x1008BB6B4
	public override Module get_Module(); // 0x1008BB6BC
	public override string get_Name(); // 0x1008BB6C4
	public override string get_Namespace(); // 0x1008BB6CC
	public override Type get_ReflectedType(); // 0x1008BB6D4
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008BB6DC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x1008BBA84
	public override object[] GetCustomAttributes(bool inherit); // 0x1008BBB40
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x1008BBBAC
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes); // 0x1008BBC20
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers); // 0x1008BBC2C
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes); // 0x1008BBE50
	private void append_method(MethodBuilder mb); // 0x1008BC06C
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes); // 0x1008BC1A8
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x1008BC1E4
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x1008BC214
	public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration); // 0x1008BC384
	private Type create_runtime_class(TypeBuilder tb); // 0x1008BC4C4
	private bool is_nested_in(Type t); // 0x1008BC4C8
	private bool has_ctor_method(); // 0x1008BC534
	public Type CreateType(); // 0x1008BC670
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x1008BCFAC
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr); // 0x1008BD084
	public override Type GetElementType(); // 0x1008BD260
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x1008BD2B4
	public override EventInfo[] GetEvents(); // 0x1008BD32C
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x1008BD334
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x1008BD420
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x1008BD5E8
	public override Type GetInterface(string name, bool ignoreCase); // 0x1008BD82C
	public override Type[] GetInterfaces(); // 0x1008BD8A4
	private MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x1008BD9BC
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x1008BDF34
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x1008BDF48
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x1008BE2AC
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x1008BE55C
	protected override bool HasElementTypeImpl(); // 0x1008BE5D4
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x1008BE5E8
	protected override bool IsArrayImpl(); // 0x1008BE6A4
	protected override bool IsByRefImpl(); // 0x1008BE6AC
	protected override bool IsPointerImpl(); // 0x1008BE6B4
	protected override bool IsPrimitiveImpl(); // 0x1008BE6BC
	protected override bool IsValueTypeImpl(); // 0x1008BE6C4
	public override Type MakeByRefType(); // 0x1008BE7E4
	public override Type MakeGenericType(Type[] typeArguments); // 0x1008BE848
	public override RuntimeTypeHandle get_TypeHandle(); // 0x1008BE850
	public void SetParent(Type parent); // 0x1008BCE2C
	internal int get_next_table_index(object obj, int table, bool inc); // 0x1008BE8B0
	internal bool get_IsCompilerContext(); // 0x1008BB370
	internal bool get_is_created(); // 0x1008BB6A4
	private Exception not_supported(); // 0x1008BE56C
	private void check_not_created(); // 0x1008BBDD8
	private void check_created(); // 0x1008BBA68
	private void check_name(string argName, string name); // 0x1008BB27C
	public override string ToString(); // 0x1008BE8CC
	public override bool IsAssignableFrom(Type c); // 0x1008BE8D4
	public override bool IsSubclassOf(Type c); // 0x1008BE8DC
	internal bool IsAssignableTo(Type c); // 0x1008BE8E4
	public override Type[] GetGenericArguments(); // 0x1008BEAC4
	public override Type GetGenericTypeDefinition(); // 0x1008BEB64
	public override bool get_ContainsGenericParameters(); // 0x1008BEBE0
	public override bool get_IsGenericParameter(); // 0x1008BEBF0
	public override bool get_IsGenericTypeDefinition(); // 0x1008BEBF4
	public override bool get_IsGenericType(); // 0x1008BEC04
}

// Namespace: System.Reflection.Emit
public sealed class UnmanagedMarshal // TypeDefIndex: 519
{
	// Fields
	private int count; // 0x10
	private UnmanagedType t; // 0x14
	private UnmanagedType tbase; // 0x18
	private string guid; // 0x20
	private string mcookie; // 0x28
	private string marshaltype; // 0x30
	private Type marshaltyperef; // 0x38
	private int param_num; // 0x40
	private bool has_size; // 0x44

	// Methods
	internal MarshalAsAttribute ToMarshalAsAttribute(); // 0x1008BEC14
}

// Namespace: System.Resources
public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 520
{
	// Methods
	public abstract void Close(); // 0
	public abstract IDictionaryEnumerator GetEnumerator(); // 0
}

// Namespace: System.Resources
public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 521
{
	// Fields
	private string culture; // 0x10

	// Methods
	public void .ctor(string cultureName); // 0x1008C78C8
}

// Namespace: System.Resources
public class ResourceManager // TypeDefIndex: 522
{
	// Fields
	private static Hashtable ResourceCache; // 0x0
	private static Hashtable NonExistent; // 0x8
	public static readonly int HeaderVersionNumber; // 0x10
	public static readonly int MagicNumber; // 0x14
	private Type resourceSetType; // 0x10

	// Methods
	protected void .ctor(); // 0x1008C7958
	private static void .cctor(); // 0x1008C79DC
}

// Namespace: System.Resources
internal sealed class PredefinedResourceType : Enum // TypeDefIndex: 523
{
	// Fields
	public int value__; // 0x10
	public const PredefinedResourceType Null = 0; // 0x0
	public const PredefinedResourceType String = 1; // 0x0
	public const PredefinedResourceType Bool = 2; // 0x0
	public const PredefinedResourceType Char = 3; // 0x0
	public const PredefinedResourceType Byte = 4; // 0x0
	public const PredefinedResourceType SByte = 5; // 0x0
	public const PredefinedResourceType Int16 = 6; // 0x0
	public const PredefinedResourceType UInt16 = 7; // 0x0
	public const PredefinedResourceType Int32 = 8; // 0x0
	public const PredefinedResourceType UInt32 = 9; // 0x0
	public const PredefinedResourceType Int64 = 10; // 0x0
	public const PredefinedResourceType UInt64 = 11; // 0x0
	public const PredefinedResourceType Single = 12; // 0x0
	public const PredefinedResourceType Double = 13; // 0x0
	public const PredefinedResourceType Decimal = 14; // 0x0
	public const PredefinedResourceType DateTime = 15; // 0x0
	public const PredefinedResourceType TimeSpan = 16; // 0x0
	public const PredefinedResourceType ByteArray = 32; // 0x0
	public const PredefinedResourceType Stream = 33; // 0x0
	public const PredefinedResourceType FistCustom = 64; // 0x0

}

// Namespace: System.Resources
public sealed class ResourceReader : IEnumerable, IDisposable, IResourceReader // TypeDefIndex: 524
{
	// Fields
	private BinaryReader reader; // 0x10
	private object readerLock; // 0x18
	private IFormatter formatter; // 0x20
	internal int resourceCount; // 0x28
	private int typeCount; // 0x2C
	private string[] typeNames; // 0x30
	private int[] hashes; // 0x38
	private ResourceInfo[] infos; // 0x40
	private int dataSectionOffset; // 0x48
	private long nameSectionOffset; // 0x50
	private int resource_ver; // 0x58
	private ResourceCacheItem[] cache; // 0x60
	private object cache_lock; // 0x68

	// Methods
	public void .ctor(Stream stream); // 0x1008C7AA4
	public void .ctor(string fileName); // 0x1008C8914
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008C8A40
	private void System.IDisposable.Dispose(); // 0x1008C8B28
	private void ReadHeaders(); // 0x1008C7C64
	private void CreateResourceInfo(long position, ResourceInfo info); // 0x1008C8B94
	private int Read7BitEncodedInt(); // 0x1008C8E2C
	private object ReadValueVer2(int type_index); // 0x1008C8EAC
	private object ReadValueVer1(Type type); // 0x1008C96F4
	private object ReadNonPredefinedValue(Type exp_type); // 0x1008C9574
	private void LoadResourceValues(ResourceCacheItem[] store); // 0x1008C9DFC
	public void Close(); // 0x1008CA128
	public IDictionaryEnumerator GetEnumerator(); // 0x1008CA130
	private void Dispose(bool disposing); // 0x1008C8B30
}

// Namespace: 
private struct ResourceInfo // TypeDefIndex: 525
{
	// Fields
	public readonly long ValuePosition; // 0x10
	public readonly string ResourceName; // 0x18
	public readonly int TypeIndex; // 0x20

	// Methods
	public void .ctor(string resourceName, long valuePosition, int type_index); // 0x1008CA7C0
}

// Namespace: 
private struct ResourceCacheItem // TypeDefIndex: 526
{
	// Fields
	public readonly string ResourceName; // 0x10
	public readonly object ResourceValue; // 0x18

	// Methods
	public void .ctor(string name, object value); // 0x1008CA214
}

// Namespace: 
internal sealed class ResourceEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 527
{
	// Fields
	private ResourceReader reader; // 0x10
	private int index; // 0x18
	private bool finished; // 0x1C

	// Methods
	internal void .ctor(ResourceReader readerToEnumerate); // 0x1008CA1DC
	public DictionaryEntry get_Entry(); // 0x1008CA388
	public object get_Key(); // 0x1008CA470
	public object get_Value(); // 0x1008CA544
	public object get_Current(); // 0x1008CA618
	public bool MoveNext(); // 0x1008CA680
	public void Reset(); // 0x1008CA730
	private void FillCache(); // 0x1008CA250
}

// Namespace: System.Resources
public class ResourceSet : IEnumerable, IDisposable // TypeDefIndex: 528
{
	// Fields
	protected IResourceReader Reader; // 0x10
	protected Hashtable Table; // 0x18
	private bool resources_read; // 0x20
	private bool disposed; // 0x21

	// Methods
	protected void .ctor(); // 0x1008CA86C
	public void .ctor(Stream stream); // 0x1008CA8E0
	internal void .ctor(UnmanagedMemoryStream stream); // 0x1008CA978
	public void .ctor(string fileName); // 0x1008CAA10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008CAAA8
	public void Dispose(); // 0x1008CAAF4
	protected virtual void Dispose(bool disposing); // 0x1008CAB4C
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x1008CAC48
	private object GetObjectInternal(string name, bool ignoreCase); // 0x1008CAD2C
	public virtual object GetObject(string name); // 0x1008CB22C
	public virtual object GetObject(string name, bool ignoreCase); // 0x1008CB234
	protected virtual void ReadResources(); // 0x1008CB238
}

// Namespace: System.Resources
internal class RuntimeResourceSet : ResourceSet // TypeDefIndex: 529
{
	// Methods
	public void .ctor(UnmanagedMemoryStream stream); // 0x1008CB6F8
	public void .ctor(Stream stream); // 0x1008CB6FC
	public void .ctor(string fileName); // 0x1008CB700
	public override object GetObject(string name); // 0x1008CB704
	public override object GetObject(string name, bool ignoreCase); // 0x1008CB8CC
	private object CloneDisposableObjectIfPossible(object value); // 0x1008CB79C
}

// Namespace: System.Resources
public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 530
{
	// Fields
	private Version ver; // 0x10

	// Methods
	public void .ctor(string version); // 0x1008CB968
}

// Namespace: System.Runtime.CompilerServices
public sealed class CompilationRelaxations : Enum // TypeDefIndex: 531
{
	// Fields
	public int value__; // 0x10
	public const CompilationRelaxations NoStringInterning = 8; // 0x0

}

// Namespace: System.Runtime.CompilerServices
public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 532
{
	// Fields
	private int relax; // 0x10

	// Methods
	public void .ctor(CompilationRelaxations relaxations); // 0x1008CB9E4
}

// Namespace: System.Runtime.CompilerServices
public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 533
{
	// Fields
	private LoadHint hint; // 0x10

	// Methods
	public void .ctor(LoadHint loadHintArgument); // 0x1008CBAD0
}

// Namespace: System.Runtime.CompilerServices
public static class IsVolatile // TypeDefIndex: 534
{
}

// Namespace: System.Runtime.CompilerServices
public sealed class LoadHint : Enum // TypeDefIndex: 535
{
	// Fields
	public int value__; // 0x10
	public const LoadHint Default = 0; // 0x0
	public const LoadHint Always = 1; // 0x0
	public const LoadHint Sometimes = 2; // 0x0

}

// Namespace: System.Runtime.CompilerServices
public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 536
{
	// Methods
	public void .ctor(); // 0x1008CBCE0
}

// Namespace: System.Runtime.ConstrainedExecution
public abstract class CriticalFinalizerObject // TypeDefIndex: 537
{
	// Methods
	protected void .ctor(); // 0x1008CBCE8
	protected override void Finalize(); // 0x1008CBCF0
}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class Cer : Enum // TypeDefIndex: 538
{
	// Fields
	public int value__; // 0x10
	public const Cer None = 0; // 0x0
	public const Cer MayFail = 1; // 0x0
	public const Cer Success = 2; // 0x0

}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class Consistency : Enum // TypeDefIndex: 539
{
	// Fields
	public int value__; // 0x10
	public const Consistency MayCorruptAppDomain = 1; // 0x0
	public const Consistency MayCorruptInstance = 2; // 0x0
	public const Consistency MayCorruptProcess = 0; // 0x0
	public const Consistency WillNotCorruptState = 3; // 0x0

}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 540
{
	// Fields
	private Consistency consistency; // 0x10
	private Cer cer; // 0x14

	// Methods
	public void .ctor(Consistency consistencyGuarantee, Cer cer); // 0x1008CBCF8
}

// Namespace: System.Runtime.Hosting
public sealed class ActivationArguments // TypeDefIndex: 541
{
}

// Namespace: System.Runtime.InteropServices
public interface _Activator // TypeDefIndex: 542
{
}

// Namespace: System.Runtime.InteropServices
public interface _Assembly // TypeDefIndex: 543
{
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyBuilder // TypeDefIndex: 544
{
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyName // TypeDefIndex: 545
{
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorBuilder // TypeDefIndex: 546
{
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorInfo // TypeDefIndex: 547
{
}

// Namespace: System.Runtime.InteropServices
public interface _EnumBuilder // TypeDefIndex: 548
{
}

// Namespace: System.Runtime.InteropServices
public interface _EventInfo // TypeDefIndex: 549
{
}

// Namespace: System.Runtime.InteropServices
public interface _FieldBuilder // TypeDefIndex: 550
{
}

// Namespace: System.Runtime.InteropServices
public interface _FieldInfo // TypeDefIndex: 551
{
}

// Namespace: System.Runtime.InteropServices
public interface _ILGenerator // TypeDefIndex: 552
{
}

// Namespace: System.Runtime.InteropServices
public interface _LocalBuilder // TypeDefIndex: 553
{
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBase // TypeDefIndex: 554
{
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBuilder // TypeDefIndex: 555
{
}

// Namespace: System.Runtime.InteropServices
public interface _MethodInfo // TypeDefIndex: 556
{
}

// Namespace: System.Runtime.InteropServices
public interface _Module // TypeDefIndex: 557
{
}

// Namespace: System.Runtime.InteropServices
public interface _ModuleBuilder // TypeDefIndex: 558
{
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterBuilder // TypeDefIndex: 559
{
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterInfo // TypeDefIndex: 560
{
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyBuilder // TypeDefIndex: 561
{
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyInfo // TypeDefIndex: 562
{
}

// Namespace: System.Runtime.InteropServices
public interface _Thread // TypeDefIndex: 563
{
}

// Namespace: System.Runtime.InteropServices
public interface _TypeBuilder // TypeDefIndex: 564
{
}

// Namespace: System.Runtime.InteropServices
public sealed class CallingConvention : Enum // TypeDefIndex: 565
{
	// Fields
	public int value__; // 0x10
	public const CallingConvention Winapi = 1; // 0x0
	public const CallingConvention Cdecl = 2; // 0x0
	public const CallingConvention StdCall = 3; // 0x0
	public const CallingConvention ThisCall = 4; // 0x0
	public const CallingConvention FastCall = 5; // 0x0

}

// Namespace: System.Runtime.InteropServices
public sealed class CharSet : Enum // TypeDefIndex: 566
{
	// Fields
	public int value__; // 0x10
	public const CharSet None = 1; // 0x0
	public const CharSet Ansi = 2; // 0x0
	public const CharSet Unicode = 3; // 0x0
	public const CharSet Auto = 4; // 0x0

}

// Namespace: System.Runtime.InteropServices
public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 567
{
	// Fields
	private ClassInterfaceType ciType; // 0x10

	// Methods
	public void .ctor(ClassInterfaceType classInterfaceType); // 0x1008CBD30
}

// Namespace: System.Runtime.InteropServices
public sealed class ClassInterfaceType : Enum // TypeDefIndex: 568
{
	// Fields
	public int value__; // 0x10
	public const ClassInterfaceType None = 0; // 0x0
	public const ClassInterfaceType AutoDispatch = 1; // 0x0
	public const ClassInterfaceType AutoDual = 2; // 0x0

}

// Namespace: System.Runtime.InteropServices
public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 569
{
	// Fields
	private int major; // 0x10
	private int minor; // 0x14
	private int build; // 0x18
	private int revision; // 0x1C

	// Methods
	public void .ctor(int major, int minor, int build, int revision); // 0x1008CBD5C
}

// Namespace: System.Runtime.InteropServices
public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 570
{
	// Fields
	private Type _type; // 0x10

	// Methods
	public void .ctor(Type defaultInterface); // 0x1008CBDA8
}

// Namespace: System.Runtime.InteropServices
public class COMException : ExternalException // TypeDefIndex: 571
{
	// Methods
	public void .ctor(); // 0x1008CBDD4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008CBDDC
	public override string ToString(); // 0x1008CBDE4
}

// Namespace: System.Runtime.InteropServices
public sealed class ComInterfaceType : Enum // TypeDefIndex: 572
{
	// Fields
	public int value__; // 0x10
	public const ComInterfaceType InterfaceIsDual = 0; // 0x0
	public const ComInterfaceType InterfaceIsIUnknown = 1; // 0x0
	public const ComInterfaceType InterfaceIsIDispatch = 2; // 0x0

}

// Namespace: System.Runtime.InteropServices
public sealed class DispIdAttribute : Attribute // TypeDefIndex: 573
{
	// Fields
	private int id; // 0x10

	// Methods
	public void .ctor(int dispId); // 0x1008CC200
}

// Namespace: System.Runtime.InteropServices
public sealed class ErrorWrapper // TypeDefIndex: 574
{
	// Fields
	private int errorCode; // 0x10

}

// Namespace: System.Runtime.InteropServices
public class ExternalException : SystemException // TypeDefIndex: 575
{
	// Methods
	public void .ctor(); // 0x1008CC260
	public void .ctor(string message); // 0x1008CC2D8
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008CC30C
}

// Namespace: System.Runtime.InteropServices
public struct GCHandle // TypeDefIndex: 576
{
	// Fields
	private int handle; // 0x10

	// Methods
	private void .ctor(IntPtr h); // 0x1008CC340
	private void .ctor(object obj); // 0x1008CC36C
	private void .ctor(object value, GCHandleType type); // 0x1008CC3AC
	public bool get_IsAllocated(); // 0x1008CC3F4
	public object get_Target(); // 0x1008CC498
	public void set_Target(object value); // 0x1008CC4D4
	public IntPtr AddrOfPinnedObject(); // 0x1008CC610
	public static GCHandle Alloc(object value); // 0x1008CC618
	public static GCHandle Alloc(object value, GCHandleType type); // 0x1008CC63C
	public void Free(); // 0x1008CC698
	private static bool CheckCurrentDomain(int handle); // 0x1008CC6C0
	private static object GetTarget(int handle); // 0x1008CC490
	private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x1008CC39C
	private static void FreeHandle(int handle); // 0x1008CC690
	private static IntPtr GetAddrOfPinnedObject(int handle); // 0x1008CC608
	public override bool Equals(object o); // 0x1008CC750
	public override int GetHashCode(); // 0x1008CC760
	public static GCHandle FromIntPtr(IntPtr value); // 0x1008CC76C
	public static IntPtr ToIntPtr(GCHandle value); // 0x1008CC86C
	public static IntPtr op_Explicit(GCHandle value); // 0x1008CC878
	public static GCHandle op_Explicit(IntPtr value); // 0x1008CC784
}

// Namespace: System.Runtime.InteropServices
public sealed class GCHandleType : Enum // TypeDefIndex: 577
{
	// Fields
	public int value__; // 0x10
	public const GCHandleType Weak = 0; // 0x0
	public const GCHandleType WeakTrackResurrection = 1; // 0x0
	public const GCHandleType Normal = 2; // 0x0
	public const GCHandleType Pinned = 3; // 0x0

}

// Namespace: System.Runtime.InteropServices
public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 578
{
	// Fields
	private ComInterfaceType intType; // 0x10

	// Methods
	public void .ctor(ComInterfaceType interfaceType); // 0x1008CC8D4
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 579
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x0
	public static readonly int SystemDefaultCharSize; // 0x4

	// Methods
	private static void .cctor(); // 0x1008CC900
	public static IntPtr AllocHGlobal(IntPtr cb); // 0x1008CC988
	public static IntPtr AllocHGlobal(int cb); // 0x1008CC990
	private static void copy_to_unmanaged(Array source, int startIndex, IntPtr destination, int length); // 0x1008CCA08
	private static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x1008CCA1C
	public static void Copy(byte[] source, int startIndex, IntPtr destination, int length); // 0x1008CCA30
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x1008CCABC
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x1008CCB48
	public static void FreeHGlobal(IntPtr hglobal); // 0x1008CCBD4
	public static int GetLastWin32Error(); // 0x1008CCBDC
	public static string PtrToStringAnsi(IntPtr ptr); // 0x1008CCBE0
	public static void PtrToStructure(IntPtr ptr, object structure); // 0x1008CCBE8
	public static object PtrToStructure(IntPtr ptr, Type structureType); // 0x1008CCBF4
	public static byte ReadByte(IntPtr ptr, int ofs); // 0x1008CCC00
	public static int SizeOf(Type t); // 0x1008CCC0C
	public static IntPtr StringToHGlobalAnsi(string s); // 0x1008CCC14
	public static void WriteByte(IntPtr ptr, int ofs, byte val); // 0x1008CCC1C
}

// Namespace: System.Runtime.InteropServices
public class MarshalDirectiveException : SystemException // TypeDefIndex: 580
{
	// Fields
	private const int ErrorCode = -2146233035; // 0x0

	// Methods
	public void .ctor(); // 0x1008CCC58
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008CCCD0
}

// Namespace: System.Runtime.InteropServices
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 581
{
	// Methods
	public void .ctor(); // 0x1008CCCE8
}

// Namespace: System.Runtime.InteropServices
public class RuntimeEnvironment // TypeDefIndex: 582
{
	// Methods
	public static string get_SystemConfigurationFile(); // 0x1008CCCF0
}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 583
{
	// Fields
	protected IntPtr handle; // 0x10
	private IntPtr invalid_handle_value; // 0x18
	private int refcount; // 0x20
	private bool owns_handle; // 0x24

	// Methods
	protected void .ctor(IntPtr invalidHandleValue, bool ownsHandle); // 0x1008CCDA8
	public void Close(); // 0x1008CCDEC
	public void DangerousAddRef(bool success); // 0x1008CCF20
	public IntPtr DangerousGetHandle(); // 0x1008CCFFC
	public void DangerousRelease(); // 0x1008CD098
	public void Dispose(); // 0x1008CD1C8
	protected virtual void Dispose(bool disposing); // 0x1008CD220
	protected abstract bool ReleaseHandle(); // 0
	protected void SetHandle(IntPtr handle); // 0x1008CD22C
	public abstract bool get_IsInvalid(); // 0
	protected override void Finalize(); // 0x1008CD234
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 584
{
	// Fields
	private string _importClass; // 0x10

	// Methods
	public void .ctor(Type importClass); // 0x1008CD30C
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 585
{
	// Fields
	private int major; // 0x10
	private int minor; // 0x14

	// Methods
	public void .ctor(int major, int minor); // 0x1008CD36C
}

// Namespace: System.Runtime.InteropServices
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 586
{
	// Fields
	private CallingConvention call_conv; // 0x10

	// Methods
	public void .ctor(CallingConvention callingConvention); // 0x1008CD3A4
}

// Namespace: System.Runtime.InteropServices
public sealed class UnmanagedType : Enum // TypeDefIndex: 587
{
	// Fields
	public int value__; // 0x10
	public const UnmanagedType Bool = 2; // 0x0
	public const UnmanagedType I1 = 3; // 0x0
	public const UnmanagedType U1 = 4; // 0x0
	public const UnmanagedType I2 = 5; // 0x0
	public const UnmanagedType U2 = 6; // 0x0
	public const UnmanagedType I4 = 7; // 0x0
	public const UnmanagedType U4 = 8; // 0x0
	public const UnmanagedType I8 = 9; // 0x0
	public const UnmanagedType U8 = 10; // 0x0
	public const UnmanagedType R4 = 11; // 0x0
	public const UnmanagedType R8 = 12; // 0x0
	public const UnmanagedType Currency = 15; // 0x0
	public const UnmanagedType BStr = 19; // 0x0
	public const UnmanagedType LPStr = 20; // 0x0
	public const UnmanagedType LPWStr = 21; // 0x0
	public const UnmanagedType LPTStr = 22; // 0x0
	public const UnmanagedType ByValTStr = 23; // 0x0
	public const UnmanagedType IUnknown = 25; // 0x0
	public const UnmanagedType IDispatch = 26; // 0x0
	public const UnmanagedType Struct = 27; // 0x0
	public const UnmanagedType Interface = 28; // 0x0
	public const UnmanagedType SafeArray = 29; // 0x0
	public const UnmanagedType ByValArray = 30; // 0x0
	public const UnmanagedType SysInt = 31; // 0x0
	public const UnmanagedType SysUInt = 32; // 0x0
	public const UnmanagedType VBByRefStr = 34; // 0x0
	public const UnmanagedType AnsiBStr = 35; // 0x0
	public const UnmanagedType TBStr = 36; // 0x0
	public const UnmanagedType VariantBool = 37; // 0x0
	public const UnmanagedType FunctionPtr = 38; // 0x0
	public const UnmanagedType AsAny = 40; // 0x0
	public const UnmanagedType LPArray = 42; // 0x0
	public const UnmanagedType LPStruct = 43; // 0x0
	public const UnmanagedType CustomMarshaler = 44; // 0x0
	public const UnmanagedType Error = 45; // 0x0

}

// Namespace: System.Runtime.Remoting
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 588
{
	// Fields
	private string applicationUrl; // 0x20
	private Type obj_type; // 0x28

	// Methods
	public void .ctor(string typeName, string assemblyName, string appUrl); // 0x1008CD3D0
	public string get_ApplicationUrl(); // 0x1008CD524
	public IContextAttribute[] get_ContextAttributes(); // 0x1008CD52C
	public Type get_ObjectType(); // 0x1008CD534
	public override string ToString(); // 0x1008CD53C
}

// Namespace: System.Runtime.Remoting
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 589
{
	// Fields
	private Type obj_type; // 0x20

	// Methods
	public void .ctor(string typeName, string assemblyName); // 0x1008CD5DC
	public Type get_ObjectType(); // 0x1008CD720
	public override string ToString(); // 0x1008CD728
}

// Namespace: System.Runtime.Remoting
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 590
{
	// Fields
	private IMessageSink envoySinks; // 0x10

	// Methods
	public void .ctor(IMessageSink sinks); // 0x1008DF5D8
	public IMessageSink get_EnvoySinks(); // 0x1008DF604
}

// Namespace: System.Runtime.Remoting
public interface IChannelInfo // TypeDefIndex: 591
{
	// Methods
	public abstract object[] get_ChannelData(); // 0
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 592
{
	// Fields
	protected string _objectUri; // 0x10
	protected IMessageSink _channelSink; // 0x18
	protected IMessageSink _envoySink; // 0x20
	private DynamicPropertyCollection _clientDynamicProperties; // 0x28
	private DynamicPropertyCollection _serverDynamicProperties; // 0x30
	protected ObjRef _objRef; // 0x38
	private bool _disposed; // 0x40

	// Methods
	public void .ctor(string objectUri); // 0x1008D491C
	public abstract ObjRef CreateObjRef(Type requestedType); // 0
	public IMessageSink get_ChannelSink(); // 0x1008DF60C
	public void set_ChannelSink(IMessageSink value); // 0x1008DF614
	public string get_ObjectUri(); // 0x1008DF61C
	public void set_ObjectUri(string value); // 0x1008DF624
	public bool get_IsConnected(); // 0x1008DF62C
	public bool get_Disposed(); // 0x1008DF63C
	public void set_Disposed(bool value); // 0x1008DF644
	public DynamicPropertyCollection get_ClientDynamicProperties(); // 0x1008DABFC
	public DynamicPropertyCollection get_ServerDynamicProperties(); // 0x1008DAC64
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 593
{
	// Fields
	private WeakReference _proxyReference; // 0x48

	// Methods
	public void .ctor(string objectUri, ObjRef objRef); // 0x1008D47B0
	public MarshalByRefObject get_ClientProxy(); // 0x1008D4948
	public void set_ClientProxy(MarshalByRefObject value); // 0x1008D49CC
	public override ObjRef CreateObjRef(Type requestedType); // 0x1008D4A3C
	public string get_TargetUri(); // 0x1008D4A44
}

// Namespace: System.Runtime.Remoting
public class InternalRemotingServices // TypeDefIndex: 594
{
	// Fields
	private static Hashtable _soapAttributes; // 0x0

	// Methods
	private static void .cctor(); // 0x1008DF64C
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x1008DF6B8
}

// Namespace: System.Runtime.Remoting
public interface IEnvoyInfo // TypeDefIndex: 595
{
	// Methods
	public abstract IMessageSink get_EnvoySinks(); // 0
}

// Namespace: System.Runtime.Remoting
public interface IRemotingTypeInfo // TypeDefIndex: 596
{
	// Methods
	public abstract string get_TypeName(); // 0
}

// Namespace: System.Runtime.Remoting
public class ObjRef : ISerializable, IObjectReference // TypeDefIndex: 597
{
	// Fields
	private IChannelInfo channel_info; // 0x10
	private string uri; // 0x18
	private IRemotingTypeInfo typeInfo; // 0x20
	private IEnvoyInfo envoyInfo; // 0x28
	private int flags; // 0x30
	private Type _serverType; // 0x38
	private static int MarshalledObjectRef; // 0x0
	private static int WellKnowObjectRef; // 0x4
	private static Dictionary`2<string, int> <>f__switch$map21; // 0x8

	// Methods
	public void .ctor(); // 0x1008EB2E0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008EB364
	private static void .cctor(); // 0x1008EBAC0
	internal bool get_IsReferenceToWellKnow(); // 0x1008EBB18
	public virtual IChannelInfo get_ChannelInfo(); // 0x1008EBB90
	public virtual IEnvoyInfo get_EnvoyInfo(); // 0x1008EBB98
	public virtual void set_EnvoyInfo(IEnvoyInfo value); // 0x1008EBBA0
	public virtual IRemotingTypeInfo get_TypeInfo(); // 0x1008EBBA8
	public virtual void set_TypeInfo(IRemotingTypeInfo value); // 0x1008EBBB0
	public virtual string get_URI(); // 0x1008EBBB8
	public virtual void set_URI(string value); // 0x1008EBBC0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008EBBC8
	public virtual object GetRealObject(StreamingContext context); // 0x1008EBD40
	internal void UpdateChannelInfo(); // 0x1008EB308
	internal Type get_ServerType(); // 0x1008EBE64
}

// Namespace: System.Runtime.Remoting
public static class RemotingConfiguration // TypeDefIndex: 598
{
	// Fields
	private static string applicationID; // 0x0
	private static string applicationName; // 0x8
	private static string processGuid; // 0x10
	private static bool defaultConfigRead; // 0x18
	private static bool defaultDelayedConfigRead; // 0x19
	private static string _errorMode; // 0x20
	private static Hashtable wellKnownClientEntries; // 0x28
	private static Hashtable activatedClientEntries; // 0x30
	private static Hashtable wellKnownServiceEntries; // 0x38
	private static Hashtable activatedServiceEntries; // 0x40
	private static Hashtable channelTemplates; // 0x48
	private static Hashtable clientProviderTemplates; // 0x50
	private static Hashtable serverProviderTemplates; // 0x58

	// Methods
	private static void .cctor(); // 0x1008ECBD4
	public static string get_ApplicationName(); // 0x1008ECD24
	public static void set_ApplicationName(string value); // 0x1008D9AE4
	public static string get_ProcessId(); // 0x1008D3F74
	internal static void LoadDefaultDelayedChannels(); // 0x1008D1960
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x1008CDBC0
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x1008ECD8C
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x1008ED094
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x1008ED1F0
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x1008ED534
	internal static void RegisterChannelTemplate(ChannelData channel); // 0x1008D8894
	internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x1008D74E4
	internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x1008D7428
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x1008D8CC8
	internal static void RegisterTypes(ArrayList types); // 0x1008D9B50
	internal static void SetCustomErrorsMode(string mode); // 0x1008D7F8C
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : IContentHandler // TypeDefIndex: 599
{
	// Fields
	private ArrayList typeEntries; // 0x10
	private ArrayList channelInstances; // 0x18
	private ChannelData currentChannel; // 0x20
	private Stack currentProviderData; // 0x28
	private string currentClientUrl; // 0x30
	private string appName; // 0x38
	private string currentXmlPath; // 0x40
	private bool onlyDelayedChannels; // 0x48
	private static Dictionary`2<string, int> <>f__switch$map22; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map23; // 0x8

	// Methods
	public void .ctor(bool onlyDelayedChannels); // 0x1008D4A98
	private void ValidatePath(string element, string[] paths); // 0x1008D4B5C
	private bool CheckPath(string path); // 0x1008D4C70
	public void OnStartParsing(SmallXmlParser parser); // 0x1008D4DF0
	public void OnProcessingInstruction(string name, string text); // 0x1008D4DF4
	public void OnIgnorableWhitespace(string s); // 0x1008D4DF8
	public void OnStartElement(string name, IAttrList attrs); // 0x1008D4DFC
	public void ParseElement(string name, IAttrList attrs); // 0x1008D4FEC
	public void OnEndElement(string name); // 0x1008D814C
	private void ReadCustomProviderData(string name, IAttrList attrs); // 0x1008D6028
	private void ReadLifetine(IAttrList attrs); // 0x1008D6420
	private TimeSpan ParseTime(string s); // 0x1008D8224
	private void ReadChannel(IAttrList attrs, bool isTemplate); // 0x1008D6AD8
	private ProviderData ReadProvider(string name, IAttrList attrs, bool isTemplate); // 0x1008D6F80
	private void ReadClientActivated(IAttrList attrs); // 0x1008D7898
	private void ReadServiceActivated(IAttrList attrs); // 0x1008D79EC
	private void ReadClientWellKnown(IAttrList attrs); // 0x1008D75A0
	private void ReadServiceWellKnown(IAttrList attrs); // 0x1008D7698
	private void ReadInteropXml(IAttrList attrs, bool isElement); // 0x1008D7ABC
	private void ReadPreload(IAttrList attrs); // 0x1008D7CB8
	private string GetNotNull(IAttrList attrs, string name); // 0x1008D8954
	private string ExtractAssembly(string type); // 0x1008D8AF8
	public void OnChars(string ch); // 0x1008D8BE4
	public void OnEndParsing(SmallXmlParser parser); // 0x1008D8BE8
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 600
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x18
	internal string Id; // 0x20
	internal string DelayLoadAsClientChannel; // 0x28
	private ArrayList _serverProviders; // 0x30
	private ArrayList _clientProviders; // 0x38
	private Hashtable _customProperties; // 0x40

	// Methods
	public void .ctor(); // 0x1008CF1AC
	internal ArrayList get_ServerProviders(); // 0x1008CF254
	public ArrayList get_ClientProviders(); // 0x1008CF2C0
	public Hashtable get_CustomProperties(); // 0x1008CF32C
	public void CopyFrom(ChannelData other); // 0x1008CF398
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 601
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x18
	internal string Id; // 0x20
	internal Hashtable CustomProperties; // 0x28
	internal IList CustomData; // 0x30

	// Methods
	public void .ctor(); // 0x1008CFDB0
	public void CopyFrom(ProviderData other); // 0x1008CFE18
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 602
{
	// Methods
	public void .ctor(); // 0x1008D8950
}

// Namespace: System.Runtime.Remoting
public class RemotingException : SystemException // TypeDefIndex: 603
{
	// Methods
	public void .ctor(); // 0x1008ED834
	public void .ctor(string message); // 0x1008CD51C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1008ED83C
	public void .ctor(string message, Exception InnerException); // 0x1008D6020
}

// Namespace: System.Runtime.Remoting
public sealed class RemotingServices // TypeDefIndex: 604
{
	// Fields
	private static Hashtable uri_hash; // 0x0
	private static BinaryFormatter _serializationFormatter; // 0x8
	private static BinaryFormatter _deserializationFormatter; // 0x10
	internal static string app_id; // 0x18
	private static int next_id; // 0x20
	private static readonly BindingFlags methodBindings; // 0x24
	private static readonly MethodInfo FieldSetterMethod; // 0x28
	private static readonly MethodInfo FieldGetterMethod; // 0x30

	// Methods
	private static void .cctor(); // 0x1008ED844
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x1008E6BD4
	public static bool IsTransparentProxy(object proxy); // 0x1008DAB28
	public static Type GetServerTypeForUri(string URI); // 0x1008E6648
	public static object Unmarshal(ObjRef objectRef); // 0x1008EBDFC
	public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x1008EDD78
	public static ObjRef Marshal(MarshalByRefObject Obj); // 0x1008EE424
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x1008EE490
	private static string NewUri(); // 0x1008EE904
	public static RealProxy GetRealProxy(object proxy); // 0x1008DAB30
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x1008E6BE0
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x1008E6944
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x1008EF4AC
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x1008EA044
	public static bool IsMethodOverloaded(IMethodMessage msg); // 0x1008EF634
	public static bool IsOneWay(MethodBase method); // 0x1008E9CBC
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x1008CDD38
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x1008CDA3C
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x1008CDE74
	internal static Identity GetIdentityForUri(string uri); // 0x1008EDB74
	private static string RemoveAppNameFromUri(string uri); // 0x1008EF9A4
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x1008EFA9C
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x1008EF810
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x1008EF304
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x1008ED70C
	private static void RegisterServerIdentity(ServerIdentity identity); // 0x1008EEB74
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x1008EC158
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x1008EDFE0
	private static void RegisterInternalChannels(); // 0x1008EDB18
	internal static void DisposeIdentity(Identity ident); // 0x1008D4598
	private static string GetNormalizedUri(string uri); // 0x1008EF924
}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 605
{
	// Fields
	protected Type _objectType; // 0x48
	protected MarshalByRefObject _serverObject; // 0x50
	protected IMessageSink _serverSink; // 0x58
	protected Context _context; // 0x60
	protected Lease _lease; // 0x68

	// Methods
	public void .ctor(string objectUri, Context context, Type objectType); // 0x1008D44DC
	public Type get_ObjectType(); // 0x1008EDD70
	public void StartTrackingLifetime(ILease lease); // 0x1008EEDD0
	public virtual void OnLifetimeExpired(); // 0x1008D4594
	public override ObjRef CreateObjRef(Type requestedType); // 0x1008F016C
	public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x1008EFF94
	public Lease get_Lease(); // 0x1008E0F40
	protected void DisposeServerObject(); // 0x1008F00E0
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 606
{
	// Methods
	public void .ctor(string objectUri, Type objectType); // 0x1008D449C
	public MarshalByRefObject GetServerObject(); // 0x1008D4520
	public override void OnLifetimeExpired(); // 0x1008D4528
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 607
{
	// Methods
	public void .ctor(string objectUri, Context context, Type objectType); // 0x1008F072C
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 608
{
	// Methods
	public void .ctor(string objectUri, Context context, Type objectType); // 0x1008F009C
}

// Namespace: System.Runtime.Remoting
public class SoapServices // TypeDefIndex: 609
{
	// Fields
	private static Hashtable _xmlTypes; // 0x0
	private static Hashtable _xmlElements; // 0x8
	private static Hashtable _soapActions; // 0x10
	private static Hashtable _soapActionsMethods; // 0x18
	private static Hashtable _typeInfos; // 0x20

	// Methods
	private static void .cctor(); // 0x1008F0734
	public static string get_XmlNsForClrTypeWithAssembly(); // 0x1008F0828
	public static string get_XmlNsForClrTypeWithNs(); // 0x1008F0870
	public static string get_XmlNsForClrTypeWithNsAndAssembly(); // 0x1008F08B8
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x1008F0900
	private static string GetNameKey(string name, string namspace); // 0x1008F0C00
	private static string GetAssemblyName(MethodBase mb); // 0x1008F0CA0
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x1008F0E7C
	public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x1008F0FC4
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x1008F1098
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x1008F116C
	public static void PreLoad(Assembly assembly); // 0x1008F12B4
	public static void PreLoad(Type type); // 0x1008F1398
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x1008F1B64
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x1008F1984
	private static string EncodeNs(string ns); // 0x1008F0B50
}

// Namespace: 
private class TypeInfo // TypeDefIndex: 610
{
	// Fields
	public Hashtable Attributes; // 0x10
	public Hashtable Elements; // 0x18

	// Methods
	public void .ctor(); // 0x1008F1D44
}

// Namespace: System.Runtime.Remoting
public class TypeEntry // TypeDefIndex: 611
{
	// Fields
	private string assembly_name; // 0x10
	private string type_name; // 0x18

	// Methods
	protected void .ctor(); // 0x1008F1D4C
	public string get_AssemblyName(); // 0x1008F1D54
	public void set_AssemblyName(string value); // 0x1008F1D5C
	public string get_TypeName(); // 0x1008F1D64
	public void set_TypeName(string value); // 0x1008F1D6C
}

// Namespace: System.Runtime.Remoting
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 612
{
	// Fields
	private string serverType; // 0x10
	private string[] serverHierarchy; // 0x18
	private string[] interfacesImplemented; // 0x20

	// Methods
	public void .ctor(Type type); // 0x1008F1D74
	public string get_TypeName(); // 0x1008F2208
}

// Namespace: System.Runtime.Remoting
public sealed class WellKnownObjectMode : Enum // TypeDefIndex: 613
{
	// Fields
	public int value__; // 0x10
	public const WellKnownObjectMode Singleton = 1; // 0x0
	public const WellKnownObjectMode SingleCall = 2; // 0x0

}

// Namespace: System.Runtime.Remoting
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 614
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_url; // 0x28
	private string app_url; // 0x30

	// Methods
	public void .ctor(string typeName, string assemblyName, string objectUrl); // 0x1008F2210
	public string get_ApplicationUrl(); // 0x1008F2344
	public Type get_ObjectType(); // 0x1008F234C
	public string get_ObjectUrl(); // 0x1008F2354
	public override string ToString(); // 0x1008F235C
}

// Namespace: System.Runtime.Remoting
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 615
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_uri; // 0x28
	private WellKnownObjectMode obj_mode; // 0x30

	// Methods
	public void .ctor(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x1008F2420
	public WellKnownObjectMode get_Mode(); // 0x1008F2560
	public Type get_ObjectType(); // 0x1008F2568
	public string get_ObjectUri(); // 0x1008F2570
	public override string ToString(); // 0x1008F2578
}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 616
{
	// Fields
	private static IActivator _constructionActivator; // 0x0

	// Methods
	private static IActivator get_ConstructionActivator(); // 0x1008CD7B8
	public static object CreateProxyFromAttributes(Type type, object[] activationAttributes); // 0x1008CD848
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x1008CE014
	public static object AllocateUninitializedClassInstance(Type type); // 0x1008CED78
	public static void EnableProxyActivation(Type type, bool enable); // 0x1008CED80
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 617
{
	// Fields
	private string _activationUrl; // 0x10
	private IActivator _next; // 0x18

	// Methods
	public void .ctor(string activationUrl, IActivator next); // 0x1008CECFC
}

// Namespace: System.Runtime.Remoting.Activation
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 618
{
	// Methods
	public void .ctor(); // 0x1008CD840
}

// Namespace: System.Runtime.Remoting.Activation
internal class ContextLevelActivator : IActivator // TypeDefIndex: 619
{
	// Fields
	private IActivator m_NextActivator; // 0x10

	// Methods
	public void .ctor(IActivator next); // 0x1008CED44
}

// Namespace: System.Runtime.Remoting.Activation
public interface IActivator // TypeDefIndex: 620
{
}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 621
{
	// Methods
	public abstract Type get_ActivationType(); // 0
	public abstract string get_ActivationTypeName(); // 0
	public abstract IActivator get_Activator(); // 0
	public abstract void set_Activator(IActivator value); // 0
	public abstract object[] get_CallSiteActivationAttributes(); // 0
	public abstract IList get_ContextProperties(); // 0
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 622
{
	// Methods
	public override object InitializeLifetimeService(); // 0x1008CED8C
}

// Namespace: System.Runtime.Remoting.Activation
public sealed class UrlAttribute : ContextAttribute // TypeDefIndex: 623
{
	// Fields
	private string url; // 0x18

	// Methods
	public string get_UrlValue(); // 0x1008CDA34
	public override bool Equals(object o); // 0x1008CF0D8
	public override int GetHashCode(); // 0x1008CF184
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x1008CF1A0
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x1008CF1A4
}

// Namespace: System.Runtime.Remoting
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 624
{
	// Fields
	private object[] channelData; // 0x10

	// Methods
	public void .ctor(); // 0x1008D05CC
	public object[] get_ChannelData(); // 0x1008D0B58
}

// Namespace: System.Runtime.Remoting.Channels
public sealed class ChannelServices // TypeDefIndex: 625
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x8
	private static CrossContextChannel _crossContextSink; // 0x10
	internal static string CrossContextUrl; // 0x18
	private static IList oldStartModeTypes; // 0x20

	// Methods
	private static void .cctor(); // 0x1008D0B60
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x1008D0CF8
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x1008D16CC
	public static void RegisterChannel(IChannel chnl); // 0x1008D1C60
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x1008D1CC8
	internal static void RegisterChannelConfig(ChannelData channel); // 0x1008D2860
	private static object CreateProvider(ProviderData prov); // 0x1008D36F0
	internal static object[] GetCurrentChannelInfo(); // 0x1008D0640
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannel // TypeDefIndex: 626
{
	// Methods
	public abstract string get_ChannelName(); // 0
	public abstract int get_ChannelPriority(); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelDataStore // TypeDefIndex: 627
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiver : IChannel // TypeDefIndex: 628
{
	// Methods
	public abstract object get_ChannelData(); // 0
	public abstract void StartListening(object data); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSender : IChannel // TypeDefIndex: 629
{
	// Methods
	public abstract IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkProvider // TypeDefIndex: 630
{
	// Methods
	public abstract void set_Next(IClientChannelSinkProvider value); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 631
{
	// Methods
	public abstract void set_IsSecured(bool value); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkProvider // TypeDefIndex: 632
{
	// Methods
	public abstract void set_Next(IServerChannelSinkProvider value); // 0
}

// Namespace: System.Runtime.Remoting.Channels
public class SinkProviderData // TypeDefIndex: 633
{
	// Fields
	private string sinkName; // 0x10
	private ArrayList children; // 0x18
	private Hashtable properties; // 0x20

	// Methods
	public void .ctor(string name); // 0x1008D43F0
	public IList get_Children(); // 0x1008D448C
	public IDictionary get_Properties(); // 0x1008D4494
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainData // TypeDefIndex: 634
{
	// Fields
	private object _ContextID; // 0x10
	private int _DomainID; // 0x18
	private string _processGuid; // 0x20

	// Methods
	internal void .ctor(int domainId); // 0x1008D3D44
	internal int get_DomainID(); // 0x1008D4034
	internal string get_ProcessID(); // 0x1008D3F6C
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender // TypeDefIndex: 635
{
	// Fields
	private static object s_lock; // 0x0

	// Methods
	public void .ctor(); // 0x1008D3AE4
	private static void .cctor(); // 0x1008D3AEC
	internal static void RegisterCrossAppDomainChannel(); // 0x1008D3B58
	public virtual string get_ChannelName(); // 0x1008D3C68
	public virtual int get_ChannelPriority(); // 0x1008D3CB0
	public virtual object get_ChannelData(); // 0x1008D3CB8
	public virtual void StartListening(object data); // 0x1008D3DEC
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x1008D3DF0
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 636
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x8
	private int _domainID; // 0x10

	// Methods
	internal void .ctor(int domainID); // 0x1008D42EC
	private static void .cctor(); // 0x1008D4318
	internal static CrossAppDomainSink GetSink(int domainID); // 0x1008D403C
	internal int get_TargetDomainId(); // 0x1008D43E8
}

// Namespace: System.Runtime.Remoting.Contexts
public class Context // TypeDefIndex: 637
{
	// Fields
	private int domain_id; // 0x10
	private int context_id; // 0x14
	private UIntPtr static_data; // 0x18
	private static IMessageSink default_server_context_sink; // 0x0
	private IMessageSink server_context_sink_chain; // 0x20
	private IMessageSink client_context_sink_chain; // 0x28
	private object[] datastore; // 0x30
	private ArrayList context_properties; // 0x38
	private bool frozen; // 0x40
	private static int global_count; // 0x8
	private static Hashtable namedSlots; // 0x10
	private static DynamicPropertyCollection global_dynamic_properties; // 0x18
	private DynamicPropertyCollection context_dynamic_properties; // 0x48
	private ContextCallbackObject callback_object; // 0x50

	// Methods
	public void .ctor(); // 0x1008D9FE4
	private static void .cctor(); // 0x1008DA098
	protected override void Finalize(); // 0x1008DA104
	public static Context get_DefaultContext(); // 0x1008DA10C
	public virtual int get_ContextID(); // 0x1008DA118
	public virtual IContextProperty[] get_ContextProperties(); // 0x1008DA120
	internal bool get_IsDefaultContext(); // 0x1008DA288
	internal bool get_NeedsContextSink(); // 0x1008DA298
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x1008DA3B4
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x1008DA914
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x1008DA43C
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x1008DAD34
	internal static bool get_HasGlobalDynamicSinks(); // 0x1008DB504
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x1008DB5AC
	internal bool get_HasDynamicSinks(); // 0x1008DB628
	internal bool get_HasExitSinks(); // 0x1008DB638
	public virtual IContextProperty GetProperty(string name); // 0x1008DBB4C
	public virtual void SetProperty(IContextProperty prop); // 0x1008DBFB4
	public virtual void Freeze(); // 0x1008DC128
	public override string ToString(); // 0x1008DC528
	internal IMessageSink GetServerContextSinkChain(); // 0x1008DC5CC
	internal IMessageSink GetClientContextSinkChain(); // 0x1008DB6F8
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x1008DC830
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x1008DCBBC
	internal static Context SwitchToContext(Context newContext); // 0x1008DD01C
	internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x1008DD028
	public void DoCallBack(CrossContextDelegate deleg); // 0x1008DDA30
	public static LocalDataStoreSlot AllocateDataSlot(); // 0x1008DDB64
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x1008DDBC4
	public static void FreeNamedDataSlot(string name); // 0x1008DDD38
	public static object GetData(LocalDataStoreSlot slot); // 0x1008DDEB4
	public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x1008DDFDC
	public static void SetData(LocalDataStoreSlot slot, object data); // 0x1008DE190
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 638
{
	// Fields
	private ArrayList _properties; // 0x10

	// Methods
	public void .ctor(); // 0x1008DACCC
	public bool get_HasProperties(); // 0x1008DA35C
	public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x1008DA61C
	public bool UnregisterDynamicProperty(string name); // 0x1008DA99C
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x1008DAE40
	private int FindProperty(string name); // 0x1008DE924
}

// Namespace: 
private class DynamicPropertyReg // TypeDefIndex: 639
{
	// Fields
	public IDynamicProperty Property; // 0x10
	public IDynamicMessageSink Sink; // 0x18

	// Methods
	public void .ctor(); // 0x1008DEB0C
}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 640
{
	// Methods
	public void .ctor(); // 0x1008DDB58
	public void DoCallBack(CrossContextDelegate deleg); // 0x1008DDB60
}

// Namespace: System.Runtime.Remoting.Contexts
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty // TypeDefIndex: 641
{
	// Fields
	protected string AttributeName; // 0x10

	// Methods
	public void .ctor(string name); // 0x1008DE388
	public virtual string get_Name(); // 0x1008DE3B4
	public override bool Equals(object o); // 0x1008DE3BC
	public virtual void Freeze(Context newContext); // 0x1008DE498
	public override int GetHashCode(); // 0x1008DE49C
	public virtual void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x1008DE4B0
	public virtual bool IsContextOK(Context ctx, IConstructionCallMessage ctorMsg); // 0x1008DE664
	public virtual bool IsNewContextOK(Context newCtx); // 0x1008DE804
}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 642
{
	// Methods
	public void .ctor(); // 0x1008D0CF0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextAttribute // TypeDefIndex: 643
{
	// Methods
	public abstract void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0
	public abstract bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextProperty // TypeDefIndex: 644
{
	// Methods
	public abstract string get_Name(); // 0
	public abstract void Freeze(Context newContext); // 0
	public abstract bool IsNewContextOK(Context newCtx); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeClientContextSink // TypeDefIndex: 645
{
	// Methods
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeDynamicSink // TypeDefIndex: 646
{
	// Methods
	public abstract IDynamicMessageSink GetDynamicSink(); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeEnvoySink // TypeDefIndex: 647
{
	// Methods
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeObjectSink // TypeDefIndex: 648
{
	// Methods
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeServerContextSink // TypeDefIndex: 649
{
	// Methods
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicMessageSink // TypeDefIndex: 650
{
	// Methods
	public abstract void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync); // 0
	public abstract void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicProperty // TypeDefIndex: 651
{
	// Methods
	public abstract string get_Name(); // 0
}

// Namespace: System.Runtime.Remoting.Contexts
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink // TypeDefIndex: 652
{
	// Fields
	private bool _bReEntrant; // 0x18
	private int _flavor; // 0x1C
	private int _lockCount; // 0x20
	private Mutex _mutex; // 0x28
	private Thread _ownerThread; // 0x30

	// Methods
	public void .ctor(); // 0x1008DEB14
	public void .ctor(int flag, bool reEntrant); // 0x1008DEB20
	public virtual void set_Locked(bool value); // 0x1008DEC04
	internal void ReleaseLock(); // 0x1008DEDDC
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x1008DEEF0
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink); // 0x1008DF098
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink); // 0x1008DF140
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x1008DF1E8
	internal static void ExitContext(); // 0x1008DF318
	internal static void EnterContext(); // 0x1008DF478
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink // TypeDefIndex: 653
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Methods
	public void .ctor(IMessageSink next, SynchronizationAttribute att); // 0x1008DF108
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink // TypeDefIndex: 654
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Methods
	public void .ctor(IMessageSink next, SynchronizationAttribute att); // 0x1008DF1B0
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ILease // TypeDefIndex: 655
{
	// Methods
	public abstract LeaseState get_CurrentState(); // 0
	public abstract void set_InitialLeaseTime(TimeSpan value); // 0
	public abstract void set_RenewOnCallTime(TimeSpan value); // 0
	public abstract void set_SponsorshipTimeout(TimeSpan value); // 0
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ISponsor // TypeDefIndex: 656
{
	// Methods
	public abstract TimeSpan Renewal(ILease lease); // 0
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 657
{
	// Fields
	private DateTime _leaseExpireTime; // 0x18
	private LeaseState _currentState; // 0x28
	private TimeSpan _initialLeaseTime; // 0x30
	private TimeSpan _renewOnCallTime; // 0x38
	private TimeSpan _sponsorshipTimeout; // 0x40
	private ArrayList _sponsors; // 0x48
	private Queue _renewingSponsors; // 0x50
	private RenewalDelegate _renewalDelegate; // 0x58

	// Methods
	public void .ctor(); // 0x1008DFC24
	public TimeSpan get_CurrentLeaseTime(); // 0x1008DFE38
	public LeaseState get_CurrentState(); // 0x1008DFEC0
	public void Activate(); // 0x1008DFEC8
	public void set_InitialLeaseTime(TimeSpan value); // 0x1008DFED4
	public void set_RenewOnCallTime(TimeSpan value); // 0x1008E0058
	public void set_SponsorshipTimeout(TimeSpan value); // 0x1008E0148
	public TimeSpan Renew(TimeSpan renewalTime); // 0x1008E0238
	public void Unregister(ISponsor obj); // 0x1008E02FC
	internal void UpdateState(); // 0x1008E0480
	private void CheckNextSponsor(); // 0x1008E05D0
	private void ProcessSponsorResponse(object state, bool timedOut); // 0x1008E0944
}

// Namespace: 
private sealed class RenewalDelegate : MulticastDelegate // TypeDefIndex: 658
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008E08E4
	public virtual TimeSpan Invoke(ILease lease); // 0x1008E0C08
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, object object); // 0x1008E08F4
	public virtual TimeSpan EndInvoke(IAsyncResult result); // 0x1008E0BDC
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 659
{
	// Fields
	private ArrayList _objects; // 0x10
	private Timer _timer; // 0x18

	// Methods
	public void .ctor(); // 0x1008E0CA4
	public void SetPollTime(TimeSpan timeSpan); // 0x1008E0D0C
	public void TrackLifetime(ServerIdentity identity); // 0x1008E0DFC
	public void StartManager(); // 0x1008E0F48
	public void StopManager(); // 0x1008E1090
	public void ManageLeases(object state); // 0x1008E10B4
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 660
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Methods
	public void .ctor(IMessageSink nextSink); // 0x1008DCB90
}

// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LeaseState : Enum // TypeDefIndex: 661
{
	// Fields
	public int value__; // 0x10
	public const LeaseState Null = 0; // 0x0
	public const LeaseState Initial = 1; // 0x0
	public const LeaseState Active = 2; // 0x0
	public const LeaseState Renewing = 3; // 0x0
	public const LeaseState Expired = 4; // 0x0

}

// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LifetimeServices // TypeDefIndex: 662
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Methods
	private static void .cctor(); // 0x1008E134C
	public static TimeSpan get_LeaseManagerPollTime(); // 0x1008E1028
	public static void set_LeaseManagerPollTime(TimeSpan value); // 0x1008D8810
	public static TimeSpan get_LeaseTime(); // 0x1008DFD00
	public static void set_LeaseTime(TimeSpan value); // 0x1008D86CC
	public static TimeSpan get_RenewOnCallTime(); // 0x1008DFD68
	public static void set_RenewOnCallTime(TimeSpan value); // 0x1008D87A4
	public static TimeSpan get_SponsorshipTimeout(); // 0x1008DFDD0
	public static void set_SponsorshipTimeout(TimeSpan value); // 0x1008D8738
	internal static void TrackLifetime(ServerIdentity identity); // 0x1008E1450
}

// Namespace: System.Runtime.Remoting.Messaging
internal sealed class ArgInfoType : Enum // TypeDefIndex: 663
{
	// Fields
	public byte value__; // 0x10
	public const ArgInfoType In = 0; // 0x0
	public const ArgInfoType Out = 1; // 0x0

}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 664
{
	// Fields
	private int[] _paramMap; // 0x10
	private int _inoutArgCount; // 0x18
	private MethodBase _method; // 0x20

	// Methods
	public void .ctor(MethodBase method, ArgInfoType type); // 0x1008E14C8
	public int GetInOutArgCount(); // 0x1008E1700
	public object[] GetInOutArgs(object[] args); // 0x1008E1708
}

// Namespace: System.Runtime.Remoting.Messaging
public class AsyncResult : IAsyncResult, IMessageSink // TypeDefIndex: 665
{
	// Fields
	private object async_state; // 0x10
	private WaitHandle handle; // 0x18
	private object async_delegate; // 0x20
	private IntPtr data; // 0x28
	private object object_data; // 0x30
	private bool sync_completed; // 0x38
	private bool completed; // 0x39
	private bool endinvoke_called; // 0x3A
	private object async_callback; // 0x40
	private ExecutionContext current; // 0x48
	private ExecutionContext original; // 0x50
	private int gchandle; // 0x58
	private MonoMethodMessage call_message; // 0x60
	private IMessageCtrl message_ctrl; // 0x68
	private IMessage reply_message; // 0x70

	// Methods
	internal void .ctor(); // 0x1008E1830
	public virtual object get_AsyncState(); // 0x1008E1838
	public virtual WaitHandle get_AsyncWaitHandle(); // 0x1008E1840
	public virtual bool get_CompletedSynchronously(); // 0x1008E1920
	public virtual bool get_IsCompleted(); // 0x1008E1928
	public bool get_EndInvokeCalled(); // 0x1008E1930
	public void set_EndInvokeCalled(bool value); // 0x1008E1938
	public virtual object get_AsyncDelegate(); // 0x1008E1940
	public IMessageSink get_NextSink(); // 0x1008E1948
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x1008E1950
	public virtual IMessage GetReplyMessage(); // 0x1008E19A4
	public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x1008E19AC
	internal void SetCompletedSynchronously(bool completed); // 0x1008E19B4
	internal IMessage EndInvoke(); // 0x1008E19BC
	public virtual IMessage SyncProcessMessage(IMessage msg); // 0x1008E1A7C
	internal MonoMethodMessage get_CallMessage(); // 0x1008E1CD8
	internal void set_CallMessage(MonoMethodMessage value); // 0x1008E1CE0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 666
{
	// Fields
	private Context _context; // 0x10

	// Methods
	public void .ctor(Context ctx); // 0x1008DC804
}

// Namespace: System.Runtime.Remoting.Messaging
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 667
{
	// Fields
	private IActivator _activator; // 0x60
	private object[] _activationAttributes; // 0x68
	private IList _contextProperties; // 0x70
	private Type _activationType; // 0x78
	private string _activationTypeName; // 0x80
	private bool _isContextOk; // 0x88
	private static Dictionary`2<string, int> <>f__switch$map25; // 0x0

	// Methods
	internal void .ctor(Type type); // 0x1008CEC90
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1008E1D68
	internal override void InitDictionary(); // 0x1008E1E80
	internal void set_IsContextOk(bool value); // 0x1008CED3C
	public Type get_ActivationType(); // 0x1008E1FD4
	public string get_ActivationTypeName(); // 0x1008E2074
	public IActivator get_Activator(); // 0x1008E207C
	public void set_Activator(IActivator value); // 0x1008CED34
	public object[] get_CallSiteActivationAttributes(); // 0x1008E2084
	internal void SetActivationAttributes(object[] attributes); // 0x1008CED70
	public IList get_ContextProperties(); // 0x1008E208C
	internal override void InitMethodProperty(string key, object value); // 0x1008E20F8
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008E2AA0
	public override IDictionary get_Properties(); // 0x1008E30FC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary // TypeDefIndex: 668
{
	// Fields
	public static string[] InternalKeys; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map28; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map29; // 0x10

	// Methods
	public void .ctor(IConstructionCallMessage message); // 0x1008E1EF4
	private static void .cctor(); // 0x1008E3188
	protected override object GetMethodProperty(string key); // 0x1008E3518
	protected override void SetMethodProperty(string key, object value); // 0x1008E4418
}

// Namespace: System.Runtime.Remoting.Messaging
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 669
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x0

	// Methods
	public void .ctor(); // 0x1008E4BF8
	private static void .cctor(); // 0x1008E4C00
}

// Namespace: System.Runtime.Remoting.Messaging
public class Header // TypeDefIndex: 670
{
	// Fields
	public string HeaderNamespace; // 0x10
	public bool MustUnderstand; // 0x18
	public string Name; // 0x20
	public object Value; // 0x28

	// Methods
	public void .ctor(string _Name, object _Value); // 0x1008E4C64
	public void .ctor(string _Name, object _Value, bool _MustUnderstand); // 0x1008E4CA8
	public void .ctor(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace); // 0x1008E4CEC
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 671
{
	// Methods
	public abstract void set_Uri(string value); // 0
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessage // TypeDefIndex: 672
{
	// Methods
	public abstract IDictionary get_Properties(); // 0
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageCtrl // TypeDefIndex: 673
{
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageSink // TypeDefIndex: 674
{
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodCallMessage : IMessage, IMethodMessage // TypeDefIndex: 675
{
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodMessage : IMessage // TypeDefIndex: 676
{
	// Methods
	public abstract int get_ArgCount(); // 0
	public abstract object[] get_Args(); // 0
	public abstract LogicalCallContext get_LogicalCallContext(); // 0
	public abstract MethodBase get_MethodBase(); // 0
	public abstract string get_MethodName(); // 0
	public abstract object get_MethodSignature(); // 0
	public abstract string get_TypeName(); // 0
	public abstract string get_Uri(); // 0
	public abstract object GetArg(int argNum); // 0
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodReturnMessage : IMessage, IMethodMessage // TypeDefIndex: 677
{
	// Methods
	public abstract Exception get_Exception(); // 0
	public abstract int get_OutArgCount(); // 0
	public abstract object[] get_OutArgs(); // 0
	public abstract object get_ReturnValue(); // 0
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 678
{
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 679
{
}

// Namespace: System.Runtime.Remoting.Messaging
public sealed class LogicalCallContext : ICloneable, ISerializable // TypeDefIndex: 680
{
	// Fields
	private Hashtable _data; // 0x10
	private CallContextRemotingData _remotingData; // 0x18

	// Methods
	internal void .ctor(); // 0x1008E4E44
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1008E4EAC
	public bool get_HasInfo(); // 0x1008E50E8
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008E5144
	public void SetData(string name, object data); // 0x1008E5030
	public object Clone(); // 0x1008E550C
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 681
{
	// Fields
	private string _logicalCallID; // 0x10

	// Methods
	public void .ctor(); // 0x1008E1CE8
	public object Clone(); // 0x1008E1CF0
}

// Namespace: System.Runtime.Remoting.Messaging
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject // TypeDefIndex: 682
{
	// Fields
	private string _uri; // 0x10
	private string _typeName; // 0x18
	private string _methodName; // 0x20
	private object[] _args; // 0x28
	private Type[] _methodSignature; // 0x30
	private MethodBase _methodBase; // 0x38
	private LogicalCallContext _callContext; // 0x40
	private Type[] _genericArguments; // 0x48
	protected IDictionary ExternalProperties; // 0x50
	protected IDictionary InternalProperties; // 0x58
	private static Dictionary`2<string, int> <>f__switch$map24; // 0x0

	// Methods
	public void .ctor(Header[] h1); // 0x1008E58D0
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1008E1D6C
	internal void .ctor(); // 0x1008E1D60
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value); // 0x1008E61C4
	internal virtual void InitMethodProperty(string key, object value); // 0x1008E24C4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008E2C38
	public int get_ArgCount(); // 0x1008E61D4
	public object[] get_Args(); // 0x1008E61F0
	public LogicalCallContext get_LogicalCallContext(); // 0x1008E61F8
	public MethodBase get_MethodBase(); // 0x1008E6260
	public string get_MethodName(); // 0x1008E6290
	public object get_MethodSignature(); // 0x1008E62F0
	public virtual IDictionary get_Properties(); // 0x1008E3100
	internal virtual void InitDictionary(); // 0x1008E646C
	public string get_TypeName(); // 0x1008E656C
	public string get_Uri(); // 0x1008E65F8
	public void set_Uri(string value); // 0x1008E61CC
	public object GetArg(int argNum); // 0x1008E6600
	public virtual void Init(); // 0x1008E6644
	public void ResolveMethod(); // 0x1008E59C8
	private Type CastTo(string clientType, Type serverType); // 0x1008E66F4
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x1008E703C
	private Type[] get_GenericArguments(); // 0x1008E6FCC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodCallDictionary : MethodDictionary // TypeDefIndex: 683
{
	// Fields
	public static string[] InternalKeys; // 0x0

	// Methods
	public void .ctor(IMethodMessage message); // 0x1008E64E0
	private static void .cctor(); // 0x1008E70EC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 684
{
	// Fields
	private IDictionary _internalProperties; // 0x10
	protected IMethodMessage _message; // 0x18
	private string[] _methodKeys; // 0x20
	private bool _ownProperties; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map26; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map27; // 0x8

	// Methods
	public void .ctor(IMethodMessage message); // 0x1008E3154
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1008E7314
	public void set_MethodKeys(string[] value); // 0x1008E3180
	protected virtual IDictionary AllocInternalProperties(); // 0x1008E7498
	public IDictionary GetInternalProperties(); // 0x1008E1F80
	private bool IsOverridenKey(string key); // 0x1008E7500
	public object get_Item(object key); // 0x1008E75E8
	public void set_Item(object key, object value); // 0x1008E7804
	protected virtual object GetMethodProperty(string key); // 0x1008E3D20
	protected virtual void SetMethodProperty(string key, object value); // 0x1008E4810
	public ICollection get_Keys(); // 0x1008E7A64
	public ICollection get_Values(); // 0x1008E7F6C
	public void Add(object key, object value); // 0x1008E7808
	public void Clear(); // 0x1008E8458
	public bool Contains(object key); // 0x1008E8558
	public void Remove(object key); // 0x1008E8758
	public int get_Count(); // 0x1008E8978
	public bool get_IsSynchronized(); // 0x1008E8A84
	public object get_SyncRoot(); // 0x1008E8A8C
	public void CopyTo(Array array, int index); // 0x1008E8A90
	public IDictionaryEnumerator GetEnumerator(); // 0x1008E8BA4
}

// Namespace: 
private class DictionaryEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 685
{
	// Fields
	private MethodDictionary _methodDictionary; // 0x10
	private IDictionaryEnumerator _hashtableEnum; // 0x18
	private int _posMethod; // 0x20

	// Methods
	public void .ctor(MethodDictionary methodDictionary); // 0x1008E7374
	public object get_Current(); // 0x1008E8C04
	public bool MoveNext(); // 0x1008E8E14
	public void Reset(); // 0x1008E9090
	public DictionaryEntry get_Entry(); // 0x1008E8C30
	public object get_Key(); // 0x1008E918C
	public object get_Value(); // 0x1008E91B8
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MethodDictionary // TypeDefIndex: 686
{
	// Fields
	public static string[] InternalReturnKeys; // 0x0
	public static string[] InternalExceptionKeys; // 0x8

	// Methods
	public void .ctor(IMethodReturnMessage message); // 0x1008E91E4
	private static void .cctor(); // 0x1008E9338
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MonoMethodMessage : IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 687
{
	// Fields
	private MonoMethod method; // 0x10
	private object[] args; // 0x18
	private byte[] arg_types; // 0x20
	public LogicalCallContext ctx; // 0x28
	public object rval; // 0x30
	public Exception exc; // 0x38
	private CallType call_type; // 0x40
	private string uri; // 0x48
	private MethodCallDictionary properties; // 0x50
	private Type[] methodSignature; // 0x58

	// Methods
	public IDictionary get_Properties(); // 0x1008E9618
	public int get_ArgCount(); // 0x1008E9684
	public object[] get_Args(); // 0x1008E9750
	public LogicalCallContext get_LogicalCallContext(); // 0x1008E9758
	public MethodBase get_MethodBase(); // 0x1008E9760
	public string get_MethodName(); // 0x1008E9768
	public object get_MethodSignature(); // 0x1008E981C
	public string get_TypeName(); // 0x1008E998C
	public string get_Uri(); // 0x1008E9A7C
	public void set_Uri(string value); // 0x1008E9A84
	public object GetArg(int arg_num); // 0x1008E9A8C
	public Exception get_Exception(); // 0x1008E9AD4
	public int get_OutArgCount(); // 0x1008E9ADC
	public object[] get_OutArgs(); // 0x1008E9B60
	public object get_ReturnValue(); // 0x1008E9CB4
	internal CallType get_CallType(); // 0x1008E96C8
}

// Namespace: System.Runtime.Remoting.Messaging
internal sealed class CallType : Enum // TypeDefIndex: 688
{
	// Fields
	public int value__; // 0x10
	public const CallType Sync = 0; // 0x0
	public const CallType BeginInvoke = 1; // 0x0
	public const CallType EndInvoke = 2; // 0x0
	public const CallType OneWay = 3; // 0x0

}

// Namespace: System.Runtime.Remoting.Messaging
public class OneWayAttribute : Attribute // TypeDefIndex: 689
{
}

// Namespace: System.Runtime.Remoting.Messaging
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 690
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x0
	private static ObjRefSurrogate _objRefSurrogate; // 0x8
	private static RemotingSurrogate _objRemotingSurrogate; // 0x10
	private ISurrogateSelector _next; // 0x10

	// Methods
	public void .ctor(); // 0x1008EA1AC
	private static void .cctor(); // 0x1008EA1B4
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x1008EA28C
}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 691
{
	// Methods
	public void .ctor(); // 0x1008E9EE4
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x1008E9EEC
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x1008EA158
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 692
{
	// Methods
	public void .ctor(); // 0x1008E9D80
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x1008E9D88
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x1008E9E84
}

// Namespace: System.Runtime.Remoting.Messaging
public class ReturnMessage : IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 693
{
	// Fields
	private object[] _outArgs; // 0x10
	private object[] _args; // 0x18
	private int _outArgsCount; // 0x20
	private LogicalCallContext _callCtx; // 0x28
	private object _returnValue; // 0x30
	private string _uri; // 0x38
	private Exception _exception; // 0x40
	private MethodBase _methodBase; // 0x48
	private string _methodName; // 0x50
	private Type[] _methodSignature; // 0x58
	private string _typeName; // 0x60
	private MethodReturnDictionary _properties; // 0x68
	private ArgInfo _inArgInfo; // 0x70

	// Methods
	public void .ctor(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x1008EA4B8
	public void .ctor(Exception e, IMethodCallMessage mcm); // 0x1008EA684
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value); // 0x1008EA82C
	public int get_ArgCount(); // 0x1008EA83C
	public object[] get_Args(); // 0x1008EA858
	public LogicalCallContext get_LogicalCallContext(); // 0x1008EA860
	public MethodBase get_MethodBase(); // 0x1008EA8C8
	public string get_MethodName(); // 0x1008EA8D0
	public object get_MethodSignature(); // 0x1008EA92C
	public virtual IDictionary get_Properties(); // 0x1008EAAA0
	public string get_TypeName(); // 0x1008EAB0C
	public string get_Uri(); // 0x1008EAB9C
	public void set_Uri(string value); // 0x1008EA834
	public object GetArg(int argNum); // 0x1008EABA4
	public Exception get_Exception(); // 0x1008EABE8
	public int get_OutArgCount(); // 0x1008EABF0
	public object[] get_OutArgs(); // 0x1008EAC8C
	public virtual object get_ReturnValue(); // 0x1008EAD34
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 694
{
	// Methods
	public void .ctor(); // 0x1008DC7FC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 695
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Methods
	public void .ctor(IMessageSink nextSink); // 0x1008DCB64
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 696
{
	// Fields
	private MarshalByRefObject _target; // 0x10
	private RealProxy _rp; // 0x18

	// Methods
	public void .ctor(MarshalByRefObject obj, bool forceInternalExecute); // 0x1008DCAB0
}

// Namespace: System.Runtime.Remoting.Metadata
public class SoapAttribute : Attribute // TypeDefIndex: 697
{
	// Fields
	private bool _useAttribute; // 0x10
	protected string ProtXmlNamespace; // 0x18
	protected object ReflectInfo; // 0x20

	// Methods
	public void .ctor(); // 0x1008EAD3C
	public virtual bool get_UseAttribute(); // 0x1008EAD44
	public virtual string get_XmlNamespace(); // 0x1008EAD4C
	internal virtual void SetReflectionObject(object reflectionObject); // 0x1008EAD54
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 698
{
	// Fields
	private string _elementName; // 0x28
	private bool _isElement; // 0x30

	// Methods
	public void .ctor(); // 0x1008DFC0C
	public string get_XmlElementName(); // 0x1008EAD5C
	public bool IsInteropXmlElement(); // 0x1008EAD64
	internal override void SetReflectionObject(object reflectionObject); // 0x1008EAD6C
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 699
{
	// Fields
	private string _responseElement; // 0x28
	private string _responseNamespace; // 0x30
	private string _returnElement; // 0x38
	private string _soapAction; // 0x40
	private bool _useAttribute; // 0x48
	private string _namespace; // 0x50

	// Methods
	public void .ctor(); // 0x1008DFC14
	public override bool get_UseAttribute(); // 0x1008EAE08
	public override string get_XmlNamespace(); // 0x1008EAE10
	internal override void SetReflectionObject(object reflectionObject); // 0x1008EAE18
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 700
{
	// Methods
	public void .ctor(); // 0x1008DFC1C
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 701
{
	// Fields
	private bool _useAttribute; // 0x28
	private string _xmlElementName; // 0x30
	private string _xmlNamespace; // 0x38
	private string _xmlTypeName; // 0x40
	private string _xmlTypeNamespace; // 0x48
	private bool _isType; // 0x50
	private bool _isElement; // 0x51

	// Methods
	public void .ctor(); // 0x1008DFC04
	public override bool get_UseAttribute(); // 0x1008EB038
	public string get_XmlElementName(); // 0x1008EB040
	public override string get_XmlNamespace(); // 0x1008EB048
	public string get_XmlTypeName(); // 0x1008EB050
	public string get_XmlTypeNamespace(); // 0x1008EB058
	internal bool get_IsInteropXmlElement(); // 0x1008EB060
	internal bool get_IsInteropXmlType(); // 0x1008EB068
	internal override void SetReflectionObject(object reflectionObject); // 0x1008EB070
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 702
{
	// Fields
	public RealProxy _rp; // 0x10

}

// Namespace: System.Runtime.Remoting.Proxies
public abstract class RealProxy // TypeDefIndex: 703
{
	// Fields
	private Type class_to_proxy; // 0x10
	private int _targetDomainId; // 0x18
	internal string _targetUri; // 0x20
	internal Identity _objectIdentity; // 0x28
	private object _objTP; // 0x30

	// Methods
	protected void .ctor(Type classToProxy); // 0x1008EC274
	internal void .ctor(Type classToProxy, ClientIdentity identity); // 0x1008EC3F4
	protected void .ctor(Type classToProxy, IntPtr stub, object stubData); // 0x1008EC2DC
	private static Type InternalGetProxyType(object transparentProxy); // 0x1008EC468
	public Type GetProxiedType(); // 0x1008EC470
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1008EC51C
	internal Identity get_ObjectIdentity(); // 0x1008DABF4
	internal void set_ObjectIdentity(Identity value); // 0x1008EC5D0
	internal virtual object InternalGetTransparentProxy(string className); // 0x1008EC5D8
	public virtual object GetTransparentProxy(); // 0x1008EC5DC
	internal void SetTargetDomain(int domainId); // 0x1008EC7E8
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 704
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x0
	private static MethodInfo _cache_GetHashCodeMethod; // 0x8
	private IMessageSink _sink; // 0x38
	private bool _hasEnvoySink; // 0x40
	private ConstructionCall _ctorCall; // 0x48

	// Methods
	internal void .ctor(Type type, ClientIdentity identity); // 0x1008EC7F0
	internal void .ctor(Type type, string activationUrl, object[] activationAttributes); // 0x1008EC090
	private static void .cctor(); // 0x1008EC834
	public string get_TypeName(); // 0x1008EC90C
	protected override void Finalize(); // 0x1008ECAE4
}

// Namespace: System.Runtime.Remoting.Proxies
public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 705
{
	// Methods
	public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x1008EBFB0
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x1008EC0DC
	public void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0x1008EC268
	public bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x1008EC26C
}

// Namespace: System.Runtime.Remoting.Services
public interface ITrackingHandler // TypeDefIndex: 706
{
	// Methods
	public abstract void DisconnectedObject(object obj); // 0
	public abstract void MarshaledObject(object obj, ObjRef or); // 0
	public abstract void UnmarshaledObject(object obj, ObjRef or); // 0
}

// Namespace: System.Runtime.Remoting.Services
public class TrackingServices // TypeDefIndex: 707
{
	// Fields
	private static ArrayList _handlers; // 0x0

	// Methods
	private static void .cctor(); // 0x1008F06C0
	internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x1008EEF4C
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x1008EE06C
	internal static void NotifyDisconnectedObject(object obj); // 0x1008F0314
}

// Namespace: System.Runtime.Serialization
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 708
{
	// Methods
	public void .ctor(); // 0x1008F2DCC
	public object Convert(object value, Type type); // 0x1008F2DD4
	public bool ToBoolean(object value); // 0x1008F2E50
	public short ToInt16(object value); // 0x1008F2EF0
	public int ToInt32(object value); // 0x1008F2F90
	public long ToInt64(object value); // 0x1008F3030
	public string ToString(object value); // 0x1008F30D0
	public uint ToUInt32(object value); // 0x1008F3170
}

// Namespace: System.Runtime.Serialization
public sealed class FormatterServices // TypeDefIndex: 709
{
	// Methods
	public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x1008FCF30
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x1008FA4D0
	private static void GetFields(Type reflectedType, Type type, ArrayList fields); // 0x100906F0C
	public static object GetUninitializedObject(Type type); // 0x1009010BC
	public static object GetSafeUninitializedObject(Type type); // 0x1009010B8
}

// Namespace: System.Runtime.Serialization
public interface IDeserializationCallback // TypeDefIndex: 710
{
	// Methods
	public abstract void OnDeserialization(object sender); // 0
}

// Namespace: System.Runtime.Serialization
public interface IFormatter // TypeDefIndex: 711
{
	// Methods
	public abstract object Deserialize(Stream serializationStream); // 0
}

// Namespace: System.Runtime.Serialization
public interface IFormatterConverter // TypeDefIndex: 712
{
	// Methods
	public abstract object Convert(object value, Type type); // 0
	public abstract bool ToBoolean(object value); // 0
	public abstract short ToInt16(object value); // 0
	public abstract int ToInt32(object value); // 0
	public abstract long ToInt64(object value); // 0
	public abstract string ToString(object value); // 0
	public abstract uint ToUInt32(object value); // 0
}

// Namespace: System.Runtime.Serialization
public interface IObjectReference // TypeDefIndex: 713
{
	// Methods
	public abstract object GetRealObject(StreamingContext context); // 0
}

// Namespace: System.Runtime.Serialization
public interface ISerializationSurrogate // TypeDefIndex: 714
{
	// Methods
	public abstract void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0
	public abstract object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector); // 0
}

// Namespace: System.Runtime.Serialization
public interface ISurrogateSelector // TypeDefIndex: 715
{
	// Methods
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector); // 0
}

// Namespace: System.Runtime.Serialization
public class ObjectIDGenerator // TypeDefIndex: 716
{
	// Fields
	private Hashtable table; // 0x10
	private long current; // 0x18
	private static InstanceComparer comparer; // 0x0

	// Methods
	public void .ctor(); // 0x100902AE4
	private static void .cctor(); // 0x100907254
	public virtual long GetId(object obj, out bool firstTime); // 0x1009072C8
	internal long get_NextId(); // 0x10090304C
}

// Namespace: 
private class InstanceComparer : IComparer, IHashCodeProvider // TypeDefIndex: 717
{
	// Methods
	public void .ctor(); // 0x1009072C0
	private int System.Collections.IComparer.Compare(object o1, object o2); // 0x100907414
	private int System.Collections.IHashCodeProvider.GetHashCode(object o); // 0x1009074B0
}

// Namespace: System.Runtime.Serialization
public class ObjectManager // TypeDefIndex: 718
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x10
	private ObjectRecord _lastObjectRecord; // 0x18
	private ArrayList _deserializedRecords; // 0x20
	private ArrayList _onDeserializedCallbackRecords; // 0x28
	private Hashtable _objectRecords; // 0x30
	private bool _finalFixup; // 0x38
	private ISurrogateSelector _selector; // 0x40
	private StreamingContext _context; // 0x48
	private int _registeredObjectsCount; // 0x58

	// Methods
	public void .ctor(ISurrogateSelector selector, StreamingContext context); // 0x1008FE81C
	public virtual void DoFixups(); // 0x1009074BC
	internal ObjectRecord GetObjectRecord(long objectID); // 0x10090863C
	public virtual object GetObject(long objectID); // 0x100908818
	public virtual void RaiseDeserializationEvent(); // 0x100908928
	public void RaiseOnDeserializingEvent(object obj); // 0x1009011AC
	private void RaiseOnDeserializedEvent(object obj); // 0x100908B58
	private void AddFixup(BaseFixupRecord record); // 0x100908D10
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired); // 0x100908D8C
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x100908EAC
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x100909000
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x100909154
	private void RegisterObjectInternal(object obj, ObjectRecord record); // 0x1009092A8
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x10090167C
}

// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord // TypeDefIndex: 719
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x10
	protected internal ObjectRecord ObjectRequired; // 0x18
	public BaseFixupRecord NextSameContainer; // 0x20
	public BaseFixupRecord NextSameRequired; // 0x28

	// Methods
	public void .ctor(ObjectRecord objectToBeFixed, ObjectRecord objectRequired); // 0x1008F2798
	public bool DoFixup(ObjectManager manager, bool strict); // 0x1008F2848
	protected abstract void FixupImpl(ObjectManager manager); // 0
}

// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 720
{
	// Fields
	private int _index; // 0x30

	// Methods
	public void .ctor(ObjectRecord objectToBeFixed, int index, ObjectRecord objectRequired); // 0x1008F2758
	protected override void FixupImpl(ObjectManager manager); // 0x1008F27D0
}

// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 721
{
	// Fields
	private int[] _indices; // 0x30

	// Methods
	public void .ctor(ObjectRecord objectToBeFixed, int[] indices, ObjectRecord objectRequired); // 0x10090715C
	protected override void FixupImpl(ObjectManager manager); // 0x10090719C
}

// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord // TypeDefIndex: 722
{
	// Fields
	public MemberInfo _member; // 0x30

	// Methods
	public void .ctor(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired); // 0x1008F2B44
	protected override void FixupImpl(ObjectManager manager); // 0x1008F2B84
}

// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord // TypeDefIndex: 723
{
	// Fields
	public string _memberName; // 0x30

	// Methods
	public void .ctor(ObjectRecord objectToBeFixed, string memberName, ObjectRecord objectRequired); // 0x1008F2A2C
	protected override void FixupImpl(ObjectManager manager); // 0x1008F2A6C
}

// Namespace: System.Runtime.Serialization
internal sealed class ObjectRecordStatus : Enum // TypeDefIndex: 724
{
	// Fields
	public byte value__; // 0x10
	public const ObjectRecordStatus Unregistered = 0; // 0x0
	public const ObjectRecordStatus ReferenceUnsolved = 1; // 0x0
	public const ObjectRecordStatus ReferenceSolvingDelayed = 2; // 0x0
	public const ObjectRecordStatus ReferenceSolved = 3; // 0x0

}

// Namespace: System.Runtime.Serialization
internal class ObjectRecord // TypeDefIndex: 725
{
	// Fields
	public ObjectRecordStatus Status; // 0x10
	public object OriginalObject; // 0x18
	public object ObjectInstance; // 0x20
	public long ObjectID; // 0x28
	public SerializationInfo Info; // 0x30
	public long IdOfContainingObj; // 0x38
	public ISerializationSurrogate Surrogate; // 0x40
	public ISurrogateSelector SurrogateSelector; // 0x48
	public MemberInfo Member; // 0x50
	public int[] ArrayIndex; // 0x58
	public BaseFixupRecord FixupChainAsContainer; // 0x60
	public BaseFixupRecord FixupChainAsRequired; // 0x68
	public ObjectRecord Next; // 0x70

	// Methods
	public void .ctor(); // 0x100908810
	public void SetMemberValue(ObjectManager manager, MemberInfo member, object value); // 0x1008F2BB4
	public void SetArrayValue(ObjectManager manager, object value, int[] indices); // 0x1009071CC
	public void SetMemberValue(ObjectManager manager, string memberName, object value); // 0x1008F2A9C
	public bool get_IsInstanceReady(); // 0x1008F29BC
	public bool get_IsUnsolvedObjectReference(); // 0x10090788C
	public bool get_IsRegistered(); // 0x1008F29AC
	public bool DoFixups(bool asContainer, ObjectManager manager, bool strict); // 0x10090789C
	public void RemoveFixup(BaseFixupRecord fixupToRemove, bool asContainer); // 0x1009095AC
	private void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, bool asContainer); // 0x100909560
	public void ChainFixup(BaseFixupRecord fixup, bool asContainer); // 0x100908D50
	public bool LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context); // 0x100907984
	public bool get_HasPendingFixups(); // 0x100909550
}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 726
{
}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 727
{
}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 728
{
}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 729
{
}

// Namespace: System.Runtime.Serialization
public abstract class SerializationBinder // TypeDefIndex: 730
{
	// Methods
	protected void .ctor(); // 0x100909600
	public abstract Type BindToType(string assemblyName, string typeName); // 0
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks // TypeDefIndex: 731
{
	// Fields
	private readonly ArrayList onSerializingList; // 0x10
	private readonly ArrayList onSerializedList; // 0x18
	private readonly ArrayList onDeserializingList; // 0x20
	private readonly ArrayList onDeserializedList; // 0x28
	private static Hashtable cache; // 0x0
	private static object cache_lock; // 0x8

	// Methods
	public void .ctor(Type type); // 0x100909608
	private static void .cctor(); // 0x100909A24
	public bool get_HasSerializedCallbacks(); // 0x100909AB8
	public bool get_HasDeserializedCallbacks(); // 0x10090862C
	private static ArrayList GetMethodsByAttribute(Type type, Type attr); // 0x100909744
	private static void Invoke(ArrayList list, object target, StreamingContext context); // 0x100909AC8
	public void RaiseOnSerializing(object target, StreamingContext contex); // 0x100909F68
	public void RaiseOnSerialized(object target, StreamingContext contex); // 0x100909FF8
	public void RaiseOnDeserializing(object target, StreamingContext contex); // 0x100908BF0
	public void RaiseOnDeserialized(object target, StreamingContext contex); // 0x100908C80
	public static SerializationCallbacks GetSerializationCallbacks(Type t); // 0x1009082D8
}

// Namespace: 
public sealed class CallbackHandler : MulticastDelegate // TypeDefIndex: 732
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10090A088
	public virtual void Invoke(StreamingContext context); // 0x100909ED8
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object); // 0x10090A190
	public virtual void EndInvoke(IAsyncResult result); // 0x10090A248
}

// Namespace: System.Runtime.Serialization
public struct SerializationEntry // TypeDefIndex: 733
{
	// Fields
	private string name; // 0x10
	private Type objectType; // 0x18
	private object value; // 0x20

	// Methods
	internal void .ctor(string name, Type type, object value); // 0x10090A254
	public string get_Name(); // 0x10090A268
	public Type get_ObjectType(); // 0x10090A270
	public object get_Value(); // 0x10090A280
}

// Namespace: System.Runtime.Serialization
public class SerializationException : SystemException // TypeDefIndex: 734
{
	// Methods
	public void .ctor(); // 0x10090A2BC
	public void .ctor(string message); // 0x1008F2A24
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10090A310
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfo // TypeDefIndex: 735
{
	// Fields
	private Hashtable serialized; // 0x10
	private ArrayList values; // 0x18
	private string assemblyName; // 0x20
	private string fullTypeName; // 0x28
	private IFormatterConverter converter; // 0x30

	// Methods
	public void .ctor(Type type, IFormatterConverter converter); // 0x100901244
	public string get_AssemblyName(); // 0x1009068B8
	public string get_FullTypeName(); // 0x1009068C0
	public int get_MemberCount(); // 0x1009066C4
	public void AddValue(string name, object value, Type type); // 0x10090290C
	public object GetValue(string name, Type type); // 0x10090A318
	public void SetType(Type type); // 0x10090A5C0
	public SerializationInfoEnumerator GetEnumerator(); // 0x100906718
	public void AddValue(string name, short value); // 0x10090A724
	public void AddValue(string name, int value); // 0x10090A7E4
	public void AddValue(string name, bool value); // 0x10090A8A4
	public void AddValue(string name, DateTime value); // 0x10090A964
	public void AddValue(string name, float value); // 0x10090AA30
	public void AddValue(string name, uint value); // 0x10090AAF8
	public void AddValue(string name, long value); // 0x10090ABB8
	public void AddValue(string name, ulong value); // 0x10090AC78
	public void AddValue(string name, object value); // 0x10090AD38
	public bool GetBoolean(string name); // 0x10090ADF4
	public short GetInt16(string name); // 0x10090AF44
	public int GetInt32(string name); // 0x10090B094
	public long GetInt64(string name); // 0x10090B1E4
	public string GetString(string name); // 0x10090B334
	public uint GetUInt32(string name); // 0x10090B4A0
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 736
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	internal void .ctor(ArrayList list); // 0x10090A6C0
	private object System.Collections.IEnumerator.get_Current(); // 0x10090B5F0
	public SerializationEntry get_Current(); // 0x10090B6E0
	public string get_Name(); // 0x1009067A0
	public Type get_ObjectType(); // 0x10090677C
	public object get_Value(); // 0x100906ED8
	public bool MoveNext(); // 0x1009067C4
	public void Reset(); // 0x10090B7F0
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 737
{
	// Fields
	private readonly StreamingContext context; // 0x10
	private readonly Hashtable seen; // 0x20
	private CallbackHandler callbacks; // 0x28

	// Methods
	public void .ctor(StreamingContext context); // 0x100902B90
	public void RegisterObject(object obj); // 0x100904204
	public void RaiseOnSerializedEvent(); // 0x100902EE0
}

// Namespace: 
private sealed class <RegisterObject>c__AnonStorey2 // TypeDefIndex: 738
{
	// Fields
	internal SerializationCallbacks sc; // 0x10
	internal object obj; // 0x18

	// Methods
	public void .ctor(); // 0x10090B8E4
	internal void <>m__1(StreamingContext ctx); // 0x10090B8EC
}

// Namespace: System.Runtime.Serialization
public struct StreamingContext // TypeDefIndex: 739
{
	// Fields
	private StreamingContextStates state; // 0x10
	private object additional; // 0x18

	// Methods
	public void .ctor(StreamingContextStates state); // 0x10090B91C
	public void .ctor(StreamingContextStates state, object additional); // 0x10090B934
	public object get_Context(); // 0x10090B940
	public StreamingContextStates get_State(); // 0x10090B948
	public override bool Equals(object obj); // 0x10090B9E8
	public override int GetHashCode(); // 0x10090B9F0
}

// Namespace: System.Runtime.Serialization
public sealed class StreamingContextStates : Enum // TypeDefIndex: 740
{
	// Fields
	public int value__; // 0x10
	public const StreamingContextStates CrossProcess = 1; // 0x0
	public const StreamingContextStates CrossMachine = 2; // 0x0
	public const StreamingContextStates File = 4; // 0x0
	public const StreamingContextStates Persistence = 8; // 0x0
	public const StreamingContextStates Remoting = 16; // 0x0
	public const StreamingContextStates Other = 32; // 0x0
	public const StreamingContextStates Clone = 64; // 0x0
	public const StreamingContextStates CrossAppDomain = 128; // 0x0
	public const StreamingContextStates All = 255; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class FormatterAssemblyStyle : Enum // TypeDefIndex: 741
{
	// Fields
	public int value__; // 0x10
	public const FormatterAssemblyStyle Simple = 0; // 0x0
	public const FormatterAssemblyStyle Full = 1; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class FormatterTypeStyle : Enum // TypeDefIndex: 742
{
	// Fields
	public int value__; // 0x10
	public const FormatterTypeStyle TypesWhenNeeded = 0; // 0x0
	public const FormatterTypeStyle TypesAlways = 1; // 0x0
	public const FormatterTypeStyle XsdString = 2; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class TypeFilterLevel : Enum // TypeDefIndex: 743
{
	// Fields
	public int value__; // 0x10
	public const TypeFilterLevel Low = 2; // 0x0
	public const TypeFilterLevel Full = 3; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 744
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x10
	private SerializationBinder binder; // 0x18
	private StreamingContext context; // 0x20
	private ISurrogateSelector surrogate_selector; // 0x30
	private FormatterTypeStyle type_format; // 0x38
	private TypeFilterLevel filter_level; // 0x3C
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x0

	// Methods
	public void .ctor(); // 0x1008F44FC
	public void .ctor(ISurrogateSelector selector, StreamingContext context); // 0x1008F45CC
	public static ISurrogateSelector get_DefaultSurrogateSelector(); // 0x1008F4570
	public void set_AssemblyFormat(FormatterAssemblyStyle value); // 0x1008F4618
	public SerializationBinder get_Binder(); // 0x1008F4620
	public StreamingContext get_Context(); // 0x1008F4628
	public ISurrogateSelector get_SurrogateSelector(); // 0x1008F4634
	public TypeFilterLevel get_FilterLevel(); // 0x1008F463C
	public object Deserialize(Stream serializationStream); // 0x1008F4644
	private object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler); // 0x1008F464C
	public void Serialize(Stream serializationStream, object graph); // 0x1008F624C
	public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x1008F6254
	private void WriteBinaryHeader(BinaryWriter writer, bool hasHeaders); // 0x1008F6438
	private void ReadBinaryHeader(BinaryReader reader, out bool hasHeaders); // 0x1008F4864
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon // TypeDefIndex: 745
{
	// Fields
	public static byte[] BinaryHeader; // 0x0
	private static Type[] _typeCodesToType; // 0x8
	private static byte[] _typeCodeMap; // 0x10
	public static bool UseReflectionSerialization; // 0x18

	// Methods
	private static void .cctor(); // 0x1008F3210
	public static bool IsPrimitive(Type type); // 0x1008F3C88
	public static byte GetTypeCode(Type type); // 0x1008F3DD8
	public static Type GetTypeFromCode(int code); // 0x1008F3EE4
	public static void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context); // 0x1008F3F74
	public static void SwapBytes(byte[] byteArray, int size, int dataSize); // 0x1008F4124
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryElement : Enum // TypeDefIndex: 746
{
	// Fields
	public byte value__; // 0x10
	public const BinaryElement Header = 0; // 0x0
	public const BinaryElement RefTypeObject = 1; // 0x0
	public const BinaryElement UntypedRuntimeObject = 2; // 0x0
	public const BinaryElement UntypedExternalObject = 3; // 0x0
	public const BinaryElement RuntimeObject = 4; // 0x0
	public const BinaryElement ExternalObject = 5; // 0x0
	public const BinaryElement String = 6; // 0x0
	public const BinaryElement GenericArray = 7; // 0x0
	public const BinaryElement BoxedPrimitiveTypeValue = 8; // 0x0
	public const BinaryElement ObjectReference = 9; // 0x0
	public const BinaryElement NullValue = 10; // 0x0
	public const BinaryElement End = 11; // 0x0
	public const BinaryElement Assembly = 12; // 0x0
	public const BinaryElement ArrayFiller8b = 13; // 0x0
	public const BinaryElement ArrayFiller32b = 14; // 0x0
	public const BinaryElement ArrayOfPrimitiveType = 15; // 0x0
	public const BinaryElement ArrayOfObject = 16; // 0x0
	public const BinaryElement ArrayOfString = 17; // 0x0
	public const BinaryElement Method = 18; // 0x0
	public const BinaryElement _Unknown4 = 19; // 0x0
	public const BinaryElement _Unknown5 = 20; // 0x0
	public const BinaryElement MethodCall = 21; // 0x0
	public const BinaryElement MethodResponse = 22; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class TypeTag : Enum // TypeDefIndex: 747
{
	// Fields
	public byte value__; // 0x10
	public const TypeTag PrimitiveType = 0; // 0x0
	public const TypeTag String = 1; // 0x0
	public const TypeTag ObjectType = 2; // 0x0
	public const TypeTag RuntimeType = 3; // 0x0
	public const TypeTag GenericType = 4; // 0x0
	public const TypeTag ArrayOfObject = 5; // 0x0
	public const TypeTag ArrayOfString = 6; // 0x0
	public const TypeTag ArrayOfPrimitiveType = 7; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MethodFlags : Enum // TypeDefIndex: 748
{
	// Fields
	public int value__; // 0x10
	public const MethodFlags NoArguments = 1; // 0x0
	public const MethodFlags PrimitiveArguments = 2; // 0x0
	public const MethodFlags ArgumentsInSimpleArray = 4; // 0x0
	public const MethodFlags ArgumentsInMultiArray = 8; // 0x0
	public const MethodFlags ExcludeLogicalCallContext = 16; // 0x0
	public const MethodFlags IncludesLogicalCallContext = 64; // 0x0
	public const MethodFlags IncludesSignature = 128; // 0x0
	public const MethodFlags FormatMask = 15; // 0x0
	public const MethodFlags GenericArguments = 32768; // 0x0
	public const MethodFlags NeedsInfoArrayMask = 32972; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ReturnTypeTag : Enum // TypeDefIndex: 749
{
	// Fields
	public byte value__; // 0x10
	public const ReturnTypeTag Null = 2; // 0x0
	public const ReturnTypeTag PrimitiveType = 8; // 0x0
	public const ReturnTypeTag ObjectType = 16; // 0x0
	public const ReturnTypeTag Exception = 32; // 0x0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator // TypeDefIndex: 750
{
	// Fields
	private static object monitor; // 0x0
	private static ModuleBuilder _module; // 0x8

	// Methods
	private static void .cctor(); // 0x1008F8850
	public static Type GenerateMetadataType(Type type, StreamingContext context); // 0x1008F8970
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context); // 0x1008F8A84
	public static void LoadFromPtr(ILGenerator ig, Type t); // 0x1008FB39C
	private static void EmitWriteTypeSpec(ILGenerator gen, Type type, string member); // 0x1008FADAC
	private static void EmitLoadTypeAssembly(ILGenerator gen, Type type, string member); // 0x1008FA700
	private static void EmitWrite(ILGenerator gen, Type type); // 0x1008FA8CC
	public static void EmitWritePrimitiveValue(ILGenerator gen, Type type); // 0x1008FBC08
	public static Type EnumToUnderlying(Type t); // 0x1008FC104
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader // TypeDefIndex: 751
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x10
	private StreamingContext _context; // 0x18
	private SerializationBinder _binder; // 0x28
	private TypeFilterLevel _filterLevel; // 0x30
	private ObjectManager _manager; // 0x38
	private Hashtable _registeredAssemblies; // 0x40
	private Hashtable _typeMetadataCache; // 0x48
	private object _lastObject; // 0x50
	private long _lastObjectID; // 0x58
	private long _rootObjectID; // 0x60
	private byte[] arrayBuffer; // 0x68
	private int ArrayBufferLength; // 0x70

	// Methods
	public void .ctor(BinaryFormatter formatter); // 0x1008F5F74
	public void ReadObjectGraph(BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x1008FE6BC
	public void ReadObjectGraph(BinaryElement elem, BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x1008F6064
	private bool ReadNextObject(BinaryElement element, BinaryReader reader); // 0x1008FE8E4
	public bool ReadNextObject(BinaryReader reader); // 0x1008FE9CC
	public object get_CurrentObject(); // 0x1008FE9C4
	private void ReadObject(BinaryElement element, BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x1008FEAE4
	private void ReadAssembly(BinaryReader reader); // 0x1008FF6CC
	private void ReadObjectInstance(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo, out long objectId, out object value, out SerializationInfo info); // 0x1008FF1CC
	private void ReadRefTypeObjectInstance(BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x1008FF038
	private void ReadObjectContent(BinaryReader reader, TypeMetadata metadata, long objectId, out object objectInstance, out SerializationInfo info); // 0x100900E40
	private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMemeber, int[] indices); // 0x1008FEE88
	private void ReadStringIntance(BinaryReader reader, out long objectId, out object value); // 0x1008FF280
	private void ReadGenericArray(BinaryReader reader, out long objectId, out object val); // 0x1008FF310
	private object ReadBoxedPrimitiveTypeValue(BinaryReader reader); // 0x1008FF6A0
	private void ReadArrayOfPrimitiveType(BinaryReader reader, out long objectId, out object val); // 0x1008FF7FC
	private void BlockRead(BinaryReader reader, Array array, int dataSize); // 0x100901D04
	private void ReadArrayOfObject(BinaryReader reader, out long objectId, out object array); // 0x1009003D0
	private void ReadArrayOfString(BinaryReader reader, out long objectId, out object array); // 0x100900478
	private void ReadSimpleArray(BinaryReader reader, Type elementType, out long objectId, out object val); // 0x100901F0C
	private TypeMetadata ReadTypeMetadata(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo); // 0x100900520
	private void ReadValue(BinaryReader reader, object parentObject, long parentObjectId, SerializationInfo info, Type valueType, string fieldName, MemberInfo memberInfo, int[] indices); // 0x1009013D4
	private void SetObjectValue(object parentObject, string fieldName, MemberInfo memberInfo, SerializationInfo info, object value, Type valueType, int[] indices); // 0x1009022A4
	private void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, int[] indices); // 0x100902674
	private Type GetDeserializationType(long assemblyId, string className); // 0x100902094
	public Type ReadType(BinaryReader reader, TypeTag code); // 0x10090179C
	public static object ReadPrimitiveTypeValue(BinaryReader reader, Type type); // 0x1008FE0D0
}

// Namespace: 
private class TypeMetadata // TypeDefIndex: 752
{
	// Fields
	public Type Type; // 0x10
	public Type[] MemberTypes; // 0x18
	public string[] MemberNames; // 0x20
	public MemberInfo[] MemberInfos; // 0x28
	public int FieldCount; // 0x30
	public bool NeedsSerializationInfo; // 0x34

	// Methods
	public void .ctor(); // 0x10090208C
}

// Namespace: 
private class ArrayNullFiller // TypeDefIndex: 753
{
	// Fields
	public int NullCount; // 0x10

	// Methods
	public void .ctor(int count); // 0x1008FF7D0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata // TypeDefIndex: 754
{
	// Fields
	public string TypeAssemblyName; // 0x10
	public string InstanceTypeName; // 0x18

	// Methods
	protected void .ctor(); // 0x1008F8840
	public abstract void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0
	public abstract void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0
	public abstract void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0
	public virtual bool IsCompatible(TypeMetadata other); // 0x100906F04
	public abstract bool get_RequiresTypes(); // 0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata // TypeDefIndex: 755
{
	// Fields
	public Type InstanceType; // 0x20

	// Methods
	public void .ctor(Type instanceType); // 0x1008F8788
	public override bool get_RequiresTypes(); // 0x1008F8848
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata // TypeDefIndex: 756
{
	// Fields
	private Type[] types; // 0x20
	private string[] names; // 0x28

	// Methods
	public void .ctor(Type itype, SerializationInfo info); // 0x100904048
	public override bool IsCompatible(TypeMetadata other); // 0x1009068C8
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x100906AEC
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x100906BE4
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x100906DAC
	public override bool get_RequiresTypes(); // 0x100906EFC
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata // TypeDefIndex: 757
{
	// Fields
	private MemberInfo[] members; // 0x28

	// Methods
	public void .ctor(Type type, StreamingContext context); // 0x1008FC540
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x1008FC570
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x1008FC71C
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x1008FCDE8
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter // TypeDefIndex: 758
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x10
	private Hashtable _cachedMetadata; // 0x18
	private Queue _pendingObjects; // 0x20
	private Hashtable _assemblyCache; // 0x28
	private static Hashtable _cachedTypes; // 0x0
	internal static Assembly CorlibAssembly; // 0x8
	internal static string CorlibAssemblyName; // 0x10
	private ISurrogateSelector _surrogateSelector; // 0x30
	private StreamingContext _context; // 0x38
	private FormatterAssemblyStyle _assemblyFormat; // 0x48
	private FormatterTypeStyle _typeFormat; // 0x4C
	private byte[] arrayBuffer; // 0x50
	private int ArrayBufferLength; // 0x58
	private SerializationObjectManager _manager; // 0x60

	// Methods
	public void .ctor(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x1008F8550
	private static void .cctor(); // 0x100902C10
	public void WriteObjectGraph(BinaryWriter writer, object obj, Header[] headers); // 0x1008F8674
	public void QueueObject(object obj); // 0x100902D74
	public void WriteQueuedObjects(BinaryWriter writer); // 0x100902DD8
	public void WriteObjectInstance(BinaryWriter writer, object obj, bool isValueObject); // 0x100902EFC
	public static void WriteSerializationEnd(BinaryWriter writer); // 0x100902E88
	private void WriteObject(BinaryWriter writer, long id, object obj); // 0x100903334
	private void GetObjectData(object obj, out TypeMetadata metadata, out object data); // 0x100903740
	private TypeMetadata CreateMemberTypeMetadata(Type type); // 0x100904434
	private void WriteArray(BinaryWriter writer, long id, Array array); // 0x100903120
	private void WriteGenericArray(BinaryWriter writer, long id, Array array); // 0x1009057D0
	private void WriteObjectArray(BinaryWriter writer, long id, Array array); // 0x10090453C
	private void WriteStringArray(BinaryWriter writer, long id, Array array); // 0x100904674
	private void WritePrimitiveTypeArray(BinaryWriter writer, long id, Array array); // 0x1009047AC
	private void BlockWrite(BinaryWriter writer, Array array, int dataSize); // 0x10090608C
	private void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType); // 0x100905D40
	private void WriteNullFiller(BinaryWriter writer, int numNulls); // 0x100906268
	private void WriteObjectReference(BinaryWriter writer, long id); // 0x1009063B8
	public void WriteValue(BinaryWriter writer, Type valueType, object val); // 0x1008FD238
	private void WriteString(BinaryWriter writer, long id, string str); // 0x100903060
	public int WriteAssembly(BinaryWriter writer, Assembly assembly); // 0x1008FC6B0
	public int WriteAssemblyName(BinaryWriter writer, string assembly); // 0x100903E88
	public int GetAssemblyId(Assembly assembly); // 0x1009065D4
	public int GetAssemblyNameId(string assembly); // 0x100906630
	private int RegisterAssembly(string assembly, out bool firstTime); // 0x100906444
	public static void WritePrimitiveValue(BinaryWriter writer, object value); // 0x1008FD9AC
	public static void WriteTypeCode(BinaryWriter writer, Type type); // 0x1008FC9C4
	public static TypeTag GetTypeTag(Type type); // 0x1008FAA4C
	public void WriteTypeSpec(BinaryWriter writer, Type type); // 0x1008FCA78
}

// Namespace: 
private class MetadataReference // TypeDefIndex: 759
{
	// Fields
	public TypeMetadata Metadata; // 0x10
	public long ObjectID; // 0x18

	// Methods
	public void .ctor(TypeMetadata metadata, long id); // 0x100903E50
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter // TypeDefIndex: 760
{
	// Methods
	public static void WriteMethodCall(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x1008F6554
	public static void WriteMethodResponse(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x1008F74BC
	public static object ReadMethodCall(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter); // 0x1008F4960
	public static object ReadMethodResponse(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter); // 0x1008F54D8
	private static bool AllTypesArePrimitive(object[] objects); // 0x1008FD92C
	public static bool IsMethodPrimitive(Type type); // 0x1008FDFC0
	private static object[] GetExtraProperties(IDictionary properties, string[] internalKeys); // 0x1008FD4F4
	private static bool IsInternalKey(string key, string[] internalKeys); // 0x1008FE744
}

// Namespace: System.Security
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 761
{
	// Methods
	public void .ctor(); // 0x10090D4B0
}

// Namespace: System.Security
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 762
{
	// Methods
	protected void .ctor(); // 0x10090D4B8
	public abstract IPermission Copy(); // 0
	public void Demand(); // 0x10090D4C0
	public override bool Equals(object obj); // 0x10090D4C4
	public abstract void FromXml(SecurityElement elem); // 0
	public override int GetHashCode(); // 0x10090D5F4
	public abstract IPermission Intersect(IPermission target); // 0
	public abstract bool IsSubsetOf(IPermission target); // 0
	public override string ToString(); // 0x10090D5FC
	public abstract SecurityElement ToXml(); // 0
	public virtual IPermission Union(IPermission other); // 0x10090D650
	internal SecurityElement Element(int version); // 0x10090D6BC
	internal static PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted); // 0x10090D874
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x10090D970
	internal static bool IsUnrestricted(SecurityElement se); // 0x10090DCAC
	internal static void ThrowInvalidPermission(IPermission target, Type expected); // 0x10090DDC4
}

// Namespace: System.Security
public class HostSecurityManager // TypeDefIndex: 763
{
	// Methods
	public void .ctor(); // 0x1009568C8
	public virtual HostSecurityManagerOptions get_Flags(); // 0x1009568D0
	public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence); // 0x1009568D8
}

// Namespace: System.Security
public sealed class HostSecurityManagerOptions : Enum // TypeDefIndex: 764
{
	// Fields
	public int value__; // 0x10
	public const HostSecurityManagerOptions None = 0; // 0x0
	public const HostSecurityManagerOptions HostAppDomainEvidence = 1; // 0x0
	public const HostSecurityManagerOptions HostPolicyLevel = 2; // 0x0
	public const HostSecurityManagerOptions HostAssemblyEvidence = 4; // 0x0
	public const HostSecurityManagerOptions HostDetermineApplicationTrust = 8; // 0x0
	public const HostSecurityManagerOptions HostResolvePolicy = 16; // 0x0
	public const HostSecurityManagerOptions AllFlags = 31; // 0x0

}

// Namespace: System.Security
public interface IEvidenceFactory // TypeDefIndex: 765
{
}

// Namespace: System.Security
public interface IPermission : ISecurityEncodable // TypeDefIndex: 766
{
	// Methods
	public abstract void Demand(); // 0
	public abstract IPermission Intersect(IPermission target); // 0
	public abstract bool IsSubsetOf(IPermission target); // 0
	public abstract IPermission Union(IPermission target); // 0
}

// Namespace: System.Security
public interface ISecurityEncodable // TypeDefIndex: 767
{
	// Methods
	public abstract void FromXml(SecurityElement e); // 0
	public abstract SecurityElement ToXml(); // 0
}

// Namespace: System.Security
public interface ISecurityPolicyEncodable // TypeDefIndex: 768
{
	// Methods
	public abstract void FromXml(SecurityElement e, PolicyLevel level); // 0
}

// Namespace: System.Security
public interface IStackWalk // TypeDefIndex: 769
{
}

// Namespace: System.Security
public sealed class NamedPermissionSet : PermissionSet // TypeDefIndex: 770
{
	// Fields
	private string name; // 0x38
	private string description; // 0x40

	// Methods
	internal void .ctor(); // 0x1009568E0
	public void .ctor(string name, PermissionState state); // 0x1009569B0
	public void .ctor(NamedPermissionSet permSet); // 0x100956B5C
	public string get_Name(); // 0x100956FA8
	public void set_Name(string value); // 0x100956A84
	public override PermissionSet Copy(); // 0x100956FB0
	public override void FromXml(SecurityElement et); // 0x100957010
	public override SecurityElement ToXml(); // 0x1009576AC
	public override bool Equals(object obj); // 0x100957C4C
	public override int GetHashCode(); // 0x100957F44
}

// Namespace: System.Security
internal static class PermissionBuilder // TypeDefIndex: 771
{
	// Fields
	private static object[] psNone; // 0x0

	// Methods
	private static void .cctor(); // 0x100957FF4
	public static IPermission Create(string fullname, PermissionState state); // 0x1009580C8
	public static IPermission Create(SecurityElement se); // 0x100958408
	public static IPermission Create(string fullname, SecurityElement se); // 0x100958504
	public static IPermission Create(Type type); // 0x1009585D4
	internal static IPermission CreatePermission(string fullname, SecurityElement se); // 0x10095820C
}

// Namespace: System.Security
public class PermissionSet : IEnumerable, ICollection, IDeserializationCallback, ISecurityEncodable, IStackWalk // TypeDefIndex: 772
{
	// Fields
	private const string tagName = "PermissionSet"; // 0x0
	private const int version = 1; // 0x0
	private static object[] psUnrestricted; // 0x0
	private PermissionState state; // 0x10
	private ArrayList list; // 0x18
	private PolicyLevel _policyLevel; // 0x20
	private bool _declsec; // 0x28
	private bool _readOnly; // 0x29
	private bool[] _ignored; // 0x30
	private static object[] action; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map2B; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map2C; // 0x18

	// Methods
	internal void .ctor(); // 0x100956944
	public void .ctor(PermissionState state); // 0x100956A48
	public void .ctor(PermissionSet permSet); // 0x100956BEC
	internal void .ctor(string xml); // 0x100969684
	private static void .cctor(); // 0x10096975C
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x1009698B8
	public IPermission AddPermission(IPermission perm); // 0x1009698BC
	public virtual PermissionSet Copy(); // 0x100969F24
	public virtual void CopyTo(Array array, int index); // 0x100969F84
	public void Demand(); // 0x10096A148
	public virtual void FromXml(SecurityElement et); // 0x1009570DC
	public IEnumerator GetEnumerator(); // 0x10096A254
	public bool IsSubsetOf(PermissionSet target); // 0x10096A2AC
	public IPermission GetPermission(Type permClass); // 0x10096ACFC
	public PermissionSet Intersect(PermissionSet other); // 0x10096B0F0
	internal void InternalIntersect(PermissionSet intersect, PermissionSet a, PermissionSet b, bool unrestricted); // 0x10096B26C
	public bool IsEmpty(); // 0x10096A88C
	public bool IsUnrestricted(); // 0x10096ACEC
	public IPermission RemovePermission(Type permClass); // 0x100969B04
	public override string ToString(); // 0x10096B6F8
	public virtual SecurityElement ToXml(); // 0x100957748
	public PermissionSet Union(PermissionSet other); // 0x10096B74C
	public virtual int get_Count(); // 0x10096BB8C
	public virtual bool get_IsSynchronized(); // 0x10096BBE0
	public virtual object get_SyncRoot(); // 0x10096BC34
	internal void set_DeclarativeSecurity(bool value); // 0x10096BC38
	public override bool Equals(object obj); // 0x100957D10
	public override int GetHashCode(); // 0x100957F80
	internal PolicyLevel get_Resolver(); // 0x10096A14C
	internal void set_Resolver(PolicyLevel value); // 0x10096BC40
	internal void SetReadOnly(bool value); // 0x10096BC48
	internal static PermissionSet CreateFromBinaryFormat(byte[] data); // 0x10096BC50
	internal static int ReadEncodedInt(byte[] data, int position); // 0x10096BDE4
	internal static IPermission ProcessAttribute(byte[] data, int position); // 0x10096BF88
}

// Namespace: System.Security
public sealed class PolicyLevelType : Enum // TypeDefIndex: 773
{
	// Fields
	public int value__; // 0x10
	public const PolicyLevelType User = 0; // 0x0
	public const PolicyLevelType Machine = 1; // 0x0
	public const PolicyLevelType Enterprise = 2; // 0x0
	public const PolicyLevelType AppDomain = 3; // 0x0

}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 774
{
	// Fields
	private bool _capture; // 0x10
	private IntPtr _winid; // 0x18
	private CompressedStack _stack; // 0x20
	private bool _suppressFlow; // 0x28

	// Methods
	internal void .ctor(); // 0x10097EEF8
	internal void .ctor(SecurityContext sc); // 0x10097EF00
	public static SecurityContext Capture(); // 0x10097EFB0
	internal bool get_FlowSuppressed(); // 0x10097F238
	internal CompressedStack get_CompressedStack(); // 0x10097F3A4
}

// Namespace: System.Security
public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 775
{
	// Fields
	private SecurityCriticalScope _scope; // 0x10

	// Methods
	public void .ctor(); // 0x10097F3AC
}

// Namespace: System.Security
public sealed class SecurityCriticalScope : Enum // TypeDefIndex: 776
{
	// Fields
	public int value__; // 0x10
	public const SecurityCriticalScope Explicit = 0; // 0x0
	public const SecurityCriticalScope Everything = 1; // 0x0

}

// Namespace: System.Security
public sealed class SecurityElement // TypeDefIndex: 777
{
	// Fields
	private string text; // 0x10
	private string tag; // 0x18
	private ArrayList attributes; // 0x20
	private ArrayList children; // 0x28
	private static readonly char[] invalid_tag_chars; // 0x0
	private static readonly char[] invalid_text_chars; // 0x8
	private static readonly char[] invalid_attr_name_chars; // 0x10
	private static readonly char[] invalid_attr_value_chars; // 0x18
	private static readonly char[] invalid_chars; // 0x20

	// Methods
	public void .ctor(string tag); // 0x10097CEB0
	public void .ctor(string tag, string text); // 0x10097D068
	private static void .cctor(); // 0x10097F874
	public Hashtable get_Attributes(); // 0x10097FAE4
	public ArrayList get_Children(); // 0x10097FE70
	public string get_Tag(); // 0x10097FE78
	public void set_Text(string value); // 0x10097F74C
	public void AddAttribute(string name, string value); // 0x10097CEB8
	public void AddChild(SecurityElement child); // 0x10097D1B0
	public string Attribute(string name); // 0x10097E56C
	public static string Escape(string str); // 0x10098052C
	private static string Unescape(string str); // 0x10097FF08
	public static SecurityElement FromString(string xml); // 0x100980B08
	public static bool IsValidAttributeName(string name); // 0x100980D30
	public static bool IsValidAttributeValue(string value); // 0x100980DB8
	public static bool IsValidTag(string tag); // 0x10097F3D4
	public static bool IsValidText(string text); // 0x10097FE80
	public SecurityElement SearchForChildByTag(string tag); // 0x100980E40
	public override string ToString(); // 0x10097D294
	private void ToXml(StringBuilder s, int level); // 0x100981004
	internal SecurityAttribute GetAttribute(string name); // 0x100980038
}

// Namespace: 
internal class SecurityAttribute // TypeDefIndex: 778
{
	// Fields
	private string _name; // 0x10
	private string _value; // 0x18

	// Methods
	public void .ctor(string name, string value); // 0x100980384
	public string get_Name(); // 0x10097FE60
	public string get_Value(); // 0x10097FE68
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityEntry // TypeDefIndex: 779
{
	// Fields
	public IntPtr blob; // 0x10
	public int size; // 0x18
	public int index; // 0x1C

}

// Namespace: System.Security
internal class RuntimeSecurityFrame // TypeDefIndex: 780
{
	// Fields
	public AppDomain domain; // 0x10
	public MethodInfo method; // 0x18
	public RuntimeDeclSecurityEntry assert; // 0x20
	public RuntimeDeclSecurityEntry deny; // 0x30
	public RuntimeDeclSecurityEntry permitonly; // 0x40

}

// Namespace: System.Security
internal struct SecurityFrame // TypeDefIndex: 781
{
	// Fields
	private AppDomain _domain; // 0x10
	private MethodInfo _method; // 0x18
	private PermissionSet _assert; // 0x20
	private PermissionSet _deny; // 0x28
	private PermissionSet _permitonly; // 0x30

	// Methods
	internal void .ctor(RuntimeSecurityFrame frame); // 0x10098258C
	private static Array _GetSecurityStack(int skip); // 0x10098259C
	internal void InitFromRuntimeFrame(RuntimeSecurityFrame frame); // 0x10098289C
	public Assembly get_Assembly(); // 0x10098292C
	public AppDomain get_Domain(); // 0x100982934
	public override string ToString(); // 0x100982AC8
	public static ArrayList GetStack(int skipFrames); // 0x100982AD0
}

// Namespace: System.Security
public class SecurityException : SystemException // TypeDefIndex: 782
{
	// Fields
	private string permissionState; // 0x60
	private Type permissionType; // 0x68
	private string _granted; // 0x70
	private string _refused; // 0x78
	private object _demanded; // 0x80
	private IPermission _firstperm; // 0x88
	private MethodInfo _method; // 0x90
	private Evidence _evidence; // 0x98

	// Methods
	public void .ctor(); // 0x1009816C0
	public void .ctor(string message); // 0x100981784
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009817D0
	public object get_Demanded(); // 0x100981958
	public IPermission get_FirstPermissionThatFailed(); // 0x100981960
	public string get_PermissionState(); // 0x100981968
	public Type get_PermissionType(); // 0x100981970
	public string get_GrantedSet(); // 0x100981978
	public string get_RefusedSet(); // 0x100981980
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100981988
	public override string ToString(); // 0x100981A9C
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityActions // TypeDefIndex: 783
{
	// Fields
	public RuntimeDeclSecurityEntry cas; // 0x10
	public RuntimeDeclSecurityEntry noncas; // 0x20
	public RuntimeDeclSecurityEntry choice; // 0x30

}

// Namespace: System.Security
public static class SecurityManager // TypeDefIndex: 784
{
	// Fields
	private static object _lockObject; // 0x0
	private static ArrayList _hierarchy; // 0x8
	private static Hashtable _declsecCache; // 0x10
	private static PolicyLevel _level; // 0x18
	private static SecurityPermission _execution; // 0x20

	// Methods
	private static void .cctor(); // 0x100982C60
	public static bool get_CheckExecutionRights(); // 0x100982CF8
	public static bool get_SecurityEnabled(); // 0x100982CFC
	internal static bool IsGranted(Assembly a, IPermission perm); // 0x100982D00
	internal static IPermission CheckPermissionSet(Assembly a, PermissionSet ps, bool noncas); // 0x100982F6C
	public static PermissionSet ResolvePolicy(Evidence evidence); // 0x100983484
	public static PermissionSet ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, out PermissionSet denied); // 0x100983BA0
	private static IEnumerator get_Hierarchy(); // 0x100983724
	private static void InitializePolicyHierarchy(); // 0x100983D54
	internal static bool ResolvePolicyLevel(PermissionSet ps, PolicyLevel pl, Evidence evidence); // 0x100983874
	internal static void ResolveIdentityPermissions(PermissionSet ps, Evidence evidence); // 0x100983960
	internal static PolicyLevel get_ResolvingPolicyLevel(); // 0x100984038
	internal static void set_ResolvingPolicyLevel(PolicyLevel value); // 0x1009840A0
	internal static PermissionSet Decode(IntPtr permissions, int length); // 0x1009825A4
	internal static PermissionSet Decode(byte[] encodedPermissions); // 0x10098410C
	private static bool GetLinkDemandSecurity(MethodBase method, PTR cdecl, PTR mdecl); // 0x10098442C
	internal static void ReflectedLinkDemandInvoke(MethodBase mb); // 0x10098443C
	internal static bool ReflectedLinkDemandQuery(MethodBase mb); // 0x100984628
	private static bool LinkDemand(Assembly a, PTR klass, PTR method); // 0x100984750
}

// Namespace: System.Security
public sealed class SecuritySafeCriticalAttribute : Attribute // TypeDefIndex: 785
{
	// Methods
	public void .ctor(); // 0x1009849B0
}

// Namespace: System.Security
public sealed class SecurityZone : Enum // TypeDefIndex: 786
{
	// Fields
	public int value__; // 0x10
	public const SecurityZone MyComputer = 0; // 0x0
	public const SecurityZone Intranet = 1; // 0x0
	public const SecurityZone Trusted = 2; // 0x0
	public const SecurityZone Internet = 3; // 0x0
	public const SecurityZone Untrusted = 4; // 0x0
	public const SecurityZone NoZone = -1; // 0x0

}

// Namespace: System.Security
public sealed class SuppressUnmanagedCodeSecurityAttribute : Attribute // TypeDefIndex: 787
{
	// Methods
	public void .ctor(); // 0x1009849B8
}

// Namespace: System.Security
public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 788
{
	// Methods
	public void .ctor(); // 0x1009849C0
}

// Namespace: System.Security
public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 789
{
	// Methods
	public void .ctor(); // 0x1009849C8
	public void .ctor(string message); // 0x100980CC8
	public void .ctor(string message, Exception inner); // 0x100980CFC
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x100984A78
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 790
{
	// Fields
	protected int KeySizeValue; // 0x10
	protected KeySizes[] LegalKeySizesValue; // 0x18

	// Methods
	protected void .ctor(); // 0x10090DEA4
	private void System.IDisposable.Dispose(); // 0x10090DEAC
	public virtual int get_KeySize(); // 0x10090DF04
	public virtual void set_KeySize(int value); // 0x10090DF0C
	public void Clear(); // 0x10090E098
	protected abstract void Dispose(bool disposing); // 0
	public abstract void FromXmlString(string xmlString); // 0
	public abstract string ToXmlString(bool includePrivateParameters); // 0
	internal static byte[] GetNamedParam(string xml, string param); // 0x10090E0E8
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeFormatter // TypeDefIndex: 791
{
	// Methods
	protected void .ctor(); // 0x10090E270
	public abstract byte[] CreateKeyExchange(byte[] data); // 0
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 792
{
	// Methods
	protected void .ctor(); // 0x10090E278
	public abstract void SetHashAlgorithm(string strName); // 0
	public abstract void SetKey(AsymmetricAlgorithm key); // 0
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureFormatter // TypeDefIndex: 793
{
	// Methods
	protected void .ctor(); // 0x10090E280
	public abstract void SetHashAlgorithm(string strName); // 0
	public abstract void SetKey(AsymmetricAlgorithm key); // 0
	public abstract byte[] CreateSignature(byte[] rgbHash); // 0
}

// Namespace: System.Security.Cryptography
internal static class Base64Constants // TypeDefIndex: 794
{
	// Fields
	public static readonly byte[] EncodeTable; // 0x0
	public static readonly byte[] DecodeTable; // 0x8

	// Methods
	private static void .cctor(); // 0x10090E288
}

// Namespace: System.Security.Cryptography
public sealed class CipherMode : Enum // TypeDefIndex: 795
{
	// Fields
	public int value__; // 0x10
	public const CipherMode CBC = 1; // 0x0
	public const CipherMode ECB = 2; // 0x0
	public const CipherMode OFB = 3; // 0x0
	public const CipherMode CFB = 4; // 0x0
	public const CipherMode CTS = 5; // 0x0

}

// Namespace: System.Security.Cryptography
public class CryptoConfig // TypeDefIndex: 796
{
	// Fields
	private static object lockObject; // 0x0
	private static Hashtable algorithms; // 0x8
	private static Hashtable oid; // 0x10

	// Methods
	private static void .cctor(); // 0x10090E364
	private static void Initialize(); // 0x10090E3D0
	private static void LoadConfig(string filename, Hashtable algorithms, Hashtable oid); // 0x10090FDF0
	public static object CreateFromName(string name); // 0x1009100E8
	public static object CreateFromName(string name, object[] args); // 0x100910150
	public static string MapNameToOID(string name); // 0x100910478
	public static byte[] EncodeOID(string str); // 0x10091068C
	private static byte[] EncodeLongNumber(long x); // 0x100910B54
}

// Namespace: 
private class CryptoHandler : IContentHandler // TypeDefIndex: 797
{
	// Fields
	private Hashtable algorithms; // 0x10
	private Hashtable oid; // 0x18
	private Hashtable names; // 0x20
	private Hashtable classnames; // 0x28
	private int level; // 0x30

	// Methods
	public void .ctor(Hashtable algorithms, Hashtable oid); // 0x100910050
	public void OnStartParsing(SmallXmlParser parser); // 0x100910CF0
	public void OnEndParsing(SmallXmlParser parser); // 0x100910CF4
	private string Get(IAttrList attrs, string name); // 0x100911168
	public void OnStartElement(string name, IAttrList attrs); // 0x100911418
	public void OnEndElement(string name); // 0x1009118AC
	public void OnProcessingInstruction(string name, string text); // 0x100911A74
	public void OnChars(string text); // 0x100911A78
	public void OnIgnorableWhitespace(string text); // 0x100911A7C
}

// Namespace: System.Security.Cryptography
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 798
{
	// Methods
	public void .ctor(); // 0x100911A80
	public void .ctor(string message); // 0x10090E064
	public void .ctor(string message, Exception inner); // 0x100911AF8
	public void .ctor(string format, string insert); // 0x100911B2C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100911BD0
}

// Namespace: System.Security.Cryptography
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 799
{
	// Methods
	public void .ctor(); // 0x100911BD8
	public void .ctor(string message); // 0x100910B08
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100911C68
}

// Namespace: System.Security.Cryptography
public class CryptoStream : Stream // TypeDefIndex: 800
{
	// Fields
	private Stream _stream; // 0x18
	private ICryptoTransform _transform; // 0x20
	private CryptoStreamMode _mode; // 0x28
	private byte[] _currentBlock; // 0x30
	private bool _disposed; // 0x38
	private bool _flushedFinalBlock; // 0x39
	private int _partialCount; // 0x3C
	private bool _endOfStream; // 0x40
	private byte[] _waitingBlock; // 0x48
	private int _waitingCount; // 0x50
	private byte[] _transformedBlock; // 0x58
	private int _transformedPos; // 0x60
	private int _transformedCount; // 0x64
	private byte[] _workingBlock; // 0x68
	private int _workingCount; // 0x70

	// Methods
	public void .ctor(Stream stream, ICryptoTransform transform, CryptoStreamMode mode); // 0x100911C70
	protected override void Finalize(); // 0x100912054
	public override bool get_CanRead(); // 0x1009120F4
	public override bool get_CanSeek(); // 0x100912104
	public override bool get_CanWrite(); // 0x10091210C
	public override long get_Length(); // 0x10091211C
	public override long get_Position(); // 0x10091217C
	public override void set_Position(long value); // 0x1009121DC
	public override void Close(); // 0x10091223C
	public override int Read(out byte[] buffer, int offset, int count); // 0x100912520
	public override void Write(byte[] buffer, int offset, int count); // 0x100912FEC
	public override void Flush(); // 0x10091395C
	public void FlushFinalBlock(); // 0x1009122BC
	public override long Seek(long offset, SeekOrigin origin); // 0x1009139BC
	public override void SetLength(long value); // 0x100913A1C
	protected override void Dispose(bool disposing); // 0x100913A7C
}

// Namespace: System.Security.Cryptography
public sealed class CryptoStreamMode : Enum // TypeDefIndex: 801
{
	// Fields
	public int value__; // 0x10
	public const CryptoStreamMode Read = 0; // 0x0
	public const CryptoStreamMode Write = 1; // 0x0

}

// Namespace: System.Security.Cryptography
public sealed class CspParameters // TypeDefIndex: 802
{
	// Fields
	private CspProviderFlags _Flags; // 0x10
	public string KeyContainerName; // 0x18
	public int KeyNumber; // 0x20
	public string ProviderName; // 0x28
	public int ProviderType; // 0x30

	// Methods
	public void .ctor(); // 0x100913AF4
	public void .ctor(int dwTypeIn); // 0x100913B30
	public void .ctor(int dwTypeIn, string strProviderNameIn); // 0x100913B6C
	public void .ctor(int dwTypeIn, string strProviderNameIn, string strContainerNameIn); // 0x100913BA8
	public CspProviderFlags get_Flags(); // 0x100913BF4
	public void set_Flags(CspProviderFlags value); // 0x100913BFC
}

// Namespace: System.Security.Cryptography
public sealed class CspProviderFlags : Enum // TypeDefIndex: 803
{
	// Fields
	public int value__; // 0x10
	public const CspProviderFlags UseMachineKeyStore = 1; // 0x0
	public const CspProviderFlags UseDefaultKeyContainer = 2; // 0x0
	public const CspProviderFlags UseExistingKey = 8; // 0x0
	public const CspProviderFlags NoFlags = 0; // 0x0
	public const CspProviderFlags NoPrompt = 64; // 0x0
	public const CspProviderFlags UseArchivableKey = 16; // 0x0
	public const CspProviderFlags UseNonExportableKey = 4; // 0x0
	public const CspProviderFlags UseUserProtectedKey = 32; // 0x0

}

// Namespace: System.Security.Cryptography
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 804
{
	// Fields
	internal static readonly byte[] weakKeys; // 0x0
	internal static readonly byte[] semiWeakKeys; // 0x8

	// Methods
	protected void .ctor(); // 0x100913C04
	private static void .cctor(); // 0x100913DBC
	public static DES Create(); // 0x100913EA4
	public static DES Create(string algName); // 0x100913F0C
	public static bool IsWeakKey(byte[] rgbKey); // 0x100913F80
	public static bool IsSemiWeakKey(byte[] rgbKey); // 0x100914174
	public override byte[] get_Key(); // 0x100914368
	public override void set_Key(byte[] value); // 0x10091447C
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 805
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x0
	internal static readonly int KEY_BYTE_SIZE; // 0x4
	internal static readonly int BLOCK_BIT_SIZE; // 0x8
	internal static readonly int BLOCK_BYTE_SIZE; // 0xC
	private byte[] keySchedule; // 0x58
	private byte[] byteBuff; // 0x60
	private uint[] dwordBuff; // 0x68
	private static readonly uint[] spBoxes; // 0x10
	private static readonly byte[] PC1; // 0x18
	private static readonly byte[] leftRotTotal; // 0x20
	private static readonly byte[] PC2; // 0x28
	internal static readonly uint[] ipTab; // 0x30
	internal static readonly uint[] fpTab; // 0x38

	// Methods
	internal void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv); // 0x100914764
	private static void .cctor(); // 0x100915110
	private uint CipherFunct(uint r, int n); // 0x100915318
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap); // 0x1009156AC
	private static void BSwap(byte[] byteBuff); // 0x100915B7C
	internal void SetKey(byte[] key); // 0x100914C7C
	public void ProcessBlock(byte[] input, byte[] output); // 0x100915D68
	protected override void ECB(byte[] input, byte[] output); // 0x100916198
	internal static byte[] GetStrongKey(); // 0x100914B70
}

// Namespace: System.Security.Cryptography
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 806
{
	// Methods
	public void .ctor(); // 0x100914684
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x1009146E8
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x100914A10
	public override void GenerateIV(); // 0x100914A8C
	public override void GenerateKey(); // 0x100914B08
}

// Namespace: System.Security.Cryptography
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 807
{
	// Methods
	protected void .ctor(); // 0x10091624C
	public static DSA Create(); // 0x100916254
	public static DSA Create(string algName); // 0x10091629C
	public abstract byte[] CreateSignature(byte[] rgbHash); // 0
	public abstract DSAParameters ExportParameters(bool includePrivateParameters); // 0
	internal void ZeroizePrivateKey(DSAParameters parameters); // 0x100916310
	public override void FromXmlString(string xmlString); // 0x100916330
	public abstract void ImportParameters(DSAParameters parameters); // 0
	public override string ToXmlString(bool includePrivateParameters); // 0x1009166B8
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0
}

// Namespace: System.Security.Cryptography
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 808
{
	// Fields
	private KeyPairPersistence store; // 0x20
	private bool persistKey; // 0x28
	private bool persisted; // 0x29
	private bool privateKeyExportable; // 0x2A
	private bool m_disposed; // 0x2B
	private DSAManaged dsa; // 0x30
	private static bool useMachineKeyStore; // 0x0

	// Methods
	public void .ctor(); // 0x100916CF0
	public void .ctor(int dwKeySize); // 0x100916FE4
	public void .ctor(int dwKeySize, CspParameters parameters); // 0x100916CFC
	private static void .cctor(); // 0x100916FEC
	protected override void Finalize(); // 0x100916FF0
	public override int get_KeySize(); // 0x1009170BC
	public bool get_PublicOnly(); // 0x100917110
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x10091712C
	public override void ImportParameters(DSAParameters parameters); // 0x10091720C
	public override byte[] CreateSignature(byte[] rgbHash); // 0x1009172C8
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x10091732C
	protected override void Dispose(bool disposing); // 0x100917060
	private void OnKeyGenerated(object sender, EventArgs e); // 0x100917398
}

// Namespace: System.Security.Cryptography
public struct DSAParameters // TypeDefIndex: 809
{
	// Fields
	public int Counter; // 0x10
	public byte[] G; // 0x18
	public byte[] J; // 0x20
	public byte[] P; // 0x28
	public byte[] Q; // 0x30
	public byte[] Seed; // 0x38
	public byte[] X; // 0x40
	public byte[] Y; // 0x48

}

// Namespace: System.Security.Cryptography
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 810
{
	// Fields
	private DSA dsa; // 0x10

	// Methods
	public void .ctor(); // 0x1009175C8
	public void .ctor(AsymmetricAlgorithm key); // 0x1009175D0
	public override void SetHashAlgorithm(string strName); // 0x100917634
	public override void SetKey(AsymmetricAlgorithm key); // 0x100917764
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x1009177FC
}

// Namespace: System.Security.Cryptography
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 811
{
	// Fields
	private DSA dsa; // 0x10

	// Methods
	public void .ctor(); // 0x100917974
	public override byte[] CreateSignature(byte[] rgbHash); // 0x10091797C
	public override void SetHashAlgorithm(string strName); // 0x100917A44
	public override void SetKey(AsymmetricAlgorithm key); // 0x100917B74
}

// Namespace: System.Security.Cryptography
public sealed class FromBase64TransformMode : Enum // TypeDefIndex: 812
{
	// Fields
	public int value__; // 0x10
	public const FromBase64TransformMode IgnoreWhiteSpaces = 0; // 0x0
	public const FromBase64TransformMode DoNotIgnoreWhiteSpaces = 1; // 0x0

}

// Namespace: System.Security.Cryptography
public class FromBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 813
{
	// Fields
	private FromBase64TransformMode mode; // 0x10
	private byte[] accumulator; // 0x18
	private int accPtr; // 0x20
	private bool m_disposed; // 0x24
	private byte[] lookupTable; // 0x28

	// Methods
	public void .ctor(); // 0x100917C0C
	public void .ctor(FromBase64TransformMode whitespaces); // 0x100917C14
	private void System.IDisposable.Dispose(); // 0x100917C9C
	protected override void Finalize(); // 0x100917CF4
	public bool get_CanTransformMultipleBlocks(); // 0x100917D94
	public virtual bool get_CanReuseTransform(); // 0x100917D9C
	public int get_InputBlockSize(); // 0x100917DA4
	public int get_OutputBlockSize(); // 0x100917DAC
	protected virtual void Dispose(bool disposing); // 0x100917DB4
	private byte lookup(byte input); // 0x100917E08
	private int ProcessBlock(byte[] output, int offset); // 0x100917ED0
	private void CheckInputParameters(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100918258
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x100918438
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100918620
}

// Namespace: System.Security.Cryptography
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 814
{
	// Fields
	protected internal byte[] HashValue; // 0x10
	protected int HashSizeValue; // 0x18
	protected int State; // 0x1C
	private bool disposed; // 0x20

	// Methods
	protected void .ctor(); // 0x1009189AC
	private void System.IDisposable.Dispose(); // 0x1009189D4
	public virtual bool get_CanTransformMultipleBlocks(); // 0x100918A2C
	public virtual bool get_CanReuseTransform(); // 0x100918A34
	public byte[] ComputeHash(byte[] buffer); // 0x100918A3C
	public byte[] ComputeHash(byte[] buffer, int offset, int count); // 0x100918ACC
	public static HashAlgorithm Create(string hashName); // 0x100918CF4
	public virtual byte[] get_Hash(); // 0x100918D68
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize); // 0
	protected abstract byte[] HashFinal(); // 0
	public virtual int get_HashSize(); // 0x100918DEC
	public abstract void Initialize(); // 0
	protected virtual void Dispose(bool disposing); // 0x100918DF4
	public virtual int get_InputBlockSize(); // 0x100918E00
	public virtual int get_OutputBlockSize(); // 0x100918E08
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x100918E10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x10091903C
}

// Namespace: System.Security.Cryptography
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 815
{
	// Fields
	private bool _disposed; // 0x30
	private string _hashName; // 0x38
	private HashAlgorithm _algo; // 0x40
	private BlockProcessor _block; // 0x48
	private int _blockSizeValue; // 0x50

	// Methods
	protected void .ctor(); // 0x10091922C
	protected int get_BlockSizeValue(); // 0x100919288
	protected void set_BlockSizeValue(int value); // 0x100919290
	public void set_HashName(string value); // 0x100919298
	public override byte[] get_Key(); // 0x1009192C0
	public override void set_Key(byte[] value); // 0x100919484
	internal BlockProcessor get_Block(); // 0x10091970C
	private byte[] KeySetup(byte[] key, byte padding); // 0x100919790
	protected override void Dispose(bool disposing); // 0x1009198C0
	protected override void HashCore(byte[] rgb, int ib, int cb); // 0x100919948
	protected override byte[] HashFinal(); // 0x100919A30
	public override void Initialize(); // 0x100919C38
	public static HMAC Create(); // 0x100919D70
	public static HMAC Create(string algorithmName); // 0x100919DB8
}

// Namespace: System.Security.Cryptography
public class HMACMD5 : HMAC // TypeDefIndex: 816
{
	// Methods
	public void .ctor(); // 0x100919E2C
	public void .ctor(byte[] key); // 0x100919E60
}

// Namespace: System.Security.Cryptography
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 817
{
	// Methods
	public void .ctor(); // 0x100919F1C
	public void .ctor(byte[] key); // 0x100919F50
}

// Namespace: System.Security.Cryptography
public class HMACSHA1 : HMAC // TypeDefIndex: 818
{
	// Methods
	public void .ctor(); // 0x10091A00C
	public void .ctor(byte[] key); // 0x10091A040
}

// Namespace: System.Security.Cryptography
public class HMACSHA256 : HMAC // TypeDefIndex: 819
{
	// Methods
	public void .ctor(); // 0x10091A0FC
	public void .ctor(byte[] key); // 0x10091A130
}

// Namespace: System.Security.Cryptography
public class HMACSHA384 : HMAC // TypeDefIndex: 820
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x54

	// Methods
	public void .ctor(); // 0x10091A1EC
	public void .ctor(byte[] key); // 0x10091A294
	private static void .cctor(); // 0x10091A3BC
	public void set_ProduceLegacyHmacValues(bool value); // 0x10091A390
}

// Namespace: System.Security.Cryptography
public class HMACSHA512 : HMAC // TypeDefIndex: 821
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x54

	// Methods
	public void .ctor(); // 0x10091A464
	public void .ctor(byte[] key); // 0x10091A50C
	private static void .cctor(); // 0x10091A634
	public void set_ProduceLegacyHmacValues(bool value); // 0x10091A608
}

// Namespace: System.Security.Cryptography
public interface ICryptoTransform : IDisposable // TypeDefIndex: 822
{
	// Methods
	public abstract bool get_CanReuseTransform(); // 0
	public abstract bool get_CanTransformMultipleBlocks(); // 0
	public abstract int get_InputBlockSize(); // 0
	public abstract int get_OutputBlockSize(); // 0
	public abstract int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0
	public abstract byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0
}

// Namespace: System.Security.Cryptography
public interface ICspAsymmetricAlgorithm // TypeDefIndex: 823
{
}

// Namespace: System.Security.Cryptography
public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 824
{
	// Fields
	protected byte[] KeyValue; // 0x28

	// Methods
	protected void .ctor(); // 0x100919260
	protected override void Finalize(); // 0x10091A6DC
	public virtual byte[] get_Key(); // 0x1009193A4
	public virtual void set_Key(byte[] value); // 0x1009195B8
	protected override void Dispose(bool disposing); // 0x100919908
	private void ZeroizeKey(); // 0x10091A77C
}

// Namespace: System.Security.Cryptography
public sealed class KeySizes // TypeDefIndex: 825
{
	// Fields
	private int _maxSize; // 0x10
	private int _minSize; // 0x14
	private int _skipSize; // 0x18

	// Methods
	public void .ctor(int minSize, int maxSize, int skipSize); // 0x100913D7C
	public int get_MaxSize(); // 0x10091A79C
	public int get_MinSize(); // 0x10091A7A4
	public int get_SkipSize(); // 0x10091A7AC
	internal bool IsLegal(int keySize); // 0x10091A7B4
	internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size); // 0x10090DFAC
}

// Namespace: System.Security.Cryptography
public class MACTripleDES : KeyedHashAlgorithm // TypeDefIndex: 826
{
	// Fields
	private TripleDES tdes; // 0x30
	private MACAlgorithm mac; // 0x38
	private bool m_disposed; // 0x40

	// Methods
	public void .ctor(); // 0x10091A804
	private void Setup(string strTripleDES, byte[] rgbKey); // 0x10091A868
	protected override void Finalize(); // 0x10091A9F0
	protected override void Dispose(bool disposing); // 0x10091AA88
	public override void Initialize(); // 0x10091AB1C
	protected override void HashCore(byte[] rgbData, int ibStart, int cbSize); // 0x10091ABAC
	protected override byte[] HashFinal(); // 0x10091AC90
}

// Namespace: System.Security.Cryptography
public abstract class MD5 : HashAlgorithm // TypeDefIndex: 827
{
	// Methods
	protected void .ctor(); // 0x10091AD1C
	public static MD5 Create(); // 0x10091AD4C
	public static MD5 Create(string algName); // 0x10091AD94
}

// Namespace: System.Security.Cryptography
public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 828
{
	// Fields
	private uint[] _H; // 0x28
	private uint[] buff; // 0x30
	private ulong count; // 0x38
	private byte[] _ProcessingBuffer; // 0x40
	private int _ProcessingBufferCount; // 0x48
	private static readonly uint[] K; // 0x0

	// Methods
	public void .ctor(); // 0x10091AE08
	private static void .cctor(); // 0x10091AFBC
	protected override void Finalize(); // 0x10091B04C
	protected override void Dispose(bool disposing); // 0x10091B05C
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x10091B0E4
	protected override byte[] HashFinal(); // 0x10091D250
	public override void Initialize(); // 0x10091AED0
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x10091B200
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x10091D36C
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x10091D574
}

// Namespace: System.Security.Cryptography
public sealed class PaddingMode : Enum // TypeDefIndex: 829
{
	// Fields
	public int value__; // 0x10
	public const PaddingMode None = 1; // 0x0
	public const PaddingMode PKCS7 = 2; // 0x0
	public const PaddingMode Zeros = 3; // 0x0
	public const PaddingMode ANSIX923 = 4; // 0x0
	public const PaddingMode ISO10126 = 5; // 0x0

}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 830
{
	// Methods
	protected void .ctor(); // 0x10091D6C8
	public static RandomNumberGenerator Create(); // 0x10091D6D0
	public static RandomNumberGenerator Create(string rngName); // 0x10091D718
	public abstract void GetBytes(byte[] data); // 0
	public abstract void GetNonZeroBytes(byte[] data); // 0
}

// Namespace: System.Security.Cryptography
public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 831
{
	// Fields
	protected int EffectiveKeySizeValue; // 0x50

	// Methods
	protected void .ctor(); // 0x10091D794
	public static RC2 Create(); // 0x10091D950
	public static RC2 Create(string AlgName); // 0x10091D998
	public virtual int get_EffectiveKeySize(); // 0x10091DA14
	public override int get_KeySize(); // 0x10091DA28
	public override void set_KeySize(int value); // 0x10091DA38
}

// Namespace: System.Security.Cryptography
public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 832
{
	// Methods
	public void .ctor(); // 0x10091DB10
	public override int get_EffectiveKeySize(); // 0x10091DB14
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x10091DB28
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x10091E2C4
	public override void GenerateIV(); // 0x10091E340
	public override void GenerateKey(); // 0x10091E374
}

// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform // TypeDefIndex: 833
{
	// Fields
	private ushort R0; // 0x58
	private ushort R1; // 0x5A
	private ushort R2; // 0x5C
	private ushort R3; // 0x5E
	private ushort[] K; // 0x60
	private int j; // 0x68
	private static readonly byte[] pitable; // 0x0

	// Methods
	public void .ctor(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv); // 0x10091DBA4
	private static void .cctor(); // 0x10091E3A8
	protected override void ECB(byte[] input, byte[] output); // 0x10091E438
}

// Namespace: System.Security.Cryptography
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 834
{
	// Methods
	protected void .ctor(); // 0x10091F418
	public static Rijndael Create(); // 0x10091F5A0
	public static Rijndael Create(string algName); // 0x10091F5E8
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 835
{
	// Methods
	public void .ctor(); // 0x10091F664
	public override void GenerateIV(); // 0x10091F668
	public override void GenerateKey(); // 0x10091F69C
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x10091F6D0
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x10091F814
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 836
{
	// Fields
	private uint[] expandedKey; // 0x58
	private int Nb; // 0x60
	private int Nk; // 0x64
	private int Nr; // 0x68
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x8
	private static readonly byte[] iSBox; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] T1; // 0x20
	private static readonly uint[] T2; // 0x28
	private static readonly uint[] T3; // 0x30
	private static readonly uint[] iT0; // 0x38
	private static readonly uint[] iT1; // 0x40
	private static readonly uint[] iT2; // 0x48
	private static readonly uint[] iT3; // 0x50

	// Methods
	public void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x10091F890
	private static void .cctor(); // 0x100920674
	public void Clear(); // 0x100920270
	protected override void ECB(byte[] input, byte[] output); // 0x1009209BC
	private uint SubByte(uint a); // 0x100920520
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x100920A6C
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x100924F74
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x10092B82C
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x100933FD4
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x1009384E0
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x10093F408
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 837
{
	// Fields
	private RijndaelTransform _st; // 0x10
	private int _bs; // 0x18

	// Methods
	internal void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x10091F74C
	private void System.IDisposable.Dispose(); // 0x100920258
	public bool get_CanTransformMultipleBlocks(); // 0x1009202C0
	public bool get_CanReuseTransform(); // 0x100920314
	public int get_InputBlockSize(); // 0x100920368
	public int get_OutputBlockSize(); // 0x1009203BC
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x100920410
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1009204A4
}

// Namespace: System.Security.Cryptography
public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 838
{
	// Methods
	protected void .ctor(); // 0x100947940
}

// Namespace: System.Security.Cryptography
public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 839
{
	// Fields
	private byte[] _ProcessingBuffer; // 0x28
	private uint[] _X; // 0x30
	private uint[] _HashValue; // 0x38
	private ulong _Length; // 0x40
	private int _ProcessingBufferCount; // 0x48

	// Methods
	public void .ctor(); // 0x10094796C
	public override void Initialize(); // 0x100947A5C
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x100947BB4
	protected override byte[] HashFinal(); // 0x100947E98
	protected override void Finalize(); // 0x1009481A0
	private void ProcessBlock(byte[] buffer, int offset); // 0x100947CDC
	private void Compress(); // 0x100948240
	private void CompressFinal(ulong length); // 0x100948000
	private uint ROL(uint x, int n); // 0x10094BB00
	private uint F(uint x, uint y, uint z); // 0x10094BB10
	private uint G(uint x, uint y, uint z); // 0x10094BB1C
	private uint H(uint x, uint y, uint z); // 0x10094BB2C
	private uint I(uint x, uint y, uint z); // 0x10094BB38
	private uint J(uint x, uint y, uint z); // 0x10094BB48
	private void FF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B838
	private void GG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B874
	private void HH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B8C0
	private void II(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B908
	private void JJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B954
	private void FFF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094BAC4
	private void GGG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094BA78
	private void HHH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094BA30
	private void III(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B9E4
	private void JJJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x10094B99C
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 840
{
	// Fields
	private static object _lock; // 0x0
	private IntPtr _handle; // 0x10

	// Methods
	public void .ctor(); // 0x10094BB54
	private static void .cctor(); // 0x10094BC84
	private void Check(); // 0x10094BBD8
	private static bool RngOpen(); // 0x10094BCF8
	private static IntPtr RngInitialize(byte[] seed); // 0x10094BBD0
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x10094BCFC
	private static void RngClose(IntPtr handle); // 0x10094BD08
	public override void GetBytes(byte[] data); // 0x10094BD10
	public override void GetNonZeroBytes(byte[] data); // 0x10094BEA0
	protected override void Finalize(); // 0x10094C050
}

// Namespace: System.Security.Cryptography
public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 841
{
	// Methods
	protected void .ctor(); // 0x10094C154
	public static RSA Create(); // 0x10094C15C
	public static RSA Create(string algName); // 0x10094C1A4
	public abstract byte[] EncryptValue(byte[] rgb); // 0
	public abstract byte[] DecryptValue(byte[] rgb); // 0
	public abstract RSAParameters ExportParameters(bool includePrivateParameters); // 0
	public abstract void ImportParameters(RSAParameters parameters); // 0
	internal void ZeroizePrivateKey(RSAParameters parameters); // 0x10094C220
	public override void FromXmlString(string xmlString); // 0x10094C2EC
	public override string ToXmlString(bool includePrivateParameters); // 0x10094C6A8
}

// Namespace: System.Security.Cryptography
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 842
{
	// Fields
	private KeyPairPersistence store; // 0x20
	private bool persistKey; // 0x28
	private bool persisted; // 0x29
	private bool privateKeyExportable; // 0x2A
	private bool m_disposed; // 0x2B
	private RSAManaged rsa; // 0x30
	private static bool useMachineKeyStore; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map2D; // 0x8

	// Methods
	public void .ctor(); // 0x10094CC28
	public void .ctor(CspParameters parameters); // 0x10094CF1C
	public void .ctor(int dwKeySize); // 0x10094CF58
	private static void .cctor(); // 0x10094CF94
	private void Common(int dwKeySize, CspParameters p); // 0x10094CC60
	protected override void Finalize(); // 0x10094CFFC
	public override int get_KeySize(); // 0x10094CF98
	public bool get_PublicOnly(); // 0x10094D0CC
	public override byte[] DecryptValue(byte[] rgb); // 0x10094D0E8
	public override byte[] EncryptValue(byte[] rgb); // 0x10094D1BC
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x10094D220
	public override void ImportParameters(RSAParameters parameters); // 0x10094D2F0
	private string GetHashNameFromOID(string oid); // 0x10094D3AC
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature); // 0x10094D598
	protected override void Dispose(bool disposing); // 0x10094D06C
	private void OnKeyGenerated(object sender, EventArgs e); // 0x10094D6B8
}

// Namespace: System.Security.Cryptography
public struct RSAParameters // TypeDefIndex: 843
{
	// Fields
	public byte[] P; // 0x10
	public byte[] Q; // 0x18
	public byte[] D; // 0x20
	public byte[] DP; // 0x28
	public byte[] DQ; // 0x30
	public byte[] InverseQ; // 0x38
	public byte[] Modulus; // 0x40
	public byte[] Exponent; // 0x48

}

// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 844
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Methods
	public void .ctor(AsymmetricAlgorithm key); // 0x10094D8FC
	public override byte[] CreateKeyExchange(byte[] rgbData); // 0x10094D9C4
	private void SetRSAKey(AsymmetricAlgorithm key); // 0x10094D92C
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 845
{
	// Fields
	private RSA rsa; // 0x10
	private string hashName; // 0x18

	// Methods
	public void .ctor(); // 0x10094DB90
	public void .ctor(AsymmetricAlgorithm key); // 0x10094DB98
	public override void SetHashAlgorithm(string strName); // 0x10094DBFC
	public override void SetKey(AsymmetricAlgorithm key); // 0x10094DC80
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x10094DD18
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 846
{
	// Fields
	private RSA rsa; // 0x10
	private HashAlgorithm hash; // 0x18

	// Methods
	public void .ctor(); // 0x10094DE6C
	public override byte[] CreateSignature(byte[] rgbHash); // 0x10094DE74
	public override void SetHashAlgorithm(string strName); // 0x10094DF88
	public override void SetKey(AsymmetricAlgorithm key); // 0x10094DFB4
}

// Namespace: System.Security.Cryptography
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 847
{
	// Methods
	protected void .ctor(); // 0x10094E04C
	public static SHA1 Create(); // 0x10094E078
	public static SHA1 Create(string hashName); // 0x10094E0C0
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 848
{
	// Fields
	private uint[] _H; // 0x10
	private ulong count; // 0x18
	private byte[] _ProcessingBuffer; // 0x20
	private int _ProcessingBufferCount; // 0x28
	private uint[] buff; // 0x30

	// Methods
	public void .ctor(); // 0x10094E1AC
	public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x10094E304
	public byte[] HashFinal(); // 0x10094E434
	public void Initialize(); // 0x10094E56C
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x10094E68C
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x10094EFC0
	private static void FillBuff(uint[] buff); // 0x10094FA80
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x10094EDA8
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x10094FFCC
}

// Namespace: System.Security.Cryptography
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 849
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods
	public void .ctor(); // 0x10094E13C
	protected override void Finalize(); // 0x10094E268
	protected override void Dispose(bool disposing); // 0x10094E2DC
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x10094E2E4
	protected override byte[] HashFinal(); // 0x10094E418
	public override void Initialize(); // 0x10094E554
}

// Namespace: System.Security.Cryptography
public class SHA1Managed : SHA1 // TypeDefIndex: 850
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods
	public void .ctor(); // 0x100950120
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x100950190
	protected override byte[] HashFinal(); // 0x1009501B0
	public override void Initialize(); // 0x1009501CC
}

// Namespace: System.Security.Cryptography
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 851
{
	// Methods
	protected void .ctor(); // 0x1009501E4
	public static SHA256 Create(); // 0x100950210
	public static SHA256 Create(string hashName); // 0x100950258
}

// Namespace: System.Security.Cryptography
public class SHA256Managed : SHA256 // TypeDefIndex: 852
{
	// Fields
	private uint[] _H; // 0x28
	private ulong count; // 0x30
	private byte[] _ProcessingBuffer; // 0x38
	private int _ProcessingBufferCount; // 0x40
	private uint[] buff; // 0x48

	// Methods
	public void .ctor(); // 0x1009502D4
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x1009503C4
	protected override byte[] HashFinal(); // 0x100950B6C
	public override void Initialize(); // 0x100950E98
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x1009504E0
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100950C90
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x100951054
}

// Namespace: System.Security.Cryptography
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 853
{
	// Methods
	protected void .ctor(); // 0x1009511A8
	public static SHA384 Create(); // 0x1009511D4
	public static SHA384 Create(string hashName); // 0x10095121C
}

// Namespace: System.Security.Cryptography
public class SHA384Managed : SHA384 // TypeDefIndex: 854
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods
	public void .ctor(); // 0x100951298
	private void Initialize(bool reuse); // 0x1009513C4
	public override void Initialize(); // 0x100951520
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x100951528
	protected override byte[] HashFinal(); // 0x1009518C4
	private void update(byte input); // 0x100951658
	private void processWord(byte[] input, int inOff); // 0x1009516E8
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x100951DE4
	private void adjustByteCounts(); // 0x100951A0C
	private void processLength(ulong lowW, ulong hiW); // 0x100951A2C
	private void processBlock(); // 0x100951AB8
}

// Namespace: System.Security.Cryptography
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 855
{
	// Methods
	protected void .ctor(); // 0x100951F30
	public static SHA512 Create(); // 0x100951F5C
	public static SHA512 Create(string hashName); // 0x100951FA4
}

// Namespace: System.Security.Cryptography
public class SHA512Managed : SHA512 // TypeDefIndex: 856
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods
	public void .ctor(); // 0x100952020
	private void Initialize(bool reuse); // 0x10095214C
	public override void Initialize(); // 0x1009522A8
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x1009522B0
	protected override byte[] HashFinal(); // 0x10095264C
	private void update(byte input); // 0x1009523E0
	private void processWord(byte[] input, int inOff); // 0x100952470
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x100952BB8
	private void adjustByteCounts(); // 0x1009527B4
	private void processLength(ulong lowW, ulong hiW); // 0x1009527D4
	private void processBlock(); // 0x100952860
	private ulong rotateRight(ulong x, int n); // 0x100952D68
	private ulong Ch(ulong x, ulong y, ulong z); // 0x100952D34
	private ulong Maj(ulong x, ulong y, ulong z); // 0x100952D54
	private ulong Sum0(ulong x); // 0x100952D44
	private ulong Sum1(ulong x); // 0x100952D24
	private ulong Sigma0(ulong x); // 0x100952D14
	private ulong Sigma1(ulong x); // 0x100952D04
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 857
{
	// Fields
	public static readonly uint[] K1; // 0x0
	public static readonly ulong[] K2; // 0x8

	// Methods
	private static void .cctor(); // 0x100952D74
}

// Namespace: System.Security.Cryptography
public class SignatureDescription // TypeDefIndex: 858
{
	// Fields
	private string _DeformatterAlgorithm; // 0x10
	private string _DigestAlgorithm; // 0x18
	private string _FormatterAlgorithm; // 0x20
	private string _KeyAlgorithm; // 0x28

	// Methods
	public void .ctor(); // 0x10094DB68
	public void set_DeformatterAlgorithm(string value); // 0x10094DB70
	public void set_DigestAlgorithm(string value); // 0x10094DB78
	public void set_FormatterAlgorithm(string value); // 0x10094DB80
	public void set_KeyAlgorithm(string value); // 0x10094DB88
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 859
{
	// Methods
	public void .ctor(); // 0x1009178CC
}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 860
{
	// Methods
	public void .ctor(); // 0x10094DADC
}

// Namespace: System.Security.Cryptography
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 861
{
	// Fields
	protected int BlockSizeValue; // 0x10
	protected byte[] IVValue; // 0x18
	protected int KeySizeValue; // 0x20
	protected byte[] KeyValue; // 0x28
	protected KeySizes[] LegalBlockSizesValue; // 0x30
	protected KeySizes[] LegalKeySizesValue; // 0x38
	protected int FeedbackSizeValue; // 0x40
	protected CipherMode ModeValue; // 0x44
	protected PaddingMode PaddingValue; // 0x48
	private bool m_disposed; // 0x4C

	// Methods
	protected void .ctor(); // 0x10091D91C
	private void System.IDisposable.Dispose(); // 0x100952E50
	protected override void Finalize(); // 0x100952EA8
	public void Clear(); // 0x100952F48
	protected virtual void Dispose(bool disposing); // 0x100952F98
	public virtual int get_BlockSize(); // 0x100952FE4
	public virtual void set_BlockSize(int value); // 0x100952FEC
	public virtual int get_FeedbackSize(); // 0x1009530A8
	public virtual byte[] get_IV(); // 0x1009530B0
	public virtual void set_IV(byte[] value); // 0x1009531C4
	public virtual byte[] get_Key(); // 0x100953338
	public virtual void set_Key(byte[] value); // 0x10095344C
	public virtual int get_KeySize(); // 0x10091DA30
	public virtual void set_KeySize(int value); // 0x10091DA60
	public virtual KeySizes[] get_LegalKeySizes(); // 0x1009535D0
	public virtual CipherMode get_Mode(); // 0x1009535D8
	public virtual void set_Mode(CipherMode value); // 0x1009535E0
	public virtual PaddingMode get_Padding(); // 0x1009536F8
	public virtual void set_Padding(PaddingMode value); // 0x100953700
	public virtual ICryptoTransform CreateDecryptor(); // 0x100953818
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0
	public virtual ICryptoTransform CreateEncryptor(); // 0x1009538C4
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0
	public abstract void GenerateIV(); // 0
	public abstract void GenerateKey(); // 0
	public static SymmetricAlgorithm Create(string algName); // 0x100953970
}

// Namespace: System.Security.Cryptography
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 862
{
	// Fields
	private bool m_disposed; // 0x10

	// Methods
	private void System.IDisposable.Dispose(); // 0x1009539EC
	protected override void Finalize(); // 0x100953A44
	public bool get_CanTransformMultipleBlocks(); // 0x100953AE4
	public virtual bool get_CanReuseTransform(); // 0x100953AEC
	public int get_InputBlockSize(); // 0x100953AF4
	public int get_OutputBlockSize(); // 0x100953AFC
	protected virtual void Dispose(bool disposing); // 0x100953B04
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x100953B18
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x100953DC8
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100953FC8
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x100954188
}

// Namespace: System.Security.Cryptography
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 863
{
	// Methods
	protected void .ctor(); // 0x1009544F8
	public override byte[] get_Key(); // 0x100954680
	public override void set_Key(byte[] value); // 0x1009549A8
	public static bool IsWeakKey(byte[] rgbKey); // 0x1009547D0
	public static TripleDES Create(); // 0x100954B14
	public static TripleDES Create(string str); // 0x100954B5C
}

// Namespace: System.Security.Cryptography
public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 864
{
	// Methods
	public void .ctor(); // 0x100954BD8
	public override void GenerateIV(); // 0x100954BDC
	public override void GenerateKey(); // 0x100954C10
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x100954CE4
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x100955090
}

// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 865
{
	// Fields
	private DESTransform E1; // 0x58
	private DESTransform D2; // 0x60
	private DESTransform E3; // 0x68
	private DESTransform D1; // 0x70
	private DESTransform E2; // 0x78
	private DESTransform D3; // 0x80

	// Methods
	public void .ctor(TripleDES algo, bool encryption, byte[] key, byte[] iv); // 0x100954D60
	protected override void ECB(byte[] input, byte[] output); // 0x10095510C
	internal static byte[] GetStrongKey(); // 0x100954C34
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate : ISerializable, IDeserializationCallback // TypeDefIndex: 866
{
	// Fields
	private X509Certificate x509; // 0x10
	private bool hideDates; // 0x18
	private byte[] cachedCertificateHash; // 0x20
	private string issuer_name; // 0x28
	private string subject_name; // 0x30

	// Methods
	internal void .ctor(byte[] data, bool dates); // 0x100955268
	public void .ctor(byte[] data); // 0x1009552E0
	public void .ctor(X509Certificate cert); // 0x1009552E8
	public void .ctor(); // 0x1009553C8
	public void .ctor(SerializationInfo info, StreamingContext context); // 0x1009553D0
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x100955544
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x100955548
	private string tostr(byte[] data); // 0x1009555E0
	public virtual bool Equals(X509Certificate other); // 0x1009556D8
	public virtual byte[] GetCertHash(); // 0x100955900
	public virtual string GetCertHashString(); // 0x1009559F4
	public virtual string GetEffectiveDateString(); // 0x100955A40
	public virtual string GetExpirationDateString(); // 0x100955B34
	public override int GetHashCode(); // 0x100955C28
	public virtual string GetIssuerName(); // 0x100955CFC
	public virtual string GetName(); // 0x100955DB8
	public virtual byte[] GetPublicKey(); // 0x100955E74
	public virtual byte[] GetRawCertData(); // 0x100955F30
	public virtual string GetRawCertDataString(); // 0x100955FEC
	public override string ToString(); // 0x1009560A8
	public virtual string ToString(bool fVerbose); // 0x1009560B0
	public string get_Issuer(); // 0x100956380
	public string get_Subject(); // 0x100956294
	public override bool Equals(object obj); // 0x10095646C
	public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x100956540
	public virtual void Reset(); // 0x1009568B4
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyStorageFlags : Enum // TypeDefIndex: 867
{
	// Fields
	public int value__; // 0x10
	public const X509KeyStorageFlags DefaultKeySet = 0; // 0x0
	public const X509KeyStorageFlags UserKeySet = 1; // 0x0
	public const X509KeyStorageFlags MachineKeySet = 2; // 0x0
	public const X509KeyStorageFlags Exportable = 4; // 0x0
	public const X509KeyStorageFlags UserProtected = 8; // 0x0
	public const X509KeyStorageFlags PersistKeySet = 16; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class EnvironmentPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 868
{
	// Fields
	private PermissionState _state; // 0x10
	private ArrayList readList; // 0x18
	private ArrayList writeList; // 0x20

	// Methods
	public void .ctor(PermissionState state); // 0x1009586DC
	public void .ctor(EnvironmentPermissionAccess flag, string pathList); // 0x100958784
	public void AddPathList(EnvironmentPermissionAccess flag, string pathList); // 0x100958C58
	public override IPermission Copy(); // 0x1009591A8
	public override void FromXml(SecurityElement esd); // 0x1009592F0
	public string GetPathList(EnvironmentPermissionAccess flag); // 0x100959268
	public override IPermission Intersect(IPermission target); // 0x100959864
	public override bool IsSubsetOf(IPermission target); // 0x100959C0C
	public bool IsUnrestricted(); // 0x100959BFC
	public void SetPathList(EnvironmentPermissionAccess flag, string pathList); // 0x10095882C
	public override SecurityElement ToXml(); // 0x10095A334
	public override IPermission Union(IPermission other); // 0x10095A428
	private bool IsEmpty(); // 0x10095A5D4
	private EnvironmentPermission Cast(IPermission target); // 0x100959B4C
	internal void ThrowInvalidFlag(EnvironmentPermissionAccess flag, bool context); // 0x1009590B4
	private string GetPathList(ArrayList list); // 0x100959418
}

// Namespace: System.Security.Permissions
public sealed class EnvironmentPermissionAccess : Enum // TypeDefIndex: 869
{
	// Fields
	public int value__; // 0x10
	public const EnvironmentPermissionAccess NoAccess = 0; // 0x0
	public const EnvironmentPermissionAccess Read = 1; // 0x0
	public const EnvironmentPermissionAccess Write = 2; // 0x0
	public const EnvironmentPermissionAccess AllAccess = 3; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class FileDialogPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 870
{
	// Fields
	private FileDialogPermissionAccess _access; // 0x10

	// Methods
	public void .ctor(PermissionState state); // 0x10095A670
	public void .ctor(FileDialogPermissionAccess access); // 0x10095A6BC
	public void set_Access(FileDialogPermissionAccess value); // 0x10095A6EC
	public override IPermission Copy(); // 0x10095A878
	public override void FromXml(SecurityElement esd); // 0x10095A8E8
	public override IPermission Intersect(IPermission target); // 0x10095AA2C
	public override bool IsSubsetOf(IPermission target); // 0x10095AB78
	public bool IsUnrestricted(); // 0x10095ABAC
	public override SecurityElement ToXml(); // 0x10095ABBC
	public override IPermission Union(IPermission target); // 0x10095ACA4
	private FileDialogPermission Cast(IPermission target); // 0x10095AAC8
}

// Namespace: System.Security.Permissions
public sealed class FileDialogPermissionAccess : Enum // TypeDefIndex: 871
{
	// Fields
	public int value__; // 0x10
	public const FileDialogPermissionAccess None = 0; // 0x0
	public const FileDialogPermissionAccess Open = 1; // 0x0
	public const FileDialogPermissionAccess Save = 2; // 0x0
	public const FileDialogPermissionAccess OpenSave = 3; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class FileIOPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 872
{
	// Fields
	private static char[] BadPathNameCharacters; // 0x0
	private static char[] BadFileNameCharacters; // 0x8
	private bool m_Unrestricted; // 0x10
	private FileIOPermissionAccess m_AllFilesAccess; // 0x14
	private FileIOPermissionAccess m_AllLocalFilesAccess; // 0x18
	private ArrayList readList; // 0x20
	private ArrayList writeList; // 0x28
	private ArrayList appendList; // 0x30
	private ArrayList pathList; // 0x38

	// Methods
	public void .ctor(PermissionState state); // 0x10095AD9C
	public void .ctor(FileIOPermissionAccess access, string path); // 0x10095AEAC
	private static void .cctor(); // 0x10095AFF8
	internal void CreateLists(); // 0x10095ADFC
	public FileIOPermissionAccess get_AllFiles(); // 0x10095B08C
	public void set_AllFiles(FileIOPermissionAccess value); // 0x10095B094
	public FileIOPermissionAccess get_AllLocalFiles(); // 0x10095B0A4
	public void set_AllLocalFiles(FileIOPermissionAccess value); // 0x10095B0AC
	public void AddPathList(FileIOPermissionAccess access, string path); // 0x10095AF50
	public void AddPathList(FileIOPermissionAccess access, string[] pathList); // 0x10095B538
	internal void AddPathInternal(FileIOPermissionAccess access, string path); // 0x10095B3B4
	public override IPermission Copy(); // 0x10095B6E0
	public override void FromXml(SecurityElement esd); // 0x10095B874
	public string[] GetPathList(FileIOPermissionAccess access); // 0x10095BB1C
	public override IPermission Intersect(IPermission target); // 0x10095BDD4
	public override bool IsSubsetOf(IPermission target); // 0x10095CAC0
	public bool IsUnrestricted(); // 0x10095BFF4
	public override SecurityElement ToXml(); // 0x10095D44C
	public override IPermission Union(IPermission other); // 0x10095D6C8
	public override bool Equals(object obj); // 0x10095DD48
	public override int GetHashCode(); // 0x10095DD50
	private bool IsEmpty(); // 0x10095C9C4
	private static FileIOPermission Cast(IPermission target); // 0x10095BF44
	internal static void ThrowInvalidFlag(FileIOPermissionAccess access, bool context); // 0x10095B0BC
	internal static void ThrowIfInvalidPath(string path); // 0x10095B1B0
	internal static void ThrowIfInvalidPath(string[] paths); // 0x10095B628
	internal static bool KeyIsSubsetOf(IList local, IList target); // 0x10095CC80
	internal static void UnionKeys(IList list, string[] paths); // 0x10095D93C
	internal static void IntersectKeys(IList local, IList target, IList result); // 0x10095BFFC
}

// Namespace: System.Security.Permissions
public sealed class FileIOPermissionAccess : Enum // TypeDefIndex: 873
{
	// Fields
	public int value__; // 0x10
	public const FileIOPermissionAccess NoAccess = 0; // 0x0
	public const FileIOPermissionAccess Read = 1; // 0x0
	public const FileIOPermissionAccess Write = 2; // 0x0
	public const FileIOPermissionAccess Append = 4; // 0x0
	public const FileIOPermissionAccess PathDiscovery = 8; // 0x0
	public const FileIOPermissionAccess AllAccess = 15; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class GacIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 874
{
	// Methods
	public void .ctor(); // 0x10095DD58
	public override IPermission Copy(); // 0x10095DD60
	public override IPermission Intersect(IPermission target); // 0x10095DDBC
	public override bool IsSubsetOf(IPermission target); // 0x10095DE8C
	public override IPermission Union(IPermission target); // 0x10095DEA8
	public override void FromXml(SecurityElement securityElement); // 0x10095DEBC
	public override SecurityElement ToXml(); // 0x10095DF1C
	private GacIdentityPermission Cast(IPermission target); // 0x10095DDDC
}

// Namespace: System.Security.Permissions
internal interface IBuiltInPermission // TypeDefIndex: 875
{
}

// Namespace: System.Security.Permissions
public sealed class IsolatedStorageContainment : Enum // TypeDefIndex: 876
{
	// Fields
	public int value__; // 0x10
	public const IsolatedStorageContainment None = 0; // 0x0
	public const IsolatedStorageContainment DomainIsolationByUser = 16; // 0x0
	public const IsolatedStorageContainment AssemblyIsolationByUser = 32; // 0x0
	public const IsolatedStorageContainment DomainIsolationByRoamingUser = 80; // 0x0
	public const IsolatedStorageContainment AssemblyIsolationByRoamingUser = 96; // 0x0
	public const IsolatedStorageContainment AdministerIsolatedStorageByUser = 112; // 0x0
	public const IsolatedStorageContainment UnrestrictedIsolatedStorage = 240; // 0x0
	public const IsolatedStorageContainment ApplicationIsolationByUser = 21; // 0x0
	public const IsolatedStorageContainment DomainIsolationByMachine = 48; // 0x0
	public const IsolatedStorageContainment AssemblyIsolationByMachine = 64; // 0x0
	public const IsolatedStorageContainment ApplicationIsolationByMachine = 69; // 0x0
	public const IsolatedStorageContainment ApplicationIsolationByRoamingUser = 101; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class IsolatedStorageFilePermission : IsolatedStoragePermission, IBuiltInPermission // TypeDefIndex: 877
{
	// Methods
	public void .ctor(PermissionState state); // 0x10095DF28
	public override IPermission Copy(); // 0x10095DF84
	public override IPermission Intersect(IPermission target); // 0x10095E014
	public override bool IsSubsetOf(IPermission target); // 0x10095E39C
	public override IPermission Union(IPermission target); // 0x10095E460
	public override SecurityElement ToXml(); // 0x10095E564
	private IsolatedStorageFilePermission Cast(IPermission target); // 0x10095E124
}

// Namespace: System.Security.Permissions
public abstract class IsolatedStoragePermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 878
{
	// Fields
	internal long m_userQuota; // 0x10
	internal long m_machineQuota; // 0x18
	internal long m_expirationDays; // 0x20
	internal bool m_permanentData; // 0x28
	internal IsolatedStorageContainment m_allowed; // 0x2C

	// Methods
	protected void .ctor(PermissionState state); // 0x10095DF2C
	public void set_UserQuota(long value); // 0x10095E6A0
	public void set_UsageAllowed(IsolatedStorageContainment value); // 0x10095E1F4
	public bool IsUnrestricted(); // 0x10095E450
	public override SecurityElement ToXml(); // 0x10095E568
	public override void FromXml(SecurityElement esd); // 0x10095E6A8
	internal bool IsEmpty(); // 0x10095E1D4
}

// Namespace: System.Security.Permissions
public interface IUnrestrictedPermission // TypeDefIndex: 879
{
}

// Namespace: System.Security.Permissions
public sealed class KeyContainerPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 880
{
	// Fields
	private KeyContainerPermissionAccessEntryCollection _accessEntries; // 0x10
	private KeyContainerPermissionFlags _flags; // 0x18

	// Methods
	public void .ctor(PermissionState state); // 0x10095E854
	public void .ctor(KeyContainerPermissionFlags flags); // 0x10095E8A0
	public void .ctor(KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList); // 0x10095E9D8
	public override IPermission Copy(); // 0x10095EAC8
	public override void FromXml(SecurityElement securityElement); // 0x10095EC88
	public override IPermission Intersect(IPermission target); // 0x10095EDC0
	public override bool IsSubsetOf(IPermission target); // 0x10095EDC8
	public bool IsUnrestricted(); // 0x10095EDD0
	public override SecurityElement ToXml(); // 0x10095EDE4
	public override IPermission Union(IPermission target); // 0x10095EE78
	private void SetFlags(KeyContainerPermissionFlags flags); // 0x10095E8D0
	private KeyContainerPermission Cast(IPermission target); // 0x10095F068
}

// Namespace: System.Security.Permissions
public sealed class KeyContainerPermissionAccessEntry // TypeDefIndex: 881
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x10
	private string _containerName; // 0x18
	private int _spec; // 0x20
	private string _store; // 0x28
	private string _providerName; // 0x30
	private int _type; // 0x38

	// Methods
	public override bool Equals(object o); // 0x10095F55C
	public override int GetHashCode(); // 0x10095F6A4
}

// Namespace: System.Security.Permissions
public sealed class KeyContainerPermissionAccessEntryCollection : IEnumerable, ICollection // TypeDefIndex: 882
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods
	internal void .ctor(); // 0x10095F118
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10095F714
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10095F784
	public int get_Count(); // 0x10095EBC4
	public bool get_IsSynchronized(); // 0x10095F84C
	public object get_SyncRoot(); // 0x10095F854
	public int Add(KeyContainerPermissionAccessEntry accessEntry); // 0x10095EA64
	public void CopyTo(KeyContainerPermissionAccessEntry[] array, int index); // 0x10095EC18
	public KeyContainerPermissionAccessEntryEnumerator GetEnumerator(); // 0x10095F184
	public int IndexOf(KeyContainerPermissionAccessEntry accessEntry); // 0x10095F444
}

// Namespace: System.Security.Permissions
public sealed class KeyContainerPermissionAccessEntryEnumerator : IEnumerator // TypeDefIndex: 883
{
	// Fields
	private IEnumerator e; // 0x10

	// Methods
	internal void .ctor(ArrayList list); // 0x10095F7E8
	private object System.Collections.IEnumerator.get_Current(); // 0x10095F858
	public KeyContainerPermissionAccessEntry get_Current(); // 0x10095F1E8
	public bool MoveNext(); // 0x10095F350
	public void Reset(); // 0x10095F948
}

// Namespace: System.Security.Permissions
public sealed class KeyContainerPermissionFlags : Enum // TypeDefIndex: 884
{
	// Fields
	public int value__; // 0x10
	public const KeyContainerPermissionFlags NoFlags = 0; // 0x0
	public const KeyContainerPermissionFlags Create = 1; // 0x0
	public const KeyContainerPermissionFlags Open = 2; // 0x0
	public const KeyContainerPermissionFlags Delete = 4; // 0x0
	public const KeyContainerPermissionFlags Import = 16; // 0x0
	public const KeyContainerPermissionFlags Export = 32; // 0x0
	public const KeyContainerPermissionFlags Sign = 256; // 0x0
	public const KeyContainerPermissionFlags Decrypt = 512; // 0x0
	public const KeyContainerPermissionFlags ViewAcl = 4096; // 0x0
	public const KeyContainerPermissionFlags ChangeAcl = 8192; // 0x0
	public const KeyContainerPermissionFlags AllFlags = 13111; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class PermissionState : Enum // TypeDefIndex: 885
{
	// Fields
	public int value__; // 0x10
	public const PermissionState Unrestricted = 1; // 0x0
	public const PermissionState None = 0; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class PublisherIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 886
{
	// Fields
	private X509Certificate x509; // 0x10

	// Methods
	public void .ctor(PermissionState state); // 0x10095FA3C
	public void .ctor(X509Certificate certificate); // 0x10095FA70
	public void set_Certificate(X509Certificate value); // 0x10095FAA0
	public override IPermission Copy(); // 0x10095FB24
	public override void FromXml(SecurityElement esd); // 0x10095FBB0
	public override IPermission Intersect(IPermission target); // 0x10095FCD0
	public override bool IsSubsetOf(IPermission target); // 0x10095FEC4
	public override SecurityElement ToXml(); // 0x10095FFD8
	public override IPermission Union(IPermission target); // 0x100960088
	private PublisherIdentityPermission Cast(IPermission target); // 0x10095FE14
}

// Namespace: System.Security.Permissions
public sealed class ReflectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 887
{
	// Fields
	private ReflectionPermissionFlag flags; // 0x10

	// Methods
	public void .ctor(PermissionState state); // 0x100960238
	public void .ctor(ReflectionPermissionFlag flag); // 0x100960284
	public ReflectionPermissionFlag get_Flags(); // 0x1009603B8
	public void set_Flags(ReflectionPermissionFlag value); // 0x1009602B4
	public override IPermission Copy(); // 0x1009603C0
	public override void FromXml(SecurityElement esd); // 0x100960430
	public override IPermission Intersect(IPermission target); // 0x1009605B4
	public override bool IsSubsetOf(IPermission target); // 0x1009607B4
	public bool IsUnrestricted(); // 0x1009607A4
	public override SecurityElement ToXml(); // 0x100960810
	public override IPermission Union(IPermission other); // 0x100960A68
	private ReflectionPermission Cast(IPermission target); // 0x1009606F4
}

// Namespace: System.Security.Permissions
public sealed class ReflectionPermissionFlag : Enum // TypeDefIndex: 888
{
	// Fields
	public int value__; // 0x10
	public const ReflectionPermissionFlag NoFlags = 0; // 0x0
	public const ReflectionPermissionFlag TypeInformation = 1; // 0x0
	public const ReflectionPermissionFlag MemberAccess = 2; // 0x0
	public const ReflectionPermissionFlag ReflectionEmit = 4; // 0x0
	public const ReflectionPermissionFlag AllFlags = 7; // 0x0
	public const ReflectionPermissionFlag RestrictedMemberAccess = 8; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class RegistryPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 889
{
	// Fields
	private PermissionState _state; // 0x10
	private ArrayList createList; // 0x18
	private ArrayList readList; // 0x20
	private ArrayList writeList; // 0x28

	// Methods
	public void .ctor(PermissionState state); // 0x100960BD8
	public void AddPathList(RegistryPermissionAccess access, string pathList); // 0x100960C98
	public string GetPathList(RegistryPermissionAccess access); // 0x100961320
	public void SetPathList(RegistryPermissionAccess access, string pathList); // 0x10096180C
	public override IPermission Copy(); // 0x100961D9C
	public override void FromXml(SecurityElement esd); // 0x100961E84
	public override IPermission Intersect(IPermission target); // 0x10096200C
	public override bool IsSubsetOf(IPermission target); // 0x100962C18
	public bool IsUnrestricted(); // 0x1009621B8
	public override SecurityElement ToXml(); // 0x10096345C
	public override IPermission Union(IPermission other); // 0x100963584
	private bool IsEmpty(); // 0x100962B4C
	private RegistryPermission Cast(IPermission target); // 0x100962108
	internal void ThrowInvalidFlag(RegistryPermissionAccess flag, bool context); // 0x10096122C
	private string GetPathList(ArrayList list); // 0x1009613C0
	internal bool KeyIsSubsetOf(IList local, IList target); // 0x100962CC0
	internal void AddWithUnionKey(IList list, string pathList); // 0x100960DD0
	internal void IntersectKeys(IList local, IList target, IList result); // 0x1009621C8
}

// Namespace: System.Security.Permissions
public sealed class RegistryPermissionAccess : Enum // TypeDefIndex: 890
{
	// Fields
	public int value__; // 0x10
	public const RegistryPermissionAccess NoAccess = 0; // 0x0
	public const RegistryPermissionAccess Read = 1; // 0x0
	public const RegistryPermissionAccess Write = 2; // 0x0
	public const RegistryPermissionAccess Create = 4; // 0x0
	public const RegistryPermissionAccess AllAccess = 7; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class SecurityAction : Enum // TypeDefIndex: 891
{
	// Fields
	public int value__; // 0x10
	public const SecurityAction Demand = 2; // 0x0
	public const SecurityAction Assert = 3; // 0x0
	public const SecurityAction Deny = 4; // 0x0
	public const SecurityAction PermitOnly = 5; // 0x0
	public const SecurityAction LinkDemand = 6; // 0x0
	public const SecurityAction InheritanceDemand = 7; // 0x0
	public const SecurityAction RequestMinimum = 8; // 0x0
	public const SecurityAction RequestOptional = 9; // 0x0
	public const SecurityAction RequestRefuse = 10; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 892
{
	// Fields
	private SecurityPermissionFlag flags; // 0x10

	// Methods
	public void .ctor(PermissionState state); // 0x100963758
	public void .ctor(SecurityPermissionFlag flag); // 0x1009637A4
	public void set_Flags(SecurityPermissionFlag value); // 0x1009637D4
	public bool IsUnrestricted(); // 0x1009638D8
	public override IPermission Copy(); // 0x1009638EC
	public override IPermission Intersect(IPermission target); // 0x10096395C
	public override IPermission Union(IPermission target); // 0x100963B40
	public override bool IsSubsetOf(IPermission target); // 0x100963C38
	public override void FromXml(SecurityElement esd); // 0x100963C98
	public override SecurityElement ToXml(); // 0x100963DDC
	private bool IsEmpty(); // 0x100963B30
	private SecurityPermission Cast(IPermission target); // 0x100963A80
}

// Namespace: System.Security.Permissions
public sealed class SecurityPermissionFlag : Enum // TypeDefIndex: 893
{
	// Fields
	public int value__; // 0x10
	public const SecurityPermissionFlag NoFlags = 0; // 0x0
	public const SecurityPermissionFlag Assertion = 1; // 0x0
	public const SecurityPermissionFlag UnmanagedCode = 2; // 0x0
	public const SecurityPermissionFlag SkipVerification = 4; // 0x0
	public const SecurityPermissionFlag Execution = 8; // 0x0
	public const SecurityPermissionFlag ControlThread = 16; // 0x0
	public const SecurityPermissionFlag ControlEvidence = 32; // 0x0
	public const SecurityPermissionFlag ControlPolicy = 64; // 0x0
	public const SecurityPermissionFlag SerializationFormatter = 128; // 0x0
	public const SecurityPermissionFlag ControlDomainPolicy = 256; // 0x0
	public const SecurityPermissionFlag ControlPrincipal = 512; // 0x0
	public const SecurityPermissionFlag ControlAppDomain = 1024; // 0x0
	public const SecurityPermissionFlag RemotingConfiguration = 2048; // 0x0
	public const SecurityPermissionFlag Infrastructure = 4096; // 0x0
	public const SecurityPermissionFlag BindingRedirects = 8192; // 0x0
	public const SecurityPermissionFlag AllFlags = 16383; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class SiteIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 894
{
	// Fields
	private string _site; // 0x10
	private static bool[] valid; // 0x0

	// Methods
	public void .ctor(PermissionState state); // 0x100963EDC
	public void .ctor(string site); // 0x100963F10
	private static void .cctor(); // 0x100963FCC
	public void set_Site(string value); // 0x100963F40
	public override IPermission Copy(); // 0x1009641E0
	public override void FromXml(SecurityElement esd); // 0x10096427C
	public override IPermission Intersect(IPermission target); // 0x10096432C
	public override bool IsSubsetOf(IPermission target); // 0x100964640
	public override SecurityElement ToXml(); // 0x100964758
	public override IPermission Union(IPermission target); // 0x1009647D8
	private bool IsEmpty(); // 0x10096426C
	private SiteIdentityPermission Cast(IPermission target); // 0x10096440C
	private bool IsValid(string s); // 0x10096405C
	private bool Match(string target); // 0x1009644BC
}

// Namespace: System.Security.Permissions
public sealed class StrongNameIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 895
{
	// Fields
	private static Version defaultVersion; // 0x0
	private PermissionState _state; // 0x10
	private ArrayList _list; // 0x18

	// Methods
	public void .ctor(PermissionState state); // 0x10096491C
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version); // 0x100964B50
	internal void .ctor(StrongNameIdentityPermission snip); // 0x100964CAC
	private static void .cctor(); // 0x10096505C
	public string get_Name(); // 0x1009650D0
	public StrongNamePublicKeyBlob get_PublicKey(); // 0x1009651BC
	public Version get_Version(); // 0x1009652A8
	public override IPermission Copy(); // 0x100965394
	public override void FromXml(SecurityElement e); // 0x100965558
	private SNIP FromSecurityElement(SecurityElement se); // 0x100965A40
	public override IPermission Intersect(IPermission target); // 0x100965CC8
	public override bool IsSubsetOf(IPermission target); // 0x100966138
	public override SecurityElement ToXml(); // 0x100966930
	private void ToSecurityElement(SecurityElement se, SNIP snip); // 0x100966D94
	public override IPermission Union(IPermission target); // 0x100967064
	private bool IsUnrestricted(); // 0x100966884
	private bool Contains(SNIP snip); // 0x1009674D0
	private bool IsEmpty(SNIP snip); // 0x100966E88
	private bool IsEmpty(); // 0x100965418
	private StrongNameIdentityPermission Cast(IPermission target); // 0x1009667D4
	private bool Match(string target); // 0x100965E90
}

// Namespace: 
private struct SNIP // TypeDefIndex: 896
{
	// Fields
	public StrongNamePublicKeyBlob PublicKey; // 0x10
	public string Name; // 0x18
	public Version AssemblyVersion; // 0x20

	// Methods
	internal void .ctor(StrongNamePublicKeyBlob pk, string name, Version version); // 0x1009679F0
	internal static SNIP CreateDefault(); // 0x100964A14
	internal bool IsNameSubsetOf(string target); // 0x1009679FC
	internal bool IsSubsetOf(SNIP target); // 0x100967A04
}

// Namespace: System.Security.Permissions
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 897
{
	// Fields
	internal byte[] pubkey; // 0x10

	// Methods
	public void .ctor(byte[] publicKey); // 0x100967A6C
	internal static StrongNamePublicKeyBlob FromString(string s); // 0x100965B2C
	private static byte CharToByte(char c); // 0x100967AFC
	public override bool Equals(object obj); // 0x100966030
	public override int GetHashCode(); // 0x100967B98
	public override string ToString(); // 0x100966F7C
}

// Namespace: System.Security.Permissions
public sealed class UIPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 898
{
	// Fields
	private UIPermissionWindow _window; // 0x10
	private UIPermissionClipboard _clipboard; // 0x14

	// Methods
	public void .ctor(PermissionState state); // 0x100967C3C
	public void .ctor(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag); // 0x100967C8C
	public void set_Clipboard(UIPermissionClipboard value); // 0x100967CD4
	public void set_Window(UIPermissionWindow value); // 0x100967E60
	public override IPermission Copy(); // 0x100967FEC
	public override void FromXml(SecurityElement esd); // 0x100968074
	public override IPermission Intersect(IPermission target); // 0x100968270
	public override bool IsSubsetOf(IPermission target); // 0x1009683E8
	public bool IsUnrestricted(); // 0x100968464
	public override SecurityElement ToXml(); // 0x100968488
	public override IPermission Union(IPermission target); // 0x100968608
	private bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c); // 0x1009683D8
	private UIPermission Cast(IPermission target); // 0x100968328
}

// Namespace: System.Security.Permissions
public sealed class UIPermissionClipboard : Enum // TypeDefIndex: 899
{
	// Fields
	public int value__; // 0x10
	public const UIPermissionClipboard NoClipboard = 0; // 0x0
	public const UIPermissionClipboard OwnClipboard = 1; // 0x0
	public const UIPermissionClipboard AllClipboard = 2; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class UIPermissionWindow : Enum // TypeDefIndex: 900
{
	// Fields
	public int value__; // 0x10
	public const UIPermissionWindow NoWindows = 0; // 0x0
	public const UIPermissionWindow SafeSubWindows = 1; // 0x0
	public const UIPermissionWindow SafeTopLevelWindows = 2; // 0x0
	public const UIPermissionWindow AllWindows = 3; // 0x0

}

// Namespace: System.Security.Permissions
public sealed class UrlIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 901
{
	// Fields
	private string url; // 0x10

	// Methods
	public void .ctor(PermissionState state); // 0x1009686D4
	public void .ctor(string site); // 0x100968770
	public void set_Url(string value); // 0x100968800
	public override IPermission Copy(); // 0x100968888
	public override void FromXml(SecurityElement esd); // 0x1009688FC
	public override IPermission Intersect(IPermission target); // 0x1009689DC
	public override bool IsSubsetOf(IPermission target); // 0x100968CE4
	public override SecurityElement ToXml(); // 0x100968E3C
	public override IPermission Union(IPermission target); // 0x100968ECC
	private bool IsEmpty(); // 0x100968B30
	private UrlIdentityPermission Cast(IPermission target); // 0x100968A80
	private bool Match(string target); // 0x100968B60
}

// Namespace: System.Security.Permissions
public sealed class ZoneIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 902
{
	// Fields
	private SecurityZone zone; // 0x10

	// Methods
	public void .ctor(SecurityZone zone); // 0x100969028
	public override IPermission Copy(); // 0x1009691E4
	public override bool IsSubsetOf(IPermission target); // 0x100969254
	public override IPermission Union(IPermission target); // 0x100969358
	public override IPermission Intersect(IPermission target); // 0x100969430
	public override void FromXml(SecurityElement esd); // 0x100969480
	public override SecurityElement ToXml(); // 0x1009695A8
	public void set_SecurityZone(SecurityZone value); // 0x100969058
	private ZoneIdentityPermission Cast(IPermission target); // 0x1009692A8
}

// Namespace: System.Security.Policy
public sealed class AllMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable, IConstantMembershipCondition, IMembershipCondition // TypeDefIndex: 903
{
	// Fields
	private readonly int version; // 0x10

	// Methods
	public void .ctor(); // 0x10096CB98
	public bool Check(Evidence evidence); // 0x10096CBA8
	public IMembershipCondition Copy(); // 0x10096CBB0
	public override bool Equals(object o); // 0x10096CC14
	public void FromXml(SecurityElement e); // 0x10096CC78
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x10096CC7C
	public override int GetHashCode(); // 0x10096CFD0
	public override string ToString(); // 0x10096D080
	public SecurityElement ToXml(); // 0x10096D0C8
	public SecurityElement ToXml(PolicyLevel level); // 0x10096D0CC
}

// Namespace: System.Security.Policy
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 904
{
	// Fields
	private ApplicationIdentity _appid; // 0x10
	private PolicyStatement _defaultPolicy; // 0x18
	private object _xtranfo; // 0x20
	private bool _trustrun; // 0x28
	private bool _persist; // 0x29
	private IList`1<StrongName> fullTrustAssemblies; // 0x30

	// Methods
	public void .ctor(); // 0x10096D340
	public PolicyStatement get_DefaultGrantSet(); // 0x10096D3B8
	public void FromXml(SecurityElement element); // 0x10096D474
	public SecurityElement ToXml(); // 0x10096DB94
	private PolicyStatement GetDefaultGrantSet(); // 0x10096D3E4
}

// Namespace: System.Security.Policy
public class CodeConnectAccess // TypeDefIndex: 905
{
	// Fields
	public static readonly string AnyScheme; // 0x0
	public static readonly int DefaultPort; // 0x8
	public static readonly int OriginPort; // 0xC
	public static readonly string OriginScheme; // 0x10
	private string _scheme; // 0x10
	private int _port; // 0x18

	// Methods
	private static void .cctor(); // 0x10096DF0C
	public override bool Equals(object o); // 0x10096DF8C
	public override int GetHashCode(); // 0x10096E068
}

// Namespace: System.Security.Policy
public abstract class CodeGroup // TypeDefIndex: 906
{
	// Fields
	private PolicyStatement m_policy; // 0x10
	private IMembershipCondition m_membershipCondition; // 0x18
	private string m_description; // 0x20
	private string m_name; // 0x28
	private ArrayList m_children; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map2E; // 0x0

	// Methods
	protected void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x10096E0A0
	internal void .ctor(SecurityElement e, PolicyLevel level); // 0x10096E274
	public abstract CodeGroup Copy(); // 0
	public abstract PolicyStatement Resolve(Evidence evidence); // 0
	public PolicyStatement get_PolicyStatement(); // 0x10096EBDC
	public void set_PolicyStatement(PolicyStatement value); // 0x10096EBE4
	public string get_Description(); // 0x10096EBEC
	public void set_Description(string value); // 0x10096EBF4
	public IMembershipCondition get_MembershipCondition(); // 0x10096EBFC
	public string get_Name(); // 0x10096EC04
	public void set_Name(string value); // 0x10096EC0C
	public IList get_Children(); // 0x10096EC14
	public void AddChild(CodeGroup group); // 0x10096EC1C
	public override bool Equals(object o); // 0x10096ED04
	public bool Equals(CodeGroup cg, bool compareChildren); // 0x10096EDA8
	public override int GetHashCode(); // 0x10096F1D4
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x10096E2FC
	protected virtual void ParseXml(SecurityElement e, PolicyLevel level); // 0x10096FA88
	public SecurityElement ToXml(); // 0x10096FA8C
	public SecurityElement ToXml(PolicyLevel level); // 0x10096FA94
	protected virtual void CreateXml(SecurityElement element, PolicyLevel level); // 0x100970088
	internal static CodeGroup CreateFromXml(SecurityElement se, PolicyLevel level); // 0x10096F714
}

// Namespace: System.Security.Policy
internal static class DefaultPolicies // TypeDefIndex: 907
{
	// Fields
	private static Version _fxVersion; // 0x0
	private static byte[] _ecmaKey; // 0x8
	private static StrongNamePublicKeyBlob _ecma; // 0x10
	private static byte[] _msFinalKey; // 0x18
	private static StrongNamePublicKeyBlob _msFinal; // 0x20
	private static NamedPermissionSet _fullTrust; // 0x28
	private static NamedPermissionSet _localIntranet; // 0x30
	private static NamedPermissionSet _internet; // 0x38
	private static NamedPermissionSet _skipVerification; // 0x40
	private static NamedPermissionSet _execution; // 0x48
	private static NamedPermissionSet _nothing; // 0x50
	private static NamedPermissionSet _everything; // 0x58

	// Methods
	private static void .cctor(); // 0x100970110
	public static PermissionSet get_FullTrust(); // 0x1009701F4
	public static PermissionSet get_LocalIntranet(); // 0x100970310
	public static PermissionSet get_Internet(); // 0x100970650
	public static PermissionSet get_SkipVerification(); // 0x1009708F0
	public static PermissionSet get_Execution(); // 0x100970A70
	public static PermissionSet get_Nothing(); // 0x100970BF0
	public static PermissionSet get_Everything(); // 0x100970D0C
	public static StrongNameMembershipCondition FullTrustMembership(string name, Key key); // 0x100971194
	private static NamedPermissionSet BuildFullTrust(); // 0x1009702A8
	private static NamedPermissionSet BuildLocalIntranet(); // 0x1009703C4
	private static NamedPermissionSet BuildInternet(); // 0x100970704
	private static NamedPermissionSet BuildSkipVerification(); // 0x1009709A4
	private static NamedPermissionSet BuildExecution(); // 0x100970B24
	private static NamedPermissionSet BuildNothing(); // 0x100970CA4
	private static NamedPermissionSet BuildEverything(); // 0x100970DC0
	private static SecurityElement PrintingPermission(string level); // 0x10097156C
}

// Namespace: 
public sealed class Key : Enum // TypeDefIndex: 908
{
	// Fields
	public int value__; // 0x10
	public const Key Ecma = 0; // 0x0
	public const Key MsFinal = 1; // 0x0

}

// Namespace: System.Security.Policy
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 909
{
	// Fields
	private bool _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x18
	private ArrayList assemblyEvidenceList; // 0x20
	private int _hashCode; // 0x28

	// Methods
	public void .ctor(); // 0x100971644
	public void .ctor(Evidence evidence); // 0x10097164C
	public int get_Count(); // 0x100971BEC
	public bool get_IsSynchronized(); // 0x100971C74
	public object get_SyncRoot(); // 0x100971C7C
	internal ArrayList get_HostEvidenceList(); // 0x100971C80
	internal ArrayList get_AssemblyEvidenceList(); // 0x100971D18
	public void AddAssembly(object id); // 0x100971DB0
	public void AddHost(object id); // 0x100971E1C
	public void CopyTo(Array array, int index); // 0x100971F40
	public override bool Equals(object obj); // 0x100972088
	public IEnumerator GetEnumerator(); // 0x100972420
	public override int GetHashCode(); // 0x100972534
	public IEnumerator GetHostEnumerator(); // 0x1009726CC
	public void Merge(Evidence evidence); // 0x10097168C
	private static bool IsAuthenticodePresent(Assembly a); // 0x100972728
	internal static Evidence GetDefaultHostEvidence(Assembly a); // 0x100972730
}

// Namespace: 
private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 910
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x18
	private IEnumerator assemblyEnum; // 0x20

	// Methods
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum); // 0x1009724F8
	public bool MoveNext(); // 0x100973038
	public void Reset(); // 0x1009731EC
	public object get_Current(); // 0x100973390
}

// Namespace: System.Security.Policy
public sealed class FileCodeGroup : CodeGroup // TypeDefIndex: 911
{
	// Fields
	private FileIOPermissionAccess m_access; // 0x38

	// Methods
	public void .ctor(IMembershipCondition membershipCondition, FileIOPermissionAccess access); // 0x100973480
	internal void .ctor(SecurityElement e, PolicyLevel level); // 0x10097008C
	public override CodeGroup Copy(); // 0x1009734AC
	public override PolicyStatement Resolve(Evidence evidence); // 0x100973860
	public override bool Equals(object o); // 0x100973E94
	public override int GetHashCode(); // 0x100973F38
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x100973FD4
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x1009740DC
}

// Namespace: System.Security.Policy
public sealed class FirstMatchCodeGroup : CodeGroup // TypeDefIndex: 912
{
	// Methods
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x10097419C
	internal void .ctor(SecurityElement e, PolicyLevel level); // 0x100970090
	public override CodeGroup Copy(); // 0x1009741A0
	public override PolicyStatement Resolve(Evidence evidence); // 0x1009745B4
	private FirstMatchCodeGroup CopyNoChildren(); // 0x10097452C
}

// Namespace: System.Security.Policy
public sealed class GacInstalled : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 913
{
	// Methods
	public void .ctor(); // 0x100973030
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x100974A10
	public override bool Equals(object o); // 0x100974A6C
	public override int GetHashCode(); // 0x100974AD0
	public override string ToString(); // 0x100974AD8
}

// Namespace: System.Security.Policy
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 914
{
	// Fields
	private Assembly assembly; // 0x10
	private byte[] data; // 0x18

	// Methods
	public void .ctor(Assembly assembly); // 0x100972BD4
	internal void .ctor(); // 0x100974BB0
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x100974BB8
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100974CFC
	public override string ToString(); // 0x100974F44
	private byte[] GetData(); // 0x100974D9C
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 915
{
}

// Namespace: System.Security.Policy
internal interface IConstantMembershipCondition // TypeDefIndex: 916
{
}

// Namespace: System.Security.Policy
public interface IIdentityPermissionFactory // TypeDefIndex: 917
{
	// Methods
	public abstract IPermission CreateIdentityPermission(Evidence evidence); // 0
}

// Namespace: System.Security.Policy
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 918
{
	// Methods
	public abstract bool Check(Evidence evidence); // 0
	public abstract IMembershipCondition Copy(); // 0
	public abstract bool Equals(object obj); // 0
}

// Namespace: System.Security.Policy
internal sealed class MembershipConditionHelper // TypeDefIndex: 919
{
	// Fields
	private static readonly string XmlTag; // 0x0

	// Methods
	private static void .cctor(); // 0x100975100
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x10096CD00
	internal static SecurityElement Element(Type type, int version); // 0x10096D174
}

// Namespace: System.Security.Policy
public sealed class NetCodeGroup : CodeGroup // TypeDefIndex: 920
{
	// Fields
	public static readonly string AbsentOriginScheme; // 0x0
	public static readonly string AnyOtherOriginScheme; // 0x8
	private Hashtable _rules; // 0x38
	private int _hashcode; // 0x40

	// Methods
	public void .ctor(IMembershipCondition membershipCondition); // 0x10097515C
	internal void .ctor(SecurityElement e, PolicyLevel level); // 0x100970094
	private static void .cctor(); // 0x1009751D4
	public override CodeGroup Copy(); // 0x100975268
	private bool Equals(CodeConnectAccess[] rules1, CodeConnectAccess[] rules2); // 0x100975618
	public override bool Equals(object o); // 0x100975724
	public override int GetHashCode(); // 0x100975C04
	public override PolicyStatement Resolve(Evidence evidence); // 0x10097602C
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x1009765BC
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x1009765C0
}

// Namespace: System.Security.Policy
public sealed class PermissionRequestEvidence : IBuiltInEvidence // TypeDefIndex: 921
{
	// Fields
	private PermissionSet requested; // 0x10
	private PermissionSet optional; // 0x18
	private PermissionSet denied; // 0x20

	// Methods
	public void .ctor(PermissionSet request, PermissionSet optional, PermissionSet denied); // 0x1009765C4
	public override string ToString(); // 0x100976698
}

// Namespace: System.Security.Policy
public class PolicyException : SystemException, _Exception // TypeDefIndex: 922
{
	// Methods
	public void .ctor(); // 0x1009768B4
	public void .ctor(string message); // 0x100976918
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100976920
}

// Namespace: System.Security.Policy
public sealed class PolicyLevel // TypeDefIndex: 923
{
	// Fields
	private string label; // 0x10
	private CodeGroup root_code_group; // 0x18
	private ArrayList full_trust_assemblies; // 0x20
	private ArrayList named_permission_sets; // 0x28
	private string _location; // 0x30
	private PolicyLevelType _type; // 0x38
	private Hashtable fullNames; // 0x40
	private SecurityElement xml; // 0x48

	// Methods
	internal void .ctor(string label, PolicyLevelType type); // 0x100976928
	internal void LoadFromFile(string filename); // 0x1009769C4
	private SecurityElement FromString(string xml); // 0x100976DDC
	public void FromXml(SecurityElement e); // 0x100977278
	public NamedPermissionSet GetNamedPermissionSet(string name); // 0x10096F2A0
	public PolicyStatement Resolve(Evidence evidence); // 0x100978EF0
	public SecurityElement ToXml(); // 0x100978FB8
	internal void Save(); // 0x100978B70
	internal void CreateDefaultLevel(PolicyLevelType type); // 0x100978790
	internal void CreateDefaultFullTrustAssemblies(); // 0x1009781E4
	internal void CreateDefaultNamedPermissionSets(); // 0x100978488
	internal string ResolveClassName(string className); // 0x10096A154
	internal bool IsFullTrustAssembly(Assembly a); // 0x10097A018
}

// Namespace: System.Security.Policy
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 924
{
	// Fields
	private PermissionSet perms; // 0x10
	private PolicyStatementAttribute attrs; // 0x18

	// Methods
	public void .ctor(PermissionSet permSet); // 0x10096DF04
	public void .ctor(PermissionSet permSet, PolicyStatementAttribute attributes); // 0x10097A550
	public PermissionSet get_PermissionSet(); // 0x10096FFF0
	public void set_PermissionSet(PermissionSet value); // 0x100973E8C
	public PolicyStatementAttribute get_Attributes(); // 0x10097A5CC
	public PolicyStatement Copy(); // 0x10096E200
	public void FromXml(SecurityElement et); // 0x10097A5D4
	public void FromXml(SecurityElement et, PolicyLevel level); // 0x10096D974
	public SecurityElement ToXml(); // 0x10096DF00
	public SecurityElement ToXml(PolicyLevel level); // 0x10097A5D8
	public override bool Equals(object obj); // 0x10097A734
	public override int GetHashCode(); // 0x10096F240
	internal static PolicyStatement Empty(); // 0x100973DFC
}

// Namespace: System.Security.Policy
public sealed class PolicyStatementAttribute : Enum // TypeDefIndex: 925
{
	// Fields
	public int value__; // 0x10
	public const PolicyStatementAttribute Nothing = 0; // 0x0
	public const PolicyStatementAttribute Exclusive = 1; // 0x0
	public const PolicyStatementAttribute LevelFinal = 2; // 0x0
	public const PolicyStatementAttribute All = 3; // 0x0

}

// Namespace: System.Security.Policy
public sealed class Publisher : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 926
{
	// Fields
	private X509Certificate m_cert; // 0x10

	// Methods
	public void .ctor(X509Certificate cert); // 0x100972F48
	public X509Certificate get_Certificate(); // 0x10097A7FC
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x10097A8AC
	public override bool Equals(object o); // 0x10097A91C
	public override int GetHashCode(); // 0x10097AA20
	public override string ToString(); // 0x10097AA74
}

// Namespace: System.Security.Policy
public sealed class Site : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 927
{
	// Fields
	internal string origin_site; // 0x10

	// Methods
	public void .ctor(string name); // 0x10097AB98
	public static Site CreateFromUrl(string url); // 0x100972C64
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x10097B014
	public override bool Equals(object o); // 0x10097B084
	public override int GetHashCode(); // 0x10097B178
	public override string ToString(); // 0x10097B194
	public string get_Name(); // 0x10097B170
	internal static bool IsValid(string name); // 0x10097AC78
	internal static string UrlToSite(string url); // 0x10097AF0C
}

// Namespace: System.Security.Policy
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 928
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x10
	private string name; // 0x18
	private Version version; // 0x20

	// Methods
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version); // 0x100972DE4
	public string get_Name(); // 0x10097B270
	public StrongNamePublicKeyBlob get_PublicKey(); // 0x10097B278
	public Version get_Version(); // 0x10097B280
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x10097B288
	public override bool Equals(object o); // 0x10097B300
	public override int GetHashCode(); // 0x10097B3E4
	public override string ToString(); // 0x10097B3FC
}

// Namespace: System.Security.Policy
public sealed class StrongNameMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable, IConstantMembershipCondition, IMembershipCondition // TypeDefIndex: 929
{
	// Fields
	private readonly int version; // 0x10
	private StrongNamePublicKeyBlob blob; // 0x18
	private string name; // 0x20
	private Version assemblyVersion; // 0x28

	// Methods
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version); // 0x100971418
	internal void .ctor(SecurityElement e); // 0x100978EB8
	internal void .ctor(); // 0x10097B574
	public string get_Name(); // 0x10097B584
	public Version get_Version(); // 0x10097B58C
	public StrongNamePublicKeyBlob get_PublicKey(); // 0x10097B594
	public bool Check(Evidence evidence); // 0x10097B59C
	public IMembershipCondition Copy(); // 0x10097B7D0
	public override bool Equals(object o); // 0x10097A434
	public override int GetHashCode(); // 0x10097B848
	public void FromXml(SecurityElement e); // 0x10097B570
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x10097B860
	public override string ToString(); // 0x10097B97C
	public SecurityElement ToXml(); // 0x10097BA58
	public SecurityElement ToXml(PolicyLevel level); // 0x100979E7C
}

// Namespace: System.Security.Policy
public sealed class UnionCodeGroup : CodeGroup // TypeDefIndex: 930
{
	// Methods
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x10097BA5C
	internal void .ctor(SecurityElement e, PolicyLevel level); // 0x10097BA64
	public override CodeGroup Copy(); // 0x10097BA6C
	internal CodeGroup Copy(bool childs); // 0x10097BA74
	public override PolicyStatement Resolve(Evidence evidence); // 0x10097BE80
}

// Namespace: System.Security.Policy
public sealed class Url : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 931
{
	// Fields
	private string origin_url; // 0x10

	// Methods
	public void .ctor(string name); // 0x10097C434
	internal void .ctor(string name, bool validated); // 0x10097C43C
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x10097C6A0
	public override bool Equals(object o); // 0x10097C708
	public override int GetHashCode(); // 0x10097CC74
	public override string ToString(); // 0x10097CDE4
	public string get_Value(); // 0x10097C8D0
	private string Prepare(string url); // 0x10097C48C
}

// Namespace: System.Security.Policy
public sealed class Zone : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 932
{
	// Fields
	private SecurityZone zone; // 0x10

	// Methods
	public void .ctor(SecurityZone zone); // 0x10097D748
	public SecurityZone get_SecurityZone(); // 0x10097DA64
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x10097DA6C
	public static Zone CreateFromUrl(string url); // 0x10097DAD4
	public override bool Equals(object o); // 0x10097DE48
	public override int GetHashCode(); // 0x10097DEC8
	public override string ToString(); // 0x10097DED0
}

// Namespace: System.Security.Policy
public sealed class ZoneMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable, IConstantMembershipCondition, IMembershipCondition // TypeDefIndex: 933
{
	// Fields
	private readonly int version; // 0x10
	private SecurityZone zone; // 0x14

	// Methods
	internal void .ctor(); // 0x10097DFF8
	public void .ctor(SecurityZone zone); // 0x10097E008
	public SecurityZone get_SecurityZone(); // 0x10097E178
	public void set_SecurityZone(SecurityZone value); // 0x10097E040
	public bool Check(Evidence evidence); // 0x10097E180
	public IMembershipCondition Copy(); // 0x10097E338
	public override bool Equals(object o); // 0x10097E3B0
	public void FromXml(SecurityElement e); // 0x10097E430
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x10097E434
	public override int GetHashCode(); // 0x10097E600
	public override string ToString(); // 0x10097E69C
	public SecurityElement ToXml(); // 0x10097E804
	public SecurityElement ToXml(PolicyLevel level); // 0x10097E808
}

// Namespace: System.Security.Principal
public interface IIdentity // TypeDefIndex: 934
{
}

// Namespace: System.Security.Principal
public interface IPrincipal // TypeDefIndex: 935
{
}

// Namespace: System.Security.Principal
public sealed class PrincipalPolicy : Enum // TypeDefIndex: 936
{
	// Fields
	public int value__; // 0x10
	public const PrincipalPolicy UnauthenticatedPrincipal = 0; // 0x0
	public const PrincipalPolicy NoPrincipal = 1; // 0x0
	public const PrincipalPolicy WindowsPrincipal = 2; // 0x0

}

// Namespace: System.Security.Principal
public sealed class WindowsAccountType : Enum // TypeDefIndex: 937
{
	// Fields
	public int value__; // 0x10
	public const WindowsAccountType Normal = 0; // 0x0
	public const WindowsAccountType Guest = 1; // 0x0
	public const WindowsAccountType System = 2; // 0x0
	public const WindowsAccountType Anonymous = 3; // 0x0

}

// Namespace: System.Security.Principal
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 938
{
	// Fields
	private IntPtr _token; // 0x10
	private string _type; // 0x18
	private WindowsAccountType _account; // 0x20
	private bool _authenticated; // 0x24
	private string _name; // 0x28
	private SerializationInfo _info; // 0x30
	private static IntPtr invalidWindows; // 0x0

	// Methods
	public void .ctor(SerializationInfo info, StreamingContext context); // 0x10097E934
	private static void .cctor(); // 0x10097E960
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x10097E9C4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10097ECE4
	public void Dispose(); // 0x10097EE04
	internal static IntPtr GetCurrentToken(); // 0x10097EE5C
	private static string GetTokenName(IntPtr token); // 0x10097EC60
}

// Namespace: System.Text
public class ASCIIEncoding : Encoding // TypeDefIndex: 939
{
	// Methods
	public void .ctor(); // 0x1009955AC
	public override int GetByteCount(char[] chars, int index, int count); // 0x10099579C
	public override int GetByteCount(string chars); // 0x1009958F8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x100995970
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x10099599C
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x100995F68
	private int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x100995F94
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x10099652C
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x100996680
	private int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, DecoderFallbackBuffer buffer); // 0x1009966A4
	public override int GetMaxByteCount(int charCount); // 0x100996A98
	public override int GetMaxCharCount(int byteCount); // 0x100996B40
	public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x100996BE8
	public override int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x100996DEC
	public override int GetByteCount(PTR chars, int count); // 0x100996F78
	public override Decoder GetDecoder(); // 0x100996F80
}

// Namespace: System.Text
public abstract class Decoder // TypeDefIndex: 940
{
	// Fields
	private DecoderFallback fallback; // 0x10
	private DecoderFallbackBuffer fallback_buffer; // 0x18

	// Methods
	protected void .ctor(); // 0x100996FE4
	public void set_Fallback(DecoderFallback value); // 0x100997098
	public DecoderFallbackBuffer get_FallbackBuffer(); // 0x100997110
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0
}

// Namespace: System.Text
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 941
{
	// Methods
	public void .ctor(); // 0x100997170
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x1009971E0
	public override bool Equals(object value); // 0x100997244
	public override int GetHashCode(); // 0x1009972A8
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 942
{
	// Methods
	public void .ctor(); // 0x10099723C
	public override int get_Remaining(); // 0x1009972B8
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x1009972C0
	public override char GetNextChar(); // 0x10099736C
}

// Namespace: System.Text
public abstract class DecoderFallback // TypeDefIndex: 943
{
	// Fields
	private static DecoderFallback exception_fallback; // 0x0
	private static DecoderFallback replacement_fallback; // 0x8
	private static DecoderFallback standard_safe_fallback; // 0x10

	// Methods
	protected void .ctor(); // 0x1009971D8
	private static void .cctor(); // 0x100997374
	public static DecoderFallback get_ExceptionFallback(); // 0x1009974D4
	public static DecoderFallback get_ReplacementFallback(); // 0x10099753C
	internal static DecoderFallback get_StandardSafeFallback(); // 0x1009975A4
	public abstract DecoderFallbackBuffer CreateFallbackBuffer(); // 0
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 944
{
	// Methods
	protected void .ctor(); // 0x1009972B0
	public abstract int get_Remaining(); // 0
	public abstract bool Fallback(byte[] bytesUnknown, int index); // 0
	public abstract char GetNextChar(); // 0
	public virtual void Reset(); // 0x10099760C
}

// Namespace: System.Text
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 945
{
	// Fields
	private byte[] bytes_unknown; // 0x68
	private int index; // 0x70

	// Methods
	public void .ctor(); // 0x100997610
	public void .ctor(string message); // 0x100997624
	public void .ctor(string message, byte[] bytesUnknown, int index); // 0x100997328
}

// Namespace: System.Text
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 946
{
	// Fields
	private string replacement; // 0x10

	// Methods
	public void .ctor(); // 0x100997048
	public void .ctor(string replacement); // 0x100997430
	public string get_DefaultString(); // 0x100997634
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x10099763C
	public override bool Equals(object value); // 0x100997734
	public override int GetHashCode(); // 0x1009977E0
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 947
{
	// Fields
	private bool fallback_assigned; // 0x10
	private int current; // 0x14
	private string replacement; // 0x18

	// Methods
	public void .ctor(DecoderReplacementFallback fallback); // 0x10099769C
	public override int get_Remaining(); // 0x1009977F8
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x10099782C
	public override char GetNextChar(); // 0x100997968
	public override void Reset(); // 0x1009979AC
}

// Namespace: System.Text
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 948
{
	// Methods
	public void .ctor(); // 0x1009979B8
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x100997A28
	public override bool Equals(object value); // 0x100997A8C
	public override int GetHashCode(); // 0x100997AF0
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 949
{
	// Methods
	public void .ctor(); // 0x100997A84
	public override int get_Remaining(); // 0x100997B00
	public override bool Fallback(char charUnknown, int index); // 0x100997B08
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x100997BB4
	public override char GetNextChar(); // 0x100997C70
}

// Namespace: System.Text
public abstract class EncoderFallback // TypeDefIndex: 950
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x0
	private static EncoderFallback replacement_fallback; // 0x8
	private static EncoderFallback standard_safe_fallback; // 0x10

	// Methods
	protected void .ctor(); // 0x100997A20
	private static void .cctor(); // 0x100997C78
	public static EncoderFallback get_ExceptionFallback(); // 0x100997E28
	public static EncoderFallback get_ReplacementFallback(); // 0x100997E90
	internal static EncoderFallback get_StandardSafeFallback(); // 0x100997EF8
	public abstract EncoderFallbackBuffer CreateFallbackBuffer(); // 0
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 951
{
	// Methods
	protected void .ctor(); // 0x100997AF8
	public abstract int get_Remaining(); // 0
	public abstract bool Fallback(char charUnknown, int index); // 0
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0
	public abstract char GetNextChar(); // 0
}

// Namespace: System.Text
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 952
{
	// Fields
	private char char_unknown; // 0x68
	private char char_unknown_high; // 0x6A
	private char char_unknown_low; // 0x6C
	private int index; // 0x70

	// Methods
	public void .ctor(); // 0x100997F60
	public void .ctor(string message); // 0x100997F74
	internal void .ctor(char charUnknown, int index); // 0x100997B6C
	internal void .ctor(char charUnknownHigh, char charUnknownLow, int index); // 0x100997C20
}

// Namespace: System.Text
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 953
{
	// Fields
	private string replacement; // 0x10

	// Methods
	public void .ctor(); // 0x100997D34
	public void .ctor(string replacement); // 0x100997D84
	public string get_DefaultString(); // 0x100997F84
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x100997F8C
	public override bool Equals(object value); // 0x100998084
	public override int GetHashCode(); // 0x100998130
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 954
{
	// Fields
	private string replacement; // 0x10
	private int current; // 0x18
	private bool fallback_assigned; // 0x1C

	// Methods
	public void .ctor(EncoderReplacementFallback fallback); // 0x100997FEC
	public override int get_Remaining(); // 0x100998148
	public override bool Fallback(char charUnknown, int index); // 0x10099816C
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x10099826C
	private bool Fallback(int index); // 0x100998174
	public override char GetNextChar(); // 0x100998274
}

// Namespace: System.Text
public abstract class Encoding : ICloneable // TypeDefIndex: 955
{
	// Fields
	internal int codePage; // 0x10
	internal int windows_code_page; // 0x14
	private bool is_readonly; // 0x18
	private DecoderFallback decoder_fallback; // 0x20
	private EncoderFallback encoder_fallback; // 0x28
	private static Assembly i18nAssembly; // 0x0
	private static bool i18nDisabled; // 0x8
	private static EncodingInfo[] encoding_infos; // 0x10
	private static readonly object[] encodings; // 0x18
	internal string body_name; // 0x30
	internal string encoding_name; // 0x38
	internal string header_name; // 0x40
	internal bool is_mail_news_display; // 0x48
	internal bool is_mail_news_save; // 0x49
	internal bool is_browser_save; // 0x4A
	internal bool is_browser_display; // 0x4B
	internal string web_name; // 0x50
	private static Encoding asciiEncoding; // 0x20
	private static Encoding bigEndianEncoding; // 0x28
	private static Encoding defaultEncoding; // 0x30
	private static Encoding utf7Encoding; // 0x38
	private static Encoding utf8EncodingWithMarkers; // 0x40
	private static Encoding utf8EncodingWithoutMarkers; // 0x48
	private static Encoding unicodeEncoding; // 0x50
	private static Encoding isoLatin1Encoding; // 0x58
	private static Encoding utf8EncodingUnsafe; // 0x60
	private static Encoding utf32Encoding; // 0x68
	private static Encoding bigEndianUTF32Encoding; // 0x70
	private static readonly object lockobj; // 0x78

	// Methods
	protected void .ctor(); // 0x1009982B0
	protected void .ctor(int codePage); // 0x100995648
	private static void .cctor(); // 0x1009982C0
	internal static string _(string arg); // 0x1009958F0
	public bool get_IsReadOnly(); // 0x100998FD0
	public DecoderFallback get_DecoderFallback(); // 0x100996A90
	public void set_DecoderFallback(DecoderFallback value); // 0x100998FD8
	public EncoderFallback get_EncoderFallback(); // 0x100995F60
	internal void SetFallbackInternal(EncoderFallback e, DecoderFallback d); // 0x100999088
	public override bool Equals(object value); // 0x10099909C
	public abstract int GetByteCount(char[] chars, int index, int count); // 0
	public virtual int GetByteCount(string s); // 0x1009991D0
	public virtual int GetByteCount(char[] chars); // 0x1009992BC
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x10099937C
	public virtual byte[] GetBytes(string s); // 0x1009995EC
	public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x100999774
	public virtual byte[] GetBytes(char[] chars); // 0x10099986C
	public abstract int GetCharCount(byte[] bytes, int index, int count); // 0
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0
	public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x100999964
	public virtual Decoder GetDecoder(); // 0x100996F84
	private static object InvokeI18N(string name, object[] args); // 0x100999AA4
	public static Encoding GetEncoding(int codepage); // 0x10099A0AC
	public virtual object Clone(); // 0x10099AFE8
	public static Encoding GetEncoding(string name); // 0x10099B050
	public override int GetHashCode(); // 0x10099B4A4
	public abstract int GetMaxByteCount(int charCount); // 0
	public abstract int GetMaxCharCount(int byteCount); // 0
	public virtual byte[] GetPreamble(); // 0x10099B54C
	public virtual string GetString(byte[] bytes, int index, int count); // 0x10099B5A4
	public virtual string GetString(byte[] bytes); // 0x10099B610
	public virtual string get_HeaderName(); // 0x10099B6D0
	public virtual string get_WebName(); // 0x10099B6D8
	public static Encoding get_ASCII(); // 0x10099542C
	public static Encoding get_BigEndianUnicode(); // 0x10099AC3C
	internal static string InternalCodePage(int code_page); // 0x10099B6E8
	public static Encoding get_Default(); // 0x10098DE50
	private static Encoding get_ISOLatin1(); // 0x10099ADC8
	public static Encoding get_UTF7(); // 0x10099A618
	public static Encoding get_UTF8(); // 0x10099A79C
	internal static Encoding get_UTF8Unmarked(); // 0x10099B6F0
	internal static Encoding get_UTF8UnmarkedUnsafe(); // 0x10099BA0C
	public static Encoding get_Unicode(); // 0x1009842A0
	public static Encoding get_UTF32(); // 0x10099A924
	internal static Encoding get_BigEndianUTF32(); // 0x10099AAB0
	public virtual int GetByteCount(PTR chars, int count); // 0x10099BC54
	public virtual int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x10099BDBC
}

// Namespace: 
private sealed class ForwardingDecoder : Decoder // TypeDefIndex: 956
{
	// Fields
	private Encoding encoding; // 0x20

	// Methods
	public void .ctor(Encoding enc); // 0x100999A5C
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x10099C018
}

// Namespace: System.Text
public sealed class EncodingInfo // TypeDefIndex: 957
{
	// Fields
	private readonly int codepage; // 0x10
	private Encoding encoding; // 0x18

	// Methods
	public override bool Equals(object value); // 0x10099C0AC
	public override int GetHashCode(); // 0x10099C12C
}

// Namespace: System.Text
internal class Latin1Encoding : Encoding // TypeDefIndex: 958
{
	// Methods
	public void .ctor(); // 0x10099B878
	public override int GetByteCount(char[] chars, int index, int count); // 0x10099C134
	public override int GetByteCount(string s); // 0x10099C288
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x10099C300
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x10099C32C
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x10099C92C
	private int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x10099C958
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x10099CF28
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x10099D07C
	public override int GetMaxByteCount(int charCount); // 0x10099D33C
	public override int GetMaxCharCount(int byteCount); // 0x10099D3E4
	public override string GetString(byte[] bytes, int index, int count); // 0x10099D48C
	public override string GetString(byte[] bytes); // 0x10099D680
	public override string get_HeaderName(); // 0x10099D740
	public override string get_WebName(); // 0x10099D788
}

// Namespace: System.Text
public sealed class StringBuilder : ISerializable // TypeDefIndex: 959
{
	// Fields
	private const int constDefaultCapacity = 16; // 0x0
	private int _length; // 0x10
	private string _str; // 0x18
	private string _cached_str; // 0x20
	private int _maxCapacity; // 0x28

	// Methods
	public void .ctor(string value, int startIndex, int length, int capacity); // 0x10099D7D0
	private void .ctor(string value, int startIndex, int length, int capacity, int maxCapacity); // 0x10099D7D8
	public void .ctor(); // 0x10098080C
	public void .ctor(int capacity); // 0x10098B020
	public void .ctor(string value); // 0x100980A58
	public void .ctor(string value, int capacity); // 0x10099DB30
	private void .ctor(SerializationInfo info, StreamingContext context); // 0x10099DBDC
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10099DDB4
	public int get_Capacity(); // 0x10099DE84
	public void set_Capacity(int value); // 0x10099DCDC
	public int get_Length(); // 0x100992878
	public void set_Length(int value); // 0x100992880
	public char get_Chars(int index); // 0x10099293C
	public void set_Chars(int index, char value); // 0x10099E030
	public override string ToString(); // 0x10098099C
	public string ToString(int startIndex, int length); // 0x10099E0D8
	public StringBuilder Remove(int startIndex, int length); // 0x10099E198
	public StringBuilder Replace(char oldChar, char newChar); // 0x10099E298
	public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count); // 0x10099E2A4
	public StringBuilder Replace(string oldValue, string newValue); // 0x100980AFC
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x10099E3A8
	public StringBuilder Append(char[] value); // 0x10099E5FC
	public StringBuilder Append(string value); // 0x100980814
	public StringBuilder Append(int value); // 0x10099E6D4
	public StringBuilder Append(long value); // 0x10099E714
	public StringBuilder Append(object value); // 0x10099E754
	public StringBuilder Append(char value); // 0x100980924
	public StringBuilder Append(char value, int repeatCount); // 0x10098C78C
	public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x10099E7C0
	public StringBuilder Append(string value, int startIndex, int count); // 0x10098C270
	public StringBuilder AppendLine(); // 0x10099E8FC
	public StringBuilder AppendLine(string value); // 0x10099E92C
	public StringBuilder AppendFormat(string format, object[] args); // 0x100982390
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object[] args); // 0x10099E968
	public StringBuilder AppendFormat(string format, object arg0); // 0x1009823A8
	public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x10098228C
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x10099E9FC
	public StringBuilder Insert(int index, string value); // 0x10099EB3C
	public StringBuilder Insert(int index, char value); // 0x10099EC50
	public StringBuilder Insert(int index, string value, int count); // 0x10099ED5C
	private void InternalEnsureCapacity(int size); // 0x10099DEBC
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x10099EE40
}

// Namespace: System.Text
public class UnicodeEncoding : Encoding // TypeDefIndex: 960
{
	// Fields
	private bool bigEndian; // 0x58
	private bool byteOrderMark; // 0x59

	// Methods
	public void .ctor(); // 0x10099EF8C
	public void .ctor(bool bigEndian, bool byteOrderMark); // 0x10099B6E0
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x10099EFC0
	public override int GetByteCount(char[] chars, int index, int count); // 0x10099F128
	public override int GetByteCount(string s); // 0x10099F27C
	public override int GetByteCount(PTR chars, int count); // 0x10099F2F8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x10099F3B0
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x10099F714
	public override int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x10099F990
	private int GetBytesInternal(PTR chars, int charCount, PTR bytes, int byteCount); // 0x10099F63C
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x10099FD6C
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x10099FEC8
	public override string GetString(byte[] bytes, int index, int count); // 0x1009A0234
	private int GetCharsInternal(PTR bytes, int byteCount, PTR chars, int charCount); // 0x1009A0154
	public override int GetMaxByteCount(int charCount); // 0x1009A042C
	public override int GetMaxCharCount(int byteCount); // 0x1009A04D4
	public override Decoder GetDecoder(); // 0x1009A057C
	public override byte[] GetPreamble(); // 0x1009A0618
	public override bool Equals(object value); // 0x1009A0718
	public override int GetHashCode(); // 0x1009A07F8
	private static void CopyChars(PTR src, PTR dest, int count, bool bigEndian); // 0x10099FABC
}

// Namespace: 
private sealed class UnicodeDecoder : Decoder // TypeDefIndex: 961
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x24

	// Methods
	public void .ctor(bool bigEndian); // 0x1009A05E8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A07FC
}

// Namespace: System.Text
public class UTF7Encoding : Encoding // TypeDefIndex: 962
{
	// Fields
	private bool allowOptionals; // 0x58
	private static readonly byte[] encodingRules; // 0x0
	private static readonly sbyte[] base64Values; // 0x8

	// Methods
	public void .ctor(); // 0x10099B8E0
	public void .ctor(bool allowOptionals); // 0x1009A257C
	private static void .cctor(); // 0x1009A2630
	public override int GetHashCode(); // 0x1009A270C
	public override bool Equals(object value); // 0x1009A2738
	private static int InternalGetByteCount(char[] chars, int index, int count, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x1009A287C
	public override int GetByteCount(char[] chars, int index, int count); // 0x1009A2B9C
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x1009A2C48
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A33AC
	private static int InternalGetCharCount(byte[] bytes, int index, int count, int leftOver); // 0x1009A3480
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x1009A3754
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int leftOver); // 0x1009A37D4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A3F20
	public override int GetMaxByteCount(int charCount); // 0x1009A4030
	public override int GetMaxCharCount(int byteCount); // 0x1009A4110
	public override Decoder GetDecoder(); // 0x1009A41B8
	public override int GetByteCount(PTR chars, int count); // 0x1009A4238
	public override int GetByteCount(string s); // 0x1009A423C
	public override int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x1009A4240
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A4244
	public override string GetString(byte[] bytes, int index, int count); // 0x1009A4248
}

// Namespace: 
private sealed class UTF7Decoder : Decoder // TypeDefIndex: 963
{
	// Fields
	private int leftOver; // 0x20

	// Methods
	public void .ctor(); // 0x1009A4214
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A424C
}

// Namespace: System.Text
public class UTF8Encoding : Encoding // TypeDefIndex: 964
{
	// Fields
	private bool emitIdentifier; // 0x58

	// Methods
	public void .ctor(); // 0x1009A42F4
	public void .ctor(bool encoderShouldEmitUTF8Identifier); // 0x10099B8E8
	public void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x10099B8F0
	private static int InternalGetByteCount(char[] chars, int index, int count, char leftOver, bool flush); // 0x1009A4300
	private static int InternalGetByteCount(PTR chars, int count, char leftOver, bool flush); // 0x1009A44B8
	public override int GetByteCount(char[] chars, int index, int count); // 0x1009A45B8
	public override int GetByteCount(PTR chars, int count); // 0x1009A45E0
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, char leftOver, bool flush); // 0x1009A4690
	private static int InternalGetBytes(PTR chars, int count, PTR bytes, int bcount, char leftOver, bool flush); // 0x1009A4908
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A4BBC
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A4BE4
	public override int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x1009A4E4C
	private static int InternalGetCharCount(byte[] bytes, int index, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x1009A4F84
	private static int InternalGetCharCount(PTR bytes, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x1009A5154
	private static int Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, PTR bytes, long index, uint size); // 0x1009A540C
	private static void Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, PTR bytes, long byteIndex, uint size, PTR chars, int charIndex); // 0x1009A563C
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x1009A58B8
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x1009A58F8
	private static int InternalGetChars(PTR bytes, int byteCount, PTR chars, int charCount, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x1009A5BA0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A5FB8
	public override int GetMaxByteCount(int charCount); // 0x1009A6000
	public override int GetMaxCharCount(int byteCount); // 0x1009A60A8
	public override Decoder GetDecoder(); // 0x1009A6150
	public override byte[] GetPreamble(); // 0x1009A61F4
	public override bool Equals(object value); // 0x1009A62D0
	public override int GetHashCode(); // 0x1009A6424
	public override int GetByteCount(string chars); // 0x1009A6428
	public override string GetString(byte[] bytes, int index, int count); // 0x1009A642C
}

// Namespace: 
private class UTF8Decoder : Decoder // TypeDefIndex: 965
{
	// Fields
	private uint leftOverBits; // 0x20
	private uint leftOverCount; // 0x24

	// Methods
	public void .ctor(DecoderFallback fallback); // 0x1009A61C0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A6430
}

// Namespace: System.Text
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 966
{
	// Fields
	private bool bigEndian; // 0x58
	private bool byteOrderMark; // 0x59

	// Methods
	public void .ctor(); // 0x1009A0B7C
	public void .ctor(bool bigEndian, bool byteOrderMark); // 0x10099BC4C
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x1009A0B8C
	public override int GetByteCount(char[] chars, int index, int count); // 0x1009A0D3C
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A0F80
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x1009A1514
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A1674
	public override int GetMaxByteCount(int charCount); // 0x1009A1AA0
	public override int GetMaxCharCount(int byteCount); // 0x1009A1B48
	public override Decoder GetDecoder(); // 0x1009A1BF0
	public override byte[] GetPreamble(); // 0x1009A1C8C
	public override bool Equals(object value); // 0x1009A1D94
	public override int GetHashCode(); // 0x1009A1E6C
	public override int GetByteCount(PTR chars, int count); // 0x1009A1EAC
	public override int GetByteCount(string s); // 0x1009A1F30
	public override int GetBytes(PTR chars, int charCount, PTR bytes, int byteCount); // 0x1009A1F34
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x1009A1F38
	public override string GetString(byte[] bytes, int index, int count); // 0x1009A1F3C
}

// Namespace: 
private sealed class UTF32Decoder : Decoder // TypeDefIndex: 967
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x24
	private int leftOverLength; // 0x28

	// Methods
	public void .ctor(bool bigEndian); // 0x1009A1C5C
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x1009A1F40
}

// Namespace: System.Threading
public sealed class AutoResetEvent : EventWaitHandle // TypeDefIndex: 968
{
	// Methods
	public void .ctor(bool initialState); // 0x1009A646C
}

// Namespace: System.Threading
public sealed class CompressedStack : ISerializable // TypeDefIndex: 969
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods
	internal void .ctor(int length); // 0x1009A6540
	internal void .ctor(CompressedStack cs); // 0x1009A65C4
	public CompressedStack CreateCopy(); // 0x10097EF50
	public static CompressedStack Capture(); // 0x10097F240
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009A66B8
	internal bool IsEmpty(); // 0x1009A672C
}

// Namespace: System.Threading
public sealed class EventResetMode : Enum // TypeDefIndex: 970
{
	// Fields
	public int value__; // 0x10
	public const EventResetMode AutoReset = 0; // 0x0
	public const EventResetMode ManualReset = 1; // 0x0

}

// Namespace: System.Threading
public class EventWaitHandle : WaitHandle // TypeDefIndex: 971
{
	// Methods
	public void .ctor(bool initialState, EventResetMode mode); // 0x1009A6474
	private bool IsManualReset(EventResetMode mode); // 0x1009A6790
	public bool Reset(); // 0x1009A6824
	public bool Set(); // 0x1009A6914
}

// Namespace: System.Threading
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 972
{
	// Fields
	private SecurityContext _sc; // 0x10
	private bool _suppressFlow; // 0x18
	private bool _capture; // 0x19

	// Methods
	internal void .ctor(); // 0x1009A6968
	internal void .ctor(ExecutionContext ec); // 0x1009A6970
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x1009A6A08
	public static ExecutionContext Capture(); // 0x1009A6A6C
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1009A6B54
	internal SecurityContext get_SecurityContext(); // 0x10097F1CC
	internal void set_SecurityContext(SecurityContext value); // 0x1009A6B4C
	internal bool get_FlowSuppressed(); // 0x1009A6B44
	public static bool IsFlowSuppressed(); // 0x1009A6BE0
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 973
{
	// Methods
	public static int CompareExchange(int location1, int value, int comparand); // 0x1009A6C54
	public static object CompareExchange(object location1, object value, object comparand); // 0x1009A6C64
	public static int Increment(int location); // 0x1009A6C74
	public static T CompareExchange(T location1, T value, T comparand); // 0
}

// Namespace: System.Threading
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 974
{
	// Methods
	public void .ctor(bool initialState); // 0x1009A6C7C
}

// Namespace: System.Threading
public static class Monitor // TypeDefIndex: 975
{
	// Methods
	public static void Enter(object obj); // 0x100983D4C
	public static void Exit(object obj); // 0x100984030
	private static void Monitor_pulse(object obj); // 0x1009A6C84
	private static bool Monitor_test_synchronised(object obj); // 0x1009A6C8C
	public static void Pulse(object obj); // 0x1009A6C94
	private static bool Monitor_wait(object obj, int ms); // 0x1009A6D78
	public static bool Wait(object obj, int millisecondsTimeout); // 0x1009A6D84
}

// Namespace: System.Threading
public sealed class Mutex : WaitHandle // TypeDefIndex: 976
{
	// Methods
	public void .ctor(bool initiallyOwned); // 0x1009A6E88
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created); // 0x1009A6F48
	private static bool ReleaseMutex_internal(IntPtr handle); // 0x1009A6F58
	public void ReleaseMutex(); // 0x1009A6F60
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 977
{
	// Methods
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created); // 0x1009A6810
	public static bool SetEvent_internal(IntPtr handle); // 0x1009A6960
	public static bool ResetEvent_internal(IntPtr handle); // 0x1009A690C
	public static void CloseEvent_internal(IntPtr handle); // 0x1009A7004
}

// Namespace: System.Threading
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 978
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x20
	private TimeSpan _timeout; // 0x28
	private object _state; // 0x30
	private bool _executeOnlyOnce; // 0x38
	private WaitHandle _finalEvent; // 0x40
	private ManualResetEvent _cancelEvent; // 0x48
	private int _callsInProcess; // 0x50
	private bool _unregistered; // 0x54

	// Methods
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x1009A7114
	internal void Wait(object state); // 0x1009A71C8
	private void DoCallBack(object timedOut); // 0x1009A7710
}

// Namespace: System.Threading
public class SynchronizationLockException : SystemException // TypeDefIndex: 979
{
	// Methods
	public void .ctor(); // 0x1009A78F0
	public void .ctor(string message); // 0x1009A6D44
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009A7958
}

// Namespace: System.Threading
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 980
{
	// Fields
	private int lock_thread_id; // 0x10
	private IntPtr system_thread_handle; // 0x18
	private object cached_culture_info; // 0x20
	private IntPtr unused0; // 0x28
	private bool threadpool_thread; // 0x30
	private IntPtr name; // 0x38
	private int name_len; // 0x40
	private ThreadState state; // 0x44
	private object abort_exc; // 0x48
	private int abort_state_handle; // 0x50
	private long thread_id; // 0x58
	private IntPtr start_notify; // 0x60
	private IntPtr stack_ptr; // 0x68
	private UIntPtr static_data; // 0x70
	private IntPtr jit_data; // 0x78
	private IntPtr lock_data; // 0x80
	private object current_appcontext; // 0x88
	private int stack_size; // 0x90
	private object start_obj; // 0x98
	private IntPtr appdomain_refs; // 0xA0
	private int interruption_requested; // 0xA8
	private IntPtr suspend_event; // 0xB0
	private IntPtr suspended_event; // 0xB8
	private IntPtr resume_event; // 0xC0
	private IntPtr synch_cs; // 0xC8
	private IntPtr serialized_culture_info; // 0xD0
	private int serialized_culture_info_len; // 0xD8
	private IntPtr serialized_ui_culture_info; // 0xE0
	private int serialized_ui_culture_info_len; // 0xE8
	private bool thread_dump_requested; // 0xEC
	private IntPtr end_stack; // 0xF0
	private bool thread_interrupt_requested; // 0xF8
	private byte apartment_state; // 0xF9
	private int critical_region_level; // 0xFC
	private int small_id; // 0x100
	private IntPtr manage_callback; // 0x108
	private object pending_exception; // 0x110
	private ExecutionContext ec_to_set; // 0x118
	private IntPtr interrupt_on_stop; // 0x120
	private IntPtr unused3; // 0x128
	private IntPtr unused4; // 0x130
	private IntPtr unused5; // 0x138
	private IntPtr unused6; // 0x140
	private static object[] local_slots; // 0xFFFFFFFFFFFFFFFF
	private static ExecutionContext _ec; // 0xFFFFFFFFFFFFFFFF
	private MulticastDelegate threadstart; // 0x148
	private int managed_id; // 0x150
	private IPrincipal _principal; // 0x158
	private static Hashtable datastorehash; // 0x0
	private static object datastore_lock; // 0x8
	private bool in_currentculture; // 0x160
	private static object culture_lock; // 0x10

	// Methods
	public void .ctor(ThreadStart start); // 0x1009A7960
	private static void .cctor(); // 0x1009A7A08
	public static Context get_CurrentContext(); // 0x1009A7A9C
	private static Thread CurrentThread_internal(); // 0x1009A7AA8
	public static Thread get_CurrentThread(); // 0x10097F094
	internal static void FreeLocalSlotValues(int slot, bool thread_local); // 0x1009A7AAC
	public static AppDomain GetDomain(); // 0x1009A7AB8
	public static int GetDomainID(); // 0x1009A7AC4
	private static void ResetAbort_internal(); // 0x1009A7AC8
	public static void ResetAbort(); // 0x1009A7ACC
	private static void Sleep_internal(int ms); // 0x1009A7B28
	public static void Sleep(int millisecondsTimeout); // 0x1009A7B30
	private IntPtr Thread_internal(MulticastDelegate start); // 0x1009A7BD8
	private void Thread_init(); // 0x1009A7A04
	private CultureInfo GetCachedCurrentCulture(); // 0x1009A7BDC
	private byte[] GetSerializedCurrentCulture(); // 0x1009A7BE0
	private void SetCachedCurrentCulture(CultureInfo culture); // 0x1009A7BE4
	private CultureInfo GetCachedCurrentUICulture(); // 0x1009A7BE8
	private byte[] GetSerializedCurrentUICulture(); // 0x1009A7BEC
	private void SetCachedCurrentUICulture(CultureInfo culture); // 0x1009A7BF0
	public CultureInfo get_CurrentCulture(); // 0x1009A7BF4
	public CultureInfo get_CurrentUICulture(); // 0x1009A7EA4
	public void set_IsBackground(bool value); // 0x1009A80F0
	private void SetName_internal(string name); // 0x1009A810C
	public void set_Name(string value); // 0x1009A8110
	private void Abort_internal(object stateInfo); // 0x1009A8114
	public void Abort(); // 0x1009A8118
	private bool Join_internal(int ms, IntPtr handle); // 0x1009A8120
	public void Join(); // 0x1009A8124
	public static void MemoryBarrier(); // 0x1009A8130
	public void Start(); // 0x1009A8134
	private void Thread_free_internal(IntPtr handle); // 0x1009A8244
	protected override void Finalize(); // 0x1009A8248
	private void SetState(ThreadState set); // 0x1009A8104
	private void ClrState(ThreadState clr); // 0x1009A8108
	private static int GetNewManagedId(); // 0x1009A82B8
	private static int GetNewManagedId_internal(); // 0x1009A8314
	public ExecutionContext get_ExecutionContext(); // 0x10097F0F0
	public int get_ManagedThreadId(); // 0x1009A8318
	public override int GetHashCode(); // 0x1009A839C
	public CompressedStack GetCompressedStack(); // 0x1009A6664
}

// Namespace: System.Threading
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 981
{
	// Methods
	private void .ctor(); // 0x1009A83A0
	private void .ctor(SerializationInfo info, StreamingContext sc); // 0x1009A8420
}

// Namespace: System.Threading
public class ThreadInterruptedException : SystemException // TypeDefIndex: 982
{
	// Methods
	public void .ctor(); // 0x1009A8428
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009A8490
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 983
{
	// Methods
	public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x1009A763C
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x1009A84E8
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x1009A8700
}

// Namespace: System.Threading
public sealed class ThreadState : Enum // TypeDefIndex: 984
{
	// Fields
	public int value__; // 0x10
	public const ThreadState Running = 0; // 0x0
	public const ThreadState StopRequested = 1; // 0x0
	public const ThreadState SuspendRequested = 2; // 0x0
	public const ThreadState Background = 4; // 0x0
	public const ThreadState Unstarted = 8; // 0x0
	public const ThreadState Stopped = 16; // 0x0
	public const ThreadState WaitSleepJoin = 32; // 0x0
	public const ThreadState Suspended = 64; // 0x0
	public const ThreadState AbortRequested = 128; // 0x0
	public const ThreadState Aborted = 256; // 0x0

}

// Namespace: System.Threading
public class ThreadStateException : SystemException // TypeDefIndex: 985
{
	// Methods
	public void .ctor(); // 0x1009A8848
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1009A88B0
}

// Namespace: System.Threading
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 986
{
	// Fields
	private static Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0x18
	private object state; // 0x20
	private long due_time_ms; // 0x28
	private long period_ms; // 0x30
	private long next_run; // 0x38
	private bool disposed; // 0x40

	// Methods
	public void .ctor(TimerCallback callback, object state, int dueTime, int period); // 0x1009A88B8
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x1009A89B8
	private static void .cctor(); // 0x1009A8A28
	private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x1009A8910
	public bool Change(int dueTime, int period); // 0x1009A8CC4
	public bool Change(TimeSpan dueTime, TimeSpan period); // 0x1009A8CD4
	public void Dispose(); // 0x1009A8CFC
	private bool Change(long dueTime, long period, bool first); // 0x1009A8B04
}

// Namespace: 
private sealed class TimerComparer : IComparer // TypeDefIndex: 987
{
	// Methods
	public void .ctor(); // 0x1009A9054
	public int Compare(object x, object y); // 0x1009A9BA0
}

// Namespace: 
private sealed class Scheduler // TypeDefIndex: 988
{
	// Fields
	private static Scheduler instance; // 0x0
	private SortedList list; // 0x10

	// Methods
	private void .ctor(); // 0x1009A8F5C
	private static void .cctor(); // 0x1009A905C
	public static Scheduler get_Instance(); // 0x1009A8A9C
	public void Remove(Timer timer); // 0x1009A8D90
	public void Change(Timer timer, long new_next_run); // 0x1009A8E24
	private void Add(Timer timer); // 0x1009A9164
	private int InternalRemove(Timer timer); // 0x1009A90BC
	private void SchedulerThread(); // 0x1009A9358
	private void ShrinkIfNeeded(ArrayList list, int initial); // 0x1009A9AB8
}

// Namespace: System.Threading
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 989
{
	// Fields
	public const int WaitTimeout = 258; // 0x0
	private SafeWaitHandle safe_wait_handle; // 0x18
	protected static readonly IntPtr InvalidHandle; // 0x0
	private bool disposed; // 0x20

	// Methods
	protected void .ctor(); // 0x1009A6788
	private static void .cctor(); // 0x1009A9E00
	private void System.IDisposable.Dispose(); // 0x1009A9E60
	private static void CheckArray(WaitHandle[] handles, bool waitAll); // 0x1009A9EB8
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext); // 0x1009AA028
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x1009A74C0
	public virtual void Close(); // 0x1009AA038
	public virtual IntPtr get_Handle(); // 0x1009AA090
	public virtual void set_Handle(IntPtr value); // 0x1009AA0AC
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext); // 0x1009AA1A4
	protected virtual void Dispose(bool explicitDisposing); // 0x1009AA1A8
	public virtual bool WaitOne(); // 0x1009AA238
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x1009AA31C
	public virtual bool WaitOne(TimeSpan timeout); // 0x1009AA49C
	public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x1009AA4FC
	internal void CheckDisposed(); // 0x1009A6870
	protected override void Finalize(); // 0x1009AA698
}

// Namespace: System.Collections.Generic
internal struct Link // TypeDefIndex: 990
{
	// Fields
	public int HashCode; // 0x10
	public int Next; // 0x14

}

// Namespace: System.Collections.Generic
public class Dictionary`2 : IEnumerable, ISerializable, ICollection, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>>, IDictionary`2<T, T>, IDictionary, IDeserializationCallback // TypeDefIndex: 991
{
	// Fields
	private const int INITIAL_SIZE = 10; // 0x0
	private const float DEFAULT_LOAD_FACTOR = 0.9; // 0x0
	private const int NO_SLOT = -1; // 0x0
	private const int HASH_FLAG = -2147483648; // 0x0
	private int[] table; // 0x0
	private Link[] linkSlots; // 0x0
	private T[] keySlots; // 0x0
	private T[] valueSlots; // 0x0
	private int touchedSlots; // 0x0
	private int emptySlot; // 0x0
	private int count; // 0x0
	private int threshold; // 0x0
	private IEqualityComparer`1<T> hcp; // 0x0
	private SerializationInfo serialization_info; // 0x0
	private int generation; // 0x0
	private static Transform`1<T, T, DictionaryEntry> <>f__am$cacheB; // 0x0

	// Methods
	public void .ctor(); // 0
	public void .ctor(IEqualityComparer`1<T> comparer); // 0
	public void .ctor(IDictionary`2<T, T> dictionary); // 0
	public void .ctor(int capacity); // 0
	public void .ctor(IDictionary`2<T, T> dictionary, IEqualityComparer`1<T> comparer); // 0
	public void .ctor(int capacity, IEqualityComparer`1<T> comparer); // 0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys(); // 0
	private ICollection System.Collections.IDictionary.get_Keys(); // 0
	private ICollection System.Collections.IDictionary.get_Values(); // 0
	private object System.Collections.IDictionary.get_Item(object key); // 0
	private void System.Collections.IDictionary.set_Item(object key, object value); // 0
	private void System.Collections.IDictionary.Add(object key, object value); // 0
	private bool System.Collections.IDictionary.Contains(object key); // 0
	private void System.Collections.IDictionary.Remove(object key); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly(); // 0
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<T, T> keyValuePair); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<T, T> keyValuePair); // 0
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2<T, T>[] array, int index); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<T, T> keyValuePair); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<KeyValuePair`2<T, T>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator(); // 0
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator(); // 0
	public int get_Count(); // 0
	public T get_Item(T key); // 0
	public void set_Item(T key, T value); // 0
	private void Init(int capacity, IEqualityComparer`1<T> hcp); // 0
	private void InitArrays(int size); // 0
	private void CopyToCheck(Array array, int index); // 0
	private void Do_CopyTo(T[] array, int index, Transform`1<T, T, T> transform); // 0
	private static KeyValuePair`2<T, T> make_pair(T key, T value); // 0
	private static T pick_key(T key, T value); // 0
	private static T pick_value(T key, T value); // 0
	private void CopyTo(KeyValuePair`2<T, T>[] array, int index); // 0
	private void Do_ICollectionCopyTo(Array array, int index, Transform`1<T, T, T> transform); // 0
	private void Resize(); // 0
	public void Add(T key, T value); // 0
	public void Clear(); // 0
	public bool ContainsKey(T key); // 0
	public bool ContainsValue(T value); // 0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0
	public virtual void OnDeserialization(object sender); // 0
	public bool Remove(T key); // 0
	public bool TryGetValue(T key, out T value); // 0
	public KeyCollection<T, T> get_Keys(); // 0
	public ValueCollection<T, T> get_Values(); // 0
	private T ToTKey(object key); // 0
	private T ToTValue(object value); // 0
	private bool ContainsKeyValuePair(KeyValuePair`2<T, T> pair); // 0
	public Enumerator<T, T> GetEnumerator(); // 0
	private static DictionaryEntry <CopyTo>m__2(T key, T value); // 0
}

// Namespace: 
private class ShimEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 992
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x0

	// Methods
	public void .ctor(Dictionary`2<T, T> host); // 0
	public bool MoveNext(); // 0
	public DictionaryEntry get_Entry(); // 0
	public object get_Key(); // 0
	public object get_Value(); // 0
	public object get_Current(); // 0
	public void Reset(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<KeyValuePair`2<T, T>>, IDictionaryEnumerator // TypeDefIndex: 993
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x0
	private int next; // 0x0
	private int stamp; // 0x0
	internal KeyValuePair`2<T, T> current; // 0x0

	// Methods
	internal void .ctor(Dictionary`2<T, T> dictionary); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry(); // 0
	private object System.Collections.IDictionaryEnumerator.get_Key(); // 0
	private object System.Collections.IDictionaryEnumerator.get_Value(); // 0
	public bool MoveNext(); // 0
	public KeyValuePair`2<T, T> get_Current(); // 0
	internal T get_CurrentKey(); // 0
	internal T get_CurrentValue(); // 0
	internal void Reset(); // 0
	private void VerifyState(); // 0
	private void VerifyCurrent(); // 0
	public void Dispose(); // 0
}

// Namespace: 
public sealed class KeyCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 994
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x0

	// Methods
	public void .ctor(Dictionary`2<T, T> dictionary); // 0
	private void System.Collections.Generic.ICollection<TKey>.Add(T item); // 0
	private void System.Collections.Generic.ICollection<TKey>.Clear(); // 0
	private bool System.Collections.Generic.ICollection<TKey>.Contains(T item); // 0
	private bool System.Collections.Generic.ICollection<TKey>.Remove(T item); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	public void CopyTo(T[] array, int index); // 0
	public Enumerator<T, T> GetEnumerator(); // 0
	public int get_Count(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 995
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x0

	// Methods
	internal void .ctor(Dictionary`2<T, T> host); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: 
public sealed class ValueCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 996
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x0

	// Methods
	public void .ctor(Dictionary`2<T, T> dictionary); // 0
	private void System.Collections.Generic.ICollection<TValue>.Add(T item); // 0
	private void System.Collections.Generic.ICollection<TValue>.Clear(); // 0
	private bool System.Collections.Generic.ICollection<TValue>.Contains(T item); // 0
	private bool System.Collections.Generic.ICollection<TValue>.Remove(T item); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	public void CopyTo(T[] array, int index); // 0
	public Enumerator<T, T> GetEnumerator(); // 0
	public int get_Count(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 997
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x0

	// Methods
	internal void .ctor(Dictionary`2<T, T> host); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: 
private sealed class Transform`1 : MulticastDelegate // TypeDefIndex: 998
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(T key, T value); // 0
	public virtual IAsyncResult BeginInvoke(T key, T value, AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: System.Collections.Generic
public interface IComparer`1 // TypeDefIndex: 999
{
	// Methods
	public abstract int Compare(T x, T y); // 0
}

// Namespace: System.Collections.Generic
public interface IEqualityComparer`1 // TypeDefIndex: 1000
{
	// Methods
	public abstract bool Equals(T x, T y); // 0
	public abstract int GetHashCode(T obj); // 0
}

// Namespace: System.Collections.Generic
public interface IDictionary`2 : IEnumerable, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>> // TypeDefIndex: 1001
{
	// Methods
	public abstract void Add(T key, T value); // 0
	public abstract bool ContainsKey(T key); // 0
	public abstract bool Remove(T key); // 0
	public abstract bool TryGetValue(T key, out T value); // 0
	public abstract T get_Item(T key); // 0
	public abstract void set_Item(T key, T value); // 0
	public abstract ICollection`1<T> get_Keys(); // 0
}

// Namespace: System.Collections.Generic
public struct KeyValuePair`2 // TypeDefIndex: 1002
{
	// Fields
	private T key; // 0x0
	private T value; // 0x0

	// Methods
	public void .ctor(T key, T value); // 0
	public T get_Key(); // 0
	private void set_Key(T value); // 0
	public T get_Value(); // 0
	private void set_Value(T value); // 0
	public override string ToString(); // 0
}

// Namespace: System.Collections.Generic
public abstract class EqualityComparer`1 : IEqualityComparer`1<T>, IEqualityComparer // TypeDefIndex: 1003
{
	// Fields
	private static readonly EqualityComparer`1<T> _default; // 0x0

	// Methods
	protected void .ctor(); // 0
	private static void .cctor(); // 0
	private int System.Collections.IEqualityComparer.GetHashCode(object obj); // 0
	private bool System.Collections.IEqualityComparer.Equals(object x, object y); // 0
	public abstract int GetHashCode(T obj); // 0
	public abstract bool Equals(T x, T y); // 0
	public static EqualityComparer`1<T> get_Default(); // 0
}

// Namespace: 
private sealed class DefaultComparer : EqualityComparer`1<T> // TypeDefIndex: 1004
{
	// Methods
	public void .ctor(); // 0
	public override int GetHashCode(T obj); // 0
	public override bool Equals(T x, T y); // 0
}

// Namespace: System.Collections.Generic
internal sealed class GenericEqualityComparer`1 : EqualityComparer`1<T> // TypeDefIndex: 1005
{
	// Methods
	public void .ctor(); // 0
	public override int GetHashCode(T obj); // 0
	public override bool Equals(T x, T y); // 0
}

// Namespace: System.Collections.Generic
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1006
{
	// Methods
	public void .ctor(); // 0x10083D934
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10083D988
}

// Namespace: System.Collections.Generic
public class List`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IEnumerable`1<T>, IList`1<T> // TypeDefIndex: 1007
{
	// Fields
	private const int DefaultCapacity = 4; // 0x0
	private T[] _items; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0
	private static readonly T[] EmptyArray; // 0x0

	// Methods
	public void .ctor(); // 0
	public void .ctor(IEnumerable`1<T> collection); // 0
	public void .ctor(int capacity); // 0
	internal void .ctor(T[] data, int size); // 0
	private static void .cctor(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private int System.Collections.IList.Add(object item); // 0
	private bool System.Collections.IList.Contains(object item); // 0
	private int System.Collections.IList.IndexOf(object item); // 0
	private void System.Collections.IList.Insert(int index, object item); // 0
	private void System.Collections.IList.Remove(object item); // 0
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private bool System.Collections.IList.get_IsFixedSize(); // 0
	private bool System.Collections.IList.get_IsReadOnly(); // 0
	private object System.Collections.IList.get_Item(int index); // 0
	private void System.Collections.IList.set_Item(int index, object value); // 0
	public void Add(T item); // 0
	private void GrowIfNeeded(int newCount); // 0
	private void CheckRange(int idx, int count); // 0
	private void AddCollection(ICollection`1<T> collection); // 0
	private void AddEnumerable(IEnumerable`1<T> enumerable); // 0
	public void AddRange(IEnumerable`1<T> collection); // 0
	public ReadOnlyCollection`1<T> AsReadOnly(); // 0
	public void Clear(); // 0
	public bool Contains(T item); // 0
	public void CopyTo(T[] array, int arrayIndex); // 0
	public bool Exists(Predicate`1<T> match); // 0
	public T Find(Predicate`1<T> match); // 0
	private static void CheckMatch(Predicate`1<T> match); // 0
	public List`1<T> FindAll(Predicate`1<T> match); // 0
	private List`1<T> FindAllStackBits(Predicate`1<T> match); // 0
	private List`1<T> FindAllList(Predicate`1<T> match); // 0
	private int GetIndex(int startIndex, int count, Predicate`1<T> match); // 0
	public int FindLastIndex(Predicate`1<T> match); // 0
	private int GetLastIndex(int startIndex, int count, Predicate`1<T> match); // 0
	public void ForEach(Action`1<T> action); // 0
	public Enumerator<T> GetEnumerator(); // 0
	public int IndexOf(T item); // 0
	private void Shift(int start, int delta); // 0
	private void CheckIndex(int index); // 0
	public void Insert(int index, T item); // 0
	private void CheckCollection(IEnumerable`1<T> collection); // 0
	public bool Remove(T item); // 0
	public int RemoveAll(Predicate`1<T> match); // 0
	public void RemoveAt(int index); // 0
	public void RemoveRange(int index, int count); // 0
	public void Reverse(); // 0
	public void Sort(); // 0
	public void Sort(IComparer`1<T> comparer); // 0
	public void Sort(Comparison`1<T> comparison); // 0
	public T[] ToArray(); // 0
	public void TrimExcess(); // 0
	public int get_Capacity(); // 0
	public void set_Capacity(int value); // 0
	public int get_Count(); // 0
	public T get_Item(int index); // 0
	public void set_Item(int index, T value); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 1008
{
	// Fields
	private List`1<T> l; // 0x0
	private int next; // 0x0
	private int ver; // 0x0
	private T current; // 0x0

	// Methods
	internal void .ctor(List`1<T> l); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	private void VerifyState(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`1 // TypeDefIndex: 1009
{
}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`2 // TypeDefIndex: 1010
{
}

// Namespace: System.Collections.ObjectModel
public class Collection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 1011
{
	// Fields
	private IList`1<T> list; // 0x0
	private object syncRoot; // 0x0

	// Methods
	public void .ctor(); // 0
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private int System.Collections.IList.Add(object value); // 0
	private bool System.Collections.IList.Contains(object value); // 0
	private int System.Collections.IList.IndexOf(object value); // 0
	private void System.Collections.IList.Insert(int index, object value); // 0
	private void System.Collections.IList.Remove(object value); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private bool System.Collections.IList.get_IsFixedSize(); // 0
	private bool System.Collections.IList.get_IsReadOnly(); // 0
	private object System.Collections.IList.get_Item(int index); // 0
	private void System.Collections.IList.set_Item(int index, object value); // 0
	public void Add(T item); // 0
	public void Clear(); // 0
	protected virtual void ClearItems(); // 0
	public bool Contains(T item); // 0
	public void CopyTo(T[] array, int index); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public int IndexOf(T item); // 0
	public void Insert(int index, T item); // 0
	protected virtual void InsertItem(int index, T item); // 0
	public bool Remove(T item); // 0
	public void RemoveAt(int index); // 0
	protected virtual void RemoveItem(int index); // 0
	public int get_Count(); // 0
	public T get_Item(int index); // 0
	public void set_Item(int index, T value); // 0
	protected virtual void SetItem(int index, T item); // 0
	internal static bool IsValidItem(object item); // 0
	internal static T ConvertItem(object item); // 0
	internal static void CheckWritable(IList`1<T> list); // 0
	internal static bool IsSynchronized(IList`1<T> list); // 0
	internal static bool IsFixedSize(IList`1<T> list); // 0
}

// Namespace: System.Collections.ObjectModel
public class ReadOnlyCollection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 1012
{
	// Fields
	private IList`1<T> list; // 0x0

	// Methods
	public void .ctor(IList`1<T> list); // 0
	private void System.Collections.Generic.ICollection<T>.Add(T item); // 0
	private void System.Collections.Generic.ICollection<T>.Clear(); // 0
	private void System.Collections.Generic.IList<T>.Insert(int index, T item); // 0
	private bool System.Collections.Generic.ICollection<T>.Remove(T item); // 0
	private void System.Collections.Generic.IList<T>.RemoveAt(int index); // 0
	private T System.Collections.Generic.IList<T>.get_Item(int index); // 0
	private void System.Collections.Generic.IList<T>.set_Item(int index, T value); // 0
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private int System.Collections.IList.Add(object value); // 0
	private void System.Collections.IList.Clear(); // 0
	private bool System.Collections.IList.Contains(object value); // 0
	private int System.Collections.IList.IndexOf(object value); // 0
	private void System.Collections.IList.Insert(int index, object value); // 0
	private void System.Collections.IList.Remove(object value); // 0
	private void System.Collections.IList.RemoveAt(int index); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private bool System.Collections.IList.get_IsFixedSize(); // 0
	private bool System.Collections.IList.get_IsReadOnly(); // 0
	private object System.Collections.IList.get_Item(int index); // 0
	private void System.Collections.IList.set_Item(int index, object value); // 0
	public bool Contains(T value); // 0
	public void CopyTo(T[] array, int index); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public int IndexOf(T value); // 0
	public int get_Count(); // 0
	public T get_Item(int index); // 0
}

// Namespace: System
public struct ArraySegment`1 // TypeDefIndex: 1013
{
	// Fields
	private T[] array; // 0x0
	private int offset; // 0x0
	private int count; // 0x0

	// Methods
	public T[] get_Array(); // 0
	public int get_Offset(); // 0
	public int get_Count(); // 0
	public override bool Equals(object obj); // 0
	public bool Equals(ArraySegment`1<T> obj); // 0
	public override int GetHashCode(); // 0
}

// Namespace: System.Collections.Generic
public abstract class Comparer`1 : IComparer`1<T>, IComparer // TypeDefIndex: 1014
{
	// Fields
	private static readonly Comparer`1<T> _default; // 0x0

	// Methods
	protected void .ctor(); // 0
	private static void .cctor(); // 0
	private int System.Collections.IComparer.Compare(object x, object y); // 0
	public abstract int Compare(T x, T y); // 0
	public static Comparer`1<T> get_Default(); // 0
}

// Namespace: 
private sealed class DefaultComparer : Comparer`1<T> // TypeDefIndex: 1015
{
	// Methods
	public void .ctor(); // 0
	public override int Compare(T x, T y); // 0
}

// Namespace: System.Collections.Generic
internal sealed class GenericComparer`1 : Comparer`1<T> // TypeDefIndex: 1016
{
	// Methods
	public void .ctor(); // 0
	public override int Compare(T x, T y); // 0
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTest : MulticastDelegate // TypeDefIndex: 1017
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007FEF90
	public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence); // 0x1007FF40C
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object); // 0x1007FF4D4
	public virtual bool EndInvoke(IAsyncResult result); // 0x1007FF59C
}

// Namespace: System
public sealed class AppDomainInitializer : MulticastDelegate // TypeDefIndex: 1018
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100828F08
	public virtual void Invoke(string[] args); // 0x100828F18
	public virtual IAsyncResult BeginInvoke(string[] args, AsyncCallback callback, object object); // 0x100829034
	public virtual void EndInvoke(IAsyncResult result); // 0x100829084
}

// Namespace: System
public sealed class AssemblyLoadEventHandler : MulticastDelegate // TypeDefIndex: 1019
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10082F80C
	public virtual void Invoke(object sender, AssemblyLoadEventArgs args); // 0x10082F81C
	public virtual IAsyncResult BeginInvoke(object sender, AssemblyLoadEventArgs args, AsyncCallback callback, object object); // 0x10082F8DC
	public virtual void EndInvoke(IAsyncResult result); // 0x10082F938
}

// Namespace: System
public sealed class ConsoleCancelEventHandler : MulticastDelegate // TypeDefIndex: 1020
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008495A4
	public virtual void Invoke(object sender, ConsoleCancelEventArgs e); // 0x1008492BC
	public virtual IAsyncResult BeginInvoke(object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object); // 0x1008495B4
	public virtual void EndInvoke(IAsyncResult result); // 0x100849610
}

// Namespace: System
public sealed class EventHandler`1 : MulticastDelegate // TypeDefIndex: 1021
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(object sender, T e); // 0
	public virtual IAsyncResult BeginInvoke(object sender, T e, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class EventHandler : MulticastDelegate // TypeDefIndex: 1022
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10086D4EC
	public virtual void Invoke(object sender, EventArgs e); // 0x10086D4FC
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object); // 0x10086D5BC
	public virtual void EndInvoke(IAsyncResult result); // 0x10086D618
}

// Namespace: System
public sealed class ResolveEventHandler : MulticastDelegate // TypeDefIndex: 1023
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008C7790
	public virtual Assembly Invoke(object sender, ResolveEventArgs args); // 0x1008C77A0
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs args, AsyncCallback callback, object object); // 0x1008C7860
	public virtual Assembly EndInvoke(IAsyncResult result); // 0x1008C78BC
}

// Namespace: System
public sealed class UnhandledExceptionEventHandler : MulticastDelegate // TypeDefIndex: 1024
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009B49E0
	public virtual void Invoke(object sender, UnhandledExceptionEventArgs e); // 0x1009B49F0
	public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, object object); // 0x1009B4AB0
	public virtual void EndInvoke(IAsyncResult result); // 0x1009B4B0C
}

// Namespace: System.Reflection
public sealed class MemberFilter : MulticastDelegate // TypeDefIndex: 1025
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008BF5CC
	public virtual bool Invoke(MemberInfo m, object filterCriteria); // 0x1008BF5DC
	public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object); // 0x1008BF69C
	public virtual bool EndInvoke(IAsyncResult result); // 0x1008BF6F8
}

// Namespace: System.Reflection
public sealed class ModuleResolveEventHandler : MulticastDelegate // TypeDefIndex: 1026
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008C0F34
	public virtual Module Invoke(object sender, ResolveEventArgs e); // 0x1008C0F44
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs e, AsyncCallback callback, object object); // 0x1008C1004
	public virtual Module EndInvoke(IAsyncResult result); // 0x1008C1060
}

// Namespace: System.Reflection
public sealed class TypeFilter : MulticastDelegate // TypeDefIndex: 1027
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008C0894
	public virtual bool Invoke(Type m, object filterCriteria); // 0x1008C75CC
	public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object); // 0x1008C768C
	public virtual bool EndInvoke(IAsyncResult result); // 0x1008C76E8
}

// Namespace: System.Runtime.Remoting.Contexts
public sealed class CrossContextDelegate : MulticastDelegate // TypeDefIndex: 1028
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008DE80C
	public virtual void Invoke(); // 0x1008DE81C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1008DE8B8
	public virtual void EndInvoke(IAsyncResult result); // 0x1008DE918
}

// Namespace: System.Runtime.Remoting.Messaging
public sealed class HeaderHandler : MulticastDelegate // TypeDefIndex: 1029
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1008E4D3C
	public virtual object Invoke(Header[] headers); // 0x1008E4D4C
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, object object); // 0x1008E4DE8
	public virtual object EndInvoke(IAsyncResult result); // 0x1008E4E38
}

// Namespace: System.Threading
public sealed class ParameterizedThreadStart : MulticastDelegate // TypeDefIndex: 1030
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009A700C
	public virtual void Invoke(object obj); // 0x1009A701C
	public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object); // 0x1009A70B8
	public virtual void EndInvoke(IAsyncResult result); // 0x1009A7108
}

// Namespace: System.Threading
public sealed class ThreadStart : MulticastDelegate // TypeDefIndex: 1031
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009A8730
	public virtual void Invoke(); // 0x1009A8740
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1009A87DC
	public virtual void EndInvoke(IAsyncResult result); // 0x1009A883C
}

// Namespace: System.Threading
public sealed class TimerCallback : MulticastDelegate // TypeDefIndex: 1032
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009A9C50
	public virtual void Invoke(object state); // 0x1009A9C60
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object); // 0x1009A9CFC
	public virtual void EndInvoke(IAsyncResult result); // 0x1009A9D4C
}

// Namespace: System.Threading
public sealed class WaitCallback : MulticastDelegate // TypeDefIndex: 1033
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009A762C
	public virtual void Invoke(object state); // 0x1009A9D58
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object); // 0x1009A8498
	public virtual void EndInvoke(IAsyncResult result); // 0x1009A9DF4
}

// Namespace: System.Threading
public sealed class WaitOrTimerCallback : MulticastDelegate // TypeDefIndex: 1034
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1009AA738
	public virtual void Invoke(object state, bool timedOut); // 0x1009A7830
	public virtual IAsyncResult BeginInvoke(object state, bool timedOut, AsyncCallback callback, object object); // 0x1009AA748
	public virtual void EndInvoke(IAsyncResult result); // 0x1009AA810
}

// Namespace: System
public sealed class Action`1 : MulticastDelegate // TypeDefIndex: 1035
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T obj); // 0
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Comparison`1 : MulticastDelegate // TypeDefIndex: 1036
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual int Invoke(T x, T y); // 0
	public virtual IAsyncResult BeginInvoke(T x, T y, AsyncCallback callback, object object); // 0
	public virtual int EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Converter`2 : MulticastDelegate // TypeDefIndex: 1037
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(T input); // 0
	public virtual IAsyncResult BeginInvoke(T input, AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Predicate`1 : MulticastDelegate // TypeDefIndex: 1038
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual bool Invoke(T obj); // 0
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object); // 0
	public virtual bool EndInvoke(IAsyncResult result); // 0
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 1039
{
	// Fields
	internal static $ArrayType$52 $$field-0; // 0x0
	internal static $ArrayType$24 $$field-1; // 0x34
	internal static $ArrayType$24 $$field-2; // 0x4C
	internal static $ArrayType$24 $$field-3; // 0x64
	internal static $ArrayType$24 $$field-4; // 0x7C
	internal static $ArrayType$16 $$field-5; // 0x94
	internal static $ArrayType$16 $$field-6; // 0xA4
	internal static $ArrayType$3132 $$field-15; // 0xB4
	internal static $ArrayType$20 $$field-16; // 0xCF0
	internal static $ArrayType$32 $$field-17; // 0xD04
	internal static $ArrayType$48 $$field-18; // 0xD24
	internal static $ArrayType$64 $$field-19; // 0xD54
	internal static $ArrayType$64 $$field-20; // 0xD94
	internal static $ArrayType$64 $$field-21; // 0xDD4
	internal static $ArrayType$64 $$field-22; // 0xE14
	internal static $ArrayType$12 $$field-23; // 0xE54
	internal static $ArrayType$12 $$field-24; // 0xE60
	internal static $ArrayType$12 $$field-25; // 0xE6C
	internal static $ArrayType$16 $$field-26; // 0xE78
	internal static $ArrayType$52 $$field-27; // 0xE88
	internal static $ArrayType$52 $$field-28; // 0xEBC
	internal static $ArrayType$1668 $$field-29; // 0xEF0
	internal static $ArrayType$2100 $$field-30; // 0x1574
	internal static $ArrayType$1452 $$field-31; // 0x1DA8
	internal static $ArrayType$136 $$field-32; // 0x2354
	internal static $ArrayType$84 $$field-34; // 0x23DC
	internal static $ArrayType$72 $$field-35; // 0x2430
	internal static $ArrayType$8 $$field-36; // 0x2478
	internal static $ArrayType$20 $$field-37; // 0x2480
	internal static $ArrayType$12 $$field-38; // 0x2494
	internal static $ArrayType$64 $$field-39; // 0x24A0
	internal static $ArrayType$124 $$field-40; // 0x24E0
	internal static $ArrayType$32 $$field-41; // 0x255C
	internal static $ArrayType$96 $$field-42; // 0x257C
	internal static $ArrayType$2048 $$field-43; // 0x25DC
	internal static $ArrayType$56 $$field-44; // 0x2DDC
	internal static $ArrayType$16 $$field-45; // 0x2E14
	internal static $ArrayType$48 $$field-46; // 0x2E24
	internal static $ArrayType$2048 $$field-47; // 0x2E54
	internal static $ArrayType$2048 $$field-48; // 0x3654
	internal static $ArrayType$256 $$field-49; // 0x3E54
	internal static $ArrayType$256 $$field-50; // 0x3F54
	internal static $ArrayType$120 $$field-51; // 0x4054
	internal static $ArrayType$256 $$field-52; // 0x40CC
	internal static $ArrayType$256 $$field-53; // 0x41CC
	internal static $ArrayType$1024 $$field-54; // 0x42CC
	internal static $ArrayType$1024 $$field-55; // 0x46CC
	internal static $ArrayType$1024 $$field-56; // 0x4ACC
	internal static $ArrayType$1024 $$field-57; // 0x4ECC
	internal static $ArrayType$1024 $$field-58; // 0x52CC
	internal static $ArrayType$1024 $$field-59; // 0x56CC
	internal static $ArrayType$1024 $$field-60; // 0x5ACC
	internal static $ArrayType$1024 $$field-61; // 0x5ECC
	internal static $ArrayType$256 $$field-62; // 0x62CC
	internal static $ArrayType$640 $$field-63; // 0x63CC
	internal static $ArrayType$96 $$field-64; // 0x664C
	internal static $ArrayType$160 $$field-65; // 0x66AC
	internal static $ArrayType$128 $$field-67; // 0x674C
	internal static $ArrayType$256 $$field-68; // 0x67CC

}

// Namespace: 
private struct $ArrayType$52 // TypeDefIndex: 1040
{
}

// Namespace: 
private struct $ArrayType$24 // TypeDefIndex: 1041
{
}

// Namespace: 
private struct $ArrayType$16 // TypeDefIndex: 1042
{
}

// Namespace: 
private struct $ArrayType$120 // TypeDefIndex: 1043
{
}

// Namespace: 
private struct $ArrayType$3132 // TypeDefIndex: 1044
{
}

// Namespace: 
private struct $ArrayType$20 // TypeDefIndex: 1045
{
}

// Namespace: 
private struct $ArrayType$32 // TypeDefIndex: 1046
{
}

// Namespace: 
private struct $ArrayType$48 // TypeDefIndex: 1047
{
}

// Namespace: 
private struct $ArrayType$64 // TypeDefIndex: 1048
{
}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 1049
{
}

// Namespace: 
private struct $ArrayType$1668 // TypeDefIndex: 1050
{
}

// Namespace: 
private struct $ArrayType$2100 // TypeDefIndex: 1051
{
}

// Namespace: 
private struct $ArrayType$1452 // TypeDefIndex: 1052
{
}

// Namespace: 
private struct $ArrayType$136 // TypeDefIndex: 1053
{
}

// Namespace: 
private struct $ArrayType$8 // TypeDefIndex: 1054
{
}

// Namespace: 
private struct $ArrayType$84 // TypeDefIndex: 1055
{
}

// Namespace: 
private struct $ArrayType$72 // TypeDefIndex: 1056
{
}

// Namespace: 
private struct $ArrayType$124 // TypeDefIndex: 1057
{
}

// Namespace: 
private struct $ArrayType$96 // TypeDefIndex: 1058
{
}

// Namespace: 
private struct $ArrayType$2048 // TypeDefIndex: 1059
{
}

// Namespace: 
private struct $ArrayType$56 // TypeDefIndex: 1060
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 1061
{
}

// Namespace: 
private struct $ArrayType$1024 // TypeDefIndex: 1062
{
}

// Namespace: 
private struct $ArrayType$640 // TypeDefIndex: 1063
{
}

// Namespace: 
private struct $ArrayType$160 // TypeDefIndex: 1064
{
}

// Namespace: 
private struct $ArrayType$128 // TypeDefIndex: 1065
{
}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 1066
{
	// Methods
	protected override void Finalize(); // 0x100827124
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1067
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1068
{
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 1069
{
	// Methods
	public static string GetText(string msg); // 0x1004DE184
}

// Namespace: Mono.Math
public class BigInteger // TypeDefIndex: 1070
{
	// Fields
	private uint length; // 0x10
	private uint[] data; // 0x18
	internal static readonly uint[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x8

	// Methods
	public void .ctor(Sign sign, uint len); // 0x1004DE18C
	public void .ctor(BigInteger bi); // 0x1004DE240
	public void .ctor(BigInteger bi, uint len); // 0x1004DE350
	public void .ctor(byte[] inData); // 0x1004DE450
	public void .ctor(uint ui); // 0x1004DE838
	private static void .cctor(); // 0x1004DE8DC
	private static RandomNumberGenerator get_Rng(); // 0x1004DE96C
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x1004DEA2C
	public static BigInteger GenerateRandom(int bits); // 0x1004DEBF4
	public int BitCount(); // 0x1004DEC60
	public bool TestBit(int bitNum); // 0x1004DECF4
	public void SetBit(uint bitNum); // 0x1004DEDEC
	public void SetBit(uint bitNum, bool value); // 0x1004DEDF4
	public int LowestSetBit(); // 0x1004DEE80
	public byte[] GetBytes(); // 0x1004DEF80
	public string ToString(uint radix); // 0x1004DF124
	public string ToString(uint radix, string characterSet); // 0x1004DF184
	private void Normalize(); // 0x1004DE7BC
	public void Clear(); // 0x1004DF514
	public override int GetHashCode(); // 0x1004DF57C
	public override string ToString(); // 0x1004DF5F8
	public override bool Equals(object o); // 0x1004DF600
	public BigInteger ModInverse(BigInteger modulus); // 0x1004DFA1C
	public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x1004E008C
	public static BigInteger GeneratePseudoPrime(int bits); // 0x1004E031C
	public void Incr2(); // 0x1004E03C4
	public static BigInteger op_Implicit(uint value); // 0x1004E050C
	public static BigInteger op_Implicit(int value); // 0x1004E056C
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2); // 0x1004E0600
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2); // 0x1004E095C
	public static uint op_Modulus(BigInteger bi, uint ui); // 0x1004E0D34
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2); // 0x1004E0DD0
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2); // 0x1004E1484
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2); // 0x1004E14C0
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal); // 0x1004E1790
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal); // 0x1004E19C0
	public static bool op_Equality(BigInteger bi1, uint ui); // 0x1004DEF0C
	public static bool op_Inequality(BigInteger bi1, uint ui); // 0x1004DF4A0
	public static bool op_Equality(BigInteger bi1, BigInteger bi2); // 0x1004DF73C
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2); // 0x1004E1BB0
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2); // 0x1004E1C80
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2); // 0x1004E1C9C
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x1004E1CB4
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x1004E1CD0
}

// Namespace: 
public sealed class Sign : Enum // TypeDefIndex: 1071
{
	// Fields
	public int value__; // 0x10
	public const Sign Negative = -1; // 0x0
	public const Sign Zero = 0; // 0x0
	public const Sign Positive = 1; // 0x0

}

// Namespace: 
public sealed class ModulusRing // TypeDefIndex: 1072
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x18

	// Methods
	public void .ctor(BigInteger modulus); // 0x1004E010C
	public void BarrettReduction(BigInteger x); // 0x1004E26D8
	public BigInteger Multiply(BigInteger a, BigInteger b); // 0x1004E2938
	public BigInteger Difference(BigInteger a, BigInteger b); // 0x1004E24D4
	public BigInteger Pow(BigInteger a, BigInteger k); // 0x1004E0200
	public BigInteger Pow(uint b, BigInteger exp); // 0x1004E2B1C
}

// Namespace: 
private sealed class Kernel // TypeDefIndex: 1073
{
	// Methods
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2); // 0x1004E06E8
	public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x1004E0AD0
	public static void MinusEq(BigInteger big, BigInteger small); // 0x1004E1CEC
	public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x1004E1E84
	public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x1004DF80C
	public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x1004DF3D0
	public static uint DwordMod(BigInteger n, uint d); // 0x1004E0D38
	public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x1004E20D8
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x1004E0E10
	public static BigInteger LeftShift(BigInteger bi, int n); // 0x1004E1794
	public static BigInteger RightShift(BigInteger bi, int n); // 0x1004E19C4
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x1004E1680
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x1004E22B0
	public static uint modInverse(BigInteger bi, uint modulus); // 0x1004E240C
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x1004DFA2C
}

// Namespace: Mono.Math.Prime
public sealed class ConfidenceFactor : Enum // TypeDefIndex: 1074
{
	// Fields
	public int value__; // 0x10
	public const ConfidenceFactor ExtraLow = 0; // 0x0
	public const ConfidenceFactor Low = 1; // 0x0
	public const ConfidenceFactor Medium = 2; // 0x0
	public const ConfidenceFactor High = 3; // 0x0
	public const ConfidenceFactor ExtraHigh = 4; // 0x0
	public const ConfidenceFactor Provable = 5; // 0x0

}

// Namespace: Mono.Math.Prime
public sealed class PrimalityTests // TypeDefIndex: 1075
{
	// Methods
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x1004E3240
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x1004E341C
}

// Namespace: Mono.Math.Prime.Generator
public abstract class PrimeGeneratorBase // TypeDefIndex: 1076
{
	// Methods
	protected void .ctor(); // 0x1004E2B94
	public virtual ConfidenceFactor get_Confidence(); // 0x1004E2B9C
	public virtual PrimalityTest get_PrimalityTest(); // 0x1004E2BA4
	public virtual int get_TrialDivisionBounds(); // 0x1004E2C18
	public abstract BigInteger GenerateNewPrime(int bits); // 0
}

// Namespace: Mono.Math.Prime.Generator
public class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 1077
{
	// Methods
	public void .ctor(); // 0x1004E03BC
	protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x1004E2C20
	public override BigInteger GenerateNewPrime(int bits); // 0x1004E2CA8
	public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x1004E2D08
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x1004E3144
}

// Namespace: Mono.Security
public class ASN1 // TypeDefIndex: 1078
{
	// Fields
	private byte m_nTag; // 0x10
	private byte[] m_aValue; // 0x18
	private ArrayList elist; // 0x20

	// Methods
	public void .ctor(byte tag); // 0x1004E36FC
	public void .ctor(byte tag, byte[] data); // 0x1004E372C
	public void .ctor(byte[] data); // 0x1004E3768
	public int get_Count(); // 0x1004E3A38
	public byte get_Tag(); // 0x1004E3A9C
	public int get_Length(); // 0x1004E3AA4
	public byte[] get_Value(); // 0x1004E3ABC
	public void set_Value(byte[] value); // 0x1004E3BD0
	private bool CompareArray(byte[] array1, byte[] array2); // 0x1004E3CBC
	public bool CompareValue(byte[] value); // 0x1004E3D6C
	public ASN1 Add(ASN1 asn1); // 0x1004E3D7C
	public virtual byte[] GetBytes(); // 0x1004E3E28
	protected void Decode(byte[] asn1, int anPos, int anLength); // 0x1004E390C
	protected void DecodeTLV(byte[] asn1, int pos, out byte tag, out int length, out byte[] content); // 0x1004E464C
	public ASN1 get_Item(int index); // 0x1004E47C4
	public ASN1 Element(int index, byte anTag); // 0x1004E490C
	public override string ToString(); // 0x1004E4A70
}

// Namespace: Mono.Security
public static class ASN1Convert // TypeDefIndex: 1079
{
	// Methods
	public static ASN1 FromInt32(int value); // 0x1004E4CA0
	public static ASN1 FromOid(string oid); // 0x1004E4E64
	public static int ToInt32(ASN1 asn1); // 0x1004E4F2C
	public static string ToOid(ASN1 asn1); // 0x1004E5050
	public static DateTime ToDateTime(ASN1 time); // 0x1004E533C
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 1080
{
	// Methods
	private static byte[] GetUIntBytes(PTR bytes); // 0x1004E5994
	internal static byte[] GetBytes(int value); // 0x1004E4E40
}

// Namespace: Mono.Security
public sealed class PKCS7 // TypeDefIndex: 1081
{
}

// Namespace: 
public class ContentInfo // TypeDefIndex: 1082
{
	// Fields
	private string contentType; // 0x10
	private ASN1 content; // 0x18

	// Methods
	public void .ctor(); // 0x1004ED658
	public void .ctor(string oid); // 0x1004ED6D0
	public void .ctor(byte[] data); // 0x1004ED6F8
	public void .ctor(ASN1 asn1); // 0x1004ED768
	public ASN1 get_ASN1(); // 0x1004ED8D8
	public ASN1 get_Content(); // 0x1004ED984
	public void set_Content(ASN1 value); // 0x1004ED98C
	public string get_ContentType(); // 0x1004ED994
	public void set_ContentType(string value); // 0x1004ED99C
	internal ASN1 GetASN1(); // 0x1004ED8DC
}

// Namespace: 
public class EncryptedData // TypeDefIndex: 1083
{
	// Fields
	private byte _version; // 0x10
	private ContentInfo _content; // 0x18
	private ContentInfo _encryptionAlgorithm; // 0x20
	private byte[] _encrypted; // 0x28

	// Methods
	public void .ctor(); // 0x1004ED9A4
	public void .ctor(ASN1 asn1); // 0x1004ED9CC
	public ContentInfo get_EncryptionAlgorithm(); // 0x1004EDC68
	public byte[] get_EncryptedContent(); // 0x1004EDC70
}

// Namespace: Mono.Security.Cryptography
public class ARC4Managed : RC4, IDisposable, ICryptoTransform // TypeDefIndex: 1084
{
	// Fields
	private byte[] key; // 0x50
	private byte[] state; // 0x58
	private byte x; // 0x60
	private byte y; // 0x61
	private bool m_disposed; // 0x62

	// Methods
	public void .ctor(); // 0x1004E5B10
	protected override void Finalize(); // 0x1004E5C38
	protected override void Dispose(bool disposing); // 0x1004E5CD8
	public override byte[] get_Key(); // 0x1004E5D5C
	public override void set_Key(byte[] value); // 0x1004E5E3C
	public bool get_CanReuseTransform(); // 0x1004E60DC
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV); // 0x1004E60E4
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV); // 0x1004E6138
	public override void GenerateIV(); // 0x1004E61B8
	public override void GenerateKey(); // 0x1004E6258
	public bool get_CanTransformMultipleBlocks(); // 0x1004E6368
	public int get_InputBlockSize(); // 0x1004E6370
	public int get_OutputBlockSize(); // 0x1004E6378
	private void KeySetup(byte[] key); // 0x1004E5F38
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1004E6380
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1004E64BC
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1004E6614
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1004E6864
}

// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert // TypeDefIndex: 1085
{
	// Methods
	public static string ToHex(byte[] input); // 0x1004E6914
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 1086
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Methods
	private static RandomNumberGenerator get_Rng(); // 0x1004E7324
	public static byte[] Key(int size); // 0x1004E62C0
}

// Namespace: Mono.Security.Cryptography
public abstract class MD2 : HashAlgorithm // TypeDefIndex: 1087
{
	// Methods
	protected void .ctor(); // 0x1004E7398
	public static MD2 Create(); // 0x1004E73C4
	public static MD2 Create(string hashName); // 0x1004E740C
}

// Namespace: Mono.Security.Cryptography
public class MD2Managed : MD2 // TypeDefIndex: 1088
{
	// Fields
	private byte[] state; // 0x28
	private byte[] checksum; // 0x30
	private byte[] buffer; // 0x38
	private int count; // 0x40
	private byte[] x; // 0x48
	private static readonly byte[] PI_SUBST; // 0x0

	// Methods
	public void .ctor(); // 0x1004E74AC
	private static void .cctor(); // 0x1004E75B0
	private byte[] Padding(int nLength); // 0x1004E7640
	public override void Initialize(); // 0x1004E7700
	protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x1004E777C
	protected override byte[] HashFinal(); // 0x1004E7B74
	private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index); // 0x1004E7870
}

// Namespace: Mono.Security.Cryptography
public abstract class MD4 : HashAlgorithm // TypeDefIndex: 1089
{
	// Methods
	protected void .ctor(); // 0x1004E7D14
	public static MD4 Create(); // 0x1004E7D40
	public static MD4 Create(string hashName); // 0x1004E7D88
}

// Namespace: Mono.Security.Cryptography
public class MD4Managed : MD4 // TypeDefIndex: 1090
{
	// Fields
	private uint[] state; // 0x28
	private byte[] buffer; // 0x30
	private uint[] count; // 0x38
	private uint[] x; // 0x40
	private byte[] digest; // 0x48

	// Methods
	public void .ctor(); // 0x1004E7E28
	public override void Initialize(); // 0x1004E7F50
	protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x1004E80A8
	protected override byte[] HashFinal(); // 0x1004E90CC
	private byte[] Padding(int nLength); // 0x1004E937C
	private uint F(uint x, uint y, uint z); // 0x1004E9414
	private uint G(uint x, uint y, uint z); // 0x1004E9424
	private uint H(uint x, uint y, uint z); // 0x1004E9438
	private uint ROL(uint x, byte n); // 0x1004E9444
	private void FF(uint a, uint b, uint c, uint d, uint x, byte s); // 0x1004E9454
	private void GG(uint a, uint b, uint c, uint d, uint x, byte s); // 0x1004E9480
	private void HH(uint a, uint b, uint c, uint d, uint x, byte s); // 0x1004E94BC
	private void Encode(byte[] output, uint[] input); // 0x1004E9224
	private void Decode(uint[] output, byte[] input, int index); // 0x1004E94F0
	private void MD4Transform(uint[] state, byte[] block, int index); // 0x1004E826C
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS1 // TypeDefIndex: 1091
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x8
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x18

	// Methods
	private static void .cctor(); // 0x1004E9D04
	private static bool Compare(byte[] array1, byte[] array2); // 0x1004E9E68
	public static byte[] I2OSP(byte[] x, int size); // 0x1004E9F18
	public static byte[] OS2IP(byte[] x); // 0x1004E9FBC
	public static byte[] RSASP1(RSA rsa, byte[] m); // 0x1004EA0A4
	public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x1004EA108
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue); // 0x1004EA16C
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature); // 0x1004EA5D4
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x1004EA664
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x1004EA240
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS8 // TypeDefIndex: 1092
{
}

// Namespace: 
public class PrivateKeyInfo // TypeDefIndex: 1093
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Methods
	public void .ctor(); // 0x1004EAD8C
	public void .ctor(byte[] data); // 0x1004EADFC
	public byte[] get_PrivateKey(); // 0x1004EB06C
	private void Decode(byte[] data); // 0x1004EAE28
	private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x1004EB148
	private static byte[] Normalize(byte[] bigInt, int length); // 0x1004EB200
	public static RSA DecodeRSA(byte[] keypair); // 0x1004EB2C4
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x1004EB738
}

// Namespace: 
public class EncryptedPrivateKeyInfo // TypeDefIndex: 1094
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Methods
	public void .ctor(); // 0x1004EA8B8
	public void .ctor(byte[] data); // 0x1004EA8C0
	public string get_Algorithm(); // 0x1004EAB48
	public byte[] get_EncryptedData(); // 0x1004EAB50
	public byte[] get_Salt(); // 0x1004EAC2C
	public int get_IterationCount(); // 0x1004EAD84
	private void Decode(byte[] data); // 0x1004EA8F0
}

// Namespace: Mono.Security.Cryptography
public abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 1095
{
	// Fields
	private static KeySizes[] s_legalBlockSizes; // 0x0
	private static KeySizes[] s_legalKeySizes; // 0x8

	// Methods
	public void .ctor(); // 0x1004E5BA0
	private static void .cctor(); // 0x1004EB8A8
	public override byte[] get_IV(); // 0x1004EBA10
	public override void set_IV(byte[] value); // 0x1004EBA68
}

// Namespace: Mono.Security.Cryptography
public class RSAManaged : RSA // TypeDefIndex: 1096
{
	// Fields
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Methods
	public void .ctor(); // 0x1004EBA6C
	public void .ctor(int keySize); // 0x1004EBA74
	protected override void Finalize(); // 0x1004EBB6C
	private void GenerateKeyPair(); // 0x1004EBC0C
	public override int get_KeySize(); // 0x1004EBFB0
	public bool get_PublicOnly(); // 0x1004EBFF4
	public override byte[] DecryptValue(byte[] rgb); // 0x1004EC0B8
	public override byte[] EncryptValue(byte[] rgb); // 0x1004EC4CC
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x1004EC5E8
	public override void ImportParameters(RSAParameters parameters); // 0x1004EC944
	protected override void Dispose(bool disposing); // 0x1004ECDA0
	public override string ToXmlString(bool includePrivateParameters); // 0x1004ECFEC
	private byte[] GetPaddedValue(BigInteger value, int length); // 0x1004EC3F8
}

// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 1097
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004ED5E0
	public virtual void Invoke(object sender, EventArgs e); // 0x1004EBEF0
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object); // 0x1004ED5F0
	public virtual void EndInvoke(IAsyncResult result); // 0x1004ED64C
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 1098
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Methods
	public void .ctor(string bagOID, ASN1 asn1); // 0x10050CD3C
	public string get_BagOID(); // 0x10050AF78
	public ASN1 get_ASN1(); // 0x10050AF80
}

// Namespace: Mono.Security.X509
public class PKCS12 : ICloneable // TypeDefIndex: 1099
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map8; // 0x20
	private static Dictionary`2<string, int> <>f__switch$mapC; // 0x28

	// Methods
	public void .ctor(); // 0x100508E70
	public void .ctor(byte[] data); // 0x100508F74
	public void .ctor(byte[] data, string password); // 0x1005099C4
	private static void .cctor(); // 0x100509A08
	private void Decode(byte[] data); // 0x1005091A8
	protected override void Finalize(); // 0x10050A624
	public void set_Password(string value); // 0x100508FD0
	public int get_IterationCount(); // 0x10050A714
	public void set_IterationCount(int value); // 0x10050A71C
	public ArrayList get_Keys(); // 0x10050A724
	public X509CertificateCollection get_Certificates(); // 0x10050B160
	internal RandomNumberGenerator get_RNG(); // 0x10050B7E8
	private bool Compare(byte[] expected, byte[] actual); // 0x100509B80
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x10050B818
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x10050AF88
	public byte[] Decrypt(EncryptedData ed); // 0x10050A53C
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x10050C0DC
	private DSAParameters GetExistingParameters(out bool found); // 0x10050C334
	private void AddPrivateKey(PrivateKeyInfo pki); // 0x10050CB8C
	private void ReadSafeBag(ASN1 safeBag); // 0x100509C30
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes); // 0x10050CD74
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x100509A60
	public byte[] GetBytes(); // 0x10050DCE0
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x10050FFD4
	public void AddCertificate(X509Certificate cert); // 0x10050FFCC
	public void AddCertificate(X509Certificate cert, IDictionary attributes); // 0x100510310
	public void RemoveCertificate(X509Certificate cert); // 0x10050FFC4
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs); // 0x100510588
	public object Clone(); // 0x100510B18
	public static int get_MaximumPasswordLength(); // 0x10050A6AC
}

// Namespace: 
public class DeriveBytes // TypeDefIndex: 1100
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Methods
	public void .ctor(); // 0x10050BDC0
	private static void .cctor(); // 0x100510C48
	public void set_HashName(string value); // 0x10050BFD4
	public void set_IterationCount(int value); // 0x10050BFCC
	public void set_Password(byte[] value); // 0x10050BDC8
	public void set_Salt(byte[] value); // 0x10050BED8
	private void Adjust(byte[] a, int aOff, byte[] b); // 0x100510D68
	private byte[] Derive(byte[] diversifier, int n); // 0x100510EF4
	public byte[] DeriveKey(int size); // 0x10050BFDC
	public byte[] DeriveIV(int size); // 0x10050C05C
	public byte[] DeriveMAC(int size); // 0x10050DC60
}

// Namespace: Mono.Security.X509
public sealed class X501 // TypeDefIndex: 1101
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70

	// Methods
	private static void .cctor(); // 0x100511428
	public static string ToString(ASN1 seq); // 0x100506A54
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes); // 0x100512308
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x100511B18
}

// Namespace: Mono.Security.X509
public class X509Certificate : ISerializable // TypeDefIndex: 1102
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private string m_issuername; // 0x48
	private string m_keyalgo; // 0x50
	private byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private string m_subject; // 0x68
	private byte[] m_publickey; // 0x70
	private byte[] signature; // 0x78
	private string m_signaturealgo; // 0x80
	private byte[] m_signaturealgoparams; // 0x88
	private byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xA0
	private int version; // 0xA8
	private byte[] serialnumber; // 0xB0
	private byte[] issuerUniqueID; // 0xB8
	private byte[] subjectUniqueID; // 0xC0
	private X509ExtensionCollection extensions; // 0xC8
	private static string encoding_error; // 0x0
	private static Dictionary`2<string, int> <>f__switch$mapF; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map10; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map11; // 0x18

	// Methods
	public void .ctor(byte[] data); // 0x10050B598
	private static void .cctor(); // 0x100513068
	private void Parse(byte[] data); // 0x100512668
	private byte[] GetUnsignedBigInteger(byte[] integer); // 0x100513228
	public DSA get_DSA(); // 0x10050C748
	public void set_DSA(DSA value); // 0x1005132E4
	public X509ExtensionCollection get_Extensions(); // 0x1005132F4
	public byte[] get_Hash(); // 0x1005132FC
	public virtual string get_IssuerName(); // 0x100513704
	public virtual string get_KeyAlgorithm(); // 0x10051370C
	public virtual byte[] get_KeyAlgorithmParameters(); // 0x100513714
	public virtual void set_KeyAlgorithmParameters(byte[] value); // 0x1005137F0
	public virtual byte[] get_PublicKey(); // 0x1005137F8
	public virtual RSA get_RSA(); // 0x1005138D4
	public virtual void set_RSA(RSA value); // 0x100513AFC
	public virtual byte[] get_RawData(); // 0x100513B0C
	public virtual byte[] get_SerialNumber(); // 0x100513BE8
	public virtual byte[] get_Signature(); // 0x100513CC4
	public virtual string get_SignatureAlgorithm(); // 0x10051417C
	public virtual string get_SubjectName(); // 0x100514184
	public virtual DateTime get_ValidFrom(); // 0x10051418C
	public virtual DateTime get_ValidUntil(); // 0x100514198
	public int get_Version(); // 0x1005141A4
	public bool get_IsCurrent(); // 0x1005141AC
	public bool WasCurrent(DateTime instant); // 0x10051422C
	internal bool VerifySignature(DSA dsa); // 0x100514360
	internal bool VerifySignature(RSA rsa); // 0x10051447C
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x1005148B0
	public bool get_IsSelfSigned(); // 0x100514A3C
	public ASN1 GetIssuerName(); // 0x100514B00
	public ASN1 GetSubjectName(); // 0x100514B08
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100514B10
	private static byte[] PEM(string type, byte[] data); // 0x1005124CC
}

// Namespace: Mono.Security.X509
public class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 1103
{
	// Methods
	public void .ctor(); // 0x100508F6C
	public void .ctor(X509CertificateCollection value); // 0x100514B7C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100514CE8
	public X509Certificate get_Item(int index); // 0x100514D48
	public int Add(X509Certificate value); // 0x10050B71C
	public void AddRange(X509CertificateCollection value); // 0x100514BAC
	public bool Contains(X509Certificate value); // 0x100514DE0
	public X509CertificateEnumerator GetEnumerator(); // 0x10050C5F0
	public override int GetHashCode(); // 0x100515060
	public int IndexOf(X509Certificate value); // 0x100514DFC
	public void Remove(X509Certificate value); // 0x100515174
	private bool Compare(byte[] array1, byte[] array2); // 0x1005150BC
}

// Namespace: 
public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1104
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	public void .ctor(X509CertificateCollection mappings); // 0x100514F64
	private object System.Collections.IEnumerator.get_Current(); // 0x1005151E4
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1005152D4
	private void System.Collections.IEnumerator.Reset(); // 0x1005153C8
	public X509Certificate get_Current(); // 0x10050C650
	public bool MoveNext(); // 0x10050CA98
	public void Reset(); // 0x1005154BC
}

// Namespace: Mono.Security.X509
public class X509Chain // TypeDefIndex: 1105
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Methods
	public void .ctor(); // 0x1005155B0
	public void .ctor(X509CertificateCollection chain); // 0x10051561C
	public X509ChainStatusFlags get_Status(); // 0x1005156A0
	public X509CertificateCollection get_TrustAnchors(); // 0x1005156A8
	public bool Build(X509Certificate leaf); // 0x100515800
	private bool IsValid(X509Certificate cert); // 0x1005160A8
	private X509Certificate FindCertificateParent(X509Certificate child); // 0x100515B44
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot); // 0x100515CFC
	private bool IsTrusted(X509Certificate potentialTrusted); // 0x100516148
	private bool IsParent(X509Certificate child, X509Certificate parent); // 0x100515EF4
}

// Namespace: Mono.Security.X509
public sealed class X509ChainStatusFlags : Enum // TypeDefIndex: 1106
{
	// Fields
	public int value__; // 0x10
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024; // 0x0
	public const X509ChainStatusFlags NoError = 0; // 0x0
	public const X509ChainStatusFlags NotSignatureValid = 8; // 0x0
	public const X509ChainStatusFlags NotTimeNested = 2; // 0x0
	public const X509ChainStatusFlags NotTimeValid = 1; // 0x0
	public const X509ChainStatusFlags PartialChain = 65536; // 0x0
	public const X509ChainStatusFlags UntrustedRoot = 32; // 0x0

}

// Namespace: Mono.Security.X509
public class X509Crl // TypeDefIndex: 1107
{
	// Fields
	private string issuer; // 0x10
	private byte version; // 0x18
	private DateTime thisUpdate; // 0x20
	private DateTime nextUpdate; // 0x30
	private ArrayList entries; // 0x40
	private string signatureOID; // 0x48
	private byte[] signature; // 0x50
	private X509ExtensionCollection extensions; // 0x58
	private byte[] encoded; // 0x60
	private byte[] hash_value; // 0x68
	private static Dictionary`2<string, int> <>f__switch$map13; // 0x0

	// Methods
	public void .ctor(byte[] crl); // 0x10051623C
	private void Parse(byte[] crl); // 0x10051636C
	public X509ExtensionCollection get_Extensions(); // 0x100516B8C
	public byte[] get_Hash(); // 0x100516B94
	public string get_IssuerName(); // 0x100516EB8
	public DateTime get_NextUpdate(); // 0x100516EC0
	private bool Compare(byte[] array1, byte[] array2); // 0x100516ECC
	public X509CrlEntry GetCrlEntry(X509Certificate x509); // 0x100516F84
	public X509CrlEntry GetCrlEntry(byte[] serialNumber); // 0x100517030
	private string GetHashName(); // 0x100516C7C
	internal bool VerifySignature(DSA dsa); // 0x100517250
	internal bool VerifySignature(RSA rsa); // 0x100517568
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x100517660
}

// Namespace: 
public class X509CrlEntry // TypeDefIndex: 1108
{
	// Fields
	private byte[] sn; // 0x10
	private DateTime revocationDate; // 0x18
	private X509ExtensionCollection extensions; // 0x28

	// Methods
	internal void .ctor(ASN1 entry); // 0x100516AA0
	public byte[] get_SerialNumber(); // 0x100517170
	public DateTime get_RevocationDate(); // 0x1005177EC
	public X509ExtensionCollection get_Extensions(); // 0x1005177F8
}

// Namespace: Mono.Security.X509
public class X509Extension // TypeDefIndex: 1109
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Methods
	public void .ctor(ASN1 asn1); // 0x100517800
	public void .ctor(X509Extension extension); // 0x100505758
	protected virtual void Decode(); // 0x100517B68
	protected virtual void Encode(); // 0x100517B6C
	public string get_Oid(); // 0x100517B58
	public bool get_Critical(); // 0x100517B60
	public ASN1 get_Value(); // 0x100517B04
	public override bool Equals(object obj); // 0x100517B70
	public override int GetHashCode(); // 0x100517CEC
	private void WriteLine(StringBuilder sb, int n, int pos); // 0x100517D08
	public override string ToString(); // 0x100517F24
}

// Namespace: Mono.Security.X509
public sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 1110
{
	// Fields
	private bool readOnly; // 0x18

	// Methods
	public void .ctor(); // 0x100518018
	public void .ctor(ASN1 asn1); // 0x1005130D0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100518020
	public int IndexOf(string oid); // 0x100518080
	public X509Extension get_Item(string oid); // 0x100516180
}

// Namespace: Mono.Security.X509
public class X509Store // TypeDefIndex: 1111
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private ArrayList _crls; // 0x20
	private bool _crl; // 0x28

	// Methods
	internal void .ctor(string path, bool crl); // 0x100518204
	public X509CertificateCollection get_Certificates(); // 0x100518240
	public ArrayList get_Crls(); // 0x100518438
	private byte[] Load(string filename); // 0x1005186A4
	private X509Certificate LoadCertificate(string filename); // 0x1005188A8
	private X509Crl LoadCrl(string filename); // 0x100518914
	private bool CheckStore(string path, bool throwException); // 0x100518980
	private X509CertificateCollection BuildCertificatesCollection(string storeName); // 0x100518274
	private ArrayList BuildCrlsCollection(string storeName); // 0x1005184C8
}

// Namespace: Mono.Security.X509
public sealed class X509StoreManager // TypeDefIndex: 1112
{
	// Fields
	private static X509Stores _userStore; // 0x0
	private static X509Stores _machineStore; // 0x8

	// Methods
	public static X509Stores get_CurrentUser(); // 0x100518A90
	public static X509Stores get_LocalMachine(); // 0x100518BBC
	public static X509CertificateCollection get_TrustedRootCertificates(); // 0x10051572C
}

// Namespace: Mono.Security.X509
public class X509Stores // TypeDefIndex: 1113
{
	// Fields
	private string _storePath; // 0x10
	private X509Store _trusted; // 0x18

	// Methods
	internal void .ctor(string path); // 0x100518B90
	public X509Store get_TrustedRoot(); // 0x100518CB8
	public X509Store Open(string storeName, bool create); // 0x100518D7C
}

// Namespace: Mono.Security.X509.Extensions
public class AuthorityKeyIdentifierExtension : X509Extension // TypeDefIndex: 1114
{
	// Fields
	private byte[] aki; // 0x28

	// Methods
	public void .ctor(X509Extension extension); // 0x100505008
	protected override void Decode(); // 0x100505010
	public byte[] get_Identifier(); // 0x100505118
	public override string ToString(); // 0x1005051F4
}

// Namespace: Mono.Security.X509.Extensions
public class BasicConstraintsExtension : X509Extension // TypeDefIndex: 1115
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Methods
	public void .ctor(X509Extension extension); // 0x100505360
	protected override void Decode(); // 0x100505368
	protected override void Encode(); // 0x1005054A0
	public bool get_CertificateAuthority(); // 0x1005055E4
	public override string ToString(); // 0x1005055EC
}

// Namespace: Mono.Security.X509.Extensions
public class ExtendedKeyUsageExtension : X509Extension // TypeDefIndex: 1116
{
	// Fields
	private ArrayList keyPurpose; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map14; // 0x0

	// Methods
	public void .ctor(X509Extension extension); // 0x100505754
	protected override void Decode(); // 0x1005058BC
	protected override void Encode(); // 0x100505A3C
	public ArrayList get_KeyPurpose(); // 0x100505E18
	public override string ToString(); // 0x100505E20
}

// Namespace: Mono.Security.X509.Extensions
internal class GeneralNames // TypeDefIndex: 1117
{
	// Fields
	private ArrayList rfc822Name; // 0x10
	private ArrayList dnsName; // 0x18
	private ArrayList directoryNames; // 0x20
	private ArrayList uris; // 0x28
	private ArrayList ipAddr; // 0x30

	// Methods
	public void .ctor(ASN1 sequence); // 0x1005064F8
	public string[] get_DNSNames(); // 0x100506B7C
	public string[] get_IPAddresses(); // 0x100506CE4
	public override string ToString(); // 0x100506E4C
}

// Namespace: Mono.Security.X509.Extensions
public sealed class KeyUsages : Enum // TypeDefIndex: 1118
{
	// Fields
	public int value__; // 0x10
	public const KeyUsages digitalSignature = 128; // 0x0
	public const KeyUsages nonRepudiation = 64; // 0x0
	public const KeyUsages keyEncipherment = 32; // 0x0
	public const KeyUsages dataEncipherment = 16; // 0x0
	public const KeyUsages keyAgreement = 8; // 0x0
	public const KeyUsages keyCertSign = 4; // 0x0
	public const KeyUsages cRLSign = 2; // 0x0
	public const KeyUsages encipherOnly = 1; // 0x0
	public const KeyUsages decipherOnly = 2048; // 0x0
	public const KeyUsages none = 0; // 0x0

}

// Namespace: Mono.Security.X509.Extensions
public class KeyUsageExtension : X509Extension // TypeDefIndex: 1119
{
	// Fields
	private int kubits; // 0x28

	// Methods
	public void .ctor(X509Extension extension); // 0x100507F1C
	protected override void Decode(); // 0x100507F20
	protected override void Encode(); // 0x100508060
	public bool Support(KeyUsages usage); // 0x1005082A4
	public override string ToString(); // 0x100508384
}

// Namespace: Mono.Security.X509.Extensions
public class NetscapeCertTypeExtension : X509Extension // TypeDefIndex: 1120
{
	// Fields
	private int ctbits; // 0x28

	// Methods
	public void .ctor(X509Extension extension); // 0x100508788
	protected override void Decode(); // 0x10050878C
	public bool Support(CertTypes usage); // 0x1005088CC
	public override string ToString(); // 0x1005089AC
}

// Namespace: 
public sealed class CertTypes : Enum // TypeDefIndex: 1121
{
	// Fields
	public int value__; // 0x10
	public const CertTypes SslClient = 128; // 0x0
	public const CertTypes SslServer = 64; // 0x0
	public const CertTypes Smime = 32; // 0x0
	public const CertTypes ObjectSigning = 16; // 0x0
	public const CertTypes SslCA = 4; // 0x0
	public const CertTypes SmimeCA = 2; // 0x0
	public const CertTypes ObjectSigningCA = 1; // 0x0

}

// Namespace: Mono.Security.X509.Extensions
public class SubjectAltNameExtension : X509Extension // TypeDefIndex: 1122
{
	// Fields
	private GeneralNames _names; // 0x28

	// Methods
	public void .ctor(X509Extension extension); // 0x100508D00
	protected override void Decode(); // 0x100508D04
	public string[] get_DNSNames(); // 0x100508DEC
	public string[] get_IPAddresses(); // 0x100508E04
	public override string ToString(); // 0x100508E1C
}

// Namespace: Mono.Security.Cryptography
internal class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1123
{
	// Fields
	private HashAlgorithm hash; // 0x30
	private bool hashing; // 0x38
	private byte[] innerPad; // 0x40
	private byte[] outerPad; // 0x48

	// Methods
	public void .ctor(string hashName, byte[] rgbKey); // 0x1004E6A50
	public override byte[] get_Key(); // 0x1004E6C80
	public override void set_Key(byte[] value); // 0x1004E6D60
	public override void Initialize(); // 0x1004E706C
	protected override byte[] HashFinal(); // 0x1004E70CC
	protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x1004E7298
	private void initializePad(); // 0x1004E6EB4
}

// Namespace: Mono.Security.Cryptography
internal class MD5SHA1 : HashAlgorithm // TypeDefIndex: 1124
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private bool hashing; // 0x38

	// Methods
	public void .ctor(); // 0x1004E962C
	public override void Initialize(); // 0x1004E96E8
	protected override byte[] HashFinal(); // 0x1004E976C
	protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x1004E9900
	public byte[] CreateSignature(RSA rsa); // 0x1004E9988
	public bool VerifySignature(RSA rsa, byte[] rgbSignature); // 0x1004E9B28
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class AlertLevel : Enum // TypeDefIndex: 1125
{
	// Fields
	public byte value__; // 0x10
	public const AlertLevel Warning = 1; // 0x0
	public const AlertLevel Fatal = 2; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class AlertDescription : Enum // TypeDefIndex: 1126
{
	// Fields
	public byte value__; // 0x10
	public const AlertDescription CloseNotify = 0; // 0x0
	public const AlertDescription UnexpectedMessage = 10; // 0x0
	public const AlertDescription BadRecordMAC = 20; // 0x0
	public const AlertDescription DecryptionFailed = 21; // 0x0
	public const AlertDescription RecordOverflow = 22; // 0x0
	public const AlertDescription DecompressionFailiure = 30; // 0x0
	public const AlertDescription HandshakeFailiure = 40; // 0x0
	public const AlertDescription NoCertificate = 41; // 0x0
	public const AlertDescription BadCertificate = 42; // 0x0
	public const AlertDescription UnsupportedCertificate = 43; // 0x0
	public const AlertDescription CertificateRevoked = 44; // 0x0
	public const AlertDescription CertificateExpired = 45; // 0x0
	public const AlertDescription CertificateUnknown = 46; // 0x0
	public const AlertDescription IlegalParameter = 47; // 0x0
	public const AlertDescription UnknownCA = 48; // 0x0
	public const AlertDescription AccessDenied = 49; // 0x0
	public const AlertDescription DecodeError = 50; // 0x0
	public const AlertDescription DecryptError = 51; // 0x0
	public const AlertDescription ExportRestriction = 60; // 0x0
	public const AlertDescription ProtocolVersion = 70; // 0x0
	public const AlertDescription InsuficientSecurity = 71; // 0x0
	public const AlertDescription InternalError = 80; // 0x0
	public const AlertDescription UserCancelled = 90; // 0x0
	public const AlertDescription NoRenegotiation = 100; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal class Alert // TypeDefIndex: 1127
{
	// Fields
	private AlertLevel level; // 0x10
	private AlertDescription description; // 0x11

	// Methods
	public void .ctor(AlertDescription description); // 0x1004EDD4C
	public void .ctor(AlertLevel level, AlertDescription description); // 0x1004EDDE8
	public AlertLevel get_Level(); // 0x1004EDE24
	public AlertDescription get_Description(); // 0x1004EDE2C
	public bool get_IsWarning(); // 0x1004EDE34
	public bool get_IsCloseNotify(); // 0x1004EDE44
	private void inferAlertLevel(); // 0x1004EDD80
	public static string GetAlertMessage(AlertDescription description); // 0x1004EDE68
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CipherAlgorithmType : Enum // TypeDefIndex: 1128
{
	// Fields
	public int value__; // 0x10
	public const CipherAlgorithmType Des = 0; // 0x0
	public const CipherAlgorithmType None = 1; // 0x0
	public const CipherAlgorithmType Rc2 = 2; // 0x0
	public const CipherAlgorithmType Rc4 = 3; // 0x0
	public const CipherAlgorithmType Rijndael = 4; // 0x0
	public const CipherAlgorithmType SkipJack = 5; // 0x0
	public const CipherAlgorithmType TripleDes = 6; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class CipherSuite // TypeDefIndex: 1129
{
	// Fields
	public static byte[] EmptyArray; // 0x0
	private short code; // 0x10
	private string name; // 0x18
	private CipherAlgorithmType cipherAlgorithmType; // 0x20
	private HashAlgorithmType hashAlgorithmType; // 0x24
	private ExchangeAlgorithmType exchangeAlgorithmType; // 0x28
	private bool isExportable; // 0x2C
	private CipherMode cipherMode; // 0x30
	private byte keyMaterialSize; // 0x34
	private int keyBlockSize; // 0x38
	private byte expandedKeyMaterialSize; // 0x3C
	private short effectiveKeyBits; // 0x3E
	private byte ivSize; // 0x40
	private byte blockSize; // 0x41
	private Context context; // 0x48
	private SymmetricAlgorithm encryptionAlgorithm; // 0x50
	private ICryptoTransform encryptionCipher; // 0x58
	private SymmetricAlgorithm decryptionAlgorithm; // 0x60
	private ICryptoTransform decryptionCipher; // 0x68
	private KeyedHashAlgorithm clientHMAC; // 0x70
	private KeyedHashAlgorithm serverHMAC; // 0x78

	// Methods
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBits, byte ivSize, byte blockSize); // 0x1004EE284
	private static void .cctor(); // 0x1004EE398
	protected ICryptoTransform get_EncryptionCipher(); // 0x1004EE408
	protected ICryptoTransform get_DecryptionCipher(); // 0x1004EE410
	protected KeyedHashAlgorithm get_ClientHMAC(); // 0x1004EE418
	protected KeyedHashAlgorithm get_ServerHMAC(); // 0x1004EE420
	public CipherAlgorithmType get_CipherAlgorithmType(); // 0x1004EE428
	public string get_HashAlgorithmName(); // 0x1004EE430
	public HashAlgorithmType get_HashAlgorithmType(); // 0x1004EE4DC
	public int get_HashSize(); // 0x1004EE370
	public ExchangeAlgorithmType get_ExchangeAlgorithmType(); // 0x1004EE4E4
	public CipherMode get_CipherMode(); // 0x1004EE4EC
	public short get_Code(); // 0x1004EE4F4
	public string get_Name(); // 0x1004EE4FC
	public bool get_IsExportable(); // 0x1004EE504
	public byte get_KeyMaterialSize(); // 0x1004EE50C
	public int get_KeyBlockSize(); // 0x1004EE514
	public byte get_ExpandedKeyMaterialSize(); // 0x1004EE51C
	public short get_EffectiveKeyBits(); // 0x1004EE524
	public byte get_IvSize(); // 0x1004EE52C
	public Context get_Context(); // 0x1004EE534
	public void set_Context(Context value); // 0x1004EE53C
	internal void Write(byte[] array, int offset, short value); // 0x1004EE544
	internal void Write(byte[] array, int offset, ulong value); // 0x1004EE618
	public void InitializeCipher(); // 0x1004EE7C4
	public byte[] EncryptRecord(byte[] fragment, byte[] mac); // 0x1004EEFE0
	public void DecryptRecord(byte[] fragment, out byte[] dcrFragment, out byte[] dcrMAC); // 0x1004EF200
	public abstract byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment); // 0
	public abstract byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment); // 0
	public abstract void ComputeMasterSecret(byte[] preMasterSecret); // 0
	public abstract void ComputeKeys(); // 0
	public byte[] CreatePremasterSecret(); // 0x1004EF494
	public byte[] PRF(byte[] secret, string label, byte[] data, int length); // 0x1004EF600
	public byte[] Expand(string hashName, byte[] secret, byte[] seed, int length); // 0x1004EFA7C
	private void createEncryptionCipher(); // 0x1004EE7E8
	private void createDecryptionCipher(); // 0x1004EEBE4
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class CipherSuiteCollection : IEnumerable, ICollection, IList // TypeDefIndex: 1130
{
	// Fields
	private ArrayList cipherSuites; // 0x10
	private SecurityProtocolType protocol; // 0x18

	// Methods
	public void .ctor(SecurityProtocolType protocol); // 0x1004EFEA4
	private object System.Collections.IList.get_Item(int index); // 0x1004EFF20
	private void System.Collections.IList.set_Item(int index, object value); // 0x1004EFFB0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x1004F008C
	private object System.Collections.ICollection.get_SyncRoot(); // 0x1004F00E0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1004F0134
	private bool System.Collections.IList.Contains(object value); // 0x1004F018C
	private int System.Collections.IList.IndexOf(object value); // 0x1004F025C
	private void System.Collections.IList.Insert(int index, object value); // 0x1004F032C
	private void System.Collections.IList.Remove(object value); // 0x1004F0404
	private void System.Collections.IList.RemoveAt(int index); // 0x1004F04D4
	private int System.Collections.IList.Add(object value); // 0x1004F053C
	public CipherSuite get_Item(string name); // 0x1004F0608
	public CipherSuite get_Item(int index); // 0x1004EFF24
	public void set_Item(int index, CipherSuite value); // 0x1004F0020
	public CipherSuite get_Item(short code); // 0x1004F09D4
	public int get_Count(); // 0x1004F0D98
	public bool get_IsFixedSize(); // 0x1004F0DEC
	public bool get_IsReadOnly(); // 0x1004F0E40
	public void CopyTo(Array array, int index); // 0x1004F0E94
	public void Clear(); // 0x1004F0F04
	public int IndexOf(string name); // 0x1004F06A4
	public int IndexOf(short code); // 0x1004F0A70
	public CipherSuite Add(short code, string name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize); // 0x1004F1048
	private TlsCipherSuite add(TlsCipherSuite cipherSuite); // 0x1004F12D0
	private SslCipherSuite add(SslCipherSuite cipherSuite); // 0x1004F14E0
	private bool cultureAwareCompare(string strA, string strB); // 0x1004F0F58
}

// Namespace: Mono.Security.Protocol.Tls
internal class CipherSuiteFactory // TypeDefIndex: 1131
{
	// Methods
	public static CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol); // 0x1004F153C
	private static CipherSuiteCollection GetTls1SupportedCiphers(); // 0x1004F15D4
	private static CipherSuiteCollection GetSsl3SupportedCiphers(); // 0x1004F19AC
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientContext : Context // TypeDefIndex: 1132
{
	// Fields
	private SslClientStream sslStream; // 0xE0
	private short clientHelloProtocol; // 0xE8

	// Methods
	public void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, string targetHost, X509CertificateCollection clientCertificates); // 0x1004F1D44
	public SslClientStream get_SslStream(); // 0x1004F1E78
	public short get_ClientHelloProtocol(); // 0x1004EF5F8
	public void set_ClientHelloProtocol(short value); // 0x1004F1E80
	public override void Clear(); // 0x1004F1E88
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientRecordProtocol : RecordProtocol // TypeDefIndex: 1133
{
	// Methods
	public void .ctor(Stream innerStream, ClientContext context); // 0x1004F1F64
	public override HandshakeMessage GetMessage(HandshakeType type); // 0x1004F2024
	protected override void ProcessHandshakeMessage(TlsStream handMsg); // 0x1004F2268
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type); // 0x1004F2028
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type, byte[] buffer); // 0x1004F2528
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionInfo : IDisposable // TypeDefIndex: 1134
{
	// Fields
	private static readonly int ValidityInterval; // 0x0
	private bool disposed; // 0x10
	private DateTime validuntil; // 0x18
	private string host; // 0x28
	private byte[] sid; // 0x30
	private byte[] masterSecret; // 0x38

	// Methods
	public void .ctor(string hostname, byte[] id); // 0x1004F3244
	private static void .cctor(); // 0x1004F3F6C
	protected override void Finalize(); // 0x1004F4074
	public string get_HostName(); // 0x1004F3280
	public byte[] get_Id(); // 0x1004F3908
	public bool get_Valid(); // 0x1004F3868
	public void GetContext(Context context); // 0x1004F3C48
	public void SetContext(Context context); // 0x1004F3E70
	public void KeepAlive(); // 0x1004F3288
	public void Dispose(); // 0x1004F334C
	private void Dispose(bool disposing); // 0x1004F40E4
	private void CheckDisposed(); // 0x1004F4188
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionCache // TypeDefIndex: 1135
{
	// Fields
	private static Hashtable cache; // 0x0
	private static object locker; // 0x8

	// Methods
	private static void .cctor(); // 0x1004F2E30
	public static void Add(string host, byte[] id); // 0x1004F2EC4
	public static byte[] FromHost(string host); // 0x1004F337C
	private static ClientSessionInfo FromContext(Context context, bool checkValidity); // 0x1004F3910
	public static bool SetContextInCache(Context context); // 0x1004F3B1C
	public static bool SetContextFromCache(Context context); // 0x1004F3D44
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class ContentType : Enum // TypeDefIndex: 1136
{
	// Fields
	public byte value__; // 0x10
	public const ContentType ChangeCipherSpec = 20; // 0x0
	public const ContentType Alert = 21; // 0x0
	public const ContentType Handshake = 22; // 0x0
	public const ContentType ApplicationData = 23; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class Context // TypeDefIndex: 1137
{
	// Fields
	private SecurityProtocolType securityProtocol; // 0x10
	private byte[] sessionId; // 0x18
	private SecurityCompressionType compressionMethod; // 0x20
	private TlsServerSettings serverSettings; // 0x28
	private TlsClientSettings clientSettings; // 0x30
	private SecurityParameters current; // 0x38
	private SecurityParameters negotiating; // 0x40
	private SecurityParameters read; // 0x48
	private SecurityParameters write; // 0x50
	private CipherSuiteCollection supportedCiphers; // 0x58
	private HandshakeType lastHandshakeMsg; // 0x60
	private HandshakeState handshakeState; // 0x64
	private bool abbreviatedHandshake; // 0x68
	private bool receivedConnectionEnd; // 0x69
	private bool sentConnectionEnd; // 0x6A
	private bool protocolNegotiated; // 0x6B
	private ulong writeSequenceNumber; // 0x70
	private ulong readSequenceNumber; // 0x78
	private byte[] clientRandom; // 0x80
	private byte[] serverRandom; // 0x88
	private byte[] randomCS; // 0x90
	private byte[] randomSC; // 0x98
	private byte[] masterSecret; // 0xA0
	private byte[] clientWriteKey; // 0xA8
	private byte[] serverWriteKey; // 0xB0
	private byte[] clientWriteIV; // 0xB8
	private byte[] serverWriteIV; // 0xC0
	private TlsStream handshakeMessages; // 0xC8
	private RandomNumberGenerator random; // 0xD0
	private RecordProtocol recordProtocol; // 0xD8

	// Methods
	public void .ctor(SecurityProtocolType securityProtocolType); // 0x1004F1D90
	public bool get_AbbreviatedHandshake(); // 0x1004F42C0
	public void set_AbbreviatedHandshake(bool value); // 0x1004F42C8
	public bool get_ProtocolNegotiated(); // 0x1004F42D0
	public void set_ProtocolNegotiated(bool value); // 0x1004F42D8
	public SecurityProtocolType get_SecurityProtocol(); // 0x1004F42E0
	public void set_SecurityProtocol(SecurityProtocolType value); // 0x1004F4214
	public SecurityProtocolType get_SecurityProtocolFlags(); // 0x1004F4380
	public short get_Protocol(); // 0x1004F4388
	public byte[] get_SessionId(); // 0x1004F3B0C
	public void set_SessionId(byte[] value); // 0x1004F4428
	public SecurityCompressionType get_CompressionMethod(); // 0x1004F4430
	public void set_CompressionMethod(SecurityCompressionType value); // 0x1004F4438
	public TlsServerSettings get_ServerSettings(); // 0x1004F4440
	public TlsClientSettings get_ClientSettings(); // 0x1004F1E60
	public HandshakeType get_LastHandshakeMsg(); // 0x1004F4448
	public void set_LastHandshakeMsg(HandshakeType value); // 0x1004F29BC
	public HandshakeState get_HandshakeState(); // 0x1004F2BDC
	public void set_HandshakeState(HandshakeState value); // 0x1004F2BE4
	public bool get_ReceivedConnectionEnd(); // 0x1004F4450
	public void set_ReceivedConnectionEnd(bool value); // 0x1004F4458
	public bool get_SentConnectionEnd(); // 0x1004F4460
	public void set_SentConnectionEnd(bool value); // 0x1004F4468
	public CipherSuiteCollection get_SupportedCiphers(); // 0x1004F4470
	public void set_SupportedCiphers(CipherSuiteCollection value); // 0x1004F4478
	public TlsStream get_HandshakeMessages(); // 0x1004F29C4
	public ulong get_WriteSequenceNumber(); // 0x1004F4480
	public void set_WriteSequenceNumber(ulong value); // 0x1004F4488
	public ulong get_ReadSequenceNumber(); // 0x1004F4490
	public void set_ReadSequenceNumber(ulong value); // 0x1004F4498
	public byte[] get_ClientRandom(); // 0x1004F44A0
	public void set_ClientRandom(byte[] value); // 0x1004F44A8
	public byte[] get_ServerRandom(); // 0x1004F44B0
	public void set_ServerRandom(byte[] value); // 0x1004F44B8
	public byte[] get_RandomCS(); // 0x1004F44C0
	public void set_RandomCS(byte[] value); // 0x1004F44C8
	public byte[] get_RandomSC(); // 0x1004F44D0
	public void set_RandomSC(byte[] value); // 0x1004F44D8
	public byte[] get_MasterSecret(); // 0x1004F4204
	public void set_MasterSecret(byte[] value); // 0x1004F420C
	public byte[] get_ClientWriteKey(); // 0x1004EFDF4
	public void set_ClientWriteKey(byte[] value); // 0x1004F44E0
	public byte[] get_ServerWriteKey(); // 0x1004EFE04
	public void set_ServerWriteKey(byte[] value); // 0x1004F44E8
	public byte[] get_ClientWriteIV(); // 0x1004EFDFC
	public void set_ClientWriteIV(byte[] value); // 0x1004F44F0
	public byte[] get_ServerWriteIV(); // 0x1004EFE0C
	public void set_ServerWriteIV(byte[] value); // 0x1004F44F8
	public RecordProtocol get_RecordProtocol(); // 0x1004F4500
	public void set_RecordProtocol(RecordProtocol value); // 0x1004F4508
	public int GetUnixTime(); // 0x1004F4510
	public byte[] GetSecureRandomBytes(int count); // 0x1004EF550
	public virtual void Clear(); // 0x1004F1E90
	public virtual void ClearKeyInfo(); // 0x1004F45CC
	public SecurityProtocolType DecodeProtocolCode(short code); // 0x1004F4714
	public void ChangeProtocol(short protocol); // 0x1004F47A0
	public SecurityParameters get_Current(); // 0x1004F4864
	public SecurityParameters get_Negotiating(); // 0x1004EFE14
	public SecurityParameters get_Read(); // 0x1004F48F4
	public SecurityParameters get_Write(); // 0x1004F48FC
	public void StartSwitchingSecurityParameters(bool client); // 0x1004F4904
	public void EndSwitchingSecurityParameters(bool client); // 0x1004F4930
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class ExchangeAlgorithmType : Enum // TypeDefIndex: 1138
{
	// Fields
	public int value__; // 0x10
	public const ExchangeAlgorithmType DiffieHellman = 0; // 0x0
	public const ExchangeAlgorithmType Fortezza = 1; // 0x0
	public const ExchangeAlgorithmType None = 2; // 0x0
	public const ExchangeAlgorithmType RsaKeyX = 3; // 0x0
	public const ExchangeAlgorithmType RsaSign = 4; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class HandshakeState : Enum // TypeDefIndex: 1139
{
	// Fields
	public int value__; // 0x10
	public const HandshakeState None = 0; // 0x0
	public const HandshakeState Started = 1; // 0x0
	public const HandshakeState Finished = 2; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
public sealed class HashAlgorithmType : Enum // TypeDefIndex: 1140
{
	// Fields
	public int value__; // 0x10
	public const HashAlgorithmType Md5 = 0; // 0x0
	public const HashAlgorithmType None = 1; // 0x0
	public const HashAlgorithmType Sha1 = 2; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal class HttpsClientStream : SslClientStream // TypeDefIndex: 1141
{
	// Fields
	private HttpWebRequest _request; // 0x90
	private int _status; // 0x98
	private static CertificateSelectionCallback <>f__am$cache2; // 0x0
	private static PrivateKeySelectionCallback <>f__am$cache3; // 0x8

	// Methods
	public void .ctor(Stream stream, X509CertificateCollection clientCertificates, HttpWebRequest request, byte[] buffer); // 0x1004F9124
	public bool get_TrustFailure(); // 0x1004F9638
	internal override bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors); // 0x1004F9664
	private static X509Certificate <HttpsClientStream>m__0(X509CertificateCollection clientCerts, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates); // 0x1004F99B4
	private static AsymmetricAlgorithm <HttpsClientStream>m__1(X509Certificate certificate, string targetHost); // 0x1004F9A00
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class RecordProtocol // TypeDefIndex: 1142
{
	// Fields
	private static ManualResetEvent record_processing; // 0x0
	protected Stream innerStream; // 0x10
	protected Context context; // 0x18

	// Methods
	public void .ctor(Stream innerStream, Context context); // 0x1004F1FE0
	private static void .cctor(); // 0x1004F9BB8
	public Context get_Context(); // 0x1004F29B4
	public virtual void SendRecord(HandshakeType type); // 0x1004F9C28
	protected abstract void ProcessHandshakeMessage(TlsStream handMsg); // 0
	protected virtual void ProcessChangeCipherSpec(); // 0x1004F9EE0
	public virtual HandshakeMessage GetMessage(HandshakeType type); // 0x1004F9F8C
	public IAsyncResult BeginReceiveRecord(Stream record, AsyncCallback callback, object state); // 0x1004F9FE0
	private void InternalReceiveRecordCallback(IAsyncResult asyncResult); // 0x1004FA230
	public byte[] EndReceiveRecord(IAsyncResult asyncResult); // 0x1004FABD8
	public byte[] ReceiveRecord(Stream record); // 0x1004FAEE0
	private byte[] ReadRecordBuffer(int contentType, Stream record); // 0x1004FA72C
	private byte[] ReadClientHelloV2(Stream record); // 0x1004FAF00
	private byte[] ReadStandardRecordBuffer(Stream record); // 0x1004FB38C
	private void ProcessAlert(AlertLevel alertLevel, AlertDescription alertDesc); // 0x1004FAAC0
	public void SendAlert(AlertDescription description); // 0x1004FB924
	public void SendAlert(AlertLevel level, AlertDescription description); // 0x1004F2BEC
	public void SendAlert(Alert alert); // 0x1004FB9A0
	public void SendChangeCipherSpec(); // 0x1004FBAF0
	public IAsyncResult BeginSendRecord(HandshakeType handshakeType, AsyncCallback callback, object state); // 0x1004F9C58
	private void InternalSendRecordCallback(IAsyncResult ar); // 0x1004FBDA0
	public IAsyncResult BeginSendRecord(ContentType contentType, byte[] recordData, AsyncCallback callback, object state); // 0x1004FBC90
	public void EndSendRecord(IAsyncResult asyncResult); // 0x1004F9D8C
	public void SendRecord(ContentType contentType, byte[] recordData); // 0x1004FBAC0
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData); // 0x1004FC0B4
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData, int offset, int count); // 0x1004FC264
	private byte[] encryptRecordFragment(ContentType contentType, byte[] fragment); // 0x1004FC420
	private byte[] decryptRecordFragment(ContentType contentType, byte[] fragment); // 0x1004FA868
	private bool Compare(byte[] array1, byte[] array2); // 0x1004FC548
	private void ProcessCipherSpecV2Buffer(SecurityProtocolType protocol, byte[] buffer); // 0x1004FB64C
	private CipherSuite MapV2CipherCode(string prefix, int code); // 0x1004FC600
}

// Namespace: 
private class ReceiveRecordAsyncResult : IAsyncResult // TypeDefIndex: 1143
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private byte[] _resultingBuffer; // 0x38
	private Stream _record; // 0x40
	private bool completed; // 0x48
	private byte[] _initialBuffer; // 0x50

	// Methods
	public void .ctor(AsyncCallback userCallback, object userState, byte[] initialBuffer, Stream record); // 0x1004FA190
	public Stream get_Record(); // 0x1004FA714
	public byte[] get_ResultingBuffer(); // 0x1004FAED8
	public byte[] get_InitialBuffer(); // 0x1004FA228
	public object get_AsyncState(); // 0x1004FC8C8
	public Exception get_AsyncException(); // 0x1004FAED0
	public bool get_CompletedWithError(); // 0x1004FAE6C
	public WaitHandle get_AsyncWaitHandle(); // 0x1004FAD8C
	public bool get_IsCompleted(); // 0x1004FAD44
	private void SetComplete(Exception ex, byte[] resultingBuffer); // 0x1004FC8D0
	public void SetComplete(Exception ex); // 0x1004FABD0
	public void SetComplete(byte[] resultingBuffer); // 0x1004FA71C
}

// Namespace: 
private class SendRecordAsyncResult : IAsyncResult // TypeDefIndex: 1144
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private HandshakeMessage _message; // 0x38
	private bool completed; // 0x40

	// Methods
	public void .ctor(AsyncCallback userCallback, object userState, HandshakeMessage message); // 0x1004FBC00
	public HandshakeMessage get_Message(); // 0x1004FBFC8
	public object get_AsyncState(); // 0x1004FC9B4
	public Exception get_AsyncException(); // 0x1004FC25C
	public bool get_CompletedWithError(); // 0x1004FC1F8
	public WaitHandle get_AsyncWaitHandle(); // 0x1004FC118
	public bool get_IsCompleted(); // 0x1004FC0D0
	public void SetComplete(Exception ex); // 0x1004FBFD8
	public void SetComplete(); // 0x1004FBFD0
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1145
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map15; // 0x0

	// Methods
	public void .ctor(AsymmetricAlgorithm key); // 0x1004E9CA0
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x1004FC9BC
	public override void SetHashAlgorithm(string strName); // 0x1004FCAD4
	public override void SetKey(AsymmetricAlgorithm key); // 0x1004FCC14
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1146
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map16; // 0x0

	// Methods
	public void .ctor(AsymmetricAlgorithm key); // 0x1004E9AC4
	public override byte[] CreateSignature(byte[] rgbHash); // 0x1004FCCCC
	public override void SetHashAlgorithm(string strName); // 0x1004FCDDC
	public override void SetKey(AsymmetricAlgorithm key); // 0x1004FCF1C
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class SecurityCompressionType : Enum // TypeDefIndex: 1147
{
	// Fields
	public int value__; // 0x10
	public const SecurityCompressionType None = 0; // 0x0
	public const SecurityCompressionType Zlib = 1; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal class SecurityParameters // TypeDefIndex: 1148
{
	// Fields
	private CipherSuite cipher; // 0x10
	private byte[] clientWriteMAC; // 0x18
	private byte[] serverWriteMAC; // 0x20

	// Methods
	public void .ctor(); // 0x1004F48E4
	public CipherSuite get_Cipher(); // 0x1004F48EC
	public void set_Cipher(CipherSuite value); // 0x1004F8884
	public byte[] get_ClientWriteMAC(); // 0x1004EFE94
	public void set_ClientWriteMAC(byte[] value); // 0x1004FCFD4
	public byte[] get_ServerWriteMAC(); // 0x1004EFE9C
	public void set_ServerWriteMAC(byte[] value); // 0x1004FCFDC
	public void Clear(); // 0x1004F4964
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class SecurityProtocolType : Enum // TypeDefIndex: 1149
{
	// Fields
	public int value__; // 0x10
	public const SecurityProtocolType Default = -1073741824; // 0x0
	public const SecurityProtocolType Ssl2 = 12; // 0x0
	public const SecurityProtocolType Ssl3 = 48; // 0x0
	public const SecurityProtocolType Tls = 192; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls
internal class ServerContext : Context // TypeDefIndex: 1150
{
}

// Namespace: Mono.Security.Protocol.Tls
public class ValidationResult // TypeDefIndex: 1151
{
	// Fields
	private bool trusted; // 0x10
	private bool user_denied; // 0x11
	private int error_code; // 0x14

	// Methods
	public void .ctor(bool trusted, bool user_denied, int error_code); // 0x100504FC4
	public bool get_Trusted(); // 0x1004F77BC
	public int get_ErrorCode(); // 0x1004F77C4
}

// Namespace: Mono.Security.Protocol.Tls
public class SslClientStream : SslStreamBase // TypeDefIndex: 1152
{
	// Fields
	private CertificateValidationCallback ServerCertValidation; // 0x70
	private CertificateSelectionCallback ClientCertSelection; // 0x78
	private PrivateKeySelectionCallback PrivateKeySelection; // 0x80
	private CertificateValidationCallback2 ServerCertValidation2; // 0x88

	// Methods
	public void .ctor(Stream stream, string targetHost, bool ownsStream); // 0x1004FE080
	public void .ctor(Stream stream, string targetHost, X509Certificate clientCertificate); // 0x1004FE08C
	public void .ctor(Stream stream, string targetHost, X509CertificateCollection clientCertificates); // 0x1004FE180
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType); // 0x1004FE194
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType, X509CertificateCollection clientCertificates); // 0x1004F9314
	internal void add_ServerCertValidation(CertificateValidationCallback value); // 0x1004FE460
	internal void remove_ServerCertValidation(CertificateValidationCallback value); // 0x1004FE540
	internal void add_ClientCertSelection(CertificateSelectionCallback value); // 0x1004F9468
	internal void remove_ClientCertSelection(CertificateSelectionCallback value); // 0x1004FE620
	internal void add_PrivateKeySelection(PrivateKeySelectionCallback value); // 0x1004F9558
	internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value); // 0x1004FE700
	public void add_ServerCertValidation2(CertificateValidationCallback2 value); // 0x1004FE7E0
	public void remove_ServerCertValidation2(CertificateValidationCallback2 value); // 0x1004FE8C0
	internal Stream get_InputBuffer(); // 0x1004F9458
	public X509CertificateCollection get_ClientCertificates(); // 0x1004FE9A0
	public X509Certificate get_SelectedClientCertificate(); // 0x1004FE9C8
	public CertificateValidationCallback get_ServerCertValidationDelegate(); // 0x1004FE9F0
	public void set_ServerCertValidationDelegate(CertificateValidationCallback value); // 0x1004FE9F8
	public CertificateSelectionCallback get_ClientCertSelectionDelegate(); // 0x1004FEA00
	public void set_ClientCertSelectionDelegate(CertificateSelectionCallback value); // 0x1004FEA08
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate(); // 0x1004FEA10
	public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value); // 0x1004FEA18
	protected override void Finalize(); // 0x1004FEA20
	protected override void Dispose(bool disposing); // 0x1004FECAC
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state); // 0x1004FECDC
	private void SafeReceiveRecord(Stream s); // 0x1004FEEE0
	internal override void OnNegotiateHandshakeCallback(IAsyncResult asyncResult); // 0x1004FEF8C
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates); // 0x1004FF310
	internal override bool get_HaveRemoteValidation2Callback(); // 0x1004FF324
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection); // 0x1004FF334
	internal override bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors); // 0x1004FF348
	internal virtual bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors); // 0x1004FF374
	internal virtual ValidationResult RaiseServerCertificateValidation2(X509CertificateCollection collection); // 0x1004FF43C
	internal X509Certificate RaiseClientCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates); // 0x1004F4C40
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost); // 0x1004FF578
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost); // 0x1004F5448
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslCipherSuite : CipherSuite // TypeDefIndex: 1153
{
	// Fields
	private byte[] pad1; // 0x80
	private byte[] pad2; // 0x88
	private byte[] header; // 0x90

	// Methods
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize); // 0x1004F132C
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment); // 0x1004FCFE4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment); // 0x1004FD320
	public override void ComputeMasterSecret(byte[] preMasterSecret); // 0x1004FD65C
	public override void ComputeKeys(); // 0x1004FD954
	private byte[] prf(byte[] secret, string label, byte[] random); // 0x1004FD760
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslHandshakeHash : HashAlgorithm // TypeDefIndex: 1154
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private bool hashing; // 0x38
	private byte[] secret; // 0x40
	private byte[] innerPadMD5; // 0x48
	private byte[] outerPadMD5; // 0x50
	private byte[] innerPadSHA; // 0x58
	private byte[] outerPadSHA; // 0x60

	// Methods
	public void .ctor(byte[] secret); // 0x1004F54B0
	public override void Initialize(); // 0x1004FF5F4
	protected override byte[] HashFinal(); // 0x1004FF80C
	protected override void HashCore(byte[] array, int ibStart, int cbSize); // 0x1004FFB7C
	public byte[] CreateSignature(RSA rsa); // 0x1004F55E4
	private void initializePad(); // 0x1004FF680
}

// Namespace: Mono.Security.Protocol.Tls
public abstract class SslStreamBase : Stream, IDisposable // TypeDefIndex: 1155
{
	// Fields
	private const int WaitTimeOut = 300000; // 0x0
	private static ManualResetEvent record_processing; // 0x0
	internal Stream innerStream; // 0x18
	internal MemoryStream inputBuffer; // 0x20
	internal Context context; // 0x28
	internal RecordProtocol protocol; // 0x30
	internal bool ownsStream; // 0x38
	private bool disposed; // 0x39
	private bool checkCertRevocationStatus; // 0x3A
	private object negotiate; // 0x40
	private object read; // 0x48
	private object write; // 0x50
	private ManualResetEvent negotiationComplete; // 0x58
	private byte[] recbuf; // 0x60
	private MemoryStream recordStream; // 0x68

	// Methods
	protected void .ctor(Stream stream, bool ownsStream); // 0x1004FE228
	private static void .cctor(); // 0x1004FFC04
	private void AsyncHandshakeCallback(IAsyncResult asyncResult); // 0x1004FFC74
	internal bool get_MightNeedHandshake(); // 0x100500834
	internal void NegotiateHandshake(); // 0x1005008E8
	internal abstract IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state); // 0
	internal abstract void OnNegotiateHandshakeCallback(IAsyncResult asyncResult); // 0
	internal abstract X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates); // 0
	internal abstract bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors); // 0
	internal abstract ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection); // 0
	internal abstract bool get_HaveRemoteValidation2Callback(); // 0
	internal abstract AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost); // 0
	internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, string targetHost, X509CertificateCollection requestedCertificates); // 0x1004FF4FC
	internal bool RaiseRemoteCertificateValidation(X509Certificate certificate, int[] errors); // 0x1004FF3D8
	internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection); // 0x1004FF49C
	internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, string targetHost); // 0x1004FF58C
	public bool get_CheckCertRevocationStatus(); // 0x100500DBC
	public void set_CheckCertRevocationStatus(bool value); // 0x1004F9460
	public CipherAlgorithmType get_CipherAlgorithm(); // 0x100500DC4
	public int get_CipherStrength(); // 0x100500E08
	public HashAlgorithmType get_HashAlgorithm(); // 0x100500E4C
	public int get_HashStrength(); // 0x100500E90
	public int get_KeyExchangeStrength(); // 0x100500EF8
	public ExchangeAlgorithmType get_KeyExchangeAlgorithm(); // 0x100500FC8
	public SecurityProtocolType get_SecurityProtocol(); // 0x10050100C
	public X509Certificate get_ServerCertificate(); // 0x100501038
	internal X509CertificateCollection get_ServerCertificates(); // 0x100501138
	private bool BeginNegotiateHandshake(InternalAsyncResult asyncResult); // 0x100500A8C
	private void EndNegotiateHandshake(InternalAsyncResult asyncResult); // 0x100500D14
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x1005012F4
	private void InternalBeginRead(InternalAsyncResult asyncResult); // 0x100500308
	private void InternalReadCallback(IAsyncResult result); // 0x10050161C
	private void InternalBeginWrite(InternalAsyncResult asyncResult); // 0x100500060
	private void InternalWriteCallback(IAsyncResult ar); // 0x100502184
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x10050237C
	public override int EndRead(IAsyncResult asyncResult); // 0x10050256C
	public override void EndWrite(IAsyncResult asyncResult); // 0x1005027C8
	public override void Close(); // 0x1005029B4
	public override void Flush(); // 0x1005029BC
	public int Read(byte[] buffer); // 0x100502A18
	public override int Read(byte[] buffer, int offset, int count); // 0x100502A88
	public override long Seek(long offset, SeekOrigin origin); // 0x10050365C
	public override void SetLength(long value); // 0x1005036B0
	public void Write(byte[] buffer); // 0x100503704
	public override void Write(byte[] buffer, int offset, int count); // 0x100503774
	public override bool get_CanRead(); // 0x100503B48
	public override bool get_CanSeek(); // 0x100503B9C
	public override bool get_CanWrite(); // 0x100503BA4
	public override long get_Length(); // 0x100503BF8
	public override long get_Position(); // 0x100503C4C
	public override void set_Position(long value); // 0x100503CA0
	protected override void Finalize(); // 0x1004FEC0C
	protected override void Dispose(bool disposing); // 0x1004FEA88
	private void resetBuffer(); // 0x100501568
	internal void checkDisposed(); // 0x1005014E4
}

// Namespace: 
private class InternalAsyncResult : IAsyncResult // TypeDefIndex: 1156
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private bool completed; // 0x38
	private int _bytesRead; // 0x3C
	private bool _fromWrite; // 0x40
	private bool _proceedAfterHandshake; // 0x41
	private byte[] _buffer; // 0x48
	private int _offset; // 0x50
	private int _count; // 0x54

	// Methods
	public void .ctor(AsyncCallback userCallback, object userState, byte[] buffer, int offset, int count, bool fromWrite, bool proceedAfterHandshake); // 0x1005009D0
	public bool get_ProceedAfterHandshake(); // 0x100500050
	public bool get_FromWrite(); // 0x100500058
	public byte[] get_Buffer(); // 0x1005015FC
	public int get_Offset(); // 0x100501604
	public int get_Count(); // 0x100501560
	public int get_BytesRead(); // 0x1005027C0
	public object get_AsyncState(); // 0x100503CF4
	public Exception get_AsyncException(); // 0x1005012EC
	public bool get_CompletedWithError(); // 0x100501288
	public WaitHandle get_AsyncWaitHandle(); // 0x1005011A8
	public bool get_IsCompleted(); // 0x100501160
	private void SetComplete(Exception ex, int bytesRead); // 0x100503CFC
	public void SetComplete(Exception ex); // 0x10050082C
	public void SetComplete(int bytesRead); // 0x10050160C
	public void SetComplete(); // 0x100500820
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsCipherSuite : CipherSuite // TypeDefIndex: 1157
{
	// Fields
	private byte[] header; // 0x80
	private object headerLock; // 0x88

	// Methods
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize); // 0x1004F11D0
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment); // 0x100503DF0
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment); // 0x100504084
	public override void ComputeMasterSecret(byte[] preMasterSecret); // 0x100504318
	public override void ComputeKeys(); // 0x1005043D0
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsClientSettings // TypeDefIndex: 1158
{
	// Fields
	private string targetHost; // 0x10
	private X509CertificateCollection certificates; // 0x18
	private X509Certificate clientCertificate; // 0x20
	private RSAManaged certificateRSA; // 0x28

	// Methods
	public void .ctor(); // 0x1004F4224
	public string get_TargetHost(); // 0x1004F3B14
	public void set_TargetHost(string value); // 0x1004F1E70
	public X509CertificateCollection get_Certificates(); // 0x1004F4C30
	public void set_Certificates(X509CertificateCollection value); // 0x1004F1E68
	public X509Certificate get_ClientCertificate(); // 0x1004F5440
	public void set_ClientCertificate(X509Certificate value); // 0x1004F4CBC
	public void UpdateCertificateRSA(); // 0x100504778
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsException : Exception // TypeDefIndex: 1159
{
	// Fields
	private Alert alert; // 0x60

	// Methods
	internal void .ctor(string message); // 0x1004F86CC
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0x100504968
	internal void .ctor(AlertLevel level, AlertDescription description); // 0x1004FB8BC
	internal void .ctor(AlertLevel level, AlertDescription description, string message); // 0x100504970
	internal void .ctor(AlertDescription description); // 0x1004FB32C
	internal void .ctor(AlertDescription description, string message); // 0x1004F2DA4
	public Alert get_Alert(); // 0x1004FEED8
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsServerSettings // TypeDefIndex: 1160
{
	// Fields
	private X509CertificateCollection certificates; // 0x10
	private RSA certificateRSA; // 0x18
	private RSAParameters rsaParameters; // 0x20
	private byte[] signedParams; // 0x60
	private string[] distinguisedNames; // 0x68
	private bool serverKeyExchange; // 0x70
	private bool certificateRequest; // 0x71
	private ClientCertificateType[] certificateTypes; // 0x78

	// Methods
	public void .ctor(); // 0x1004F421C
	public bool get_ServerKeyExchange(); // 0x1004F684C
	public void set_ServerKeyExchange(bool value); // 0x1004F8D5C
	public X509CertificateCollection get_Certificates(); // 0x1004F4C38
	public void set_Certificates(X509CertificateCollection value); // 0x1004F68F8
	public RSA get_CertificateRSA(); // 0x1004F6878
	public RSAParameters get_RsaParameters(); // 0x1004F6854
	public void set_RsaParameters(RSAParameters value); // 0x1004F8D64
	public void set_SignedParams(byte[] value); // 0x1004F8D78
	public bool get_CertificateRequest(); // 0x1004FF308
	public void set_CertificateRequest(bool value); // 0x1004F7F04
	public void set_CertificateTypes(ClientCertificateType[] value); // 0x1004F7EF4
	public void set_DistinguisedNames(string[] value); // 0x1004F7EFC
	public void UpdateCertificateRSA(); // 0x1004F6900
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsStream : Stream // TypeDefIndex: 1161
{
	// Fields
	private bool canRead; // 0x18
	private bool canWrite; // 0x19
	private MemoryStream buffer; // 0x20
	private byte[] temp; // 0x28

	// Methods
	public void .ctor(); // 0x1004EF88C
	public void .ctor(byte[] data); // 0x1004F8EF8
	public bool get_EOF(); // 0x1004FAB58
	public override bool get_CanWrite(); // 0x100504A04
	public override bool get_CanRead(); // 0x100504A0C
	public override bool get_CanSeek(); // 0x100504A14
	public override long get_Position(); // 0x100504A68
	public override void set_Position(long value); // 0x100504ABC
	public override long get_Length(); // 0x100504B20
	private byte[] ReadSmallValue(int length); // 0x100504B74
	public byte ReadByte(); // 0x1004F2464
	public short ReadInt16(); // 0x1004F81D4
	public int ReadInt24(); // 0x1004F24A4
	public byte[] ReadBytes(int count); // 0x1004F6C30
	public void Write(byte value); // 0x1004F6508
	public void Write(short value); // 0x1004F59B0
	public void WriteInt24(int value); // 0x1004F29CC
	public void Write(int value); // 0x1004F63C4
	public void Write(byte[] buffer); // 0x1004EF924
	public void Reset(); // 0x1004EF9E8
	public byte[] ToArray(); // 0x1004EF994
	public override void Flush(); // 0x100504CE8
	public override void SetLength(long length); // 0x100504D3C
	public override long Seek(long offset, SeekOrigin loc); // 0x100504DA0
	public override int Read(byte[] buffer, int offset, int count); // 0x100504E0C
	public override void Write(byte[] buffer, int offset, int count); // 0x100504EE8
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal sealed class ClientCertificateType : Enum // TypeDefIndex: 1162
{
	// Fields
	public int value__; // 0x10
	public const ClientCertificateType RSA = 1; // 0x0
	public const ClientCertificateType DSS = 2; // 0x0
	public const ClientCertificateType RSAFixed = 3; // 0x0
	public const ClientCertificateType DSSFixed = 4; // 0x0
	public const ClientCertificateType Unknown = 255; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal abstract class HandshakeMessage : TlsStream // TypeDefIndex: 1163
{
	// Fields
	private Context context; // 0x30
	private HandshakeType handshakeType; // 0x38
	private ContentType contentType; // 0x39
	private byte[] cache; // 0x40

	// Methods
	public void .ctor(Context context, HandshakeType handshakeType); // 0x1004F496C
	public void .ctor(Context context, HandshakeType handshakeType, ContentType contentType); // 0x1004F8EB8
	public void .ctor(Context context, HandshakeType handshakeType, byte[] data); // 0x1004F6880
	public Context get_Context(); // 0x1004F4C28
	public HandshakeType get_HandshakeType(); // 0x1004F8FAC
	public ContentType get_ContentType(); // 0x1004F8FB4
	protected abstract void ProcessAsTls1(); // 0
	protected abstract void ProcessAsSsl3(); // 0
	public void Process(); // 0x1004F28D4
	public virtual void Update(); // 0x1004F4B84
	public virtual byte[] EncodeMessage(); // 0x1004F8FBC
	public static bool Compare(byte[] buffer1, byte[] buffer2); // 0x1004F84D0
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal sealed class HandshakeType : Enum // TypeDefIndex: 1164
{
	// Fields
	public byte value__; // 0x10
	public const HandshakeType HelloRequest = 0; // 0x0
	public const HandshakeType ClientHello = 1; // 0x0
	public const HandshakeType ServerHello = 2; // 0x0
	public const HandshakeType Certificate = 11; // 0x0
	public const HandshakeType ServerKeyExchange = 12; // 0x0
	public const HandshakeType CertificateRequest = 13; // 0x0
	public const HandshakeType ServerHelloDone = 14; // 0x0
	public const HandshakeType CertificateVerify = 15; // 0x0
	public const HandshakeType ClientKeyExchange = 16; // 0x0
	public const HandshakeType Finished = 20; // 0x0
	public const HandshakeType None = 255; // 0x0

}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificate : HandshakeMessage // TypeDefIndex: 1165
{
	// Fields
	private bool clientCertSelected; // 0x48
	private X509Certificate clientCert; // 0x50

	// Methods
	public void .ctor(Context context); // 0x1004F2B1C
	public X509Certificate get_ClientCertificate(); // 0x1004F49AC
	public override void Update(); // 0x1004F4B60
	private void GetClientCertificate(); // 0x1004F49E4
	private void SendCertificates(); // 0x1004F4CC4
	protected override void ProcessAsSsl3(); // 0x1004F50D4
	protected override void ProcessAsTls1(); // 0x1004F5120
	private X509Certificate FindParentCertificate(X509Certificate cert); // 0x1004F4DF4
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificateVerify : HandshakeMessage // TypeDefIndex: 1166
{
	// Methods
	public void .ctor(Context context); // 0x1004F2B7C
	public override void Update(); // 0x1004F5174
	protected override void ProcessAsSsl3(); // 0x1004F5198
	protected override void ProcessAsTls1(); // 0x1004F5AAC
	private RSA getClientCertRSA(RSA privKey); // 0x1004F5720
	private byte[] getUnsignedBigInteger(byte[] integer); // 0x1004F5D4C
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientFinished : HandshakeMessage // TypeDefIndex: 1167
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods
	public void .ctor(Context context); // 0x1004F2BAC
	private static void .cctor(); // 0x1004F5E08
	public override void Update(); // 0x1004F5E98
	protected override void ProcessAsSsl3(); // 0x1004F5EBC
	protected override void ProcessAsTls1(); // 0x1004F6028
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientHello : HandshakeMessage // TypeDefIndex: 1168
{
	// Fields
	private byte[] random; // 0x48

	// Methods
	public void .ctor(Context context); // 0x1004F2AEC
	public override void Update(); // 0x1004F60F8
	protected override void ProcessAsSsl3(); // 0x1004F617C
	protected override void ProcessAsTls1(); // 0x1004F61C8
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientKeyExchange : HandshakeMessage // TypeDefIndex: 1169
{
	// Methods
	public void .ctor(Context context); // 0x1004F2B4C
	protected override void ProcessAsSsl3(); // 0x1004F65E0
	protected override void ProcessAsTls1(); // 0x1004F6844
	public void ProcessCommon(bool sendLength); // 0x1004F65E8
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificate : HandshakeMessage // TypeDefIndex: 1170
{
	// Fields
	private X509CertificateCollection certificates; // 0x48

	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2C9C
	public override void Update(); // 0x1004F68BC
	protected override void ProcessAsSsl3(); // 0x1004F6AE0
	protected override void ProcessAsTls1(); // 0x1004F6B2C
	private bool checkCertificateUsage(X509Certificate cert); // 0x1004F743C
	private void validateCertificates(X509CertificateCollection certificates); // 0x1004F6D10
	private bool checkServerIdentity(X509Certificate cert); // 0x1004F77CC
	private bool checkDomainName(string subjectName); // 0x1004F7CE8
	private static bool Match(string hostname, string pattern); // 0x1004F79C8
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificateRequest : HandshakeMessage // TypeDefIndex: 1171
{
	// Fields
	private ClientCertificateType[] certificateTypes; // 0x48
	private string[] distinguisedNames; // 0x50

	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2D08
	public override void Update(); // 0x1004F7EA8
	protected override void ProcessAsSsl3(); // 0x1004F7F0C
	protected override void ProcessAsTls1(); // 0x1004F7F58
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerFinished : HandshakeMessage // TypeDefIndex: 1172
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2D70
	private static void .cctor(); // 0x1004F8234
	public override void Update(); // 0x1004F82C4
	protected override void ProcessAsSsl3(); // 0x1004F82F8
	protected override void ProcessAsTls1(); // 0x1004F8580
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHello : HandshakeMessage // TypeDefIndex: 1173
{
	// Fields
	private SecurityCompressionType compressionMethod; // 0x48
	private byte[] random; // 0x50
	private byte[] sessionId; // 0x58
	private CipherSuite cipherSuite; // 0x60

	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2C68
	public override void Update(); // 0x1004F86D4
	protected override void ProcessAsSsl3(); // 0x1004F888C
	protected override void ProcessAsTls1(); // 0x1004F88D8
	private void processProtocol(short protocol); // 0x1004F8A64
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHelloDone : HandshakeMessage // TypeDefIndex: 1174
{
	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2D3C
	protected override void ProcessAsSsl3(); // 0x1004F8B40
	protected override void ProcessAsTls1(); // 0x1004F8B44
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerKeyExchange : HandshakeMessage // TypeDefIndex: 1175
{
	// Fields
	private RSAParameters rsaParams; // 0x48
	private byte[] signedParams; // 0x88

	// Methods
	public void .ctor(Context context, byte[] buffer); // 0x1004F2CD0
	public override void Update(); // 0x1004F8CC0
	protected override void ProcessAsSsl3(); // 0x1004F8D80
	protected override void ProcessAsTls1(); // 0x1004F8DCC
	private void verifySignature(); // 0x1004F8B48
}

// Namespace: Mono.Math.Prime
public sealed class PrimalityTest : MulticastDelegate // TypeDefIndex: 1176
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004E2C08
	public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence); // 0x1004E3084
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object); // 0x1004E314C
	public virtual bool EndInvoke(IAsyncResult result); // 0x1004E3214
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback : MulticastDelegate // TypeDefIndex: 1177
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004EE024
	public virtual bool Invoke(X509Certificate certificate, int[] certificateErrors); // 0x1004EE034
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, int[] certificateErrors, AsyncCallback callback, object object); // 0x1004EE0F4
	public virtual bool EndInvoke(IAsyncResult result); // 0x1004EE150
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback2 : MulticastDelegate // TypeDefIndex: 1178
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004EE17C
	public virtual ValidationResult Invoke(X509CertificateCollection collection); // 0x1004EE18C
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection collection, AsyncCallback callback, object object); // 0x1004EE228
	public virtual ValidationResult EndInvoke(IAsyncResult result); // 0x1004EE278
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateSelectionCallback : MulticastDelegate // TypeDefIndex: 1179
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004EDEB0
	public virtual X509Certificate Invoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates); // 0x1004EDEC0
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates, AsyncCallback callback, object object); // 0x1004EDFB8
	public virtual X509Certificate EndInvoke(IAsyncResult result); // 0x1004EE018
}

// Namespace: Mono.Security.Protocol.Tls
public sealed class PrivateKeySelectionCallback : MulticastDelegate // TypeDefIndex: 1180
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1004F9548
	public virtual AsymmetricAlgorithm Invoke(X509Certificate certificate, string targetHost); // 0x1004F9A90
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, string targetHost, AsyncCallback callback, object object); // 0x1004F9B50
	public virtual AsymmetricAlgorithm EndInvoke(IAsyncResult result); // 0x1004F9BAC
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 1181
{
	// Fields
	internal static $ArrayType$3132 $$field-0; // 0x0
	internal static $ArrayType$256 $$field-5; // 0xC3C
	internal static $ArrayType$20 $$field-6; // 0xD3C
	internal static $ArrayType$32 $$field-7; // 0xD50
	internal static $ArrayType$48 $$field-8; // 0xD70
	internal static $ArrayType$64 $$field-9; // 0xDA0
	internal static $ArrayType$64 $$field-11; // 0xDE0
	internal static $ArrayType$64 $$field-12; // 0xE20
	internal static $ArrayType$64 $$field-13; // 0xE60
	internal static $ArrayType$12 $$field-14; // 0xEA0
	internal static $ArrayType$12 $$field-15; // 0xEAC
	internal static $ArrayType$12 $$field-16; // 0xEB8
	internal static $ArrayType$16 $$field-17; // 0xEC4
	internal static $ArrayType$4 $$field-21; // 0xED4
	internal static $ArrayType$4 $$field-22; // 0xED8

}

// Namespace: 
private struct $ArrayType$3132 // TypeDefIndex: 1182
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 1183
{
}

// Namespace: 
private struct $ArrayType$20 // TypeDefIndex: 1184
{
}

// Namespace: 
private struct $ArrayType$32 // TypeDefIndex: 1185
{
}

// Namespace: 
private struct $ArrayType$48 // TypeDefIndex: 1186
{
}

// Namespace: 
private struct $ArrayType$64 // TypeDefIndex: 1187
{
}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 1188
{
}

// Namespace: 
private struct $ArrayType$16 // TypeDefIndex: 1189
{
}

// Namespace: 
private struct $ArrayType$4 // TypeDefIndex: 1190
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1191
{
}

// Namespace: System.Configuration.Internal
public interface IConfigErrorInfo // TypeDefIndex: 1192
{
	// Methods
	public abstract string get_Filename(); // 0
	public abstract int get_LineNumber(); // 0
}

// Namespace: System.Configuration.Internal
public interface IConfigSystem // TypeDefIndex: 1193
{
	// Methods
	public abstract IInternalConfigHost get_Host(); // 0
}

// Namespace: System.Configuration.Internal
public interface IInternalConfigConfigurationFactory // TypeDefIndex: 1194
{
	// Methods
	public abstract Configuration Create(Type typeConfigHost, object[] hostInitConfigurationParams); // 0
}

// Namespace: System.Configuration.Internal
public interface IInternalConfigHost // TypeDefIndex: 1195
{
	// Methods
	public abstract object CreateDeprecatedConfigContext(string configPath); // 0
	public abstract string GetConfigPathFromLocationSubPath(string configPath, string locatinSubPath); // 0
	public abstract Type GetConfigType(string typeName, bool throwOnError); // 0
	public abstract string GetStreamName(string configPath); // 0
	public abstract void InitForConfiguration(string locationSubPath, out string configPath, out string locationConfigPath, IInternalConfigRoot root, object[] hostInitConfigurationParams); // 0
	public abstract bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition); // 0
	public abstract Stream OpenStreamForRead(string streamName); // 0
}

// Namespace: System.Configuration.Internal
public interface IInternalConfigRoot // TypeDefIndex: 1196
{
	// Methods
	public abstract void Init(IInternalConfigHost host, bool isDesignTime); // 0
}

// Namespace: System.Configuration.Internal
public interface IInternalConfigSystem // TypeDefIndex: 1197
{
	// Methods
	public abstract object GetSection(string configKey); // 0
}

// Namespace: System.Configuration.Provider
public abstract class ProviderBase // TypeDefIndex: 1198
{
	// Fields
	private bool alreadyInitialized; // 0x10
	private string _description; // 0x18
	private string _name; // 0x20

	// Methods
	public virtual void Initialize(string name, NameValueCollection config); // 0x1005B88CC
	public virtual string get_Name(); // 0x1005B8A80
}

// Namespace: System.Configuration.Provider
public class ProviderCollection : ICollection, IEnumerable // TypeDefIndex: 1199
{
	// Fields
	private Hashtable lookup; // 0x10
	private bool readOnly; // 0x18
	private ArrayList values; // 0x20

	// Methods
	public void .ctor(); // 0x1005B7E34
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1005B8A88
	public virtual void Add(ProviderBase provider); // 0x1005B8014
	public IEnumerator GetEnumerator(); // 0x1005B8AF8
	public int get_Count(); // 0x1005B8B50
	public bool get_IsSynchronized(); // 0x1005B8BA4
	public object get_SyncRoot(); // 0x1005B8BAC
	public ProviderBase get_Item(string name); // 0x1005B7F00
}

// Namespace: System.Configuration
internal class ClientConfigurationSystem : IInternalConfigSystem // TypeDefIndex: 1200
{
	// Fields
	private Configuration cfg; // 0x10

	// Methods
	public void .ctor(); // 0x1005A5B10
	private object System.Configuration.Internal.IInternalConfigSystem.GetSection(string configKey); // 0x1005A5B18
	private Configuration get_Configuration(); // 0x1005A5B94
}

// Namespace: System.Configuration
internal class ConfigNameValueCollection : NameValueCollection // TypeDefIndex: 1201
{
	// Fields
	private bool modified; // 0x68

	// Methods
	public void .ctor(); // 0x1005A6688
	public void .ctor(ConfigNameValueCollection col); // 0x1005A6690
	public void ResetModified(); // 0x1005A66F4
	public bool get_IsModified(); // 0x1005A66FC
	public override void Set(string name, string value); // 0x1005A6704
}

// Namespace: System.Configuration
internal abstract class ConfigInfo // TypeDefIndex: 1202
{
	// Fields
	public string Name; // 0x10
	public string TypeName; // 0x18
	protected Type Type; // 0x20
	private string streamName; // 0x28
	public ConfigInfo Parent; // 0x30
	public IInternalConfigHost ConfigHost; // 0x38

	// Methods
	protected void .ctor(); // 0x1005A6348
	public virtual object CreateInstance(); // 0x1005A6350
	public void set_StreamName(string value); // 0x1005A6470
	protected void ThrowException(string text, XmlReader reader); // 0x1005A6478
	public abstract void ReadConfig(Configuration cfg, string streamName, XmlReader reader); // 0
	public abstract void ReadData(Configuration config, XmlReader reader, bool overrideAllowed); // 0
	internal abstract void Merge(ConfigInfo data); // 0
}

// Namespace: System.Configuration
public sealed class Configuration // TypeDefIndex: 1203
{
	// Fields
	private Configuration parent; // 0x10
	private Hashtable elementData; // 0x18
	private string streamName; // 0x20
	private ConfigurationSectionGroup rootSectionGroup; // 0x28
	private ConfigurationLocationCollection locations; // 0x30
	private SectionGroupInfo rootGroup; // 0x38
	private IConfigSystem system; // 0x40
	private bool hasFile; // 0x48
	private string rootNamespace; // 0x50
	private string configPath; // 0x58
	private string locationConfigPath; // 0x60
	private string locationSubPath; // 0x68

	// Methods
	internal void .ctor(Configuration parent, string locationSubPath); // 0x1005A6730
	internal void .ctor(InternalConfigurationSystem system, string locationSubPath); // 0x1005A67DC
	internal Configuration FindLocationConfiguration(string relativePath, Configuration defaultConfiguration); // 0x1005A6A24
	internal void Init(IConfigSystem system, string configPath, Configuration parent); // 0x1005A6D04
	internal Configuration get_Parent(); // 0x1005A79A4
	internal void set_Parent(Configuration value); // 0x1005A79AC
	internal Configuration GetParentWithFile(); // 0x1005A6EEC
	internal IInternalConfigHost get_ConfigHost(); // 0x1005A79BC
	internal string get_LocationConfigPath(); // 0x1005A6EE4
	internal string get_ConfigPath(); // 0x1005A67D4
	public string get_FilePath(); // 0x1005A7AAC
	public bool get_HasFile(); // 0x1005A79B4
	public ConfigurationLocationCollection get_Locations(); // 0x1005A6F00
	public ConfigurationSectionGroup get_RootSectionGroup(); // 0x1005A7ACC
	public ConfigurationSectionGroupCollection get_SectionGroups(); // 0x1005A7C34
	public ConfigurationSectionCollection get_Sections(); // 0x1005A7CD8
	public ConfigurationSection GetSection(string path); // 0x1005A5CBC
	internal ConfigurationSection GetSectionInstance(SectionInfo config, bool createDefaultInstance); // 0x1005A7FC4
	internal ConfigurationSectionGroup GetSectionGroupInstance(SectionGroupInfo group); // 0x1005A8840
	internal void SetSectionXml(SectionInfo config, string data); // 0x1005A8910
	internal string GetSectionXml(SectionInfo config); // 0x1005A897C
	private bool Load(); // 0x1005A7628
	private void ReadConfigFile(XmlReader reader, string fileName); // 0x1005A8A18
	internal void ReadData(XmlReader reader, bool allowOverride); // 0x1005A9008
	private void ThrowException(string text, XmlReader reader); // 0x1005A8E64
}

// Namespace: System.Configuration
public sealed class ConfigurationAllowDefinition : Enum // TypeDefIndex: 1204
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationAllowDefinition MachineOnly = 0; // 0x0
	public const ConfigurationAllowDefinition MachineToWebRoot = 100; // 0x0
	public const ConfigurationAllowDefinition MachineToApplication = 200; // 0x0
	public const ConfigurationAllowDefinition Everywhere = 300; // 0x0

}

// Namespace: System.Configuration
public sealed class ConfigurationAllowExeDefinition : Enum // TypeDefIndex: 1205
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationAllowExeDefinition MachineOnly = 0; // 0x0
	public const ConfigurationAllowExeDefinition MachineToApplication = 100; // 0x0
	public const ConfigurationAllowExeDefinition MachineToLocalUser = 300; // 0x0
	public const ConfigurationAllowExeDefinition MachineToRoamingUser = 200; // 0x0

}

// Namespace: System.Configuration
public sealed class ConfigurationCollectionAttribute : Attribute // TypeDefIndex: 1206
{
	// Fields
	private string addItemName; // 0x10
	private string clearItemsName; // 0x18
	private string removeItemName; // 0x20
	private ConfigurationElementCollectionType collectionType; // 0x28
	private Type itemType; // 0x30

	// Methods
	public void .ctor(Type itemType); // 0x1005A9084
	public string get_AddItemName(); // 0x1005A9110
	public string get_ClearItemsName(); // 0x1005A9118
	public string get_RemoveItemName(); // 0x1005A9120
	public void set_CollectionType(ConfigurationElementCollectionType value); // 0x1005A9128
}

// Namespace: System.Configuration
public abstract class ConfigurationElement // TypeDefIndex: 1207
{
	// Fields
	private string rawXml; // 0x10
	private bool modified; // 0x18
	private ElementMap map; // 0x20
	private ConfigurationPropertyCollection keyProps; // 0x28
	private ConfigurationElementCollection defaultCollection; // 0x30
	private bool readOnly; // 0x38
	private ElementInformation elementInfo; // 0x40
	private Configuration _configuration; // 0x48
	private ConfigurationLockCollection lockAllAttributesExcept; // 0x50
	private ConfigurationLockCollection lockAllElementsExcept; // 0x58
	private ConfigurationLockCollection lockAttributes; // 0x60
	private ConfigurationLockCollection lockElements; // 0x68
	private bool lockItem; // 0x70

	// Methods
	protected void .ctor(); // 0x1005A9130
	internal Configuration get_Configuration(); // 0x1005A9138
	internal void set_Configuration(Configuration value); // 0x1005A850C
	internal virtual void InitFromProperty(PropertyInformation propertyInfo); // 0x1005A9140
	public ElementInformation get_ElementInformation(); // 0x1005A95B0
	internal string get_RawXml(); // 0x1005A9620
	internal void set_RawXml(string value); // 0x1005A85B4
	protected internal virtual void Init(); // 0x1005A9628
	public ConfigurationLockCollection get_LockAllAttributesExcept(); // 0x1005A962C
	public ConfigurationLockCollection get_LockAllElementsExcept(); // 0x1005A971C
	public ConfigurationLockCollection get_LockAttributes(); // 0x1005A978C
	public ConfigurationLockCollection get_LockElements(); // 0x1005A97FC
	public void set_LockItem(bool value); // 0x1005A986C
	protected void SetPropertyValue(ConfigurationProperty prop, object value, bool ignoreLocks); // 0x1005A9874
	internal ConfigurationPropertyCollection GetKeyProperties(); // 0x1005A9A64
	internal ConfigurationElementCollection GetDefaultCollection(); // 0x1005A9F7C
	protected internal object get_Item(ConfigurationProperty property); // 0x1005AA358
	protected internal void set_Item(ConfigurationProperty property, object value); // 0x1005AA454
	protected internal object get_Item(string property_name); // 0x1005AA370
	protected internal void set_Item(string property_name, object value); // 0x1005AA46C
	protected internal virtual ConfigurationPropertyCollection get_Properties(); // 0x1005AA7C0
	public override bool Equals(object compareTo); // 0x1005AA9A0
	public override int GetHashCode(); // 0x1005AADAC
	internal virtual bool HasValues(); // 0x1005AB14C
	internal virtual bool HasLocalModifications(); // 0x1005AB4D8
	protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey); // 0x1005AB870
	protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value); // 0x1005ACDC0
	protected virtual bool OnDeserializeUnrecognizedElement(string element, XmlReader reader); // 0x1005ACDC8
	protected virtual object OnRequiredPropertyNotFound(string name); // 0x1005ACDD0
	protected virtual void PreSerialize(XmlWriter writer); // 0x1005ACE7C
	protected virtual void PostDeserialize(); // 0x1005ACE80
	protected internal virtual void InitializeDefault(); // 0x1005ACE84
	protected internal virtual bool IsModified(); // 0x1005ACE88
	protected internal virtual void SetReadOnly(); // 0x1005ACE90
	public virtual bool IsReadOnly(); // 0x1005ACE9C
	protected internal virtual void Reset(ConfigurationElement parentElement); // 0x1005ACEA4
	protected internal virtual void ResetModified(); // 0x1005AD2CC
	protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey); // 0x1005AD62C
	protected internal virtual bool SerializeToXmlElement(XmlWriter writer, string elementName); // 0x1005AE1E4
	protected internal virtual void Unmerge(ConfigurationElement source, ConfigurationElement parent, ConfigurationSaveMode updateMode); // 0x1005AE368
	internal bool HasValue(string propName); // 0x1005AE918
	private void ValidateValue(ConfigurationProperty p, string value); // 0x1005ACBB0
}

// Namespace: System.Configuration
internal class ElementMap // TypeDefIndex: 1208
{
	// Fields
	private static readonly Hashtable elementMaps; // 0x0
	private readonly ConfigurationPropertyCollection properties; // 0x10
	private readonly ConfigurationCollectionAttribute collectionAttribute; // 0x18

	// Methods
	public void .ctor(Type t); // 0x1005B61C8
	private static void .cctor(); // 0x1005B66EC
	public static ElementMap GetMap(Type t); // 0x1005AA850
	public ConfigurationPropertyCollection get_Properties(); // 0x1005AA998
}

// Namespace: System.Configuration
public abstract class ConfigurationElementCollection : ConfigurationElement, ICollection, IEnumerable // TypeDefIndex: 1209
{
	// Fields
	private ArrayList list; // 0x78
	private ArrayList removed; // 0x80
	private ArrayList inherited; // 0x88
	private bool emitClear; // 0x90
	private bool modified; // 0x91
	private IComparer comparer; // 0x98
	private int inheritedLimitIndex; // 0xA0
	private string addElementName; // 0xA8
	private string clearElementName; // 0xB0
	private string removeElementName; // 0xB8

	// Methods
	protected void .ctor(); // 0x1005AE9F0
	private void System.Collections.ICollection.CopyTo(Array arr, int index); // 0x1005AEA88
	internal override void InitFromProperty(PropertyInformation propertyInfo); // 0x1005AEAF8
	public virtual ConfigurationElementCollectionType get_CollectionType(); // 0x1005AEC14
	private bool get_IsBasic(); // 0x1005AEC1C
	private bool get_IsAlternate(); // 0x1005AEC9C
	public int get_Count(); // 0x1005AED20
	protected virtual string get_ElementName(); // 0x1005AED74
	public void set_EmitClear(bool value); // 0x1005AEDDC
	public bool get_IsSynchronized(); // 0x1005AEDE4
	public object get_SyncRoot(); // 0x1005AEDEC
	protected virtual bool get_ThrowOnDuplicate(); // 0x1005AEDF0
	protected internal string get_AddElementName(); // 0x1005AEE78
	protected internal string get_ClearElementName(); // 0x1005AEE80
	protected internal string get_RemoveElementName(); // 0x1005AEE88
	protected virtual void BaseAdd(ConfigurationElement element); // 0x1005AEE90
	protected void BaseAdd(ConfigurationElement element, bool throwIfExists); // 0x1005AEEE8
	protected internal void BaseClear(); // 0x1005AF2FC
	protected internal ConfigurationElement BaseGet(int index); // 0x1005AF3D0
	protected internal ConfigurationElement BaseGet(object key); // 0x1005AF45C
	protected int BaseIndexOf(ConfigurationElement element); // 0x1005AF50C
	private int IndexOfKey(object key); // 0x1005AF140
	protected internal void BaseRemove(object key); // 0x1005AF6A0
	protected internal void BaseRemoveAt(int index); // 0x1005AF76C
	private bool CompareKeys(object key1, object key2); // 0x1005AF574
	protected abstract ConfigurationElement CreateNewElement(); // 0
	protected virtual ConfigurationElement CreateNewElement(string elementName); // 0x1005AF944
	private ConfigurationElement CreateNewElementInternal(string elementName); // 0x1005AF994
	public override bool Equals(object compareTo); // 0x1005AFA44
	protected abstract object GetElementKey(ConfigurationElement element); // 0
	public override int GetHashCode(); // 0x1005AFBB0
	public IEnumerator GetEnumerator(); // 0x1005AFC50
	protected virtual bool IsElementName(string elementName); // 0x1005AFCA8
	protected virtual bool IsElementRemovable(ConfigurationElement element); // 0x1005AFCB0
	protected internal override bool IsModified(); // 0x1005AFCFC
	public override bool IsReadOnly(); // 0x1005AFD04
	internal override bool HasValues(); // 0x1005AFD0C
	protected internal override void Reset(ConfigurationElement parentElement); // 0x1005AFD64
	protected internal override void ResetModified(); // 0x1005AFF14
	protected internal override void SetReadOnly(); // 0x1005AFF1C
	protected internal override bool SerializeElement(XmlWriter writer, bool serializeCollectionKey); // 0x1005AFF28
	protected override bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader); // 0x1005B0404
	protected internal override void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode updateMode); // 0x1005B0FA8
}

// Namespace: 
private sealed class ConfigurationRemoveElement : ConfigurationElement // TypeDefIndex: 1210
{
	// Fields
	private readonly ConfigurationPropertyCollection properties; // 0x78
	private readonly ConfigurationElement _origElement; // 0x80
	private readonly ConfigurationElementCollection _origCollection; // 0x88

	// Methods
	internal void .ctor(ConfigurationElement origElement, ConfigurationElementCollection origCollection); // 0x1005B0868
	internal object get_KeyValue(); // 0x1005B0C10
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B1274
}

// Namespace: System.Configuration
public sealed class ConfigurationElementCollectionType : Enum // TypeDefIndex: 1211
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationElementCollectionType BasicMap = 0; // 0x0
	public const ConfigurationElementCollectionType AddRemoveClearMap = 1; // 0x0
	public const ConfigurationElementCollectionType BasicMapAlternate = 2; // 0x0
	public const ConfigurationElementCollectionType AddRemoveClearMapAlternate = 3; // 0x0

}

// Namespace: System.Configuration
public class ConfigurationErrorsException : ConfigurationException // TypeDefIndex: 1212
{
	// Fields
	private readonly string filename; // 0x70
	private readonly int line; // 0x78

	// Methods
	public void .ctor(); // 0x1005B127C
	public void .ctor(string message); // 0x1005ACE74
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1005B1284
	public void .ctor(string message, Exception inner); // 0x1005A6340
	public void .ctor(string message, XmlNode node); // 0x1005B1338
	public void .ctor(string message, XmlReader reader); // 0x1005A64DC
	public void .ctor(string message, Exception inner, string filename, int line); // 0x1005B172C
	public override string get_BareMessage(); // 0x1005B1BF0
	public override string get_Message(); // 0x1005B1BF8
	public static string GetFilename(XmlReader reader); // 0x1005B1768
	public static int GetLineNumber(XmlReader reader); // 0x1005B1978
	public static string GetFilename(XmlNode node); // 0x1005B1398
	public static int GetLineNumber(XmlNode node); // 0x1005B1560
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1005B20E4
}

// Namespace: System.Configuration
public class ConfigurationFileMap : ICloneable // TypeDefIndex: 1213
{
	// Fields
	private string machineConfigFilename; // 0x10

	// Methods
	public void .ctor(); // 0x1005B2194
	public void .ctor(string machineConfigFilename); // 0x1005B21C8
	public string get_MachineConfigFilename(); // 0x1005B21F4
	public void set_MachineConfigFilename(string value); // 0x1005B21FC
	public virtual object Clone(); // 0x1005B2204
}

// Namespace: System.Configuration
public class ConfigurationLocation // TypeDefIndex: 1214
{
	// Fields
	private static readonly char[] pathTrimChars; // 0x0
	private string path; // 0x10
	private Configuration configuration; // 0x18
	private Configuration parent; // 0x20
	private string xmlContent; // 0x28
	private bool parentResolved; // 0x30
	private bool allowOverride; // 0x31

	// Methods
	internal void .ctor(string path, string xmlContent, Configuration parent, bool allowOverride); // 0x1005B226C
	private static void .cctor(); // 0x1005B23BC
	public string get_Path(); // 0x1005B2450
	public Configuration OpenConfiguration(); // 0x1005A72F0
	internal void SetParentConfiguration(Configuration parent); // 0x1005A72D4
}

// Namespace: System.Configuration
public class ConfigurationLocationCollection : ReadOnlyCollectionBase // TypeDefIndex: 1215
{
	// Methods
	internal void .ctor(); // 0x1005A7AC4
	internal void Add(ConfigurationLocation loc); // 0x1005B2458
	internal ConfigurationLocation Find(string location); // 0x1005A6F6C
}

// Namespace: System.Configuration
internal sealed class ConfigurationLockType : Enum // TypeDefIndex: 1216
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationLockType Attribute = 1; // 0x0
	public const ConfigurationLockType Element = 2; // 0x0
	public const ConfigurationLockType Exclude = 16; // 0x0

}

// Namespace: System.Configuration
public sealed class ConfigurationLockCollection : ICollection, IEnumerable // TypeDefIndex: 1217
{
	// Fields
	private ArrayList names; // 0x10
	private ConfigurationElement element; // 0x18
	private ConfigurationLockType lockType; // 0x20
	private bool is_modified; // 0x24
	private Hashtable valid_name_hash; // 0x28
	private string valid_names; // 0x30

	// Methods
	internal void .ctor(ConfigurationElement element, ConfigurationLockType lockType); // 0x1005A969C
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1005B24C4
	private void CheckName(string name); // 0x1005B2534
	public void Add(string name); // 0x1005B2EE4
	public void Clear(); // 0x1005B2F8C
	public IEnumerator GetEnumerator(); // 0x1005B2FE8
	public void SetFromList(string attributeList); // 0x1005ACA90
	public int get_Count(); // 0x1005B3040
	public bool get_IsSynchronized(); // 0x1005B3094
	public object get_SyncRoot(); // 0x1005B309C
}

// Namespace: System.Configuration
public static class ConfigurationManager // TypeDefIndex: 1218
{
	// Fields
	private static InternalConfigurationFactory configFactory; // 0x0
	private static IInternalConfigSystem configSystem; // 0x8
	private static object lockobj; // 0x10

	// Methods
	private static void .cctor(); // 0x1005B30A0
	private static string GetAssemblyInfo(Assembly a); // 0x1005B3164
	internal static Configuration OpenExeConfigurationInternal(ConfigurationUserLevel userLevel, Assembly calling_assembly, string exePath); // 0x1005A5E54
	internal static IInternalConfigConfigurationFactory get_ConfigurationFactory(); // 0x1005B35E0
	internal static IInternalConfigSystem get_ConfigurationSystem(); // 0x1005B3648
	public static object GetSection(string sectionName); // 0x1005B36B0
}

// Namespace: System.Configuration
public sealed class ConfigurationProperty // TypeDefIndex: 1219
{
	// Fields
	internal static readonly object NoDefaultValue; // 0x0
	private string name; // 0x10
	private Type type; // 0x18
	private object default_value; // 0x20
	private TypeConverter converter; // 0x28
	private ConfigurationValidatorBase validation; // 0x30
	private ConfigurationPropertyOptions flags; // 0x38
	private string description; // 0x40
	private ConfigurationCollectionAttribute collectionAttribute; // 0x48

	// Methods
	public void .ctor(string name, Type type); // 0x1005B3868
	public void .ctor(string name, Type type, object default_value); // 0x1005B3C40
	public void .ctor(string name, Type type, object default_value, ConfigurationPropertyOptions flags); // 0x1005B3D18
	public void .ctor(string name, Type type, object default_value, TypeConverter converter, ConfigurationValidatorBase validation, ConfigurationPropertyOptions flags); // 0x1005B3DFC
	public void .ctor(string name, Type type, object default_value, TypeConverter converter, ConfigurationValidatorBase validation, ConfigurationPropertyOptions flags, string description); // 0x1005B3970
	private static void .cctor(); // 0x1005B3E1C
	public object get_DefaultValue(); // 0x1005B3E88
	public bool get_IsKey(); // 0x1005A9F08
	public bool get_IsRequired(); // 0x1005B3E90
	public bool get_IsDefaultCollection(); // 0x1005AA34C
	public string get_Name(); // 0x1005A9A5C
	public Type get_Type(); // 0x1005AE968
	public ConfigurationValidatorBase get_Validator(); // 0x1005AE960
	internal object ConvertFromString(string value); // 0x1005AE970
	internal string ConvertToString(object value); // 0x1005AE0DC
	internal bool get_IsElement(); // 0x1005B2E1C
	internal ConfigurationCollectionAttribute get_CollectionAttribute(); // 0x1005AEBF0
	internal void set_CollectionAttribute(ConfigurationCollectionAttribute value); // 0x1005B3E9C
	internal void Validate(object value); // 0x1005A99E8
}

// Namespace: System.Configuration
public sealed class ConfigurationPropertyAttribute : Attribute // TypeDefIndex: 1220
{
	// Fields
	private string name; // 0x10
	private object default_value; // 0x18
	private ConfigurationPropertyOptions flags; // 0x20

	// Methods
	public void .ctor(string name); // 0x1005B3EA4
	public object get_DefaultValue(); // 0x1005B3F30
	public void set_DefaultValue(object value); // 0x1005B3F38
	public ConfigurationPropertyOptions get_Options(); // 0x1005B3F40
	public void set_Options(ConfigurationPropertyOptions value); // 0x1005B3F48
	public string get_Name(); // 0x1005B3F50
}

// Namespace: System.Configuration
public class ConfigurationPropertyCollection : ICollection, IEnumerable // TypeDefIndex: 1221
{
	// Fields
	private List`1<ConfigurationProperty> collection; // 0x10

	// Methods
	public void .ctor(); // 0x1005A9E08
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1005B3F58
	public int get_Count(); // 0x1005AE15C
	public bool get_IsSynchronized(); // 0x1005B4064
	public object get_SyncRoot(); // 0x1005B406C
	public void Add(ConfigurationProperty property); // 0x1005A9F14
	public IEnumerator GetEnumerator(); // 0x1005A9E7C
}

// Namespace: System.Configuration
public sealed class ConfigurationPropertyOptions : Enum // TypeDefIndex: 1222
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationPropertyOptions None = 0; // 0x0
	public const ConfigurationPropertyOptions IsDefaultCollection = 1; // 0x0
	public const ConfigurationPropertyOptions IsRequired = 2; // 0x0
	public const ConfigurationPropertyOptions IsKey = 4; // 0x0

}

// Namespace: System.Configuration
public sealed class ConfigurationSaveMode : Enum // TypeDefIndex: 1223
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationSaveMode Minimal = 1; // 0x0
	public const ConfigurationSaveMode Full = 2; // 0x0
	public const ConfigurationSaveMode Modified = 0; // 0x0

}

// Namespace: System.Configuration
public abstract class ConfigurationSection : ConfigurationElement // TypeDefIndex: 1224
{
	// Fields
	private SectionInformation sectionInformation; // 0x78
	private IConfigurationSectionHandler section_handler; // 0x80
	private string externalDataXml; // 0x88
	private object _configContext; // 0x90

	// Methods
	protected void .ctor(); // 0x1005B4074
	internal IConfigurationSectionHandler get_SectionHandler(); // 0x1005B407C
	internal void set_SectionHandler(IConfigurationSectionHandler value); // 0x1005A8504
	public SectionInformation get_SectionInformation(); // 0x1005A8514
	internal object get_ConfigContext(); // 0x1005B40C4
	internal void set_ConfigContext(object value); // 0x1005A85AC
	protected internal virtual object GetRuntimeObject(); // 0x1005B40CC
	protected internal override bool IsModified(); // 0x1005B4904
	protected internal override void ResetModified(); // 0x1005B490C
	private ConfigurationElement CreateElement(Type t); // 0x1005B4910
	private void DoDeserializeSection(XmlReader reader); // 0x1005B4564
	protected internal virtual void DeserializeSection(XmlReader reader); // 0x1005B4AFC
	internal void DeserializeConfigSource(string basePath); // 0x1005A85D0
	protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode); // 0x1005B4B00
}

// Namespace: System.Configuration
public sealed class ConfigurationSectionCollection : NameObjectCollectionBase // TypeDefIndex: 1225
{
	// Fields
	private SectionGroupInfo group; // 0x58
	private Configuration config; // 0x60

	// Methods
	internal void .ctor(Configuration config, SectionGroupInfo group); // 0x1005B5180
	public override KeysCollection get_Keys(); // 0x1005B5210
	public override int get_Count(); // 0x1005B52E4
	public ConfigurationSection get_Item(string name); // 0x1005A7D7C
	public override IEnumerator GetEnumerator(); // 0x1005B5344
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1005B53B8
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator`1<object>, IEnumerator, IDisposable // TypeDefIndex: 1226
{
	// Fields
	internal IEnumerator <$s_32>__0; // 0x10
	internal string <key>__1; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal ConfigurationSectionCollection <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1005B53B0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1005B540C
	private object System.Collections.IEnumerator.get_Current(); // 0x1005B5414
	public bool MoveNext(); // 0x1005B541C
	public void Dispose(); // 0x1005B5884
	public void Reset(); // 0x1005B59A0
}

// Namespace: System.Configuration
public class ConfigurationSectionGroup // TypeDefIndex: 1227
{
	// Fields
	private ConfigurationSectionCollection sections; // 0x10
	private ConfigurationSectionGroupCollection groups; // 0x18
	private Configuration config; // 0x20
	private SectionGroupInfo group; // 0x28
	private bool initialized; // 0x30

	// Methods
	public void .ctor(); // 0x1005A7B50
	private Configuration get_Config(); // 0x1005B59F4
	internal void Initialize(Configuration config, SectionGroupInfo group); // 0x1005A7B58
	public ConfigurationSectionGroupCollection get_SectionGroups(); // 0x1005A7C50
	public ConfigurationSectionCollection get_Sections(); // 0x1005A7CF4
}

// Namespace: System.Configuration
public sealed class ConfigurationSectionGroupCollection : NameObjectCollectionBase // TypeDefIndex: 1228
{
	// Fields
	private SectionGroupInfo group; // 0x58
	private Configuration config; // 0x60

	// Methods
	internal void .ctor(Configuration config, SectionGroupInfo group); // 0x1005B5A6C
	public override KeysCollection get_Keys(); // 0x1005B5AFC
	public override int get_Count(); // 0x1005B5BD0
	public ConfigurationSectionGroup get_Item(string name); // 0x1005A7EA4
	public override IEnumerator GetEnumerator(); // 0x1005B5C30
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1005B5D60
}

// Namespace: System.Configuration
public sealed class ConfigurationUserLevel : Enum // TypeDefIndex: 1229
{
	// Fields
	public int value__; // 0x10
	public const ConfigurationUserLevel None = 0; // 0x0
	public const ConfigurationUserLevel PerUserRoaming = 10; // 0x0
	public const ConfigurationUserLevel PerUserRoamingAndLocal = 20; // 0x0

}

// Namespace: System.Configuration
public class ConfigurationValidatorAttribute : Attribute // TypeDefIndex: 1230
{
	// Fields
	private Type validatorType; // 0x10
	private ConfigurationValidatorBase instance; // 0x18

	// Methods
	public virtual ConfigurationValidatorBase get_ValidatorInstance(); // 0x1005B5DB4
}

// Namespace: System.Configuration
public abstract class ConfigurationValidatorBase // TypeDefIndex: 1231
{
	// Methods
	protected void .ctor(); // 0x1005B5E1C
	public virtual bool CanValidate(Type type); // 0x1005B5E24
	public abstract void Validate(object value); // 0
}

// Namespace: 
internal class ConfigXmlTextReader : XmlTextReader, IConfigErrorInfo // TypeDefIndex: 1232
{
	// Fields
	private readonly string fileName; // 0x40

	// Methods
	public void .ctor(Stream s, string fileName); // 0x1005A59D8
	public void .ctor(TextReader input, string fileName); // 0x1005A5A70
	public string get_Filename(); // 0x1005A5B08
}

// Namespace: System.Configuration
public sealed class DefaultSection : ConfigurationSection // TypeDefIndex: 1233
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0

	// Methods
	public void .ctor(); // 0x1005A84FC
	private static void .cctor(); // 0x1005B5E2C
	protected internal override void DeserializeSection(XmlReader xmlReader); // 0x1005B5E94
	protected internal override bool IsModified(); // 0x1005B5F48
	protected internal override void Reset(ConfigurationElement parentSection); // 0x1005B5F50
	protected internal override void ResetModified(); // 0x1005B5F54
	protected internal override string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode); // 0x1005B5F58
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B5F5C
}

// Namespace: System.Configuration
public sealed class DefaultValidator : ConfigurationValidatorBase // TypeDefIndex: 1234
{
	// Methods
	public void .ctor(); // 0x1005B3968
	public override bool CanValidate(Type type); // 0x1005B5FC4
	public override void Validate(object value); // 0x1005B5FCC
}

// Namespace: System.Configuration
public sealed class ElementInformation // TypeDefIndex: 1235
{
	// Fields
	private readonly PropertyInformation propertyInfo; // 0x10
	private readonly ConfigurationElement owner; // 0x18
	private readonly PropertyInformationCollection properties; // 0x20

	// Methods
	internal void .ctor(ConfigurationElement owner, PropertyInformation propertyInfo); // 0x1005A91E0
	public PropertyInformationCollection get_Properties(); // 0x1005AA580
	internal void Reset(ElementInformation parentInfo); // 0x1005ACF2C
}

// Namespace: System.Configuration
public sealed class ExeConfigurationFileMap : ConfigurationFileMap // TypeDefIndex: 1236
{
	// Fields
	private string exeConfigFilename; // 0x18
	private string localUserConfigFilename; // 0x20
	private string roamingUserConfigFilename; // 0x28

	// Methods
	public void .ctor(); // 0x1005B3528
	public string get_ExeConfigFilename(); // 0x1005B6780
	public void set_ExeConfigFilename(string value); // 0x1005B35B8
	public string get_LocalUserConfigFilename(); // 0x1005B35D8
	public void set_LocalUserConfigFilename(string value); // 0x1005B35D0
	public string get_RoamingUserConfigFilename(); // 0x1005B35C8
	public void set_RoamingUserConfigFilename(string value); // 0x1005B35C0
	public override object Clone(); // 0x1005B6788
}

// Namespace: System.Configuration
public sealed class IgnoreSection : ConfigurationSection // TypeDefIndex: 1237
{
	// Fields
	private string xml; // 0x98
	private static ConfigurationPropertyCollection properties; // 0x0

	// Methods
	public void .ctor(); // 0x1005B6F28
	private static void .cctor(); // 0x1005B6F30
	protected internal override bool IsModified(); // 0x1005B6F98
	protected internal override void DeserializeSection(XmlReader reader); // 0x1005B6FA0
	protected internal override void Reset(ConfigurationElement parentElement); // 0x1005B6FFC
	protected internal override void ResetModified(); // 0x1005B7000
	protected internal override string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode); // 0x1005B7004
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B700C
}

// Namespace: System.Configuration
internal class InternalConfigurationFactory : IInternalConfigConfigurationFactory // TypeDefIndex: 1238
{
	// Methods
	public void .ctor(); // 0x1005B315C
	public Configuration Create(Type typeConfigHost, object[] hostInitConfigurationParams); // 0x1005B7074
}

// Namespace: System.Configuration
internal class InternalConfigurationSystem : IConfigSystem // TypeDefIndex: 1239
{
	// Fields
	private IInternalConfigHost host; // 0x10
	private IInternalConfigRoot root; // 0x18
	private object[] hostInitParams; // 0x20

	// Methods
	public void .ctor(); // 0x1005B7118
	public void Init(Type typeConfigHost, object[] hostInitParams); // 0x1005B7120
	public void InitForConfiguration(string locationConfigPath, out string parentConfigPath, out string parentLocationConfigPath); // 0x1005A68F4
	public IInternalConfigHost get_Host(); // 0x1005B76F4
}

// Namespace: System.Configuration
internal abstract class InternalConfigurationHost : IInternalConfigHost // TypeDefIndex: 1240
{
	// Methods
	protected void .ctor(); // 0x1005B6814
	public virtual object CreateDeprecatedConfigContext(string configPath); // 0x1005B72E0
	public virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath); // 0x1005B72E8
	public virtual Type GetConfigType(string typeName, bool throwOnError); // 0x1005B72F0
	public abstract string GetStreamName(string configPath); // 0
	public abstract void Init(IInternalConfigRoot root, object[] hostInitParams); // 0
	public abstract void InitForConfiguration(string locationSubPath, out string configPath, out string locationConfigPath, IInternalConfigRoot root, object[] hostInitConfigurationParams); // 0
	public virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition); // 0x1005B7404
	private static string get_bundled_machine_config(); // 0x1005B750C
	public virtual Stream OpenStreamForRead(string streamName); // 0x1005B7510
}

// Namespace: System.Configuration
internal class ExeConfigurationHost : InternalConfigurationHost // TypeDefIndex: 1241
{
	// Fields
	private ExeConfigurationFileMap map; // 0x10
	private ConfigurationUserLevel level; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x0

	// Methods
	public void .ctor(); // 0x1005B680C
	public override void Init(IInternalConfigRoot root, object[] hostInitParams); // 0x1005B681C
	public override string GetStreamName(string configPath); // 0x1005B6934
	public override void InitForConfiguration(string locationSubPath, out string configPath, out string locationConfigPath, IInternalConfigRoot root, object[] hostInitConfigurationParams); // 0x1005B6B6C
}

// Namespace: System.Configuration
internal class InternalConfigurationRoot : IInternalConfigRoot // TypeDefIndex: 1242
{
	// Fields
	private IInternalConfigHost host; // 0x10
	private bool isDesignTime; // 0x18

	// Methods
	public void .ctor(); // 0x1005B76E0
	public void Init(IInternalConfigHost host, bool isDesignTime); // 0x1005B76E8
}

// Namespace: System.Configuration
public sealed class PropertyInformation // TypeDefIndex: 1243
{
	// Fields
	private bool isModified; // 0x10
	private object val; // 0x18
	private PropertyValueOrigin origin; // 0x20
	private readonly ConfigurationElement owner; // 0x28
	private readonly ConfigurationProperty property; // 0x30

	// Methods
	internal void .ctor(ConfigurationElement owner, ConfigurationProperty property); // 0x1005B6048
	public object get_DefaultValue(); // 0x1005ACD9C
	public bool get_IsKey(); // 0x1005ACA70
	public bool get_IsModified(); // 0x1005AB868
	internal void set_IsModified(bool value); // 0x1005ACDB8
	public bool get_IsRequired(); // 0x1005ACD7C
	public string get_Name(); // 0x1005ACB94
	public Type get_Type(); // 0x1005AEBF8
	public object get_Value(); // 0x1005AA660
	public void set_Value(object value); // 0x1005AA7A8
	internal void Reset(PropertyInformation parentProperty); // 0x1005B60B0
	internal bool get_IsElement(); // 0x1005ACD64
	public PropertyValueOrigin get_ValueOrigin(); // 0x1005AB4D0
	internal string GetStringValue(); // 0x1005AE1B4
	internal void SetStringValue(string value); // 0x1005ACD08
	internal ConfigurationProperty get_Property(); // 0x1005AA7A0
}

// Namespace: System.Configuration
public sealed class PropertyInformationCollection : NameObjectCollectionBase // TypeDefIndex: 1244
{
	// Methods
	internal void .ctor(); // 0x1005B5FD0
	public PropertyInformation get_Item(string propertyName); // 0x1005AA588
	public override IEnumerator GetEnumerator(); // 0x1005B76FC
	internal void Add(PropertyInformation pi); // 0x1005B6080
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1005B779C
}

// Namespace: 
private class PropertyInformationEnumerator : IEnumerator // TypeDefIndex: 1245
{
	// Fields
	private PropertyInformationCollection collection; // 0x10
	private int position; // 0x18

	// Methods
	public void .ctor(PropertyInformationCollection collection); // 0x1005B7768
	public object get_Current(); // 0x1005B77F0
	public bool MoveNext(); // 0x1005B78B4
	public void Reset(); // 0x1005B7918
}

// Namespace: System.Configuration
public sealed class PropertyValueOrigin : Enum // TypeDefIndex: 1246
{
	// Fields
	public int value__; // 0x10
	public const PropertyValueOrigin Default = 0; // 0x0
	public const PropertyValueOrigin Inherited = 1; // 0x0
	public const PropertyValueOrigin SetHere = 2; // 0x0

}

// Namespace: System.Configuration
public static class ProtectedConfiguration // TypeDefIndex: 1247
{
	// Methods
	public static ProtectedConfigurationProviderCollection get_Providers(); // 0x1005B7924
	internal static ProtectedConfigurationSection get_Section(); // 0x1005B7940
	internal static ProtectedConfigurationProvider GetProvider(string name, bool throwOnError); // 0x1005B49FC
}

// Namespace: System.Configuration
public abstract class ProtectedConfigurationProvider : ProviderBase // TypeDefIndex: 1248
{
	// Methods
	public abstract XmlNode Decrypt(XmlNode encrypted_node); // 0
}

// Namespace: System.Configuration
public class ProtectedConfigurationProviderCollection : ProviderCollection // TypeDefIndex: 1249
{
	// Methods
	public void .ctor(); // 0x1005B7E30
	public ProtectedConfigurationProvider get_Item(string name); // 0x1005B7DCC
	public override void Add(ProviderBase provider); // 0x1005B8010
}

// Namespace: System.Configuration
public sealed class ProtectedConfigurationSection : ConfigurationSection // TypeDefIndex: 1250
{
	// Fields
	private static ConfigurationProperty defaultProviderProp; // 0x0
	private static ConfigurationProperty providersProp; // 0x8
	private static ConfigurationPropertyCollection properties; // 0x10
	private ProtectedConfigurationProviderCollection providers; // 0x98

	// Methods
	private static void .cctor(); // 0x1005B823C
	public ProviderSettingsCollection get_Providers(); // 0x1005B839C
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B848C
	internal ProtectedConfigurationProviderCollection GetAllProviders(); // 0x1005B7A28
	private ProtectedConfigurationProvider InstantiateProvider(ProviderSettings ps); // 0x1005B84F4
}

// Namespace: System.Configuration
public sealed class ProviderSettings : ConfigurationElement // TypeDefIndex: 1251
{
	// Fields
	private ConfigNameValueCollection parameters; // 0x78
	private static ConfigurationProperty nameProp; // 0x0
	private static ConfigurationProperty typeProp; // 0x8
	private static ConfigurationPropertyCollection properties; // 0x10

	// Methods
	public void .ctor(); // 0x1005B8BB0
	private static void .cctor(); // 0x1005B8BB8
	protected override bool OnDeserializeUnrecognizedAttribute(string name, string value); // 0x1005B8D18
	protected internal override bool IsModified(); // 0x1005B8DBC
	protected internal override void Reset(ConfigurationElement parentElement); // 0x1005B8DE4
	protected internal override void Unmerge(ConfigurationElement source, ConfigurationElement parent, ConfigurationSaveMode updateMode); // 0x1005B8E88
	public string get_Name(); // 0x1005B8770
	public string get_Type(); // 0x1005B8680
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B8E8C
	public NameValueCollection get_Parameters(); // 0x1005B8860
}

// Namespace: System.Configuration
public sealed class ProviderSettingsCollection : ConfigurationElementCollection // TypeDefIndex: 1252
{
	// Fields
	private static ConfigurationPropertyCollection props; // 0x0

	// Methods
	private static void .cctor(); // 0x1005B8EF4
	protected override ConfigurationElement CreateNewElement(); // 0x1005B8F5C
	protected override object GetElementKey(ConfigurationElement element); // 0x1005B8FB8
	protected internal override ConfigurationPropertyCollection get_Properties(); // 0x1005B90CC
}

// Namespace: System.Configuration
internal class SectionInfo : ConfigInfo // TypeDefIndex: 1253
{
	// Fields
	private bool allowLocation; // 0x40
	private bool requirePermission; // 0x41
	private bool restartOnExternalChanges; // 0x42
	private ConfigurationAllowDefinition allowDefinition; // 0x44
	private ConfigurationAllowExeDefinition allowExeDefinition; // 0x48
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x0

	// Methods
	public void .ctor(); // 0x1005B9CBC
	public override object CreateInstance(); // 0x1005BB094
	public override void ReadConfig(Configuration cfg, string streamName, XmlReader reader); // 0x1005BB1D4
	public override void ReadData(Configuration config, XmlReader reader, bool overrideAllowed); // 0x1005BBA2C
	internal override void Merge(ConfigInfo data); // 0x1005BBE7C
}

// Namespace: System.Configuration
internal class SectionGroupInfo : ConfigInfo // TypeDefIndex: 1254
{
	// Fields
	private ConfigInfoCollection sections; // 0x40
	private ConfigInfoCollection groups; // 0x48
	private static ConfigInfoCollection emptyList; // 0x0

	// Methods
	public void .ctor(); // 0x1005A75A0
	private static void .cctor(); // 0x1005B9134
	public void AddChild(ConfigInfo data); // 0x1005B919C
	public void Clear(); // 0x1005B928C
	public bool HasChild(string name); // 0x1005B92D0
	public void RemoveChild(string name); // 0x1005B9324
	public ConfigInfoCollection get_Sections(); // 0x1005B5270
	public ConfigInfoCollection get_Groups(); // 0x1005B5B5C
	public override void ReadConfig(Configuration cfg, string streamName, XmlReader reader); // 0x1005B9374
	private void ReadRemoveSection(XmlReader reader); // 0x1005B9AA0
	public void ReadRootData(XmlReader reader, Configuration config, bool overrideAllowed); // 0x1005A8F8C
	public override void ReadData(Configuration config, XmlReader reader, bool overrideAllowed); // 0x1005BA1EC
	private void ReadContent(XmlReader reader, Configuration config, bool overrideAllowed, bool root); // 0x1005B9CDC
	private ConfigInfo GetConfigInfo(XmlReader reader, SectionGroupInfo current); // 0x1005BA328
	internal override void Merge(ConfigInfo newData); // 0x1005BA7F8
}

// Namespace: System.Configuration
internal class ConfigInfoCollection : NameObjectCollectionBase // TypeDefIndex: 1255
{
	// Methods
	public void .ctor(); // 0x1005A653C
	public ICollection get_AllKeys(); // 0x1005A65B4
	public ConfigInfo get_Item(string name); // 0x1005A6600
	public void set_Item(string name, ConfigInfo value); // 0x1005A6668
	public void Add(string name, ConfigInfo config); // 0x1005A6670
	public void Clear(); // 0x1005A6678
	public void Remove(string name); // 0x1005A6680
}

// Namespace: System.Configuration
public sealed class SectionInformation // TypeDefIndex: 1256
{
	// Fields
	private ConfigurationSection parent; // 0x10
	private ConfigurationAllowDefinition allow_definition; // 0x18
	private ConfigurationAllowExeDefinition allow_exe_definition; // 0x1C
	private bool allow_location; // 0x20
	private bool allow_override; // 0x21
	private bool inherit_on_child_apps; // 0x22
	private bool restart_on_external_changes; // 0x23
	private bool require_permission; // 0x24
	private string config_source; // 0x28
	private string name; // 0x30
	private string raw_xml; // 0x38
	private ProtectedConfigurationProvider protection_provider; // 0x40
	private string <ConfigFilePath>k__BackingField; // 0x48

	// Methods
	internal void .ctor(); // 0x1005B4084
	internal string get_ConfigFilePath(); // 0x1005B48F4
	internal void set_ConfigFilePath(string value); // 0x1005A85A4
	public void set_AllowDefinition(ConfigurationAllowDefinition value); // 0x1005BB1AC
	public void set_AllowExeDefinition(ConfigurationAllowExeDefinition value); // 0x1005BB1B4
	public void set_AllowLocation(bool value); // 0x1005BB1A4
	public string get_ConfigSource(); // 0x1005A85C8
	public void set_ConfigSource(string value); // 0x1005B4AF4
	public void set_RequirePermission(bool value); // 0x1005BB1BC
	public void set_RestartOnExternalChanges(bool value); // 0x1005BB1C4
	public ConfigurationSection GetParentSection(); // 0x1005B455C
	internal void SetParentSection(ConfigurationSection parent); // 0x1005A859C
	public void ProtectSection(string provider); // 0x1005B4ACC
	public void SetRawXml(string xml); // 0x1005B48FC
	internal void SetName(string name); // 0x1005BB1CC
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 1257
{
	// Fields
	private string comment; // 0x10

	// Methods
	public void .ctor(); // 0x1005BBED8
	public void .ctor(string comment); // 0x1005BBEAC
}

// Namespace: System
internal class MonoInternalNoteAttribute : MonoTODOAttribute // TypeDefIndex: 1258
{
	// Methods
	public void .ctor(string comment); // 0x1005BBE80
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1259
{
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 1260
{
	// Methods
	public static string GetText(string msg); // 0x10068301C
	public static string GetText(string fmt, object[] args); // 0x100683024
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 1261
{
	// Fields
	private string comment; // 0x10

	// Methods
	public void .ctor(); // 0x1006B3218
	public void .ctor(string comment); // 0x1006B31EC
}

// Namespace: System
internal class MonoNotSupportedAttribute : MonoTODOAttribute // TypeDefIndex: 1262
{
	// Methods
	public void .ctor(string comment); // 0x1006B31C0
}

// Namespace: System.Collections.Generic
public class LinkedList`1 : IEnumerable`1<T>, ICollection, IEnumerable, IDeserializationCallback, ICollection`1<T>, ISerializable // TypeDefIndex: 1263
{
	// Fields
	private uint count; // 0x0
	private uint version; // 0x0
	private object syncRoot; // 0x0
	internal LinkedListNode`1<T> first; // 0x0
	internal SerializationInfo si; // 0x0

	// Methods
	public void .ctor(); // 0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0
	private void System.Collections.Generic.ICollection<T>.Add(T value); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private void VerifyReferencedNode(LinkedListNode`1<T> node); // 0
	public LinkedListNode`1<T> AddLast(T value); // 0
	public void Clear(); // 0
	public bool Contains(T value); // 0
	public void CopyTo(T[] array, int index); // 0
	public LinkedListNode`1<T> Find(T value); // 0
	public Enumerator<T> GetEnumerator(); // 0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0
	public virtual void OnDeserialization(object sender); // 0
	public bool Remove(T value); // 0
	public void Remove(LinkedListNode`1<T> node); // 0
	public void RemoveLast(); // 0
	public int get_Count(); // 0
	public LinkedListNode`1<T> get_First(); // 0
	public LinkedListNode`1<T> get_Last(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T>, IDeserializationCallback, ISerializable // TypeDefIndex: 1264
{
	// Fields
	private LinkedList`1<T> list; // 0x0
	private LinkedListNode`1<T> current; // 0x0
	private int index; // 0x0
	private uint version; // 0x0
	private SerializationInfo si; // 0x0

	// Methods
	internal void .ctor(SerializationInfo info, StreamingContext context); // 0
	internal void .ctor(LinkedList`1<T> parent); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0
	public T get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
}

// Namespace: System.Collections.Generic
public sealed class LinkedListNode`1 // TypeDefIndex: 1265
{
	// Fields
	private T item; // 0x0
	private LinkedList`1<T> container; // 0x0
	internal LinkedListNode`1<T> forward; // 0x0
	internal LinkedListNode`1<T> back; // 0x0

	// Methods
	internal void .ctor(LinkedList`1<T> list, T value); // 0
	internal void .ctor(LinkedList`1<T> list, T value, LinkedListNode`1<T> previousNode, LinkedListNode`1<T> nextNode); // 0
	internal void Detach(); // 0
	public LinkedList`1<T> get_List(); // 0
	public LinkedListNode`1<T> get_Previous(); // 0
	public T get_Value(); // 0
}

// Namespace: System.Collections.Generic
public class Queue`1 : IEnumerable`1<T>, ICollection, IEnumerable // TypeDefIndex: 1266
{
	// Fields
	private T[] _array; // 0x0
	private int _head; // 0x0
	private int _tail; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0

	// Methods
	public void .ctor(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int idx); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public void Clear(); // 0
	public void CopyTo(T[] array, int idx); // 0
	public T Dequeue(); // 0
	public T Peek(); // 0
	public void Enqueue(T item); // 0
	public T[] ToArray(); // 0
	private void SetCapacity(int new_size); // 0
	public int get_Count(); // 0
	public Enumerator<T> GetEnumerator(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 1267
{
	// Fields
	private Queue`1<T> q; // 0x0
	private int idx; // 0x0
	private int ver; // 0x0

	// Methods
	internal void .ctor(Queue`1<T> q); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: System.Collections.Generic
public class SortedList`2 : ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>>, IDictionary, ICollection, IEnumerable, IDictionary`2<T, T> // TypeDefIndex: 1268
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x0
	private int inUse; // 0x0
	private int modificationCount; // 0x0
	private KeyValuePair`2<T, T>[] table; // 0x0
	private IComparer`1<T> comparer; // 0x0
	private int defaultCapacity; // 0x0

	// Methods
	public void .ctor(); // 0
	public void .ctor(int capacity, IComparer`1<T> comparer); // 0
	private static void .cctor(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private object System.Collections.IDictionary.get_Item(object key); // 0
	private void System.Collections.IDictionary.set_Item(object key, object value); // 0
	private ICollection System.Collections.IDictionary.get_Keys(); // 0
	private ICollection System.Collections.IDictionary.get_Values(); // 0
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys(); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly(); // 0
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear(); // 0
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2<T, T>[] array, int arrayIndex); // 0
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<T, T> keyValuePair); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<T, T> keyValuePair); // 0
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<T, T> keyValuePair); // 0
	private IEnumerator`1<KeyValuePair`2<T, T>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private void System.Collections.IDictionary.Add(object key, object value); // 0
	private bool System.Collections.IDictionary.Contains(object key); // 0
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator(); // 0
	private void System.Collections.IDictionary.Remove(object key); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex); // 0
	public int get_Count(); // 0
	public T get_Item(T key); // 0
	public void set_Item(T key, T value); // 0
	public int get_Capacity(); // 0
	public IList`1<T> get_Keys(); // 0
	public IList`1<T> get_Values(); // 0
	public void Add(T key, T value); // 0
	public bool ContainsKey(T key); // 0
	public IEnumerator`1<KeyValuePair`2<T, T>> GetEnumerator(); // 0
	public bool Remove(T key); // 0
	public void Clear(); // 0
	public void RemoveAt(int index); // 0
	public int IndexOfKey(T key); // 0
	public int IndexOfValue(T value); // 0
	public bool TryGetValue(T key, out T value); // 0
	private void EnsureCapacity(int n, int free); // 0
	private void PutImpl(T key, T value, bool overwrite); // 0
	private void Init(IComparer`1<T> comparer, int capacity, bool forceSize); // 0
	private void CopyToArray(Array arr, int i, EnumeratorMode<T, T> mode); // 0
	private int Find(T key); // 0
	private T ToKey(object key); // 0
	private T ToValue(object value); // 0
	internal T KeyAt(int index); // 0
	internal T ValueAt(int index); // 0
}

// Namespace: 
private sealed class EnumeratorMode : Enum // TypeDefIndex: 1269
{
	// Fields
	public int value__; // 0x0
	public const EnumeratorMode<T, T> KEY_MODE = 0; // 0x0
	public const EnumeratorMode<T, T> VALUE_MODE = 1; // 0x0
	public const EnumeratorMode<T, T> ENTRY_MODE = 2; // 0x0

}

// Namespace: 
private sealed class Enumerator : IEnumerator, IDictionaryEnumerator, ICloneable // TypeDefIndex: 1270
{
	// Fields
	private SortedList`2<T, T> host; // 0x0
	private int stamp; // 0x0
	private int pos; // 0x0
	private int size; // 0x0
	private EnumeratorMode<T, T> mode; // 0x0
	private object currentKey; // 0x0
	private object currentValue; // 0x0
	private bool invalid; // 0x0
	private static readonly string xstr; // 0x0

	// Methods
	public void .ctor(SortedList`2<T, T> host, EnumeratorMode<T, T> mode); // 0
	private static void .cctor(); // 0
	public void Reset(); // 0
	public bool MoveNext(); // 0
	public DictionaryEntry get_Entry(); // 0
	public object get_Key(); // 0
	public object get_Value(); // 0
	public object get_Current(); // 0
	public object Clone(); // 0
}

// Namespace: 
public struct KeyEnumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 1271
{
	// Fields
	private SortedList`2<T, T> l; // 0x0
	private int idx; // 0x0
	private int ver; // 0x0

	// Methods
	internal void .ctor(SortedList`2<T, T> l); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: 
public struct ValueEnumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 1272
{
	// Fields
	private SortedList`2<T, T> l; // 0x0
	private int idx; // 0x0
	private int ver; // 0x0

	// Methods
	internal void .ctor(SortedList`2<T, T> l); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: 
private class ListKeys : ICollection, IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 1273
{
	// Fields
	private SortedList`2<T, T> host; // 0x0

	// Methods
	public void .ctor(SortedList`2<T, T> host); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public virtual void Add(T item); // 0
	public virtual bool Remove(T key); // 0
	public virtual void Clear(); // 0
	public virtual void CopyTo(T[] array, int arrayIndex); // 0
	public virtual bool Contains(T item); // 0
	public virtual int IndexOf(T item); // 0
	public virtual void Insert(int index, T item); // 0
	public virtual void RemoveAt(int index); // 0
	public virtual T get_Item(int index); // 0
	public virtual void set_Item(int index, T value); // 0
	public virtual IEnumerator`1<T> GetEnumerator(); // 0
	public virtual int get_Count(); // 0
	public virtual bool get_IsSynchronized(); // 0
	public virtual bool get_IsReadOnly(); // 0
	public virtual object get_SyncRoot(); // 0
	public virtual void CopyTo(Array array, int arrayIndex); // 0
}

// Namespace: <IEnumerable
private sealed class GetEnumerator>c__Iterator2 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 1274
{
	// Fields
	internal int <i>__0; // 0x0
	internal int $PC; // 0x0
	internal object $current; // 0x0
	internal ListKeys<T, T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private class ListValues : ICollection, IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 1275
{
	// Fields
	private SortedList`2<T, T> host; // 0x0

	// Methods
	public void .ctor(SortedList`2<T, T> host); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public virtual void Add(T item); // 0
	public virtual bool Remove(T value); // 0
	public virtual void Clear(); // 0
	public virtual void CopyTo(T[] array, int arrayIndex); // 0
	public virtual bool Contains(T item); // 0
	public virtual int IndexOf(T item); // 0
	public virtual void Insert(int index, T item); // 0
	public virtual void RemoveAt(int index); // 0
	public virtual T get_Item(int index); // 0
	public virtual void set_Item(int index, T value); // 0
	public virtual IEnumerator`1<T> GetEnumerator(); // 0
	public virtual int get_Count(); // 0
	public virtual bool get_IsSynchronized(); // 0
	public virtual bool get_IsReadOnly(); // 0
	public virtual object get_SyncRoot(); // 0
	public virtual void CopyTo(Array array, int arrayIndex); // 0
}

// Namespace: <IEnumerable
private sealed class GetEnumerator>c__Iterator3 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 1276
{
	// Fields
	internal int <i>__0; // 0x0
	internal int $PC; // 0x0
	internal object $current; // 0x0
	internal ListValues<T, T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: <IEnumerable
private sealed class GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<KeyValuePair`2<T, T>> // TypeDefIndex: 1277
{
	// Fields
	internal int <i>__0; // 0x0
	internal KeyValuePair`2<T, T> <current>__1; // 0x0
	internal int $PC; // 0x0
	internal KeyValuePair`2<T, T> $current; // 0x0
	internal SortedList`2<T, T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private KeyValuePair`2<T, T> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1<KeyValuePair`2<T, T>> // TypeDefIndex: 1278
{
	// Fields
	internal int <i>__0; // 0x0
	internal KeyValuePair`2<T, T> <current>__1; // 0x0
	internal int $PC; // 0x0
	internal KeyValuePair`2<T, T> $current; // 0x0
	internal SortedList`2<T, T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private KeyValuePair`2<T, T> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: System.Collections.Generic
public class Stack`1 : ICollection, IEnumerable`1<T>, IEnumerable // TypeDefIndex: 1279
{
	// Fields
	private T[] _array; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0

	// Methods
	public void .ctor(); // 0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0
	private object System.Collections.ICollection.get_SyncRoot(); // 0
	private void System.Collections.ICollection.CopyTo(Array dest, int idx); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public void Clear(); // 0
	public bool Contains(T t); // 0
	public T Peek(); // 0
	public T Pop(); // 0
	public void Push(T t); // 0
	public int get_Count(); // 0
	public Enumerator<T> GetEnumerator(); // 0
}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 1280
{
	// Fields
	private Stack`1<T> parent; // 0x0
	private int idx; // 0x0
	private int _version; // 0x0

	// Methods
	internal void .ctor(Stack`1<T> t); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public void Dispose(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
}

// Namespace: System.Collections.Specialized
public class HybridDictionary : IDictionary, ICollection, IEnumerable // TypeDefIndex: 1281
{
	// Fields
	private bool caseInsensitive; // 0x10
	private Hashtable hashtable; // 0x18
	private ListDictionary list; // 0x20

	// Methods
	public void .ctor(); // 0x100683DF4
	public void .ctor(int initialSize, bool caseInsensitive); // 0x100683E00
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100683F68
	private IDictionary get_inner(); // 0x100684068
	public int get_Count(); // 0x10068407C
	public bool get_IsSynchronized(); // 0x100684174
	public object get_Item(object key); // 0x10068417C
	public void set_Item(object key, object value); // 0x100684284
	public ICollection get_Keys(); // 0x1006844E0
	public object get_SyncRoot(); // 0x1006845DC
	public ICollection get_Values(); // 0x1006845E0
	public void Add(object key, object value); // 0x1006846DC
	public void Clear(); // 0x10068481C
	public bool Contains(object key); // 0x100684918
	public void CopyTo(Array array, int index); // 0x100684A24
	public IDictionaryEnumerator GetEnumerator(); // 0x100683F6C
	public void Remove(object key); // 0x100684B38
	private void Switch(); // 0x1006843C4
}

// Namespace: System.Collections.Specialized
public interface IOrderedDictionary : IDictionary, ICollection, IEnumerable // TypeDefIndex: 1282
{
	// Methods
	public abstract IDictionaryEnumerator GetEnumerator(); // 0
}

// Namespace: System.Collections.Specialized
public class ListDictionary : IDictionary, ICollection, IEnumerable // TypeDefIndex: 1283
{
	// Fields
	private int count; // 0x10
	private int version; // 0x14
	private DictionaryNode head; // 0x18
	private IComparer comparer; // 0x20

	// Methods
	public void .ctor(); // 0x100684C58
	public void .ctor(IComparer comparer); // 0x100683F38
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100684C84
	private DictionaryNode FindEntry(object key); // 0x100684D34
	private DictionaryNode FindEntry(object key, out DictionaryNode prev); // 0x100684EDC
	private void AddImpl(object key, object value, DictionaryNode prev); // 0x1006850A0
	public int get_Count(); // 0x1006851AC
	public bool get_IsSynchronized(); // 0x1006851B4
	public object get_SyncRoot(); // 0x1006851BC
	public void CopyTo(Array array, int index); // 0x1006851C0
	public object get_Item(object key); // 0x100685624
	public void set_Item(object key, object value); // 0x100685640
	public ICollection get_Keys(); // 0x1006856A0
	public ICollection get_Values(); // 0x100685748
	public void Add(object key, object value); // 0x1006857B0
	public void Clear(); // 0x100684C44
	public bool Contains(object key); // 0x100685870
	public IDictionaryEnumerator GetEnumerator(); // 0x1006855C4
	public void Remove(object key); // 0x10068588C
}

// Namespace: 
private class DictionaryNode // TypeDefIndex: 1284
{
	// Fields
	public object key; // 0x10
	public object value; // 0x18
	public DictionaryNode next; // 0x20

	// Methods
	public void .ctor(object key, object value, DictionaryNode next); // 0x10068516C
}

// Namespace: 
private class DictionaryNodeEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1285
{
	// Fields
	private ListDictionary dict; // 0x10
	private bool isAtStart; // 0x18
	private DictionaryNode current; // 0x20
	private int version; // 0x28

	// Methods
	public void .ctor(ListDictionary dict); // 0x100684CE4
	private void FailFast(); // 0x100686134
	public bool MoveNext(); // 0x1006861C0
	public void Reset(); // 0x100686108
	public object get_Current(); // 0x100686228
	private DictionaryNode get_DictionaryNode(); // 0x1006862E4
	public DictionaryEntry get_Entry(); // 0x100686290
	public object get_Key(); // 0x100686364
	public object get_Value(); // 0x100686384
}

// Namespace: 
private class DictionaryNodeCollection : ICollection, IEnumerable // TypeDefIndex: 1286
{
	// Fields
	private ListDictionary dict; // 0x10
	private bool isKeyList; // 0x18

	// Methods
	public void .ctor(ListDictionary dict, bool isKeyList); // 0x10068570C
	public int get_Count(); // 0x1006858F0
	public bool get_IsSynchronized(); // 0x10068590C
	public object get_SyncRoot(); // 0x100685914
	public void CopyTo(Array array, int index); // 0x10068592C
	public IEnumerator GetEnumerator(); // 0x100685D18
}

// Namespace: 
private class DictionaryNodeCollectionEnumerator : IEnumerator // TypeDefIndex: 1287
{
	// Fields
	private IDictionaryEnumerator inner; // 0x10
	private bool isKeyList; // 0x18

	// Methods
	public void .ctor(IDictionaryEnumerator inner, bool isKeyList); // 0x100685DA0
	public object get_Current(); // 0x100685DDC
	public bool MoveNext(); // 0x100685F20
	public void Reset(); // 0x100686014
}

// Namespace: System.Collections.Specialized
public abstract class NameObjectCollectionBase : ICollection, IEnumerable, IDeserializationCallback, ISerializable // TypeDefIndex: 1288
{
	// Fields
	private Hashtable m_ItemsContainer; // 0x10
	private _Item m_NullKeyItem; // 0x18
	private ArrayList m_ItemsArray; // 0x20
	private IHashCodeProvider m_hashprovider; // 0x28
	private IComparer m_comparer; // 0x30
	private int m_defCapacity; // 0x38
	private bool m_readonly; // 0x3C
	private SerializationInfo infoCopy; // 0x40
	private KeysCollection keyscoll; // 0x48
	private IEqualityComparer equality_comparer; // 0x50

	// Methods
	protected void .ctor(); // 0x1006863A4
	internal void .ctor(IEqualityComparer equalityComparer, IComparer comparer, IHashCodeProvider hcp); // 0x100686534
	protected void .ctor(IEqualityComparer equalityComparer); // 0x100686580
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100686624
	protected void .ctor(int capacity, IHashCodeProvider hashProvider, IComparer comparer); // 0x100686650
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x100686698
	private object System.Collections.ICollection.get_SyncRoot(); // 0x1006866A0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1006866A4
	internal IComparer get_Comparer(); // 0x1006867DC
	internal IHashCodeProvider get_HashCodeProvider(); // 0x1006867E4
	private void Init(); // 0x10068645C
	public virtual KeysCollection get_Keys(); // 0x1006867EC
	public virtual IEnumerator GetEnumerator(); // 0x100686888
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100686928
	public virtual int get_Count(); // 0x100686FB0
	public virtual void OnDeserialization(object sender); // 0x100687004
	protected bool get_IsReadOnly(); // 0x1006876A4
	protected void BaseAdd(string name, object value); // 0x100687538
	protected void BaseClear(); // 0x1006876E4
	protected object BaseGet(int index); // 0x100687760
	protected object BaseGet(string name); // 0x100687808
	protected string[] BaseGetAllKeys(); // 0x1006878C0
	protected string BaseGetKey(int index); // 0x1006879D8
	protected void BaseRemove(string name); // 0x100687A80
	protected void BaseSet(string name, object value); // 0x100687DB8
	private _Item FindFirstMatchedItem(string name); // 0x100687824
	internal bool Equals(string s1, string s2); // 0x100687C00
}

// Namespace: 
internal class _Item // TypeDefIndex: 1289
{
	// Fields
	public string key; // 0x10
	public object value; // 0x18

	// Methods
	public void .ctor(string key, object value); // 0x1006876AC
}

// Namespace: 
internal class _KeysEnumerator : IEnumerator // TypeDefIndex: 1290
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x10
	private int m_position; // 0x18

	// Methods
	internal void .ctor(NameObjectCollectionBase collection); // 0x1006868F4
	public object get_Current(); // 0x100687E7C
	public bool MoveNext(); // 0x100687F40
	public void Reset(); // 0x100687E70
}

// Namespace: 
public class KeysCollection : ICollection, IEnumerable // TypeDefIndex: 1291
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x10

	// Methods
	internal void .ctor(NameObjectCollectionBase collection); // 0x10068685C
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex); // 0x100687FA4
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x1006882D0
	private object System.Collections.ICollection.get_SyncRoot(); // 0x1006882D8
	public int get_Count(); // 0x1006882E0
	public IEnumerator GetEnumerator(); // 0x100688334
}

// Namespace: System.Collections.Specialized
public class NameValueCollection : NameObjectCollectionBase // TypeDefIndex: 1292
{
	// Fields
	private string[] cachedAllKeys; // 0x58
	private string[] cachedAll; // 0x60

	// Methods
	public void .ctor(); // 0x1006883A4
	public void .ctor(int capacity, NameValueCollection col); // 0x1006883A8
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10068860C
	public virtual string[] get_AllKeys(); // 0x100688638
	public string get_Item(string name); // 0x100688668
	public void set_Item(string name, string value); // 0x1006886C4
	public void Add(NameValueCollection c); // 0x100688424
	public virtual void Add(string name, string val); // 0x100688730
	public virtual string Get(int index); // 0x1006888AC
	public virtual string Get(string name); // 0x100688E00
	private static string AsSingleString(ArrayList values); // 0x100688918
	public virtual string GetKey(int index); // 0x100688E74
	public virtual string[] GetValues(string name); // 0x100688E78
	private static string[] AsStringArray(ArrayList values); // 0x100688EEC
	public virtual void Remove(string name); // 0x100688FC0
	public virtual void Set(string name, string value); // 0x100689050
	protected void InvalidateCachedArrays(); // 0x100688728
}

// Namespace: System.Collections.Specialized
public class StringCollection : IList, ICollection, IEnumerable // TypeDefIndex: 1293
{
	// Fields
	private ArrayList data; // 0x10

	// Methods
	public void .ctor(); // 0x100689150
	private bool System.Collections.IList.get_IsReadOnly(); // 0x1006891B8
	private bool System.Collections.IList.get_IsFixedSize(); // 0x1006891C0
	private object System.Collections.IList.get_Item(int index); // 0x1006891C8
	private void System.Collections.IList.set_Item(int index, object value); // 0x1006892C8
	private int System.Collections.IList.Add(object value); // 0x100689410
	private bool System.Collections.IList.Contains(object value); // 0x100689548
	private int System.Collections.IList.IndexOf(object value); // 0x100689684
	private void System.Collections.IList.Insert(int index, object value); // 0x1006897C0
	private void System.Collections.IList.Remove(object value); // 0x10068990C
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x100689A48
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100689AB8
	public string get_Item(int index); // 0x1006891CC
	public void set_Item(int index, string value); // 0x1006893A4
	public int get_Count(); // 0x100689B10
	public int Add(string value); // 0x1006894E4
	public void Clear(); // 0x100689B64
	public bool Contains(string value); // 0x10068961C
	public StringEnumerator GetEnumerator(); // 0x100689BB8
	public int IndexOf(string value); // 0x100689758
	public void Insert(int index, string value); // 0x10068989C
	public bool get_IsReadOnly(); // 0x100689D14
	public bool get_IsSynchronized(); // 0x100689D1C
	public void Remove(string value); // 0x1006899E0
	public void RemoveAt(int index); // 0x100689D24
	public object get_SyncRoot(); // 0x100689D8C
}

// Namespace: System.Collections.Specialized
public class StringDictionary : IEnumerable // TypeDefIndex: 1294
{
	// Fields
	private Hashtable contents; // 0x10

	// Methods
	public void .ctor(); // 0x100689D90
	public virtual void set_Item(string key, string value); // 0x100689DFC
	public virtual void Add(string key, string value); // 0x100689F04
	public virtual IEnumerator GetEnumerator(); // 0x10068A00C
}

// Namespace: System.Collections.Specialized
public class StringEnumerator // TypeDefIndex: 1295
{
	// Fields
	private IEnumerator enumerable; // 0x10

	// Methods
	internal void .ctor(StringCollection coll); // 0x100689C18
	public string get_Current(); // 0x10068A064
	public bool MoveNext(); // 0x10068A1CC
}

// Namespace: System.ComponentModel
public class ArrayConverter : CollectionConverter // TypeDefIndex: 1296
{
	// Methods
	public void .ctor(); // 0x10068A2C0
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068A2D0
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes); // 0x10068A550
	public override bool GetPropertiesSupported(ITypeDescriptorContext context); // 0x10068A920
}

// Namespace: 
internal class ArrayPropertyDescriptor : PropertyDescriptor // TypeDefIndex: 1297
{
	// Fields
	private int index; // 0x28
	private Type array_type; // 0x30

	// Methods
	public void .ctor(int index, Type array_type); // 0x10068A770
	public override Type get_ComponentType(); // 0x10068A960
	public override Type get_PropertyType(); // 0x10068A968
}

// Namespace: System.ComponentModel
public class AttributeCollection : ICollection, IEnumerable // TypeDefIndex: 1298
{
	// Fields
	private ArrayList attrList; // 0x10
	public static readonly AttributeCollection Empty; // 0x0

	// Methods
	internal void .ctor(ArrayList attributes); // 0x10068A9C0
	public void .ctor(Attribute[] attributes); // 0x10068AA40
	private static void .cctor(); // 0x10068AB38
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10068AB9C
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10068ABF8
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10068AC4C
	private int System.Collections.ICollection.get_Count(); // 0x10068ACA0
	public bool Contains(Attribute attr); // 0x10068AD08
	public bool Contains(Attribute[] attributes); // 0x10068ADD0
	public void CopyTo(Array array, int index); // 0x10068AE44
	public IEnumerator GetEnumerator(); // 0x10068ABA0
	protected Attribute GetDefaultAttribute(Type attributeType); // 0x10068AEB4
	public int get_Count(); // 0x10068ACA4
	public virtual Attribute get_Item(Type type); // 0x10068B040
}

// Namespace: System.ComponentModel
public abstract class BaseNumberConverter : TypeConverter // TypeDefIndex: 1299
{
	// Fields
	internal Type InnerType; // 0x10

	// Methods
	protected void .ctor(); // 0x10068B3B4
	internal abstract bool get_SupportHex(); // 0
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10068B3C4
	public override bool CanConvertTo(ITypeDescriptorContext context, Type t); // 0x10068B4D8
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10068B5A0
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068BA6C
	internal abstract string ConvertToString(object value, NumberFormatInfo format); // 0
	internal abstract object ConvertFromString(string value, NumberFormatInfo format); // 0
	internal virtual object ConvertFromString(string value, int fromBase); // 0x10068BEC8
}

// Namespace: System.ComponentModel
public class BooleanConverter : TypeConverter // TypeDefIndex: 1300
{
	// Methods
	public void .ctor(); // 0x10068BF70
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10068BF78
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10068C00C
	public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x10068C140
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x10068C210
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x10068C218
}

// Namespace: System.ComponentModel
public sealed class BrowsableAttribute : Attribute // TypeDefIndex: 1301
{
	// Fields
	private bool browsable; // 0x10
	public static readonly BrowsableAttribute Default; // 0x0
	public static readonly BrowsableAttribute No; // 0x8
	public static readonly BrowsableAttribute Yes; // 0x10

	// Methods
	public void .ctor(bool browsable); // 0x10068C220
	private static void .cctor(); // 0x10068C24C
	public bool get_Browsable(); // 0x10068C304
	public override bool Equals(object obj); // 0x10068C30C
	public override int GetHashCode(); // 0x10068C3AC
	public override bool IsDefaultAttribute(); // 0x10068C3B8
}

// Namespace: System.ComponentModel
public class ByteConverter : BaseNumberConverter // TypeDefIndex: 1302
{
	// Methods
	internal override bool get_SupportHex(); // 0x10068C44C
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x10068C454
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x10068C4E4
	internal override object ConvertFromString(string value, int fromBase); // 0x10068C568
}

// Namespace: System.ComponentModel
public class CategoryAttribute : Attribute // TypeDefIndex: 1303
{
	// Fields
	private string category; // 0x10
	private bool IsLocalized; // 0x18
	private static CategoryAttribute def; // 0x0
	private static object lockobj; // 0x8

	// Methods
	public void .ctor(); // 0x10068C608
	public void .ctor(string category); // 0x10068C664
	private static void .cctor(); // 0x10068C690
	public static CategoryAttribute get_Default(); // 0x10068C6FC
	protected virtual string GetLocalizedString(string value); // 0x10068C894
	public string get_Category(); // 0x10068C89C
	public override bool Equals(object obj); // 0x10068C91C
	public override int GetHashCode(); // 0x10068CA1C
	public override bool IsDefaultAttribute(); // 0x10068CA38
}

// Namespace: System.ComponentModel
public class CharConverter : TypeConverter // TypeDefIndex: 1304
{
	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10068CAE0
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10068CB74
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068CCF0
}

// Namespace: System.ComponentModel
public class CollectionConverter : TypeConverter // TypeDefIndex: 1305
{
	// Methods
	public void .ctor(); // 0x10068A2C8
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068A47C
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes); // 0x10068CE08
	public override bool GetPropertiesSupported(ITypeDescriptorContext context); // 0x10068CE10
}

// Namespace: System.ComponentModel
public class ComponentCollection : ReadOnlyCollectionBase // TypeDefIndex: 1306
{
	// Methods
	public virtual IComponent get_Item(string name); // 0x10068D69C
}

// Namespace: System.ComponentModel
public class ComponentConverter : ReferenceConverter // TypeDefIndex: 1307
{
	// Methods
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes); // 0x10068DC70
	public override bool GetPropertiesSupported(ITypeDescriptorContext context); // 0x10068DD5C
}

// Namespace: System.ComponentModel
public class Component : MarshalByRefObject, IDisposable, IComponent // TypeDefIndex: 1308
{
	// Fields
	private EventHandlerList event_handlers; // 0x18
	private ISite mySite; // 0x20
	private object disposedEvent; // 0x28

	// Methods
	public void .ctor(); // 0x10068CE18
	public void add_Disposed(EventHandler value); // 0x10068CE88
	public void remove_Disposed(EventHandler value); // 0x10068D000
	public virtual ISite get_Site(); // 0x10068D088
	protected EventHandlerList get_Events(); // 0x10068CEBC
	protected override void Finalize(); // 0x10068D098
	public void Dispose(); // 0x10068D138
	protected virtual void Dispose(bool release_all); // 0x10068D190
	public override string ToString(); // 0x10068D4D4
}

// Namespace: System.ComponentModel
public class CultureInfoConverter : TypeConverter // TypeDefIndex: 1309
{
	// Fields
	private StandardValuesCollection _standardValues; // 0x10

	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10068F7C0
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x10068F854
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10068F920
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068FC0C
	public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x10068FFF4
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x100690174
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x10069017C
}

// Namespace: 
private class CultureInfoComparer : IComparer // TypeDefIndex: 1310
{
	// Methods
	public void .ctor(); // 0x10069016C
	public int Compare(object first, object second); // 0x100690184
}

// Namespace: System.ComponentModel
public class DateTimeConverter : TypeConverter // TypeDefIndex: 1311
{
	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x100690300
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x100690394
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x100690428
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x100690788
}

// Namespace: System.ComponentModel
public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1312
{
	// Methods
	public void .ctor(); // 0x100690D14
	internal override bool get_SupportHex(); // 0x100690D9C
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x100690DA4
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x100690E54
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x1006910DC
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x10069116C
}

// Namespace: System.ComponentModel
public sealed class DefaultEventAttribute : Attribute // TypeDefIndex: 1313
{
	// Fields
	private string eventName; // 0x10
	public static readonly DefaultEventAttribute Default; // 0x0

	// Methods
	public void .ctor(string name); // 0x100691208
	private static void .cctor(); // 0x100691234
	public string get_Name(); // 0x10069129C
	public override bool Equals(object o); // 0x1006912A4
	public override int GetHashCode(); // 0x100691350
}

// Namespace: System.ComponentModel
public sealed class DefaultPropertyAttribute : Attribute // TypeDefIndex: 1314
{
	// Fields
	private string property_name; // 0x10
	public static readonly DefaultPropertyAttribute Default; // 0x0

	// Methods
	public void .ctor(string name); // 0x100691358
	private static void .cctor(); // 0x100691384
	public string get_Name(); // 0x1006913EC
	public override bool Equals(object o); // 0x1006913F4
	public override int GetHashCode(); // 0x1006914A0
}

// Namespace: System.ComponentModel
public class DefaultValueAttribute : Attribute // TypeDefIndex: 1315
{
	// Fields
	private object DefaultValue; // 0x10

	// Methods
	public void .ctor(bool value); // 0x1006914A8
	public void .ctor(int value); // 0x100691524
	public void .ctor(object value); // 0x1006915A0
	public void .ctor(string value); // 0x1006915CC
	public virtual object get_Value(); // 0x1006915F8
	public override bool Equals(object obj); // 0x100691600
	public override int GetHashCode(); // 0x100691720
}

// Namespace: System.ComponentModel
public class DescriptionAttribute : Attribute // TypeDefIndex: 1316
{
	// Fields
	private string desc; // 0x10
	public static readonly DescriptionAttribute Default; // 0x0

	// Methods
	public void .ctor(); // 0x100691784
	public void .ctor(string name); // 0x100691800
	private static void .cctor(); // 0x10069182C
	public virtual string get_Description(); // 0x10069188C
	protected string get_DescriptionValue(); // 0x100691894
	public override bool Equals(object obj); // 0x10069189C
	public override int GetHashCode(); // 0x1006919C0
	public override bool IsDefaultAttribute(); // 0x1006919DC
}

// Namespace: System.ComponentModel
public sealed class DesignerAttribute : Attribute // TypeDefIndex: 1317
{
	// Fields
	private string name; // 0x10
	private string basetypename; // 0x18

	// Methods
	public void .ctor(string designerTypeName, Type designerBaseType); // 0x100692554
	public void .ctor(string designerTypeName, string designerBaseTypeName); // 0x1006925C0
	public string get_DesignerBaseTypeName(); // 0x100692648
	public string get_DesignerTypeName(); // 0x100692650
	public override object get_TypeId(); // 0x100692658
	public override bool Equals(object obj); // 0x10069274C
	public override int GetHashCode(); // 0x1006928A8
}

// Namespace: System.ComponentModel
public sealed class DesignerCategoryAttribute : Attribute // TypeDefIndex: 1318
{
	// Fields
	private string category; // 0x10
	public static readonly DesignerCategoryAttribute Component; // 0x0
	public static readonly DesignerCategoryAttribute Form; // 0x8
	public static readonly DesignerCategoryAttribute Generic; // 0x10
	public static readonly DesignerCategoryAttribute Default; // 0x18

	// Methods
	public void .ctor(string category); // 0x100692930
	private static void .cctor(); // 0x10069295C
	public override object get_TypeId(); // 0x100692A88
	public string get_Category(); // 0x100692A90
	public override bool Equals(object obj); // 0x100692A98
	public override int GetHashCode(); // 0x100692B54
	public override bool IsDefaultAttribute(); // 0x100692B70
}

// Namespace: System.ComponentModel
public sealed class DesignerSerializationVisibilityAttribute : Attribute // TypeDefIndex: 1319
{
	// Fields
	private DesignerSerializationVisibility visibility; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Default; // 0x0
	public static readonly DesignerSerializationVisibilityAttribute Content; // 0x8
	public static readonly DesignerSerializationVisibilityAttribute Hidden; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Visible; // 0x18

	// Methods
	public void .ctor(DesignerSerializationVisibility vis); // 0x100692C1C
	private static void .cctor(); // 0x100692C48
	public DesignerSerializationVisibility get_Visibility(); // 0x100692D24
	public override bool Equals(object obj); // 0x100692D2C
	public override int GetHashCode(); // 0x100692DBC
	public override bool IsDefaultAttribute(); // 0x100692E58
}

// Namespace: System.ComponentModel
public sealed class DesignerSerializationVisibility : Enum // TypeDefIndex: 1320
{
	// Fields
	public int value__; // 0x10
	public const DesignerSerializationVisibility Hidden = 0; // 0x0
	public const DesignerSerializationVisibility Visible = 1; // 0x0
	public const DesignerSerializationVisibility Content = 2; // 0x0

}

// Namespace: System.ComponentModel.Design
public interface IDesigner : IDisposable // TypeDefIndex: 1321
{
}

// Namespace: System.ComponentModel.Design
public interface IReferenceService // TypeDefIndex: 1322
{
	// Methods
	public abstract string GetName(object reference); // 0
	public abstract object GetReference(string name); // 0
	public abstract object[] GetReferences(Type baseType); // 0
}

// Namespace: System.ComponentModel.Design
public interface IRootDesigner : IDisposable, IDesigner // TypeDefIndex: 1323
{
}

// Namespace: System.ComponentModel.Design
public interface ITypeDescriptorFilterService // TypeDefIndex: 1324
{
	// Methods
	public abstract bool FilterAttributes(IComponent component, IDictionary attributes); // 0
	public abstract bool FilterEvents(IComponent component, IDictionary events); // 0
	public abstract bool FilterProperties(IComponent component, IDictionary properties); // 0
}

// Namespace: System.ComponentModel.Design
public interface ITypeResolutionService // TypeDefIndex: 1325
{
	// Methods
	public abstract Type GetType(string name); // 0
}

// Namespace: System.ComponentModel.Design.Serialization
public sealed class DesignerSerializerAttribute : Attribute // TypeDefIndex: 1326
{
	// Fields
	private string serializerTypeName; // 0x10
	private string baseSerializerTypeName; // 0x18

	// Methods
	public void .ctor(string serializerTypeName, string baseSerializerTypeName); // 0x100691A50
	public override object get_TypeId(); // 0x100691A88
}

// Namespace: System.ComponentModel.Design.Serialization
public sealed class InstanceDescriptor // TypeDefIndex: 1327
{
	// Fields
	private MemberInfo member; // 0x10
	private ICollection arguments; // 0x18
	private bool isComplete; // 0x20

	// Methods
	public void .ctor(MemberInfo member, ICollection arguments); // 0x10068FFA8
	public void .ctor(MemberInfo member, ICollection arguments, bool isComplete); // 0x100691B2C
	private void ValidateMember(MemberInfo member, ICollection arguments); // 0x100691B78
	public object Invoke(); // 0x1006920C0
}

// Namespace: System.ComponentModel.Design.Serialization
public sealed class RootDesignerSerializerAttribute : Attribute // TypeDefIndex: 1328
{
	// Fields
	private string serializer; // 0x10
	private string baseserializer; // 0x18
	private bool reload; // 0x20

	// Methods
	public void .ctor(string serializerTypeName, string baseSerializerTypeName, bool reloadable); // 0x100692470
	public override object get_TypeId(); // 0x1006924B0
}

// Namespace: System.ComponentModel
public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1329
{
	// Methods
	public void .ctor(); // 0x100692EDC
	internal override bool get_SupportHex(); // 0x100692F64
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x100692F6C
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x100692FFC
}

// Namespace: System.ComponentModel
public sealed class EditorAttribute : Attribute // TypeDefIndex: 1330
{
	// Fields
	private string name; // 0x10
	private string basename; // 0x18

	// Methods
	public string get_EditorBaseTypeName(); // 0x100693080
	public string get_EditorTypeName(); // 0x100693088
	public override object get_TypeId(); // 0x100693090
	public override bool Equals(object obj); // 0x100693098
	public override int GetHashCode(); // 0x1006931F4
}

// Namespace: System.ComponentModel
public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1331
{
	// Fields
	private EditorBrowsableState state; // 0x10

	// Methods
	public void .ctor(EditorBrowsableState state); // 0x10069327C
	public EditorBrowsableState get_State(); // 0x1006932A8
	public override bool Equals(object obj); // 0x1006932B0
	public override int GetHashCode(); // 0x100693340
}

// Namespace: System.ComponentModel
public sealed class EditorBrowsableState : Enum // TypeDefIndex: 1332
{
	// Fields
	public int value__; // 0x10
	public const EditorBrowsableState Always = 0; // 0x0
	public const EditorBrowsableState Never = 1; // 0x0
	public const EditorBrowsableState Advanced = 2; // 0x0

}

// Namespace: System.ComponentModel
public class EnumConverter : TypeConverter // TypeDefIndex: 1333
{
	// Fields
	private Type type; // 0x10
	private StandardValuesCollection stdValues; // 0x18

	// Methods
	public void .ctor(Type type); // 0x1006933DC
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x100693408
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x1006934D4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x100694450
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10069451C
	public override bool IsValid(ITypeDescriptorContext context, object value); // 0x100694A20
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x100694AA0
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x100694AA8
	public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x100694AC0
	protected virtual IComparer get_Comparer(); // 0x100694B80
	protected Type get_EnumType(); // 0x100694BE4
	protected StandardValuesCollection get_Values(); // 0x100694BEC
	protected void set_Values(StandardValuesCollection value); // 0x100694BF4
	private ArgumentException CreateValueNotValidException(object value); // 0x10069414C
	private bool get_IsFlags(); // 0x100694084
}

// Namespace: 
private class EnumComparer : IComparer // TypeDefIndex: 1334
{
	// Methods
	public void .ctor(); // 0x100694BDC
	private int System.Collections.IComparer.Compare(object compareObject1, object compareObject2); // 0x100694BFC
}

// Namespace: System.ComponentModel
public class EventDescriptorCollection : IList, ICollection, IEnumerable // TypeDefIndex: 1335
{
	// Fields
	private ArrayList eventList; // 0x10
	private bool isReadOnly; // 0x18
	public static readonly EventDescriptorCollection Empty; // 0x0

	// Methods
	private void .ctor(); // 0x100694E44
	internal void .ctor(ArrayList list); // 0x10068F010
	public void .ctor(EventDescriptor[] events); // 0x100694EAC
	public void .ctor(EventDescriptor[] events, bool readOnly); // 0x100694EB4
	private static void .cctor(); // 0x10069503C
	private void System.Collections.IList.Clear(); // 0x1006950A4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10069515C
	private void System.Collections.IList.RemoveAt(int index); // 0x1006951B8
	private int System.Collections.ICollection.get_Count(); // 0x100695284
	private int System.Collections.IList.Add(object value); // 0x1006952DC
	private bool System.Collections.IList.Contains(object value); // 0x100695344
	private int System.Collections.IList.IndexOf(object value); // 0x100695414
	private void System.Collections.IList.Insert(int index, object value); // 0x1006954E4
	private void System.Collections.IList.Remove(object value); // 0x100695624
	private bool System.Collections.IList.get_IsFixedSize(); // 0x100695754
	private bool System.Collections.IList.get_IsReadOnly(); // 0x10069575C
	private object System.Collections.IList.get_Item(int index); // 0x100695764
	private void System.Collections.IList.set_Item(int index, object value); // 0x1006957C8
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x100695894
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x100695904
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10069590C
	public int Add(EventDescriptor value); // 0x100694F78
	public void Clear(); // 0x1006950A8
	public bool Contains(EventDescriptor value); // 0x1006953AC
	public virtual EventDescriptor Find(string name, bool ignoreCase); // 0x100695914
	public IEnumerator GetEnumerator(); // 0x100695160
	public int IndexOf(EventDescriptor value); // 0x10069547C
	public void Insert(int index, EventDescriptor value); // 0x100695554
	public void Remove(EventDescriptor value); // 0x10069568C
	public void RemoveAt(int index); // 0x1006951BC
	internal EventDescriptorCollection Filter(Attribute[] attributes); // 0x100695D10
	public int get_Count(); // 0x100695288
	public virtual EventDescriptor get_Item(string name); // 0x1006960B0
}

// Namespace: System.ComponentModel
public abstract class EventDescriptor : MemberDescriptor // TypeDefIndex: 1336
{
	// Methods
	protected void .ctor(MemberDescriptor desc, Attribute[] attrs); // 0x100694D8C
	protected void .ctor(string str, Attribute[] attrs); // 0x100694DD4
	public abstract Type get_EventType(); // 0
}

// Namespace: System.ComponentModel
internal class ListEntry // TypeDefIndex: 1337
{
	// Fields
	public object key; // 0x10
	public Delegate value; // 0x18
	public ListEntry next; // 0x20

	// Methods
	public void .ctor(); // 0x100696130
}

// Namespace: System.ComponentModel
public sealed class EventHandlerList : IDisposable // TypeDefIndex: 1338
{
	// Fields
	private ListEntry entries; // 0x10
	private Delegate null_entry; // 0x18

	// Methods
	public void .ctor(); // 0x10068D090
	public Delegate get_Item(object key); // 0x10068D49C
	public void AddHandler(object key, Delegate value); // 0x10068CF28
	public void RemoveHandler(object key, Delegate value); // 0x10068D034
	public void Dispose(); // 0x100696138
	private ListEntry FindEntry(object key); // 0x100696110
}

// Namespace: System.ComponentModel
public class GuidConverter : TypeConverter // TypeDefIndex: 1339
{
	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x100696140
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x1006961D4
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x1006962A0
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x1006964D4
}

// Namespace: System.ComponentModel
public interface IComNativeDescriptorHandler // TypeDefIndex: 1340
{
}

// Namespace: System.ComponentModel
public interface IComponent : IDisposable // TypeDefIndex: 1341
{
	// Methods
	public abstract void add_Disposed(EventHandler value); // 0
	public abstract void remove_Disposed(EventHandler value); // 0
	public abstract ISite get_Site(); // 0
}

// Namespace: System.ComponentModel
public interface IContainer : IDisposable // TypeDefIndex: 1342
{
	// Methods
	public abstract ComponentCollection get_Components(); // 0
	public abstract void Remove(IComponent component); // 0
}

// Namespace: System.ComponentModel
public interface ICustomTypeDescriptor // TypeDefIndex: 1343
{
	// Methods
	public abstract AttributeCollection GetAttributes(); // 0
	public abstract string GetClassName(); // 0
	public abstract string GetComponentName(); // 0
	public abstract TypeConverter GetConverter(); // 0
	public abstract EventDescriptor GetDefaultEvent(); // 0
	public abstract PropertyDescriptor GetDefaultProperty(); // 0
	public abstract object GetEditor(Type editorBaseType); // 0
	public abstract EventDescriptorCollection GetEvents(); // 0
	public abstract EventDescriptorCollection GetEvents(Attribute[] arr); // 0
	public abstract PropertyDescriptorCollection GetProperties(); // 0
	public abstract PropertyDescriptorCollection GetProperties(Attribute[] arr); // 0
}

// Namespace: System.ComponentModel
public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1344
{
	// Methods
	public void .ctor(); // 0x100697150
	internal override bool get_SupportHex(); // 0x1006971D8
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x1006971E0
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x100697270
	internal override object ConvertFromString(string value, int fromBase); // 0x1006972F4
}

// Namespace: System.ComponentModel
public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1345
{
	// Methods
	public void .ctor(); // 0x100697394
	internal override bool get_SupportHex(); // 0x10069741C
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x100697424
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x1006974B4
	internal override object ConvertFromString(string value, int fromBase); // 0x100697538
}

// Namespace: System.ComponentModel
public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1346
{
	// Methods
	public void .ctor(); // 0x1006975D8
	internal override bool get_SupportHex(); // 0x100697660
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x100697668
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x1006976F8
	internal override object ConvertFromString(string value, int fromBase); // 0x10069777C
}

// Namespace: System.ComponentModel
public interface ISite : IServiceProvider // TypeDefIndex: 1347
{
	// Methods
	public abstract IContainer get_Container(); // 0
	public abstract string get_Name(); // 0
}

// Namespace: System.ComponentModel
public interface ISupportInitialize // TypeDefIndex: 1348
{
}

// Namespace: System.ComponentModel
public interface ISynchronizeInvoke // TypeDefIndex: 1349
{
	// Methods
	public abstract bool get_InvokeRequired(); // 0
	public abstract IAsyncResult BeginInvoke(Delegate method, object[] args); // 0
}

// Namespace: System.ComponentModel
public interface ITypeDescriptorContext : IServiceProvider // TypeDefIndex: 1350
{
	// Methods
	public abstract IContainer get_Container(); // 0
}

// Namespace: System.ComponentModel
public abstract class MemberDescriptor // TypeDefIndex: 1351
{
	// Fields
	private string name; // 0x10
	private Attribute[] attrs; // 0x18
	private AttributeCollection attrCollection; // 0x20
	private static IComparer default_comparer; // 0x0

	// Methods
	protected void .ctor(string name, Attribute[] attrs); // 0x100694E0C
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs); // 0x100694D90
	protected virtual Attribute[] get_AttributeArray(); // 0x10069781C
	protected virtual void FillAttributes(IList attributeList); // 0x100697D84
	public virtual AttributeCollection get_Attributes(); // 0x100697D88
	protected virtual AttributeCollection CreateAttributeCollection(); // 0x100697DDC
	public virtual string get_Name(); // 0x100697E6C
	public override int GetHashCode(); // 0x100697E74
	public override bool Equals(object obj); // 0x100697E7C
	internal static IComparer get_DefaultComparer(); // 0x100697F4C
}

// Namespace: 
private class MemberDescriptorComparer : IComparer // TypeDefIndex: 1352
{
	// Methods
	public void .ctor(); // 0x100697FD4
	public int Compare(object x, object y); // 0x100697FDC
}

// Namespace: System.ComponentModel
public class NullableConverter : TypeConverter // TypeDefIndex: 1353
{
	// Fields
	private Type nullableType; // 0x10
	private Type underlyingType; // 0x18
	private TypeConverter underlyingTypeConverter; // 0x20

	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x100698134
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x1006981D8
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10069827C
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x100698410
	public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues); // 0x10069855C
	public override bool GetCreateInstanceSupported(ITypeDescriptorContext context); // 0x1006985E4
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes); // 0x100698664
	public override bool GetPropertiesSupported(ITypeDescriptorContext context); // 0x100698700
	public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x100698778
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x1006988BC
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x10069893C
	public override bool IsValid(ITypeDescriptorContext context, object value); // 0x1006989BC
}

// Namespace: System.ComponentModel
public class PropertyDescriptorCollection : IDictionary, IList, ICollection, IEnumerable // TypeDefIndex: 1354
{
	// Fields
	public static readonly PropertyDescriptorCollection Empty; // 0x0
	private ArrayList properties; // 0x10
	private bool readOnly; // 0x18

	// Methods
	public void .ctor(PropertyDescriptor[] properties); // 0x10068A6A0
	public void .ctor(PropertyDescriptor[] properties, bool readOnly); // 0x10068F798
	private void .ctor(); // 0x100698B40
	private static void .cctor(); // 0x100698B48
	private int System.Collections.IList.Add(object value); // 0x100698BB4
	private void System.Collections.IDictionary.Add(object key, object value); // 0x100698C1C
	private void System.Collections.IList.Clear(); // 0x100698CE0
	private void System.Collections.IDictionary.Clear(); // 0x100698D8C
	private bool System.Collections.IList.Contains(object value); // 0x100698D90
	private bool System.Collections.IDictionary.Contains(object value); // 0x100698E60
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100698EC8
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator(); // 0x100698F14
	private int System.Collections.IList.IndexOf(object value); // 0x100698F68
	private void System.Collections.IList.Insert(int index, object value); // 0x100699038
	private void System.Collections.IDictionary.Remove(object value); // 0x10069916C
	private void System.Collections.IList.Remove(object value); // 0x100699290
	private void System.Collections.IList.RemoveAt(int index); // 0x1006992F8
	private bool System.Collections.IList.get_IsFixedSize(); // 0x1006993B8
	private bool System.Collections.IList.get_IsReadOnly(); // 0x1006993C0
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x1006993C8
	private int System.Collections.ICollection.get_Count(); // 0x1006993D0
	private object System.Collections.ICollection.get_SyncRoot(); // 0x100699428
	private ICollection System.Collections.IDictionary.get_Keys(); // 0x100699430
	private ICollection System.Collections.IDictionary.get_Values(); // 0x1006997F0
	private object System.Collections.IDictionary.get_Item(object key); // 0x1006998F8
	private void System.Collections.IDictionary.set_Item(object key, object value); // 0x100699994
	private object System.Collections.IList.get_Item(int index); // 0x100699B44
	private void System.Collections.IList.set_Item(int index, object value); // 0x100699BA8
	public int Add(PropertyDescriptor value); // 0x10068A83C
	public void Clear(); // 0x100698CE4
	public bool Contains(PropertyDescriptor value); // 0x100698DF8
	public void CopyTo(Array array, int index); // 0x100699C68
	public virtual PropertyDescriptor Find(string name, bool ignoreCase); // 0x100699CD8
	public virtual IEnumerator GetEnumerator(); // 0x100699E8C
	public int IndexOf(PropertyDescriptor value); // 0x100698FD0
	public void Insert(int index, PropertyDescriptor value); // 0x1006990A8
	public void Remove(PropertyDescriptor value); // 0x1006991D4
	public void RemoveAt(int index); // 0x1006992FC
	private PropertyDescriptorCollection CloneCollection(); // 0x100699EE4
	public virtual PropertyDescriptorCollection Sort(string[] order); // 0x100699F98
	protected void InternalSort(IComparer ic); // 0x10069A070
	protected void InternalSort(string[] order); // 0x100699FD4
	private ArrayList ExtractItems(string[] names); // 0x10069A0E8
	internal PropertyDescriptorCollection Filter(Attribute[] attributes); // 0x100696860
	public int get_Count(); // 0x1006993D4
	public virtual PropertyDescriptor get_Item(string s); // 0x10069A38C
}

// Namespace: System.ComponentModel
public abstract class PropertyDescriptor : MemberDescriptor // TypeDefIndex: 1355
{
	// Methods
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs); // 0x100698A44
	protected void .ctor(string name, Attribute[] attrs); // 0x10068A928
	public abstract Type get_ComponentType(); // 0
	public abstract Type get_PropertyType(); // 0
	protected override void FillAttributes(IList attributeList); // 0x100698A48
	public override bool Equals(object obj); // 0x100698A4C
	public override int GetHashCode(); // 0x100698B38
}

// Namespace: System.ComponentModel
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1356
{
	// Fields
	private bool read_only; // 0x10
	public static readonly ReadOnlyAttribute No; // 0x0
	public static readonly ReadOnlyAttribute Yes; // 0x8
	public static readonly ReadOnlyAttribute Default; // 0x10

	// Methods
	public void .ctor(bool read_only); // 0x10069A3EC
	private static void .cctor(); // 0x10069A418
	public bool get_IsReadOnly(); // 0x10069A4C8
	public override int GetHashCode(); // 0x10069A4D0
	public override bool Equals(object o); // 0x10069A4DC
	public override bool IsDefaultAttribute(); // 0x10069A570
}

// Namespace: System.ComponentModel
public class RecommendedAsConfigurableAttribute : Attribute // TypeDefIndex: 1357
{
	// Fields
	private bool recommendedAsConfigurable; // 0x10
	public static readonly RecommendedAsConfigurableAttribute Default; // 0x0
	public static readonly RecommendedAsConfigurableAttribute No; // 0x8
	public static readonly RecommendedAsConfigurableAttribute Yes; // 0x10

	// Methods
	public void .ctor(bool recommendedAsConfigurable); // 0x10069A5E0
	private static void .cctor(); // 0x10069A60C
	public bool get_RecommendedAsConfigurable(); // 0x10069A6BC
	public override bool Equals(object obj); // 0x10069A6C4
	public override int GetHashCode(); // 0x10069A78C
	public override bool IsDefaultAttribute(); // 0x10069A798
}

// Namespace: System.ComponentModel
public class ReferenceConverter : TypeConverter // TypeDefIndex: 1358
{
	// Fields
	private Type reference_type; // 0x10

	// Methods
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10069A82C
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10069A8D4
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10069AE3C
	public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x10069B3C8
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x10069BC0C
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x10069BC14
	protected virtual bool IsValueAllowed(ITypeDescriptorContext context, object value); // 0x10069BC1C
}

// Namespace: System.ComponentModel
internal class ReflectionEventDescriptor : EventDescriptor // TypeDefIndex: 1359
{
	// Fields
	private Type _eventType; // 0x28
	private Type _componentType; // 0x30
	private EventInfo _eventInfo; // 0x38
	private MethodInfo add_method; // 0x40
	private MethodInfo remove_method; // 0x48

	// Methods
	public void .ctor(EventInfo eventInfo); // 0x10068EE68
	public void .ctor(Type componentType, EventDescriptor oldEventDescriptor, Attribute[] attrs); // 0x10069BC24
	public void .ctor(Type componentType, string name, Type type, Attribute[] attrs); // 0x10069BCF8
	public override Type get_EventType(); // 0x10069BD84
}

// Namespace: System.ComponentModel
internal class ReflectionPropertyDescriptor : PropertyDescriptor // TypeDefIndex: 1360
{
	// Fields
	private PropertyInfo _member; // 0x28
	private Type _componentType; // 0x30
	private Type _propertyType; // 0x38

	// Methods
	public void .ctor(Type componentType, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes); // 0x10069BD8C
	public void .ctor(Type componentType, string name, Type type, Attribute[] attributes); // 0x10069BDF8
	public void .ctor(PropertyInfo info); // 0x10068F6DC
	private PropertyInfo GetPropertyInfo(); // 0x10069BE44
	public override Type get_ComponentType(); // 0x10069C004
	public override Type get_PropertyType(); // 0x10069C00C
	protected override void FillAttributes(IList attributeList); // 0x10069C014
}

// Namespace: System.ComponentModel
public class RefreshEventArgs : EventArgs // TypeDefIndex: 1361
{
	// Fields
	private object component; // 0x10
	private Type type; // 0x18

	// Methods
	public void .ctor(object componentChanged); // 0x10069C8AC
	public void .ctor(Type typeChanged); // 0x10069C96C
}

// Namespace: System.ComponentModel
public class SByteConverter : BaseNumberConverter // TypeDefIndex: 1362
{
	// Methods
	internal override bool get_SupportHex(); // 0x10069CAF0
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x10069CAF8
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x10069CB88
	internal override object ConvertFromString(string value, int fromBase); // 0x10069CC0C
}

// Namespace: System.ComponentModel
public class SingleConverter : BaseNumberConverter // TypeDefIndex: 1363
{
	// Methods
	public void .ctor(); // 0x10069CCAC
	internal override bool get_SupportHex(); // 0x10069CD34
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x10069CD3C
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x10069CDCC
}

// Namespace: System.ComponentModel
public class StringConverter : TypeConverter // TypeDefIndex: 1364
{
	// Methods
	public void .ctor(); // 0x10069CE50
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10069CE58
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10069CEEC
}

// Namespace: System.ComponentModel
public class TimeSpanConverter : TypeConverter // TypeDefIndex: 1365
{
	// Methods
	public void .ctor(); // 0x10069CF90
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10069CF98
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x10069D02C
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10069D0F8
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10069D340
}

// Namespace: System.ComponentModel
public sealed class TypeConverterAttribute : Attribute // TypeDefIndex: 1366
{
	// Fields
	public static readonly TypeConverterAttribute Default; // 0x0
	private string converter_type; // 0x10

	// Methods
	public void .ctor(); // 0x10069E9B4
	public void .ctor(Type type); // 0x10069EA30
	private static void .cctor(); // 0x10069EA90
	public override bool Equals(object obj); // 0x10069EAF0
	public override int GetHashCode(); // 0x10069EBA4
	public string get_ConverterTypeName(); // 0x10069EB9C
}

// Namespace: System.ComponentModel
public class TypeConverter // TypeDefIndex: 1367
{
	// Methods
	public void .ctor(); // 0x10068B3BC
	public bool CanConvertFrom(Type sourceType); // 0x10069D5EC
	public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10068B458
	public bool CanConvertTo(Type destinationType); // 0x10069D64C
	public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x10068B520
	public object ConvertFrom(object o); // 0x10069D6AC
	public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10068B9F0
	public object ConvertFromInvariantString(string text); // 0x10069D964
	public object ConvertFromInvariantString(ITypeDescriptorContext context, string text); // 0x10069D974
	public object ConvertFromString(string text); // 0x10069DAAC
	public object ConvertFromString(ITypeDescriptorContext context, string text); // 0x10069DAB0
	public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text); // 0x10069DA38
	public object ConvertTo(object value, Type destinationType); // 0x10069DB74
	public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10068BD80
	public string ConvertToInvariantString(object value); // 0x10069DE4C
	public string ConvertToInvariantString(ITypeDescriptorContext context, object value); // 0x10069DE5C
	public string ConvertToString(object value); // 0x10069DFD8
	public string ConvertToString(ITypeDescriptorContext context, object value); // 0x10069E148
	public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x100694300
	protected Exception GetConvertFromException(object value); // 0x10069D764
	protected Exception GetConvertToException(object value, Type destinationType); // 0x10069DBE0
	public object CreateInstance(IDictionary propertyValues); // 0x10069E2C4
	public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues); // 0x1006985DC
	public bool GetCreateInstanceSupported(); // 0x10069E324
	public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context); // 0x10069865C
	public PropertyDescriptorCollection GetProperties(object value); // 0x10069E374
	public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value); // 0x10069E384
	public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes); // 0x1006986F8
	public bool GetPropertiesSupported(); // 0x10069E4A4
	public virtual bool GetPropertiesSupported(ITypeDescriptorContext context); // 0x10069E4F4
	public ICollection GetStandardValues(); // 0x10069E4FC
	public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context); // 0x1006988B4
	public bool GetStandardValuesExclusive(); // 0x10069E54C
	public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context); // 0x100698934
	public bool GetStandardValuesSupported(); // 0x10069E59C
	public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context); // 0x1006989B4
	public bool IsValid(object value); // 0x10069E5EC
	public virtual bool IsValid(ITypeDescriptorContext context, object value); // 0x100698A3C
	protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, string[] names); // 0x10069E64C
}

// Namespace: 
public class StandardValuesCollection : ICollection, IEnumerable // TypeDefIndex: 1368
{
	// Fields
	private ICollection values; // 0x10

	// Methods
	public void .ctor(ICollection values); // 0x10068C1E4
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10069E6AC
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10069E7BC
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10069E8B0
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10069E8B8
	private int System.Collections.ICollection.get_Count(); // 0x10069E8C0
	public void CopyTo(Array array, int index); // 0x10069E6B0
	public IEnumerator GetEnumerator(); // 0x10069E7C0
	public int get_Count(); // 0x10069E8C4
}

// Namespace: System.ComponentModel
public abstract class TypeDescriptionProvider // TypeDefIndex: 1369
{
	// Fields
	private TypeDescriptionProvider _parent; // 0x10

	// Methods
	protected void .ctor(); // 0x10069EBC0
	protected void .ctor(TypeDescriptionProvider parent); // 0x10069EBC8
	public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args); // 0x10069EBF4
}

// Namespace: System.ComponentModel
public sealed class TypeDescriptor // TypeDefIndex: 1370
{
	// Fields
	private static readonly object creatingDefaultConverters; // 0x0
	private static ArrayList defaultConverters; // 0x8
	private static IComNativeDescriptorHandler descriptorHandler; // 0x10
	private static Hashtable componentTable; // 0x18
	private static Hashtable typeTable; // 0x20
	private static Hashtable editors; // 0x28
	private static object typeDescriptionProvidersLock; // 0x30
	private static Dictionary`2<Type, LinkedList`1<TypeDescriptionProvider>> typeDescriptionProviders; // 0x38
	private static object componentDescriptionProvidersLock; // 0x40
	private static Dictionary`2<WeakObjectWrapper, LinkedList`1<TypeDescriptionProvider>> componentDescriptionProviders; // 0x48
	private static EventHandler onDispose; // 0x50
	private static RefreshEventHandler Refreshed; // 0x58

	// Methods
	private void .ctor(); // 0x10069EC9C
	private static void .cctor(); // 0x10069ECA4
	public static void add_Refreshed(RefreshEventHandler value); // 0x10069EE8C
	public static void remove_Refreshed(RefreshEventHandler value); // 0x10069EF90
	public static Type get_ComObjectType(); // 0x10069F094
	public static TypeDescriptionProvider AddAttributes(object instance, Attribute[] attributes); // 0x10069F0E8
	public static TypeDescriptionProvider AddAttributes(Type type, Attribute[] attributes); // 0x10069F734
	public static void AddProvider(TypeDescriptionProvider provider, object instance); // 0x10069F4A4
	public static void AddProvider(TypeDescriptionProvider provider, Type type); // 0x10069FA9C
	public static object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args); // 0x1006A0110
	public static void AddEditorTable(Type editorBaseType, Hashtable table); // 0x1006A031C
	public static IDesigner CreateDesigner(IComponent component, Type designerBaseType); // 0x1006A04E4
	public static EventDescriptor CreateEvent(Type componentType, string name, Type type, Attribute[] attributes); // 0x1006A0D58
	public static EventDescriptor CreateEvent(Type componentType, EventDescriptor oldEventDescriptor, Attribute[] attributes); // 0x1006A0DE0
	public static PropertyDescriptor CreateProperty(Type componentType, string name, Type type, Attribute[] attributes); // 0x1006A0E58
	public static PropertyDescriptor CreateProperty(Type componentType, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes); // 0x1006A0EDC
	public static AttributeCollection GetAttributes(Type componentType); // 0x10069706C
	public static AttributeCollection GetAttributes(object component); // 0x1006A0968
	public static AttributeCollection GetAttributes(object component, bool noCustomTypeDesc); // 0x1006A1120
	public static string GetClassName(object component); // 0x1006A1768
	public static string GetClassName(object component, bool noCustomTypeDesc); // 0x1006A17D0
	public static string GetComponentName(object component); // 0x1006A1BA8
	public static string GetComponentName(object component, bool noCustomTypeDesc); // 0x1006A1C10
	public static string GetFullComponentName(object component); // 0x1006A1FD0
	public static string GetClassName(Type componentType); // 0x1006A2024
	public static TypeConverter GetConverter(object component); // 0x1006A2078
	public static TypeConverter GetConverter(object component, bool noCustomTypeDesc); // 0x1006A20E0
	private static ArrayList get_DefaultConverters(); // 0x1006A2EAC
	public static TypeConverter GetConverter(Type type); // 0x1006A3F98
	private static Type FindDefaultConverterType(Type type); // 0x1006A25E8
	public static EventDescriptor GetDefaultEvent(Type componentType); // 0x1006A42EC
	public static EventDescriptor GetDefaultEvent(object component); // 0x1006A435C
	public static EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc); // 0x1006A43C4
	public static PropertyDescriptor GetDefaultProperty(Type componentType); // 0x1006A46B8
	public static PropertyDescriptor GetDefaultProperty(object component); // 0x1006A4728
	public static PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc); // 0x1006A4790
	internal static object CreateEditor(Type t, Type componentType); // 0x1006A4A84
	private static object FindEditorInTable(Type componentType, Type editorBaseType, Hashtable table); // 0x1006A4C44
	public static object GetEditor(Type componentType, Type editorBaseType); // 0x1006A4FB0
	public static object GetEditor(object component, Type editorBaseType); // 0x1006A52E0
	public static object GetEditor(object component, Type editorBaseType, bool noCustomTypeDesc); // 0x1006A5358
	public static EventDescriptorCollection GetEvents(object component); // 0x1006A57A8
	public static EventDescriptorCollection GetEvents(Type componentType); // 0x1006A5B28
	public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes); // 0x1006A5C10
	public static EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc); // 0x1006A5810
	public static EventDescriptorCollection GetEvents(Type componentType, Attribute[] attributes); // 0x1006A5B90
	public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes, bool noCustomTypeDesc); // 0x1006A5C88
	public static PropertyDescriptorCollection GetProperties(object component); // 0x1006A5F94
	public static PropertyDescriptorCollection GetProperties(Type componentType); // 0x1006A6340
	public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes); // 0x10068DCE4
	public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes, bool noCustomTypeDesc); // 0x1006A6428
	public static PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc); // 0x1006A5FFC
	public static PropertyDescriptorCollection GetProperties(Type componentType, Attribute[] attributes); // 0x1006A63A8
	public static TypeDescriptionProvider GetProvider(object instance); // 0x10069F1EC
	public static TypeDescriptionProvider GetProvider(Type type); // 0x10069F838
	public static Type GetReflectionType(object instance); // 0x1006A6790
	public static Type GetReflectionType(Type type); // 0x1006A680C
	public static void CreateAssociation(object primary, object secondary); // 0x1006A6884
	public static object GetAssociation(Type type, object primary); // 0x1006A68D8
	public static void RemoveAssociation(object primary, object secondary); // 0x1006A692C
	public static void RemoveAssociations(object primary); // 0x1006A6980
	public static void RemoveProvider(TypeDescriptionProvider provider, object instance); // 0x1006A69D4
	public static void RemoveProvider(TypeDescriptionProvider provider, Type type); // 0x1006A6D2C
	private static void RemoveProvider(TypeDescriptionProvider provider, LinkedList`1<TypeDescriptionProvider> plist); // 0x1006A6C30
	public static void SortDescriptorArray(IList infos); // 0x1006A6F68
	public static IComNativeDescriptorHandler get_ComNativeDescriptorHandler(); // 0x1006A7464
	public static void set_ComNativeDescriptorHandler(IComNativeDescriptorHandler value); // 0x1006A74CC
	public static void Refresh(Assembly assembly); // 0x1006A7538
	public static void Refresh(Module module); // 0x1006A761C
	public static void Refresh(object component); // 0x10069FD98
	public static void Refresh(Type type); // 0x10069FF54
	private static void OnComponentDisposed(object sender, EventArgs args); // 0x1006A7700
	internal static ComponentInfo GetComponentInfo(IComponent com); // 0x1006A1460
	internal static TypeInfo GetTypeInfo(Type type); // 0x1006A0F54
	private static Type GetTypeFromName(IComponent component, string typeName); // 0x1006A09D0
}

// Namespace: 
private sealed class AttributeProvider : TypeDescriptionProvider // TypeDefIndex: 1371
{
	// Fields
	private Attribute[] attributes; // 0x18

	// Methods
	public void .ctor(Attribute[] attributes, TypeDescriptionProvider parent); // 0x10069F46C
}

// Namespace: 
private sealed class WrappedTypeDescriptionProvider : TypeDescriptionProvider // TypeDefIndex: 1372
{
	// Fields
	private TypeDescriptionProvider <Wrapped>k__BackingField; // 0x18

	// Methods
	public void .ctor(TypeDescriptionProvider wrapped); // 0x1006A6764
	public TypeDescriptionProvider get_Wrapped(); // 0x1006A7880
	private void set_Wrapped(TypeDescriptionProvider value); // 0x1006A7878
	public override object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args); // 0x1006A7888
}

// Namespace: 
private sealed class DefaultTypeDescriptionProvider : TypeDescriptionProvider // TypeDefIndex: 1373
{
	// Methods
	public void .ctor(); // 0x1006A675C
}

// Namespace: System.ComponentModel
internal abstract class Info // TypeDefIndex: 1374
{
	// Fields
	private Type _infoType; // 0x10
	private EventDescriptor _defaultEvent; // 0x18
	private bool _gotDefaultEvent; // 0x20
	private PropertyDescriptor _defaultProperty; // 0x28
	private bool _gotDefaultProperty; // 0x30
	private AttributeCollection _attributes; // 0x38

	// Methods
	public void .ctor(Type infoType); // 0x10068DDB8
	public abstract AttributeCollection GetAttributes(); // 0
	public abstract EventDescriptorCollection GetEvents(); // 0
	public abstract PropertyDescriptorCollection GetProperties(); // 0
	public Type get_InfoType(); // 0x100696780
	public EventDescriptorCollection GetEvents(Attribute[] attributes); // 0x100696788
	public PropertyDescriptorCollection GetProperties(Attribute[] attributes); // 0x1006967F4
	public EventDescriptor GetDefaultEvent(); // 0x100696C90
	public PropertyDescriptor GetDefaultProperty(); // 0x100696E7C
	protected AttributeCollection GetAttributes(IComponent comp); // 0x10068DDEC
}

// Namespace: System.ComponentModel
internal class ComponentInfo : Info // TypeDefIndex: 1375
{
	// Fields
	private IComponent _component; // 0x40
	private EventDescriptorCollection _events; // 0x48
	private PropertyDescriptorCollection _properties; // 0x50

	// Methods
	public void .ctor(IComponent component); // 0x10068DD64
	public override AttributeCollection GetAttributes(); // 0x10068DDE4
	public override EventDescriptorCollection GetEvents(); // 0x10068E948
	public override PropertyDescriptorCollection GetProperties(); // 0x10068F08C
}

// Namespace: System.ComponentModel
internal class TypeInfo : Info // TypeDefIndex: 1376
{
	// Fields
	private EventDescriptorCollection _events; // 0x40
	private PropertyDescriptorCollection _properties; // 0x48

	// Methods
	public void .ctor(Type t); // 0x1006A784C
	public override AttributeCollection GetAttributes(); // 0x1006A7930
	public override EventDescriptorCollection GetEvents(); // 0x1006A7938
	public override PropertyDescriptorCollection GetProperties(); // 0x1006A7AC0
}

// Namespace: System.ComponentModel
public class UInt16Converter : BaseNumberConverter // TypeDefIndex: 1377
{
	// Methods
	internal override bool get_SupportHex(); // 0x1006A7ECC
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x1006A7ED4
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x1006A7F64
	internal override object ConvertFromString(string value, int fromBase); // 0x1006A7FE8
}

// Namespace: System.ComponentModel
public class UInt32Converter : BaseNumberConverter // TypeDefIndex: 1378
{
	// Methods
	internal override bool get_SupportHex(); // 0x1006A8088
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x1006A8090
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x1006A8120
	internal override object ConvertFromString(string value, int fromBase); // 0x1006A81A4
}

// Namespace: System.ComponentModel
public class UInt64Converter : BaseNumberConverter // TypeDefIndex: 1379
{
	// Methods
	internal override bool get_SupportHex(); // 0x1006A8244
	internal override string ConvertToString(object value, NumberFormatInfo format); // 0x1006A824C
	internal override object ConvertFromString(string value, NumberFormatInfo format); // 0x1006A82DC
	internal override object ConvertFromString(string value, int fromBase); // 0x1006A8360
}

// Namespace: System.ComponentModel
internal sealed class WeakObjectWrapper // TypeDefIndex: 1380
{
	// Fields
	private int <TargetHashCode>k__BackingField; // 0x10
	private WeakReference <Weak>k__BackingField; // 0x18

	// Methods
	public void .ctor(object target); // 0x10069FCEC
	public int get_TargetHashCode(); // 0x1006A8410
	private void set_TargetHashCode(int value); // 0x1006A8400
	public WeakReference get_Weak(); // 0x1006A8418
	private void set_Weak(WeakReference value); // 0x1006A8408
}

// Namespace: System.ComponentModel
internal sealed class WeakObjectWrapperComparer : EqualityComparer`1<WeakObjectWrapper> // TypeDefIndex: 1381
{
	// Methods
	public void .ctor(); // 0x10069EE1C
	public override bool Equals(WeakObjectWrapper x, WeakObjectWrapper y); // 0x1006A8420
	public override int GetHashCode(WeakObjectWrapper obj); // 0x1006A8508
}

// Namespace: System.ComponentModel
public class Win32Exception : ExternalException // TypeDefIndex: 1382
{
	// Fields
	private int native_error_code; // 0x60

	// Methods
	public void .ctor(); // 0x1006A851C
	public void .ctor(int error); // 0x1006A85B4
	public void .ctor(int error, string message); // 0x1006A85F0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006A8620
	public int get_NativeErrorCode(); // 0x1006A86B8
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1006A86C0
	internal static string W32ErrorMessage(int error_code); // 0x1006A85AC
}

// Namespace: System.Configuration
public class ConfigurationException : SystemException // TypeDefIndex: 1383
{
	// Fields
	private readonly string filename; // 0x60
	private readonly int line; // 0x68

	// Methods
	public void .ctor(); // 0x1006A8780
	public void .ctor(string message); // 0x1006A87B0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006A87B8
	public void .ctor(string message, Exception inner); // 0x1006A886C
	public void .ctor(string message, XmlNode node); // 0x1006A8874
	public void .ctor(string message, Exception inner, XmlNode node); // 0x1006A8C78
	public void .ctor(string message, string filename, int line); // 0x1006A8CB8
	public virtual string get_BareMessage(); // 0x1006A8CF4
	public override string get_Message(); // 0x1006A8CFC
	public static string GetXmlNodeFilename(XmlNode node); // 0x1006A88B4
	public static int GetXmlNodeLineNumber(XmlNode node); // 0x1006A8AAC
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x1006A91C8
}

// Namespace: System.Configuration
public sealed class ConfigurationSettings // TypeDefIndex: 1384
{
	// Fields
	private static IConfigurationSystem config; // 0x0
	private static object lockobj; // 0x8

	// Methods
	private static void .cctor(); // 0x1006A9278
	public static object GetConfig(string sectionName); // 0x1006A937C
}

// Namespace: System.Configuration
internal class DefaultConfig : IConfigurationSystem // TypeDefIndex: 1385
{
	// Fields
	private static readonly DefaultConfig instance; // 0x0

	// Methods
	private void .ctor(); // 0x1006A93E8
	private static void .cctor(); // 0x1006A93F0
	public static DefaultConfig GetInstance(); // 0x1006A9314
}

// Namespace: System.Configuration
public interface IConfigurationSectionHandler // TypeDefIndex: 1386
{
	// Methods
	public abstract object Create(object parent, object configContext, XmlNode section); // 0
}

// Namespace: System.Configuration
public interface IConfigurationSystem // TypeDefIndex: 1387
{
}

// Namespace: System.Configuration
internal interface IConfigXmlNode // TypeDefIndex: 1388
{
	// Methods
	public abstract string get_Filename(); // 0
	public abstract int get_LineNumber(); // 0
}

// Namespace: System
internal class DefaultUriParser : UriParser // TypeDefIndex: 1389
{
	// Methods
	public void .ctor(); // 0x1006A9454
	public void .ctor(string scheme); // 0x1006A94BC
}

// Namespace: System.Diagnostics
public class CorrelationManager // TypeDefIndex: 1390
{
	// Fields
	private Stack op_stack; // 0x10

	// Methods
	internal void .ctor(); // 0x1006A9538
}

// Namespace: System.Diagnostics
public class DefaultTraceListener : TraceListener // TypeDefIndex: 1391
{
	// Fields
	private static readonly bool OnWin32; // 0x0
	private static readonly string MonoTracePrefix; // 0x8
	private static readonly string MonoTraceFile; // 0x10
	private string logFileName; // 0x40
	private bool assertUiEnabled; // 0x48

	// Methods
	public void .ctor(); // 0x1006A95A0
	private static void .cctor(); // 0x1006A96AC
	private static string GetPrefix(string var, string target); // 0x1006A97E4
	public void set_AssertUiEnabled(bool value); // 0x1006A98B4
	public void set_LogFileName(string value); // 0x1006A98BC
}

// Namespace: System.Diagnostics
internal sealed class DiagnosticsConfiguration // TypeDefIndex: 1392
{
	// Fields
	private static object settings; // 0x0

	// Methods
	public static IDictionary get_Settings(); // 0x1006A98C4
}

// Namespace: System.Diagnostics
public class DiagnosticsConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1393
{
	// Fields
	private TraceImplSettings configValues; // 0x10
	private IDictionary elementHandlers; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x10

	// Methods
	public void .ctor(); // 0x1006A9A94
	public virtual object Create(object parent, object configContext, XmlNode section); // 0x1006A9E3C
	private void AddAssertNode(IDictionary d, XmlNode node); // 0x1006AB5F0
	private void AddSwitchesNode(IDictionary d, XmlNode node); // 0x1006AC10C
	private static object GetSwitchValue(string name, string value); // 0x1006ACA2C
	private void AddTraceNode(IDictionary d, XmlNode node); // 0x1006ACB50
	private void AddTraceAttributes(IDictionary d, XmlNode node); // 0x1006ACFC8
	private TraceListenerCollection GetSharedListeners(IDictionary d); // 0x1006AAC7C
	private void AddSourcesNode(IDictionary d, XmlNode node); // 0x1006AD400
	private void AddTraceSource(IDictionary d, Hashtable sources, XmlNode node); // 0x1006AD9AC
	private void AddTraceListeners(IDictionary d, XmlNode listenersNode, TraceListenerCollection listeners); // 0x1006AAE4C
	private void AddTraceListener(IDictionary d, XmlNode child, XmlAttributeCollection attributes, TraceListenerCollection listeners); // 0x1006AE508
	private void RemoveTraceListener(string name); // 0x1006AEC88
	private string GetAttribute(XmlAttributeCollection attrs, string attr, bool required, XmlNode node); // 0x1006ABAC0
	private void ValidateAttribute(string attribute, string value, XmlNode node); // 0x1006AF3FC
	private void ValidateInvalidAttributes(XmlAttributeCollection c, XmlNode node); // 0x1006ABB88
	private void ThrowMissingAttribute(string attribute, XmlNode node); // 0x1006AF4CC
	private void ThrowUnrecognizedNode(XmlNode node); // 0x1006ACA34
	private void ThrowUnrecognizedElement(XmlNode node); // 0x1006AB51C
	private void ThrowUnrecognizedAttribute(string attribute, XmlNode node); // 0x1006AF574
}

// Namespace: 
private sealed class ElementHandler : MulticastDelegate // TypeDefIndex: 1394
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006A9E2C
	public virtual void Invoke(IDictionary d, XmlNode node); // 0x1006AB45C
	public virtual IAsyncResult BeginInvoke(IDictionary d, XmlNode node, AsyncCallback callback, object object); // 0x1006AF650
	public virtual void EndInvoke(IAsyncResult result); // 0x1006AF6AC
}

// Namespace: System.Diagnostics
public sealed class SourceLevels : Enum // TypeDefIndex: 1395
{
	// Fields
	public int value__; // 0x10
	public const SourceLevels Off = 0; // 0x0
	public const SourceLevels Critical = 1; // 0x0
	public const SourceLevels Error = 3; // 0x0
	public const SourceLevels Warning = 7; // 0x0
	public const SourceLevels Information = 15; // 0x0
	public const SourceLevels Verbose = 31; // 0x0
	public const SourceLevels ActivityTracing = 65280; // 0x0
	public const SourceLevels All = -1; // 0x0

}

// Namespace: System.Diagnostics
public class Stopwatch // TypeDefIndex: 1396
{
	// Fields
	public static readonly long Frequency; // 0x0
	public static readonly bool IsHighResolution; // 0x8
	private long elapsed; // 0x10
	private long started; // 0x18
	private bool is_running; // 0x20

	// Methods
	public void .ctor(); // 0x1006AF6B8
	private static void .cctor(); // 0x1006AF6C0
	public static long GetTimestamp(); // 0x1006AF720
	public TimeSpan get_Elapsed(); // 0x1006AF724
	public long get_ElapsedMilliseconds(); // 0x1006AF8C4
	public long get_ElapsedTicks(); // 0x1006AF844
	public void Start(); // 0x1006AF9C8
	public void Stop(); // 0x1006AFA40
}

// Namespace: System.Diagnostics
internal class TraceImplSettings // TypeDefIndex: 1397
{
	// Fields
	public bool AutoFlush; // 0x10
	public int IndentLevel; // 0x14
	public int IndentSize; // 0x18
	public TraceListenerCollection Listeners; // 0x20

	// Methods
	public void .ctor(); // 0x1006AAB54
}

// Namespace: System.Diagnostics
internal class TraceImpl // TypeDefIndex: 1398
{
	// Fields
	private static object initLock; // 0x0
	private static bool autoFlush; // 0x8
	private static int indentLevel; // 0xFFFFFFFFFFFFFFFF
	private static int indentSize; // 0xFFFFFFFFFFFFFFFF
	private static TraceListenerCollection listeners; // 0x10
	private static CorrelationManager correlation_manager; // 0x18

	// Methods
	private static void .cctor(); // 0x1006AFAC4
	public static int get_IndentLevel(); // 0x1006AFB64
	public static int get_IndentSize(); // 0x1006AFF08
	private static void InitOnce(); // 0x1006AFBD4
}

// Namespace: System.Diagnostics
public class TraceListenerCollection : IList, ICollection, IEnumerable // TypeDefIndex: 1399
{
	// Fields
	private ArrayList listeners; // 0x10

	// Methods
	internal void .ctor(); // 0x1006AD3F8
	internal void .ctor(bool addDefault); // 0x1006AFF78
	private object System.Collections.IList.get_Item(int index); // 0x1006B0140
	private void System.Collections.IList.set_Item(int index, object value); // 0x1006B01A4
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x1006B0310
	private object System.Collections.ICollection.get_SyncRoot(); // 0x1006B0364
	private bool System.Collections.IList.get_IsFixedSize(); // 0x1006B03B8
	private bool System.Collections.IList.get_IsReadOnly(); // 0x1006B040C
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1006B0460
	private int System.Collections.IList.Add(object value); // 0x1006B04D0
	private bool System.Collections.IList.Contains(object value); // 0x1006B05A8
	private int System.Collections.IList.IndexOf(object value); // 0x1006B0688
	private void System.Collections.IList.Insert(int index, object value); // 0x1006B0768
	private void System.Collections.IList.Remove(object value); // 0x1006B08C4
	public int get_Count(); // 0x1006B09A0
	public TraceListener get_Item(string name); // 0x1006ABC18
	public void set_Item(int index, TraceListener value); // 0x1006B0298
	public int Add(TraceListener listener); // 0x1006B00D4
	internal void Add(TraceListener listener, TraceImplSettings settings); // 0x1006AEE50
	private void InitializeListener(TraceListener listener); // 0x1006B0220
	public void Clear(); // 0x1006AEDFC
	public IEnumerator GetEnumerator(); // 0x1006B09F4
	public void Insert(int index, TraceListener listener); // 0x1006B0848
	public void Remove(string name); // 0x1006AEED4
	public void RemoveAt(int index); // 0x1006B0A4C
}

// Namespace: System.Diagnostics
public abstract class TraceListener : MarshalByRefObject, IDisposable // TypeDefIndex: 1400
{
	// Fields
	private int indentLevel; // 0x18
	private int indentSize; // 0x1C
	private StringDictionary attributes; // 0x20
	private TraceOptions options; // 0x28
	private string name; // 0x30
	private bool needIndent; // 0x38

	// Methods
	protected void .ctor(string name); // 0x1006A95F0
	public void set_IndentLevel(int value); // 0x1006B0050
	public void set_IndentSize(int value); // 0x1006B0058
	public virtual string get_Name(); // 0x1006B0060
	public virtual void set_Name(string value); // 0x1006B0068
	public void Dispose(); // 0x1006B0070
	protected virtual void Dispose(bool disposing); // 0x1006B00C8
	protected internal virtual string[] GetSupportedAttributes(); // 0x1006B00CC
	public StringDictionary get_Attributes(); // 0x1006AEECC
	public void set_TraceOutputOptions(TraceOptions value); // 0x1006AEEC4
}

// Namespace: System.Diagnostics
public sealed class TraceOptions : Enum // TypeDefIndex: 1401
{
	// Fields
	public int value__; // 0x10
	public const TraceOptions None = 0; // 0x0
	public const TraceOptions LogicalOperationStack = 1; // 0x0
	public const TraceOptions DateTime = 2; // 0x0
	public const TraceOptions Timestamp = 4; // 0x0
	public const TraceOptions ProcessId = 8; // 0x0
	public const TraceOptions ThreadId = 16; // 0x0
	public const TraceOptions Callstack = 32; // 0x0

}

// Namespace: System.Diagnostics
internal class TraceSourceInfo // TypeDefIndex: 1402
{
	// Fields
	private string name; // 0x10
	private SourceLevels levels; // 0x18
	private TraceListenerCollection listeners; // 0x20

	// Methods
	internal void .ctor(string name, SourceLevels levels, TraceImplSettings settings); // 0x1006AE43C
	public string get_Name(); // 0x1006AE4F8
	public TraceListenerCollection get_Listeners(); // 0x1006AE500
}

// Namespace: System
public class GenericUriParser : UriParser // TypeDefIndex: 1403
{
}

// Namespace: System.IO.Compression
public sealed class CompressionMode : Enum // TypeDefIndex: 1404
{
	// Fields
	public int value__; // 0x10
	public const CompressionMode Decompress = 0; // 0x0
	public const CompressionMode Compress = 1; // 0x0

}

// Namespace: System.IO.Compression
public class DeflateStream : Stream // TypeDefIndex: 1405
{
	// Fields
	private Stream base_stream; // 0x18
	private CompressionMode mode; // 0x20
	private bool leaveOpen; // 0x24
	private bool disposed; // 0x25
	private UnmanagedReadOrWrite feeder; // 0x28
	private IntPtr z_stream; // 0x30
	private byte[] io_buffer; // 0x38
	private GCHandle data; // 0x40

	// Methods
	public void .ctor(Stream compressedStream, CompressionMode mode); // 0x1006B0AB4
	public void .ctor(Stream compressedStream, CompressionMode mode, bool leaveOpen); // 0x1006B0CB4
	internal void .ctor(Stream compressedStream, CompressionMode mode, bool leaveOpen, bool gzip); // 0x1006B0AC0
	protected override void Dispose(bool disposing); // 0x1006B0D10
	private static int UnmanagedRead(IntPtr buffer, int length, IntPtr data); // 0x1006B0F90
	private int UnmanagedRead(IntPtr buffer, int length); // 0x1006B1054
	private static int UnmanagedWrite(IntPtr buffer, int length, IntPtr data); // 0x1006B1250
	private int UnmanagedWrite(IntPtr buffer, int length); // 0x1006B1314
	private int ReadInternal(byte[] array, int offset, int count); // 0x1006B1504
	public override int Read(byte[] dest, int dest_offset, int count); // 0x1006B15D8
	private void WriteInternal(byte[] array, int offset, int count); // 0x1006B17B8
	public override void Write(byte[] src, int src_offset, int count); // 0x1006B1884
	private static void CheckResult(int result, string where); // 0x1006B0E8C
	public override void Flush(); // 0x1006B1A2C
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state); // 0x1006B1B20
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state); // 0x1006B1E40
	public override int EndRead(IAsyncResult async_result); // 0x1006B2160
	public override void EndWrite(IAsyncResult async_result); // 0x1006B22B8
	public override long Seek(long offset, SeekOrigin origin); // 0x1006B23F4
	public override void SetLength(long value); // 0x1006B2448
	public override bool get_CanRead(); // 0x1006B249C
	public override bool get_CanSeek(); // 0x1006B2514
	public override bool get_CanWrite(); // 0x1006B251C
	public override long get_Length(); // 0x1006B2598
	public override long get_Position(); // 0x1006B25EC
	public override void set_Position(long value); // 0x1006B2640
	private static extern IntPtr CreateZStream(CompressionMode compress, bool gzip, UnmanagedReadOrWrite feeder, IntPtr data); // 0x1006B0CCC
	private static extern int CloseZStream(IntPtr stream); // 0x1006B0E84
	private static extern int Flush(IntPtr stream); // 0x1006B1B18
	private static extern int ReadZStream(IntPtr stream, IntPtr buffer, int length); // 0x1006B15C8
	private static extern int WriteZStream(IntPtr stream, IntPtr buffer, int length); // 0x1006B1874
}

// Namespace: 
private sealed class UnmanagedReadOrWrite : MulticastDelegate // TypeDefIndex: 1406
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006B0CBC
	public virtual int Invoke(IntPtr buffer, int length, IntPtr data); // 0x1006B27BC
	public virtual IAsyncResult BeginInvoke(IntPtr buffer, int length, IntPtr data, AsyncCallback callback, object object); // 0x1006B2874
	public virtual int EndInvoke(IAsyncResult result); // 0x1006B2958
}

// Namespace: 
private sealed class ReadMethod : MulticastDelegate // TypeDefIndex: 1407
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006B1D58
	public virtual int Invoke(byte[] array, int offset, int count); // 0x1006B2694
	public virtual IAsyncResult BeginInvoke(byte[] array, int offset, int count, AsyncCallback callback, object object); // 0x1006B1D68
	public virtual int EndInvoke(IAsyncResult result); // 0x1006B228C
}

// Namespace: 
private sealed class WriteMethod : MulticastDelegate // TypeDefIndex: 1408
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006B2078
	public virtual void Invoke(byte[] array, int offset, int count); // 0x1006B2984
	public virtual IAsyncResult BeginInvoke(byte[] array, int offset, int count, AsyncCallback callback, object object); // 0x1006B2088
	public virtual void EndInvoke(IAsyncResult result); // 0x1006B23E8
}

// Namespace: System.IO.Compression
public class GZipStream : Stream // TypeDefIndex: 1409
{
	// Fields
	private DeflateStream deflateStream; // 0x18

	// Methods
	public void .ctor(Stream compressedStream, CompressionMode mode); // 0x1006B2AAC
	public void .ctor(Stream compressedStream, CompressionMode mode, bool leaveOpen); // 0x1006B2AB4
	protected override void Dispose(bool disposing); // 0x1006B2B68
	public override int Read(byte[] dest, int dest_offset, int count); // 0x1006B2BAC
	public override void Write(byte[] src, int src_offset, int count); // 0x1006B2C28
	public override void Flush(); // 0x1006B2CA4
	public override long Seek(long offset, SeekOrigin origin); // 0x1006B2CF8
	public override void SetLength(long value); // 0x1006B2D64
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state); // 0x1006B2DC8
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state); // 0x1006B2E5C
	public override int EndRead(IAsyncResult async_result); // 0x1006B2EF0
	public override void EndWrite(IAsyncResult async_result); // 0x1006B2F54
	public override bool get_CanRead(); // 0x1006B2FB8
	public override bool get_CanSeek(); // 0x1006B300C
	public override bool get_CanWrite(); // 0x1006B3060
	public override long get_Length(); // 0x1006B30B4
	public override long get_Position(); // 0x1006B3108
	public override void set_Position(long value); // 0x1006B315C
}

// Namespace: System.Net
public class AuthenticationManager // TypeDefIndex: 1410
{
	// Fields
	private static ArrayList modules; // 0x0
	private static object locker; // 0x8
	private static ICredentialPolicy credential_policy; // 0x10

	// Methods
	private static void .cctor(); // 0x1006B3220
	private static void EnsureModules(); // 0x1006B328C
	public static Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials); // 0x1006B3B24
	private static Authorization DoAuthenticate(string challenge, WebRequest request, ICredentials credentials); // 0x1006B3C20
	public static Authorization PreAuthenticate(WebRequest request, ICredentials credentials); // 0x1006B416C
}

// Namespace: System.Net
public class Authorization // TypeDefIndex: 1411
{
	// Fields
	private string token; // 0x10
	private bool complete; // 0x18
	private IAuthenticationModule module; // 0x20

	// Methods
	public string get_Message(); // 0x1006B46E4
	public bool get_Complete(); // 0x1006B46EC
	internal IAuthenticationModule get_Module(); // 0x1006B46F4
	internal void set_Module(IAuthenticationModule value); // 0x1006B4164
}

// Namespace: System.Net.Cache
public sealed class HttpRequestCacheLevel : Enum // TypeDefIndex: 1412
{
	// Fields
	public int value__; // 0x10
	public const HttpRequestCacheLevel Default = 0; // 0x0
	public const HttpRequestCacheLevel BypassCache = 1; // 0x0
	public const HttpRequestCacheLevel CacheOnly = 2; // 0x0
	public const HttpRequestCacheLevel CacheIfAvailable = 3; // 0x0
	public const HttpRequestCacheLevel Revalidate = 4; // 0x0
	public const HttpRequestCacheLevel Reload = 5; // 0x0
	public const HttpRequestCacheLevel NoCacheNoStore = 6; // 0x0
	public const HttpRequestCacheLevel CacheOrNextCacheOnly = 7; // 0x0
	public const HttpRequestCacheLevel Refresh = 8; // 0x0

}

// Namespace: System.Net.Cache
public sealed class RequestCacheLevel : Enum // TypeDefIndex: 1413
{
	// Fields
	public int value__; // 0x10
	public const RequestCacheLevel Default = 0; // 0x0
	public const RequestCacheLevel BypassCache = 1; // 0x0
	public const RequestCacheLevel CacheOnly = 2; // 0x0
	public const RequestCacheLevel CacheIfAvailable = 3; // 0x0
	public const RequestCacheLevel Revalidate = 4; // 0x0
	public const RequestCacheLevel Reload = 5; // 0x0
	public const RequestCacheLevel NoCacheNoStore = 6; // 0x0

}

// Namespace: System.Net
internal class ChunkStream // TypeDefIndex: 1414
{
	// Fields
	internal WebHeaderCollection headers; // 0x10
	private int chunkSize; // 0x18
	private int chunkRead; // 0x1C
	private State state; // 0x20
	private StringBuilder saved; // 0x28
	private bool sawCR; // 0x30
	private bool gotit; // 0x31
	private int trailerState; // 0x34
	private ArrayList chunks; // 0x38

	// Methods
	public void .ctor(byte[] buffer, int offset, int size, WebHeaderCollection headers); // 0x1006B48B8
	public void .ctor(WebHeaderCollection headers); // 0x1006B4910
	public void ResetBuffer(); // 0x1006B49D8
	public void WriteAndReadBack(byte[] buffer, int offset, int size, int read); // 0x1006B4A34
	public int Read(byte[] buffer, int offset, int size); // 0x1006B4AB4
	private int ReadFromChunks(byte[] buffer, int offset, int size); // 0x1006B4AB8
	public void Write(byte[] buffer, int offset, int size); // 0x1006B49B4
	private void InternalWrite(byte[] buffer, int offset, int size); // 0x1006B4CB0
	public bool get_WantMore(); // 0x1006B5694
	public int get_ChunkLeft(); // 0x1006B56BC
	private State ReadBody(byte[] buffer, int offset, int size); // 0x1006B5100
	private State GetChunkSize(byte[] buffer, int offset, int size); // 0x1006B4DE8
	private static string RemoveChunkExtension(string input); // 0x1006B575C
	private State ReadCRLF(byte[] buffer, int offset, int size); // 0x1006B524C
	private State ReadTrailer(byte[] buffer, int offset, int size); // 0x1006B5360
	private static void ThrowProtocolViolation(string message); // 0x1006B56F4
}

// Namespace: 
private sealed class State : Enum // TypeDefIndex: 1415
{
	// Fields
	public int value__; // 0x10
	public const State None = 0; // 0x0
	public const State Body = 1; // 0x0
	public const State BodyFinished = 2; // 0x0
	public const State Trailer = 3; // 0x0

}

// Namespace: 
private class Chunk // TypeDefIndex: 1416
{
	// Fields
	public byte[] Bytes; // 0x10
	public int Offset; // 0x18

	// Methods
	public void .ctor(byte[] chunk); // 0x1006B56C8
	public int Read(byte[] buffer, int offset, int size); // 0x1006B4C44
}

// Namespace: System.Net.Configuration
public sealed class AuthenticationModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1417
{
	// Methods
	protected override ConfigurationElement CreateNewElement(); // 0x1006B5934
	protected override object GetElementKey(ConfigurationElement element); // 0x1006B5990
}

// Namespace: System.Net.Configuration
public sealed class AuthenticationModuleElement : ConfigurationElement // TypeDefIndex: 1418
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty typeProp; // 0x8

	// Methods
	public void .ctor(); // 0x1006B57B8
	private static void .cctor(); // 0x1006B57C0
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B58CC
	public string get_Type(); // 0x1006B3A30
}

// Namespace: System.Net.Configuration
public sealed class AuthenticationModulesSection : ConfigurationSection // TypeDefIndex: 1419
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty authenticationModulesProp; // 0x8

	// Methods
	private static void .cctor(); // 0x1006B5A24
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B5B54
	public AuthenticationModuleElementCollection get_AuthenticationModules(); // 0x1006B393C
	protected override void PostDeserialize(); // 0x1006B5BBC
	protected override void InitializeDefault(); // 0x1006B5BC0
}

// Namespace: System.Net.Configuration
public sealed class BypassElementCollection : ConfigurationElementCollection // TypeDefIndex: 1420
{
	// Methods
	public void .ctor(); // 0x1006B5E34
	public BypassElement get_Item(int index); // 0x1006B5E3C
	public void set_Item(int index, BypassElement value); // 0x1006B5E90
	public BypassElement get_Item(string name); // 0x1006B5EE4
	public void set_Item(string name, BypassElement value); // 0x1006B5FBC
	protected override bool get_ThrowOnDuplicate(); // 0x1006B5FC4
	public void Add(BypassElement element); // 0x1006B5FCC
	public void Clear(); // 0x1006B602C
	protected override ConfigurationElement CreateNewElement(); // 0x1006B6034
	protected override object GetElementKey(ConfigurationElement element); // 0x1006B6090
	public int IndexOf(BypassElement element); // 0x1006B6124
	public void Remove(BypassElement element); // 0x1006B612C
	public void Remove(string name); // 0x1006B6134
	public void RemoveAt(int index); // 0x1006B613C
}

// Namespace: System.Net.Configuration
public sealed class BypassElement : ConfigurationElement // TypeDefIndex: 1421
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty addressProp; // 0x8

	// Methods
	public void .ctor(); // 0x1006B5BC4
	private static void .cctor(); // 0x1006B5BCC
	public string get_Address(); // 0x1006B5CD8
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B5DCC
}

// Namespace: System.Net.Configuration
public sealed class ConnectionManagementElementCollection : ConfigurationElementCollection // TypeDefIndex: 1422
{
	// Methods
	public void .ctor(); // 0x1006B6BA8
	public ConnectionManagementElement get_Item(int index); // 0x1006B6BB0
	public void set_Item(int index, ConnectionManagementElement value); // 0x1006B6C04
	public ConnectionManagementElement get_Item(string name); // 0x1006B6C58
	public void set_Item(string name, ConnectionManagementElement value); // 0x1006B6D30
	public void Add(ConnectionManagementElement element); // 0x1006B6D38
	public void Clear(); // 0x1006B6D98
	protected override ConfigurationElement CreateNewElement(); // 0x1006B6DA0
	protected override object GetElementKey(ConfigurationElement element); // 0x1006B6DFC
	public int IndexOf(ConnectionManagementElement element); // 0x1006B6E90
	public void Remove(ConnectionManagementElement element); // 0x1006B6E98
	public void Remove(string name); // 0x1006B6EA0
	public void RemoveAt(int index); // 0x1006B6EA8
}

// Namespace: System.Net.Configuration
public sealed class ConnectionManagementElement : ConfigurationElement // TypeDefIndex: 1423
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty addressProp; // 0x8
	private static ConfigurationProperty maxConnectionProp; // 0x10

	// Methods
	public void .ctor(); // 0x1006B6810
	private static void .cctor(); // 0x1006B6818
	public string get_Address(); // 0x1006B69C0
	public int get_MaxConnection(); // 0x1006B6AB4
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B6B40
}

// Namespace: System.Net.Configuration
internal class ConnectionManagementData // TypeDefIndex: 1424
{
	// Fields
	private Hashtable data; // 0x10

	// Methods
	public void .ctor(object parent); // 0x1006B6144
	public void Add(string address, int nconns); // 0x1006B6674
	public uint GetMaxConnections(string hostOrIP); // 0x1006B6728
}

// Namespace: System.Net.Configuration
internal class HandlersUtil // TypeDefIndex: 1425
{
	// Methods
	internal static string ExtractAttributeValue(string attKey, XmlNode node); // 0x1006B7BDC
	internal static string ExtractAttributeValue(string attKey, XmlNode node, bool optional); // 0x1006B7BE4
	internal static void ThrowException(string msg, XmlNode node); // 0x1006B7DDC
}

// Namespace: System.Net.Configuration
public sealed class ConnectionManagementSection : ConfigurationSection // TypeDefIndex: 1426
{
	// Fields
	private static ConfigurationProperty connectionManagementProp; // 0x0
	private static ConfigurationPropertyCollection properties; // 0x8

	// Methods
	public void .ctor(); // 0x1006B6EB0
	private static void .cctor(); // 0x1006B6EB8
	public ConnectionManagementElementCollection get_ConnectionManagement(); // 0x1006B6FBC
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B70B0
}

// Namespace: System.Net.Configuration
public sealed class DefaultProxySection : ConfigurationSection // TypeDefIndex: 1427
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty bypassListProp; // 0x8
	private static ConfigurationProperty enabledProp; // 0x10
	private static ConfigurationProperty moduleProp; // 0x18
	private static ConfigurationProperty proxyProp; // 0x20
	private static ConfigurationProperty useDefaultCredentialsProp; // 0x28

	// Methods
	public void .ctor(); // 0x1006B7118
	private static void .cctor(); // 0x1006B7120
	public BypassElementCollection get_BypassList(); // 0x1006B73E8
	public bool get_Enabled(); // 0x1006B74DC
	public void set_Enabled(bool value); // 0x1006B7568
	public ModuleElement get_Module(); // 0x1006B7614
	public ProxyElement get_Proxy(); // 0x1006B7708
	public bool get_UseDefaultCredentials(); // 0x1006B77FC
	public void set_UseDefaultCredentials(bool value); // 0x1006B7888
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B7934
	protected override void PostDeserialize(); // 0x1006B799C
	protected override void Reset(ConfigurationElement parentElement); // 0x1006B79A0
}

// Namespace: System.Net.Configuration
public sealed class FtpCachePolicyElement : ConfigurationElement // TypeDefIndex: 1428
{
	// Fields
	private static ConfigurationProperty policyLevelProp; // 0x0
	private static ConfigurationPropertyCollection properties; // 0x8

	// Methods
	private static void .cctor(); // 0x1006B79A4
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B7ACC
	protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey); // 0x1006B7B34
	protected override void Reset(ConfigurationElement parentElement); // 0x1006B7B88
}

// Namespace: System.Net.Configuration
public sealed class HttpCachePolicyElement : ConfigurationElement // TypeDefIndex: 1429
{
	// Fields
	private static ConfigurationProperty maximumAgeProp; // 0x0
	private static ConfigurationProperty maximumStaleProp; // 0x8
	private static ConfigurationProperty minimumFreshProp; // 0x10
	private static ConfigurationProperty policyLevelProp; // 0x18
	private static ConfigurationPropertyCollection properties; // 0x20

	// Methods
	private static void .cctor(); // 0x1006B7F24
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B8208
	protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey); // 0x1006B8270
	protected override void Reset(ConfigurationElement parentElement); // 0x1006B82C4
}

// Namespace: System.Net.Configuration
public sealed class HttpWebRequestElement : ConfigurationElement // TypeDefIndex: 1430
{
	// Fields
	private static ConfigurationProperty maximumErrorResponseLengthProp; // 0x0
	private static ConfigurationProperty maximumResponseHeadersLengthProp; // 0x8
	private static ConfigurationProperty maximumUnauthorizedUploadLengthProp; // 0x10
	private static ConfigurationProperty useUnsafeHeaderParsingProp; // 0x18
	private static ConfigurationPropertyCollection properties; // 0x20

	// Methods
	public void .ctor(); // 0x1006B8318
	private static void .cctor(); // 0x1006B8320
	public int get_MaximumErrorResponseLength(); // 0x1006B85D8
	public void set_MaximumErrorResponseLength(int value); // 0x1006B8664
	public int get_MaximumResponseHeadersLength(); // 0x1006B8710
	public void set_MaximumResponseHeadersLength(int value); // 0x1006B879C
	public int get_MaximumUnauthorizedUploadLength(); // 0x1006B8848
	public void set_MaximumUnauthorizedUploadLength(int value); // 0x1006B88D4
	public bool get_UseUnsafeHeaderParsing(); // 0x1006B8980
	public void set_UseUnsafeHeaderParsing(bool value); // 0x1006B8A0C
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B8AB8
	protected override void PostDeserialize(); // 0x1006B8B20
}

// Namespace: System.Net.Configuration
public sealed class Ipv6Element : ConfigurationElement // TypeDefIndex: 1431
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty enabledProp; // 0x8

	// Methods
	public void .ctor(); // 0x1006B8B28
	private static void .cctor(); // 0x1006B8B30
	public bool get_Enabled(); // 0x1006B8C60
	public void set_Enabled(bool value); // 0x1006B8CEC
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B8D98
}

// Namespace: System.Net.Configuration
public sealed class MailSettingsSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1432
{
}

// Namespace: System.Net.Configuration
public sealed class ModuleElement : ConfigurationElement // TypeDefIndex: 1433
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty typeProp; // 0x8

	// Methods
	public void .ctor(); // 0x1006B8E00
	private static void .cctor(); // 0x1006B8E08
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006B8F10
	public string get_Type(); // 0x1006B8F78
	public void set_Type(string value); // 0x1006B906C
}

// Namespace: System.Net.Configuration
internal class NetConfigurationHandler : IConfigurationSectionHandler // TypeDefIndex: 1434
{
	// Methods
	public void .ctor(); // 0x1006B90F0
	public virtual object Create(object parent, object configContext, XmlNode section); // 0x1006B90F8
}

// Namespace: System.Net.Configuration
public sealed class NetSectionGroup : ConfigurationSectionGroup // TypeDefIndex: 1435
{
	// Methods
	public void .ctor(); // 0x1006B9988
	public AuthenticationModulesSection get_AuthenticationModules(); // 0x1006B9990
	public ConnectionManagementSection get_ConnectionManagement(); // 0x1006B9A74
	public DefaultProxySection get_DefaultProxy(); // 0x1006B9B58
	public MailSettingsSectionGroup get_MailSettings(); // 0x1006B9C3C
	public RequestCachingSection get_RequestCaching(); // 0x1006B9D20
	public SettingsSection get_Settings(); // 0x1006B9E04
	public WebRequestModulesSection get_WebRequestModules(); // 0x1006B9EE8
	public static NetSectionGroup GetSectionGroup(Configuration config); // 0x1006B9FCC
}

// Namespace: System.Net.Configuration
public sealed class PerformanceCountersElement : ConfigurationElement // TypeDefIndex: 1436
{
	// Fields
	private static ConfigurationProperty enabledProp; // 0x0
	private static ConfigurationPropertyCollection properties; // 0x8

	// Methods
	public void .ctor(); // 0x1006BA020
	private static void .cctor(); // 0x1006BA028
	public bool get_Enabled(); // 0x1006BA150
	public void set_Enabled(bool value); // 0x1006BA1DC
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BA288
}

// Namespace: System.Net.Configuration
public sealed class ProxyElement : ConfigurationElement // TypeDefIndex: 1437
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty autoDetectProp; // 0x8
	private static ConfigurationProperty bypassOnLocalProp; // 0x10
	private static ConfigurationProperty proxyAddressProp; // 0x18
	private static ConfigurationProperty scriptLocationProp; // 0x20
	private static ConfigurationProperty useSystemDefaultProp; // 0x28

	// Methods
	public void .ctor(); // 0x1006BA2F0
	private static void .cctor(); // 0x1006BA2F8
	public AutoDetectValues get_AutoDetect(); // 0x1006BA5F8
	public void set_AutoDetect(AutoDetectValues value); // 0x1006BA684
	public BypassOnLocalValues get_BypassOnLocal(); // 0x1006BA730
	public void set_BypassOnLocal(BypassOnLocalValues value); // 0x1006BA7BC
	public Uri get_ProxyAddress(); // 0x1006BA868
	public void set_ProxyAddress(Uri value); // 0x1006BA8EC
	public Uri get_ScriptLocation(); // 0x1006BA970
	public void set_ScriptLocation(Uri value); // 0x1006BA9F4
	public UseSystemDefaultValues get_UseSystemDefault(); // 0x1006BAA78
	public void set_UseSystemDefault(UseSystemDefaultValues value); // 0x1006BAB04
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BABB0
}

// Namespace: 
public sealed class BypassOnLocalValues : Enum // TypeDefIndex: 1438
{
	// Fields
	public int value__; // 0x10
	public const BypassOnLocalValues Unspecified = -1; // 0x0
	public const BypassOnLocalValues True = 1; // 0x0
	public const BypassOnLocalValues False = 0; // 0x0

}

// Namespace: 
public sealed class UseSystemDefaultValues : Enum // TypeDefIndex: 1439
{
	// Fields
	public int value__; // 0x10
	public const UseSystemDefaultValues Unspecified = -1; // 0x0
	public const UseSystemDefaultValues True = 1; // 0x0
	public const UseSystemDefaultValues False = 0; // 0x0

}

// Namespace: 
public sealed class AutoDetectValues : Enum // TypeDefIndex: 1440
{
	// Fields
	public int value__; // 0x10
	public const AutoDetectValues Unspecified = -1; // 0x0
	public const AutoDetectValues True = 1; // 0x0
	public const AutoDetectValues False = 0; // 0x0

}

// Namespace: System.Net.Configuration
public sealed class RequestCachingSection : ConfigurationSection // TypeDefIndex: 1441
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty defaultFtpCachePolicyProp; // 0x8
	private static ConfigurationProperty defaultHttpCachePolicyProp; // 0x10
	private static ConfigurationProperty defaultPolicyLevelProp; // 0x18
	private static ConfigurationProperty disableAllCachingProp; // 0x20
	private static ConfigurationProperty isPrivateCacheProp; // 0x28
	private static ConfigurationProperty unspecifiedMaximumAgeProp; // 0x30

	// Methods
	private static void .cctor(); // 0x1006BAC18
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BAFD8
	protected override void PostDeserialize(); // 0x1006BB040
	protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey); // 0x1006BB048
}

// Namespace: System.Net.Configuration
public sealed class ServicePointManagerElement : ConfigurationElement // TypeDefIndex: 1442
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty checkCertificateNameProp; // 0x8
	private static ConfigurationProperty checkCertificateRevocationListProp; // 0x10
	private static ConfigurationProperty dnsRefreshTimeoutProp; // 0x18
	private static ConfigurationProperty enableDnsRoundRobinProp; // 0x20
	private static ConfigurationProperty expect100ContinueProp; // 0x28
	private static ConfigurationProperty useNagleAlgorithmProp; // 0x30

	// Methods
	public void .ctor(); // 0x1006BB050
	private static void .cctor(); // 0x1006BB058
	public bool get_CheckCertificateName(); // 0x1006BB40C
	public void set_CheckCertificateName(bool value); // 0x1006BB498
	public bool get_CheckCertificateRevocationList(); // 0x1006BB544
	public void set_CheckCertificateRevocationList(bool value); // 0x1006BB5D0
	public int get_DnsRefreshTimeout(); // 0x1006BB67C
	public void set_DnsRefreshTimeout(int value); // 0x1006BB708
	public bool get_EnableDnsRoundRobin(); // 0x1006BB7B4
	public void set_EnableDnsRoundRobin(bool value); // 0x1006BB840
	public bool get_Expect100Continue(); // 0x1006BB8EC
	public void set_Expect100Continue(bool value); // 0x1006BB978
	public bool get_UseNagleAlgorithm(); // 0x1006BBA24
	public void set_UseNagleAlgorithm(bool value); // 0x1006BBAB0
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BBB5C
	protected override void PostDeserialize(); // 0x1006BBBC4
}

// Namespace: System.Net.Configuration
public sealed class SettingsSection : ConfigurationSection // TypeDefIndex: 1443
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty httpWebRequestProp; // 0x8
	private static ConfigurationProperty ipv6Prop; // 0x10
	private static ConfigurationProperty performanceCountersProp; // 0x18
	private static ConfigurationProperty servicePointManagerProp; // 0x20
	private static ConfigurationProperty webProxyScriptProp; // 0x28
	private static ConfigurationProperty socketProp; // 0x30

	// Methods
	public void .ctor(); // 0x1006BBBC8
	private static void .cctor(); // 0x1006BBBD0
	public HttpWebRequestElement get_HttpWebRequest(); // 0x1006BBEDC
	public Ipv6Element get_Ipv6(); // 0x1006BBFD0
	public PerformanceCountersElement get_PerformanceCounters(); // 0x1006BC0C4
	public ServicePointManagerElement get_ServicePointManager(); // 0x1006BC1B8
	public SocketElement get_Socket(); // 0x1006BC2AC
	public WebProxyScriptElement get_WebProxyScript(); // 0x1006BC3A0
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BC494
}

// Namespace: System.Net.Configuration
public sealed class SocketElement : ConfigurationElement // TypeDefIndex: 1444
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty alwaysUseCompletionPortsForAcceptProp; // 0x8
	private static ConfigurationProperty alwaysUseCompletionPortsForConnectProp; // 0x10

	// Methods
	public void .ctor(); // 0x1006BC4FC
	public bool get_AlwaysUseCompletionPortsForAccept(); // 0x1006BC6C4
	public void set_AlwaysUseCompletionPortsForAccept(bool value); // 0x1006BC738
	public bool get_AlwaysUseCompletionPortsForConnect(); // 0x1006BC7CC
	public void set_AlwaysUseCompletionPortsForConnect(bool value); // 0x1006BC840
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BC8D4
	protected override void PostDeserialize(); // 0x1006BC924
}

// Namespace: System.Net.Configuration
public sealed class WebProxyScriptElement : ConfigurationElement // TypeDefIndex: 1445
{
	// Fields
	private static ConfigurationProperty downloadTimeoutProp; // 0x0
	private static ConfigurationPropertyCollection properties; // 0x8

	// Methods
	public void .ctor(); // 0x1006BC928
	private static void .cctor(); // 0x1006BC930
	protected override void PostDeserialize(); // 0x1006BCA7C
	public TimeSpan get_DownloadTimeout(); // 0x1006BCA80
	public void set_DownloadTimeout(TimeSpan value); // 0x1006BCB0C
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BCBB8
}

// Namespace: System.Net.Configuration
public sealed class WebRequestModuleElementCollection : ConfigurationElementCollection // TypeDefIndex: 1446
{
	// Methods
	public void .ctor(); // 0x1006BD28C
	public WebRequestModuleElement get_Item(int index); // 0x1006BD294
	public void set_Item(int index, WebRequestModuleElement value); // 0x1006BD2E8
	public WebRequestModuleElement get_Item(string name); // 0x1006BD33C
	public void set_Item(string name, WebRequestModuleElement value); // 0x1006BD414
	public void Add(WebRequestModuleElement element); // 0x1006BD41C
	public void Clear(); // 0x1006BD47C
	protected override ConfigurationElement CreateNewElement(); // 0x1006BD484
	protected override object GetElementKey(ConfigurationElement element); // 0x1006BD4E0
	public int IndexOf(WebRequestModuleElement element); // 0x1006BD574
	public void Remove(WebRequestModuleElement element); // 0x1006BD57C
	public void Remove(string name); // 0x1006BD5B4
	public void RemoveAt(int index); // 0x1006BD5BC
}

// Namespace: System.Net.Configuration
public sealed class WebRequestModuleElement : ConfigurationElement // TypeDefIndex: 1447
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty prefixProp; // 0x8
	private static ConfigurationProperty typeProp; // 0x10

	// Methods
	public void .ctor(); // 0x1006BCC20
	public void .ctor(string prefix, string type); // 0x1006BCC28
	public void .ctor(string prefix, Type type); // 0x1006BCD4C
	private static void .cctor(); // 0x1006BCDB8
	public string get_Prefix(); // 0x1006BCF2C
	public void set_Prefix(string value); // 0x1006BCCC8
	public Type get_Type(); // 0x1006BD020
	public void set_Type(Type value); // 0x1006BD168
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BD224
}

// Namespace: System.Net.Configuration
internal class WebRequestModuleHandler : IConfigurationSectionHandler // TypeDefIndex: 1448
{
	// Methods
	public void .ctor(); // 0x1006BD5C4
	public virtual object Create(object parent, object configContext, XmlNode section); // 0x1006BD5CC
}

// Namespace: System.Net.Configuration
public sealed class WebRequestModulesSection : ConfigurationSection // TypeDefIndex: 1449
{
	// Fields
	private static ConfigurationPropertyCollection properties; // 0x0
	private static ConfigurationProperty webRequestModulesProp; // 0x8

	// Methods
	public void .ctor(); // 0x1006BDE10
	private static void .cctor(); // 0x1006BDE18
	protected override ConfigurationPropertyCollection get_Properties(); // 0x1006BDF48
	public WebRequestModuleElementCollection get_WebRequestModules(); // 0x1006BDFB0
	protected override void PostDeserialize(); // 0x1006BE0A4
	protected override void InitializeDefault(); // 0x1006BE0A8
}

// Namespace: System.Net
public class CookieCollection : ICollection, IEnumerable // TypeDefIndex: 1450
{
	// Fields
	private List`1<Cookie> list; // 0x10
	private static CookieCollectionComparer Comparer; // 0x0

	// Methods
	public void .ctor(); // 0x1006BF3A0
	private static void .cctor(); // 0x1006BF410
	internal IList`1<Cookie> get_List(); // 0x1006BF484
	public int get_Count(); // 0x1006BF48C
	public bool get_IsSynchronized(); // 0x1006BF4E4
	public object get_SyncRoot(); // 0x1006BF4EC
	public void CopyTo(Array array, int index); // 0x1006BF4F0
	public IEnumerator GetEnumerator(); // 0x1006BF5FC
	public void Add(Cookie cookie); // 0x1006BF688
	internal void Sort(); // 0x1006BF9B0
	private int SearchCookie(Cookie cookie); // 0x1006BF760
	public Cookie get_Item(int index); // 0x1006BFA64
}

// Namespace: 
private sealed class CookieCollectionComparer : IComparer`1<Cookie> // TypeDefIndex: 1451
{
	// Methods
	public void .ctor(); // 0x1006BF47C
	public int Compare(Cookie x, Cookie y); // 0x1006BFB24
}

// Namespace: System.Net
public class CookieContainer // TypeDefIndex: 1452
{
	// Fields
	private int capacity; // 0x10
	private int perDomainCapacity; // 0x14
	private int maxCookieSize; // 0x18
	private CookieCollection cookies; // 0x20

	// Methods
	public void .ctor(); // 0x1006BFBB4
	private void AddCookie(Cookie cookie); // 0x1006BFBD0
	private int CountDomain(string domain); // 0x1006BFFB4
	private void RemoveOldest(string domain); // 0x1006BFDA0
	private void CheckExpiration(); // 0x1006C0314
	private void Cook(Uri uri, Cookie cookie); // 0x1006C0638
	public void Add(Uri uri, Cookie cookie); // 0x1006C08DC
	public string GetCookieHeader(Uri uri); // 0x1006C09EC
	private static bool CheckDomain(string domain, string host, bool exact); // 0x1006C0464
	public CookieCollection GetCookies(Uri uri); // 0x1006C0E78
	private static bool IsNullOrEmpty(string s); // 0x1006C08AC
}

// Namespace: System.Net
public sealed class Cookie // TypeDefIndex: 1453
{
	// Fields
	private string comment; // 0x10
	private Uri commentUri; // 0x18
	private bool discard; // 0x20
	private string domain; // 0x28
	private DateTime expires; // 0x30
	private bool httpOnly; // 0x40
	private string name; // 0x48
	private string path; // 0x50
	private string port; // 0x58
	private int[] ports; // 0x60
	private bool secure; // 0x68
	private DateTime timestamp; // 0x70
	private string val; // 0x80
	private int version; // 0x88
	private static char[] reservedCharsName; // 0x0
	private static char[] portSeparators; // 0x8
	private static string tspecials; // 0x10
	private bool exact_domain; // 0x8C

	// Methods
	public void .ctor(); // 0x1006BE0AC
	public void .ctor(string name, string value); // 0x1006BE178
	private static void .cctor(); // 0x1006BE398
	public string get_Comment(); // 0x1006BE4A4
	public void set_Comment(string value); // 0x1006BE4AC
	public Uri get_CommentUri(); // 0x1006BE534
	public void set_CommentUri(Uri value); // 0x1006BE53C
	public bool get_Discard(); // 0x1006BE544
	public void set_Discard(bool value); // 0x1006BE54C
	public string get_Domain(); // 0x1006BE554
	public void set_Domain(string value); // 0x1006BE55C
	internal bool get_ExactDomain(); // 0x1006BE66C
	internal void set_ExactDomain(bool value); // 0x1006BE664
	public bool get_Expired(); // 0x1006BE674
	public DateTime get_Expires(); // 0x1006BE754
	public void set_Expires(DateTime value); // 0x1006BE760
	public bool get_HttpOnly(); // 0x1006BE768
	public void set_HttpOnly(bool value); // 0x1006BE770
	public string get_Name(); // 0x1006BE778
	public void set_Name(string value); // 0x1006BE1BC
	public string get_Path(); // 0x1006BE788
	public void set_Path(string value); // 0x1006BE7FC
	public string get_Port(); // 0x1006BE884
	public void set_Port(string value); // 0x1006BE88C
	internal int[] get_Ports(); // 0x1006BEC50
	public bool get_Secure(); // 0x1006BEC58
	public void set_Secure(bool value); // 0x1006BEC60
	public DateTime get_TimeStamp(); // 0x1006BEC68
	public string get_Value(); // 0x1006BEC74
	public void set_Value(string value); // 0x1006BE310
	public int get_Version(); // 0x1006BEC7C
	public void set_Version(int value); // 0x1006BEC40
	public override bool Equals(object obj); // 0x1006BEC84
	public override int GetHashCode(); // 0x1006BEEE4
	private static int hash(int i, int j, int k, int l, int m); // 0x1006BF018
	public override string ToString(); // 0x1006BF04C
	internal string ToString(Uri uri); // 0x1006BF054
	private static bool IsNullOrEmpty(string s); // 0x1006BE634
}

// Namespace: System.Net
public class CookieException : FormatException, ISerializable // TypeDefIndex: 1454
{
	// Methods
	public void .ctor(); // 0x1006C151C
	internal void .ctor(string msg); // 0x1006BE780
	internal void .ctor(string msg, Exception e); // 0x1006BEC38
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006C1524
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1006C152C
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C1534
}

// Namespace: System.Net
public sealed class DecompressionMethods : Enum // TypeDefIndex: 1455
{
	// Fields
	public int value__; // 0x10
	public const DecompressionMethods None = 0; // 0x0
	public const DecompressionMethods GZip = 1; // 0x0
	public const DecompressionMethods Deflate = 2; // 0x0

}

// Namespace: System.Net
internal class DefaultCertificatePolicy : ICertificatePolicy // TypeDefIndex: 1456
{
	// Methods
	public void .ctor(); // 0x1006C1984
	public bool CheckValidationResult(ServicePoint point, X509Certificate certificate, WebRequest request, int certificateProblem); // 0x1006C198C
}

// Namespace: System.Net
public static class Dns // TypeDefIndex: 1457
{
	// Methods
	private static void .cctor(); // 0x1006C1A1C
	private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list); // 0x1006C1A80
	private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list); // 0x1006C1A94
	private static IPHostEntry hostent_to_IPHostEntry(string h_name, string[] h_aliases, string[] h_addrlist); // 0x1006C1AA8
	private static IPHostEntry GetHostByAddressFromString(string address, bool parse); // 0x1006C1EC0
	public static IPHostEntry GetHostEntry(string hostNameOrAddress); // 0x1006C2014
	public static IPHostEntry GetHostEntry(IPAddress address); // 0x1006C22C0
	public static IPAddress[] GetHostAddresses(string hostNameOrAddress); // 0x1006C24A8
	public static IPHostEntry GetHostByName(string hostName); // 0x1006C238C
}

// Namespace: System.Net
public abstract class EndPoint // TypeDefIndex: 1458
{
	// Methods
	protected void .ctor(); // 0x1006C26C4
	public virtual AddressFamily get_AddressFamily(); // 0x1006C26CC
	public virtual EndPoint Create(SocketAddress address); // 0x1006C2738
	public virtual SocketAddress Serialize(); // 0x1006C2748
	private static Exception NotImplemented(); // 0x1006C26DC
}

// Namespace: System.Net
internal class FileWebRequestCreator : IWebRequestCreate // TypeDefIndex: 1459
{
	// Methods
	internal void .ctor(); // 0x1006C3AAC
	public WebRequest Create(Uri uri); // 0x1006C3AB4
}

// Namespace: System.Net
public class FileWebRequest : WebRequest, ISerializable // TypeDefIndex: 1460
{
	// Fields
	private Uri uri; // 0x20
	private WebHeaderCollection webHeaders; // 0x28
	private ICredentials credentials; // 0x30
	private string connectionGroup; // 0x38
	private long contentLength; // 0x40
	private FileAccess fileAccess; // 0x48
	private string method; // 0x50
	private IWebProxy proxy; // 0x58
	private bool preAuthenticate; // 0x60
	private int timeout; // 0x64
	private FileWebResponse webResponse; // 0x68
	private AutoResetEvent requestEndEvent; // 0x70
	private bool requesting; // 0x78
	private bool asyncResponding; // 0x79

	// Methods
	internal void .ctor(Uri uri); // 0x1006C2758
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C2818
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C2B08
	public override long get_ContentLength(); // 0x1006C2B7C
	public override ICredentials get_Credentials(); // 0x1006C2B84
	public override void set_Credentials(ICredentials value); // 0x1006C2B8C
	public override WebHeaderCollection get_Headers(); // 0x1006C2B94
	public override string get_Method(); // 0x1006C2B9C
	public override IWebProxy get_Proxy(); // 0x1006C2BA4
	public override Uri get_RequestUri(); // 0x1006C2BAC
	private static Exception GetMustImplement(); // 0x1006C2BB4
	public override void Abort(); // 0x1006C2C10
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state); // 0x1006C2C20
	public override WebResponse EndGetResponse(IAsyncResult asyncResult); // 0x1006C2DF4
	public override WebResponse GetResponse(); // 0x1006C3098
	private WebResponse GetResponseInternal(); // 0x1006C3264
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C3758
	internal void Close(); // 0x1006C394C
}

// Namespace: 
internal class FileWebStream : FileStream // TypeDefIndex: 1461
{
	// Fields
	private FileWebRequest webRequest; // 0x60

	// Methods
	internal void .ctor(FileWebRequest webRequest, FileMode mode, FileAccess access, FileShare share); // 0x1006C3474
	public override void Close(); // 0x1006C39E0
}

// Namespace: 
private sealed class GetResponseCallback : MulticastDelegate // TypeDefIndex: 1462
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006C2D84
	public virtual WebResponse Invoke(); // 0x1006C3A1C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1006C2D94
	public virtual WebResponse EndInvoke(IAsyncResult result); // 0x1006C308C
}

// Namespace: System.Net
public class FileWebResponse : WebResponse, IDisposable, ISerializable // TypeDefIndex: 1463
{
	// Fields
	private Uri responseUri; // 0x18
	private FileStream fileStream; // 0x20
	private long contentLength; // 0x28
	private WebHeaderCollection webHeaders; // 0x30
	private bool disposed; // 0x38

	// Methods
	internal void .ctor(Uri responseUri, FileStream fileStream); // 0x1006C3510
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C3B14
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C3C40
	private void System.IDisposable.Dispose(); // 0x1006C3CB4
	public override WebHeaderCollection get_Headers(); // 0x1006C3D64
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006C3E1C
	public override Stream GetResponseStream(); // 0x1006C3F20
	protected override void Finalize(); // 0x1006C3F44
	public override void Close(); // 0x1006C3FB4
	private void Dispose(bool disposing); // 0x1006C3CE4
	private void CheckDisposed(); // 0x1006C3D88
}

// Namespace: System.Net
internal class FtpAsyncResult : IAsyncResult // TypeDefIndex: 1464
{
	// Fields
	private FtpWebResponse response; // 0x10
	private ManualResetEvent waitHandle; // 0x18
	private Exception exception; // 0x20
	private AsyncCallback callback; // 0x28
	private Stream stream; // 0x30
	private object state; // 0x38
	private bool completed; // 0x40
	private bool synch; // 0x41
	private object locker; // 0x48

	// Methods
	public void .ctor(AsyncCallback callback, object state); // 0x1006C4098
	public object get_AsyncState(); // 0x1006C411C
	public WaitHandle get_AsyncWaitHandle(); // 0x1006C4124
	public bool get_IsCompleted(); // 0x1006C41FC
	internal bool get_GotException(); // 0x1006C4244
	internal Exception get_Exception(); // 0x1006C4254
	internal FtpWebResponse get_Response(); // 0x1006C425C
	internal void set_Stream(Stream value); // 0x1006C4264
	internal bool WaitUntilComplete(int timeout, bool exitContext); // 0x1006C426C
	internal void SetCompleted(bool synch, Exception exc, FtpWebResponse response); // 0x1006C4334
	internal void SetCompleted(bool synch, FtpWebResponse response); // 0x1006C44A4
	internal void SetCompleted(bool synch, Exception exc); // 0x1006C44B4
	internal void DoCallback(); // 0x1006C43DC
}

// Namespace: System.Net
internal class FtpDataStream : Stream, IDisposable // TypeDefIndex: 1465
{
	// Fields
	private FtpWebRequest request; // 0x18
	private Stream networkStream; // 0x20
	private bool disposed; // 0x28
	private bool isRead; // 0x29
	private int totalRead; // 0x2C

	// Methods
	internal void .ctor(FtpWebRequest request, Stream stream, bool isRead); // 0x1006C44BC
	private void System.IDisposable.Dispose(); // 0x1006C4580
	public override bool get_CanRead(); // 0x1006C45D8
	public override bool get_CanWrite(); // 0x1006C45E0
	public override bool get_CanSeek(); // 0x1006C45F0
	public override long get_Length(); // 0x1006C45F8
	public override long get_Position(); // 0x1006C464C
	public override void set_Position(long value); // 0x1006C46A0
	public override void Close(); // 0x1006C46F4
	public override void Flush(); // 0x1006C4744
	public override long Seek(long offset, SeekOrigin origin); // 0x1006C4748
	public override void SetLength(long value); // 0x1006C479C
	private int ReadInternal(byte[] buffer, int offset, int size); // 0x1006C47F0
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006C4AE4
	public override int EndRead(IAsyncResult asyncResult); // 0x1006C4DE8
	public override int Read(byte[] buffer, int offset, int size); // 0x1006C4F40
	private void WriteInternal(byte[] buffer, int offset, int size); // 0x1006C51B8
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006C52F0
	public override void EndWrite(IAsyncResult asyncResult); // 0x1006C5560
	public override void Write(byte[] buffer, int offset, int size); // 0x1006C569C
	protected override void Finalize(); // 0x1006C590C
	protected override void Dispose(bool disposing); // 0x1006C59AC
	private void CheckDisposed(); // 0x1006C4C6C
}

// Namespace: 
private sealed class WriteDelegate : MulticastDelegate // TypeDefIndex: 1466
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006C5478
	public virtual void Invoke(byte[] buffer, int offset, int size); // 0x1006C5B28
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object); // 0x1006C5488
	public virtual void EndInvoke(IAsyncResult result); // 0x1006C5690
}

// Namespace: 
private sealed class ReadDelegate : MulticastDelegate // TypeDefIndex: 1467
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006C4D00
	public virtual int Invoke(byte[] buffer, int offset, int size); // 0x1006C5A00
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object); // 0x1006C4D10
	public virtual int EndInvoke(IAsyncResult result); // 0x1006C4F14
}

// Namespace: System.Net
internal class FtpRequestCreator : IWebRequestCreate // TypeDefIndex: 1468
{
	// Methods
	public void .ctor(); // 0x1006C5C50
	public WebRequest Create(Uri uri); // 0x1006C5C58
}

// Namespace: System.Net
public sealed class FtpStatusCode : Enum // TypeDefIndex: 1469
{
	// Fields
	public int value__; // 0x10
	public const FtpStatusCode Undefined = 0; // 0x0
	public const FtpStatusCode RestartMarker = 110; // 0x0
	public const FtpStatusCode ServiceTemporarilyNotAvailable = 120; // 0x0
	public const FtpStatusCode DataAlreadyOpen = 125; // 0x0
	public const FtpStatusCode OpeningData = 150; // 0x0
	public const FtpStatusCode CommandOK = 200; // 0x0
	public const FtpStatusCode CommandExtraneous = 202; // 0x0
	public const FtpStatusCode DirectoryStatus = 212; // 0x0
	public const FtpStatusCode FileStatus = 213; // 0x0
	public const FtpStatusCode SystemType = 215; // 0x0
	public const FtpStatusCode SendUserCommand = 220; // 0x0
	public const FtpStatusCode ClosingControl = 221; // 0x0
	public const FtpStatusCode ClosingData = 226; // 0x0
	public const FtpStatusCode EnteringPassive = 227; // 0x0
	public const FtpStatusCode LoggedInProceed = 230; // 0x0
	public const FtpStatusCode ServerWantsSecureSession = 234; // 0x0
	public const FtpStatusCode FileActionOK = 250; // 0x0
	public const FtpStatusCode PathnameCreated = 257; // 0x0
	public const FtpStatusCode SendPasswordCommand = 331; // 0x0
	public const FtpStatusCode NeedLoginAccount = 332; // 0x0
	public const FtpStatusCode FileCommandPending = 350; // 0x0
	public const FtpStatusCode ServiceNotAvailable = 421; // 0x0
	public const FtpStatusCode CantOpenData = 425; // 0x0
	public const FtpStatusCode ConnectionClosed = 426; // 0x0
	public const FtpStatusCode ActionNotTakenFileUnavailableOrBusy = 450; // 0x0
	public const FtpStatusCode ActionAbortedLocalProcessingError = 451; // 0x0
	public const FtpStatusCode ActionNotTakenInsufficientSpace = 452; // 0x0
	public const FtpStatusCode CommandSyntaxError = 500; // 0x0
	public const FtpStatusCode ArgumentSyntaxError = 501; // 0x0
	public const FtpStatusCode CommandNotImplemented = 502; // 0x0
	public const FtpStatusCode BadCommandSequence = 503; // 0x0
	public const FtpStatusCode NotLoggedIn = 530; // 0x0
	public const FtpStatusCode AccountNeeded = 532; // 0x0
	public const FtpStatusCode ActionNotTakenFileUnavailable = 550; // 0x0
	public const FtpStatusCode ActionAbortedUnknownPageType = 551; // 0x0
	public const FtpStatusCode FileActionAborted = 552; // 0x0
	public const FtpStatusCode ActionNotTakenFilenameNotAllowed = 553; // 0x0

}

// Namespace: System.Net
public sealed class FtpWebRequest : WebRequest // TypeDefIndex: 1470
{
	// Fields
	private Uri requestUri; // 0x20
	private string file_name; // 0x28
	private ServicePoint servicePoint; // 0x30
	private Stream origDataStream; // 0x38
	private Stream dataStream; // 0x40
	private Stream controlStream; // 0x48
	private StreamReader controlReader; // 0x50
	private NetworkCredential credentials; // 0x58
	private IPHostEntry hostEntry; // 0x60
	private IPEndPoint localEndPoint; // 0x68
	private IWebProxy proxy; // 0x70
	private int timeout; // 0x78
	private int rwTimeout; // 0x7C
	private long offset; // 0x80
	private bool binary; // 0x88
	private bool enableSsl; // 0x89
	private bool usePassive; // 0x8A
	private bool keepAlive; // 0x8B
	private string method; // 0x90
	private string renameTo; // 0x98
	private object locker; // 0xA0
	private RequestState requestState; // 0xA8
	private FtpAsyncResult asyncResult; // 0xB0
	private FtpWebResponse ftpResponse; // 0xB8
	private Stream requestStream; // 0xC0
	private string initial_path; // 0xC8
	private static readonly string[] supportedCommands; // 0x0
	private RemoteCertificateValidationCallback callback; // 0xD0
	private static RemoteCertificateValidationCallback <>f__am$cache1C; // 0x8
	private static Dictionary`2<string, int> <>f__switch$mapA; // 0x10
	private static Dictionary`2<string, int> <>f__switch$mapB; // 0x18

	// Methods
	internal void .ctor(Uri uri); // 0x1006C5CB8
	private static void .cctor(); // 0x1006C5EEC
	private static Exception GetMustImplement(); // 0x1006C630C
	public override long get_ContentLength(); // 0x1006C6368
	public override ICredentials get_Credentials(); // 0x1006C6370
	public override void set_Credentials(ICredentials value); // 0x1006C6378
	public bool get_EnableSsl(); // 0x1006C64EC
	public override WebHeaderCollection get_Headers(); // 0x1006C64F4
	public override string get_Method(); // 0x1006C654C
	public override IWebProxy get_Proxy(); // 0x1006C6554
	public int get_ReadWriteTimeout(); // 0x1006C51B0
	public override Uri get_RequestUri(); // 0x1006C655C
	public ServicePoint get_ServicePoint(); // 0x1006C6564
	private string get_DataType(); // 0x1006C65F8
	private RequestState get_State(); // 0x1006C6658
	private void set_State(RequestState value); // 0x1006C66A0
	public override void Abort(); // 0x1006C67C8
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state); // 0x1006C6DAC
	public override WebResponse EndGetResponse(IAsyncResult asyncResult); // 0x1006C6FDC
	public override WebResponse GetResponse(); // 0x1006C7144
	private ServicePoint GetServicePoint(); // 0x1006C6568
	private void ResolveHost(); // 0x1006C7174
	private void ProcessRequest(); // 0x1006C72D0
	private void SetType(); // 0x1006C7CC0
	private string GetRemoteFolderPath(Uri uri); // 0x1006C7F10
	private void CWDAndSetFileName(Uri uri); // 0x1006C80F0
	private void ProcessMethod(); // 0x1006C7580
	private void CloseControlConnection(); // 0x1006C8EC0
	internal void CloseDataConnection(); // 0x1006C4A18
	private void CloseConnection(); // 0x1006C8F84
	private void ProcessSimpleMethod(); // 0x1006C87C4
	private void UploadData(); // 0x1006C8720
	private void DownloadData(); // 0x1006C8680
	private void CheckRequestStarted(); // 0x1006C6450
	private void OpenControlConnection(); // 0x1006C8270
	private static string GetInitialPath(FtpStatus status); // 0x1006C9924
	private Socket SetupPassiveConnection(string statusDescription); // 0x1006C9B04
	private Exception CreateExceptionFromResponse(FtpStatus status); // 0x1006C7E10
	internal void SetTransferCompleted(); // 0x1006C4A6C
	internal void OperationCompleted(); // 0x1006CA024
	private void SetCompleteWithError(Exception exc); // 0x1006C78F8
	private Socket InitDataConnection(); // 0x1006CA060
	private void OpenDataConnection(); // 0x1006C8FB8
	private void Authenticate(); // 0x1006C9444
	private FtpStatus SendCommand(string command, string[] parameters); // 0x1006C7DF8
	private FtpStatus SendCommand(bool waitResponse, string command, string[] parameters); // 0x1006C6968
	internal static FtpStatus ServiceNotAvailable(); // 0x1006CA778
	internal FtpStatus GetResponseStatus(); // 0x1006C797C
	private void InitiateSecureConnection(Stream stream); // 0x1006CA670
	internal bool ChangeToSSLSocket(Stream stream); // 0x1006CA58C
	private bool InFinalState(); // 0x1006C6BFC
	private bool InProgress(); // 0x1006C7918
	internal void CheckIfAborted(); // 0x1006C4974
	private void CheckFinalState(); // 0x1006C674C
	private static bool <callback>m__3(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors); // 0x1006CA7FC
}

// Namespace: 
private sealed class RequestState : Enum // TypeDefIndex: 1471
{
	// Fields
	public int value__; // 0x10
	public const RequestState Before = 0; // 0x0
	public const RequestState Scheduled = 1; // 0x0
	public const RequestState Connecting = 2; // 0x0
	public const RequestState Authenticating = 3; // 0x0
	public const RequestState OpeningData = 4; // 0x0
	public const RequestState TransferInProgress = 5; // 0x0
	public const RequestState Finished = 6; // 0x0
	public const RequestState Aborted = 7; // 0x0
	public const RequestState Error = 8; // 0x0

}

// Namespace: System.Net
internal class FtpStatus // TypeDefIndex: 1472
{
	// Fields
	private readonly FtpStatusCode statusCode; // 0x10
	private readonly string statusDescription; // 0x18

	// Methods
	public void .ctor(FtpStatusCode statusCode, string statusDescription); // 0x1006C5E3C
	public FtpStatusCode get_StatusCode(); // 0x1006C5E78
	public string get_StatusDescription(); // 0x1006C5E80
}

// Namespace: System.Net
public class FtpWebResponse : WebResponse // TypeDefIndex: 1473
{
	// Fields
	private Stream stream; // 0x18
	private Uri uri; // 0x20
	private FtpStatusCode statusCode; // 0x28
	private DateTime lastModified; // 0x30
	private string bannerMessage; // 0x40
	private string welcomeMessage; // 0x48
	private string exitMessage; // 0x50
	private string statusDescription; // 0x58
	private string method; // 0x60
	private bool disposed; // 0x68
	private FtpWebRequest request; // 0x70
	internal long contentLength; // 0x78

	// Methods
	internal void .ctor(FtpWebRequest request, Uri uri, string method, bool keepAlive); // 0x1006C74A0
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatusCode statusCode, string statusDescription); // 0x1006C6CB8
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatus status); // 0x1006CA004
	public override WebHeaderCollection get_Headers(); // 0x1006CA974
	internal void set_LastModified(DateTime value); // 0x1006C8FB0
	internal void set_BannerMessage(string value); // 0x1006CA668
	internal void set_WelcomeMessage(string value); // 0x1006CA770
	public override void Close(); // 0x1006CA9D0
	public override Stream GetResponseStream(); // 0x1006CAAA0
	internal void set_Stream(Stream value); // 0x1006C8FA8
	internal void UpdateStatus(FtpStatus status); // 0x1006C72AC
	private void CheckDisposed(); // 0x1006CABAC
	internal bool IsFinal(); // 0x1006C7CB0
}

// Namespace: System.Net
public class GlobalProxySelection // TypeDefIndex: 1474
{
	// Methods
	public static IWebProxy get_Select(); // 0x1006C5E88
}

// Namespace: System.Net
internal class HttpRequestCreator : IWebRequestCreate // TypeDefIndex: 1475
{
	// Methods
	internal void .ctor(); // 0x1006CADB0
	public WebRequest Create(Uri uri); // 0x1006CADB8
}

// Namespace: System.Net
public sealed class HttpStatusCode : Enum // TypeDefIndex: 1476
{
	// Fields
	public int value__; // 0x10
	public const HttpStatusCode Continue = 100; // 0x0
	public const HttpStatusCode SwitchingProtocols = 101; // 0x0
	public const HttpStatusCode OK = 200; // 0x0
	public const HttpStatusCode Created = 201; // 0x0
	public const HttpStatusCode Accepted = 202; // 0x0
	public const HttpStatusCode NonAuthoritativeInformation = 203; // 0x0
	public const HttpStatusCode NoContent = 204; // 0x0
	public const HttpStatusCode ResetContent = 205; // 0x0
	public const HttpStatusCode PartialContent = 206; // 0x0
	public const HttpStatusCode MultipleChoices = 300; // 0x0
	public const HttpStatusCode Ambiguous = 300; // 0x0
	public const HttpStatusCode MovedPermanently = 301; // 0x0
	public const HttpStatusCode Moved = 301; // 0x0
	public const HttpStatusCode Found = 302; // 0x0
	public const HttpStatusCode Redirect = 302; // 0x0
	public const HttpStatusCode SeeOther = 303; // 0x0
	public const HttpStatusCode RedirectMethod = 303; // 0x0
	public const HttpStatusCode NotModified = 304; // 0x0
	public const HttpStatusCode UseProxy = 305; // 0x0
	public const HttpStatusCode Unused = 306; // 0x0
	public const HttpStatusCode TemporaryRedirect = 307; // 0x0
	public const HttpStatusCode RedirectKeepVerb = 307; // 0x0
	public const HttpStatusCode BadRequest = 400; // 0x0
	public const HttpStatusCode Unauthorized = 401; // 0x0
	public const HttpStatusCode PaymentRequired = 402; // 0x0
	public const HttpStatusCode Forbidden = 403; // 0x0
	public const HttpStatusCode NotFound = 404; // 0x0
	public const HttpStatusCode MethodNotAllowed = 405; // 0x0
	public const HttpStatusCode NotAcceptable = 406; // 0x0
	public const HttpStatusCode ProxyAuthenticationRequired = 407; // 0x0
	public const HttpStatusCode RequestTimeout = 408; // 0x0
	public const HttpStatusCode Conflict = 409; // 0x0
	public const HttpStatusCode Gone = 410; // 0x0
	public const HttpStatusCode LengthRequired = 411; // 0x0
	public const HttpStatusCode PreconditionFailed = 412; // 0x0
	public const HttpStatusCode RequestEntityTooLarge = 413; // 0x0
	public const HttpStatusCode RequestUriTooLong = 414; // 0x0
	public const HttpStatusCode UnsupportedMediaType = 415; // 0x0
	public const HttpStatusCode RequestedRangeNotSatisfiable = 416; // 0x0
	public const HttpStatusCode ExpectationFailed = 417; // 0x0
	public const HttpStatusCode InternalServerError = 500; // 0x0
	public const HttpStatusCode NotImplemented = 501; // 0x0
	public const HttpStatusCode BadGateway = 502; // 0x0
	public const HttpStatusCode ServiceUnavailable = 503; // 0x0
	public const HttpStatusCode GatewayTimeout = 504; // 0x0
	public const HttpStatusCode HttpVersionNotSupported = 505; // 0x0

}

// Namespace: System.Net
public class HttpVersion // TypeDefIndex: 1477
{
	// Fields
	public static readonly Version Version10; // 0x0
	public static readonly Version Version11; // 0x8

	// Methods
	private static void .cctor(); // 0x1006CAF8C
}

// Namespace: System.Net
public class HttpWebRequest : WebRequest, ISerializable // TypeDefIndex: 1478
{
	// Fields
	private Uri requestUri; // 0x20
	private Uri actualUri; // 0x28
	private bool hostChanged; // 0x30
	private bool allowAutoRedirect; // 0x31
	private bool allowBuffering; // 0x32
	private X509CertificateCollection certificates; // 0x38
	private string connectionGroup; // 0x40
	private long contentLength; // 0x48
	private HttpContinueDelegate continueDelegate; // 0x50
	private CookieContainer cookieContainer; // 0x58
	private ICredentials credentials; // 0x60
	private bool haveResponse; // 0x68
	private bool haveRequest; // 0x69
	private bool requestSent; // 0x6A
	private WebHeaderCollection webHeaders; // 0x70
	private bool keepAlive; // 0x78
	private int maxAutoRedirect; // 0x7C
	private string mediaType; // 0x80
	private string method; // 0x88
	private string initialMethod; // 0x90
	private bool pipelined; // 0x98
	private bool preAuthenticate; // 0x99
	private bool usedPreAuth; // 0x9A
	private Version version; // 0xA0
	private Version actualVersion; // 0xA8
	private IWebProxy proxy; // 0xB0
	private bool sendChunked; // 0xB8
	private ServicePoint servicePoint; // 0xC0
	private int timeout; // 0xC8
	private WebConnectionStream writeStream; // 0xD0
	private HttpWebResponse webResponse; // 0xD8
	private WebAsyncResult asyncWrite; // 0xE0
	private WebAsyncResult asyncRead; // 0xE8
	private EventHandler abortHandler; // 0xF0
	private int aborted; // 0xF8
	private int redirects; // 0xFC
	private bool expectContinue; // 0x100
	private bool authCompleted; // 0x101
	private byte[] bodyBuffer; // 0x108
	private int bodyBufferLength; // 0x110
	private bool getResponseCalled; // 0x114
	private Exception saved_exc; // 0x118
	private object locker; // 0x120
	private bool is_ntlm_auth; // 0x128
	private bool finished_reading; // 0x129
	internal WebConnection WebConnection; // 0x130
	private DecompressionMethods auto_decomp; // 0x138
	private static int defaultMaxResponseHeadersLength; // 0x0
	private int readWriteTimeout; // 0x13C
	private bool unsafe_auth_blah; // 0x140

	// Methods
	internal void .ctor(Uri uri); // 0x1006CAE18
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006CB030
	private static void .cctor(); // 0x1006CB594
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006CB674
	public Uri get_Address(); // 0x1006CB6E8
	public DecompressionMethods get_AutomaticDecompression(); // 0x1006CB6F0
	internal bool get_InternalAllowBuffering(); // 0x1006CB6F8
	public X509CertificateCollection get_ClientCertificates(); // 0x1006CB8C4
	public override long get_ContentLength(); // 0x1006CB930
	internal void set_InternalContentLength(long value); // 0x1006CB938
	public override ICredentials get_Credentials(); // 0x1006CB940
	public override void set_Credentials(ICredentials value); // 0x1006CB948
	public override WebHeaderCollection get_Headers(); // 0x1006CB950
	public bool get_KeepAlive(); // 0x1006CB958
	public int get_ReadWriteTimeout(); // 0x1006CB960
	public override string get_Method(); // 0x1006CB968
	public override IWebProxy get_Proxy(); // 0x1006CB970
	public override Uri get_RequestUri(); // 0x1006CB978
	public bool get_SendChunked(); // 0x1006CB980
	public ServicePoint get_ServicePoint(); // 0x1006CB988
	public string get_TransferEncoding(); // 0x1006CBA90
	public bool get_UnsafeAuthenticatedConnectionSharing(); // 0x1006CBAEC
	internal bool get_ExpectContinue(); // 0x1006CBAF4
	internal void set_ExpectContinue(bool value); // 0x1006CBAFC
	internal bool get_ProxyQuery(); // 0x1006CBB04
	internal ServicePoint GetServicePoint(); // 0x1006CB98C
	private void CheckIfForceWrite(); // 0x1006CBB4C
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state); // 0x1006CBBCC
	public override WebResponse EndGetResponse(IAsyncResult asyncResult); // 0x1006CBEE4
	public override WebResponse GetResponse(); // 0x1006CC054
	internal bool get_FinishedReading(); // 0x1006CC110
	internal void set_FinishedReading(bool value); // 0x1006CC118
	internal bool get_Aborted(); // 0x1006CBEB4
	public override void Abort(); // 0x1006CC120
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006CC568
	internal void DoContinueDelegate(int statusCode, WebHeaderCollection headers); // 0x1006CC8A4
	private bool Redirect(WebAsyncResult result, HttpStatusCode code); // 0x1006CC8B8
	private string GetHeaders(); // 0x1006CCD94
	private void DoPreAuthenticate(); // 0x1006CD244
	internal void SetWriteStreamError(WebExceptionStatus status, Exception exc); // 0x1006CD490
	internal void SendRequestHeaders(bool propagate_error); // 0x1006CD684
	internal void SetWriteStream(WebConnectionStream stream); // 0x1006CDD08
	internal void SetResponseError(WebExceptionStatus status, Exception e, string where); // 0x1006CE020
	private void CheckSendError(WebConnectionData data); // 0x1006CE270
	private void HandleNtlmAuth(WebAsyncResult r); // 0x1006CE444
	internal void SetResponseData(WebConnectionData data); // 0x1006CE73C
	private bool CheckAuthorization(WebResponse response, HttpStatusCode code); // 0x1006CF810
	private bool CheckFinalStatus(WebAsyncResult result); // 0x1006CF318
}

// Namespace: System.Net
public class HttpWebResponse : WebResponse, IDisposable, ISerializable // TypeDefIndex: 1479
{
	// Fields
	private Uri uri; // 0x18
	private WebHeaderCollection webHeaders; // 0x20
	private CookieCollection cookieCollection; // 0x28
	private string method; // 0x30
	private Version version; // 0x38
	private HttpStatusCode statusCode; // 0x40
	private string statusDescription; // 0x48
	private long contentLength; // 0x50
	private string contentType; // 0x58
	private CookieContainer cookie_container; // 0x60
	private bool disposed; // 0x68
	private Stream stream; // 0x70
	private string[] cookieExpiresFormats; // 0x78
	private static Dictionary`2<string, int> <>f__switch$mapD; // 0x0

	// Methods
	internal void .ctor(Uri uri, string method, WebConnectionData data, CookieContainer container); // 0x1006CEF48
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006CFD58
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006D00D8
	private void System.IDisposable.Dispose(); // 0x1006D014C
	public override WebHeaderCollection get_Headers(); // 0x1006D0204
	public HttpStatusCode get_StatusCode(); // 0x1006CF808
	public string get_StatusDescription(); // 0x1006CFBD8
	internal void ReadAll(); // 0x1006CE34C
	public override Stream GetResponseStream(); // 0x1006D02A0
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006D0368
	public override void Close(); // 0x1006D04C0
	private void Dispose(bool disposing); // 0x1006D017C
	private void CheckDisposed(); // 0x1006D020C
	private void FillCookies(); // 0x1006CFBFC
	private void SetCookie(string header); // 0x1006D05A4
	private void SetCookie2(string cookies_str); // 0x1006D0D5C
	private DateTime TryParseCookieExpires(string value); // 0x1006D0E48
}

// Namespace: System.Net
internal class CookieParser // TypeDefIndex: 1480
{
	// Fields
	private string header; // 0x10
	private int pos; // 0x18
	private int length; // 0x1C

	// Methods
	public void .ctor(string header); // 0x1006C153C
	public void .ctor(string header, int position); // 0x1006C1544
	public bool GetNextNameValue(out string name, out string val); // 0x1006C1598
	private string GetCookieName(); // 0x1006C1674
	private string GetCookieValue(); // 0x1006C17AC
}

// Namespace: System.Net
public interface IAuthenticationModule // TypeDefIndex: 1481
{
	// Methods
	public abstract Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials); // 0
	public abstract Authorization PreAuthenticate(WebRequest request, ICredentials credentials); // 0
	public abstract string get_AuthenticationType(); // 0
}

// Namespace: System.Net
public interface ICertificatePolicy // TypeDefIndex: 1482
{
	// Methods
	public abstract bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem); // 0
}

// Namespace: System.Net
public interface ICredentials // TypeDefIndex: 1483
{
	// Methods
	public abstract NetworkCredential GetCredential(Uri uri, string authType); // 0
}

// Namespace: System.Net
public interface ICredentialPolicy // TypeDefIndex: 1484
{
}

// Namespace: System.Net
public interface ICredentialsByHost // TypeDefIndex: 1485
{
}

// Namespace: System.Net
public class IPAddress // TypeDefIndex: 1486
{
	// Fields
	private long m_Address; // 0x10
	private AddressFamily m_Family; // 0x18
	private ushort[] m_Numbers; // 0x20
	private long m_ScopeId; // 0x28
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Broadcast; // 0x8
	public static readonly IPAddress Loopback; // 0x10
	public static readonly IPAddress None; // 0x18
	public static readonly IPAddress IPv6Any; // 0x20
	public static readonly IPAddress IPv6Loopback; // 0x28
	public static readonly IPAddress IPv6None; // 0x30

	// Methods
	public void .ctor(long addr); // 0x1006D10E8
	public void .ctor(byte[] address, long scopeId); // 0x1006D111C
	internal void .ctor(ushort[] address, long scopeId); // 0x1006D1248
	private static void .cctor(); // 0x1006D13E0
	private static short SwapShort(short number); // 0x1006D15AC
	public static short HostToNetworkOrder(short host); // 0x1006D1344
	public static short NetworkToHostOrder(short network); // 0x1006D15B8
	public static IPAddress Parse(string ipString); // 0x1006C1E00
	public static bool TryParse(string ipString, out IPAddress address); // 0x1006C21E4
	private static IPAddress ParseIPV4(string ip); // 0x1006D1654
	private static IPAddress ParseIPV6(string ip); // 0x1006D14E8
	internal long get_InternalIPv4Address(); // 0x1006D2284
	public long get_ScopeId(); // 0x1006D228C
	public byte[] GetAddressBytes(); // 0x1006D230C
	public AddressFamily get_AddressFamily(); // 0x1006C1EB0
	public static bool IsLoopback(IPAddress addr); // 0x1006D243C
	public override string ToString(); // 0x1006D2530
	private static string ToString(long addr); // 0x1006D26D0
	public override bool Equals(object other); // 0x1006D2A5C
	public override int GetHashCode(); // 0x1006D2B80
	private static int Hash(int i, int j, int k, int l); // 0x1006D2D70
}

// Namespace: System.Net
public class IPEndPoint : EndPoint // TypeDefIndex: 1487
{
	// Fields
	private IPAddress address; // 0x10
	private int port; // 0x18

	// Methods
	public void .ctor(IPAddress address, int port); // 0x1006C93A8
	public void .ctor(long iaddr, int port); // 0x1006D2E28
	public IPAddress get_Address(); // 0x1006CA57C
	public void set_Address(IPAddress value); // 0x1006D2D98
	public override AddressFamily get_AddressFamily(); // 0x1006D2EB8
	public int get_Port(); // 0x1006CA584
	public void set_Port(int value); // 0x1006D2DA0
	public override EndPoint Create(SocketAddress socketAddress); // 0x1006D2ED4
	public override SocketAddress Serialize(); // 0x1006D3428
	public override string ToString(); // 0x1006D366C
	public override bool Equals(object obj); // 0x1006D3750
	public override int GetHashCode(); // 0x1006D3840
}

// Namespace: System.Net
public class IPHostEntry // TypeDefIndex: 1488
{
	// Fields
	private IPAddress[] addressList; // 0x10
	private string[] aliases; // 0x18
	private string hostName; // 0x20

	// Methods
	public void .ctor(); // 0x1006C1DE8
	public IPAddress[] get_AddressList(); // 0x1006C26BC
	public void set_AddressList(IPAddress[] value); // 0x1006C1EB8
	public void set_Aliases(string[] value); // 0x1006C1DF8
	public void set_HostName(string value); // 0x1006C1DF0
}

// Namespace: System.Net
internal class IPv6Address // TypeDefIndex: 1489
{
	// Fields
	private ushort[] address; // 0x10
	private int prefixLength; // 0x18
	private long scopeId; // 0x20
	public static readonly IPv6Address Loopback; // 0x0
	public static readonly IPv6Address Unspecified; // 0x8

	// Methods
	public void .ctor(ushort[] addr); // 0x1006D2988
	public void .ctor(ushort[] addr, int prefixLength); // 0x1006D389C
	public void .ctor(ushort[] addr, int prefixLength, int scopeId); // 0x1006D3934
	private static void .cctor(); // 0x1006D3960
	public static IPv6Address Parse(string ipString); // 0x1006D39DC
	private static int Fill(ushort[] addr, string ipString); // 0x1006D3AC0
	private static bool TryParse(string prefix, out int res); // 0x1006D3C78
	public static bool TryParse(string ipString, out IPv6Address result); // 0x1006D1C50
	public ushort[] get_Address(); // 0x1006D2274
	public long get_ScopeId(); // 0x1006D227C
	public void set_ScopeId(long value); // 0x1006D2A54
	public static bool IsLoopback(IPv6Address addr); // 0x1006D3D08
	private static ushort SwapUShort(ushort number); // 0x1006D3E1C
	private int AsIPv4Int(); // 0x1006D3E24
	public bool IsIPv4Compatible(); // 0x1006D3ED4
	public bool IsIPv4Mapped(); // 0x1006D3F50
	public override string ToString(); // 0x1006D3FDC
	public string ToString(bool fullLength); // 0x1006D4310
	public override bool Equals(object other); // 0x1006D44A4
	public override int GetHashCode(); // 0x1006D46B8
	private static int Hash(int i, int j, int k, int l); // 0x1006D4894
}

// Namespace: System.Net
public interface IWebProxy // TypeDefIndex: 1490
{
	// Methods
	public abstract ICredentials get_Credentials(); // 0
	public abstract Uri GetProxy(Uri destination); // 0
	public abstract bool IsBypassed(Uri host); // 0
}

// Namespace: System.Net
public interface IWebRequestCreate // TypeDefIndex: 1491
{
	// Methods
	public abstract WebRequest Create(Uri uri); // 0
}

// Namespace: System.Net
internal class NetConfig : ICloneable // TypeDefIndex: 1492
{
	// Fields
	internal bool ipv6Enabled; // 0x10
	internal int MaxResponseHeadersLength; // 0x14

	// Methods
	internal void .ctor(); // 0x1006D48BC
	private object System.ICloneable.Clone(); // 0x1006D48CC
}

// Namespace: System.Net
public class NetworkCredential : ICredentials, ICredentialsByHost // TypeDefIndex: 1493
{
	// Fields
	private string userName; // 0x10
	private string password; // 0x18
	private string domain; // 0x20

	// Methods
	public string get_Domain(); // 0x1006D48D4
	public string get_UserName(); // 0x1006D4948
	public string get_Password(); // 0x1006D49BC
	public NetworkCredential GetCredential(Uri uri, string authType); // 0x1006D4A30
}

// Namespace: System.Net.NetworkInformation
public abstract class IPInterfaceProperties // TypeDefIndex: 1494
{
	// Methods
	protected void .ctor(); // 0x1006D4C6C
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPInterfaceProperties2 : IPInterfaceProperties // TypeDefIndex: 1495
{
	// Fields
	private readonly Win32_IP_ADAPTER_ADDRESSES addr; // 0x10
	private readonly Win32_MIB_IFROW mib4; // 0x18
	private readonly Win32_MIB_IFROW mib6; // 0x88

	// Methods
	public void .ctor(Win32_IP_ADAPTER_ADDRESSES addr, Win32_MIB_IFROW mib4, Win32_MIB_IFROW mib6); // 0x1006D7DA0
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv4InterfaceStatistics // TypeDefIndex: 1496
{
	// Methods
	protected void .ctor(); // 0x1006D4C74
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1497
{
	// Fields
	private Win32_MIB_IFROW info; // 0x10

	// Methods
	public void .ctor(Win32_MIB_IFROW info); // 0x1006D7DFC
}

// Namespace: System.Net.NetworkInformation
internal struct ifa_ifu // TypeDefIndex: 1498
{
	// Fields
	public IntPtr ifu_broadaddr; // 0x10
	public IntPtr ifu_dstaddr; // 0x10

}

// Namespace: System.Net.NetworkInformation
internal struct ifaddrs // TypeDefIndex: 1499
{
	// Fields
	public IntPtr ifa_next; // 0x10
	public string ifa_name; // 0x18
	public uint ifa_flags; // 0x20
	public IntPtr ifa_addr; // 0x28
	public IntPtr ifa_netmask; // 0x30
	public ifa_ifu ifa_ifu; // 0x38
	public IntPtr ifa_data; // 0x40

}

// Namespace: System.Net.NetworkInformation
internal struct sockaddr_in // TypeDefIndex: 1500
{
	// Fields
	public ushort sin_family; // 0x10
	public ushort sin_port; // 0x12
	public uint sin_addr; // 0x14

}

// Namespace: System.Net.NetworkInformation
internal struct sockaddr_in6 // TypeDefIndex: 1501
{
	// Fields
	public ushort sin6_family; // 0x10
	public ushort sin6_port; // 0x12
	public uint sin6_flowinfo; // 0x14
	public in6_addr sin6_addr; // 0x18
	public uint sin6_scope_id; // 0x20

}

// Namespace: System.Net.NetworkInformation
internal struct in6_addr // TypeDefIndex: 1502
{
	// Fields
	public byte[] u6_addr8; // 0x10

}

// Namespace: System.Net.NetworkInformation
internal struct sockaddr_ll // TypeDefIndex: 1503
{
	// Fields
	public ushort sll_family; // 0x10
	public ushort sll_protocol; // 0x12
	public int sll_ifindex; // 0x14
	public ushort sll_hatype; // 0x18
	public byte sll_pkttype; // 0x1A
	public byte sll_halen; // 0x1B
	public byte[] sll_addr; // 0x20

}

// Namespace: System.Net.NetworkInformation
internal sealed class LinuxArpHardware : Enum // TypeDefIndex: 1504
{
	// Fields
	public int value__; // 0x10
	public const LinuxArpHardware ETHER = 1; // 0x0
	public const LinuxArpHardware EETHER = 2; // 0x0
	public const LinuxArpHardware PRONET = 4; // 0x0
	public const LinuxArpHardware ATM = 19; // 0x0
	public const LinuxArpHardware SLIP = 256; // 0x0
	public const LinuxArpHardware PPP = 512; // 0x0
	public const LinuxArpHardware LOOPBACK = 772; // 0x0
	public const LinuxArpHardware FDDI = 774; // 0x0
	public const LinuxArpHardware TUNNEL = 768; // 0x0
	public const LinuxArpHardware TUNNEL6 = 769; // 0x0

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct ifaddrs // TypeDefIndex: 1505
{
	// Fields
	public IntPtr ifa_next; // 0x10
	public string ifa_name; // 0x18
	public uint ifa_flags; // 0x20
	public IntPtr ifa_addr; // 0x28
	public IntPtr ifa_netmask; // 0x30
	public IntPtr ifa_dstaddr; // 0x38
	public IntPtr ifa_data; // 0x40

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct sockaddr // TypeDefIndex: 1506
{
	// Fields
	public byte sa_len; // 0x10
	public byte sa_family; // 0x11

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct sockaddr_in // TypeDefIndex: 1507
{
	// Fields
	public byte sin_len; // 0x10
	public byte sin_family; // 0x11
	public ushort sin_port; // 0x12
	public uint sin_addr; // 0x14

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct in6_addr // TypeDefIndex: 1508
{
	// Fields
	public byte[] u6_addr8; // 0x10

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct sockaddr_in6 // TypeDefIndex: 1509
{
	// Fields
	public byte sin6_len; // 0x10
	public byte sin6_family; // 0x11
	public ushort sin6_port; // 0x12
	public uint sin6_flowinfo; // 0x14
	public in6_addr sin6_addr; // 0x18
	public uint sin6_scope_id; // 0x20

}

// Namespace: System.Net.NetworkInformation.MacOsStructs
internal struct sockaddr_dl // TypeDefIndex: 1510
{
	// Fields
	public byte sdl_len; // 0x10
	public byte sdl_family; // 0x11
	public ushort sdl_index; // 0x12
	public byte sdl_type; // 0x14
	public byte sdl_nlen; // 0x15
	public byte sdl_alen; // 0x16
	public byte sdl_slen; // 0x17
	public byte[] sdl_data; // 0x18

}

// Namespace: System.Net.NetworkInformation
internal sealed class MacOsArpHardware : Enum // TypeDefIndex: 1511
{
	// Fields
	public int value__; // 0x10
	public const MacOsArpHardware ETHER = 6; // 0x0
	public const MacOsArpHardware ATM = 37; // 0x0
	public const MacOsArpHardware SLIP = 28; // 0x0
	public const MacOsArpHardware PPP = 23; // 0x0
	public const MacOsArpHardware LOOPBACK = 24; // 0x0
	public const MacOsArpHardware FDDI = 15; // 0x0

}

// Namespace: System.Net.NetworkInformation
public class NetworkInformationException : Win32Exception // TypeDefIndex: 1512
{
	// Fields
	private int error_code; // 0x64

	// Methods
	public void .ctor(); // 0x1006D6AE0
	public void .ctor(int errorCode); // 0x1006D6AE8
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006D6AF0
}

// Namespace: System.Net.NetworkInformation
public abstract class NetworkInterface // TypeDefIndex: 1513
{
	// Fields
	private static Version windowsVer51; // 0x0
	internal static readonly bool runningOnUnix; // 0x8

	// Methods
	protected void .ctor(); // 0x1006D6B88
	private static void .cctor(); // 0x1006D6B90
	private static extern int uname(IntPtr buf); // 0x1006D6C34
	public static NetworkInterface[] GetAllNetworkInterfaces(); // 0x1006D6CD0
	public abstract PhysicalAddress GetPhysicalAddress(); // 0
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixNetworkInterface : NetworkInterface // TypeDefIndex: 1514
{
	// Fields
	private string name; // 0x10
	private int index; // 0x18
	protected List`1<IPAddress> addresses; // 0x20
	private byte[] macAddress; // 0x28
	private NetworkInterfaceType type; // 0x30

	// Methods
	internal void .ctor(string name); // 0x1006D4D64
	internal void AddAddress(IPAddress address); // 0x1006D5A74
	internal void SetLinkLayerInfo(int index, byte[] macAddress, NetworkInterfaceType type); // 0x1006D5ADC
	public override PhysicalAddress GetPhysicalAddress(); // 0x1006D7738
}

// Namespace: System.Net.NetworkInformation
internal class LinuxNetworkInterface : UnixNetworkInterface // TypeDefIndex: 1515
{
	// Fields
	private string iface_path; // 0x38
	private string iface_operstate_path; // 0x40
	private string iface_flags_path; // 0x48

	// Methods
	private void .ctor(string name); // 0x1006D4C7C
	private static extern int getifaddrs(out IntPtr ifap); // 0x1006D4E08
	private static extern void freeifaddrs(IntPtr ifap); // 0x1006D4EB0
	internal string get_IfacePath(); // 0x1006D4F4C
	public static NetworkInterface[] ImplGetAllNetworkInterfaces(); // 0x1006D4F54
}

// Namespace: System.Net.NetworkInformation
internal class MacOsNetworkInterface : UnixNetworkInterface // TypeDefIndex: 1516
{
	// Methods
	private void .ctor(string name); // 0x1006D5AEC
	private static extern int getifaddrs(out IntPtr ifap); // 0x1006D5AF0
	private static extern void freeifaddrs(IntPtr ifap); // 0x1006D5B98
	public static NetworkInterface[] ImplGetAllNetworkInterfaces(); // 0x1006D5C34
}

// Namespace: System.Net.NetworkInformation
internal class Win32NetworkInterface2 : NetworkInterface // TypeDefIndex: 1517
{
	// Fields
	private Win32_IP_ADAPTER_ADDRESSES addr; // 0x10
	private Win32_MIB_IFROW mib4; // 0x18
	private Win32_MIB_IFROW mib6; // 0x88
	private Win32IPv4InterfaceStatistics ip4stats; // 0xF8
	private IPInterfaceProperties ip_if_props; // 0x100

	// Methods
	private void .ctor(Win32_IP_ADAPTER_ADDRESSES addr); // 0x1006D7E34
	private static extern int GetAdaptersAddresses(uint family, uint flags, IntPtr reserved, byte[] info, int size); // 0x1006D815C
	private static extern int GetIfEntry(Win32_MIB_IFROW row); // 0x1006D803C
	public static NetworkInterface[] ImplGetAllNetworkInterfaces(); // 0x1006D6F6C
	private static Win32_IP_ADAPTER_ADDRESSES[] GetAdaptersAddresses(); // 0x1006D825C
	public override PhysicalAddress GetPhysicalAddress(); // 0x1006D847C
}

// Namespace: System.Net.NetworkInformation
public sealed class NetworkInterfaceType : Enum // TypeDefIndex: 1518
{
	// Fields
	public int value__; // 0x10
	public const NetworkInterfaceType Unknown = 1; // 0x0
	public const NetworkInterfaceType Ethernet = 6; // 0x0
	public const NetworkInterfaceType TokenRing = 9; // 0x0
	public const NetworkInterfaceType Fddi = 15; // 0x0
	public const NetworkInterfaceType BasicIsdn = 20; // 0x0
	public const NetworkInterfaceType PrimaryIsdn = 21; // 0x0
	public const NetworkInterfaceType Ppp = 23; // 0x0
	public const NetworkInterfaceType Loopback = 24; // 0x0
	public const NetworkInterfaceType Ethernet3Megabit = 26; // 0x0
	public const NetworkInterfaceType Slip = 28; // 0x0
	public const NetworkInterfaceType Atm = 37; // 0x0
	public const NetworkInterfaceType GenericModem = 48; // 0x0
	public const NetworkInterfaceType FastEthernetT = 62; // 0x0
	public const NetworkInterfaceType Isdn = 63; // 0x0
	public const NetworkInterfaceType FastEthernetFx = 69; // 0x0
	public const NetworkInterfaceType Wireless80211 = 71; // 0x0
	public const NetworkInterfaceType AsymmetricDsl = 94; // 0x0
	public const NetworkInterfaceType RateAdaptDsl = 95; // 0x0
	public const NetworkInterfaceType SymmetricDsl = 96; // 0x0
	public const NetworkInterfaceType VeryHighSpeedDsl = 97; // 0x0
	public const NetworkInterfaceType IPOverAtm = 114; // 0x0
	public const NetworkInterfaceType GigabitEthernet = 117; // 0x0
	public const NetworkInterfaceType Tunnel = 131; // 0x0
	public const NetworkInterfaceType MultiRateSymmetricDsl = 143; // 0x0
	public const NetworkInterfaceType HighPerformanceSerialBus = 144; // 0x0

}

// Namespace: System.Net.NetworkInformation
public sealed class OperationalStatus : Enum // TypeDefIndex: 1519
{
	// Fields
	public int value__; // 0x10
	public const OperationalStatus Up = 1; // 0x0
	public const OperationalStatus Down = 2; // 0x0
	public const OperationalStatus Testing = 3; // 0x0
	public const OperationalStatus Unknown = 4; // 0x0
	public const OperationalStatus Dormant = 5; // 0x0
	public const OperationalStatus NotPresent = 6; // 0x0
	public const OperationalStatus LowerLayerDown = 7; // 0x0

}

// Namespace: System.Net.NetworkInformation
public class PhysicalAddress // TypeDefIndex: 1520
{
	// Fields
	public static readonly PhysicalAddress None; // 0x0
	private byte[] bytes; // 0x10

	// Methods
	public void .ctor(byte[] address); // 0x1006D7094
	private static void .cctor(); // 0x1006D70C0
	public override bool Equals(object comparand); // 0x1006D7158
	public override int GetHashCode(); // 0x1006D7284
	public override string ToString(); // 0x1006D73A0
}

// Namespace: System.Net.NetworkInformation
internal struct AlignmentUnion // TypeDefIndex: 1521
{
	// Fields
	public ulong Alignment; // 0x10
	public int Length; // 0x10
	public int IfIndex; // 0x14

}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_ADAPTER_ADDRESSES // TypeDefIndex: 1522
{
	// Fields
	public AlignmentUnion Alignment; // 0x10
	public IntPtr Next; // 0x18
	public string AdapterName; // 0x20
	public IntPtr FirstUnicastAddress; // 0x28
	public IntPtr FirstAnycastAddress; // 0x30
	public IntPtr FirstMulticastAddress; // 0x38
	public IntPtr FirstDnsServerAddress; // 0x40
	public string DnsSuffix; // 0x48
	public string Description; // 0x50
	public string FriendlyName; // 0x58
	public byte[] PhysicalAddress; // 0x60
	public uint PhysicalAddressLength; // 0x68
	public uint Flags; // 0x6C
	public uint Mtu; // 0x70
	public NetworkInterfaceType IfType; // 0x74
	public OperationalStatus OperStatus; // 0x78
	public int Ipv6IfIndex; // 0x7C
	public uint[] ZoneIndices; // 0x80

	// Methods
	public void .ctor(); // 0x1006D77C8
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_IFROW // TypeDefIndex: 1523
{
	// Fields
	public char[] Name; // 0x10
	public int Index; // 0x18
	public NetworkInterfaceType Type; // 0x1C
	public int Mtu; // 0x20
	public uint Speed; // 0x24
	public int PhysAddrLen; // 0x28
	public byte[] PhysAddr; // 0x30
	public uint AdminStatus; // 0x38
	public uint OperStatus; // 0x3C
	public uint LastChange; // 0x40
	public int InOctets; // 0x44
	public int InUcastPkts; // 0x48
	public int InNUcastPkts; // 0x4C
	public int InDiscards; // 0x50
	public int InErrors; // 0x54
	public int InUnknownProtos; // 0x58
	public int OutOctets; // 0x5C
	public int OutUcastPkts; // 0x60
	public int OutNUcastPkts; // 0x64
	public int OutDiscards; // 0x68
	public int OutErrors; // 0x6C
	public int OutQLen; // 0x70
	public int DescrLen; // 0x74
	public byte[] Descr; // 0x78

}

// Namespace: System.Net
public class ProtocolViolationException : InvalidOperationException, ISerializable // TypeDefIndex: 1524
{
	// Methods
	public void .ctor(); // 0x1006D8548
	public void .ctor(string message); // 0x1006D8550
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006D8558
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1006D8560
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006D8568
}

// Namespace: System.Net.Security
public abstract class AuthenticatedStream : Stream // TypeDefIndex: 1525
{
	// Fields
	private Stream innerStream; // 0x18
	private bool leaveStreamOpen; // 0x20

	// Methods
	protected void .ctor(Stream innerStream, bool leaveInnerStreamOpen); // 0x1006D8570
	protected Stream get_InnerStream(); // 0x1006D85F4
	public abstract bool get_IsAuthenticated(); // 0
	public bool get_LeaveInnerStreamOpen(); // 0x1006D85FC
	protected override void Dispose(bool disposing); // 0x1006D8604
}

// Namespace: System.Net.Security
public sealed class AuthenticationLevel : Enum // TypeDefIndex: 1526
{
	// Fields
	public int value__; // 0x10
	public const AuthenticationLevel None = 0; // 0x0
	public const AuthenticationLevel MutualAuthRequested = 1; // 0x0
	public const AuthenticationLevel MutualAuthRequired = 2; // 0x0

}

// Namespace: System.Net
public sealed class SecurityProtocolType : Enum // TypeDefIndex: 1527
{
	// Fields
	public int value__; // 0x10
	public const SecurityProtocolType Ssl3 = 48; // 0x0
	public const SecurityProtocolType Tls = 192; // 0x0

}

// Namespace: System.Net.Security
public class SslStream : AuthenticatedStream // TypeDefIndex: 1528
{
	// Fields
	private SslStreamBase ssl_stream; // 0x28
	private RemoteCertificateValidationCallback validation_callback; // 0x30
	private LocalCertificateSelectionCallback selection_callback; // 0x38

	// Methods
	public void .ctor(Stream innerStream, bool leaveStreamOpen, RemoteCertificateValidationCallback certValidationCallback, LocalCertificateSelectionCallback certSelectionCallback); // 0x1006D89FC
	public override bool get_CanRead(); // 0x1006D8A30
	public override bool get_CanSeek(); // 0x1006D8A84
	public override bool get_CanWrite(); // 0x1006D8AD8
	public override long get_Length(); // 0x1006D8B2C
	public override long get_Position(); // 0x1006D8B80
	public override void set_Position(long value); // 0x1006D8BD4
	public override bool get_IsAuthenticated(); // 0x1006D8C34
	public override int get_ReadTimeout(); // 0x1006D8C44
	public override int get_WriteTimeout(); // 0x1006D8C98
	private X509Certificate OnCertificateSelection(X509CertificateCollection clientCerts, X509Certificate serverCert, string targetHost, X509CertificateCollection serverRequestedCerts); // 0x1006D8CEC
	public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState); // 0x1006D8F04
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x1006D91FC
	private SecurityProtocolType GetMonoSslProtocol(SslProtocols ms); // 0x1006D91CC
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState); // 0x1006D9338
	public virtual void AuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation); // 0x1006D93D4
	protected override void Dispose(bool disposing); // 0x1006D948C
	public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult); // 0x1006D94CC
	public override int EndRead(IAsyncResult asyncResult); // 0x1006D956C
	public override void EndWrite(IAsyncResult asyncResult); // 0x1006D95D8
	public override void Flush(); // 0x1006D9644
	public override int Read(byte[] buffer, int offset, int count); // 0x1006D96A0
	public override long Seek(long offset, SeekOrigin origin); // 0x1006D9748
	public override void SetLength(long value); // 0x1006D97A8
	public override void Write(byte[] buffer, int offset, int count); // 0x1006D980C
	private void CheckConnectionAuthenticated(); // 0x1006D9298
}

// Namespace: 
private sealed class <BeginAuthenticateAsClient>c__AnonStorey7 // TypeDefIndex: 1529
{
	// Fields
	internal X509CertificateCollection clientCertificates; // 0x10
	internal SslStream <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1006D91C4
	internal AsymmetricAlgorithm <>m__9(X509Certificate cert, string host); // 0x1006D98B4
	internal bool <>m__A(X509Certificate cert, int[] certErrors); // 0x1006DA244
}

// Namespace: System.Net.Security
public sealed class SslPolicyErrors : Enum // TypeDefIndex: 1530
{
	// Fields
	public int value__; // 0x10
	public const SslPolicyErrors None = 0; // 0x0
	public const SslPolicyErrors RemoteCertificateNotAvailable = 1; // 0x0
	public const SslPolicyErrors RemoteCertificateNameMismatch = 2; // 0x0
	public const SslPolicyErrors RemoteCertificateChainErrors = 4; // 0x0

}

// Namespace: System.Net
public class ServicePoint // TypeDefIndex: 1531
{
	// Fields
	private Uri uri; // 0x10
	private int connectionLimit; // 0x18
	private int maxIdleTime; // 0x1C
	private int currentConnections; // 0x20
	private DateTime idleSince; // 0x28
	private Version protocolVersion; // 0x38
	private X509Certificate certificate; // 0x40
	private X509Certificate clientCertificate; // 0x48
	private IPHostEntry host; // 0x50
	private bool usesProxy; // 0x58
	private Hashtable groups; // 0x60
	private bool sendContinue; // 0x68
	private bool useConnect; // 0x69
	private object locker; // 0x70
	private object hostE; // 0x78
	private bool useNagle; // 0x80
	private BindIPEndPoint endPointCallback; // 0x88

	// Methods
	internal void .ctor(Uri uri, int connectionLimit, int maxIdleTime); // 0x1006DAB9C
	public Uri get_Address(); // 0x1006DAC80
	public int get_ConnectionLimit(); // 0x1006DAC88
	public int get_CurrentConnections(); // 0x1006DAC90
	public DateTime get_IdleSince(); // 0x1006DAC98
	internal void set_IdleSince(DateTime value); // 0x1006DACA4
	public virtual Version get_ProtocolVersion(); // 0x1006DACF4
	public void set_Expect100Continue(bool value); // 0x1006DACFC
	public bool get_UseNagleAlgorithm(); // 0x1006DAD0C
	public void set_UseNagleAlgorithm(bool value); // 0x1006DAD14
	internal bool get_SendContinue(); // 0x1006DAD1C
	internal void set_SendContinue(bool value); // 0x1006DAD04
	internal bool get_UsesProxy(); // 0x1006DADD0
	internal void set_UsesProxy(bool value); // 0x1006DADD8
	internal bool get_UseConnect(); // 0x1006DADE0
	internal void set_UseConnect(bool value); // 0x1006DADE8
	internal bool get_AvailableForRecycling(); // 0x1006DADF0
	internal Hashtable get_Groups(); // 0x1006DAECC
	internal IPHostEntry get_HostEntry(); // 0x1006DAF38
	internal void SetVersion(Version version); // 0x1006DB26C
	private WebConnectionGroup GetConnectionGroup(string name); // 0x1006DB274
	internal EventHandler SendRequest(HttpWebRequest request, string groupName); // 0x1006DB468
	internal void SetCertificates(X509Certificate client, X509Certificate server); // 0x1006DBA10
	internal bool CallEndPointDelegate(Socket sock, IPEndPoint remote); // 0x1006DBA18
}

// Namespace: System.Net
public class ServicePointManager // TypeDefIndex: 1532
{
	// Fields
	private static HybridDictionary servicePoints; // 0x0
	private static ICertificatePolicy policy; // 0x8
	private static int defaultConnectionLimit; // 0x10
	private static int maxServicePointIdleTime; // 0x14
	private static int maxServicePoints; // 0x18
	private static bool _checkCRL; // 0x1C
	private static SecurityProtocolType _securityProtocol; // 0x20
	private static bool expectContinue; // 0x24
	private static bool useNagle; // 0x25
	private static RemoteCertificateValidationCallback server_cert_cb; // 0x28
	private static ConnectionManagementData manager; // 0x30

	// Methods
	private static void .cctor(); // 0x1006DBE58
	public static ICertificatePolicy get_CertificatePolicy(); // 0x1006DC378
	public static bool get_CheckCertificateRevocationList(); // 0x1006DA494
	public static SecurityProtocolType get_SecurityProtocol(); // 0x1006DC3E0
	public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback(); // 0x1006DC448
	public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy); // 0x1006DC4B0
	internal static void RecycleServicePoints(); // 0x1006DCB3C
}

// Namespace: 
private class SPKey // TypeDefIndex: 1533
{
	// Fields
	private Uri uri; // 0x10
	private bool use_connect; // 0x18

	// Methods
	public void .ctor(Uri uri, bool use_connect); // 0x1006DD448
	public override int GetHashCode(); // 0x1006DF720
	public override bool Equals(object obj); // 0x1006DF77C
}

// Namespace: 
internal class ChainValidationHelper // TypeDefIndex: 1534
{
	// Fields
	private object sender; // 0x10
	private string host; // 0x18
	private static bool is_macosx; // 0x0
	private static X509KeyUsageFlags s_flags; // 0x4

	// Methods
	public void .ctor(object sender); // 0x1006DD484
	private static void .cctor(); // 0x1006DD4B0
	public string get_Host(); // 0x1006DD520
	internal ValidationResult ValidateChain(X509CertificateCollection certs); // 0x1006DD5E8
	private static int GetStatusFromChain(X509Chain chain); // 0x1006DE7C4
	private static SslPolicyErrors GetErrorsFromChain(X509Chain chain); // 0x1006DDED8
	private static bool CheckCertificateUsage(X509Certificate2 cert); // 0x1006DDF7C
	private static bool CheckServerIdentity(X509Certificate cert, string targetHost); // 0x1006DE430
	private static bool CheckDomainName(string subjectName, string targetHost); // 0x1006DF564
	private static bool Match(string hostname, string pattern); // 0x1006DF244
}

// Namespace: System.Net
public class SocketAddress // TypeDefIndex: 1535
{
	// Fields
	private byte[] data; // 0x10

	// Methods
	public void .ctor(AddressFamily family, int size); // 0x1006DF86C
	public AddressFamily get_Family(); // 0x1006DF968
	public int get_Size(); // 0x1006DF9D8
	public byte get_Item(int offset); // 0x1006DF9F4
	public void set_Item(int offset, byte value); // 0x1006DFA38
	public override string ToString(); // 0x1006DFA88
	public override bool Equals(object obj); // 0x1006DFDD8
	public override int GetHashCode(); // 0x1006DFF08
}

// Namespace: System.Net.Sockets
public sealed class AddressFamily : Enum // TypeDefIndex: 1536
{
	// Fields
	public int value__; // 0x10
	public const AddressFamily Unknown = -1; // 0x0
	public const AddressFamily Unspecified = 0; // 0x0
	public const AddressFamily Unix = 1; // 0x0
	public const AddressFamily InterNetwork = 2; // 0x0
	public const AddressFamily ImpLink = 3; // 0x0
	public const AddressFamily Pup = 4; // 0x0
	public const AddressFamily Chaos = 5; // 0x0
	public const AddressFamily NS = 6; // 0x0
	public const AddressFamily Ipx = 6; // 0x0
	public const AddressFamily Iso = 7; // 0x0
	public const AddressFamily Osi = 7; // 0x0
	public const AddressFamily Ecma = 8; // 0x0
	public const AddressFamily DataKit = 9; // 0x0
	public const AddressFamily Ccitt = 10; // 0x0
	public const AddressFamily Sna = 11; // 0x0
	public const AddressFamily DecNet = 12; // 0x0
	public const AddressFamily DataLink = 13; // 0x0
	public const AddressFamily Lat = 14; // 0x0
	public const AddressFamily HyperChannel = 15; // 0x0
	public const AddressFamily AppleTalk = 16; // 0x0
	public const AddressFamily NetBios = 17; // 0x0
	public const AddressFamily VoiceView = 18; // 0x0
	public const AddressFamily FireFox = 19; // 0x0
	public const AddressFamily Banyan = 21; // 0x0
	public const AddressFamily Atm = 22; // 0x0
	public const AddressFamily InterNetworkV6 = 23; // 0x0
	public const AddressFamily Cluster = 24; // 0x0
	public const AddressFamily Ieee12844 = 25; // 0x0
	public const AddressFamily Irda = 26; // 0x0
	public const AddressFamily NetworkDesigners = 28; // 0x0
	public const AddressFamily Max = 29; // 0x0

}

// Namespace: System.Net.Sockets
public class IPv6MulticastOption // TypeDefIndex: 1537
{
}

// Namespace: System.Net.Sockets
public class LingerOption // TypeDefIndex: 1538
{
	// Fields
	private bool enabled; // 0x10
	private int seconds; // 0x14

	// Methods
	public void .ctor(bool enable, int secs); // 0x1006DFF88
}

// Namespace: System.Net.Sockets
public class MulticastOption // TypeDefIndex: 1539
{
}

// Namespace: System.Net.Sockets
public class NetworkStream : Stream, IDisposable // TypeDefIndex: 1540
{
	// Fields
	private FileAccess access; // 0x18
	private Socket socket; // 0x20
	private bool owns_socket; // 0x28
	private bool readable; // 0x29
	private bool writeable; // 0x2A
	private bool disposed; // 0x2B

	// Methods
	public void .ctor(Socket socket); // 0x1006DFFC4
	public void .ctor(Socket socket, bool owns_socket); // 0x1006E0194
	public void .ctor(Socket socket, FileAccess access, bool owns_socket); // 0x1006DFFD0
	private void System.IDisposable.Dispose(); // 0x1006E01BC
	public override bool get_CanRead(); // 0x1006E0214
	public override bool get_CanSeek(); // 0x1006E0228
	public override bool get_CanWrite(); // 0x1006E0230
	public override long get_Length(); // 0x1006E0244
	public override long get_Position(); // 0x1006E0298
	public override void set_Position(long value); // 0x1006E02EC
	public override int get_ReadTimeout(); // 0x1006E0340
	public override int get_WriteTimeout(); // 0x1006E0418
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x1006E04F0
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state); // 0x1006E0AB8
	protected override void Finalize(); // 0x1006E1050
	protected override void Dispose(bool disposing); // 0x1006E10F0
	public override int EndRead(IAsyncResult ar); // 0x1006E1220
	public override void EndWrite(IAsyncResult ar); // 0x1006E1394
	public override void Flush(); // 0x1006E1504
	public override int Read(out byte[] buffer, int offset, int size); // 0x1006E1508
	public override long Seek(long offset, SeekOrigin origin); // 0x1006E18D4
	public override void SetLength(long value); // 0x1006E1928
	public override void Write(byte[] buffer, int offset, int size); // 0x1006E197C
	private void CheckDisposed(); // 0x1006E06D8
}

// Namespace: System.Net.Sockets
public sealed class ProtocolType : Enum // TypeDefIndex: 1541
{
	// Fields
	public int value__; // 0x10
	public const ProtocolType IP = 0; // 0x0
	public const ProtocolType Icmp = 1; // 0x0
	public const ProtocolType Igmp = 2; // 0x0
	public const ProtocolType Ggp = 3; // 0x0
	public const ProtocolType Tcp = 6; // 0x0
	public const ProtocolType Pup = 12; // 0x0
	public const ProtocolType Udp = 17; // 0x0
	public const ProtocolType Idp = 22; // 0x0
	public const ProtocolType IPv6 = 41; // 0x0
	public const ProtocolType ND = 77; // 0x0
	public const ProtocolType Raw = 255; // 0x0
	public const ProtocolType Unspecified = 0; // 0x0
	public const ProtocolType Ipx = 1000; // 0x0
	public const ProtocolType Spx = 1256; // 0x0
	public const ProtocolType SpxII = 1257; // 0x0
	public const ProtocolType Unknown = -1; // 0x0
	public const ProtocolType IPv4 = 4; // 0x0
	public const ProtocolType IPv6RoutingHeader = 43; // 0x0
	public const ProtocolType IPv6FragmentHeader = 44; // 0x0
	public const ProtocolType IPSecEncapsulatingSecurityPayload = 50; // 0x0
	public const ProtocolType IPSecAuthenticationHeader = 51; // 0x0
	public const ProtocolType IcmpV6 = 58; // 0x0
	public const ProtocolType IPv6NoNextHeader = 59; // 0x0
	public const ProtocolType IPv6DestinationOptions = 60; // 0x0
	public const ProtocolType IPv6HopByHopOptions = 0; // 0x0

}

// Namespace: System.Net.Sockets
public sealed class SelectMode : Enum // TypeDefIndex: 1542
{
	// Fields
	public int value__; // 0x10
	public const SelectMode SelectRead = 0; // 0x0
	public const SelectMode SelectWrite = 1; // 0x0
	public const SelectMode SelectError = 2; // 0x0

}

// Namespace: System.Net.Sockets
public class Socket : IDisposable // TypeDefIndex: 1543
{
	// Fields
	private Queue readQ; // 0x10
	private Queue writeQ; // 0x18
	private bool islistening; // 0x20
	private readonly int MinListenPort; // 0x24
	private readonly int MaxListenPort; // 0x28
	private static int ipv4Supported; // 0x0
	private static int ipv6Supported; // 0x4
	private int linger_timeout; // 0x2C
	private IntPtr socket; // 0x30
	private AddressFamily address_family; // 0x38
	private SocketType socket_type; // 0x3C
	private ProtocolType protocol_type; // 0x40
	internal bool blocking; // 0x44
	private Thread blocking_thread; // 0x48
	private bool isbound; // 0x50
	private static int current_bind_count; // 0x8
	private readonly int max_bind_count; // 0x54
	private bool connected; // 0x58
	private bool closed; // 0x59
	internal bool disposed; // 0x5A
	internal EndPoint seed_endpoint; // 0x60
	private static MethodInfo check_socket_policy; // 0x10

	// Methods
	private void .ctor(AddressFamily family, SocketType type, ProtocolType proto, IntPtr sock); // 0x1006E1D1C
	public void .ctor(AddressFamily family, SocketType type, ProtocolType proto); // 0x1006E1DFC
	private static void .cctor(); // 0x1006E1FFC
	private void System.IDisposable.Dispose(); // 0x1006E23D4
	private void SocketDefaults(); // 0x1006E1F30
	public void set_DontFragment(bool value); // 0x1006E242C
	private static SocketAddress LocalEndPoint_internal(IntPtr socket, out int error); // 0x1006E266C
	public EndPoint get_LocalEndPoint(); // 0x1006E2678
	public SocketType get_SocketType(); // 0x1006E01A4
	public int get_SendTimeout(); // 0x1006E0430
	public int get_ReceiveTimeout(); // 0x1006E0358
	private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking); // 0x1006E2968
	public Socket Accept(); // 0x1006E2978
	public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socket_flags, AsyncCallback callback, object state); // 0x1006E076C
	public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socket_flags, AsyncCallback callback, object state); // 0x1006E0C9C
	private static void Bind_internal(IntPtr sock, SocketAddress sa, out int error); // 0x1006E2E64
	public void Bind(EndPoint local_end); // 0x1006DBBCC
	public int EndReceive(IAsyncResult result); // 0x1006E1370
	public int EndReceive(IAsyncResult asyncResult, out SocketError errorCode); // 0x1006E2E74
	public int EndSend(IAsyncResult result); // 0x1006E14E0
	public int EndSend(IAsyncResult asyncResult, out SocketError errorCode); // 0x1006E3320
	private Exception InvalidAsyncOp(string method); // 0x1006E3144
	private static void Listen_internal(IntPtr sock, int backlog, out int error); // 0x1006E35F0
	public void Listen(int backlog); // 0x1006E3600
	public bool Poll(int time_us, SelectMode mode); // 0x1006E37F0
	public int Receive(byte[] buffer, int offset, int size, SocketFlags flags); // 0x1006E16D8
	private static int RecvFrom_internal(IntPtr sock, byte[] buffer, int offset, int count, SocketFlags flags, SocketAddress sockaddr, out int error); // 0x1006E3B68
	internal int ReceiveFrom_nochecks(byte[] buf, int offset, int size, SocketFlags flags, EndPoint remote_end); // 0x1006E3B88
	internal int ReceiveFrom_nochecks_exc(byte[] buf, int offset, int size, SocketFlags flags, EndPoint remote_end, bool throwOnError, out int error); // 0x1006E3BB0
	public int Send(byte[] buf, int offset, int size, SocketFlags flags); // 0x1006E1B64
	private static int SendTo_internal_real(IntPtr sock, byte[] buffer, int offset, int count, SocketFlags flags, SocketAddress sa, out int error); // 0x1006E4304
	private static int SendTo_internal(IntPtr sock, byte[] buffer, int offset, int count, SocketFlags flags, SocketAddress sa, out int error); // 0x1006E4324
	internal int SendTo_nochecks(byte[] buffer, int offset, int size, SocketFlags flags, EndPoint remote_end); // 0x1006E44AC
	public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue); // 0x1006E45E8
	internal static void CheckProtocolSupport(); // 0x1006E2050
	public static bool get_SupportsIPv4(); // 0x1006E4980
	public static bool get_SupportsIPv6(); // 0x1006E49F4
	private IntPtr Socket_internal(AddressFamily family, SocketType type, ProtocolType proto, out int error); // 0x1006E1F24
	protected override void Finalize(); // 0x1006E4A68
	public AddressFamily get_AddressFamily(); // 0x1006E2C2C
	private static void Blocking_internal(IntPtr socket, bool block, out int error); // 0x1006E4B08
	public bool get_Blocking(); // 0x1006E01B4
	public void set_Blocking(bool value); // 0x1006E2C3C
	public bool get_Connected(); // 0x1006E01AC
	public ProtocolType get_ProtocolType(); // 0x1006E2C34
	public void set_NoDelay(bool value); // 0x1006E4B18
	private void Linger(IntPtr handle); // 0x1006E4C48
	protected virtual void Dispose(bool explicitDisposing); // 0x1006E4DDC
	private static void Close_internal(IntPtr socket, out int error); // 0x1006E4F68
	public void Close(); // 0x1006E1138
	private static void Connect_internal_real(IntPtr sock, SocketAddress sa, out int error); // 0x1006E4F74
	private static void Connect_internal(IntPtr sock, SocketAddress sa, out int error, bool requireSocketPolicyFile); // 0x1006E4F84
	internal static bool CheckEndPoint(SocketAddress sa); // 0x1006E3E3C
	private static MethodInfo GetUnityCrossDomainHelperMethod(string methodname); // 0x1006E506C
	public void Connect(EndPoint remoteEP); // 0x1006E51B4
	internal void Connect(EndPoint remoteEP, bool requireSocketPolicy); // 0x1006E51BC
	private static bool Poll_internal(IntPtr socket, SelectMode mode, int timeout, out int error); // 0x1006E3998
	private static int Receive_internal(IntPtr sock, byte[] buffer, int offset, int count, SocketFlags flags, out int error); // 0x1006E55C4
	internal int Receive_nochecks(byte[] buf, int offset, int size, SocketFlags flags, out SocketError error); // 0x1006E39AC
	private static void GetSocketOption_obj_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error); // 0x1006E55E0
	private static int Send_internal(IntPtr sock, byte[] buf, int offset, int count, SocketFlags flags, out int error); // 0x1006E55F8
	internal int Send_nochecks(byte[] buf, int offset, int size, SocketFlags flags, out SocketError error); // 0x1006E4210
	public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName); // 0x1006E27D0
	private static void Shutdown_internal(IntPtr socket, SocketShutdown how, out int error); // 0x1006E4DCC
	public void Shutdown(SocketShutdown how); // 0x1006E5614
	private static void SetSocketOption_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error); // 0x1006E4960
	public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue); // 0x1006E2538
	private void ThrowIfUpd(); // 0x1006E4BD8
}

// Namespace: 
private sealed class SocketOperation : Enum // TypeDefIndex: 1544
{
	// Fields
	public int value__; // 0x10
	public const SocketOperation Accept = 0; // 0x0
	public const SocketOperation Connect = 1; // 0x0
	public const SocketOperation Receive = 2; // 0x0
	public const SocketOperation ReceiveFrom = 3; // 0x0
	public const SocketOperation Send = 4; // 0x0
	public const SocketOperation SendTo = 5; // 0x0
	public const SocketOperation UsedInManaged1 = 6; // 0x0
	public const SocketOperation UsedInManaged2 = 7; // 0x0
	public const SocketOperation UsedInProcess = 8; // 0x0
	public const SocketOperation UsedInConsole2 = 9; // 0x0
	public const SocketOperation Disconnect = 10; // 0x0
	public const SocketOperation AcceptReceive = 11; // 0x0
	public const SocketOperation ReceiveGeneric = 12; // 0x0
	public const SocketOperation SendGeneric = 13; // 0x0

}

// Namespace: 
private sealed class SocketAsyncResult : IAsyncResult // TypeDefIndex: 1545
{
	// Fields
	public Socket Sock; // 0x10
	public IntPtr handle; // 0x18
	private object state; // 0x20
	private AsyncCallback callback; // 0x28
	private WaitHandle waithandle; // 0x30
	private Exception delayedException; // 0x38
	public EndPoint EndPoint; // 0x40
	public byte[] Buffer; // 0x48
	public int Offset; // 0x50
	public int Size; // 0x54
	public SocketFlags SockFlags; // 0x58
	public Socket AcceptSocket; // 0x60
	public IPAddress[] Addresses; // 0x68
	public int Port; // 0x70
	public IList`1<ArraySegment`1<byte>> Buffers; // 0x78
	public bool ReuseSocket; // 0x80
	private Socket acc_socket; // 0x88
	private int total; // 0x90
	private bool completed_sync; // 0x94
	private bool completed; // 0x95
	public bool blocking; // 0x96
	internal int error; // 0x98
	private SocketOperation operation; // 0x9C
	public object ares; // 0xA0
	public int EndCalled; // 0xA8

	// Methods
	public void .ctor(Socket sock, object state, AsyncCallback callback, SocketOperation operation); // 0x1006E2D54
	public void CheckIfThrowDelayedException(); // 0x1006E3278
	private void CompleteAllOnDispose(Queue queue); // 0x1006E57FC
	private void CompleteDisposed(object unused); // 0x1006E59C0
	public void Complete(); // 0x1006E59C4
	private SocketAsyncCall GetDelegate(Worker worker, SocketOperation op); // 0x1006E5EE8
	public void Complete(int total); // 0x1006E5FC8
	public void Complete(Exception e); // 0x1006E5FD0
	public object get_AsyncState(); // 0x1006E5FD8
	public WaitHandle get_AsyncWaitHandle(); // 0x1006E5FE0
	public bool get_IsCompleted(); // 0x1006E60BC
	public void set_IsCompleted(bool value); // 0x1006E5D38
	public int get_Total(); // 0x1006E3318
	public void set_Total(int value); // 0x1006E60C4
	public SocketError get_ErrorCode(); // 0x1006E31E8
}

// Namespace: 
private sealed class Worker // TypeDefIndex: 1546
{
	// Fields
	private SocketAsyncResult result; // 0x10
	private bool requireSocketSecurity; // 0x18
	private int send_so_far; // 0x1C

	// Methods
	public void .ctor(SocketAsyncResult ares); // 0x1006E2DC0
	public void .ctor(SocketAsyncResult ares, bool requireSocketSecurity); // 0x1006E6108
	public void Receive(); // 0x1006E6144
	public void ReceiveFrom(); // 0x1006E615C
	private void UpdateSendValues(int last_sent); // 0x1006E6280
	public void Send(); // 0x1006E62C0
	public void SendTo(); // 0x1006E63F0
}

// Namespace: 
private sealed class SocketAsyncCall : MulticastDelegate // TypeDefIndex: 1547
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006E2DF4
	public virtual void Invoke(); // 0x1006E5754
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1006E2E04
	public virtual void EndInvoke(IAsyncResult result); // 0x1006E57F0
}

// Namespace: System.Net.Sockets
public sealed class SocketError : Enum // TypeDefIndex: 1548
{
	// Fields
	public int value__; // 0x10
	public const SocketError AccessDenied = 10013; // 0x0
	public const SocketError AddressAlreadyInUse = 10048; // 0x0
	public const SocketError AddressFamilyNotSupported = 10047; // 0x0
	public const SocketError AddressNotAvailable = 10049; // 0x0
	public const SocketError AlreadyInProgress = 10037; // 0x0
	public const SocketError ConnectionAborted = 10053; // 0x0
	public const SocketError ConnectionRefused = 10061; // 0x0
	public const SocketError ConnectionReset = 10054; // 0x0
	public const SocketError DestinationAddressRequired = 10039; // 0x0
	public const SocketError Disconnecting = 10101; // 0x0
	public const SocketError Fault = 10014; // 0x0
	public const SocketError HostDown = 10064; // 0x0
	public const SocketError HostNotFound = 11001; // 0x0
	public const SocketError HostUnreachable = 10065; // 0x0
	public const SocketError InProgress = 10036; // 0x0
	public const SocketError Interrupted = 10004; // 0x0
	public const SocketError InvalidArgument = 10022; // 0x0
	public const SocketError IOPending = 997; // 0x0
	public const SocketError IsConnected = 10056; // 0x0
	public const SocketError MessageSize = 10040; // 0x0
	public const SocketError NetworkDown = 10050; // 0x0
	public const SocketError NetworkReset = 10052; // 0x0
	public const SocketError NetworkUnreachable = 10051; // 0x0
	public const SocketError NoBufferSpaceAvailable = 10055; // 0x0
	public const SocketError NoData = 11004; // 0x0
	public const SocketError NoRecovery = 11003; // 0x0
	public const SocketError NotConnected = 10057; // 0x0
	public const SocketError NotInitialized = 10093; // 0x0
	public const SocketError NotSocket = 10038; // 0x0
	public const SocketError OperationAborted = 995; // 0x0
	public const SocketError OperationNotSupported = 10045; // 0x0
	public const SocketError ProcessLimit = 10067; // 0x0
	public const SocketError ProtocolFamilyNotSupported = 10046; // 0x0
	public const SocketError ProtocolNotSupported = 10043; // 0x0
	public const SocketError ProtocolOption = 10042; // 0x0
	public const SocketError ProtocolType = 10041; // 0x0
	public const SocketError Shutdown = 10058; // 0x0
	public const SocketError SocketError = -1; // 0x0
	public const SocketError SocketNotSupported = 10044; // 0x0
	public const SocketError Success = 0; // 0x0
	public const SocketError SystemNotReady = 10091; // 0x0
	public const SocketError TimedOut = 10060; // 0x0
	public const SocketError TooManyOpenSockets = 10024; // 0x0
	public const SocketError TryAgain = 11002; // 0x0
	public const SocketError TypeNotFound = 10109; // 0x0
	public const SocketError VersionNotSupported = 10092; // 0x0
	public const SocketError WouldBlock = 10035; // 0x0

}

// Namespace: System.Net.Sockets
public class SocketException : Win32Exception // TypeDefIndex: 1549
{
	// Methods
	public void .ctor(); // 0x1006E65D0
	public void .ctor(int error); // 0x1006E1F28
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006E6654
	internal void .ctor(int error, string message); // 0x1006E3B60
	private static int WSAGetLastError_internal(); // 0x1006E65FC
	public SocketError get_SocketErrorCode(); // 0x1006E60CC
	public override string get_Message(); // 0x1006E665C
}

// Namespace: System.Net.Sockets
public sealed class SocketFlags : Enum // TypeDefIndex: 1550
{
	// Fields
	public int value__; // 0x10
	public const SocketFlags None = 0; // 0x0
	public const SocketFlags OutOfBand = 1; // 0x0
	public const SocketFlags Peek = 2; // 0x0
	public const SocketFlags DontRoute = 4; // 0x0
	public const SocketFlags MaxIOVectorLength = 16; // 0x0
	public const SocketFlags Truncated = 256; // 0x0
	public const SocketFlags ControlDataTruncated = 512; // 0x0
	public const SocketFlags Broadcast = 1024; // 0x0
	public const SocketFlags Multicast = 2048; // 0x0
	public const SocketFlags Partial = 32768; // 0x0

}

// Namespace: System.Net.Sockets
public sealed class SocketOptionLevel : Enum // TypeDefIndex: 1551
{
	// Fields
	public int value__; // 0x10
	public const SocketOptionLevel Socket = 65535; // 0x0
	public const SocketOptionLevel IP = 0; // 0x0
	public const SocketOptionLevel IPv6 = 41; // 0x0
	public const SocketOptionLevel Tcp = 6; // 0x0
	public const SocketOptionLevel Udp = 17; // 0x0

}

// Namespace: System.Net.Sockets
public sealed class SocketOptionName : Enum // TypeDefIndex: 1552
{
	// Fields
	public int value__; // 0x10
	public const SocketOptionName Debug = 1; // 0x0
	public const SocketOptionName AcceptConnection = 2; // 0x0
	public const SocketOptionName ReuseAddress = 4; // 0x0
	public const SocketOptionName KeepAlive = 8; // 0x0
	public const SocketOptionName DontRoute = 16; // 0x0
	public const SocketOptionName Broadcast = 32; // 0x0
	public const SocketOptionName UseLoopback = 64; // 0x0
	public const SocketOptionName Linger = 128; // 0x0
	public const SocketOptionName OutOfBandInline = 256; // 0x0
	public const SocketOptionName DontLinger = -129; // 0x0
	public const SocketOptionName ExclusiveAddressUse = -5; // 0x0
	public const SocketOptionName SendBuffer = 4097; // 0x0
	public const SocketOptionName ReceiveBuffer = 4098; // 0x0
	public const SocketOptionName SendLowWater = 4099; // 0x0
	public const SocketOptionName ReceiveLowWater = 4100; // 0x0
	public const SocketOptionName SendTimeout = 4101; // 0x0
	public const SocketOptionName ReceiveTimeout = 4102; // 0x0
	public const SocketOptionName Error = 4103; // 0x0
	public const SocketOptionName Type = 4104; // 0x0
	public const SocketOptionName MaxConnections = 2147483647; // 0x0
	public const SocketOptionName IPOptions = 1; // 0x0
	public const SocketOptionName HeaderIncluded = 2; // 0x0
	public const SocketOptionName TypeOfService = 3; // 0x0
	public const SocketOptionName IpTimeToLive = 4; // 0x0
	public const SocketOptionName MulticastInterface = 9; // 0x0
	public const SocketOptionName MulticastTimeToLive = 10; // 0x0
	public const SocketOptionName MulticastLoopback = 11; // 0x0
	public const SocketOptionName AddMembership = 12; // 0x0
	public const SocketOptionName DropMembership = 13; // 0x0
	public const SocketOptionName DontFragment = 14; // 0x0
	public const SocketOptionName AddSourceMembership = 15; // 0x0
	public const SocketOptionName DropSourceMembership = 16; // 0x0
	public const SocketOptionName BlockSource = 17; // 0x0
	public const SocketOptionName UnblockSource = 18; // 0x0
	public const SocketOptionName PacketInformation = 19; // 0x0
	public const SocketOptionName NoDelay = 1; // 0x0
	public const SocketOptionName BsdUrgent = 2; // 0x0
	public const SocketOptionName Expedited = 2; // 0x0
	public const SocketOptionName NoChecksum = 1; // 0x0
	public const SocketOptionName ChecksumCoverage = 20; // 0x0
	public const SocketOptionName HopLimit = 21; // 0x0
	public const SocketOptionName UpdateAcceptContext = 28683; // 0x0
	public const SocketOptionName UpdateConnectContext = 28688; // 0x0

}

// Namespace: System.Net.Sockets
public sealed class SocketShutdown : Enum // TypeDefIndex: 1553
{
	// Fields
	public int value__; // 0x10
	public const SocketShutdown Receive = 0; // 0x0
	public const SocketShutdown Send = 1; // 0x0
	public const SocketShutdown Both = 2; // 0x0

}

// Namespace: System.Net.Sockets
public sealed class SocketType : Enum // TypeDefIndex: 1554
{
	// Fields
	public int value__; // 0x10
	public const SocketType Stream = 1; // 0x0
	public const SocketType Dgram = 2; // 0x0
	public const SocketType Raw = 3; // 0x0
	public const SocketType Rdm = 4; // 0x0
	public const SocketType Seqpacket = 5; // 0x0
	public const SocketType Unknown = -1; // 0x0

}

// Namespace: System.Net.Sockets
public class TcpClient : IDisposable // TypeDefIndex: 1555
{
	// Fields
	private NetworkStream stream; // 0x10
	private bool active; // 0x18
	private Socket client; // 0x20
	private bool disposed; // 0x28
	private Properties values; // 0x2C
	private int recv_timeout; // 0x30
	private int send_timeout; // 0x34
	private int recv_buffer_size; // 0x38
	private int send_buffer_size; // 0x3C
	private LingerOption linger_state; // 0x40
	private bool no_delay; // 0x48

	// Methods
	public void .ctor(string hostname, int port); // 0x1006E6664
	private void System.IDisposable.Dispose(); // 0x1006E6730
	private void Init(AddressFamily family); // 0x1006E6788
	public Socket get_Client(); // 0x1006E6810
	public void set_LingerState(LingerOption value); // 0x1006E6818
	public void set_NoDelay(bool value); // 0x1006E6860
	public void set_ReceiveBufferSize(int value); // 0x1006E68A8
	public void set_ReceiveTimeout(int value); // 0x1006E68F0
	public void set_SendBufferSize(int value); // 0x1006E6938
	public void set_SendTimeout(int value); // 0x1006E6980
	public void Close(); // 0x1006E69C8
	public void Connect(IPEndPoint remote_end_point); // 0x1006E6AAC
	private void SetOptions(); // 0x1006E6BBC
	public void Connect(string hostname, int port); // 0x1006E66A4
	public void Connect(IPAddress[] ipAddresses, int port); // 0x1006E6C54
	protected virtual void Dispose(bool disposing); // 0x1006E707C
	protected override void Finalize(); // 0x1006E70FC
	public NetworkStream GetStream(); // 0x1006E719C
	private void CheckDisposed(); // 0x1006E6B28
}

// Namespace: 
private sealed class Properties : Enum // TypeDefIndex: 1556
{
	// Fields
	public uint value__; // 0x10
	public const Properties LingerState = 1; // 0x0
	public const Properties NoDelay = 2; // 0x0
	public const Properties ReceiveBufferSize = 4; // 0x0
	public const Properties ReceiveTimeout = 8; // 0x0
	public const Properties SendBufferSize = 16; // 0x0
	public const Properties SendTimeout = 32; // 0x0

}

// Namespace: System.Net
internal class WebAsyncResult : IAsyncResult // TypeDefIndex: 1557
{
	// Fields
	private ManualResetEvent handle; // 0x10
	private bool synch; // 0x18
	private bool isCompleted; // 0x19
	private AsyncCallback cb; // 0x20
	private object state; // 0x28
	private int nbytes; // 0x30
	private IAsyncResult innerAsyncResult; // 0x38
	private bool callbackDone; // 0x40
	private Exception exc; // 0x48
	private HttpWebResponse response; // 0x50
	private Stream writeStream; // 0x58
	private byte[] buffer; // 0x60
	private int offset; // 0x68
	private int size; // 0x6C
	private object locker; // 0x70
	public bool EndCalled; // 0x78
	public bool AsyncWriteAll; // 0x79

	// Methods
	public void .ctor(AsyncCallback cb, object state); // 0x1006E725C
	public void .ctor(HttpWebRequest request, AsyncCallback cb, object state); // 0x1006E72DC
	public void .ctor(AsyncCallback cb, object state, byte[] buffer, int offset, int size); // 0x1006E735C
	internal void SetCompleted(bool synch, Exception e); // 0x1006E7400
	internal void Reset(); // 0x1006E74A4
	internal void SetCompleted(bool synch, int nbytes); // 0x1006E7548
	internal void SetCompleted(bool synch, Stream writeStream); // 0x1006E75F0
	internal void SetCompleted(bool synch, HttpWebResponse response); // 0x1006E7698
	internal void DoCallback(); // 0x1006E773C
	internal void WaitUntilComplete(); // 0x1006E7768
	internal bool WaitUntilComplete(int timeout, bool exitContext); // 0x1006E7918
	public object get_AsyncState(); // 0x1006E79E0
	public WaitHandle get_AsyncWaitHandle(); // 0x1006E7838
	public bool get_IsCompleted(); // 0x1006E77F0
	internal bool get_GotException(); // 0x1006E79E8
	internal Exception get_Exception(); // 0x1006E79F8
	internal int get_NBytes(); // 0x1006E7A00
	internal void set_NBytes(int value); // 0x1006E7A08
	internal IAsyncResult get_InnerAsyncResult(); // 0x1006E7A10
	internal void set_InnerAsyncResult(IAsyncResult value); // 0x1006E7A18
	internal HttpWebResponse get_Response(); // 0x1006E7A20
	internal byte[] get_Buffer(); // 0x1006E7A28
	internal int get_Offset(); // 0x1006E7A30
	internal int get_Size(); // 0x1006E7A38
}

// Namespace: System.Net
internal sealed class ReadState : Enum // TypeDefIndex: 1558
{
	// Fields
	public int value__; // 0x10
	public const ReadState None = 0; // 0x0
	public const ReadState Status = 1; // 0x0
	public const ReadState Headers = 2; // 0x0
	public const ReadState Content = 3; // 0x0

}

// Namespace: System.Net
internal class WebConnection // TypeDefIndex: 1559
{
	// Fields
	private ServicePoint sPoint; // 0x10
	private Stream nstream; // 0x18
	private Socket socket; // 0x20
	private object socketLock; // 0x28
	private WebExceptionStatus status; // 0x30
	private WaitCallback initConn; // 0x38
	private bool keepAlive; // 0x40
	private byte[] buffer; // 0x48
	private static AsyncCallback readDoneDelegate; // 0x0
	private EventHandler abortHandler; // 0x50
	private AbortHelper abortHelper; // 0x58
	private ReadState readState; // 0x60
	internal WebConnectionData Data; // 0x68
	private bool chunkedRead; // 0x70
	private ChunkStream chunkStream; // 0x78
	private Queue queue; // 0x80
	private bool reused; // 0x88
	private int position; // 0x8C
	private bool busy; // 0x90
	private HttpWebRequest priority_request; // 0x98
	private NetworkCredential ntlm_credentials; // 0xA0
	private bool ntlm_authenticated; // 0xA8
	private bool unsafe_sharing; // 0xA9
	private bool ssl; // 0xAA
	private bool certsAvailable; // 0xAB
	private Exception connect_exception; // 0xB0
	private static object classLock; // 0x8
	private static Type sslStream; // 0x10
	private static PropertyInfo piClient; // 0x18
	private static PropertyInfo piServer; // 0x20
	private static PropertyInfo piTrustFailure; // 0x28
	private static MethodInfo method_GetSecurityPolicyFromNonMainThread; // 0x30

	// Methods
	public void .ctor(WebConnectionGroup group, ServicePoint sPoint); // 0x1006E7A40
	private static void .cctor(); // 0x1006E7BC0
	private bool CanReuse(); // 0x1006E7C70
	private void LoggedThrow(Exception e); // 0x1006E7C9C
	private void CheckUnityWebSecurity(HttpWebRequest request); // 0x1006E7D48
	private void Connect(HttpWebRequest request); // 0x1006E8540
	private static void EnsureSSLStreamAvailable(); // 0x1006E8AF8
	private bool CreateTunnel(HttpWebRequest request, Stream stream, out byte[] buffer); // 0x1006E8D90
	private WebHeaderCollection ReadHeaders(HttpWebRequest request, Stream stream, out byte[] retBuffer, out int status); // 0x1006E9370
	private bool CreateStream(HttpWebRequest request); // 0x1006E9C74
	private void HandleError(WebExceptionStatus st, Exception e, string where); // 0x1006E96E8
	private static void ReadDone(IAsyncResult result); // 0x1006EA348
	private static bool ExpectContent(int statusCode); // 0x1006EB734
	internal void GetCertificates(); // 0x1006EB798
	internal static void InitRead(object state); // 0x1006EB2CC
	private int GetResponse(byte[] buffer, int max); // 0x1006EA9CC
	private void InitConnection(object state); // 0x1006EB9A8
	internal EventHandler SendRequest(HttpWebRequest request); // 0x1006DB884
	private void SendNext(); // 0x1006EBC70
	internal void NextRead(); // 0x1006EBDC8
	private static bool ReadLine(byte[] buffer, int start, int max, string output); // 0x1006E9A7C
	internal IAsyncResult BeginRead(HttpWebRequest request, byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006EC030
	internal int EndRead(HttpWebRequest request, IAsyncResult result); // 0x1006EC358
	private int EnsureRead(byte[] buffer, int offset, int size); // 0x1006EC8DC
	private bool CompleteChunkedRead(); // 0x1006E8A2C
	internal IAsyncResult BeginWrite(HttpWebRequest request, byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006ECA8C
	internal void EndWrite2(HttpWebRequest request, IAsyncResult result); // 0x1006ECCF4
	internal bool EndWrite(HttpWebRequest request, IAsyncResult result); // 0x1006ED00C
	internal int Read(HttpWebRequest request, byte[] buffer, int offset, int size); // 0x1006ED2F8
	internal bool Write(HttpWebRequest request, byte[] buffer, int offset, int size, string err_msg); // 0x1006ED74C
	internal void Close(bool sendNext); // 0x1006EA10C
	private void Abort(object sender, EventArgs args); // 0x1006EDB10
	internal void ResetNtlm(); // 0x1006EDFDC
	internal bool get_Busy(); // 0x1006EDFE8
	internal void set_PriorityRequest(HttpWebRequest value); // 0x1006EE02C
	internal bool get_NtlmAuthenticated(); // 0x1006EE034
	internal void set_NtlmAuthenticated(bool value); // 0x1006EE03C
	internal NetworkCredential get_NtlmCredential(); // 0x1006EE044
	internal void set_NtlmCredential(NetworkCredential value); // 0x1006EE04C
	internal bool get_UnsafeAuthenticatedConnectionSharing(); // 0x1006EE054
	internal void set_UnsafeAuthenticatedConnectionSharing(bool value); // 0x1006EE05C
}

// Namespace: 
private class AbortHelper // TypeDefIndex: 1560
{
	// Fields
	public WebConnection Connection; // 0x10

	// Methods
	public void .ctor(); // 0x1006E7BB8
	public void Abort(object sender, EventArgs args); // 0x1006EE064
}

// Namespace: System.Net
internal class WebConnectionData // TypeDefIndex: 1561
{
	// Fields
	public HttpWebRequest request; // 0x10
	public int StatusCode; // 0x18
	public string StatusDescription; // 0x20
	public WebHeaderCollection Headers; // 0x28
	public Version Version; // 0x30
	public Stream stream; // 0x38
	public string Challenge; // 0x40

	// Methods
	public void .ctor(); // 0x1006E7BA8
}

// Namespace: System.Net
internal class WebConnectionGroup // TypeDefIndex: 1562
{
	// Fields
	private ServicePoint sPoint; // 0x10
	private string name; // 0x18
	private ArrayList connections; // 0x20
	private Random rnd; // 0x28
	private Queue queue; // 0x30

	// Methods
	public void .ctor(ServicePoint sPoint, string name); // 0x1006DB3C4
	public WebConnection GetConnection(HttpWebRequest request); // 0x1006DB524
	private static void PrepareSharingNtlm(WebConnection cnc, HttpWebRequest request); // 0x1006EE4F4
	private WebConnection CreateOrReuseConnection(HttpWebRequest request); // 0x1006EE0EC
	internal Queue get_Queue(); // 0x1006E7BB0
}

// Namespace: System.Net
internal class WebConnectionStream : Stream // TypeDefIndex: 1563
{
	// Fields
	private static byte[] crlf; // 0x0
	private bool isRead; // 0x18
	private WebConnection cnc; // 0x20
	private HttpWebRequest request; // 0x28
	private byte[] readBuffer; // 0x30
	private int readBufferOffset; // 0x38
	private int readBufferSize; // 0x3C
	private int contentLength; // 0x40
	private int totalRead; // 0x44
	private long totalWritten; // 0x48
	private bool nextReadCalled; // 0x50
	private int pendingReads; // 0x54
	private int pendingWrites; // 0x58
	private ManualResetEvent pending; // 0x60
	private bool allowBuffering; // 0x68
	private bool sendChunked; // 0x69
	private MemoryStream writeBuffer; // 0x70
	private bool requestWritten; // 0x78
	private byte[] headers; // 0x80
	private bool disposed; // 0x88
	private bool headersSent; // 0x89
	private object locker; // 0x90
	private bool initRead; // 0x98
	private bool read_eof; // 0x99
	private bool complete_request_written; // 0x9A
	private int read_timeout; // 0x9C
	private int write_timeout; // 0xA0

	// Methods
	public void .ctor(WebConnection cnc); // 0x1006EB464
	public void .ctor(WebConnection cnc, HttpWebRequest request); // 0x1006EBB40
	private static void .cctor(); // 0x1006EED60
	private bool IsNtlmAuth(); // 0x1006EE798
	internal void CheckResponseInBuffer(); // 0x1006EB6E0
	internal WebConnection get_Connection(); // 0x1006EEE10
	public override int get_ReadTimeout(); // 0x1006EEE18
	public override int get_WriteTimeout(); // 0x1006EEE20
	internal bool get_CompleteRequestWritten(); // 0x1006EEE28
	internal void set_SendChunked(bool value); // 0x1006EEE30
	internal void set_ReadBuffer(byte[] value); // 0x1006EB6C8
	internal void set_ReadBufferOffset(int value); // 0x1006EB6D0
	internal void set_ReadBufferSize(int value); // 0x1006EB6D8
	internal byte[] get_WriteBuffer(); // 0x1006EEE38
	internal int get_WriteBufferLength(); // 0x1006EEE8C
	internal void ForceCompletion(); // 0x1006EB758
	internal void CheckComplete(); // 0x1006EEEE0
	internal void ReadAll(); // 0x1006EE964
	private void WriteCallbackWrapper(IAsyncResult r); // 0x1006EEF20
	private void ReadCallbackWrapper(IAsyncResult r); // 0x1006EF164
	public override int Read(byte[] buffer, int offset, int size); // 0x1006EF370
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006EF574
	public override int EndRead(IAsyncResult r); // 0x1006EF8CC
	private void WriteRequestAsyncCB(IAsyncResult r); // 0x1006EFBEC
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback cb, object state); // 0x1006EFEAC
	private void CheckWriteOverflow(long contentLength, long totalWritten, long size); // 0x1006F05FC
	public override void EndWrite(IAsyncResult r); // 0x1006F0B90
	public override void Write(byte[] buffer, int offset, int size); // 0x1006F0EB8
	public override void Flush(); // 0x1006F108C
	internal void SetHeaders(byte[] buffer); // 0x1006F1090
	internal bool get_RequestWritten(); // 0x1006F13E8
	private IAsyncResult WriteRequestAsync(AsyncCallback cb, object state); // 0x1006F06BC
	private void WriteHeaders(); // 0x1006F12E8
	internal void WriteRequest(); // 0x1006F07A8
	internal void InternalClose(); // 0x1006F13F0
	public override void Close(); // 0x1006F13FC
	internal void KillBuffer(); // 0x1006EFEA4
	public override long Seek(long a, SeekOrigin b); // 0x1006F16B0
	public override void SetLength(long a); // 0x1006F1704
	public override bool get_CanSeek(); // 0x1006F1758
	public override bool get_CanRead(); // 0x1006F1760
	public override bool get_CanWrite(); // 0x1006F1780
	public override long get_Length(); // 0x1006F17A0
	public override long get_Position(); // 0x1006F17F4
	public override void set_Position(long value); // 0x1006F1848
}

// Namespace: System.Net
public class WebException : InvalidOperationException, ISerializable // TypeDefIndex: 1564
{
	// Fields
	private WebResponse response; // 0x60
	private WebExceptionStatus status; // 0x68

	// Methods
	public void .ctor(); // 0x1006F189C
	public void .ctor(string message); // 0x1006F18AC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1006F18BC
	public void .ctor(string message, Exception innerException); // 0x1006F18CC
	public void .ctor(string message, WebExceptionStatus status); // 0x1006EF540
	internal void .ctor(string message, Exception innerException, WebExceptionStatus status); // 0x1006F05C8
	public void .ctor(string message, Exception innerException, WebExceptionStatus status, WebResponse response); // 0x1006ECA48
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1006F18DC
	public WebExceptionStatus get_Status(); // 0x1006F18E4
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F18EC
}

// Namespace: System.Net
public sealed class WebExceptionStatus : Enum // TypeDefIndex: 1565
{
	// Fields
	public int value__; // 0x10
	public const WebExceptionStatus Success = 0; // 0x0
	public const WebExceptionStatus NameResolutionFailure = 1; // 0x0
	public const WebExceptionStatus ConnectFailure = 2; // 0x0
	public const WebExceptionStatus ReceiveFailure = 3; // 0x0
	public const WebExceptionStatus SendFailure = 4; // 0x0
	public const WebExceptionStatus PipelineFailure = 5; // 0x0
	public const WebExceptionStatus RequestCanceled = 6; // 0x0
	public const WebExceptionStatus ProtocolError = 7; // 0x0
	public const WebExceptionStatus ConnectionClosed = 8; // 0x0
	public const WebExceptionStatus TrustFailure = 9; // 0x0
	public const WebExceptionStatus SecureChannelFailure = 10; // 0x0
	public const WebExceptionStatus ServerProtocolViolation = 11; // 0x0
	public const WebExceptionStatus KeepAliveFailure = 12; // 0x0
	public const WebExceptionStatus Pending = 13; // 0x0
	public const WebExceptionStatus Timeout = 14; // 0x0
	public const WebExceptionStatus ProxyNameResolutionFailure = 15; // 0x0
	public const WebExceptionStatus UnknownError = 16; // 0x0
	public const WebExceptionStatus MessageLengthLimitExceeded = 17; // 0x0
	public const WebExceptionStatus CacheEntryNotFound = 18; // 0x0
	public const WebExceptionStatus RequestProhibitedByCachePolicy = 19; // 0x0
	public const WebExceptionStatus RequestProhibitedByProxy = 20; // 0x0

}

// Namespace: System.Net
public class WebHeaderCollection : NameValueCollection, ISerializable // TypeDefIndex: 1566
{
	// Fields
	private static readonly Hashtable restricted; // 0x0
	private static readonly Hashtable multiValue; // 0x8
	private static readonly Dictionary`2<string, bool> restricted_response; // 0x10
	private bool internallyCreated; // 0x68
	private static bool[] allowed_chars; // 0x18

	// Methods
	public void .ctor(); // 0x1006E9938
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F18F4
	internal void .ctor(bool internallyCreated); // 0x1006F1BC4
	private static void .cctor(); // 0x1006F1BF0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F2C8C
	public void Add(string header); // 0x1006E9940
	public override void Add(string name, string value); // 0x1006F2D00
	protected void AddWithoutValidate(string headerName, string headerValue); // 0x1006F2FAC
	public override string[] GetValues(string header); // 0x1006F3344
	public static bool IsRestricted(string headerName); // 0x1006F2DF4
	public override void OnDeserialization(object sender); // 0x1006F33E4
	public override void Remove(string name); // 0x1006F33E8
	public override void Set(string name, string value); // 0x1006F34D8
	public override string ToString(); // 0x1006F36A8
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F3820
	public override string[] get_AllKeys(); // 0x1006F3988
	public override int get_Count(); // 0x1006F3990
	public override KeysCollection get_Keys(); // 0x1006F3998
	public override string Get(int index); // 0x1006F39A0
	public override string Get(string name); // 0x1006F39A8
	public override string GetKey(int index); // 0x1006F39B0
	public override IEnumerator GetEnumerator(); // 0x1006F39B8
	internal void SetInternal(string header); // 0x1006EB8C8
	internal void SetInternal(string name, string value); // 0x1006F39C0
	internal void RemoveAndAdd(string name, string value); // 0x1006F3C24
	internal void RemoveInternal(string name); // 0x1006F3CD8
	internal static bool IsMultiValue(string headerName); // 0x1006F3B14
	internal static bool IsHeaderValue(string value); // 0x1006F3280
	internal static bool IsHeaderName(string name); // 0x1006F3178
}

// Namespace: System.Net
public class WebProxy : ISerializable, IWebProxy // TypeDefIndex: 1567
{
	// Fields
	private Uri address; // 0x10
	private bool bypassOnLocal; // 0x18
	private ArrayList bypassList; // 0x20
	private ICredentials credentials; // 0x28
	private bool useDefaultCredentials; // 0x30

	// Methods
	public void .ctor(); // 0x1006F3D64
	public void .ctor(Uri address); // 0x1006F3E1C
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList, ICredentials credentials); // 0x1006F3D78
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F3FA4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F40F4
	public void set_Address(Uri value); // 0x1006F4168
	public void set_BypassProxyOnLocal(bool value); // 0x1006F4170
	public ICredentials get_Credentials(); // 0x1006F4178
	public bool get_UseDefaultCredentials(); // 0x1006F4180
	public Uri GetProxy(Uri destination); // 0x1006F4188
	public bool IsBypassed(Uri host); // 0x1006F41B8
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F4840
	private void CheckBypassList(); // 0x1006F3E2C
}

// Namespace: System.Net
public abstract class WebRequest : MarshalByRefObject, ISerializable // TypeDefIndex: 1568
{
	// Fields
	private static HybridDictionary prefixes; // 0x0
	private static bool isDefaultWebProxySet; // 0x8
	private static IWebProxy defaultWebProxy; // 0x10
	private AuthenticationLevel authentication_level; // 0x18
	private static readonly object lockobj; // 0x18

	// Methods
	protected void .ctor(); // 0x1006F4900
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F4910
	private static void .cctor(); // 0x1006F4920
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F4E14
	private static Exception GetMustImplement(); // 0x1006F4E68
	public virtual long get_ContentLength(); // 0x1006F4ED0
	public virtual ICredentials get_Credentials(); // 0x1006F4F28
	public virtual void set_Credentials(ICredentials value); // 0x1006F4F80
	public virtual WebHeaderCollection get_Headers(); // 0x1006F4FD8
	public virtual string get_Method(); // 0x1006F5030
	public virtual IWebProxy get_Proxy(); // 0x1006F5088
	public virtual Uri get_RequestUri(); // 0x1006F50E0
	public static IWebProxy get_DefaultWebProxy(); // 0x1006F5138
	private static IWebProxy GetDefaultWebProxy(); // 0x1006F5298
	public virtual void Abort(); // 0x1006F5894
	public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state); // 0x1006F58EC
	public static WebRequest Create(Uri requestUri); // 0x1006F5944
	public virtual WebResponse EndGetResponse(IAsyncResult asyncResult); // 0x1006F5E90
	public virtual WebResponse GetResponse(); // 0x1006F5EE8
	public static IWebProxy GetSystemWebProxy(); // 0x1006F54C0
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F5F40
	private static IWebRequestCreate GetCreator(string prefix); // 0x1006F5AE4
	internal static void ClearPrefixes(); // 0x1006F5F98
	internal static void RemovePrefix(string prefix); // 0x1006F600C
	internal static void AddPrefix(string prefix, string typeName); // 0x1006F6088
	internal static void AddPrefix(string prefix, Type type); // 0x1006F4D70
}

// Namespace: System.Net
public abstract class WebResponse : MarshalByRefObject, IDisposable, ISerializable // TypeDefIndex: 1569
{
	// Methods
	protected void .ctor(); // 0x1006F61C4
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F61CC
	private void System.IDisposable.Dispose(); // 0x1006F6230
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F627C
	public virtual WebHeaderCollection get_Headers(); // 0x1006F62D0
	private static Exception GetMustImplement(); // 0x1006F6324
	public virtual void Close(); // 0x1006F6380
	public virtual Stream GetResponseStream(); // 0x1006F63D4
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1006F6428
}

// Namespace: System.Security.Authentication
public sealed class SslProtocols : Enum // TypeDefIndex: 1570
{
	// Fields
	public int value__; // 0x10
	public const SslProtocols None = 0; // 0x0
	public const SslProtocols Ssl2 = 12; // 0x0
	public const SslProtocols Ssl3 = 48; // 0x0
	public const SslProtocols Tls = 192; // 0x0
	public const SslProtocols Default = 240; // 0x0

}

// Namespace: System.Security.Cryptography
internal sealed class AsnDecodeStatus : Enum // TypeDefIndex: 1571
{
	// Fields
	public int value__; // 0x10
	public const AsnDecodeStatus NotDecoded = -1; // 0x0
	public const AsnDecodeStatus Ok = 0; // 0x0
	public const AsnDecodeStatus BadAsn = 1; // 0x0
	public const AsnDecodeStatus BadTag = 2; // 0x0
	public const AsnDecodeStatus BadLength = 3; // 0x0
	public const AsnDecodeStatus InformationNotAvailable = 4; // 0x0

}

// Namespace: System.Security.Cryptography
public class AsnEncodedData // TypeDefIndex: 1572
{
	// Fields
	internal Oid _oid; // 0x10
	internal byte[] _raw; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map13; // 0x0

	// Methods
	protected void .ctor(); // 0x1006F6438
	public void .ctor(string oid, byte[] rawData); // 0x1006F6440
	public void .ctor(Oid oid, byte[] rawData); // 0x1006F6680
	public Oid get_Oid(); // 0x1006F6740
	public void set_Oid(Oid value); // 0x1006F66C8
	public byte[] get_RawData(); // 0x1006F67E4
	public void set_RawData(byte[] value); // 0x1006F6564
	public virtual void CopyFrom(AsnEncodedData asnEncodedData); // 0x1006F67EC
	internal virtual string ToString(bool multiLine); // 0x1006F68D0
	internal string Default(bool multiLine); // 0x1006F7454
	internal string BasicConstraintsExtension(bool multiLine); // 0x1006F6B40
	internal string EnhancedKeyUsageExtension(bool multiLine); // 0x1006F6C68
	internal string KeyUsageExtension(bool multiLine); // 0x1006F6D98
	internal string SubjectKeyIdentifierExtension(bool multiLine); // 0x1006F6EC8
	internal string SubjectAltName(bool multiLine); // 0x1006F6FF8
	internal string NetscapeCertType(bool multiLine); // 0x1006DEE80
}

// Namespace: System.Security.Cryptography
public sealed class OidCollection : ICollection, IEnumerable // TypeDefIndex: 1573
{
	// Fields
	private ArrayList _list; // 0x10
	private bool _readOnly; // 0x18

	// Methods
	public void .ctor(); // 0x1006F7BD0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1006F7C3C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1006F7CAC
	public int get_Count(); // 0x1006F7D4C
	public bool get_IsSynchronized(); // 0x1006F7DA0
	public Oid get_Item(int index); // 0x1006F7DF4
	public Oid get_Item(string oid); // 0x1006DEABC
	public object get_SyncRoot(); // 0x1006F7EF0
	public int Add(Oid oid); // 0x1006F7F44
	internal void set_ReadOnly(bool value); // 0x1006F7FC8
}

// Namespace: System.Security.Cryptography
public sealed class Oid // TypeDefIndex: 1574
{
	// Fields
	private string _value; // 0x10
	private string _name; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map14; // 0x0

	// Methods
	public void .ctor(); // 0x1006F78F0
	public void .ctor(string oid); // 0x1006F64C4
	public void .ctor(string value, string friendlyName); // 0x1006F7B90
	public void .ctor(Oid oid); // 0x1006F6748
	public string get_FriendlyName(); // 0x1006F7BC8
	public string get_Value(); // 0x1006F6B38
	private string GetName(string oid); // 0x1006F78F8
}

// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1575
{
	// Fields
	private OidCollection _collection; // 0x10
	private int _position; // 0x18

	// Methods
	internal void .ctor(OidCollection collection); // 0x1006F7D18
	private object System.Collections.IEnumerator.get_Current(); // 0x1006F7FD0
	public bool MoveNext(); // 0x1006F8048
	public void Reset(); // 0x1006F80AC
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class OpenFlags : Enum // TypeDefIndex: 1576
{
	// Fields
	public int value__; // 0x10
	public const OpenFlags ReadOnly = 0; // 0x0
	public const OpenFlags ReadWrite = 1; // 0x0
	public const OpenFlags MaxAllowed = 2; // 0x0
	public const OpenFlags OpenExistingOnly = 4; // 0x0
	public const OpenFlags IncludeArchived = 8; // 0x0

}

// Namespace: Mono.Security.X509
internal class OSX509Certificates // TypeDefIndex: 1577
{
	// Fields
	private static IntPtr sslsecpolicy; // 0x0

	// Methods
	private static void .cctor(); // 0x1006830A0
	private static extern IntPtr SecCertificateCreateWithData(IntPtr allocator, IntPtr nsdataRef); // 0x1006831B8
	private static extern int SecTrustCreateWithCertificates(IntPtr certOrCertArray, IntPtr policies, out IntPtr sectrustref); // 0x100683268
	private static extern IntPtr SecPolicyCreateSSL(int server, IntPtr cfStringHostname); // 0x10068310C
	private static extern int SecTrustEvaluate(IntPtr secTrustRef, out SecTrustResult secTrustResultTime); // 0x100683328
	private static extern IntPtr CFDataCreate(IntPtr allocator, PTR bytes, IntPtr length); // 0x1006833D0
	private static extern void CFRelease(IntPtr handle); // 0x100683484
	private static extern IntPtr CFArrayCreate(IntPtr allocator, IntPtr values, IntPtr numValues, IntPtr callbacks); // 0x100683520
	private static IntPtr MakeCFData(byte[] data); // 0x1006835E4
	private static IntPtr FromIntPtrs(IntPtr[] values); // 0x10068369C
	public static SecTrustResult TrustEvaluateSsl(X509CertificateCollection certificates); // 0x10068377C
	private static SecTrustResult _TrustEvaluateSsl(X509CertificateCollection certificates); // 0x10068385C
}

// Namespace: 
public sealed class SecTrustResult : Enum // TypeDefIndex: 1578
{
	// Fields
	public int value__; // 0x10
	public const SecTrustResult Invalid = 0; // 0x0
	public const SecTrustResult Proceed = 1; // 0x0
	public const SecTrustResult Confirm = 2; // 0x0
	public const SecTrustResult Deny = 3; // 0x0
	public const SecTrustResult Unspecified = 4; // 0x0
	public const SecTrustResult RecoverableTrustFailure = 5; // 0x0
	public const SecTrustResult FatalTrustFailure = 6; // 0x0
	public const SecTrustResult ResultOtherError = 7; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey // TypeDefIndex: 1579
{
	// Fields
	private AsymmetricAlgorithm _key; // 0x10
	private AsnEncodedData _keyValue; // 0x18
	private AsnEncodedData _params; // 0x20
	private Oid _oid; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map16; // 0x0

	// Methods
	internal void .ctor(X509Certificate certificate); // 0x1006F80B8
	public AsnEncodedData get_EncodedKeyValue(); // 0x1006F8654
	public AsnEncodedData get_EncodedParameters(); // 0x1006F865C
	public AsymmetricAlgorithm get_Key(); // 0x1006F8664
	public Oid get_Oid(); // 0x1006F9144
	private static byte[] GetUnsignedBigInteger(byte[] integer); // 0x1006F914C
	internal static DSA DecodeDSA(byte[] rawPublicKey, byte[] rawParameters); // 0x1006F8C54
	internal static RSA DecodeRSA(byte[] rawPublicKey); // 0x1006F8878
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class StoreLocation : Enum // TypeDefIndex: 1580
{
	// Fields
	public int value__; // 0x10
	public const StoreLocation CurrentUser = 1; // 0x0
	public const StoreLocation LocalMachine = 2; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class StoreName : Enum // TypeDefIndex: 1581
{
	// Fields
	public int value__; // 0x10
	public const StoreName AddressBook = 1; // 0x0
	public const StoreName AuthRoot = 2; // 0x0
	public const StoreName CertificateAuthority = 3; // 0x0
	public const StoreName Disallowed = 4; // 0x0
	public const StoreName My = 5; // 0x0
	public const StoreName Root = 6; // 0x0
	public const StoreName TrustedPeople = 7; // 0x0
	public const StoreName TrustedPublisher = 8; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X500DistinguishedName : AsnEncodedData // TypeDefIndex: 1582
{
	// Fields
	private string name; // 0x20

	// Methods
	public void .ctor(byte[] encodedDistinguishedName); // 0x1006F9208
	public string Decode(X500DistinguishedNameFlags flag); // 0x1006F9410
	private static string GetSeparator(X500DistinguishedNameFlags flag); // 0x1006F9558
	private void DecodeRawData(); // 0x1006F9318
	private static string Canonize(string s); // 0x1006F95D0
	internal static bool AreEqual(X500DistinguishedName name1, X500DistinguishedName name2); // 0x1006F97E0
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X500DistinguishedNameFlags : Enum // TypeDefIndex: 1583
{
	// Fields
	public int value__; // 0x10
	public const X500DistinguishedNameFlags None = 0; // 0x0
	public const X500DistinguishedNameFlags Reversed = 1; // 0x0
	public const X500DistinguishedNameFlags UseSemicolons = 16; // 0x0
	public const X500DistinguishedNameFlags DoNotUsePlusSign = 32; // 0x0
	public const X500DistinguishedNameFlags DoNotUseQuotes = 64; // 0x0
	public const X500DistinguishedNameFlags UseCommas = 128; // 0x0
	public const X500DistinguishedNameFlags UseNewLines = 256; // 0x0
	public const X500DistinguishedNameFlags UseUTF8Encoding = 4096; // 0x0
	public const X500DistinguishedNameFlags UseT61Encoding = 8192; // 0x0
	public const X500DistinguishedNameFlags ForceUTF8Encoding = 16384; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509BasicConstraintsExtension : X509Extension // TypeDefIndex: 1584
{
	// Fields
	internal const string oid = "2.5.29.19"; // 0x0
	internal const string friendlyName = "Basic Constraints"; // 0x0
	private bool _certificateAuthority; // 0x21
	private bool _hasPathLengthConstraint; // 0x22
	private int _pathLengthConstraint; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Methods
	public void .ctor(); // 0x1006F99C4
	public void .ctor(AsnEncodedData encodedBasicConstraints, bool critical); // 0x1006F7570
	public void .ctor(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical); // 0x1006F9C54
	public bool get_CertificateAuthority(); // 0x1006F9F04
	public bool get_HasPathLengthConstraint(); // 0x1006F9F88
	public int get_PathLengthConstraint(); // 0x1006FA00C
	public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x1006FA090
	internal AsnDecodeStatus Decode(byte[] extension); // 0x1006F9A54
	internal byte[] Encode(); // 0x1006F9D60
	internal override string ToString(bool multiLine); // 0x1006F7640
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2Collection : X509CertificateCollection // TypeDefIndex: 1585
{
	// Methods
	public void .ctor(); // 0x1006FBDAC
	public void .ctor(X509Certificate2Collection certificates); // 0x1006FBDBC
	public X509Certificate2 get_Item(int index); // 0x1006FBEBC
	public int Add(X509Certificate2 certificate); // 0x1006DDE0C
	public void AddRange(X509Certificate2Collection certificates); // 0x1006FBDEC
	public bool Contains(X509Certificate2 certificate); // 0x1006FBFF4
	public X509Certificate2Collection Find(X509FindType findType, object findValue, bool validOnly); // 0x1006FC37C
	public X509Certificate2Enumerator GetEnumerator(); // 0x1006FD594
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2 : X509Certificate // TypeDefIndex: 1586
{
	// Fields
	private bool _archived; // 0x38
	private X509ExtensionCollection _extensions; // 0x40
	private string _name; // 0x48
	private string _serial; // 0x50
	private PublicKey _publicKey; // 0x58
	private X500DistinguishedName issuer_name; // 0x60
	private X500DistinguishedName subject_name; // 0x68
	private Oid signature_algorithm; // 0x70
	private X509Certificate _cert; // 0x78
	private static string empty_error; // 0x0
	private static byte[] commonName; // 0x8
	private static byte[] email; // 0x10
	private static byte[] signedData; // 0x18

	// Methods
	public void .ctor(byte[] rawData); // 0x1006DDD48
	public void .ctor(X509Certificate certificate); // 0x1006D9CC0
	private static void .cctor(); // 0x1006FA22C
	public X509ExtensionCollection get_Extensions(); // 0x1006DE9E8
	public X500DistinguishedName get_IssuerName(); // 0x1006FA3AC
	public DateTime get_NotAfter(); // 0x1006FA4B8
	public DateTime get_NotBefore(); // 0x1006FA59C
	public AsymmetricAlgorithm get_PrivateKey(); // 0x1006D9D80
	public PublicKey get_PublicKey(); // 0x1006FA680
	public string get_SerialNumber(); // 0x1006FA808
	public Oid get_SignatureAlgorithm(); // 0x1006FA990
	public X500DistinguishedName get_SubjectName(); // 0x1006FAA88
	public string get_Thumbprint(); // 0x1006FAB94
	public int get_Version(); // 0x1006DE948
	public string GetNameInfo(X509NameType nameType, bool forIssuer); // 0x1006FAB9C
	private ASN1 Find(byte[] oid, ASN1 dn); // 0x1006FAE54
	private string GetValueAsString(ASN1 pair); // 0x1006FAF6C
	private void ImportPkcs12(byte[] rawData, string password); // 0x1006FB198
	public override void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x1006FB404
	public override void Reset(); // 0x1006FB678
	public override string ToString(); // 0x1006FB704
	public override string ToString(bool verbose); // 0x1006FB770
	private static void AppendBuffer(StringBuilder sb, byte[] buffer); // 0x1006FBBD0
	public bool Verify(); // 0x1006FBCB4
	internal X509Certificate get_MonoCertificate(); // 0x1006FBDA4
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Certificate2Enumerator : IEnumerator // TypeDefIndex: 1587
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	internal void .ctor(X509Certificate2Collection collection); // 0x1006FD5F4
	private object System.Collections.IEnumerator.get_Current(); // 0x1006FD6F0
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1006FD7E0
	private void System.Collections.IEnumerator.Reset(); // 0x1006FD8D4
	public X509Certificate2 get_Current(); // 0x1006FD9C8
	public bool MoveNext(); // 0x1006FDAC0
	public void Reset(); // 0x1006FDBB4
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509CertificateCollection : CollectionBase // TypeDefIndex: 1588
{
	// Methods
	public void .ctor(); // 0x1006FBDB4
	public void .ctor(X509Certificate[] value); // 0x1006FDCA8
	public X509Certificate get_Item(int index); // 0x1006D8E6C
	public void AddRange(X509Certificate[] value); // 0x1006FDCD8
	public X509CertificateEnumerator GetEnumerator(); // 0x1006D9B68
	public override int GetHashCode(); // 0x1006FDEE0
}

// Namespace: 
public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1589
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	public void .ctor(X509CertificateCollection mappings); // 0x1006FDDE4
	private object System.Collections.IEnumerator.get_Current(); // 0x1006FDF3C
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1006FE02C
	private void System.Collections.IEnumerator.Reset(); // 0x1006FE120
	public X509Certificate get_Current(); // 0x1006D9BC8
	public bool MoveNext(); // 0x1006DA150
	public void Reset(); // 0x1006FE214
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Chain // TypeDefIndex: 1590
{
	// Fields
	private StoreLocation location; // 0x10
	private X509ChainElementCollection elements; // 0x18
	private X509ChainPolicy policy; // 0x20
	private X509ChainStatus[] status; // 0x28
	private static X509ChainStatus[] Empty; // 0x0
	private int max_path_length; // 0x30
	private X500DistinguishedName working_issuer_name; // 0x38
	private AsymmetricAlgorithm working_public_key; // 0x40
	private X509ChainElement bce_restriction; // 0x48
	private X509Store roots; // 0x50
	private X509Store cas; // 0x58
	private X509Certificate2Collection collection; // 0x60
	private static Dictionary`2<string, int> <>f__switch$map17; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map18; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map19; // 0x18

	// Methods
	public void .ctor(); // 0x1006DA48C
	public void .ctor(bool useMachineContext); // 0x1006FE308
	private static void .cctor(); // 0x1006FE3B8
	public X509ChainPolicy get_ChainPolicy(); // 0x1006DA4FC
	public void set_ChainPolicy(X509ChainPolicy value); // 0x1006DDD40
	public X509ChainStatus[] get_ChainStatus(); // 0x1006DAB28
	public bool Build(X509Certificate2 certificate); // 0x1006DA504
	public void Reset(); // 0x1006FE428
	private X509Store get_Roots(); // 0x1006FE6E4
	private X509Store get_CertificateAuthorities(); // 0x1006FE77C
	private X509Certificate2Collection get_CertificateCollection(); // 0x1006FE814
	private X509ChainStatusFlags BuildChainFrom(X509Certificate2 certificate); // 0x1006FE4B4
	private X509Certificate2 SelectBestFromCollection(X509Certificate2 child, X509Certificate2Collection c); // 0x1006FEB7C
	private X509Certificate2 FindParent(X509Certificate2 certificate); // 0x1006FE94C
	private bool IsChainComplete(X509Certificate2 certificate); // 0x1006FEA44
	private bool IsSelfIssued(X509Certificate2 certificate); // 0x1006FEEE8
	private void ValidateChain(X509ChainStatusFlags flag); // 0x1006FE5C4
	private void Process(int n); // 0x1006FEF88
	private void PrepareForNextCertificate(int n); // 0x1006FF55C
	private void WrapUp(); // 0x1006FFA10
	private void ProcessCertificateExtensions(X509ChainElement element); // 0x1006FFAD8
	private bool IsSignedWith(X509Certificate2 signed, AsymmetricAlgorithm pubkey); // 0x1006FFAA0
	private string GetSubjectKeyIdentifier(X509Certificate2 certificate); // 0x1006FEDC8
	private string GetAuthorityKeyIdentifier(X509Certificate2 certificate); // 0x1006FED54
	private string GetAuthorityKeyIdentifier(X509Crl crl); // 0x1006FFE38
	private string GetAuthorityKeyIdentifier(X509Extension ext); // 0x1006FFCD8
	private void CheckRevocationOnChain(X509ChainStatusFlags flag); // 0x1006FF7F0
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, int ca, bool online); // 0x1006FFEA8
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, X509Certificate2 ca_cert, bool online); // 0x1006FFF88
	private X509Crl FindCrl(X509Certificate2 caCertificate); // 0x1007001FC
	private bool ProcessCrlExtensions(X509Crl crl); // 0x100700DE8
	private bool ProcessCrlEntryExtensions(X509CrlEntry entry); // 0x100700998
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementCollection : ICollection, IEnumerable // TypeDefIndex: 1591
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods
	internal void .ctor(); // 0x1007013C0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10070142C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10070149C
	public int get_Count(); // 0x1007015FC
	public bool get_IsSynchronized(); // 0x100701650
	public X509ChainElement get_Item(int index); // 0x1007016A4
	public object get_SyncRoot(); // 0x100701730
	public X509ChainElementEnumerator GetEnumerator(); // 0x100701784
	internal void Add(X509Certificate2 certificate); // 0x1007017E8
	internal void Clear(); // 0x100701894
	internal bool Contains(X509Certificate2 certificate); // 0x1007018E8
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509ChainElement // TypeDefIndex: 1592
{
	// Fields
	private X509Certificate2 certificate; // 0x10
	private X509ChainStatus[] status; // 0x18
	private string info; // 0x20
	private X509ChainStatusFlags compressed_status_flags; // 0x28

	// Methods
	internal void .ctor(X509Certificate2 certificate); // 0x100701258
	public X509Certificate2 get_Certificate(); // 0x1006FEF80
	public X509ChainStatus[] get_ChainElementStatus(); // 0x1006FE6DC
	internal X509ChainStatusFlags get_StatusFlags(); // 0x1006FEB6C
	internal void set_StatusFlags(X509ChainStatusFlags value); // 0x1006FEB74
	private int Count(X509ChainStatusFlags flags); // 0x1007012E4
	private void Set(X509ChainStatus[] status, int position, X509ChainStatusFlags flags, X509ChainStatusFlags mask); // 0x100701308
	internal void UncompressFlags(); // 0x1006FF2D8
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementEnumerator : IEnumerator // TypeDefIndex: 1593
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	internal void .ctor(IEnumerable enumerable); // 0x100701500
	private object System.Collections.IEnumerator.get_Current(); // 0x100701A6C
	public X509ChainElement get_Current(); // 0x100701B5C
	public bool MoveNext(); // 0x100701C54
	public void Reset(); // 0x100701D48
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainPolicy // TypeDefIndex: 1594
{
	// Fields
	private OidCollection apps; // 0x10
	private OidCollection cert; // 0x18
	private X509Certificate2Collection store; // 0x20
	private X509RevocationFlag rflag; // 0x28
	private X509RevocationMode mode; // 0x2C
	private TimeSpan timeout; // 0x30
	private X509VerificationFlags vflags; // 0x38
	private DateTime vtime; // 0x40

	// Methods
	public void .ctor(); // 0x100701E3C
	public X509Certificate2Collection get_ExtraStore(); // 0x100701F74
	public X509RevocationFlag get_RevocationFlag(); // 0x100701F7C
	public X509RevocationMode get_RevocationMode(); // 0x100701F84
	public void set_RevocationMode(X509RevocationMode value); // 0x100701F8C
	public X509VerificationFlags get_VerificationFlags(); // 0x100702014
	public DateTime get_VerificationTime(); // 0x10070201C
	public void Reset(); // 0x100701E64
}

// Namespace: System.Security.Cryptography.X509Certificates
public struct X509ChainStatus // TypeDefIndex: 1595
{
	// Fields
	private X509ChainStatusFlags status; // 0x10
	private string info; // 0x18

	// Methods
	internal void .ctor(X509ChainStatusFlags flag); // 0x100702260
	public X509ChainStatusFlags get_Status(); // 0x100702290
	public void set_Status(X509ChainStatusFlags value); // 0x1007022A0
	public void set_StatusInformation(string value); // 0x1007022B0
	internal static string GetInformation(X509ChainStatusFlags flags); // 0x100702050
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainStatusFlags : Enum // TypeDefIndex: 1596
{
	// Fields
	public int value__; // 0x10
	public const X509ChainStatusFlags NoError = 0; // 0x0
	public const X509ChainStatusFlags NotTimeValid = 1; // 0x0
	public const X509ChainStatusFlags NotTimeNested = 2; // 0x0
	public const X509ChainStatusFlags Revoked = 4; // 0x0
	public const X509ChainStatusFlags NotSignatureValid = 8; // 0x0
	public const X509ChainStatusFlags NotValidForUsage = 16; // 0x0
	public const X509ChainStatusFlags UntrustedRoot = 32; // 0x0
	public const X509ChainStatusFlags RevocationStatusUnknown = 64; // 0x0
	public const X509ChainStatusFlags Cyclic = 128; // 0x0
	public const X509ChainStatusFlags InvalidExtension = 256; // 0x0
	public const X509ChainStatusFlags InvalidPolicyConstraints = 512; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024; // 0x0
	public const X509ChainStatusFlags InvalidNameConstraints = 2048; // 0x0
	public const X509ChainStatusFlags HasNotSupportedNameConstraint = 4096; // 0x0
	public const X509ChainStatusFlags HasNotDefinedNameConstraint = 8192; // 0x0
	public const X509ChainStatusFlags HasNotPermittedNameConstraint = 16384; // 0x0
	public const X509ChainStatusFlags HasExcludedNameConstraint = 32768; // 0x0
	public const X509ChainStatusFlags PartialChain = 65536; // 0x0
	public const X509ChainStatusFlags CtlNotTimeValid = 131072; // 0x0
	public const X509ChainStatusFlags CtlNotSignatureValid = 262144; // 0x0
	public const X509ChainStatusFlags CtlNotValidForUsage = 524288; // 0x0
	public const X509ChainStatusFlags OfflineRevocation = 16777216; // 0x0
	public const X509ChainStatusFlags NoIssuanceChainPolicy = 33554432; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1597
{
	// Fields
	private OidCollection _enhKeyUsage; // 0x28
	private AsnDecodeStatus _status; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map1A; // 0x0

	// Methods
	public void .ctor(AsnEncodedData encodedEnhancedKeyUsages, bool critical); // 0x100702340
	public OidCollection get_EnhancedKeyUsages(); // 0x10070266C
	public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x100702730
	internal AsnDecodeStatus Decode(byte[] extension); // 0x10070241C
	internal override string ToString(bool multiLine); // 0x1007028D4
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionCollection : ICollection, IEnumerable // TypeDefIndex: 1598
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods
	internal void .ctor(X509Certificate cert); // 0x100702F08
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x1007034EC
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100703624
	public int get_Count(); // 0x1007036EC
	public bool get_IsSynchronized(); // 0x100703740
	public object get_SyncRoot(); // 0x100703794
	public X509Extension get_Item(string oid); // 0x100703798
	public X509ExtensionEnumerator GetEnumerator(); // 0x100703B5C
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData // TypeDefIndex: 1599
{
	// Fields
	private bool _critical; // 0x20

	// Methods
	protected void .ctor(); // 0x10070240C
	public void .ctor(string oid, byte[] rawData, bool critical); // 0x100702DCC
	public bool get_Critical(); // 0x1007028CC
	public void set_Critical(bool value); // 0x100702414
	public override void CopyFrom(AsnEncodedData asnEncodedData); // 0x100702DF8
	internal string FormatUnkownData(byte[] data); // 0x100702CA0
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionEnumerator : IEnumerator // TypeDefIndex: 1600
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Methods
	internal void .ctor(ArrayList list); // 0x100703688
	private object System.Collections.IEnumerator.get_Current(); // 0x100703BC0
	public X509Extension get_Current(); // 0x100703CB0
	public bool MoveNext(); // 0x100703DA8
	public void Reset(); // 0x100703E9C
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509FindType : Enum // TypeDefIndex: 1601
{
	// Fields
	public int value__; // 0x10
	public const X509FindType FindByThumbprint = 0; // 0x0
	public const X509FindType FindBySubjectName = 1; // 0x0
	public const X509FindType FindBySubjectDistinguishedName = 2; // 0x0
	public const X509FindType FindByIssuerName = 3; // 0x0
	public const X509FindType FindByIssuerDistinguishedName = 4; // 0x0
	public const X509FindType FindBySerialNumber = 5; // 0x0
	public const X509FindType FindByTimeValid = 6; // 0x0
	public const X509FindType FindByTimeNotYetValid = 7; // 0x0
	public const X509FindType FindByTimeExpired = 8; // 0x0
	public const X509FindType FindByTemplateName = 9; // 0x0
	public const X509FindType FindByApplicationPolicy = 10; // 0x0
	public const X509FindType FindByCertificatePolicy = 11; // 0x0
	public const X509FindType FindByExtension = 12; // 0x0
	public const X509FindType FindByKeyUsage = 13; // 0x0
	public const X509FindType FindBySubjectKeyIdentifier = 14; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1602
{
	// Fields
	internal const string oid = "2.5.29.15"; // 0x0
	internal const string friendlyName = "Key Usage"; // 0x0
	internal const X509KeyUsageFlags all = 33023; // 0x0
	private X509KeyUsageFlags _keyUsages; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Methods
	public void .ctor(); // 0x100703F90
	public void .ctor(AsnEncodedData encodedKeyUsage, bool critical); // 0x100704014
	public void .ctor(X509KeyUsageFlags keyUsages, bool critical); // 0x1007042A8
	public X509KeyUsageFlags get_KeyUsages(); // 0x10070454C
	public override void CopyFrom(AsnEncodedData encodedData); // 0x1007045D0
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags); // 0x100704364
	internal AsnDecodeStatus Decode(byte[] extension); // 0x1007040E0
	internal byte[] Encode(); // 0x100704374
	internal override string ToString(bool multiLine); // 0x10070476C
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageFlags : Enum // TypeDefIndex: 1603
{
	// Fields
	public int value__; // 0x10
	public const X509KeyUsageFlags None = 0; // 0x0
	public const X509KeyUsageFlags EncipherOnly = 1; // 0x0
	public const X509KeyUsageFlags CrlSign = 2; // 0x0
	public const X509KeyUsageFlags KeyCertSign = 4; // 0x0
	public const X509KeyUsageFlags KeyAgreement = 8; // 0x0
	public const X509KeyUsageFlags DataEncipherment = 16; // 0x0
	public const X509KeyUsageFlags KeyEncipherment = 32; // 0x0
	public const X509KeyUsageFlags NonRepudiation = 64; // 0x0
	public const X509KeyUsageFlags DigitalSignature = 128; // 0x0
	public const X509KeyUsageFlags DecipherOnly = 32768; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509NameType : Enum // TypeDefIndex: 1604
{
	// Fields
	public int value__; // 0x10
	public const X509NameType SimpleName = 0; // 0x0
	public const X509NameType EmailName = 1; // 0x0
	public const X509NameType UpnName = 2; // 0x0
	public const X509NameType DnsName = 3; // 0x0
	public const X509NameType DnsFromAlternativeName = 4; // 0x0
	public const X509NameType UrlName = 5; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509RevocationFlag : Enum // TypeDefIndex: 1605
{
	// Fields
	public int value__; // 0x10
	public const X509RevocationFlag EndCertificateOnly = 0; // 0x0
	public const X509RevocationFlag EntireChain = 1; // 0x0
	public const X509RevocationFlag ExcludeRoot = 2; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509RevocationMode : Enum // TypeDefIndex: 1606
{
	// Fields
	public int value__; // 0x10
	public const X509RevocationMode NoCheck = 0; // 0x0
	public const X509RevocationMode Online = 1; // 0x0
	public const X509RevocationMode Offline = 2; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Store // TypeDefIndex: 1607
{
	// Fields
	private string _name; // 0x10
	private StoreLocation _location; // 0x18
	private X509Certificate2Collection list; // 0x20
	private OpenFlags _flags; // 0x28
	private X509Store store; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map1B; // 0x0

	// Methods
	public void .ctor(StoreName storeName, StoreLocation storeLocation); // 0x100704CB0
	public X509Certificate2Collection get_Certificates(); // 0x100704DF4
	private X509Stores get_Factory(); // 0x100704E7C
	internal X509Store get_Store(); // 0x100704EA0
	public void Close(); // 0x100704EA8
	public void Open(OpenFlags flags); // 0x100704EC0
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1608
{
	// Fields
	internal const string oid = "2.5.29.14"; // 0x0
	internal const string friendlyName = "Subject Key Identifier"; // 0x0
	private byte[] _subjectKeyIdentifier; // 0x28
	private string _ski; // 0x30
	private AsnDecodeStatus _status; // 0x38

	// Methods
	public void .ctor(); // 0x1007052D4
	public void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, bool critical); // 0x100705358
	public void .ctor(byte[] subjectKeyIdentifier, bool critical); // 0x1007055C4
	public void .ctor(string subjectKeyIdentifier, bool critical); // 0x10070581C
	public void .ctor(PublicKey key, bool critical); // 0x100705A6C
	public void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical); // 0x100705A7C
	public string get_SubjectKeyIdentifier(); // 0x100705ED0
	public override void CopyFrom(AsnEncodedData encodedData); // 0x100705F70
	internal static byte FromHexChar(char c); // 0x10070610C
	internal static byte FromHexChars(char c1, char c2); // 0x100706148
	internal static byte[] FromHex(string hex); // 0x10070594C
	internal AsnDecodeStatus Decode(byte[] extension); // 0x100705424
	internal byte[] Encode(); // 0x10070577C
	internal override string ToString(bool multiLine); // 0x1007061D8
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierHashAlgorithm : Enum // TypeDefIndex: 1609
{
	// Fields
	public int value__; // 0x10
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2; // 0x0

}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509VerificationFlags : Enum // TypeDefIndex: 1610
{
	// Fields
	public int value__; // 0x10
	public const X509VerificationFlags NoFlag = 0; // 0x0
	public const X509VerificationFlags IgnoreNotTimeValid = 1; // 0x0
	public const X509VerificationFlags IgnoreCtlNotTimeValid = 2; // 0x0
	public const X509VerificationFlags IgnoreNotTimeNested = 4; // 0x0
	public const X509VerificationFlags IgnoreInvalidBasicConstraints = 8; // 0x0
	public const X509VerificationFlags AllowUnknownCertificateAuthority = 16; // 0x0
	public const X509VerificationFlags IgnoreWrongUsage = 32; // 0x0
	public const X509VerificationFlags IgnoreInvalidName = 64; // 0x0
	public const X509VerificationFlags IgnoreInvalidPolicy = 128; // 0x0
	public const X509VerificationFlags IgnoreEndRevocationUnknown = 256; // 0x0
	public const X509VerificationFlags IgnoreCtlSignerRevocationUnknown = 512; // 0x0
	public const X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown = 1024; // 0x0
	public const X509VerificationFlags IgnoreRootRevocationUnknown = 2048; // 0x0
	public const X509VerificationFlags AllFlags = 4095; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal sealed class OpCode : Enum // TypeDefIndex: 1611
{
	// Fields
	public ushort value__; // 0x10
	public const OpCode False = 0; // 0x0
	public const OpCode True = 1; // 0x0
	public const OpCode Position = 2; // 0x0
	public const OpCode String = 3; // 0x0
	public const OpCode Reference = 4; // 0x0
	public const OpCode Character = 5; // 0x0
	public const OpCode Category = 6; // 0x0
	public const OpCode NotCategory = 7; // 0x0
	public const OpCode Range = 8; // 0x0
	public const OpCode Set = 9; // 0x0
	public const OpCode In = 10; // 0x0
	public const OpCode Open = 11; // 0x0
	public const OpCode Close = 12; // 0x0
	public const OpCode Balance = 13; // 0x0
	public const OpCode BalanceStart = 14; // 0x0
	public const OpCode IfDefined = 15; // 0x0
	public const OpCode Sub = 16; // 0x0
	public const OpCode Test = 17; // 0x0
	public const OpCode Branch = 18; // 0x0
	public const OpCode Jump = 19; // 0x0
	public const OpCode Repeat = 20; // 0x0
	public const OpCode Until = 21; // 0x0
	public const OpCode FastRepeat = 22; // 0x0
	public const OpCode Anchor = 23; // 0x0
	public const OpCode Info = 24; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal sealed class OpFlags : Enum // TypeDefIndex: 1612
{
	// Fields
	public ushort value__; // 0x10
	public const OpFlags None = 0; // 0x0
	public const OpFlags Negate = 256; // 0x0
	public const OpFlags IgnoreCase = 512; // 0x0
	public const OpFlags RightToLeft = 1024; // 0x0
	public const OpFlags Lazy = 2048; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal sealed class Position : Enum // TypeDefIndex: 1613
{
	// Fields
	public ushort value__; // 0x10
	public const Position Any = 0; // 0x0
	public const Position Start = 1; // 0x0
	public const Position StartOfString = 2; // 0x0
	public const Position StartOfLine = 3; // 0x0
	public const Position StartOfScan = 4; // 0x0
	public const Position End = 5; // 0x0
	public const Position EndOfString = 6; // 0x0
	public const Position EndOfLine = 7; // 0x0
	public const Position Boundary = 8; // 0x0
	public const Position NonBoundary = 9; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal interface IMachine // TypeDefIndex: 1614
{
	// Methods
	public abstract Match Scan(Regex regex, string text, int start, int end); // 0
	public abstract string[] Split(Regex regex, string input, int count, int startat); // 0
}

// Namespace: System.Text.RegularExpressions
internal interface IMachineFactory // TypeDefIndex: 1615
{
	// Methods
	public abstract IMachine NewInstance(); // 0
	public abstract IDictionary get_Mapping(); // 0
	public abstract void set_Mapping(IDictionary value); // 0
	public abstract int get_GroupCount(); // 0
	public abstract int get_Gap(); // 0
	public abstract void set_Gap(int value); // 0
	public abstract string[] get_NamesMapping(); // 0
	public abstract void set_NamesMapping(string[] value); // 0
}

// Namespace: System.Text.RegularExpressions
internal abstract class BaseMachine : IMachine // TypeDefIndex: 1616
{
	// Fields
	protected bool needs_groups_or_captures; // 0x10

	// Methods
	protected void .ctor(); // 0x10070649C
	public virtual string[] Split(Regex regex, string input, int count, int startat); // 0x1007064AC
	public virtual Match Scan(Regex regex, string text, int start, int end); // 0x100706D4C
}

// Namespace: System.Text.RegularExpressions
internal class FactoryCache // TypeDefIndex: 1617
{
	// Fields
	private int capacity; // 0x10
	private Hashtable factories; // 0x18
	private MRUList mru_list; // 0x20

	// Methods
	public void .ctor(int capacity); // 0x10071881C
	public void Add(string pattern, RegexOptions options, IMachineFactory factory); // 0x1007188E8
	private void Cleanup(); // 0x100718A78
	public IMachineFactory Lookup(string pattern, RegexOptions options); // 0x100718D10
}

// Namespace: 
private class Key // TypeDefIndex: 1618
{
	// Fields
	public string pattern; // 0x10
	public RegexOptions options; // 0x18

	// Methods
	public void .ctor(string pattern, RegexOptions options); // 0x100718A3C
	public override int GetHashCode(); // 0x100718F34
	public override bool Equals(object o); // 0x100718F6C
	public override string ToString(); // 0x100719038
}

// Namespace: System.Text.RegularExpressions
internal class MRUList // TypeDefIndex: 1619
{
	// Fields
	private Node head; // 0x10
	private Node tail; // 0x18

	// Methods
	public void .ctor(); // 0x1007188C0
	public void Use(object o); // 0x100718B8C
	public object Evict(); // 0x100718CDC
}

// Namespace: 
private class Node // TypeDefIndex: 1620
{
	// Fields
	public object value; // 0x10
	public Node previous; // 0x18
	public Node next; // 0x20

	// Methods
	public void .ctor(object value); // 0x10071EE10
}

// Namespace: System.Text.RegularExpressions
public class CaptureCollection : ICollection, IEnumerable // TypeDefIndex: 1621
{
	// Fields
	private Capture[] list; // 0x10

	// Methods
	internal void .ctor(int n); // 0x100706EAC
	public int get_Count(); // 0x100706F28
	public bool get_IsSynchronized(); // 0x100706F44
	internal void SetValue(Capture cap, int i); // 0x100706F4C
	public object get_SyncRoot(); // 0x100706FBC
	public void CopyTo(Array array, int index); // 0x100706FC4
	public IEnumerator GetEnumerator(); // 0x100706FE0
}

// Namespace: System.Text.RegularExpressions
public class Capture // TypeDefIndex: 1622
{
	// Fields
	internal int index; // 0x10
	internal int length; // 0x14
	internal string text; // 0x18

	// Methods
	internal void .ctor(string text); // 0x100706DAC
	internal void .ctor(string text, int index, int length); // 0x100706DD8
	public int get_Index(); // 0x100706C00
	public int get_Length(); // 0x100706C08
	public string get_Value(); // 0x100706E18
	public override string ToString(); // 0x100706EA0
	internal string get_Text(); // 0x100706EA4
}

// Namespace: System.Text.RegularExpressions
internal class CILCompiler : RxCompiler, ICompiler // TypeDefIndex: 1623
{
	// Fields
	private DynamicMethod[] eval_methods; // 0x20
	private bool[] eval_methods_defined; // 0x28
	private Dictionary`2<int, int> generic_ops; // 0x30
	private Dictionary`2<int, int> op_flags; // 0x38
	private Dictionary`2<int, Label> labels; // 0x40
	private static FieldInfo fi_str; // 0x0
	private static FieldInfo fi_string_start; // 0x8
	private static FieldInfo fi_string_end; // 0x10
	private static FieldInfo fi_program; // 0x18
	private static FieldInfo fi_marks; // 0x20
	private static FieldInfo fi_groups; // 0x28
	private static FieldInfo fi_deep; // 0x30
	private static FieldInfo fi_stack; // 0x38
	private static FieldInfo fi_mark_start; // 0x40
	private static FieldInfo fi_mark_end; // 0x48
	private static FieldInfo fi_mark_index; // 0x50
	private static MethodInfo mi_stack_get_count; // 0x58
	private static MethodInfo mi_stack_set_count; // 0x60
	private static MethodInfo mi_stack_push; // 0x68
	private static MethodInfo mi_stack_pop; // 0x70
	private static MethodInfo mi_set_start_of_match; // 0x78
	private static MethodInfo mi_is_word_char; // 0x80
	private static MethodInfo mi_reset_groups; // 0x88
	private static MethodInfo mi_checkpoint; // 0x90
	private static MethodInfo mi_backtrack; // 0x98
	private static MethodInfo mi_open; // 0xA0
	private static MethodInfo mi_close; // 0xA8
	private static MethodInfo mi_get_last_defined; // 0xB0
	private static MethodInfo mi_mark_get_index; // 0xB8
	private static MethodInfo mi_mark_get_length; // 0xC0
	public static readonly bool trace_compile; // 0xC8
	private LocalBuilder local_textinfo; // 0x48

	// Methods
	public void .ctor(); // 0x100707DF8
	private static void .cctor(); // 0x100707EF4
	private IMachineFactory System.Text.RegularExpressions.ICompiler.GetMachineFactory(); // 0x1007083C8
	private DynamicMethod GetEvalMethod(byte[] program, int pc); // 0x1007085DC
	private MethodInfo GetMethod(Type t, string name, MethodInfo cached); // 0x100708E20
	private MethodInfo GetMethod(string name, MethodInfo cached); // 0x100708F04
	private int ReadInt(byte[] code, int pc); // 0x100708F94
	private static OpFlags MakeFlags(bool negate, bool ignore, bool reverse, bool lazy); // 0x10070904C
	private void EmitGenericOp(RxOp op, bool negate, bool ignore, bool reverse, bool lazy); // 0x100709084
	public override void EmitOp(RxOp op, bool negate, bool ignore, bool reverse); // 0x100709168
	public override void EmitOpIgnoreReverse(RxOp op, bool ignore, bool reverse); // 0x1007091F4
	public override void EmitOpNegateReverse(RxOp op, bool negate, bool reverse); // 0x100709268
	private DynamicMethod CreateEvalMethod(byte[] program, int pc); // 0x10070872C
	private int ReadShort(byte[] program, int pc); // 0x100718360
	private Label CreateLabelForPC(ILGenerator ilgen, int pc); // 0x1007183D4
	private int GetILOffset(ILGenerator ilgen); // 0x1007184E4
	private DynamicMethod EmitEvalMethodBody(DynamicMethod m, ILGenerator ilgen, Frame frame, byte[] program, int pc, int end_pc, bool one_op, bool no_bump, out int out_pc); // 0x100709360
}

// Namespace: 
private class Frame // TypeDefIndex: 1624
{
	// Fields
	public Label label_pass; // 0x10
	public Label label_fail; // 0x14

	// Methods
	public void .ctor(ILGenerator ilgen); // 0x1007092D8
}

// Namespace: System.Text.RegularExpressions
internal sealed class Category : Enum // TypeDefIndex: 1625
{
	// Fields
	public ushort value__; // 0x10
	public const Category None = 0; // 0x0
	public const Category Any = 1; // 0x0
	public const Category AnySingleline = 2; // 0x0
	public const Category Word = 3; // 0x0
	public const Category Digit = 4; // 0x0
	public const Category WhiteSpace = 5; // 0x0
	public const Category EcmaAny = 6; // 0x0
	public const Category EcmaAnySingleline = 7; // 0x0
	public const Category EcmaWord = 8; // 0x0
	public const Category EcmaDigit = 9; // 0x0
	public const Category EcmaWhiteSpace = 10; // 0x0
	public const Category UnicodeL = 11; // 0x0
	public const Category UnicodeM = 12; // 0x0
	public const Category UnicodeN = 13; // 0x0
	public const Category UnicodeZ = 14; // 0x0
	public const Category UnicodeP = 15; // 0x0
	public const Category UnicodeS = 16; // 0x0
	public const Category UnicodeC = 17; // 0x0
	public const Category UnicodeLu = 18; // 0x0
	public const Category UnicodeLl = 19; // 0x0
	public const Category UnicodeLt = 20; // 0x0
	public const Category UnicodeLm = 21; // 0x0
	public const Category UnicodeLo = 22; // 0x0
	public const Category UnicodeMn = 23; // 0x0
	public const Category UnicodeMe = 24; // 0x0
	public const Category UnicodeMc = 25; // 0x0
	public const Category UnicodeNd = 26; // 0x0
	public const Category UnicodeNl = 27; // 0x0
	public const Category UnicodeNo = 28; // 0x0
	public const Category UnicodeZs = 29; // 0x0
	public const Category UnicodeZl = 30; // 0x0
	public const Category UnicodeZp = 31; // 0x0
	public const Category UnicodePd = 32; // 0x0
	public const Category UnicodePs = 33; // 0x0
	public const Category UnicodePi = 34; // 0x0
	public const Category UnicodePe = 35; // 0x0
	public const Category UnicodePf = 36; // 0x0
	public const Category UnicodePc = 37; // 0x0
	public const Category UnicodePo = 38; // 0x0
	public const Category UnicodeSm = 39; // 0x0
	public const Category UnicodeSc = 40; // 0x0
	public const Category UnicodeSk = 41; // 0x0
	public const Category UnicodeSo = 42; // 0x0
	public const Category UnicodeCc = 43; // 0x0
	public const Category UnicodeCf = 44; // 0x0
	public const Category UnicodeCo = 45; // 0x0
	public const Category UnicodeCs = 46; // 0x0
	public const Category UnicodeCn = 47; // 0x0
	public const Category UnicodeBasicLatin = 48; // 0x0
	public const Category UnicodeLatin1Supplement = 49; // 0x0
	public const Category UnicodeLatinExtendedA = 50; // 0x0
	public const Category UnicodeLatinExtendedB = 51; // 0x0
	public const Category UnicodeIPAExtensions = 52; // 0x0
	public const Category UnicodeSpacingModifierLetters = 53; // 0x0
	public const Category UnicodeCombiningDiacriticalMarks = 54; // 0x0
	public const Category UnicodeGreek = 55; // 0x0
	public const Category UnicodeCyrillic = 56; // 0x0
	public const Category UnicodeArmenian = 57; // 0x0
	public const Category UnicodeHebrew = 58; // 0x0
	public const Category UnicodeArabic = 59; // 0x0
	public const Category UnicodeSyriac = 60; // 0x0
	public const Category UnicodeThaana = 61; // 0x0
	public const Category UnicodeDevanagari = 62; // 0x0
	public const Category UnicodeBengali = 63; // 0x0
	public const Category UnicodeGurmukhi = 64; // 0x0
	public const Category UnicodeGujarati = 65; // 0x0
	public const Category UnicodeOriya = 66; // 0x0
	public const Category UnicodeTamil = 67; // 0x0
	public const Category UnicodeTelugu = 68; // 0x0
	public const Category UnicodeKannada = 69; // 0x0
	public const Category UnicodeMalayalam = 70; // 0x0
	public const Category UnicodeSinhala = 71; // 0x0
	public const Category UnicodeThai = 72; // 0x0
	public const Category UnicodeLao = 73; // 0x0
	public const Category UnicodeTibetan = 74; // 0x0
	public const Category UnicodeMyanmar = 75; // 0x0
	public const Category UnicodeGeorgian = 76; // 0x0
	public const Category UnicodeHangulJamo = 77; // 0x0
	public const Category UnicodeEthiopic = 78; // 0x0
	public const Category UnicodeCherokee = 79; // 0x0
	public const Category UnicodeUnifiedCanadianAboriginalSyllabics = 80; // 0x0
	public const Category UnicodeOgham = 81; // 0x0
	public const Category UnicodeRunic = 82; // 0x0
	public const Category UnicodeKhmer = 83; // 0x0
	public const Category UnicodeMongolian = 84; // 0x0
	public const Category UnicodeLatinExtendedAdditional = 85; // 0x0
	public const Category UnicodeGreekExtended = 86; // 0x0
	public const Category UnicodeGeneralPunctuation = 87; // 0x0
	public const Category UnicodeSuperscriptsandSubscripts = 88; // 0x0
	public const Category UnicodeCurrencySymbols = 89; // 0x0
	public const Category UnicodeCombiningMarksforSymbols = 90; // 0x0
	public const Category UnicodeLetterlikeSymbols = 91; // 0x0
	public const Category UnicodeNumberForms = 92; // 0x0
	public const Category UnicodeArrows = 93; // 0x0
	public const Category UnicodeMathematicalOperators = 94; // 0x0
	public const Category UnicodeMiscellaneousTechnical = 95; // 0x0
	public const Category UnicodeControlPictures = 96; // 0x0
	public const Category UnicodeOpticalCharacterRecognition = 97; // 0x0
	public const Category UnicodeEnclosedAlphanumerics = 98; // 0x0
	public const Category UnicodeBoxDrawing = 99; // 0x0
	public const Category UnicodeBlockElements = 100; // 0x0
	public const Category UnicodeGeometricShapes = 101; // 0x0
	public const Category UnicodeMiscellaneousSymbols = 102; // 0x0
	public const Category UnicodeDingbats = 103; // 0x0
	public const Category UnicodeBraillePatterns = 104; // 0x0
	public const Category UnicodeCJKRadicalsSupplement = 105; // 0x0
	public const Category UnicodeKangxiRadicals = 106; // 0x0
	public const Category UnicodeIdeographicDescriptionCharacters = 107; // 0x0
	public const Category UnicodeCJKSymbolsandPunctuation = 108; // 0x0
	public const Category UnicodeHiragana = 109; // 0x0
	public const Category UnicodeKatakana = 110; // 0x0
	public const Category UnicodeBopomofo = 111; // 0x0
	public const Category UnicodeHangulCompatibilityJamo = 112; // 0x0
	public const Category UnicodeKanbun = 113; // 0x0
	public const Category UnicodeBopomofoExtended = 114; // 0x0
	public const Category UnicodeEnclosedCJKLettersandMonths = 115; // 0x0
	public const Category UnicodeCJKCompatibility = 116; // 0x0
	public const Category UnicodeCJKUnifiedIdeographsExtensionA = 117; // 0x0
	public const Category UnicodeCJKUnifiedIdeographs = 118; // 0x0
	public const Category UnicodeYiSyllables = 119; // 0x0
	public const Category UnicodeYiRadicals = 120; // 0x0
	public const Category UnicodeHangulSyllables = 121; // 0x0
	public const Category UnicodeHighSurrogates = 122; // 0x0
	public const Category UnicodeHighPrivateUseSurrogates = 123; // 0x0
	public const Category UnicodeLowSurrogates = 124; // 0x0
	public const Category UnicodePrivateUse = 125; // 0x0
	public const Category UnicodeCJKCompatibilityIdeographs = 126; // 0x0
	public const Category UnicodeAlphabeticPresentationForms = 127; // 0x0
	public const Category UnicodeArabicPresentationFormsA = 128; // 0x0
	public const Category UnicodeCombiningHalfMarks = 129; // 0x0
	public const Category UnicodeCJKCompatibilityForms = 130; // 0x0
	public const Category UnicodeSmallFormVariants = 131; // 0x0
	public const Category UnicodeArabicPresentationFormsB = 132; // 0x0
	public const Category UnicodeSpecials = 133; // 0x0
	public const Category UnicodeHalfwidthandFullwidthForms = 134; // 0x0
	public const Category UnicodeOldItalic = 135; // 0x0
	public const Category UnicodeGothic = 136; // 0x0
	public const Category UnicodeDeseret = 137; // 0x0
	public const Category UnicodeByzantineMusicalSymbols = 138; // 0x0
	public const Category UnicodeMusicalSymbols = 139; // 0x0
	public const Category UnicodeMathematicalAlphanumericSymbols = 140; // 0x0
	public const Category UnicodeCJKUnifiedIdeographsExtensionB = 141; // 0x0
	public const Category UnicodeCJKCompatibilityIdeographsSupplement = 142; // 0x0
	public const Category UnicodeTags = 143; // 0x0
	public const Category LastValue = 144; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal class CategoryUtils // TypeDefIndex: 1626
{
	// Methods
	public static Category CategoryFromName(string name); // 0x100706FFC
	public static bool IsCategory(Category cat, char c); // 0x1007071CC
	private static bool IsCategory(UnicodeCategory uc, char c); // 0x100707D74
}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkRef // TypeDefIndex: 1627
{
	// Methods
	protected void .ctor(); // 0x10071E104
}

// Namespace: System.Text.RegularExpressions
internal interface ICompiler // TypeDefIndex: 1628
{
	// Methods
	public abstract IMachineFactory GetMachineFactory(); // 0
	public abstract void EmitFalse(); // 0
	public abstract void EmitTrue(); // 0
	public abstract void EmitCharacter(char c, bool negate, bool ignore, bool reverse); // 0
	public abstract void EmitCategory(Category cat, bool negate, bool reverse); // 0
	public abstract void EmitNotCategory(Category cat, bool negate, bool reverse); // 0
	public abstract void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse); // 0
	public abstract void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse); // 0
	public abstract void EmitString(string str, bool ignore, bool reverse); // 0
	public abstract void EmitPosition(Position pos); // 0
	public abstract void EmitOpen(int gid); // 0
	public abstract void EmitClose(int gid); // 0
	public abstract void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail); // 0
	public abstract void EmitBalance(); // 0
	public abstract void EmitReference(int gid, bool ignore, bool reverse); // 0
	public abstract void EmitIfDefined(int gid, LinkRef tail); // 0
	public abstract void EmitSub(LinkRef tail); // 0
	public abstract void EmitTest(LinkRef yes, LinkRef tail); // 0
	public abstract void EmitBranch(LinkRef next); // 0
	public abstract void EmitJump(LinkRef target); // 0
	public abstract void EmitRepeat(int min, int max, bool lazy, LinkRef until); // 0
	public abstract void EmitUntil(LinkRef repeat); // 0
	public abstract void EmitIn(LinkRef tail); // 0
	public abstract void EmitInfo(int count, int min, int max); // 0
	public abstract void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail); // 0
	public abstract void EmitAnchor(bool reverse, int offset, LinkRef tail); // 0
	public abstract void EmitBranchEnd(); // 0
	public abstract void EmitAlternationEnd(); // 0
	public abstract LinkRef NewLink(); // 0
	public abstract void ResolveLink(LinkRef link); // 0
}

// Namespace: System.Text.RegularExpressions
internal class InterpreterFactory : IMachineFactory // TypeDefIndex: 1629
{
	// Fields
	private IDictionary mapping; // 0x10
	private ushort[] pattern; // 0x18
	private string[] namesMapping; // 0x20
	private int gap; // 0x28

	// Methods
	public void .ctor(ushort[] pattern); // 0x10071CCF4
	public IMachine NewInstance(); // 0x10071CD20
	public int get_GroupCount(); // 0x10071CD84
	public int get_Gap(); // 0x10071CDC0
	public void set_Gap(int value); // 0x10071CDC8
	public IDictionary get_Mapping(); // 0x10071CDD0
	public void set_Mapping(IDictionary value); // 0x10071CDD8
	public string[] get_NamesMapping(); // 0x10071CDE0
	public void set_NamesMapping(string[] value); // 0x10071CDE8
}

// Namespace: System.Text.RegularExpressions
internal class PatternCompiler : ICompiler // TypeDefIndex: 1630
{
	// Fields
	private ArrayList pgm; // 0x10

	// Methods
	public void .ctor(); // 0x10071EE3C
	public static ushort EncodeOp(OpCode op, OpFlags flags); // 0x10071EEA8
	public IMachineFactory GetMachineFactory(); // 0x10071EEB4
	public void EmitFalse(); // 0x10071EFAC
	public void EmitTrue(); // 0x10071EFB8
	private void EmitCount(int count); // 0x10071EFC0
	public void EmitCharacter(char c, bool negate, bool ignore, bool reverse); // 0x10071F094
	public void EmitCategory(Category cat, bool negate, bool reverse); // 0x10071F1B0
	public void EmitNotCategory(Category cat, bool negate, bool reverse); // 0x10071F1F8
	public void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse); // 0x10071F240
	public void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse); // 0x10071F2B0
	public void EmitString(string str, bool ignore, bool reverse); // 0x10071F3D4
	public void EmitPosition(Position pos); // 0x10071F490
	public void EmitOpen(int gid); // 0x10071F4C0
	public void EmitClose(int gid); // 0x10071F4F0
	public void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail); // 0x10071F520
	public void EmitBalance(); // 0x10071F6A4
	public void EmitReference(int gid, bool ignore, bool reverse); // 0x10071F6AC
	public void EmitIfDefined(int gid, LinkRef tail); // 0x10071F6F4
	public void EmitSub(LinkRef tail); // 0x10071F748
	public void EmitTest(LinkRef yes, LinkRef tail); // 0x10071F780
	public void EmitBranch(LinkRef next); // 0x10071F7DC
	public void EmitJump(LinkRef target); // 0x10071F814
	public void EmitRepeat(int min, int max, bool lazy, LinkRef until); // 0x10071F84C
	public void EmitUntil(LinkRef repeat); // 0x10071F8E0
	public void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail); // 0x10071FA08
	public void EmitIn(LinkRef tail); // 0x10071FA9C
	public void EmitAnchor(bool reverse, int offset, LinkRef tail); // 0x10071FAD4
	public void EmitInfo(int count, int min, int max); // 0x10071FB38
	public LinkRef NewLink(); // 0x10071FBB4
	public void ResolveLink(LinkRef lref); // 0x10071F908
	public void EmitBranchEnd(); // 0x10071FC78
	public void EmitAlternationEnd(); // 0x10071FC7C
	private static OpFlags MakeFlags(bool negate, bool ignore, bool reverse, bool lazy); // 0x10071F16C
	private void Emit(OpCode op); // 0x10071EFB4
	private void Emit(OpCode op, OpFlags flags); // 0x10071F1A4
	private void Emit(ushort word); // 0x10071EFF0
	private int get_CurrentAddress(); // 0x10071FC18
	private void BeginLink(LinkRef lref); // 0x10071F5A4
	private void EmitLink(LinkRef lref); // 0x10071F61C
}

// Namespace: 
private class PatternLinkStack : LinkStack // TypeDefIndex: 1631
{
	// Fields
	private Link link; // 0x18

	// Methods
	public void .ctor(); // 0x10071FC0C
	public void set_BaseAddress(int value); // 0x10071FC80
	public int get_OffsetAddress(); // 0x10071FC10
	public void set_OffsetAddress(int value); // 0x10071FC88
	public int GetOffset(int target_addr); // 0x10071FC6C
	protected override object GetCurrent(); // 0x10071FC90
	protected override void SetCurrent(object l); // 0x10071FCF4
}

// Namespace: 
private struct Link // TypeDefIndex: 1632
{
	// Fields
	public int base_addr; // 0x10
	public int offset_addr; // 0x14

}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkStack : LinkRef // TypeDefIndex: 1633
{
	// Fields
	private Stack stack; // 0x10

	// Methods
	public void .ctor(); // 0x10071E10C
	public void Push(); // 0x10071E178
	public bool Pop(); // 0x10071E204
	protected abstract object GetCurrent(); // 0
	protected abstract void SetCurrent(object l); // 0
}

// Namespace: System.Text.RegularExpressions
internal struct Mark // TypeDefIndex: 1634
{
	// Fields
	public int Start; // 0x10
	public int End; // 0x14
	public int Previous; // 0x18

	// Methods
	public bool get_IsDefined(); // 0x10071E2C4
	public int get_Index(); // 0x10071E2E4
	public int get_Length(); // 0x10071E2F4
}

// Namespace: System.Text.RegularExpressions
public class GroupCollection : ICollection, IEnumerable // TypeDefIndex: 1635
{
	// Fields
	private Group[] list; // 0x10
	private int gap; // 0x18

	// Methods
	internal void .ctor(int n, int gap); // 0x10071944C
	public int get_Count(); // 0x100706C10
	public bool get_IsSynchronized(); // 0x1007194D0
	public Group get_Item(int i); // 0x100706C2C
	internal void SetValue(Group g, int i); // 0x1007195F4
	public object get_SyncRoot(); // 0x100719664
	public void CopyTo(Array array, int index); // 0x10071966C
	public IEnumerator GetEnumerator(); // 0x100719688
}

// Namespace: System.Text.RegularExpressions
public class Group : Capture // TypeDefIndex: 1636
{
	// Fields
	internal static Group Fail; // 0x0
	private bool success; // 0x20
	private CaptureCollection captures; // 0x28

	// Methods
	internal void .ctor(string text, int index, int length, int n_caps); // 0x10071924C
	internal void .ctor(string text, int index, int length); // 0x1007192FC
	internal void .ctor(); // 0x100719344
	private static void .cctor(); // 0x1007193E4
	public CaptureCollection get_Captures(); // 0x100719444
	public bool get_Success(); // 0x100706BEC
}

// Namespace: System.Text.RegularExpressions
internal class Interpreter : BaseMachine // TypeDefIndex: 1637
{
	// Fields
	private ushort[] program; // 0x18
	private int program_start; // 0x20
	private string text; // 0x28
	private int text_end; // 0x30
	private int group_count; // 0x34
	private int match_min; // 0x38
	private QuickSearch qs; // 0x40
	private int scan_ptr; // 0x48
	private RepeatContext repeat; // 0x50
	private RepeatContext fast; // 0x58
	private IntStack stack; // 0x60
	private RepeatContext deep; // 0x70
	private Mark[] marks; // 0x78
	private int mark_start; // 0x80
	private int mark_end; // 0x84
	private int[] groups; // 0x88

	// Methods
	public void .ctor(ushort[] program); // 0x1007196A4
	private int ReadProgramCount(int ptr); // 0x1007197A8
	public override Match Scan(Regex regex, string text, int start, int end); // 0x100719838
	private void Reset(); // 0x10071B08C
	private bool Eval(Mode mode, int ref_ptr, int pc); // 0x1007198F8
	private bool EvalChar(Mode mode, int ptr, int pc, bool multi); // 0x10071BB18
	private bool TryMatch(int ref_ptr, int pc); // 0x10071B228
	private bool IsPosition(Position pos, int ptr); // 0x10071B808
	private bool IsWordChar(char c); // 0x10071C640
	private string GetString(int pc); // 0x10071B324
	private void Open(int gid, int ptr); // 0x10071BF14
	private void Close(int gid, int ptr); // 0x10071C02C
	private bool Balance(int gid, int balance_gid, bool capture, int ptr); // 0x10071C0A4
	private int Checkpoint(); // 0x10071C240
	private void Backtrack(int cp); // 0x10071C250
	private void ResetGroups(); // 0x10071B0B0
	private int GetLastDefined(int gid); // 0x10071BA54
	private int CreateMark(int previous); // 0x10071C650
	private void GetGroupInfo(int gid, out int first_mark_index, out int n_caps); // 0x10071C7C8
	private void PopulateGroup(Group g, int first_mark_index, int n_caps); // 0x10071C8BC
	private Match GenerateMatch(Regex regex); // 0x10071AD30
}

// Namespace: 
private struct IntStack // TypeDefIndex: 1638
{
	// Fields
	private int[] values; // 0x10
	private int count; // 0x18

	// Methods
	public int Pop(); // 0x10071CC28
	public void Push(int value); // 0x10071CC30
	public int get_Count(); // 0x10071CC38
	public void set_Count(int value); // 0x10071CC40
}

// Namespace: 
private class RepeatContext // TypeDefIndex: 1639
{
	// Fields
	private int start; // 0x10
	private int min; // 0x14
	private int max; // 0x18
	private bool lazy; // 0x1C
	private int expr_pc; // 0x20
	private RepeatContext previous; // 0x28
	private int count; // 0x30

	// Methods
	public void .ctor(RepeatContext previous, int min, int max, bool lazy, int expr_pc); // 0x10071C334
	public int get_Count(); // 0x10071C3A8
	public void set_Count(int value); // 0x10071C3B0
	public int get_Start(); // 0x10071C3A0
	public void set_Start(int value); // 0x10071C3B8
	public bool get_IsMinimum(); // 0x10071C3C8
	public bool get_IsMaximum(); // 0x10071C3E4
	public bool get_IsLazy(); // 0x10071C3DC
	public int get_Expression(); // 0x10071C3C0
	public RepeatContext get_Previous(); // 0x10071C398
}

// Namespace: 
private sealed class Mode : Enum // TypeDefIndex: 1640
{
	// Fields
	public int value__; // 0x10
	public const Mode Search = 0; // 0x0
	public const Mode Match = 1; // 0x0
	public const Mode Count = 2; // 0x0

}

// Namespace: System.Text.RegularExpressions
internal struct Interval : IComparable // TypeDefIndex: 1641
{
	// Fields
	public int low; // 0x10
	public int high; // 0x14
	public bool contiguous; // 0x18

	// Methods
	public void .ctor(int low, int high); // 0x10071CDF0
	public static Interval get_Empty(); // 0x10071CE0C
	public bool get_IsDiscontiguous(); // 0x10071CE18
	public bool get_IsSingleton(); // 0x10071CE28
	public bool get_IsEmpty(); // 0x10071CE48
	public int get_Size(); // 0x10071CE58
	public bool IsDisjoint(Interval i); // 0x10071CE74
	public bool IsAdjacent(Interval i); // 0x10071CEAC
	public bool Contains(Interval i); // 0x10071CEEC
	public bool Contains(int i); // 0x10071CF28
	public bool Intersects(Interval i); // 0x10071CFB0
	public void Merge(Interval i); // 0x10071CFBC
	public int CompareTo(object o); // 0x10071D068
}

// Namespace: System.Text.RegularExpressions
internal class IntervalCollection : ICollection, IEnumerable // TypeDefIndex: 1642
{
	// Fields
	private ArrayList intervals; // 0x10

	// Methods
	public void .ctor(); // 0x10071D0A4
	public Interval get_Item(int i); // 0x10071D110
	public void Add(Interval i); // 0x10071D1AC
	public void Normalize(); // 0x10071D258
	public IntervalCollection GetMetaCollection(CostDelegate cost_del); // 0x10071D49C
	private void Optimize(int begin, int end, IntervalCollection meta, CostDelegate cost_del); // 0x10071D5B8
	public int get_Count(); // 0x10071D564
	public bool get_IsSynchronized(); // 0x10071D85C
	public object get_SyncRoot(); // 0x10071D864
	public void CopyTo(Array array, int index); // 0x10071D86C
	public IEnumerator GetEnumerator(); // 0x10071DBD0
}

// Namespace: 
private class Enumerator : IEnumerator // TypeDefIndex: 1643
{
	// Fields
	private IList list; // 0x10
	private int ptr; // 0x18

	// Methods
	public void .ctor(IList list); // 0x10071DC40
	public object get_Current(); // 0x10071DD90
	public bool MoveNext(); // 0x10071DF50
	public void Reset(); // 0x10071DD84
}

// Namespace: 
public sealed class CostDelegate : MulticastDelegate // TypeDefIndex: 1644
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10071DC74
	public virtual double Invoke(Interval i); // 0x10071D7CC
	public virtual IAsyncResult BeginInvoke(Interval i, AsyncCallback callback, object object); // 0x10071DC9C
	public virtual double EndInvoke(IAsyncResult result); // 0x10071DD58
}

// Namespace: System.Text.RegularExpressions
public class MatchCollection : ICollection, IEnumerable // TypeDefIndex: 1645
{
	// Fields
	private Match current; // 0x10
	private ArrayList list; // 0x18

	// Methods
	internal void .ctor(Match start); // 0x10071E44C
	public int get_Count(); // 0x10071E4C8
	public bool get_IsSynchronized(); // 0x10071E644
	public virtual Match get_Item(int i); // 0x10071E64C
	public object get_SyncRoot(); // 0x10071E874
	public void CopyTo(Array array, int index); // 0x10071E87C
	public IEnumerator GetEnumerator(); // 0x10071E990
	private bool TryToGet(int i); // 0x10071E764
	private ICollection get_FullList(); // 0x10071E5C0
}

// Namespace: 
private class Enumerator : IEnumerator // TypeDefIndex: 1646
{
	// Fields
	private int index; // 0x10
	private MatchCollection coll; // 0x18

	// Methods
	internal void .ctor(MatchCollection coll); // 0x10071EA5C
	private void System.Collections.IEnumerator.Reset(); // 0x10071EA90
	private object System.Collections.IEnumerator.get_Current(); // 0x10071EA9C
	private bool System.Collections.IEnumerator.MoveNext(); // 0x10071ECB4
}

// Namespace: System.Text.RegularExpressions
public class Match : Group // TypeDefIndex: 1647
{
	// Fields
	private Regex regex; // 0x30
	private IMachine machine; // 0x38
	private int text_length; // 0x40
	private GroupCollection groups; // 0x48
	private static Match empty; // 0x0

	// Methods
	private void .ctor(); // 0x10071E334
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length); // 0x10071CA74
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length, int n_caps); // 0x10071CB28
	private static void .cctor(); // 0x10071E3E4
	public static Match get_Empty(); // 0x1007194D8
	public virtual GroupCollection get_Groups(); // 0x10071E444
	public Match NextMatch(); // 0x100706898
	internal Regex get_Regex(); // 0x100719540
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Parser // TypeDefIndex: 1648
{
	// Fields
	private string pattern; // 0x10
	private int ptr; // 0x18
	private ArrayList caps; // 0x20
	private Hashtable refs; // 0x28
	private int num_groups; // 0x30
	private int gap; // 0x34

	// Methods
	public void .ctor(); // 0x100721174
	public static int ParseDecimal(string str, int ptr); // 0x1007312A4
	public static int ParseOctal(string str, int ptr); // 0x10072D3E8
	public static int ParseHex(string str, int ptr, int digits); // 0x1007313A4
	public static int ParseNumber(string str, int ptr, int b, int min, int max); // 0x1007312B4
	public static string ParseName(string str, int ptr); // 0x100731480
	public RegularExpression ParseRegularExpression(string pattern, RegexOptions options); // 0x100721200
	public int GetMapping(Hashtable mapping); // 0x100721390
	private void ParseGroup(Group group, RegexOptions options, Assertion assertion); // 0x1007316A4
	private Expression ParseGroupingConstruct(RegexOptions options); // 0x100734220
	private bool ParseAssertionType(ExpressionAssertion assertion); // 0x100734D30
	private void ParseOptions(RegexOptions options, bool negate); // 0x100734BE4
	private Expression ParseCharacterClass(RegexOptions options); // 0x100733C34
	private bool ParseRepetitionBounds(out int min, out int max, RegexOptions options); // 0x1007349C4
	private Category ParseUnicodeCategory(); // 0x100734E2C
	private Expression ParseSpecial(RegexOptions options); // 0x100733640
	private int ParseEscape(); // 0x100733348
	private string ParseName(); // 0x100734E18
	private static bool IsNameChar(char c); // 0x1007315C4
	private int ParseNumber(int b, int min, int max); // 0x100734F54
	private static int ParseDigit(char c, int b, int n); // 0x1007313B8
	private void ConsumeWhitespace(bool ignore); // 0x1007330A4
	private void ResolveReferences(); // 0x100731EF0
	private void HandleExplicitNumericGroups(ArrayList explicit_numeric_groups); // 0x100734F78
	private static bool IsIgnoreCase(RegexOptions options); // 0x100734218
	private static bool IsMultiline(RegexOptions options); // 0x10073330C
	private static bool IsExplicitCapture(RegexOptions options); // 0x100734BDC
	private static bool IsSingleline(RegexOptions options); // 0x100733340
	private static bool IsIgnorePatternWhitespace(RegexOptions options); // 0x10073309C
	private static bool IsECMAScript(RegexOptions options); // 0x100734E24
	private ArgumentException NewParseException(string msg); // 0x100732FD0
}

// Namespace: System.Text.RegularExpressions
internal class QuickSearch // TypeDefIndex: 1649
{
	// Fields
	private string str; // 0x10
	private int len; // 0x18
	private bool ignore; // 0x1C
	private bool reverse; // 0x1D
	private byte[] shift; // 0x20
	private Hashtable shiftExtended; // 0x28
	private static readonly int THRESHOLD; // 0x0

	// Methods
	public void .ctor(string str, bool ignore, bool reverse); // 0x10071B444
	private static void .cctor(); // 0x10071FFA0
	public int get_Length(); // 0x10071B800
	public int Search(string text, int start, int end); // 0x10071B534
	private void SetupShiftTable(); // 0x10071FD78
	private int GetShiftDistance(char c); // 0x100720088
	private char GetChar(char c); // 0x10071FFF4
}

// Namespace: System.Text.RegularExpressions
public class Regex : ISerializable // TypeDefIndex: 1650
{
	// Fields
	private static FactoryCache cache; // 0x0
	private static readonly bool old_rx; // 0x8
	private IMachineFactory machineFactory; // 0x10
	private IDictionary mapping; // 0x18
	private int group_count; // 0x20
	private int gap; // 0x24
	private bool refsInitialized; // 0x28
	private string[] group_names; // 0x30
	private int[] group_numbers; // 0x38
	protected internal string pattern; // 0x40
	protected internal RegexOptions roptions; // 0x48
	protected internal Hashtable capnames; // 0x50
	protected internal Hashtable caps; // 0x58
	protected internal RegexRunnerFactory factory; // 0x60
	protected internal int capsize; // 0x68
	protected internal string[] capslist; // 0x70

	// Methods
	protected void .ctor(); // 0x1007201BC
	public void .ctor(string pattern); // 0x1007201C4
	public void .ctor(string pattern, RegexOptions options); // 0x1007201CC
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1007205F4
	private static void .cctor(); // 0x1007206D4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10072076C
	public static string[] Split(string input, string pattern); // 0x1007208A8
	public static string[] Split(string input, string pattern, RegexOptions options); // 0x100720920
	private static void validate_options(RegexOptions options); // 0x100720290
	private void Init(); // 0x10072031C
	private void InitNewRegex(); // 0x1007209EC
	private static IMachineFactory CreateMachineFactory(string pattern, RegexOptions options); // 0x100720CC8
	public RegexOptions get_Options(); // 0x1007208A0
	public bool get_RightToLeft(); // 0x100706BF4
	internal int GetGroupIndex(int number); // 0x100719548
	private int default_startat(string input); // 0x100721B34
	public bool IsMatch(string input); // 0x100721B54
	public bool IsMatch(string input, int startat); // 0x100721B9C
	public Match Match(string input, int startat); // 0x100706A40
	public MatchCollection Matches(string input); // 0x100721CAC
	public MatchCollection Matches(string input, int startat); // 0x100721CF4
	public string[] Split(string input); // 0x1007209A0
	public string[] Split(string input, int count, int startat); // 0x100721D78
	public override string ToString(); // 0x100721F44
	internal int get_Gap(); // 0x10071E3DC
	private IMachine CreateMachine(); // 0x100721BBC
	private static string[] GetGroupNamesArray(int groupCount, IDictionary mapping); // 0x1007215F4
	private int[] get_GroupNumbers(); // 0x1007219E4
}

// Namespace: System.Text.RegularExpressions
public sealed class RegexOptions : Enum // TypeDefIndex: 1651
{
	// Fields
	public int value__; // 0x10
	public const RegexOptions None = 0; // 0x0
	public const RegexOptions IgnoreCase = 1; // 0x0
	public const RegexOptions Multiline = 2; // 0x0
	public const RegexOptions ExplicitCapture = 4; // 0x0
	public const RegexOptions Compiled = 8; // 0x0
	public const RegexOptions Singleline = 16; // 0x0
	public const RegexOptions IgnorePatternWhitespace = 32; // 0x0
	public const RegexOptions RightToLeft = 64; // 0x0
	public const RegexOptions ECMAScript = 256; // 0x0
	public const RegexOptions CultureInvariant = 512; // 0x0

}

// Namespace: System.Text.RegularExpressions
public abstract class RegexRunnerFactory // TypeDefIndex: 1652
{
}

// Namespace: System.Text.RegularExpressions
internal sealed class RxInterpreter : BaseMachine // TypeDefIndex: 1653
{
	// Fields
	private byte[] program; // 0x18
	private string str; // 0x20
	private int string_start; // 0x28
	private int string_end; // 0x2C
	private int group_count; // 0x30
	private int[] groups; // 0x38
	private EvalDelegate eval_del; // 0x40
	private Mark[] marks; // 0x48
	private int mark_start; // 0x50
	private int mark_end; // 0x54
	private IntStack stack; // 0x58
	private RepeatContext repeat; // 0x68
	private RepeatContext deep; // 0x70
	public static readonly bool trace_rx; // 0x0

	// Methods
	public void .ctor(byte[] program, EvalDelegate eval_del); // 0x100724148
	private static void .cctor(); // 0x1007243DC
	private static int ReadInt(byte[] code, int pc); // 0x10072444C
	public override Match Scan(Regex regex, string text, int start, int end); // 0x100724504
	private void Open(int gid, int ptr); // 0x10072B220
	private void Close(int gid, int ptr); // 0x10072B4B0
	private bool Balance(int gid, int balance_gid, bool capture, int ptr); // 0x10072B528
	private int Checkpoint(); // 0x10072B6C4
	private void Backtrack(int cp); // 0x10072B6D4
	private void ResetGroups(); // 0x10072426C
	private int GetLastDefined(int gid); // 0x10072B7B8
	private int CreateMark(int previous); // 0x10072B338
	private void GetGroupInfo(int gid, out int first_mark_index, out int n_caps); // 0x10072B87C
	private void PopulateGroup(Group g, int first_mark_index, int n_caps); // 0x10072B970
	private Match GenerateMatch(Regex regex); // 0x10072AEC4
	private static bool IsWordChar(char c); // 0x10072BB28
	private bool EvalByteCode(int pc, int strpos, int strpos_result); // 0x100724634
}

// Namespace: 
internal struct IntStack // TypeDefIndex: 1654
{
	// Fields
	private int[] values; // 0x10
	private int count; // 0x18

	// Methods
	public int Pop(); // 0x10072BEE0
	public void Push(int value); // 0x10072BEE8
	public int get_Count(); // 0x10072BEF0
	public void set_Count(int value); // 0x10072BEF8
}

// Namespace: 
private class RepeatContext // TypeDefIndex: 1655
{
	// Fields
	private int start; // 0x10
	private int min; // 0x14
	private int max; // 0x18
	private bool lazy; // 0x1C
	private int expr_pc; // 0x20
	private RepeatContext previous; // 0x28
	private int count; // 0x30

	// Methods
	public void .ctor(RepeatContext previous, int min, int max, bool lazy, int expr_pc); // 0x10072BBD4
	public int get_Count(); // 0x10072BC48
	public void set_Count(int value); // 0x10072BC50
	public int get_Start(); // 0x10072BC40
	public void set_Start(int value); // 0x10072BC58
	public bool get_IsMinimum(); // 0x10072BC68
	public bool get_IsMaximum(); // 0x10072BC84
	public bool get_IsLazy(); // 0x10072BC7C
	public int get_Expression(); // 0x10072BC60
	public RepeatContext get_Previous(); // 0x10072BC38
}

// Namespace: System.Text.RegularExpressions
internal class RxLinkRef : LinkRef // TypeDefIndex: 1656
{
	// Fields
	public int[] offsets; // 0x10
	public int current; // 0x18

	// Methods
	public void .ctor(); // 0x1007240D8
	public void PushInstructionBase(int offset); // 0x1007222A0
	public void PushOffsetPosition(int offset); // 0x100722448
}

// Namespace: System.Text.RegularExpressions
internal class RxCompiler : ICompiler // TypeDefIndex: 1657
{
	// Fields
	protected byte[] program; // 0x10
	protected int curpos; // 0x18

	// Methods
	public void .ctor(); // 0x100707E88
	private void MakeRoom(int bytes); // 0x100721F4C
	private void Emit(byte val); // 0x100722014
	private void Emit(RxOp opcode); // 0x10072207C
	private void Emit(ushort val); // 0x100722080
	private void Emit(int val); // 0x100722118
	private void BeginLink(LinkRef lref); // 0x100722210
	private void EmitLink(LinkRef lref); // 0x1007223AC
	public IMachineFactory GetMachineFactory(); // 0x1007224F0
	public void EmitFalse(); // 0x1007225A4
	public void EmitTrue(); // 0x1007225AC
	public virtual void EmitOp(RxOp op, bool negate, bool ignore, bool reverse); // 0x1007091D0
	public virtual void EmitOpIgnoreReverse(RxOp op, bool ignore, bool reverse); // 0x100709250
	public virtual void EmitOpNegateReverse(RxOp op, bool negate, bool reverse); // 0x1007092C0
	public void EmitCharacter(char c, bool negate, bool ignore, bool reverse); // 0x1007225B4
	private void EmitUniCat(UnicodeCategory cat, bool negate, bool reverse); // 0x1007226E4
	private void EmitCatGeneral(Category cat, bool negate, bool reverse); // 0x100722758
	public void EmitCategory(Category cat, bool negate, bool reverse); // 0x1007227CC
	public void EmitNotCategory(Category cat, bool negate, bool reverse); // 0x1007232E4
	public void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse); // 0x1007231F0
	public void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse); // 0x1007232F8
	public void EmitString(string str, bool ignore, bool reverse); // 0x100723488
	public void EmitPosition(Position pos); // 0x1007236CC
	public void EmitOpen(int gid); // 0x1007237F4
	public void EmitClose(int gid); // 0x100723880
	public void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail); // 0x10072390C
	public void EmitBalance(); // 0x100723990
	public void EmitReference(int gid, bool ignore, bool reverse); // 0x100723998
	public void EmitIfDefined(int gid, LinkRef tail); // 0x100723A5C
	public void EmitSub(LinkRef tail); // 0x100723B04
	public void EmitTest(LinkRef yes, LinkRef tail); // 0x100723B3C
	public void EmitBranch(LinkRef next); // 0x100723B98
	public void EmitJump(LinkRef target); // 0x100723BD0
	public void EmitIn(LinkRef tail); // 0x100723C08
	public void EmitRepeat(int min, int max, bool lazy, LinkRef until); // 0x100723C40
	public void EmitUntil(LinkRef repeat); // 0x100723CC8
	public void EmitInfo(int count, int min, int max); // 0x100723E7C
	public void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail); // 0x100723F30
	public void EmitAnchor(bool reverse, int offset, LinkRef tail); // 0x100723FB8
	public void EmitBranchEnd(); // 0x100724078
	public void EmitAlternationEnd(); // 0x10072407C
	public LinkRef NewLink(); // 0x100724080
	public void ResolveLink(LinkRef link); // 0x100723CF0
}

// Namespace: System.Text.RegularExpressions
internal class RxInterpreterFactory : IMachineFactory // TypeDefIndex: 1658
{
	// Fields
	private IDictionary mapping; // 0x10
	private byte[] program; // 0x18
	private EvalDelegate eval_del; // 0x20
	private string[] namesMapping; // 0x28
	private int gap; // 0x30

	// Methods
	public void .ctor(byte[] program, EvalDelegate eval_del); // 0x1007086F4
	public IMachine NewInstance(); // 0x10072BFAC
	public int get_GroupCount(); // 0x10072C020
	public int get_Gap(); // 0x10072C094
	public void set_Gap(int value); // 0x10072C09C
	public IDictionary get_Mapping(); // 0x10072C0A4
	public void set_Mapping(IDictionary value); // 0x10072C0AC
	public string[] get_NamesMapping(); // 0x10072C0B4
	public void set_NamesMapping(string[] value); // 0x10072C0BC
}

// Namespace: System.Text.RegularExpressions
internal sealed class RxOp : Enum // TypeDefIndex: 1659
{
	// Fields
	public byte value__; // 0x10
	public const RxOp Info = 0; // 0x0
	public const RxOp False = 1; // 0x0
	public const RxOp True = 2; // 0x0
	public const RxOp AnyPosition = 3; // 0x0
	public const RxOp StartOfString = 4; // 0x0
	public const RxOp StartOfLine = 5; // 0x0
	public const RxOp StartOfScan = 6; // 0x0
	public const RxOp EndOfString = 7; // 0x0
	public const RxOp EndOfLine = 8; // 0x0
	public const RxOp End = 9; // 0x0
	public const RxOp WordBoundary = 10; // 0x0
	public const RxOp NoWordBoundary = 11; // 0x0
	public const RxOp String = 12; // 0x0
	public const RxOp StringIgnoreCase = 13; // 0x0
	public const RxOp StringReverse = 14; // 0x0
	public const RxOp StringIgnoreCaseReverse = 15; // 0x0
	public const RxOp UnicodeString = 16; // 0x0
	public const RxOp UnicodeStringIgnoreCase = 17; // 0x0
	public const RxOp UnicodeStringReverse = 18; // 0x0
	public const RxOp UnicodeStringIgnoreCaseReverse = 19; // 0x0
	public const RxOp Char = 20; // 0x0
	public const RxOp NoChar = 21; // 0x0
	public const RxOp CharIgnoreCase = 22; // 0x0
	public const RxOp NoCharIgnoreCase = 23; // 0x0
	public const RxOp CharReverse = 24; // 0x0
	public const RxOp NoCharReverse = 25; // 0x0
	public const RxOp CharIgnoreCaseReverse = 26; // 0x0
	public const RxOp NoCharIgnoreCaseReverse = 27; // 0x0
	public const RxOp Range = 28; // 0x0
	public const RxOp NoRange = 29; // 0x0
	public const RxOp RangeIgnoreCase = 30; // 0x0
	public const RxOp NoRangeIgnoreCase = 31; // 0x0
	public const RxOp RangeReverse = 32; // 0x0
	public const RxOp NoRangeReverse = 33; // 0x0
	public const RxOp RangeIgnoreCaseReverse = 34; // 0x0
	public const RxOp NoRangeIgnoreCaseReverse = 35; // 0x0
	public const RxOp Bitmap = 36; // 0x0
	public const RxOp NoBitmap = 37; // 0x0
	public const RxOp BitmapIgnoreCase = 38; // 0x0
	public const RxOp NoBitmapIgnoreCase = 39; // 0x0
	public const RxOp BitmapReverse = 40; // 0x0
	public const RxOp NoBitmapReverse = 41; // 0x0
	public const RxOp BitmapIgnoreCaseReverse = 42; // 0x0
	public const RxOp NoBitmapIgnoreCaseReverse = 43; // 0x0
	public const RxOp UnicodeChar = 44; // 0x0
	public const RxOp NoUnicodeChar = 45; // 0x0
	public const RxOp UnicodeCharIgnoreCase = 46; // 0x0
	public const RxOp NoUnicodeCharIgnoreCase = 47; // 0x0
	public const RxOp UnicodeCharReverse = 48; // 0x0
	public const RxOp NoUnicodeCharReverse = 49; // 0x0
	public const RxOp UnicodeCharIgnoreCaseReverse = 50; // 0x0
	public const RxOp NoUnicodeCharIgnoreCaseReverse = 51; // 0x0
	public const RxOp UnicodeRange = 52; // 0x0
	public const RxOp NoUnicodeRange = 53; // 0x0
	public const RxOp UnicodeRangeIgnoreCase = 54; // 0x0
	public const RxOp NoUnicodeRangeIgnoreCase = 55; // 0x0
	public const RxOp UnicodeRangeReverse = 56; // 0x0
	public const RxOp NoUnicodeRangeReverse = 57; // 0x0
	public const RxOp UnicodeRangeIgnoreCaseReverse = 58; // 0x0
	public const RxOp NoUnicodeRangeIgnoreCaseReverse = 59; // 0x0
	public const RxOp UnicodeBitmap = 60; // 0x0
	public const RxOp NoUnicodeBitmap = 61; // 0x0
	public const RxOp UnicodeBitmapIgnoreCase = 62; // 0x0
	public const RxOp NoUnicodeBitmapIgnoreCase = 63; // 0x0
	public const RxOp UnicodeBitmapReverse = 64; // 0x0
	public const RxOp NoUnicodeBitmapReverse = 65; // 0x0
	public const RxOp UnicodeBitmapIgnoreCaseReverse = 66; // 0x0
	public const RxOp NoUnicodeBitmapIgnoreCaseReverse = 67; // 0x0
	public const RxOp CategoryAny = 68; // 0x0
	public const RxOp NoCategoryAny = 69; // 0x0
	public const RxOp CategoryAnyReverse = 70; // 0x0
	public const RxOp NoCategoryAnyReverse = 71; // 0x0
	public const RxOp CategoryAnySingleline = 72; // 0x0
	public const RxOp NoCategoryAnySingleline = 73; // 0x0
	public const RxOp CategoryAnySinglelineReverse = 74; // 0x0
	public const RxOp NoCategoryAnySinglelineReverse = 75; // 0x0
	public const RxOp CategoryDigit = 76; // 0x0
	public const RxOp NoCategoryDigit = 77; // 0x0
	public const RxOp CategoryDigitReverse = 78; // 0x0
	public const RxOp NoCategoryDigitReverse = 79; // 0x0
	public const RxOp CategoryWord = 80; // 0x0
	public const RxOp NoCategoryWord = 81; // 0x0
	public const RxOp CategoryWordReverse = 82; // 0x0
	public const RxOp NoCategoryWordReverse = 83; // 0x0
	public const RxOp CategoryWhiteSpace = 84; // 0x0
	public const RxOp NoCategoryWhiteSpace = 85; // 0x0
	public const RxOp CategoryWhiteSpaceReverse = 86; // 0x0
	public const RxOp NoCategoryWhiteSpaceReverse = 87; // 0x0
	public const RxOp CategoryEcmaWord = 88; // 0x0
	public const RxOp NoCategoryEcmaWord = 89; // 0x0
	public const RxOp CategoryEcmaWordReverse = 90; // 0x0
	public const RxOp NoCategoryEcmaWordReverse = 91; // 0x0
	public const RxOp CategoryEcmaWhiteSpace = 92; // 0x0
	public const RxOp NoCategoryEcmaWhiteSpace = 93; // 0x0
	public const RxOp CategoryEcmaWhiteSpaceReverse = 94; // 0x0
	public const RxOp NoCategoryEcmaWhiteSpaceReverse = 95; // 0x0
	public const RxOp CategoryUnicode = 96; // 0x0
	public const RxOp NoCategoryUnicode = 97; // 0x0
	public const RxOp CategoryUnicodeReverse = 98; // 0x0
	public const RxOp NoCategoryUnicodeReverse = 99; // 0x0
	public const RxOp CategoryUnicodeLetter = 100; // 0x0
	public const RxOp NoCategoryUnicodeLetter = 101; // 0x0
	public const RxOp CategoryUnicodeLetterReverse = 102; // 0x0
	public const RxOp NoCategoryUnicodeLetterReverse = 103; // 0x0
	public const RxOp CategoryUnicodeMark = 104; // 0x0
	public const RxOp NoCategoryUnicodeMark = 105; // 0x0
	public const RxOp CategoryUnicodeMarkReverse = 106; // 0x0
	public const RxOp NoCategoryUnicodeMarkReverse = 107; // 0x0
	public const RxOp CategoryUnicodeNumber = 108; // 0x0
	public const RxOp NoCategoryUnicodeNumber = 109; // 0x0
	public const RxOp CategoryUnicodeNumberReverse = 110; // 0x0
	public const RxOp NoCategoryUnicodeNumberReverse = 111; // 0x0
	public const RxOp CategoryUnicodeSeparator = 112; // 0x0
	public const RxOp NoCategoryUnicodeSeparator = 113; // 0x0
	public const RxOp CategoryUnicodeSeparatorReverse = 114; // 0x0
	public const RxOp NoCategoryUnicodeSeparatorReverse = 115; // 0x0
	public const RxOp CategoryUnicodePunctuation = 116; // 0x0
	public const RxOp NoCategoryUnicodePunctuation = 117; // 0x0
	public const RxOp CategoryUnicodePunctuationReverse = 118; // 0x0
	public const RxOp NoCategoryUnicodePunctuationReverse = 119; // 0x0
	public const RxOp CategoryUnicodeSymbol = 120; // 0x0
	public const RxOp NoCategoryUnicodeSymbol = 121; // 0x0
	public const RxOp CategoryUnicodeSymbolReverse = 122; // 0x0
	public const RxOp NoCategoryUnicodeSymbolReverse = 123; // 0x0
	public const RxOp CategoryUnicodeSpecials = 124; // 0x0
	public const RxOp NoCategoryUnicodeSpecials = 125; // 0x0
	public const RxOp CategoryUnicodeSpecialsReverse = 126; // 0x0
	public const RxOp NoCategoryUnicodeSpecialsReverse = 127; // 0x0
	public const RxOp CategoryUnicodeOther = 128; // 0x0
	public const RxOp NoCategoryUnicodeOther = 129; // 0x0
	public const RxOp CategoryUnicodeOtherReverse = 130; // 0x0
	public const RxOp NoCategoryUnicodeOtherReverse = 131; // 0x0
	public const RxOp CategoryGeneral = 132; // 0x0
	public const RxOp NoCategoryGeneral = 133; // 0x0
	public const RxOp CategoryGeneralReverse = 134; // 0x0
	public const RxOp NoCategoryGeneralReverse = 135; // 0x0
	public const RxOp Reference = 136; // 0x0
	public const RxOp ReferenceIgnoreCase = 137; // 0x0
	public const RxOp ReferenceReverse = 138; // 0x0
	public const RxOp ReferenceIgnoreCaseReverse = 139; // 0x0
	public const RxOp OpenGroup = 140; // 0x0
	public const RxOp CloseGroup = 141; // 0x0
	public const RxOp BalanceStart = 142; // 0x0
	public const RxOp Balance = 143; // 0x0
	public const RxOp IfDefined = 144; // 0x0
	public const RxOp Jump = 145; // 0x0
	public const RxOp SubExpression = 146; // 0x0
	public const RxOp Test = 147; // 0x0
	public const RxOp Branch = 148; // 0x0
	public const RxOp TestCharGroup = 149; // 0x0
	public const RxOp Anchor = 150; // 0x0
	public const RxOp AnchorReverse = 151; // 0x0
	public const RxOp Repeat = 152; // 0x0
	public const RxOp RepeatLazy = 153; // 0x0
	public const RxOp Until = 154; // 0x0
	public const RxOp FastRepeat = 155; // 0x0
	public const RxOp FastRepeatLazy = 156; // 0x0
	public const RxOp RepeatInfinite = 157; // 0x0
	public const RxOp RepeatInfiniteLazy = 158; // 0x0

}

// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionCollection : CollectionBase // TypeDefIndex: 1660
{
	// Methods
	public void .ctor(); // 0x10072F7BC
	public void Add(Expression e); // 0x10072C15C
	public Expression get_Item(int i); // 0x10072CE58
	public void set_Item(int i, Expression value); // 0x10072CF8C
	protected override void OnValidate(object o); // 0x100730360
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Expression // TypeDefIndex: 1661
{
	// Methods
	protected void .ctor(); // 0x10072E6CC
	public abstract void Compile(ICompiler cmp, bool reverse); // 0
	public abstract void GetWidth(out int min, out int max); // 0
	public int GetFixedWidth(); // 0x10072E240
	public virtual AnchorInfo GetAnchorInfo(bool reverse); // 0x10072FAF0
	public abstract bool IsComplex(); // 0
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class CompositeExpression : Expression // TypeDefIndex: 1662
{
	// Fields
	private ExpressionCollection expressions; // 0x10

	// Methods
	public void .ctor(); // 0x10072C0C8
	protected ExpressionCollection get_Expressions(); // 0x10072C13C
	protected void GetWidth(out int min, out int max, int count); // 0x10072CAD8
	public override bool IsComplex(); // 0x10072F7C4
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Group : CompositeExpression // TypeDefIndex: 1663
{
	// Methods
	public void .ctor(); // 0x10072E2FC
	public void AppendExpression(Expression e); // 0x100730364
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072E4BC
	public override void GetWidth(out int min, out int max); // 0x10073037C
	public override AnchorInfo GetAnchorInfo(bool reverse); // 0x1007306CC
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class RegularExpression : Group // TypeDefIndex: 1664
{
	// Fields
	private int group_count; // 0x18

	// Methods
	public void .ctor(); // 0x100731680
	public void set_GroupCount(int value); // 0x100732FC8
	public override void Compile(ICompiler cmp, bool reverse); // 0x1007352E0
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CapturingGroup : Group, IComparable // TypeDefIndex: 1665
{
	// Fields
	private int gid; // 0x18
	private string name; // 0x20

	// Methods
	public void .ctor(); // 0x10072D7DC
	public int get_Index(); // 0x10072DB3C
	public void set_Index(int value); // 0x10072E300
	public string get_Name(); // 0x10072E308
	public void set_Name(string value); // 0x10072E310
	public bool get_IsNamed(); // 0x10072DB44
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072E318
	public override bool IsComplex(); // 0x10072E584
	public int CompareTo(object other); // 0x10072E58C
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BalancingGroup : CapturingGroup // TypeDefIndex: 1666
{
	// Fields
	private CapturingGroup balance; // 0x28

	// Methods
	public void .ctor(); // 0x10072D7B4
	public void set_Balance(CapturingGroup value); // 0x10072D804
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072D80C
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class NonBacktrackingGroup : Group // TypeDefIndex: 1667
{
	// Methods
	public void .ctor(); // 0x100731010
	public override void Compile(ICompiler cmp, bool reverse); // 0x100731014
	public override bool IsComplex(); // 0x10073129C
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Repetition : CompositeExpression // TypeDefIndex: 1668
{
	// Fields
	private int min; // 0x18
	private int max; // 0x1C
	private bool lazy; // 0x20

	// Methods
	public void .ctor(int min, int max, bool lazy); // 0x100734B68
	public Expression get_Expression(); // 0x1007357EC
	public void set_Expression(Expression value); // 0x100734BB8
	public int get_Minimum(); // 0x100735808
	public override void Compile(ICompiler cmp, bool reverse); // 0x100735810
	public override void GetWidth(out int min, out int max); // 0x100735C30
	public override AnchorInfo GetAnchorInfo(bool reverse); // 0x100735CD8
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Assertion : CompositeExpression // TypeDefIndex: 1669
{
	// Methods
	public void .ctor(); // 0x10072CDFC
	public Expression get_TrueExpression(); // 0x10072CE3C
	public void set_TrueExpression(Expression value); // 0x10072CF68
	public Expression get_FalseExpression(); // 0x10072D0A4
	public void set_FalseExpression(Expression value); // 0x10072D0C0
	public override void GetWidth(out int min, out int max); // 0x10072D0E4
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CaptureAssertion : Assertion // TypeDefIndex: 1670
{
	// Fields
	private ExpressionAssertion alternate; // 0x18
	private CapturingGroup group; // 0x20
	private Literal literal; // 0x28

	// Methods
	public void .ctor(Literal l); // 0x10072DB54
	public void set_CapturingGroup(CapturingGroup value); // 0x10072DB7C
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072DB84
	public override bool IsComplex(); // 0x10072E11C
	private ExpressionAssertion get_Alternate(); // 0x10072E06C
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionAssertion : Assertion // TypeDefIndex: 1671
{
	// Fields
	private bool reverse; // 0x18
	private bool negate; // 0x19

	// Methods
	public void .ctor(); // 0x10072E2A8
	public void set_Reverse(bool value); // 0x10072FB7C
	public void set_Negate(bool value); // 0x10072FB84
	public Expression get_TestExpression(); // 0x10072FB8C
	public void set_TestExpression(Expression value); // 0x10072E2D8
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072FBA8
	public override bool IsComplex(); // 0x100730358
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Alternation : CompositeExpression // TypeDefIndex: 1672
{
	// Methods
	public void .ctor(); // 0x10072C0C4
	public ExpressionCollection get_Alternatives(); // 0x10072C134
	public void AddAlternative(Expression e); // 0x10072C144
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072C26C
	public override void GetWidth(out int min, out int max); // 0x10072CA88
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Literal : Expression // TypeDefIndex: 1673
{
	// Fields
	private string str; // 0x10
	private bool ignore; // 0x18

	// Methods
	public void .ctor(string str, bool ignore); // 0x100730ED4
	public static void CompileLiteral(string str, ICompiler cmp, bool ignore, bool reverse); // 0x10072D598
	public override void Compile(ICompiler cmp, bool reverse); // 0x100730F10
	public override void GetWidth(out int min, out int max); // 0x100730F2C
	public override AnchorInfo GetAnchorInfo(bool reverse); // 0x100730F68
	public override bool IsComplex(); // 0x100731008
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class PositionAssertion : Expression // TypeDefIndex: 1674
{
	// Fields
	private Position pos; // 0x10

	// Methods
	public void .ctor(Position pos); // 0x100733314
	public override void Compile(ICompiler cmp, bool reverse); // 0x100735110
	public override void GetWidth(out int min, out int max); // 0x100735214
	public override bool IsComplex(); // 0x100735220
	public override AnchorInfo GetAnchorInfo(bool revers); // 0x100735228
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Reference : Expression // TypeDefIndex: 1675
{
	// Fields
	private CapturingGroup group; // 0x10
	private bool ignore; // 0x18

	// Methods
	public void .ctor(bool ignore); // 0x10072D164
	public CapturingGroup get_CapturingGroup(); // 0x10072D460
	public void set_CapturingGroup(CapturingGroup value); // 0x10072D3E0
	public bool get_IgnoreCase(); // 0x10072D590
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072D468
	public override void GetWidth(out int min, out int max); // 0x1007352C8
	public override bool IsComplex(); // 0x1007352D8
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BackslashNumber : Reference // TypeDefIndex: 1676
{
	// Fields
	private string literal; // 0x20
	private bool ecma; // 0x28

	// Methods
	public void .ctor(bool ignore, bool ecma); // 0x10072D128
	public bool ResolveReference(string num_str, Hashtable groups); // 0x10072D190
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072D3F8
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CharacterClass : Expression // TypeDefIndex: 1677
{
	// Fields
	private static Interval upper_case_characters; // 0x0
	private bool negate; // 0x10
	private bool ignore; // 0x11
	private BitArray pos_cats; // 0x18
	private BitArray neg_cats; // 0x20
	private IntervalCollection intervals; // 0x28

	// Methods
	public void .ctor(bool negate, bool ignore); // 0x10072E60C
	public void .ctor(Category cat, bool negate); // 0x10072E6D4
	private static void .cctor(); // 0x10072E74C
	public void AddCategory(Category cat, bool negate); // 0x10072E718
	public void AddCharacter(char c); // 0x10072E7AC
	public void AddRange(char lo, char hi); // 0x10072E7B4
	public override void Compile(ICompiler cmp, bool reverse); // 0x10072E97C
	public override void GetWidth(out int min, out int max); // 0x10072F75C
	public override bool IsComplex(); // 0x10072F76C
	private static double GetIntervalCost(Interval i); // 0x10072F774
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class AnchorInfo // TypeDefIndex: 1678
{
	// Fields
	private Expression expr; // 0x10
	private Position pos; // 0x18
	private int offset; // 0x1C
	private string str; // 0x20
	private int width; // 0x28
	private bool ignore; // 0x2C

	// Methods
	public void .ctor(Expression expr, int width); // 0x10072CBD4
	public void .ctor(Expression expr, int offset, int width, string str, bool ignore); // 0x10072CC20
	public void .ctor(Expression expr, int offset, int width, Position pos); // 0x10072CC9C
	public int get_Offset(); // 0x10072CCF8
	public int get_Width(); // 0x10072CD00
	public int get_Length(); // 0x10072CD08
	public bool get_IsUnknownWidth(); // 0x10072CD1C
	public bool get_IsComplete(); // 0x10072CD28
	public string get_Substring(); // 0x10072CD60
	public bool get_IgnoreCase(); // 0x10072CD68
	public Position get_Position(); // 0x10072CD70
	public bool get_IsSubstring(); // 0x10072CD78
	public bool get_IsPosition(); // 0x10072CD88
	public Interval GetInterval(int start); // 0x10072CD98
}

// Namespace: System.Timers
public class ElapsedEventArgs : EventArgs // TypeDefIndex: 1679
{
	// Fields
	private DateTime time; // 0x10

	// Methods
	internal void .ctor(DateTime time); // 0x100735EF4
}

// Namespace: System.Timers
public class Timer : Component, ISupportInitialize // TypeDefIndex: 1680
{
	// Fields
	private double interval; // 0x30
	private bool autoReset; // 0x38
	private Timer timer; // 0x40
	private object _lock; // 0x48
	private ISynchronizeInvoke so; // 0x50
	private ElapsedEventHandler Elapsed; // 0x58

	// Methods
	public void .ctor(double interval); // 0x1007360AC
	public void add_Elapsed(ElapsedEventHandler value); // 0x100736358
	public void remove_Elapsed(ElapsedEventHandler value); // 0x100736438
	public void set_AutoReset(bool value); // 0x100736518
	public bool get_Enabled(); // 0x100736520
	public void set_Enabled(bool value); // 0x100736570
	public void set_Interval(double value); // 0x1007361DC
	public override ISite get_Site(); // 0x1007366FC
	public void Close(); // 0x100736704
	public void Start(); // 0x10073670C
	public void Stop(); // 0x100736714
	protected override void Dispose(bool disposing); // 0x10073671C
	private static void Callback(object state); // 0x100736750
}

// Namespace: System.Timers
public class TimersDescriptionAttribute : DescriptionAttribute // TypeDefIndex: 1681
{
	// Methods
	public void .ctor(string description); // 0x100736AE0
	public override string get_Description(); // 0x100736B58
}

// Namespace: System
public class UriBuilder // TypeDefIndex: 1682
{
	// Fields
	private string scheme; // 0x10
	private string host; // 0x18
	private int port; // 0x20
	private string path; // 0x28
	private string query; // 0x30
	private string fragment; // 0x38
	private string username; // 0x40
	private string password; // 0x48
	private Uri uri; // 0x50
	private bool modified; // 0x58

	// Methods
	public void .ctor(Uri uri); // 0x10073E674
	public void set_Host(string value); // 0x10073E7CC
	public Uri get_Uri(); // 0x10073E85C
	public override bool Equals(object rparam); // 0x10073E908
	public override int GetHashCode(); // 0x10073E9B4
	public override string ToString(); // 0x10073EA0C
}

// Namespace: System
public class Uri : ISerializable // TypeDefIndex: 1683
{
	// Fields
	private const int MaxUriLength = 32766; // 0x0
	private bool isUnixFilePath; // 0x10
	private string source; // 0x18
	private string scheme; // 0x20
	private string host; // 0x28
	private int port; // 0x30
	private string path; // 0x38
	private string query; // 0x40
	private string fragment; // 0x48
	private string userinfo; // 0x50
	private bool isUnc; // 0x58
	private bool isOpaquePart; // 0x59
	private bool isAbsoluteUri; // 0x5A
	private string[] segments; // 0x60
	private bool userEscaped; // 0x68
	private string cachedAbsoluteUri; // 0x70
	private string cachedToString; // 0x78
	private string cachedLocalPath; // 0x80
	private int cachedHashCode; // 0x88
	private static readonly string hexUpperChars; // 0x0
	public static readonly string SchemeDelimiter; // 0x8
	public static readonly string UriSchemeFile; // 0x10
	public static readonly string UriSchemeFtp; // 0x18
	public static readonly string UriSchemeGopher; // 0x20
	public static readonly string UriSchemeHttp; // 0x28
	public static readonly string UriSchemeHttps; // 0x30
	public static readonly string UriSchemeMailto; // 0x38
	public static readonly string UriSchemeNews; // 0x40
	public static readonly string UriSchemeNntp; // 0x48
	public static readonly string UriSchemeNetPipe; // 0x50
	public static readonly string UriSchemeNetTcp; // 0x58
	private static UriScheme[] schemes; // 0x60
	private UriParser parser; // 0x90
	private static Dictionary`2<string, int> <>f__switch$map1C; // 0x68
	private static Dictionary`2<string, int> <>f__switch$map1D; // 0x70
	private static Dictionary`2<string, int> <>f__switch$map1E; // 0x78
	private static Dictionary`2<string, int> <>f__switch$map1F; // 0x80
	private static Dictionary`2<string, int> <>f__switch$map20; // 0x88

	// Methods
	public void .ctor(string uriString); // 0x100736B60
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x100736C84
	public void .ctor(string uriString, UriKind uriKind); // 0x100736CFC
	private void .ctor(string uriString, UriKind uriKind, out bool success); // 0x100737084
	public void .ctor(string uriString, bool dontEscape); // 0x100736B68
	public void .ctor(Uri baseUri, string relativeUri); // 0x100738664
	private static void .cctor(); // 0x100739104
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x1007393F0
	private void Merge(Uri baseUri, string relativeUri); // 0x100738714
	public string get_AbsolutePath(); // 0x10073987C
	public string get_AbsoluteUri(); // 0x100739464
	public string get_Authority(); // 0x10073A1C4
	public string get_Fragment(); // 0x10073A334
	public string get_Host(); // 0x10073A358
	public UriHostNameType get_HostNameType(); // 0x10073A37C
	public bool get_IsDefaultPort(); // 0x10073A6D4
	public bool get_IsFile(); // 0x10073A624
	public bool get_IsLoopback(); // 0x10073A75C
	public bool get_IsUnc(); // 0x10073A978
	public string get_LocalPath(); // 0x10073A99C
	public string get_PathAndQuery(); // 0x10073AD44
	public int get_Port(); // 0x10073ADF0
	public string get_Query(); // 0x10073ADCC
	public string get_Scheme(); // 0x100739594
	public string get_UserInfo(); // 0x10073AE14
	public string get_DnsSafeHost(); // 0x10073AE38
	public bool get_IsAbsoluteUri(); // 0x100737074
	public string get_OriginalString(); // 0x10073AEA0
	public static UriHostNameType CheckHostName(string name); // 0x10073A51C
	internal static bool IsIPv4Address(string name); // 0x10073AF04
	internal static bool IsDomainAddress(string name); // 0x10073B058
	public static bool CheckSchemeName(string schemeName); // 0x10073B190
	private static bool IsAlpha(char c); // 0x10073B30C
	public override bool Equals(object comparant); // 0x10073B330
	private bool InternalEquals(Uri uri); // 0x10073B3FC
	public override int GetHashCode(); // 0x10073B61C
	public string GetLeftPart(UriPartial part); // 0x100739B4C
	public static int FromHex(char digit); // 0x10073C14C
	public static string HexEscape(char character); // 0x10073C1F4
	public static bool IsHexDigit(char digit); // 0x10073C348
	public static bool IsHexEncoding(string pattern, int index); // 0x10073C37C
	private void AppendQueryAndFragment(string result); // 0x10073C4C0
	public override string ToString(); // 0x10073C8BC
	protected static string EscapeString(string str); // 0x10073980C
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets); // 0x10073C9A0
	private void ParseUri(UriKind kind); // 0x100736EEC
	protected virtual string Unescape(string str); // 0x10073CDA8
	internal static string Unescape(string str, bool excludeSpecial); // 0x10073C6AC
	private void ParseAsWindowsUNC(string uriString); // 0x10073D1E8
	private string ParseAsWindowsAbsoluteFilePath(string uriString); // 0x10073D3AC
	private void ParseAsUnixAbsoluteFilePath(string uriString); // 0x10073D4FC
	private void Parse(UriKind kind, string uriString); // 0x10073CCE8
	private string ParseNoExceptions(UriKind kind, string uriString); // 0x100737250
	private static bool CompactEscaped(string scheme); // 0x10073B7D0
	private static string Reduce(string path, bool compact_escaped); // 0x10073B998
	private static char HexUnescapeMultiByte(string pattern, int index, out char surrogate); // 0x10073CE10
	internal static string GetSchemeDelimiter(string scheme); // 0x10073D780
	internal static int GetDefaultPort(string scheme); // 0x10073A2BC
	private string GetOpaqueWiseSchemeDelimiter(); // 0x10073B748
	private static bool IsPredefinedScheme(string scheme); // 0x1007395B8
	private UriParser get_Parser(); // 0x10073D6C8
	private static bool NeedToEscapeDataChar(char b); // 0x10073DA08
	public static string EscapeDataString(string stringToEscape); // 0x10073DA68
	public static bool TryCreate(string uriString, UriKind uriKind, out Uri result); // 0x10073DD98
	public static string UnescapeDataString(string stringToUnescape); // 0x10073DE28
	private static int GetInt(byte b); // 0x10073E4F0
	private static int GetChar(string str, int offset, int length); // 0x10073E3CC
	private static char[] GetChars(MemoryStream b, Encoding e); // 0x10073E304
	private void EnsureAbsoluteUri(); // 0x100739AD4
	public static bool op_Equality(Uri u1, Uri u2); // 0x100739588
	public static bool op_Inequality(Uri u1, Uri u2); // 0x10073E530
}

// Namespace: 
private struct UriScheme // TypeDefIndex: 1684
{
	// Fields
	public string scheme; // 0x10
	public string delimiter; // 0x18
	public int defaultPort; // 0x20

	// Methods
	public void .ctor(string s, string d, int p); // 0x10073E5B4
}

// Namespace: System
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1685
{
	// Methods
	public void .ctor(); // 0x10073ECEC
	public void .ctor(string message); // 0x10073707C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10073ED50
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x10073ED58
}

// Namespace: System
public sealed class UriHostNameType : Enum // TypeDefIndex: 1686
{
	// Fields
	public int value__; // 0x10
	public const UriHostNameType Unknown = 0; // 0x0
	public const UriHostNameType Basic = 1; // 0x0
	public const UriHostNameType Dns = 2; // 0x0
	public const UriHostNameType IPv4 = 3; // 0x0
	public const UriHostNameType IPv6 = 4; // 0x0

}

// Namespace: System
public sealed class UriKind : Enum // TypeDefIndex: 1687
{
	// Fields
	public int value__; // 0x10
	public const UriKind RelativeOrAbsolute = 0; // 0x0
	public const UriKind Absolute = 1; // 0x0
	public const UriKind Relative = 2; // 0x0

}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1688
{
	// Fields
	private static object lock_object; // 0x0
	private static Hashtable table; // 0x8
	internal string scheme_name; // 0x10
	private int default_port; // 0x18
	private static readonly Regex uri_regex; // 0x10
	private static readonly Regex auth_regex; // 0x18

	// Methods
	protected void .ctor(); // 0x10073ED60
	private static void .cctor(); // 0x10073ED68
	protected internal virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError); // 0x10073EE3C
	protected virtual void OnRegister(string schemeName, int defaultPort); // 0x10073EF54
	internal void set_SchemeName(string value); // 0x10073EF58
	internal int get_DefaultPort(); // 0x10073DA00
	internal void set_DefaultPort(int value); // 0x10073EF60
	private static void CreateDefaults(); // 0x10073EF68
	private static void InternalRegister(Hashtable table, UriParser uriParser, string schemeName, int defaultPort); // 0x10073F320
	internal static UriParser GetParser(string schemeName); // 0x10073D8FC
}

// Namespace: System
public sealed class UriPartial : Enum // TypeDefIndex: 1689
{
	// Fields
	public int value__; // 0x10
	public const UriPartial Scheme = 0; // 0x0
	public const UriPartial Authority = 1; // 0x0
	public const UriPartial Path = 2; // 0x0
	public const UriPartial Query = 3; // 0x0

}

// Namespace: System
public class UriTypeConverter : TypeConverter // TypeDefIndex: 1690
{
	// Methods
	public void .ctor(); // 0x10073F48C
	private bool CanConvert(Type type); // 0x10073F494
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType); // 0x10073F58C
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType); // 0x10073F604
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value); // 0x10073F618
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType); // 0x10073F7F8
	public override bool IsValid(ITypeDescriptorContext context, object value); // 0x10073FC80
}

// Namespace: System.ComponentModel
public sealed class RefreshEventHandler : MulticastDelegate // TypeDefIndex: 1691
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10069C9E8
	public virtual void Invoke(RefreshEventArgs e); // 0x10069C9F8
	public virtual IAsyncResult BeginInvoke(RefreshEventArgs e, AsyncCallback callback, object object); // 0x10069CA94
	public virtual void EndInvoke(IAsyncResult result); // 0x10069CAE4
}

// Namespace: System.Net
public sealed class BindIPEndPoint : MulticastDelegate // TypeDefIndex: 1692
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006B46FC
	public virtual IPEndPoint Invoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount); // 0x1006B470C
	public virtual IAsyncResult BeginInvoke(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount, AsyncCallback callback, object object); // 0x1006B47E0
	public virtual IPEndPoint EndInvoke(IAsyncResult result); // 0x1006B48AC
}

// Namespace: System.Net
public sealed class HttpContinueDelegate : MulticastDelegate // TypeDefIndex: 1693
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006CAC40
	public virtual void Invoke(int StatusCode, WebHeaderCollection httpHeaders); // 0x1006CAC50
	public virtual IAsyncResult BeginInvoke(int StatusCode, WebHeaderCollection httpHeaders, AsyncCallback callback, object object); // 0x1006CACE0
	public virtual void EndInvoke(IAsyncResult result); // 0x1006CADA4
}

// Namespace: System.Net.Security
public sealed class LocalCertificateSelectionCallback : MulticastDelegate // TypeDefIndex: 1694
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006D8664
	public virtual X509Certificate Invoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers); // 0x1006D8674
	public virtual IAsyncResult BeginInvoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers, AsyncCallback callback, object object); // 0x1006D8780
	public virtual X509Certificate EndInvoke(IAsyncResult result); // 0x1006D87E0
}

// Namespace: System.Net.Security
public sealed class RemoteCertificateValidationCallback : MulticastDelegate // TypeDefIndex: 1695
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006D87EC
	public virtual bool Invoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors); // 0x1006D87FC
	public virtual IAsyncResult BeginInvoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, object object); // 0x1006D88F4
	public virtual bool EndInvoke(IAsyncResult result); // 0x1006D89D0
}

// Namespace: System.Text.RegularExpressions
internal sealed class EvalDelegate : MulticastDelegate // TypeDefIndex: 1696
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007185F8
	public virtual bool Invoke(RxInterpreter interp, int strpos, int strpos_result); // 0x100718608
	public virtual IAsyncResult BeginInvoke(RxInterpreter interp, int strpos, int strpos_result, AsyncCallback callback, object object); // 0x1007186DC
	public virtual bool EndInvoke(int strpos_result, IAsyncResult result); // 0x1007187B8
}

// Namespace: System.Timers
public sealed class ElapsedEventHandler : MulticastDelegate // TypeDefIndex: 1697
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100735F74
	public virtual void Invoke(object sender, ElapsedEventArgs e); // 0x100735F84
	public virtual IAsyncResult BeginInvoke(object sender, ElapsedEventArgs e, AsyncCallback callback, object object); // 0x100736044
	public virtual void EndInvoke(IAsyncResult result); // 0x1007360A0
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 1698
{
	// Fields
	internal static $ArrayType$16 $$field-1; // 0x0
	internal static $ArrayType$128 $$field-3; // 0x10
	internal static $ArrayType$12 $$field-4; // 0x90
	internal static $ArrayType$12 $$field-5; // 0x9C

}

// Namespace: 
private struct $ArrayType$16 // TypeDefIndex: 1699
{
}

// Namespace: 
private struct $ArrayType$128 // TypeDefIndex: 1700
{
}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 1701
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1702
{
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 1703
{
	// Methods
	public void .ctor(); // 0x1005F838C
}

// Namespace: Mono.Xml.Schema
internal class XsdIdentitySelector // TypeDefIndex: 1704
{
	// Fields
	private XsdIdentityPath[] selectorPaths; // 0x10
	private ArrayList fields; // 0x18
	private XsdIdentityField[] cachedFields; // 0x20

	// Methods
	public void .ctor(XmlSchemaXPath selector); // 0x1005DB95C
	public XsdIdentityPath[] get_Paths(); // 0x1005DB9EC
	public void AddField(XsdIdentityField field); // 0x1005DB9F4
	public XsdIdentityField[] get_Fields(); // 0x1005DBA5C
}

// Namespace: Mono.Xml.Schema
internal class XsdIdentityField // TypeDefIndex: 1705
{
	// Fields
	private XsdIdentityPath[] fieldPaths; // 0x10
	private int index; // 0x18

	// Methods
	public void .ctor(XmlSchemaXPath field, int index); // 0x1005DB8B8
	public XsdIdentityPath[] get_Paths(); // 0x1005DB908
}

// Namespace: Mono.Xml.Schema
internal class XsdIdentityPath // TypeDefIndex: 1706
{
	// Fields
	public XsdIdentityStep[] OrderedSteps; // 0x10
	public bool Descendants; // 0x18

	// Methods
	public void .ctor(); // 0x1005DB910
	public bool get_IsAttribute(); // 0x1005DB918
}

// Namespace: Mono.Xml.Schema
internal class XsdIdentityStep // TypeDefIndex: 1707
{
	// Fields
	public bool IsCurrent; // 0x10
	public bool IsAttribute; // 0x11
	public bool IsAnyName; // 0x12
	public string NsName; // 0x18
	public string Name; // 0x20
	public string Namespace; // 0x28

	// Methods
	public void .ctor(); // 0x1005DBB3C
}

// Namespace: Mono.Xml.Schema
internal class XsdKeyEntryField // TypeDefIndex: 1708
{
	// Fields
	private XsdKeyEntry entry; // 0x10
	private XsdIdentityField field; // 0x18
	public bool FieldFound; // 0x20
	public int FieldLineNumber; // 0x24
	public int FieldLinePosition; // 0x28
	public bool FieldHasLineInfo; // 0x2C
	public XsdAnySimpleType FieldType; // 0x30
	public object Identity; // 0x38
	public bool IsXsiNil; // 0x40
	public int FieldFoundDepth; // 0x44
	public XsdIdentityPath FieldFoundPath; // 0x48
	public bool Consuming; // 0x50
	public bool Consumed; // 0x51

	// Methods
	public void .ctor(XsdKeyEntry entry, XsdIdentityField field); // 0x1005DCD2C
	public bool SetIdentityField(object identity, bool isXsiNil, XsdAnySimpleType type, int depth, IXmlLineInfo li); // 0x1005DDA10
	internal XsdIdentityPath Matches(bool matchesAttr, object sender, XmlNameTable nameTable, ArrayList qnameStack, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, IXmlLineInfo lineInfo, int depth, string attrName, string attrNS, object attrValue); // 0x1005DD4A8
	private void FillAttributeFieldValue(object sender, XmlNameTable nameTable, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, object identity, IXmlLineInfo lineInfo, int depth); // 0x1005DDF28
}

// Namespace: Mono.Xml.Schema
internal class XsdKeyEntryFieldCollection : CollectionBase // TypeDefIndex: 1709
{
	// Methods
	public void .ctor(); // 0x1005DCD1C
	public XsdKeyEntryField get_Item(int i); // 0x1005DCC0C
	public int Add(XsdKeyEntryField value); // 0x1005DCD64
}

// Namespace: Mono.Xml.Schema
internal class XsdKeyEntry // TypeDefIndex: 1710
{
	// Fields
	public int StartDepth; // 0x10
	public int SelectorLineNumber; // 0x14
	public int SelectorLinePosition; // 0x18
	public bool SelectorHasLineInfo; // 0x1C
	public XsdKeyEntryFieldCollection KeyFields; // 0x20
	public bool KeyRefFound; // 0x28
	public XsdKeyTable OwnerSequence; // 0x30
	private bool keyFound; // 0x38

	// Methods
	public void .ctor(XsdKeyTable keyseq, int depth, IXmlLineInfo li); // 0x1005DC87C
	public bool get_KeyFound(); // 0x1005DCB88
	private void Init(XsdKeyTable keyseq, int depth, IXmlLineInfo li); // 0x1005DC8C4
	public bool CompareIdentity(XsdKeyEntry other); // 0x1005DCE74
	public void ProcessMatch(bool isAttribute, ArrayList qnameStack, object sender, XmlNameTable nameTable, string sourceUri, object schemaType, IXmlNamespaceResolver nsResolver, IXmlLineInfo li, int depth, string attrName, string attrNS, object attrValue, bool isXsiNil, ArrayList currentKeyFieldConsumers); // 0x1005DCFA0
}

// Namespace: Mono.Xml.Schema
internal class XsdKeyEntryCollection : CollectionBase // TypeDefIndex: 1711
{
	// Methods
	public void .ctor(); // 0x1005DDD00
	public void Add(XsdKeyEntry entry); // 0x1005DDD08
	public XsdKeyEntry get_Item(int i); // 0x1005DDE18
}

// Namespace: Mono.Xml.Schema
internal class XsdKeyTable // TypeDefIndex: 1712
{
	// Fields
	public readonly bool alwaysTrue; // 0x10
	private XsdIdentitySelector selector; // 0x18
	private XmlSchemaIdentityConstraint source; // 0x20
	private XmlQualifiedName qname; // 0x28
	private XmlQualifiedName refKeyName; // 0x30
	public XsdKeyEntryCollection Entries; // 0x38
	public XsdKeyEntryCollection FinishedEntries; // 0x40
	public int StartDepth; // 0x48
	public XsdKeyTable ReferencedKey; // 0x50

	// Methods
	public void .ctor(XmlSchemaIdentityConstraint source); // 0x1005DE3E8
	public XmlSchemaIdentityConstraint get_SourceSchemaIdentity(); // 0x1005DDA08
	public XsdIdentitySelector get_Selector(); // 0x1005DCD24
	public void Reset(XmlSchemaIdentityConstraint source); // 0x1005DE488
	public XsdIdentityPath SelectorMatches(ArrayList qnameStack, int depth); // 0x1005DE548
}

// Namespace: Mono.Xml.Schema
internal class XsdParticleStateManager // TypeDefIndex: 1713
{
	// Fields
	private Hashtable table; // 0x10
	private XmlSchemaContentProcessing processContents; // 0x18
	public XmlSchemaElement CurrentElement; // 0x20
	public Stack ContextStack; // 0x28
	public XsdValidationContext Context; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map2; // 0x0

	// Methods
	public void .ctor(); // 0x1005DF6A8
	public XmlSchemaContentProcessing get_ProcessContents(); // 0x1005DF75C
	public void PushContext(); // 0x1005DF764
	public void PopContext(); // 0x1005DF7DC
	internal void SetProcessContents(XmlSchemaContentProcessing value); // 0x1005D6F20
	public XsdValidationState Create(XmlSchemaObject xsobj); // 0x1005D6F28
	internal XsdValidationState MakeSequence(XsdValidationState head, XsdValidationState rest); // 0x1005D8600
	private XsdElementValidationState AddElement(XmlSchemaElement element); // 0x1005DF868
	private XsdSequenceValidationState AddSequence(XmlSchemaSequence sequence); // 0x1005DF8D8
	private XsdChoiceValidationState AddChoice(XmlSchemaChoice choice); // 0x1005DF94C
	private XsdAllValidationState AddAll(XmlSchemaAll all); // 0x1005DF9BC
	private XsdAnyValidationState AddAny(XmlSchemaAny any); // 0x1005DFA2C
	private XsdEmptyValidationState AddEmpty(); // 0x1005DFA9C
}

// Namespace: Mono.Xml.Schema
internal abstract class XsdValidationState // TypeDefIndex: 1714
{
	// Fields
	private static XsdInvalidValidationState invalid; // 0x0
	private int occured; // 0x10
	private readonly XsdParticleStateManager manager; // 0x18

	// Methods
	public void .ctor(XsdParticleStateManager manager); // 0x1005DFF24
	private static void .cctor(); // 0x1005ED5C8
	public static XsdInvalidValidationState get_Invalid(); // 0x1005E038C
	public abstract XsdValidationState EvaluateStartElement(string localName, string ns); // 0
	public abstract bool EvaluateEndElement(); // 0
	internal abstract bool EvaluateIsEmptiable(); // 0
	public XsdParticleStateManager get_Manager(); // 0x1005E03F4
	public int get_Occured(); // 0x1005E03FC
	internal int get_OccuredInternal(); // 0x1005E0410
	internal void set_OccuredInternal(int value); // 0x1005E0418
}

// Namespace: Mono.Xml.Schema
internal class XsdElementValidationState : XsdValidationState // TypeDefIndex: 1715
{
	// Fields
	private readonly XmlSchemaElement element; // 0x20

	// Methods
	public void .ctor(XmlSchemaElement element, XsdParticleStateManager manager); // 0x1005D99C0
	private string get_Name(); // 0x1005D9A44
	private string get_NS(); // 0x1005D9A70
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005D9A9C
	private XsdValidationState CheckOccurence(XmlSchemaElement maybeSubstituted); // 0x1005D9D38
	public override bool EvaluateEndElement(); // 0x1005D9F10
	internal override bool EvaluateIsEmptiable(); // 0x1005D9F5C
}

// Namespace: Mono.Xml.Schema
internal class XsdSequenceValidationState : XsdValidationState // TypeDefIndex: 1716
{
	// Fields
	private readonly XmlSchemaSequence seq; // 0x20
	private int current; // 0x28
	private XsdValidationState currentAutomata; // 0x30
	private bool emptiable; // 0x38

	// Methods
	public void .ctor(XmlSchemaSequence sequence, XsdParticleStateManager manager); // 0x1005DFE9C
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005DFF50
	public override bool EvaluateEndElement(); // 0x1005E0420
	internal override bool EvaluateIsEmptiable(); // 0x1005E0814
}

// Namespace: Mono.Xml.Schema
internal class XsdChoiceValidationState : XsdValidationState // TypeDefIndex: 1717
{
	// Fields
	private readonly XmlSchemaChoice choice; // 0x20
	private bool emptiable; // 0x28
	private bool emptiableComputed; // 0x29

	// Methods
	public void .ctor(XmlSchemaChoice choice, XsdParticleStateManager manager); // 0x1005D81C4
	public override XsdValidationState EvaluateStartElement(string localName, string ns); // 0x1005D8248
	public override bool EvaluateEndElement(); // 0x1005D86B4
	internal override bool EvaluateIsEmptiable(); // 0x1005D88D0
}

// Namespace: Mono.Xml.Schema
internal class XsdAllValidationState : XsdValidationState // TypeDefIndex: 1718
{
	// Fields
	private readonly XmlSchemaAll all; // 0x20
	private ArrayList consumed; // 0x28

	// Methods
	public void .ctor(XmlSchemaAll all, XsdParticleStateManager manager); // 0x1005D5D28
	public override XsdValidationState EvaluateStartElement(string localName, string ns); // 0x1005D5DCC
	public override bool EvaluateEndElement(); // 0x1005D604C
	internal override bool EvaluateIsEmptiable(); // 0x1005D6334
}

// Namespace: Mono.Xml.Schema
internal class XsdAnyValidationState : XsdValidationState // TypeDefIndex: 1719
{
	// Fields
	private readonly XmlSchemaAny any; // 0x20

	// Methods
	public void .ctor(XmlSchemaAny any, XsdParticleStateManager manager); // 0x1005D6A3C
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005D6AC0
	private bool MatchesNamespace(string ns); // 0x1005D6CB8
	public override bool EvaluateEndElement(); // 0x1005D7244
	internal override bool EvaluateIsEmptiable(); // 0x1005D7290
}

// Namespace: Mono.Xml.Schema
internal class XsdAppendedValidationState : XsdValidationState // TypeDefIndex: 1720
{
	// Fields
	private XsdValidationState head; // 0x20
	private XsdValidationState rest; // 0x28

	// Methods
	public void .ctor(XsdParticleStateManager manager, XsdValidationState head, XsdValidationState rest); // 0x1005D73D8
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005D7468
	public override bool EvaluateEndElement(); // 0x1005D7634
	internal override bool EvaluateIsEmptiable(); // 0x1005D7724
}

// Namespace: Mono.Xml.Schema
internal class XsdEmptyValidationState : XsdValidationState // TypeDefIndex: 1721
{
	// Methods
	public void .ctor(XsdParticleStateManager manager); // 0x1005DA0A4
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005DA11C
	public override bool EvaluateEndElement(); // 0x1005DA180
	internal override bool EvaluateIsEmptiable(); // 0x1005DA188
}

// Namespace: Mono.Xml.Schema
internal class XsdInvalidValidationState : XsdValidationState // TypeDefIndex: 1722
{
	// Methods
	internal void .ctor(XsdParticleStateManager manager); // 0x1005DC7F0
	public override XsdValidationState EvaluateStartElement(string name, string ns); // 0x1005DC868
	public override bool EvaluateEndElement(); // 0x1005DC86C
	internal override bool EvaluateIsEmptiable(); // 0x1005DC874
}

// Namespace: Mono.Xml.Schema
internal class XsdValidatingReader : XmlReader, IHasXmlParserContext, IHasXmlSchemaInfo, IXmlLineInfo // TypeDefIndex: 1723
{
	// Fields
	private static readonly XmlSchemaAttribute[] emptyAttributeArray; // 0x0
	private XmlReader reader; // 0x20
	private XmlResolver resolver; // 0x28
	private IHasXmlSchemaInfo sourceReaderSchemaInfo; // 0x30
	private IXmlLineInfo readerLineInfo; // 0x38
	private ValidationType validationType; // 0x40
	private XmlSchemaSet schemas; // 0x48
	private bool namespaces; // 0x50
	private bool validationStarted; // 0x51
	private bool checkIdentity; // 0x52
	private XsdIDManager idManager; // 0x58
	private bool checkKeyConstraints; // 0x60
	private ArrayList keyTables; // 0x68
	private ArrayList currentKeyFieldConsumers; // 0x70
	private ArrayList tmpKeyrefPool; // 0x78
	private ArrayList elementQNameStack; // 0x80
	private XsdParticleStateManager state; // 0x88
	private int skipValidationDepth; // 0x90
	private int xsiNilDepth; // 0x94
	private StringBuilder storedCharacters; // 0x98
	private bool shouldValidateCharacters; // 0xA0
	private XmlSchemaAttribute[] defaultAttributes; // 0xA8
	private int currentDefaultAttribute; // 0xB0
	private ArrayList defaultAttributesCache; // 0xB8
	private bool defaultAttributeConsumed; // 0xC0
	private object currentAttrType; // 0xC8
	public ValidationEventHandler ValidationEventHandler; // 0xD0
	private static Dictionary`2<string, int> <>f__switch$map3; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map4; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x18

	// Methods
	public void .ctor(XmlReader reader); // 0x1005E2100
	private static void .cctor(); // 0x1005E22C0
	private XsdValidationContext get_Context(); // 0x1005E2330
	internal ArrayList get_CurrentKeyFieldConsumers(); // 0x1005E234C
	public int get_XsiNilDepth(); // 0x1005E23B8
	public void set_XmlResolver(XmlResolver value); // 0x1005E23C0
	public void set_Schemas(XmlSchemaSet value); // 0x1005E23C8
	public object get_SchemaType(); // 0x1005E2450
	private object get_SourceReaderSchemaType(); // 0x1005E272C
	public ValidationType get_ValidationType(); // 0x1005E28B8
	public void set_ValidationType(ValidationType value); // 0x1005E28C0
	public override int get_AttributeCount(); // 0x1005E2948
	public override string get_BaseURI(); // 0x1005E29AC
	public override bool get_CanResolveEntity(); // 0x1005E2A00
	public override int get_Depth(); // 0x1005E2A54
	public override bool get_EOF(); // 0x1005E2B08
	public override bool get_HasValue(); // 0x1005E2B5C
	public override bool get_IsDefault(); // 0x1005E2BCC
	public override bool get_IsEmptyElement(); // 0x1005E2C3C
	public override string get_Item(string name); // 0x1005E2CAC
	public override string get_Item(string localName, string ns); // 0x1005E2D08
	public int get_LineNumber(); // 0x1005E2D6C
	public int get_LinePosition(); // 0x1005E2E6C
	public override string get_LocalName(); // 0x1005E2F70
	public override string get_Name(); // 0x1005E3084
	public override string get_NamespaceURI(); // 0x1005E3254
	public override XmlNameTable get_NameTable(); // 0x1005E3360
	public override XmlNodeType get_NodeType(); // 0x1005E33B4
	public XmlParserContext get_ParserContext(); // 0x1005E3430
	internal XmlNamespaceManager get_NamespaceManager(); // 0x1005E34A0
	public override string get_Prefix(); // 0x1005E34E4
	public override ReadState get_ReadState(); // 0x1005E362C
	public override string get_Value(); // 0x1005E3680
	public override string get_XmlLang(); // 0x1005E376C
	public override XmlSpace get_XmlSpace(); // 0x1005E39C0
	private void HandleError(string error); // 0x1005E3B54
	private void HandleError(string error, Exception innerException); // 0x1005E3B60
	private void HandleError(string error, Exception innerException, bool isWarning); // 0x1005E3B68
	private void HandleError(XmlSchemaValidationException schemaException); // 0x1005E3D40
	private void HandleError(XmlSchemaValidationException schemaException, bool isWarning); // 0x1005E3C44
	private XmlSchemaElement FindElement(string name, string ns); // 0x1005E3EA8
	private XmlSchemaType FindType(XmlQualifiedName qname); // 0x1005E3F50
	private void ValidateStartElementParticle(); // 0x1005E3FC8
	private void ValidateEndElementParticle(); // 0x1005E42F4
	private void ValidateCharacters(); // 0x1005E44A8
	private void ValidateEndSimpleContent(); // 0x1005E45B0
	private void ValidateEndSimpleContentCore(); // 0x1005E45F4
	private void AssessStringValid(XmlSchemaSimpleType st, XmlSchemaDatatype dt, string value); // 0x1005E4ACC
	private void ValidateRestrictedSimpleTypeValue(XmlSchemaSimpleType st, XmlSchemaDatatype dt, string normalized); // 0x1005E50B0
	private object GetXsiType(string name); // 0x1005E57F0
	private void AssessLocalTypeDerivationOK(object xsiType, object baseType, XmlSchemaDerivationMethod flag); // 0x1005E5C04
	private void AssessStartElementSchemaValidity(); // 0x1005E61E8
	private void AssessElementLocallyValidElement(string xsiNilValue); // 0x1005E6F3C
	private void AssessStartElementLocallyValidType(object schemaType); // 0x1005E6AD4
	private void AssessElementLocallyValidComplexType(XmlSchemaComplexType cType); // 0x1005E7A34
	private void AssessAttributeLocallyValid(XmlSchemaAttribute attr); // 0x1005E8490
	private void AssessAttributeLocallyValidUse(XmlSchemaAttribute attr); // 0x1005E83C4
	private void AssessEndElementSchemaValidity(); // 0x1005E8AB0
	private void ValidateEndElementKeyConstraints(); // 0x1005E8B3C
	private void ValidateKeySelectors(); // 0x1005E74E8
	private void ValidateKeyFields(); // 0x1005E7840
	private void ProcessKeyEntry(XsdKeyEntry entry); // 0x1005E9494
	private XsdKeyTable CreateNewKeyTable(XmlSchemaIdentityConstraint ident); // 0x1005E93B4
	private void ValidateSimpleContentIdentity(XmlSchemaDatatype dt, string value); // 0x1005E4C6C
	private void EndIdentityValidation(XsdKeyTable seq); // 0x1005E8F78
	private void EndKeyrefValidation(XsdKeyTable seq, XmlSchemaIdentityConstraint targetIdent); // 0x1005E9B64
	public override void Close(); // 0x1005EA09C
	public override string GetAttribute(string name); // 0x1005EA0F0
	private XmlQualifiedName SplitQName(string name); // 0x1005EA238
	public override string GetAttribute(string localName, string ns); // 0x1005EA410
	private string GetDefaultAttribute(string localName, string ns); // 0x1005EA374
	private int FindDefaultAttribute(string localName, string ns); // 0x1005E387C
	public bool HasLineInfo(); // 0x1005EA534
	public override string LookupNamespace(string prefix); // 0x1005EA638
	public override void MoveToAttribute(int i); // 0x1005EA6A0
	public override bool MoveToAttribute(string name); // 0x1005EA8C0
	public override bool MoveToAttribute(string localName, string ns); // 0x1005EAA2C
	private bool MoveToDefaultAttribute(string localName, string ns); // 0x1005EA9F4
	public override bool MoveToElement(); // 0x1005EAB6C
	public override bool MoveToFirstAttribute(); // 0x1005EABD4
	public override bool MoveToNextAttribute(); // 0x1005EAD24
	private XmlSchema ReadExternalSchema(string uri); // 0x1005EAE60
	private void ExamineAdditionalSchema(); // 0x1005EB4FC
	public override bool Read(); // 0x1005ECD70
	public override bool ReadAttributeValue(); // 0x1005ED474
	public override void ResolveEntity(); // 0x1005ED500
}

// Namespace: Mono.Xml.Schema
internal class XsdValidationContext // TypeDefIndex: 1724
{
	// Fields
	private object xsi_type; // 0x10
	internal XsdValidationState State; // 0x18
	private Stack element_stack; // 0x20

	// Methods
	public void .ctor(); // 0x1005ED558
	public object get_XsiType(); // 0x1005E6F34
	public void set_XsiType(object value); // 0x1005E41A8
	public XmlSchemaElement get_Element(); // 0x1005E49B0
	public void PushCurrentElement(XmlSchemaElement element); // 0x1005E4290
	public void PopCurrentElement(); // 0x1005E4454
	public object get_ActualType(); // 0x1005E269C
	public bool get_IsInvalid(); // 0x1005E4220
	public object Clone(); // 0x1005ED5C0
	public void EvaluateStartElement(string localName, string ns); // 0x1005E41B0
	public bool EvaluateEndElement(); // 0x1005E4400
}

// Namespace: Mono.Xml.Schema
internal class XsdIDManager // TypeDefIndex: 1725
{
	// Fields
	private Hashtable idList; // 0x10
	private ArrayList missingIDReferences; // 0x18
	private string thisElementId; // 0x20

	// Methods
	public void .ctor(); // 0x1005DBBB4
	private ArrayList get_MissingIDReferences(); // 0x1005DBC1C
	public void OnStartElement(); // 0x1005DBC88
	public string AssessEachAttributeIdentityConstraint(XmlSchemaDatatype dt, object parsedValue, string elementName); // 0x1005DBC90
	public bool HasMissingIDReferences(); // 0x1005DC028
	public string GetMissingIDString(); // 0x1005DC084
}

// Namespace: Mono.Xml.Schema
internal class XsdWildcard // TypeDefIndex: 1726
{
	// Fields
	private XmlSchemaObject xsobj; // 0x10
	public XmlSchemaContentProcessing ResolvedProcessing; // 0x18
	public string TargetNamespace; // 0x20
	public bool SkipCompile; // 0x28
	public bool HasValueAny; // 0x29
	public bool HasValueLocal; // 0x2A
	public bool HasValueOther; // 0x2B
	public bool HasValueTargetNamespace; // 0x2C
	public StringCollection ResolvedNamespaces; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x0

	// Methods
	public void .ctor(XmlSchemaObject wildcard); // 0x1005ED638
	private void Reset(); // 0x1005ED664
	public void Compile(string nss, ValidationEventHandler h, XmlSchema schema); // 0x1005ED6C8
	public bool ExamineAttributeWildcardIntersection(XmlSchemaAny other, ValidationEventHandler h, XmlSchema schema); // 0x1005EDC40
	public bool ValidateWildcardAllowsNamespaceName(string ns, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x1005EE190
	internal void ValidateWildcardSubset(XsdWildcard other, ValidationEventHandler h, XmlSchema schema); // 0x1005EE3CC
	internal bool ValidateWildcardSubset(XsdWildcard other, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x1005EE3D4
}

// Namespace: Mono.Xml
internal interface IHasXmlParserContext // TypeDefIndex: 1727
{
	// Methods
	public abstract XmlParserContext get_ParserContext(); // 0
}

// Namespace: Mono.Xml
internal interface IHasXmlSchemaInfo // TypeDefIndex: 1728
{
	// Methods
	public abstract object get_SchemaType(); // 0
}

// Namespace: System.Xml
public sealed class ConformanceLevel : Enum // TypeDefIndex: 1729
{
	// Fields
	public int value__; // 0x10
	public const ConformanceLevel Auto = 0; // 0x0
	public const ConformanceLevel Fragment = 1; // 0x0
	public const ConformanceLevel Document = 2; // 0x0

}

// Namespace: Mono.Xml
internal class DTDAutomataFactory // TypeDefIndex: 1730
{
	// Fields
	private DTDObjectModel root; // 0x10
	private Hashtable choiceTable; // 0x18
	private Hashtable sequenceTable; // 0x20

	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005C9EAC
	public DTDChoiceAutomata Choice(DTDAutomata left, DTDAutomata right); // 0x1005C9A4C
	public DTDSequenceAutomata Sequence(DTDAutomata left, DTDAutomata right); // 0x1005C9CC4
}

// Namespace: Mono.Xml
internal abstract class DTDAutomata // TypeDefIndex: 1731
{
	// Fields
	private DTDObjectModel root; // 0x10

	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005C85E8
	public DTDObjectModel get_Root(); // 0x1005C9800
	public DTDAutomata MakeChoice(DTDAutomata other); // 0x1005C9808
	public DTDAutomata MakeSequence(DTDAutomata other); // 0x1005C9C14
	public abstract DTDAutomata TryStartElement(string name); // 0
	public virtual DTDAutomata TryEndElement(); // 0x1005C9E8C
	public virtual bool get_Emptiable(); // 0x1005C9EA4
}

// Namespace: Mono.Xml
internal class DTDElementAutomata : DTDAutomata // TypeDefIndex: 1732
{
	// Fields
	private string name; // 0x18

	// Methods
	public void .ctor(DTDObjectModel root, string name); // 0x1005CAA90
	public string get_Name(); // 0x1005CAC64
	public override DTDAutomata TryStartElement(string name); // 0x1005CAC6C
}

// Namespace: Mono.Xml
internal class DTDChoiceAutomata : DTDAutomata // TypeDefIndex: 1733
{
	// Fields
	private DTDAutomata left; // 0x18
	private DTDAutomata right; // 0x20
	private bool hasComputedEmptiable; // 0x28
	private bool cachedEmptiable; // 0x29

	// Methods
	public void .ctor(DTDObjectModel root, DTDAutomata left, DTDAutomata right); // 0x1005C9F40
	public override DTDAutomata TryStartElement(string name); // 0x1005C9FC0
	public override DTDAutomata TryEndElement(); // 0x1005CA064
	public override bool get_Emptiable(); // 0x1005CA0F4
}

// Namespace: Mono.Xml
internal class DTDSequenceAutomata : DTDAutomata // TypeDefIndex: 1734
{
	// Fields
	private DTDAutomata left; // 0x18
	private DTDAutomata right; // 0x20
	private bool hasComputedEmptiable; // 0x28
	private bool cachedEmptiable; // 0x29

	// Methods
	public void .ctor(DTDObjectModel root, DTDAutomata left, DTDAutomata right); // 0x1005C9F80
	public override DTDAutomata TryStartElement(string name); // 0x1005CD490
	public override DTDAutomata TryEndElement(); // 0x1005CD5E0
	public override bool get_Emptiable(); // 0x1005CD64C
}

// Namespace: Mono.Xml
internal class DTDOneOrMoreAutomata : DTDAutomata // TypeDefIndex: 1735
{
	// Fields
	private DTDAutomata children; // 0x18

	// Methods
	public void .ctor(DTDObjectModel root, DTDAutomata children); // 0x1005CAA58
	public override DTDAutomata TryStartElement(string name); // 0x1005CD170
	public override DTDAutomata TryEndElement(); // 0x1005CD228
}

// Namespace: Mono.Xml
internal class DTDEmptyAutomata : DTDAutomata // TypeDefIndex: 1736
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CB014
	public override DTDAutomata TryEndElement(); // 0x1005CB040
	public override DTDAutomata TryStartElement(string name); // 0x1005CB044
	public override bool get_Emptiable(); // 0x1005CB05C
}

// Namespace: Mono.Xml
internal class DTDAnyAutomata : DTDAutomata // TypeDefIndex: 1737
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005C85BC
	public override DTDAutomata TryEndElement(); // 0x1005C8614
	public override DTDAutomata TryStartElement(string name); // 0x1005C8618
	public override bool get_Emptiable(); // 0x1005C861C
}

// Namespace: Mono.Xml
internal class DTDInvalidAutomata : DTDAutomata // TypeDefIndex: 1738
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CC860
	public override DTDAutomata TryEndElement(); // 0x1005CC88C
	public override DTDAutomata TryStartElement(string name); // 0x1005CC890
}

// Namespace: Mono.Xml
internal class DTDObjectModel // TypeDefIndex: 1739
{
	// Fields
	private DTDAutomataFactory factory; // 0x10
	private DTDElementAutomata rootAutomata; // 0x18
	private DTDEmptyAutomata emptyAutomata; // 0x20
	private DTDAnyAutomata anyAutomata; // 0x28
	private DTDInvalidAutomata invalidAutomata; // 0x30
	private DTDElementDeclarationCollection elementDecls; // 0x38
	private DTDAttListDeclarationCollection attListDecls; // 0x40
	private DTDParameterEntityDeclarationCollection peDecls; // 0x48
	private DTDEntityDeclarationCollection entityDecls; // 0x50
	private DTDNotationDeclarationCollection notationDecls; // 0x58
	private ArrayList validationErrors; // 0x60
	private XmlResolver resolver; // 0x68
	private XmlNameTable nameTable; // 0x70
	private Hashtable externalResources; // 0x78
	private string baseURI; // 0x80
	private string name; // 0x88
	private string publicId; // 0x90
	private string systemId; // 0x98
	private string intSubset; // 0xA0
	private bool intSubsetHasPERef; // 0xA8
	private bool isStandalone; // 0xA9
	private int lineNumber; // 0xAC
	private int linePosition; // 0xB0

	// Methods
	public void .ctor(XmlNameTable nameTable); // 0x1005CCAF4
	public string get_BaseURI(); // 0x1005CC8C4
	public void set_BaseURI(string value); // 0x1005CCCCC
	public bool get_IsStandalone(); // 0x1005CCCD4
	public void set_IsStandalone(bool value); // 0x1005CCCDC
	public string get_Name(); // 0x1005CCCE4
	public void set_Name(string value); // 0x1005CCCEC
	public XmlNameTable get_NameTable(); // 0x1005CB938
	public string get_PublicId(); // 0x1005CCCF4
	public void set_PublicId(string value); // 0x1005CCCFC
	public string get_SystemId(); // 0x1005CCD04
	public void set_SystemId(string value); // 0x1005CCD0C
	public string get_InternalSubset(); // 0x1005CCD14
	public void set_InternalSubset(string value); // 0x1005CCD1C
	public bool get_InternalSubsetHasPEReference(); // 0x1005CCD24
	public void set_InternalSubsetHasPEReference(bool value); // 0x1005CCD2C
	public int get_LineNumber(); // 0x1005CCD34
	public void set_LineNumber(int value); // 0x1005CCD3C
	public int get_LinePosition(); // 0x1005CCD44
	public void set_LinePosition(int value); // 0x1005CCD4C
	public string ResolveEntity(string name); // 0x1005C9724
	internal XmlResolver get_Resolver(); // 0x1005CCD54
	public void set_XmlResolver(XmlResolver value); // 0x1005CCD5C
	internal Hashtable get_ExternalResources(); // 0x1005CB930
	public DTDAutomataFactory get_Factory(); // 0x1005C9A44
	public DTDElementDeclarationCollection get_ElementDecls(); // 0x1005CA518
	public DTDAttListDeclarationCollection get_AttListDecls(); // 0x1005CCD64
	public DTDEntityDeclarationCollection get_EntityDecls(); // 0x1005CC6A0
	public DTDParameterEntityDeclarationCollection get_PEDecls(); // 0x1005CCD6C
	public DTDNotationDeclarationCollection get_NotationDecls(); // 0x1005CCD74
	public DTDAutomata get_RootAutomata(); // 0x1005CCD7C
	public DTDEmptyAutomata get_Empty(); // 0x1005C9964
	public DTDAnyAutomata get_Any(); // 0x1005C99D4
	public DTDInvalidAutomata get_Invalid(); // 0x1005C98F4
	public XmlSchemaException[] get_Errors(); // 0x1005CCDF8
	public void AddError(XmlSchemaException ex); // 0x1005CAFB0
	internal string GenerateEntityAttributeText(string entityName); // 0x1005CCEC0
	internal XmlTextReader GenerateEntityContentReader(string entityName, XmlParserContext context); // 0x1005CCEEC
}

// Namespace: Mono.Xml
internal class DictionaryBase : List`1<KeyValuePair`2<string, DTDNode>> // TypeDefIndex: 1740
{
	// Methods
	public void .ctor(); // 0x1005C806C
	public IEnumerable`1<DTDNode> get_Values(); // 0x1005C80DC
}

// Namespace: 
private sealed class <>c__Iterator3 : IEnumerable`1<DTDNode>, IEnumerator`1<DTDNode>, IDisposable, IEnumerator, IEnumerable // TypeDefIndex: 1741
{
	// Fields
	internal Enumerator<KeyValuePair`2<string, DTDNode>> <$s_50>__0; // 0x10
	internal KeyValuePair`2<string, DTDNode> <p>__1; // 0x30
	internal int $PC; // 0x40
	internal DTDNode $current; // 0x48
	internal DictionaryBase <>f__this; // 0x50

	// Methods
	public void .ctor(); // 0x1005C8150
	private DTDNode System.Collections.Generic.IEnumerator<Mono.Xml.DTDNode>.get_Current(); // 0x1005C8158
	private object System.Collections.IEnumerator.get_Current(); // 0x1005C8160
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1005C8168
	private IEnumerator`1<DTDNode> System.Collections.Generic.IEnumerable<Mono.Xml.DTDNode>.GetEnumerator(); // 0x1005C816C
	public bool MoveNext(); // 0x1005C8200
	public void Dispose(); // 0x1005C843C
	public void Reset(); // 0x1005C8568
}

// Namespace: Mono.Xml
internal class DTDCollectionBase : DictionaryBase // TypeDefIndex: 1742
{
	// Fields
	private DTDObjectModel root; // 0x20

	// Methods
	protected void .ctor(DTDObjectModel root); // 0x1005C8B4C
	protected DTDObjectModel get_Root(); // 0x1005C9240
	protected void BaseAdd(string name, DTDNode value); // 0x1005C9248
	public bool Contains(string key); // 0x1005CA1AC
	protected object BaseGet(string name); // 0x1005C8C0C
}

// Namespace: Mono.Xml
internal class DTDElementDeclarationCollection : DTDCollectionBase // TypeDefIndex: 1743
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CADEC
	public DTDElementDeclaration get_Item(string name); // 0x1005CA520
	public DTDElementDeclaration Get(string name); // 0x1005CAE14
	public void Add(string name, DTDElementDeclaration decl); // 0x1005CAEAC
}

// Namespace: Mono.Xml
internal class DTDAttListDeclarationCollection : DTDCollectionBase // TypeDefIndex: 1744
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005C8B24
	public DTDAttListDeclaration get_Item(string name); // 0x1005C8B74
	public void Add(string name, DTDAttListDeclaration decl); // 0x1005C8E74
}

// Namespace: Mono.Xml
internal class DTDEntityDeclarationCollection : DTDCollectionBase // TypeDefIndex: 1745
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CC750
	public DTDEntityDeclaration get_Item(string name); // 0x1005CC6A8
	public void Add(string name, DTDEntityDeclaration decl); // 0x1005CC778
}

// Namespace: Mono.Xml
internal class DTDNotationDeclarationCollection : DTDCollectionBase // TypeDefIndex: 1746
{
	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CC94C
	public DTDNotationDeclaration get_Item(string name); // 0x1005CC974
	public void Add(string name, DTDNotationDeclaration decl); // 0x1005CCA0C
}

// Namespace: Mono.Xml
internal class DTDContentModel : DTDNode // TypeDefIndex: 1747
{
	// Fields
	private DTDObjectModel root; // 0x30
	private DTDAutomata compiledAutomata; // 0x38
	private string ownerElementName; // 0x40
	private string elementName; // 0x48
	private DTDContentOrderType orderType; // 0x50
	private DTDContentModelCollection childModels; // 0x58
	private DTDOccurence occurence; // 0x60

	// Methods
	internal void .ctor(DTDObjectModel root, string ownerElementName); // 0x1005CA3FC
	public DTDContentModelCollection get_ChildModels(); // 0x1005CA4E4
	public DTDElementDeclaration get_ElementDecl(); // 0x1005CA4EC
	public string get_ElementName(); // 0x1005CA524
	public void set_ElementName(string value); // 0x1005CA52C
	public DTDOccurence get_Occurence(); // 0x1005CA534
	public void set_Occurence(DTDOccurence value); // 0x1005CA53C
	public DTDContentOrderType get_OrderType(); // 0x1005CA544
	public void set_OrderType(DTDContentOrderType value); // 0x1005CA54C
	public DTDAutomata GetAutomata(); // 0x1005CA554
	public DTDAutomata Compile(); // 0x1005CA584
	private DTDAutomata CompileInternal(); // 0x1005CA5A8
	private DTDAutomata GetBasicContentAutomata(); // 0x1005CA768
	private DTDAutomata Sequence(DTDAutomata l, DTDAutomata r); // 0x1005CABDC
	private DTDAutomata Choice(DTDAutomata l, DTDAutomata r); // 0x1005CAA3C
}

// Namespace: Mono.Xml
internal class DTDContentModelCollection // TypeDefIndex: 1748
{
	// Fields
	private ArrayList contentModel; // 0x10

	// Methods
	public void .ctor(); // 0x1005CA47C
	public DTDContentModel get_Item(int i); // 0x1005CAB1C
	public int get_Count(); // 0x1005CAAC8
	public void Add(DTDContentModel model); // 0x1005CAC00
}

// Namespace: Mono.Xml
internal abstract class DTDNode : IXmlLineInfo // TypeDefIndex: 1749
{
	// Fields
	private DTDObjectModel root; // 0x10
	private bool isInternalSubset; // 0x18
	private string baseURI; // 0x20
	private int lineNumber; // 0x28
	private int linePosition; // 0x2C

	// Methods
	protected void .ctor(); // 0x1005C86C4
	public virtual string get_BaseURI(); // 0x1005CC894
	public virtual void set_BaseURI(string value); // 0x1005CC89C
	public bool get_IsInternalSubset(); // 0x1005CC8A4
	public void set_IsInternalSubset(bool value); // 0x1005CC8AC
	public int get_LineNumber(); // 0x1005CC740
	public int get_LinePosition(); // 0x1005CC748
	public bool HasLineInfo(); // 0x1005CC8B4
	internal void SetRoot(DTDObjectModel root); // 0x1005C86CC
	protected DTDObjectModel get_Root(); // 0x1005C8B1C
	internal XmlException NotWFError(string message); // 0x1005CC600
}

// Namespace: Mono.Xml
internal class DTDElementDeclaration : DTDNode // TypeDefIndex: 1750
{
	// Fields
	private DTDObjectModel root; // 0x30
	private DTDContentModel contentModel; // 0x38
	private string name; // 0x40
	private bool isEmpty; // 0x48
	private bool isAny; // 0x49
	private bool isMixedContent; // 0x4A

	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005CAD10
	public string get_Name(); // 0x1005CAD3C
	public void set_Name(string value); // 0x1005CAD44
	public bool get_IsEmpty(); // 0x1005CA760
	public void set_IsEmpty(bool value); // 0x1005CAD4C
	public bool get_IsAny(); // 0x1005CA758
	public void set_IsAny(bool value); // 0x1005CAD54
	public bool get_IsMixedContent(); // 0x1005CAD5C
	public void set_IsMixedContent(bool value); // 0x1005CAD64
	public DTDContentModel get_ContentModel(); // 0x1005CAD6C
}

// Namespace: Mono.Xml
internal class DTDAttributeDefinition : DTDNode // TypeDefIndex: 1751
{
	// Fields
	private string name; // 0x30
	private XmlSchemaDatatype datatype; // 0x38
	private ArrayList enumeratedLiterals; // 0x40
	private string unresolvedDefault; // 0x48
	private ArrayList enumeratedNotations; // 0x50
	private DTDAttributeOccurenceType occurenceType; // 0x58
	private string resolvedDefaultValue; // 0x60

	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005C92D8
	public string get_Name(); // 0x1005C8B14
	public void set_Name(string value); // 0x1005C9308
	public XmlSchemaDatatype get_Datatype(); // 0x1005C9310
	public void set_Datatype(XmlSchemaDatatype value); // 0x1005C9318
	public DTDAttributeOccurenceType get_OccurenceType(); // 0x1005C9320
	public void set_OccurenceType(DTDAttributeOccurenceType value); // 0x1005C9328
	public ArrayList get_EnumeratedAttributeDeclaration(); // 0x1005C9330
	public ArrayList get_EnumeratedNotations(); // 0x1005C939C
	public string get_DefaultValue(); // 0x1005C9408
	public string get_UnresolvedDefaultValue(); // 0x1005C9714
	public void set_UnresolvedDefaultValue(string value); // 0x1005C971C
	internal string ComputeDefaultValue(); // 0x1005C9438
}

// Namespace: Mono.Xml
internal class DTDAttListDeclaration : DTDNode // TypeDefIndex: 1752
{
	// Fields
	private string name; // 0x30
	private Hashtable attributeOrders; // 0x38
	private ArrayList attributes; // 0x40

	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005C8624
	public string get_Name(); // 0x1005C8750
	public void set_Name(string value); // 0x1005C8758
	public DTDAttributeDefinition get_Item(int i); // 0x1005C8760
	public DTDAttributeDefinition get_Item(string name); // 0x1005C8824
	public DTDAttributeDefinition Get(int i); // 0x1005C8764
	public DTDAttributeDefinition Get(string name); // 0x1005C8828
	public IList get_Definitions(); // 0x1005C8938
	public void Add(DTDAttributeDefinition def); // 0x1005C8940
}

// Namespace: Mono.Xml
internal class DTDEntityBase : DTDNode // TypeDefIndex: 1753
{
	// Fields
	private string name; // 0x30
	private string publicId; // 0x38
	private string systemId; // 0x40
	private string literalValue; // 0x48
	private string replacementText; // 0x50
	private string uriString; // 0x58
	private Uri absUri; // 0x60
	private bool isInvalid; // 0x68
	private bool loadFailed; // 0x69
	private XmlResolver resolver; // 0x70

	// Methods
	protected void .ctor(DTDObjectModel root); // 0x1005CB064
	internal bool get_IsInvalid(); // 0x1005CB094
	public void set_LoadFailed(bool value); // 0x1005CB09C
	public string get_Name(); // 0x1005CB0A4
	public void set_Name(string value); // 0x1005CB0AC
	public string get_PublicId(); // 0x1005CB0B4
	public void set_PublicId(string value); // 0x1005CB0BC
	public string get_SystemId(); // 0x1005CB0C4
	public void set_SystemId(string value); // 0x1005CB0CC
	public string get_LiteralEntityValue(); // 0x1005CB0D4
	public void set_LiteralEntityValue(string value); // 0x1005CB0DC
	public string get_ReplacementText(); // 0x1005CB0E4
	public void set_ReplacementText(string value); // 0x1005CB0EC
	public void set_XmlResolver(XmlResolver value); // 0x1005CB0F4
	public string get_ActualUri(); // 0x1005CB0FC
	public void Resolve(); // 0x1005CB3C4
}

// Namespace: Mono.Xml
internal class DTDEntityDeclaration : DTDEntityBase // TypeDefIndex: 1754
{
	// Fields
	private string entityValue; // 0x78
	private string notationName; // 0x80
	private ArrayList ReferencingEntities; // 0x88
	private bool scanned; // 0x90
	private bool recursed; // 0x91
	private bool hasExternalReference; // 0x92

	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005CB940
	public string get_NotationName(); // 0x1005CB9C0
	public void set_NotationName(string value); // 0x1005CB9C8
	public bool get_HasExternalReference(); // 0x1005CB9D0
	public string get_EntityValue(); // 0x1005CC498
	public void ScanEntityValue(ArrayList refs); // 0x1005CBA44
}

// Namespace: Mono.Xml
internal class DTDNotationDeclaration : DTDNode // TypeDefIndex: 1755
{
	// Fields
	private string name; // 0x30
	private string localName; // 0x38
	private string prefix; // 0x40
	private string publicId; // 0x48
	private string systemId; // 0x50

	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005CC8CC
	public string get_Name(); // 0x1005CC8FC
	public void set_Name(string value); // 0x1005CC904
	public string get_PublicId(); // 0x1005CC90C
	public void set_PublicId(string value); // 0x1005CC914
	public string get_SystemId(); // 0x1005CC91C
	public void set_SystemId(string value); // 0x1005CC924
	public string get_LocalName(); // 0x1005CC92C
	public void set_LocalName(string value); // 0x1005CC934
	public string get_Prefix(); // 0x1005CC93C
	public void set_Prefix(string value); // 0x1005CC944
}

// Namespace: Mono.Xml
internal class DTDParameterEntityDeclarationCollection // TypeDefIndex: 1756
{
	// Fields
	private Hashtable peDecls; // 0x10
	private DTDObjectModel root; // 0x18

	// Methods
	public void .ctor(DTDObjectModel root); // 0x1005CCC50
	public DTDParameterEntityDeclaration get_Item(string name); // 0x1005CD2FC
	public void Add(string name, DTDParameterEntityDeclaration decl); // 0x1005CD3BC
}

// Namespace: Mono.Xml
internal class DTDParameterEntityDeclaration : DTDEntityBase // TypeDefIndex: 1757
{
	// Methods
	internal void .ctor(DTDObjectModel root); // 0x1005CD2CC
}

// Namespace: Mono.Xml
internal sealed class DTDContentOrderType : Enum // TypeDefIndex: 1758
{
	// Fields
	public int value__; // 0x10
	public const DTDContentOrderType None = 0; // 0x0
	public const DTDContentOrderType Seq = 1; // 0x0
	public const DTDContentOrderType Or = 2; // 0x0

}

// Namespace: Mono.Xml
internal sealed class DTDAttributeOccurenceType : Enum // TypeDefIndex: 1759
{
	// Fields
	public int value__; // 0x10
	public const DTDAttributeOccurenceType None = 0; // 0x0
	public const DTDAttributeOccurenceType Required = 1; // 0x0
	public const DTDAttributeOccurenceType Optional = 2; // 0x0
	public const DTDAttributeOccurenceType Fixed = 3; // 0x0

}

// Namespace: Mono.Xml
internal sealed class DTDOccurence : Enum // TypeDefIndex: 1760
{
	// Fields
	public int value__; // 0x10
	public const DTDOccurence One = 0; // 0x0
	public const DTDOccurence Optional = 1; // 0x0
	public const DTDOccurence ZeroOrMore = 2; // 0x0
	public const DTDOccurence OneOrMore = 3; // 0x0

}

// Namespace: System.Xml
internal class DTDReader : IXmlLineInfo // TypeDefIndex: 1761
{
	// Fields
	private XmlParserInput currentInput; // 0x10
	private Stack parserInputStack; // 0x18
	private char[] nameBuffer; // 0x20
	private int nameLength; // 0x28
	private int nameCapacity; // 0x2C
	private StringBuilder valueBuffer; // 0x30
	private int currentLinkedNodeLineNumber; // 0x38
	private int currentLinkedNodeLinePosition; // 0x3C
	private int dtdIncludeSect; // 0x40
	private bool normalization; // 0x44
	private bool processingInternalSubset; // 0x45
	private string cachedPublicId; // 0x48
	private string cachedSystemId; // 0x50
	private DTDObjectModel DTD; // 0x58

	// Methods
	public void .ctor(DTDObjectModel dtd, int startLineNumber, int startLinePosition); // 0x1005F755C
	public string get_BaseURI(); // 0x1005F8448
	public bool get_Normalization(); // 0x1005F8464
	public void set_Normalization(bool value); // 0x1005F75A0
	public int get_LineNumber(); // 0x1005F846C
	public int get_LinePosition(); // 0x1005F8488
	public bool HasLineInfo(); // 0x1005F84A4
	private XmlException NotWFError(string message); // 0x1005F84AC
	private void Init(); // 0x1005F8394
	internal DTDObjectModel GenerateDTDObjectModel(); // 0x1005F75A8
	private bool ProcessDTDSubset(); // 0x1005F8530
	private void CompileDeclaration(); // 0x1005F9834
	private void ReadIgnoreSect(); // 0x1005FAE84
	private DTDElementDeclaration ReadElementDecl(); // 0x1005FA518
	private void ReadContentSpec(DTDElementDeclaration decl); // 0x1005FAF94
	private DTDContentModel ReadCP(DTDElementDeclaration elem); // 0x1005FB5B4
	private void AddContentModel(DTDContentModelCollection cmc, DTDContentModel cm); // 0x1005FB3F0
	private void ReadParameterEntityDecl(); // 0x1005F9F70
	private void ResolveExternalEntityReplacementText(DTDEntityBase decl); // 0x1005FB9F0
	private void ResolveInternalEntityReplacementText(DTDEntityBase decl); // 0x1005FBD88
	private int GetCharacterReference(DTDEntityBase li, string value, int index, int end); // 0x1005FC134
	private string GetPEValue(string peName); // 0x1005FC3A4
	private DTDParameterEntityDeclaration GetPEDecl(string peName); // 0x1005F9448
	private bool TryExpandPERef(); // 0x1005F9F1C
	private bool TryExpandPERefSpaceKeep(); // 0x1005FC484
	private void ExpandPERef(); // 0x1005F9DD8
	private DTDEntityDeclaration ReadEntityDecl(); // 0x1005FA284
	private void ReadEntityValueDecl(DTDEntityDeclaration decl); // 0x1005FC510
	private DTDAttListDeclaration ReadAttListDecl(); // 0x1005FA630
	private DTDAttributeDefinition ReadAttributeDefinition(); // 0x1005FC714
	private void ReadAttributeDefaultValue(DTDAttributeDefinition def); // 0x1005FCDE8
	private DTDNotationDeclaration ReadNotationDecl(); // 0x1005FAA3C
	private void ReadExternalID(); // 0x1005FB92C
	private string ReadSystemLiteral(bool expectSYSTEM); // 0x1005FDAA0
	private string ReadPubidLiteral(); // 0x1005FD930
	internal string ReadName(); // 0x1005F91DC
	private string ReadNmToken(); // 0x1005FCDE0
	private string ReadNameOrNmToken(bool isNameToken); // 0x1005FDB80
	private void Expect(int expected); // 0x1005F91E4
	private void Expect(string expected); // 0x1005F9C4C
	private void ExpectAfterWhitespace(char c); // 0x1005FAC3C
	private bool SkipWhitespace(); // 0x1005F90F0
	private int PeekChar(); // 0x1005F87D8
	private int ReadChar(); // 0x1005F91C0
	private void ReadComment(); // 0x1005F9CC0
	private void ReadProcessingInstruction(); // 0x1005F9644
	private void ReadTextDeclaration(); // 0x1005FDED0
	private void AppendNameChar(int ch); // 0x1005FDD7C
	private void CheckNameCapacity(); // 0x1005FE184
	private string CreateNameString(); // 0x1005FDE4C
	private void AppendValueChar(int ch); // 0x1005FBC74
	private string CreateValueString(); // 0x1005FBD6C
	private void ClearValueBuffer(); // 0x1005FBC54
	private string ReadDefaultAttribute(); // 0x1005FD704
	private void PushParserInput(string url); // 0x1005F88C0
	private void PopParserInput(); // 0x1005F87F4
	private void HandleError(XmlSchemaException ex); // 0x1005FB910
}

// Namespace: Mono.Xml
internal class DTDValidatingReader : XmlReader, IHasXmlParserContext, IHasXmlSchemaInfo, IXmlLineInfo, IXmlNamespaceResolver // TypeDefIndex: 1762
{
	// Fields
	private EntityResolvingXmlReader reader; // 0x20
	private XmlTextReader sourceTextReader; // 0x28
	private XmlValidatingReader validatingReader; // 0x30
	private DTDObjectModel dtd; // 0x38
	private XmlResolver resolver; // 0x40
	private string currentElement; // 0x48
	private AttributeSlot[] attributes; // 0x50
	private int attributeCount; // 0x58
	private int currentAttribute; // 0x5C
	private bool consumedAttribute; // 0x60
	private Stack elementStack; // 0x68
	private Stack automataStack; // 0x70
	private bool popScope; // 0x78
	private bool isStandalone; // 0x79
	private DTDAutomata currentAutomata; // 0x80
	private DTDAutomata previousAutomata; // 0x88
	private ArrayList idList; // 0x90
	private ArrayList missingIDReferences; // 0x98
	private XmlNamespaceManager nsmgr; // 0xA0
	private string currentTextValue; // 0xA8
	private string constructingTextValue; // 0xB0
	private bool shouldResetCurrentTextValue; // 0xB8
	private bool isSignificantWhitespace; // 0xB9
	private bool isWhitespace; // 0xBA
	private bool isText; // 0xBB
	private Stack attributeValueEntityStack; // 0xC0
	private StringBuilder valueBuilder; // 0xC8
	private char[] whitespaceChars; // 0xD0
	private static Dictionary`2<string, int> <>f__switch$map2A; // 0x0

	// Methods
	internal void .ctor(XmlReader reader, XmlValidatingReader validatingReader); // 0x1005CD6F8
	private bool System.Xml.IXmlLineInfo.HasLineInfo(); // 0x1005CDB50
	internal EntityResolvingXmlReader get_Source(); // 0x1005CDC54
	public DTDObjectModel get_DTD(); // 0x1005CDC5C
	public EntityHandling get_EntityHandling(); // 0x1005CDC64
	public void set_EntityHandling(EntityHandling value); // 0x1005CDC88
	public override void Close(); // 0x1005CDCD4
	private int GetAttributeIndex(string name); // 0x1005CDD28
	private int GetAttributeIndex(string localName, string ns); // 0x1005CDE0C
	public override string GetAttribute(string name); // 0x1005CDF50
	public override string GetAttribute(string name, string ns); // 0x1005CDFBC
	public override string LookupNamespace(string prefix); // 0x1005CE028
	public override void MoveToAttribute(int i); // 0x1005CE150
	public override bool MoveToAttribute(string name); // 0x1005CE25C
	public override bool MoveToAttribute(string name, string ns); // 0x1005CE320
	public override bool MoveToElement(); // 0x1005CE3E4
	public override bool MoveToFirstAttribute(); // 0x1005CE488
	public override bool MoveToNextAttribute(); // 0x1005CE504
	public override bool Read(); // 0x1005CE630
	private bool ReadContent(); // 0x1005CE8CC
	private bool ProcessContent(); // 0x1005CED38
	private void FillAttributes(); // 0x1005CEFA4
	private void ValidateText(); // 0x1005D0B3C
	private void ValidateWhitespaceNode(); // 0x1005D028C
	private void HandleError(string message, XmlSeverityType severity); // 0x1005CEAAC
	private void HandleError(XmlSchemaException ex, XmlSeverityType severity); // 0x1005D0E64
	private void ValidateAttributes(DTDAttListDeclaration decl, bool validate); // 0x1005D0F60
	private AttributeSlot GetAttributeSlot(); // 0x1005D0CEC
	private void DtdValidateAttributes(DTDAttListDeclaration decl, bool validate); // 0x1005D1248
	private void ReadDoctype(); // 0x1005CF16C
	private void ProcessStartElement(); // 0x1005D03D8
	private void ProcessEndElement(); // 0x1005D08A8
	private void VerifyDeclaredAttributes(DTDAttListDeclaration decl); // 0x1005D2724
	public override bool ReadAttributeValue(); // 0x1005D2B38
	public override void ResolveEntity(); // 0x1005D2C30
	public override int get_AttributeCount(); // 0x1005D2C88
	public override string get_BaseURI(); // 0x1005D2CA0
	public override bool get_CanResolveEntity(); // 0x1005D2CF4
	public override int get_Depth(); // 0x1005D2CFC
	public override bool get_EOF(); // 0x1005D2DC0
	public override bool get_HasValue(); // 0x1005D2E14
	public override bool get_IsDefault(); // 0x1005D2E8C
	public override bool get_IsEmptyElement(); // 0x1005D2EF8
	public override string get_Item(string name); // 0x1005D2F68
	public override string get_Item(string name, string ns); // 0x1005D2FC4
	public int get_LineNumber(); // 0x1005D3028
	public int get_LinePosition(); // 0x1005D3128
	public override string get_LocalName(); // 0x1005D322C
	public override string get_Name(); // 0x1005D3360
	public override string get_NamespaceURI(); // 0x1005D3494
	public override XmlNameTable get_NameTable(); // 0x1005D3600
	public override XmlNodeType get_NodeType(); // 0x1005D3654
	public XmlParserContext get_ParserContext(); // 0x1005D240C
	public override string get_Prefix(); // 0x1005D3740
	public override ReadState get_ReadState(); // 0x1005D3874
	public object get_SchemaType(); // 0x1005D3928
	private string FilterNormalization(string attrName, string rawValue); // 0x1005D247C
	public override string get_Value(); // 0x1005D39C8
	public override string get_XmlLang(); // 0x1005D3AA8
	public void set_XmlResolver(XmlResolver value); // 0x1005D3B78
	public override XmlSpace get_XmlSpace(); // 0x1005D3B8C
}

// Namespace: 
private class AttributeSlot // TypeDefIndex: 1763
{
	// Fields
	public string Name; // 0x10
	public string LocalName; // 0x18
	public string NS; // 0x20
	public string Prefix; // 0x28
	public string Value; // 0x30
	public bool IsDefault; // 0x38

	// Methods
	public void .ctor(); // 0x1005D238C
	public void Clear(); // 0x1005D2394
}

// Namespace: Mono.Xml
internal class EntityResolvingXmlReader : XmlReader, IHasXmlParserContext, IXmlLineInfo, IXmlNamespaceResolver // TypeDefIndex: 1764
{
	// Fields
	private EntityResolvingXmlReader entity; // 0x20
	private XmlReader source; // 0x28
	private XmlParserContext context; // 0x30
	private XmlResolver resolver; // 0x38
	private EntityHandling entity_handling; // 0x40
	private bool entity_inside_attr; // 0x44
	private bool inside_attr; // 0x45
	private bool do_resolve; // 0x46

	// Methods
	public void .ctor(XmlReader source); // 0x1005CD990
	private void .ctor(XmlReader entityContainer, bool inside_attr); // 0x1005D3D30
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x1005D3D6C
	private XmlReader get_Current(); // 0x1005D3D74
	public override int get_AttributeCount(); // 0x1005D3DDC
	public override string get_BaseURI(); // 0x1005D3E34
	public override bool get_CanResolveEntity(); // 0x1005D3E8C
	public override int get_Depth(); // 0x1005D3E94
	public override bool get_EOF(); // 0x1005D3FA0
	public override bool get_HasValue(); // 0x1005D3FF4
	public override bool get_IsDefault(); // 0x1005D404C
	public override bool get_IsEmptyElement(); // 0x1005D40A4
	public override string get_LocalName(); // 0x1005D40FC
	public override string get_Name(); // 0x1005D4154
	public override string get_NamespaceURI(); // 0x1005D41AC
	public override XmlNameTable get_NameTable(); // 0x1005D4204
	public override XmlNodeType get_NodeType(); // 0x1005D425C
	internal XmlParserContext get_ParserContext(); // 0x1005D4340
	public override string get_Prefix(); // 0x1005D4348
	public override ReadState get_ReadState(); // 0x1005D43A0
	public override string get_Value(); // 0x1005D4410
	public override string get_XmlLang(); // 0x1005D4468
	public override XmlSpace get_XmlSpace(); // 0x1005D44C0
	private void CopyProperties(EntityResolvingXmlReader other); // 0x1005D4518
	public EntityHandling get_EntityHandling(); // 0x1005CDC80
	public void set_EntityHandling(EntityHandling value); // 0x1005CDCA0
	public int get_LineNumber(); // 0x1005D4544
	public int get_LinePosition(); // 0x1005D4654
	public override void Close(); // 0x1005D4768
	public override string GetAttribute(string name); // 0x1005D47F4
	public override string GetAttribute(string localName, string namespaceURI); // 0x1005D485C
	public override string LookupNamespace(string prefix); // 0x1005D48CC
	public override void MoveToAttribute(int i); // 0x1005D4938
	public override bool MoveToAttribute(string name); // 0x1005D49E8
	public override bool MoveToAttribute(string localName, string namespaceName); // 0x1005D4AF4
	public override bool MoveToElement(); // 0x1005D4C0C
	public override bool MoveToFirstAttribute(); // 0x1005D4CB0
	public override bool MoveToNextAttribute(); // 0x1005D4DA4
	public override bool Read(); // 0x1005D4E98
	public override bool ReadAttributeValue(); // 0x1005D53B0
	public override void ResolveEntity(); // 0x1005D54BC
	private void DoResolveEntity(); // 0x1005D509C
	public override void Skip(); // 0x1005D54C0
	public bool HasLineInfo(); // 0x1005D54C8
}

// Namespace: System.Xml
public sealed class EntityHandling : Enum // TypeDefIndex: 1765
{
	// Fields
	public int value__; // 0x10
	public const EntityHandling ExpandEntities = 1; // 0x0
	public const EntityHandling ExpandCharEntities = 2; // 0x0

}

// Namespace: System.Xml
public sealed class Formatting : Enum // TypeDefIndex: 1766
{
	// Fields
	public int value__; // 0x10
	public const Formatting None = 0; // 0x0
	public const Formatting Indented = 1; // 0x0

}

// Namespace: System.Xml
public interface IXmlLineInfo // TypeDefIndex: 1767
{
	// Methods
	public abstract int get_LineNumber(); // 0
	public abstract int get_LinePosition(); // 0
	public abstract bool HasLineInfo(); // 0
}

// Namespace: System.Xml
internal interface IHasXmlChildNode // TypeDefIndex: 1768
{
	// Methods
	public abstract XmlLinkedNode get_LastLinkedChild(); // 0
	public abstract void set_LastLinkedChild(XmlLinkedNode value); // 0
}

// Namespace: System.Xml
public interface IXmlNamespaceResolver // TypeDefIndex: 1769
{
	// Methods
	public abstract string LookupNamespace(string prefix); // 0
}

// Namespace: System.Xml
public class NameTable : XmlNameTable // TypeDefIndex: 1770
{
	// Fields
	private int count; // 0x10
	private Entry[] buckets; // 0x18
	private int size; // 0x20

	// Methods
	public void .ctor(); // 0x1005F199C
	public override string Add(char[] key, int start, int len); // 0x1005FE230
	public override string Add(string key); // 0x1005FE6D0
	public override string Get(string value); // 0x1005FE8A4
	private string AddEntry(string str, int hash); // 0x1005FE4D8
	private static bool StrEqArray(string str, char[] str2, int start); // 0x1005FE424
}

// Namespace: 
private class Entry // TypeDefIndex: 1771
{
	// Fields
	public string str; // 0x10
	public int hash; // 0x18
	public int len; // 0x1C
	public Entry next; // 0x20

	// Methods
	public void .ctor(string str, int hash, Entry next); // 0x1005FEA60
}

// Namespace: System.Xml
internal sealed class NamespaceHandling : Enum // TypeDefIndex: 1772
{
	// Fields
	public int value__; // 0x10
	public const NamespaceHandling Default = 0; // 0x0
	public const NamespaceHandling OmitDuplicates = 1; // 0x0

}

// Namespace: System.Xml
public sealed class NewLineHandling : Enum // TypeDefIndex: 1773
{
	// Fields
	public int value__; // 0x10
	public const NewLineHandling Replace = 0; // 0x0
	public const NewLineHandling Entitize = 1; // 0x0
	public const NewLineHandling None = 2; // 0x0

}

// Namespace: System.Xml
public sealed class ReadState : Enum // TypeDefIndex: 1774
{
	// Fields
	public int value__; // 0x10
	public const ReadState Initial = 0; // 0x0
	public const ReadState Interactive = 1; // 0x0
	public const ReadState Error = 2; // 0x0
	public const ReadState EndOfFile = 3; // 0x0
	public const ReadState Closed = 4; // 0x0

}

// Namespace: System.Xml
public sealed class ValidationType : Enum // TypeDefIndex: 1775
{
	// Fields
	public int value__; // 0x10
	public const ValidationType None = 0; // 0x0
	public const ValidationType Auto = 1; // 0x0
	public const ValidationType DTD = 2; // 0x0
	public const ValidationType XDR = 3; // 0x0
	public const ValidationType Schema = 4; // 0x0

}

// Namespace: System.Xml
public sealed class WhitespaceHandling : Enum // TypeDefIndex: 1776
{
	// Fields
	public int value__; // 0x10
	public const WhitespaceHandling All = 0; // 0x0
	public const WhitespaceHandling Significant = 1; // 0x0
	public const WhitespaceHandling None = 2; // 0x0

}

// Namespace: System.Xml
public sealed class WriteState : Enum // TypeDefIndex: 1777
{
	// Fields
	public int value__; // 0x10
	public const WriteState Start = 0; // 0x0
	public const WriteState Prolog = 1; // 0x0
	public const WriteState Element = 2; // 0x0
	public const WriteState Attribute = 3; // 0x0
	public const WriteState Content = 4; // 0x0
	public const WriteState Closed = 5; // 0x0
	public const WriteState Error = 6; // 0x0

}

// Namespace: System.Xml
public class XmlEntity : XmlNode, IHasXmlChildNode // TypeDefIndex: 1778
{
	// Fields
	private string name; // 0x28
	private string NDATA; // 0x30
	private string publicId; // 0x38
	private string systemId; // 0x40
	private string baseUri; // 0x48
	private XmlLinkedNode lastLinkedChild; // 0x50
	private bool contentAlreadySet; // 0x58

	// Methods
	internal void .ctor(string name, string NDATA, string publicId, string systemId, XmlDocument doc); // 0x100668658
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x100669A1C
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x100669D30
	public override string get_BaseURI(); // 0x100669D38
	public override string get_InnerText(); // 0x100669D40
	public override bool get_IsReadOnly(); // 0x100669D44
	public override string get_LocalName(); // 0x100669D4C
	public override string get_Name(); // 0x100669D54
	public override XmlNodeType get_NodeType(); // 0x100669D5C
	public override string get_OuterXml(); // 0x100669D64
	public string get_SystemId(); // 0x100669DCC
	public override XmlNode CloneNode(bool deep); // 0x100669DD4
	public override void WriteContentTo(XmlWriter w); // 0x100669E34
	public override void WriteTo(XmlWriter w); // 0x100669E38
	private void SetEntityContent(); // 0x100669A64
}

// Namespace: System.Xml
public class XmlAttribute : XmlNode, IHasXmlChildNode // TypeDefIndex: 1779
{
	// Fields
	private XmlNameEntry name; // 0x28
	internal bool isDefault; // 0x30
	private XmlLinkedNode lastLinkedChild; // 0x38
	private IXmlSchemaInfo schemaInfo; // 0x40

	// Methods
	internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool atomizedNames, bool checkNamespace); // 0x10065A520
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x10065AC2C
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x10065AC34
	public override string get_BaseURI(); // 0x10065AC3C
	public override string get_LocalName(); // 0x10065AD54
	public override string get_Name(); // 0x10065AD70
	public override string get_NamespaceURI(); // 0x10065AE10
	public override XmlNodeType get_NodeType(); // 0x10065AE2C
	public override XmlDocument get_OwnerDocument(); // 0x10065AE34
	public virtual XmlElement get_OwnerElement(); // 0x10065AE44
	public override XmlNode get_ParentNode(); // 0x10065AE98
	public override string get_Prefix(); // 0x10065AEA0
	public override IXmlSchemaInfo get_SchemaInfo(); // 0x10065AEBC
	internal override void set_SchemaInfo(IXmlSchemaInfo value); // 0x10065AEC4
	public virtual bool get_Specified(); // 0x10065AECC
	public override string get_Value(); // 0x10065AEDC
	public override void set_Value(string value); // 0x10065AF28
	internal override string get_XmlLang(); // 0x10065B2DC
	internal override XmlSpace get_XmlSpace(); // 0x10065B3F4
	public override XmlNode AppendChild(XmlNode child); // 0x10065B4BC
	public override XmlNode InsertBefore(XmlNode newChild, XmlNode refChild); // 0x10065B524
	public override XmlNode RemoveChild(XmlNode node); // 0x10065B53C
	public override XmlNode CloneNode(bool deep); // 0x10065B54C
	internal void SetDefault(); // 0x10065B754
	public override void WriteContentTo(XmlWriter w); // 0x10065B760
	public override void WriteTo(XmlWriter w); // 0x10065B7F4
	internal DTDAttributeDefinition GetAttributeDefinition(); // 0x10065B980
}

// Namespace: System.Xml
public sealed class XmlAttributeCollection : XmlNamedNodeMap, IEnumerable, ICollection // TypeDefIndex: 1780
{
	// Fields
	private XmlElement ownerElement; // 0x28
	private XmlDocument ownerDocument; // 0x30

	// Methods
	internal void .ctor(XmlNode parent); // 0x10065BB60
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10065BD80
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10065BD88
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10065BD8C
	private bool get_IsReadOnly(); // 0x10065BE78
	public XmlAttribute get_ItemOf(string name); // 0x10065BECC
	public XmlAttribute get_ItemOf(int i); // 0x10065BF4C
	public XmlAttribute get_ItemOf(string localName, string namespaceURI); // 0x10065BFE0
	public XmlAttribute Remove(XmlAttribute node); // 0x10065C070
	public void RemoveAll(); // 0x10065CAC8
	public override XmlNode SetNamedItem(XmlNode node); // 0x10065C808
	private void AdjustIdenticalAttributes(XmlAttribute node, XmlNode existing); // 0x10065D130
	private XmlNode RemoveIdenticalAttribute(XmlNode existing); // 0x10065C6A8
}

// Namespace: System.Xml
public class XmlCDataSection : XmlCharacterData // TypeDefIndex: 1781
{
	// Methods
	protected internal void .ctor(string data, XmlDocument doc); // 0x10065D594
	public override string get_LocalName(); // 0x10065D628
	public override string get_Name(); // 0x10065D670
	public override XmlNodeType get_NodeType(); // 0x10065D6B8
	public override XmlNode get_ParentNode(); // 0x10065D6C0
	public override XmlNode CloneNode(bool deep); // 0x10065D6D0
	public override void WriteContentTo(XmlWriter w); // 0x10065D790
	public override void WriteTo(XmlWriter w); // 0x10065D794
}

// Namespace: System.Xml
internal class XmlChar // TypeDefIndex: 1782
{
	// Fields
	public static readonly char[] WhitespaceChars; // 0x0
	private static readonly byte[] firstNamePages; // 0x8
	private static readonly byte[] namePages; // 0x10
	private static readonly uint[] nameBitmap; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map2F; // 0x20

	// Methods
	private static void .cctor(); // 0x10065D824
	public static bool IsWhitespace(int ch); // 0x10065D998
	public static bool IsWhitespace(string str); // 0x10065D9C4
	public static int IndexOfNonWhitespace(string str); // 0x10065DAAC
	public static bool IsFirstNameChar(int ch); // 0x10065DB90
	public static bool IsInvalid(int ch); // 0x10065DC98
	public static int IndexOfInvalid(string s, bool allowSurrogate); // 0x10065DD14
	public static int IndexOfInvalid(char[] s, int start, int length, bool allowSurrogate); // 0x10065DE7C
	public static bool IsNameChar(int ch); // 0x10065E03C
	public static bool IsNCNameChar(int ch); // 0x1006541EC
	public static bool IsName(string str); // 0x10065A97C
	public static bool IsNCName(string str); // 0x1006506AC
	public static bool IsNmToken(string str); // 0x10065E144
	public static bool IsPubidChar(int ch); // 0x10065E218
	public static bool IsValidIANAEncoding(string ianaEncoding); // 0x10065E2F8
	public static int GetPredefinedEntity(string name); // 0x10065E3E8
}

// Namespace: System.Xml
public abstract class XmlCharacterData : XmlLinkedNode // TypeDefIndex: 1783
{
	// Fields
	private string data; // 0x30

	// Methods
	protected internal void .ctor(string data, XmlDocument doc); // 0x10065D598
	public virtual string get_Data(); // 0x10065E648
	public virtual void set_Data(string value); // 0x10065E650
	public override string get_InnerText(); // 0x10065E93C
	public override string get_Value(); // 0x10065E944
	public override void set_Value(string value); // 0x10065E94C
}

// Namespace: System.Xml
public class XmlComment : XmlCharacterData // TypeDefIndex: 1784
{
	// Methods
	protected internal void .ctor(string comment, XmlDocument doc); // 0x10065E9AC
	public override string get_LocalName(); // 0x10065E9B0
	public override string get_Name(); // 0x10065E9F8
	public override XmlNodeType get_NodeType(); // 0x10065EA40
	public override XmlNode CloneNode(bool deep); // 0x10065EA48
	public override void WriteContentTo(XmlWriter w); // 0x10065EB04
	public override void WriteTo(XmlWriter w); // 0x10065EB08
}

// Namespace: System.Xml
public class XmlNotation : XmlNode // TypeDefIndex: 1785
{
	// Fields
	private string localName; // 0x28
	private string publicId; // 0x30
	private string systemId; // 0x38
	private string prefix; // 0x40

	// Methods
	internal void .ctor(string localName, string prefix, string publicId, string systemId, XmlDocument doc); // 0x100668764
	public override bool get_IsReadOnly(); // 0x100675B90
	public override string get_LocalName(); // 0x100675B98
	public override string get_Name(); // 0x100675BA0
	public override XmlNodeType get_NodeType(); // 0x100675C7C
	public override string get_OuterXml(); // 0x100675C84
	public override XmlNode CloneNode(bool deep); // 0x100675CEC
	public override void WriteContentTo(XmlWriter w); // 0x100675D4C
	public override void WriteTo(XmlWriter w); // 0x100675D50
}

// Namespace: System.Xml
public class XmlDeclaration : XmlLinkedNode // TypeDefIndex: 1786
{
	// Fields
	private string encoding; // 0x30
	private string standalone; // 0x38
	private string version; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map30; // 0x0

	// Methods
	protected internal void .ctor(string version, string encoding, string standalone, XmlDocument doc); // 0x10066146C
	public string get_Encoding(); // 0x100661550
	public void set_Encoding(string value); // 0x100661558
	public override string get_InnerText(); // 0x1006615E0
	public override string get_LocalName(); // 0x10066162C
	public override string get_Name(); // 0x100661674
	public override XmlNodeType get_NodeType(); // 0x1006616BC
	public string get_Standalone(); // 0x1006616C4
	public void set_Standalone(string value); // 0x1006616CC
	public override string get_Value(); // 0x100661850
	public override void set_Value(string value); // 0x1006619E0
	public string get_Version(); // 0x1006619D8
	public override XmlNode CloneNode(bool deep); // 0x100661FC4
	public override void WriteContentTo(XmlWriter w); // 0x100662070
	public override void WriteTo(XmlWriter w); // 0x100662074
	private int SkipWhitespace(string input, int index); // 0x100662164
	private void ParseInput(string input); // 0x1006619E4
}

// Namespace: System.Xml
public class XmlDocument : XmlNode, IHasXmlChildNode // TypeDefIndex: 1787
{
	// Fields
	private static readonly Type[] optimal_create_types; // 0x0
	private bool optimal_create_element; // 0x28
	private bool optimal_create_attribute; // 0x29
	private XmlNameTable nameTable; // 0x30
	private string baseURI; // 0x38
	private XmlImplementation implementation; // 0x40
	private bool preserveWhitespace; // 0x48
	private XmlResolver resolver; // 0x50
	private Hashtable idTable; // 0x58
	private XmlNameEntryCache nameCache; // 0x60
	private XmlLinkedNode lastLinkedChild; // 0x68
	private XmlSchemaSet schemas; // 0x70
	private IXmlSchemaInfo schemaInfo; // 0x78
	private bool loadMode; // 0x80
	private XmlNodeChangedEventHandler NodeChanged; // 0x88
	private XmlNodeChangedEventHandler NodeChanging; // 0x90
	private XmlNodeChangedEventHandler NodeInserted; // 0x98
	private XmlNodeChangedEventHandler NodeInserting; // 0xA0
	private XmlNodeChangedEventHandler NodeRemoved; // 0xA8
	private XmlNodeChangedEventHandler NodeRemoving; // 0xB0

	// Methods
	public void .ctor(); // 0x100650A78
	protected internal void .ctor(XmlImplementation imp); // 0x1006624D4
	private void .ctor(XmlImplementation impl, XmlNameTable nt); // 0x100662244
	private static void .cctor(); // 0x1006629CC
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x100662B58
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x100662B60
	public override string get_BaseURI(); // 0x100662B68
	public XmlElement get_DocumentElement(); // 0x100662B70
	public virtual XmlDocumentType get_DocumentType(); // 0x100662C44
	public override bool get_IsReadOnly(); // 0x100662D40
	public override string get_LocalName(); // 0x100662D48
	public override string get_Name(); // 0x100662D90
	internal XmlNameEntryCache get_NameCache(); // 0x10065AA90
	public XmlNameTable get_NameTable(); // 0x10065AA88
	public override XmlNodeType get_NodeType(); // 0x100662DD8
	public override XmlDocument get_OwnerDocument(); // 0x100662DE0
	public bool get_PreserveWhitespace(); // 0x100662DE8
	internal XmlResolver get_Resolver(); // 0x100662DF0
	internal override string get_XmlLang(); // 0x100662DF8
	internal override XmlSpace get_XmlSpace(); // 0x100662E60
	public override XmlNode get_ParentNode(); // 0x100662E68
	public override IXmlSchemaInfo get_SchemaInfo(); // 0x100662E70
	internal override void set_SchemaInfo(IXmlSchemaInfo value); // 0x100662E78
	internal void AddIdenticalAttribute(XmlAttribute attr); // 0x10065D370
	public override XmlNode CloneNode(bool deep); // 0x100662E80
	public XmlAttribute CreateAttribute(string name); // 0x100662FD0
	public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI); // 0x100650A84
	public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI); // 0x100663264
	internal XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI, bool atomizedNames, bool checkNamespace); // 0x10065B650
	public virtual XmlCDataSection CreateCDataSection(string data); // 0x100663368
	public virtual XmlComment CreateComment(string data); // 0x1006633D8
	public virtual XmlDocumentFragment CreateDocumentFragment(); // 0x100663448
	public virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset); // 0x100663524
	private XmlDocumentType CreateDocumentType(DTDObjectModel dtd); // 0x100663720
	public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI); // 0x1006637C8
	internal XmlElement CreateElement(string prefix, string localName, string namespaceURI, bool nameAtomized); // 0x100663CB4
	public virtual XmlEntityReference CreateEntityReference(string name); // 0x100663E88
	public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data); // 0x100663FC0
	public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text); // 0x1006640FC
	public virtual XmlText CreateTextNode(string text); // 0x1006641CC
	public virtual XmlWhitespace CreateWhitespace(string text); // 0x100664240
	public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone); // 0x100664310
	public virtual XmlNodeList GetElementsByTagName(string name); // 0x1006644D8
	internal XmlAttribute GetIdenticalAttribute(string id); // 0x10065D404
	public virtual XmlNode ImportNode(XmlNode node, bool deep); // 0x1006647F8
	public virtual void Load(TextReader txtReader); // 0x100665250
	public virtual void Load(XmlReader xmlReader); // 0x10066541C
	public virtual void LoadXml(string xml); // 0x100665654
	internal void onNodeChanged(XmlNode node, XmlNode parent, string oldValue, string newValue); // 0x10065E880
	internal void onNodeChanging(XmlNode node, XmlNode parent, string oldValue, string newValue); // 0x10065E758
	internal void onNodeInserted(XmlNode node, XmlNode newParent); // 0x10065D2C8
	internal void onNodeInserting(XmlNode node, XmlNode newParent); // 0x10065CB7C
	internal void onNodeRemoved(XmlNode node, XmlNode oldParent); // 0x10065C760
	internal void onNodeRemoving(XmlNode node, XmlNode oldParent); // 0x10065C40C
	private void ParseName(string name, out string prefix, out string localName); // 0x10066318C
	private XmlAttribute ReadAttributeNode(XmlReader reader); // 0x100665A30
	internal void ReadAttributeNodeValue(XmlReader reader, XmlAttribute attribute); // 0x100665FDC
	public virtual XmlNode ReadNode(XmlReader reader); // 0x10066611C
	private XmlNode ReadNodeCore(XmlReader reader); // 0x100666230
	private string MakeReaderErrorMessage(string message, XmlReader reader); // 0x100665CE8
	internal void RemoveIdenticalAttribute(string id); // 0x10065D52C
	public override void WriteContentTo(XmlWriter w); // 0x100667844
	public override void WriteTo(XmlWriter w); // 0x1006678D8
	private void AddDefaultNameTableKeys(); // 0x100662624
	internal void CheckIdTableUpdate(XmlAttribute attr, string oldValue, string newValue); // 0x10065B1B8
}

// Namespace: System.Xml
public class XmlDocumentFragment : XmlNode, IHasXmlChildNode // TypeDefIndex: 1788
{
	// Fields
	private XmlLinkedNode lastLinkedChild; // 0x28

	// Methods
	protected internal void .ctor(XmlDocument doc); // 0x1006634A8
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x100667938
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x100667940
	public override string get_LocalName(); // 0x100667948
	public override string get_Name(); // 0x100667990
	public override XmlNodeType get_NodeType(); // 0x1006679D8
	public override XmlDocument get_OwnerDocument(); // 0x1006679E0
	public override XmlNode get_ParentNode(); // 0x1006679E8
	public override XmlNode CloneNode(bool deep); // 0x1006679F0
	public override void WriteContentTo(XmlWriter w); // 0x100667B90
	public override void WriteTo(XmlWriter w); // 0x100667CB0
}

// Namespace: System.Xml
public class XmlDocumentType : XmlLinkedNode // TypeDefIndex: 1789
{
	// Fields
	internal XmlNamedNodeMap entities; // 0x30
	internal XmlNamedNodeMap notations; // 0x38
	private DTDObjectModel dtd; // 0x40

	// Methods
	protected internal void .ctor(string name, string publicId, string systemId, string internalSubset, XmlDocument doc); // 0x1006635B4
	internal void .ctor(DTDObjectModel dtd, XmlDocument doc); // 0x100663798
	private void ImportFromDTD(); // 0x100667DD0
	internal DTDObjectModel get_DTD(); // 0x10065BB58
	public XmlNamedNodeMap get_Entities(); // 0x1006670D8
	public string get_InternalSubset(); // 0x10066887C
	public override bool get_IsReadOnly(); // 0x100668898
	public override string get_LocalName(); // 0x1006688A0
	public override string get_Name(); // 0x1006688BC
	public override XmlNodeType get_NodeType(); // 0x1006688D8
	public string get_PublicId(); // 0x1006688E0
	public string get_SystemId(); // 0x1006688FC
	public override XmlNode CloneNode(bool deep); // 0x100668918
	public override void WriteContentTo(XmlWriter w); // 0x1006689B8
	public override void WriteTo(XmlWriter w); // 0x1006689BC
}

// Namespace: System.Xml
public class XmlElement : XmlLinkedNode, IHasXmlChildNode // TypeDefIndex: 1790
{
	// Fields
	private XmlAttributeCollection attributes; // 0x30
	private XmlNameEntry name; // 0x38
	private XmlLinkedNode lastLinkedChild; // 0x40
	private bool isNotEmpty; // 0x48
	private IXmlSchemaInfo schemaInfo; // 0x50

	// Methods
	internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc, bool atomizedNames); // 0x1006638C8
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x100668A80
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x100668A88
	public override XmlAttributeCollection get_Attributes(); // 0x100668A90
	public virtual bool get_HasAttributes(); // 0x100668AFC
	public override string get_InnerText(); // 0x100668B58
	public bool get_IsEmpty(); // 0x100668D80
	public void set_IsEmpty(bool value); // 0x100667020
	public override string get_LocalName(); // 0x100668DE0
	public override string get_Name(); // 0x100668DFC
	public override string get_NamespaceURI(); // 0x100668E5C
	public override XmlNode get_NextSibling(); // 0x100668E78
	public override XmlNodeType get_NodeType(); // 0x10066909C
	public override XmlDocument get_OwnerDocument(); // 0x1006690A4
	public override string get_Prefix(); // 0x1006690AC
	public override XmlNode get_ParentNode(); // 0x1006690C8
	public override IXmlSchemaInfo get_SchemaInfo(); // 0x1006690D0
	internal override void set_SchemaInfo(IXmlSchemaInfo value); // 0x1006690D8
	public override XmlNode CloneNode(bool deep); // 0x1006690E0
	public override void RemoveAll(); // 0x1006693A0
	public virtual void SetAttribute(string name, string value); // 0x1006694B0
	public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr); // 0x1006695F8
	public override void WriteContentTo(XmlWriter w); // 0x100669724
	public override void WriteTo(XmlWriter w); // 0x1006697B8
}

// Namespace: System.Xml
public class XmlEntityReference : XmlLinkedNode, IHasXmlChildNode // TypeDefIndex: 1791
{
	// Fields
	private string entityName; // 0x30
	private XmlLinkedNode lastLinkedChild; // 0x38

	// Methods
	protected internal void .ctor(string name, XmlDocument doc); // 0x100663EF8
	private XmlLinkedNode System.Xml.IHasXmlChildNode.get_LastLinkedChild(); // 0x10066A5C8
	private void System.Xml.IHasXmlChildNode.set_LastLinkedChild(XmlLinkedNode value); // 0x10066A5D0
	public override string get_BaseURI(); // 0x10066A5D8
	private XmlEntity get_Entity(); // 0x10066A6EC
	internal override string get_ChildrenBaseURI(); // 0x10066A828
	public override bool get_IsReadOnly(); // 0x10066AB0C
	public override string get_LocalName(); // 0x10066AB14
	public override string get_Name(); // 0x10066AB1C
	public override XmlNodeType get_NodeType(); // 0x10066AB24
	public override string get_Value(); // 0x10066AB2C
	public override void set_Value(string value); // 0x10066AB34
	public override XmlNode CloneNode(bool deep); // 0x10066AB90
	public override void WriteContentTo(XmlWriter w); // 0x10066AC4C
	public override void WriteTo(XmlWriter w); // 0x10066AD6C
	internal void SetReferencedEntityContent(); // 0x10066AE8C
}

// Namespace: System.Xml
public class XmlException : SystemException // TypeDefIndex: 1792
{
	// Fields
	private int lineNumber; // 0x60
	private int linePosition; // 0x64
	private string sourceUri; // 0x68
	private string res; // 0x70
	private string[] messages; // 0x78

	// Methods
	public void .ctor(); // 0x10066B124
	public void .ctor(string message, Exception innerException); // 0x10066B1A4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10066B27C
	public void .ctor(string message); // 0x10065BCB0
	internal void .ctor(IXmlLineInfo li, string sourceUri, string message); // 0x10066B44C
	internal void .ctor(IXmlLineInfo li, Exception innerException, string sourceUri, string message); // 0x10066B464
	public void .ctor(string message, Exception innerException, int lineNumber, int linePosition); // 0x10066B5F0
	public override string get_Message(); // 0x10066B624
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10066B868
}

// Namespace: System.Xml
public class XmlImplementation // TypeDefIndex: 1793
{
	// Fields
	internal XmlNameTable InternalNameTable; // 0x10

	// Methods
	public void .ctor(); // 0x1006624DC
	public void .ctor(XmlNameTable nameTable); // 0x10066B96C
	public virtual XmlDocument CreateDocument(); // 0x10066B998
}

// Namespace: System.Xml
public class XmlConvert // TypeDefIndex: 1794
{
	// Fields
	private static readonly string[] datetimeFormats; // 0x0
	private static readonly string[] defaultDateTimeFormats; // 0x8
	private static readonly string[] roundtripDateTimeFormats; // 0x10
	private static readonly string[] localDateTimeFormats; // 0x18
	private static readonly string[] utcDateTimeFormats; // 0x20
	private static readonly string[] unspecifiedDateTimeFormats; // 0x28
	private static DateTimeStyles _defaultStyle; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map33; // 0x38

	// Methods
	private static void .cctor(); // 0x10065EB98
	public static string EncodeLocalName(string name); // 0x10065A0A8
	internal static bool IsInvalid(char c, bool firstOnlyLetter); // 0x10065FB4C
	private static string EncodeName(string name, bool nmtoken); // 0x10065FBF4
	public static string EncodeName(string name); // 0x10065FAE4
	public static bool ToBoolean(string s); // 0x100650F48
	public static byte ToByte(string s); // 0x10065FDE0
	public static DateTime ToDateTime(string s); // 0x10065FE60
	public static DateTime ToDateTime(string s, string[] formats); // 0x10065FED0
	private static DateTime ToDateTime(string s, string[] formats, DateTimeStyles style); // 0x10065FF50
	public static Decimal ToDecimal(string s); // 0x100660008
	public static double ToDouble(string s); // 0x1006600A8
	private static float TryParseStringFloatConstants(string s); // 0x100660190
	private static bool TryParseStringConstant(string format, string s, int start, int end); // 0x100660458
	public static short ToInt16(string s); // 0x10066053C
	public static int ToInt32(string s); // 0x1006605BC
	public static long ToInt64(string s); // 0x10066063C
	public static sbyte ToSByte(string s); // 0x1006606BC
	public static float ToSingle(string s); // 0x10066073C
	public static TimeSpan ToTimeSpan(string s); // 0x100660820
	public static ushort ToUInt16(string s); // 0x100660CFC
	public static uint ToUInt32(string s); // 0x100660D7C
	public static ulong ToUInt64(string s); // 0x100660DFC
	public static string VerifyName(string name); // 0x100660E7C
	public static string VerifyNCName(string ncname); // 0x100660FA0
	internal static byte[] FromBinHexString(string s); // 0x1006610C4
	internal static int FromBinHexString(char[] chars, int offset, int charLength, byte[] buffer); // 0x10066119C
}

// Namespace: System.Xml
public abstract class XmlLinkedNode : XmlNode // TypeDefIndex: 1795
{
	// Fields
	private XmlLinkedNode nextSibling; // 0x28

	// Methods
	internal void .ctor(XmlDocument doc); // 0x10065E5CC
	internal bool get_IsRooted(); // 0x100664770
	public override XmlNode get_NextSibling(); // 0x10066C838
	internal XmlLinkedNode get_NextLinkedSibling(); // 0x100669094
	internal void set_NextLinkedSibling(XmlLinkedNode value); // 0x10066C8EC
	public override XmlNode get_PreviousSibling(); // 0x10066C8F4
}

// Namespace: System.Xml
internal class XmlNameEntry // TypeDefIndex: 1796
{
	// Fields
	public string Prefix; // 0x10
	public string LocalName; // 0x18
	public string NS; // 0x20
	public int Hash; // 0x28
	private string prefixed_name_cache; // 0x30

	// Methods
	public void .ctor(string prefix, string local, string ns); // 0x10066D30C
	public void Update(string prefix, string local, string ns); // 0x10066D354
	public override bool Equals(object other); // 0x10066D3D0
	public override int GetHashCode(); // 0x10066D4B8
	public string GetPrefixedName(XmlNameEntryCache owner); // 0x10065ADD0
}

// Namespace: System.Xml
internal class XmlNameEntryCache // TypeDefIndex: 1797
{
	// Fields
	private Hashtable table; // 0x10
	private XmlNameTable nameTable; // 0x18
	private XmlNameEntry dummy; // 0x20
	private char[] cacheBuffer; // 0x28

	// Methods
	public void .ctor(XmlNameTable nameTable); // 0x100662548
	public string GetAtomizedPrefixedName(string prefix, string local); // 0x10066D4C0
	public XmlNameEntry Add(string prefix, string local, string ns, bool atomic); // 0x10065AA98
	private XmlNameEntry GetInternal(string prefix, string local, string ns, bool atomic); // 0x10066D72C
}

// Namespace: System.Xml
public abstract class XmlNameTable // TypeDefIndex: 1798
{
	// Methods
	protected void .ctor(); // 0x10066EE60
	public abstract string Add(string name); // 0
	public abstract string Add(char[] buffer, int offset, int length); // 0
	public abstract string Get(string name); // 0
}

// Namespace: System.Xml
public class XmlNamedNodeMap : IEnumerable // TypeDefIndex: 1799
{
	// Fields
	private static readonly IEnumerator emptyEnumerator; // 0x0
	private XmlNode parent; // 0x10
	private ArrayList nodeList; // 0x18
	private bool readOnly; // 0x20

	// Methods
	internal void .ctor(XmlNode parent); // 0x10065BC84
	private static void .cctor(); // 0x10066CA08
	private ArrayList get_NodeList(); // 0x10066CAA0
	public virtual int get_Count(); // 0x10066CB0C
	public virtual IEnumerator GetEnumerator(); // 0x10066CB70
	public virtual XmlNode GetNamedItem(string name); // 0x10066CC28
	public virtual XmlNode GetNamedItem(string localName, string namespaceURI); // 0x10066CD7C
	public virtual XmlNode RemoveNamedItem(string name); // 0x10066CF34
	public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI); // 0x10065C4B4
	public virtual XmlNode SetNamedItem(XmlNode node); // 0x10066D300
	internal XmlNode SetNamedItem(XmlNode node, int pos, bool raiseEvent); // 0x10065CC24
	internal ArrayList get_Nodes(); // 0x10065BE74
}

// Namespace: System.Xml
public class XmlNamespaceManager : IEnumerable, IXmlNamespaceResolver // TypeDefIndex: 1800
{
	// Fields
	private NsDecl[] decls; // 0x10
	private int declPos; // 0x18
	private NsScope[] scopes; // 0x20
	private int scopePos; // 0x28
	private string defaultNamespace; // 0x30
	private int count; // 0x38
	private XmlNameTable nameTable; // 0x40
	internal bool internalAtomizedNames; // 0x48
	private static Dictionary`2<string, int> <>f__switch$map25; // 0x0

	// Methods
	public void .ctor(XmlNameTable nameTable); // 0x100653090
	private void InitData(); // 0x10066D8C8
	private void GrowDecls(); // 0x10066D950
	private void GrowScopes(); // 0x10066DA04
	public virtual string get_DefaultNamespace(); // 0x10066DAB8
	public virtual XmlNameTable get_NameTable(); // 0x10066DB2C
	public virtual void AddNamespace(string prefix, string uri); // 0x10066DB34
	private void AddNamespace(string prefix, string uri, bool atomizedNames); // 0x10066DB3C
	private static string IsValidDeclaration(string prefix, string uri, bool throwException); // 0x10066DE30
	public virtual IEnumerator GetEnumerator(); // 0x10066E030
	public virtual string LookupNamespace(string prefix); // 0x10066E3BC
	internal string LookupNamespace(string prefix, bool atomizedNames); // 0x1006542E0
	private bool CompareString(string s1, string s2, bool atomizedNames); // 0x10066E6A0
	internal string LookupPrefix(string uri, bool atomizedName); // 0x10066E744
	internal string LookupPrefixExclusive(string uri, bool atomizedName); // 0x10066E950
	private string LookupPrefixCore(string uri, bool atomizedName, bool excludeOverriden); // 0x10066E74C
	private bool IsOverriden(int idx); // 0x10066E958
	public virtual bool PopScope(); // 0x10066EA1C
	public virtual void PushScope(); // 0x10066EAE8
	public virtual void RemoveNamespace(string prefix, string uri); // 0x10066EBAC
	private void RemoveNamespace(string prefix, string uri, bool atomizedNames); // 0x10066EBB4
}

// Namespace: 
private struct NsDecl // TypeDefIndex: 1801
{
	// Fields
	public string Prefix; // 0x10
	public string Uri; // 0x18

}

// Namespace: 
private struct NsScope // TypeDefIndex: 1802
{
	// Fields
	public int DeclCount; // 0x10
	public string DefaultNamespace; // 0x18

}

// Namespace: System.Xml
public abstract class XmlNode : IEnumerable, ICloneable, IXPathNavigable // TypeDefIndex: 1803
{
	// Fields
	private static EmptyNodeList emptyList; // 0x0
	private XmlDocument ownerDocument; // 0x10
	private XmlNode parentNode; // 0x18
	private XmlNodeListChildren childNodes; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map2B; // 0x8

	// Methods
	internal void .ctor(XmlDocument ownerDocument); // 0x10065A950
	private static void .cctor(); // 0x10066EE68
	private object System.ICloneable.Clone(); // 0x10066EEDC
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10066EF2C
	public virtual XmlAttributeCollection get_Attributes(); // 0x10066EFB4
	public virtual string get_BaseURI(); // 0x10066A5DC
	internal virtual string get_ChildrenBaseURI(); // 0x10066EFBC
	public virtual XmlNodeList get_ChildNodes(); // 0x10066F008
	public virtual XmlNode get_FirstChild(); // 0x10066F0F8
	public virtual bool get_HasChildNodes(); // 0x10066F1FC
	public virtual string get_InnerText(); // 0x100668B5C
	private void AppendChildValues(StringBuilder builder); // 0x10066F24C
	public virtual bool get_IsReadOnly(); // 0x10066F3B0
	public virtual XmlNode get_LastChild(); // 0x10066F4D8
	public abstract string get_LocalName(); // 0
	public abstract string get_Name(); // 0
	public virtual string get_NamespaceURI(); // 0x10066F5E4
	public virtual XmlNode get_NextSibling(); // 0x10066F64C
	public abstract XmlNodeType get_NodeType(); // 0
	public virtual string get_OuterXml(); // 0x10066F654
	public virtual XmlDocument get_OwnerDocument(); // 0x10065AE3C
	public virtual XmlNode get_ParentNode(); // 0x10065D6C8
	public virtual string get_Prefix(); // 0x10066F8AC
	public virtual XmlNode get_PreviousSibling(); // 0x10066F914
	public virtual string get_Value(); // 0x10066F91C
	public virtual void set_Value(string value); // 0x10066F924
	internal virtual string get_XmlLang(); // 0x10066F984
	internal virtual XmlSpace get_XmlSpace(); // 0x10066FBC4
	public virtual IXmlSchemaInfo get_SchemaInfo(); // 0x10066FF28
	internal virtual void set_SchemaInfo(IXmlSchemaInfo value); // 0x10066FF30
	public virtual XmlNode AppendChild(XmlNode newChild); // 0x10065B4C0
	internal XmlNode AppendChild(XmlNode newChild, bool checkNodeType); // 0x10065B2C8
	public virtual XmlNode Clone(); // 0x10066FF34
	public abstract XmlNode CloneNode(bool deep); // 0
	public IEnumerator GetEnumerator(); // 0x10066EF30
	public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild); // 0x10065B530
	internal bool IsAncestor(XmlNode newChild); // 0x10066FF88
	internal XmlNode InsertBefore(XmlNode newChild, XmlNode refChild, bool checkNodeType, bool raiseEvent); // 0x1006670E0
	private void CheckNodeInsertion(XmlNode newChild, XmlNode refChild); // 0x10066FFF0
	public virtual void RemoveAll(); // 0x1006693A4
	public virtual XmlNode RemoveChild(XmlNode oldChild); // 0x10065B544
	private void CheckNodeRemoval(); // 0x100670CB8
	internal XmlNode RemoveChild(XmlNode oldChild, bool checkNodeType); // 0x1006705C8
	internal XmlElement get_AttributeOwnerElement(); // 0x10065AE48
	internal void set_AttributeOwnerElement(XmlElement value); // 0x10065CAC0
	internal void SearchDescendantElements(string name, bool matchAll, ArrayList list); // 0x1006645B4
	public abstract void WriteContentTo(XmlWriter w); // 0
	public abstract void WriteTo(XmlWriter w); // 0
	internal XmlNamespaceManager ConstructNamespaceManager(); // 0x100669E3C
}

// Namespace: 
private class EmptyNodeList : XmlNodeList // TypeDefIndex: 1804
{
	// Fields
	private static IEnumerator emptyEnumerator; // 0x0

	// Methods
	public void .ctor(); // 0x10066EED4
	private static void .cctor(); // 0x100670EFC
	public override int get_Count(); // 0x100670F94
	public override IEnumerator GetEnumerator(); // 0x100670F9C
	public override XmlNode Item(int index); // 0x100671004
}

// Namespace: System.Xml
public sealed class XmlNodeChangedAction : Enum // TypeDefIndex: 1805
{
	// Fields
	public int value__; // 0x10
	public const XmlNodeChangedAction Insert = 0; // 0x0
	public const XmlNodeChangedAction Remove = 1; // 0x0
	public const XmlNodeChangedAction Change = 2; // 0x0

}

// Namespace: System.Xml
public class XmlNodeChangedEventArgs : EventArgs // TypeDefIndex: 1806
{
	// Fields
	private XmlNode _oldParent; // 0x10
	private XmlNode _newParent; // 0x18
	private XmlNodeChangedAction _action; // 0x20
	private XmlNode _node; // 0x28
	private string _oldValue; // 0x30
	private string _newValue; // 0x38

	// Methods
	public void .ctor(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action); // 0x1006658C4
}

// Namespace: System.Xml
public abstract class XmlNodeList : IEnumerable // TypeDefIndex: 1807
{
	// Methods
	protected void .ctor(); // 0x100670EF4
	public abstract int get_Count(); // 0
	public virtual XmlNode get_ItemOf(int i); // 0x100671208
	public abstract IEnumerator GetEnumerator(); // 0
	public abstract XmlNode Item(int index); // 0
}

// Namespace: System.Xml
internal class XmlNodeListChildren : XmlNodeList // TypeDefIndex: 1808
{
	// Fields
	private IHasXmlChildNode parent; // 0x10

	// Methods
	public void .ctor(IHasXmlChildNode parent); // 0x10066F0CC
	public override int get_Count(); // 0x100671264
	public override IEnumerator GetEnumerator(); // 0x1006714A0
	public override XmlNode Item(int index); // 0x10067153C
}

// Namespace: 
private class Enumerator : IEnumerator // TypeDefIndex: 1809
{
	// Fields
	private IHasXmlChildNode parent; // 0x10
	private XmlLinkedNode currentChild; // 0x18
	private bool passedLastNode; // 0x20

	// Methods
	internal void .ctor(IHasXmlChildNode parent); // 0x10067150C
	public virtual object get_Current(); // 0x1006717C4
	public virtual bool MoveNext(); // 0x1006718EC
	public virtual void Reset(); // 0x100671B20
}

// Namespace: System.Xml
internal class XmlNodeArrayList : XmlNodeList // TypeDefIndex: 1810
{
	// Fields
	private ArrayList _rgNodes; // 0x10

	// Methods
	public void .ctor(ArrayList rgNodes); // 0x100664744
	public override int get_Count(); // 0x10067100C
	public override IEnumerator GetEnumerator(); // 0x100671060
	public override XmlNode Item(int index); // 0x1006710B8
}

// Namespace: System.Xml
public class XmlNodeReader : XmlReader, IHasXmlParserContext, IXmlNamespaceResolver // TypeDefIndex: 1811
{
	// Fields
	private XmlReader entity; // 0x20
	private XmlNodeReaderImpl source; // 0x28
	private bool entityInsideAttribute; // 0x30
	private bool insideAttribute; // 0x31

	// Methods
	public void .ctor(XmlNode node); // 0x100671B28
	private void .ctor(XmlNodeReaderImpl entityContainer, bool insideAttribute); // 0x100671D2C
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x100671DC4
	private XmlReader get_Current(); // 0x100671F88
	public override int get_AttributeCount(); // 0x100671FE8
	public override string get_BaseURI(); // 0x100672040
	public override bool get_CanResolveEntity(); // 0x100672098
	public override int get_Depth(); // 0x1006720A0
	public override bool get_EOF(); // 0x1006721AC
	public override bool get_HasAttributes(); // 0x100672200
	public override bool get_HasValue(); // 0x100672258
	public override bool get_IsDefault(); // 0x1006722B0
	public override bool get_IsEmptyElement(); // 0x100672308
	public override string get_LocalName(); // 0x100672360
	public override string get_Name(); // 0x1006723B8
	public override string get_NamespaceURI(); // 0x100672410
	public override XmlNameTable get_NameTable(); // 0x100672468
	public override XmlNodeType get_NodeType(); // 0x1006724C0
	public override string get_Prefix(); // 0x1006725A4
	public override ReadState get_ReadState(); // 0x1006725FC
	public override IXmlSchemaInfo get_SchemaInfo(); // 0x10067266C
	public override string get_Value(); // 0x1006726C8
	public override string get_XmlLang(); // 0x100672720
	public override XmlSpace get_XmlSpace(); // 0x100672778
	public override void Close(); // 0x1006727D0
	public override string GetAttribute(string name); // 0x10067285C
	public override string GetAttribute(string name, string namespaceURI); // 0x1006728C4
	public override string LookupNamespace(string prefix); // 0x100672934
	public override void MoveToAttribute(int i); // 0x1006729A0
	public override bool MoveToAttribute(string name); // 0x100672A50
	public override bool MoveToAttribute(string localName, string namespaceURI); // 0x100672B5C
	public override bool MoveToElement(); // 0x100672C74
	public override bool MoveToFirstAttribute(); // 0x100672CF4
	public override bool MoveToNextAttribute(); // 0x100672DE8
	public override bool Read(); // 0x100672EDC
	public override bool ReadAttributeValue(); // 0x100672FC8
	public override void ResolveEntity(); // 0x1006730B8
	public override void Skip(); // 0x1006731E4
}

// Namespace: System.Xml
internal class XmlNodeReaderImpl : XmlReader, IHasXmlParserContext, IXmlNamespaceResolver // TypeDefIndex: 1812
{
	// Fields
	private XmlDocument document; // 0x20
	private XmlNode startNode; // 0x28
	private XmlNode current; // 0x30
	private XmlNode ownerLinkedNode; // 0x38
	private ReadState state; // 0x40
	private int depth; // 0x44
	private bool isEndElement; // 0x48
	private bool ignoreStartNode; // 0x49
	private static Dictionary`2<string, int> <>f__switch$map34; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map35; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map36; // 0x10

	// Methods
	internal void .ctor(XmlNodeReaderImpl entityContainer); // 0x100671DAC
	public void .ctor(XmlNode node); // 0x100671BA8
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x100673254
	public override int get_AttributeCount(); // 0x1006734A0
	public override string get_BaseURI(); // 0x100673584
	public override bool get_CanResolveEntity(); // 0x1006735E0
	public override int get_Depth(); // 0x1006735E8
	public override bool get_EOF(); // 0x10067366C
	public override bool get_HasAttributes(); // 0x100673680
	public override bool get_HasValue(); // 0x100673744
	public override bool get_IsDefault(); // 0x1006737D4
	public override bool get_IsEmptyElement(); // 0x1006738B4
	public override string get_LocalName(); // 0x100673970
	public override string get_Name(); // 0x100673AA4
	public override string get_NamespaceURI(); // 0x100673BD8
	public override XmlNameTable get_NameTable(); // 0x100673C8C
	public override XmlNodeType get_NodeType(); // 0x100673CA8
	public override string get_Prefix(); // 0x100673D28
	public override ReadState get_ReadState(); // 0x100673DDC
	public override IXmlSchemaInfo get_SchemaInfo(); // 0x100673DE4
	public override string get_Value(); // 0x100673E48
	public override string get_XmlLang(); // 0x100673F9C
	public override XmlSpace get_XmlSpace(); // 0x100673FF8
	public override void Close(); // 0x100674054
	public override string GetAttribute(string name); // 0x100674064
	public override string GetAttribute(string name, string namespaceURI); // 0x1006745B8
	private string GetXmlDeclarationAttribute(string name); // 0x1006741FC
	private string GetDocumentTypeAttribute(string name); // 0x100674424
	private XmlElement GetCurrentElement(); // 0x100674758
	public override string LookupNamespace(string prefix); // 0x10067490C
	public override void MoveToAttribute(int attributeIndex); // 0x100674CEC
	public override bool MoveToAttribute(string name); // 0x100674DE4
	public override bool MoveToAttribute(string name, string namespaceURI); // 0x100674F34
	public override bool MoveToElement(); // 0x100674FFC
	public override bool MoveToFirstAttribute(); // 0x100675024
	public override bool MoveToNextAttribute(); // 0x10067512C
	public override bool Read(); // 0x1006753DC
	private bool ReadContent(); // 0x100675578
	public override bool ReadAttributeValue(); // 0x100675828
	public override void ResolveEntity(); // 0x10067598C
	public override void Skip(); // 0x1006759EC
}

// Namespace: System.Xml
public sealed class XmlNodeType : Enum // TypeDefIndex: 1813
{
	// Fields
	public int value__; // 0x10
	public const XmlNodeType None = 0; // 0x0
	public const XmlNodeType Element = 1; // 0x0
	public const XmlNodeType Attribute = 2; // 0x0
	public const XmlNodeType Text = 3; // 0x0
	public const XmlNodeType CDATA = 4; // 0x0
	public const XmlNodeType EntityReference = 5; // 0x0
	public const XmlNodeType Entity = 6; // 0x0
	public const XmlNodeType ProcessingInstruction = 7; // 0x0
	public const XmlNodeType Comment = 8; // 0x0
	public const XmlNodeType Document = 9; // 0x0
	public const XmlNodeType DocumentType = 10; // 0x0
	public const XmlNodeType DocumentFragment = 11; // 0x0
	public const XmlNodeType Notation = 12; // 0x0
	public const XmlNodeType Whitespace = 13; // 0x0
	public const XmlNodeType SignificantWhitespace = 14; // 0x0
	public const XmlNodeType EndElement = 15; // 0x0
	public const XmlNodeType EndEntity = 16; // 0x0
	public const XmlNodeType XmlDeclaration = 17; // 0x0

}

// Namespace: System.Xml
public sealed class XmlOutputMethod : Enum // TypeDefIndex: 1814
{
	// Fields
	public int value__; // 0x10
	public const XmlOutputMethod Xml = 0; // 0x0
	public const XmlOutputMethod Html = 1; // 0x0
	public const XmlOutputMethod Text = 2; // 0x0
	public const XmlOutputMethod AutoDetect = 3; // 0x0

}

// Namespace: System.Xml
public class XmlParserContext // TypeDefIndex: 1815
{
	// Fields
	private string baseURI; // 0x10
	private string docTypeName; // 0x18
	private Encoding encoding; // 0x20
	private string internalSubset; // 0x28
	private XmlNamespaceManager namespaceManager; // 0x30
	private XmlNameTable nameTable; // 0x38
	private string publicID; // 0x40
	private string systemID; // 0x48
	private string xmlLang; // 0x50
	private XmlSpace xmlSpace; // 0x58
	private ArrayList contextItems; // 0x60
	private int contextItemCount; // 0x68
	private DTDObjectModel dtd; // 0x70

	// Methods
	public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace); // 0x1006657F4
	public void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc); // 0x100675D54
	internal void .ctor(XmlNameTable nt, XmlNamespaceManager nsMgr, DTDObjectModel dtd, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc); // 0x10066A3FC
	public string get_BaseURI(); // 0x100676244
	public void set_BaseURI(string value); // 0x10067611C
	public void set_DocTypeName(string value); // 0x100675ECC
	internal DTDObjectModel get_Dtd(); // 0x1006670D0
	internal void set_Dtd(DTDObjectModel value); // 0x10067624C
	public void set_Encoding(Encoding value); // 0x100676254
	public string get_InternalSubset(); // 0x10067625C
	public void set_InternalSubset(string value); // 0x100676088
	public XmlNamespaceManager get_NamespaceManager(); // 0x100654338
	public XmlNameTable get_NameTable(); // 0x10067627C
	public void set_PublicId(string value); // 0x100675F60
	public void set_SystemId(string value); // 0x100675FF4
	public string get_XmlLang(); // 0x100676284
	public void set_XmlLang(string value); // 0x1006761B0
	public XmlSpace get_XmlSpace(); // 0x10067628C
	public void set_XmlSpace(XmlSpace value); // 0x100676294
	internal void PushScope(); // 0x10067629C
	internal void PopScope(); // 0x1006763F0
}

// Namespace: 
private class ContextItem // TypeDefIndex: 1816
{
	// Fields
	public string BaseURI; // 0x10
	public string XmlLang; // 0x18
	public XmlSpace XmlSpace; // 0x20

	// Methods
	public void .ctor(); // 0x1006763E8
}

// Namespace: System.Xml
public class XmlProcessingInstruction : XmlLinkedNode // TypeDefIndex: 1817
{
	// Fields
	private string target; // 0x30
	private string data; // 0x38

	// Methods
	protected internal void .ctor(string target, string data, XmlDocument doc); // 0x100664038
	public string get_Data(); // 0x100665248
	public override string get_InnerText(); // 0x100676BB0
	public override string get_LocalName(); // 0x100676BB8
	public override string get_Name(); // 0x100676BC0
	public override XmlNodeType get_NodeType(); // 0x100676BC8
	public string get_Target(); // 0x100665240
	public override string get_Value(); // 0x100676BD0
	public override void set_Value(string value); // 0x100676BD8
	public override XmlNode CloneNode(bool deep); // 0x100676C80
	public override void WriteContentTo(XmlWriter w); // 0x100676D24
	public override void WriteTo(XmlWriter w); // 0x100676D28
}

// Namespace: System.Xml
public class XmlQualifiedName // TypeDefIndex: 1818
{
	// Fields
	public static readonly XmlQualifiedName Empty; // 0x0
	private readonly string name; // 0x10
	private readonly string ns; // 0x18
	private readonly int hash; // 0x20

	// Methods
	public void .ctor(); // 0x100676D90
	public void .ctor(string name); // 0x100676E04
	public void .ctor(string name, string ns); // 0x1006420BC
	private static void .cctor(); // 0x100676E84
	public bool get_IsEmpty(); // 0x10063E320
	public string get_Name(); // 0x10064EE84
	public string get_Namespace(); // 0x10063EE40
	public override bool Equals(object other); // 0x100676EE4
	public override int GetHashCode(); // 0x100676F8C
	public override string ToString(); // 0x100676F94
	internal static XmlQualifiedName Parse(string name, IXmlNamespaceResolver resolver, bool considerDefaultNamespace); // 0x10067706C
	internal static XmlQualifiedName Parse(string name, XmlReader reader); // 0x100677274
	public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b); // 0x1006361C0
	public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b); // 0x10063FB90
}

// Namespace: System.Xml
public abstract class XmlReader : IDisposable // TypeDefIndex: 1819
{
	// Fields
	private XmlReaderBinarySupport binary; // 0x10
	private XmlReaderSettings settings; // 0x18

	// Methods
	protected void .ctor(); // 0x100671BA0
	private void System.IDisposable.Dispose(); // 0x1006773C0
	public abstract int get_AttributeCount(); // 0
	public abstract string get_BaseURI(); // 0
	internal XmlReaderBinarySupport get_Binary(); // 0x10067542C
	public virtual bool get_CanResolveEntity(); // 0x100677410
	public abstract int get_Depth(); // 0
	public abstract bool get_EOF(); // 0
	public virtual bool get_HasAttributes(); // 0x100677418
	public abstract bool get_HasValue(); // 0
	public abstract bool get_IsEmptyElement(); // 0
	public virtual bool get_IsDefault(); // 0x100677468
	public virtual string get_Item(string name); // 0x100677470
	public virtual string get_Item(string name, string namespaceURI); // 0x1006774CC
	public abstract string get_LocalName(); // 0
	public virtual string get_Name(); // 0x100677530
	public abstract string get_NamespaceURI(); // 0
	public abstract XmlNameTable get_NameTable(); // 0
	public abstract XmlNodeType get_NodeType(); // 0
	public abstract string get_Prefix(); // 0
	public abstract ReadState get_ReadState(); // 0
	public virtual IXmlSchemaInfo get_SchemaInfo(); // 0x10067767C
	public virtual XmlReaderSettings get_Settings(); // 0x100677684
	public abstract string get_Value(); // 0
	public virtual string get_XmlLang(); // 0x10067768C
	public virtual XmlSpace get_XmlSpace(); // 0x1006776F4
	public abstract void Close(); // 0
	protected virtual void Dispose(bool disposing); // 0x1006776FC
	public abstract string GetAttribute(string name); // 0
	public abstract string GetAttribute(string localName, string namespaceName); // 0
	public abstract string LookupNamespace(string prefix); // 0
	public virtual void MoveToAttribute(int i); // 0x100677790
	public abstract bool MoveToAttribute(string name); // 0
	public abstract bool MoveToAttribute(string localName, string namespaceName); // 0
	private bool IsContent(XmlNodeType nodeType); // 0x10067788C
	public virtual XmlNodeType MoveToContent(); // 0x1006778C0
	public abstract bool MoveToElement(); // 0
	public abstract bool MoveToFirstAttribute(); // 0
	public abstract bool MoveToNextAttribute(); // 0
	public abstract bool Read(); // 0
	public abstract bool ReadAttributeValue(); // 0
	public virtual void ReadEndElement(); // 0x100677A4C
	public virtual string ReadInnerXml(); // 0x100677C64
	public virtual string ReadOuterXml(); // 0x100677F88
	public virtual void ReadStartElement(); // 0x10067816C
	public abstract void ResolveEntity(); // 0
	public virtual void Skip(); // 0x1006759F0
	private XmlException XmlError(string message); // 0x100677BAC
}

// Namespace: System.Xml
internal class XmlReaderBinarySupport // TypeDefIndex: 1820
{
	// Fields
	private XmlReader reader; // 0x10
	private int base64CacheStartsAt; // 0x18
	private CommandState state; // 0x1C
	private bool hasCache; // 0x20
	private bool dontReset; // 0x21

	// Methods
	public void Reset(); // 0x100675434
}

// Namespace: 
public sealed class CommandState : Enum // TypeDefIndex: 1821
{
	// Fields
	public int value__; // 0x10
	public const CommandState None = 0; // 0x0
	public const CommandState ReadElementContentAsBase64 = 1; // 0x0
	public const CommandState ReadContentAsBase64 = 2; // 0x0
	public const CommandState ReadElementContentAsBinHex = 3; // 0x0
	public const CommandState ReadContentAsBinHex = 4; // 0x0

}

// Namespace: 
public sealed class CharGetter : MulticastDelegate // TypeDefIndex: 1822
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1006782CC
	public virtual int Invoke(char[] buffer, int offset, int length); // 0x1006782DC
	public virtual IAsyncResult BeginInvoke(char[] buffer, int offset, int length, AsyncCallback callback, object object); // 0x100678460
	public virtual int EndInvoke(IAsyncResult result); // 0x100678538
}

// Namespace: System.Xml
public sealed class XmlReaderSettings // TypeDefIndex: 1823
{
	// Fields
	private bool checkCharacters; // 0x10
	private ConformanceLevel conformance; // 0x14
	private XmlSchemaSet schemas; // 0x18
	private bool schemasNeedsInitialization; // 0x20
	private XmlSchemaValidationFlags validationFlags; // 0x24

	// Methods
	public bool get_CheckCharacters(); // 0x100678564
	public ConformanceLevel get_ConformanceLevel(); // 0x10067856C
	public XmlSchemaSet get_Schemas(); // 0x1006655E0
	public XmlSchemaValidationFlags get_ValidationFlags(); // 0x100678574
}

// Namespace: System.Xml
public abstract class XmlResolver // TypeDefIndex: 1824
{
	// Methods
	protected void .ctor(); // 0x10067857C
	public abstract object GetEntity(Uri absoluteUri, string role, Type type); // 0
	public virtual Uri ResolveUri(Uri baseUri, string relativeUri); // 0x100678584
	private string EscapeRelativeUriBody(string src); // 0x100678730
}

// Namespace: System.Xml
public class XmlSignificantWhitespace : XmlCharacterData // TypeDefIndex: 1825
{
	// Methods
	protected internal void .ctor(string strData, XmlDocument doc); // 0x1006641C8
	public override string get_LocalName(); // 0x100678828
	public override string get_Name(); // 0x100678870
	public override XmlNodeType get_NodeType(); // 0x1006788B8
	public override string get_Value(); // 0x1006788C0
	public override void set_Value(string value); // 0x100678910
	public override XmlNode get_ParentNode(); // 0x1006789C0
	public override XmlNode CloneNode(bool deep); // 0x1006789C8
	public override void WriteContentTo(XmlWriter w); // 0x100678A88
	public override void WriteTo(XmlWriter w); // 0x100678A8C
}

// Namespace: System.Xml
public sealed class XmlSpace : Enum // TypeDefIndex: 1826
{
	// Fields
	public int value__; // 0x10
	public const XmlSpace None = 0; // 0x0
	public const XmlSpace Default = 1; // 0x0
	public const XmlSpace Preserve = 2; // 0x0

}

// Namespace: System.Xml
public class XmlText : XmlCharacterData // TypeDefIndex: 1827
{
	// Methods
	protected internal void .ctor(string strData, XmlDocument doc); // 0x10066423C
	public override string get_LocalName(); // 0x100678E8C
	public override string get_Name(); // 0x100678ED4
	public override XmlNodeType get_NodeType(); // 0x100678F1C
	public override string get_Value(); // 0x100678F24
	public override void set_Value(string value); // 0x100678F74
	public override XmlNode get_ParentNode(); // 0x100678FD4
	public override XmlNode CloneNode(bool deep); // 0x100678FDC
	public override void WriteContentTo(XmlWriter w); // 0x100679094
	public override void WriteTo(XmlWriter w); // 0x100679098
}

// Namespace: Mono.Xml2
internal class XmlTextReader : XmlReader, IHasXmlParserContext, IXmlLineInfo, IXmlNamespaceResolver // TypeDefIndex: 1828
{
	// Fields
	private XmlTokenInfo cursorToken; // 0x20
	private XmlTokenInfo currentToken; // 0x28
	private XmlAttributeTokenInfo currentAttributeToken; // 0x30
	private XmlTokenInfo currentAttributeValueToken; // 0x38
	private XmlAttributeTokenInfo[] attributeTokens; // 0x40
	private XmlTokenInfo[] attributeValueTokens; // 0x48
	private int currentAttribute; // 0x50
	private int currentAttributeValue; // 0x54
	private int attributeCount; // 0x58
	private XmlParserContext parserContext; // 0x60
	private XmlNameTable nameTable; // 0x68
	private XmlNamespaceManager nsmgr; // 0x70
	private ReadState readState; // 0x78
	private bool disallowReset; // 0x7C
	private int depth; // 0x80
	private int elementDepth; // 0x84
	private bool depthUp; // 0x88
	private bool popScope; // 0x89
	private TagName[] elementNames; // 0x90
	private int elementNameStackPos; // 0x98
	private bool allowMultipleRoot; // 0x9C
	private bool isStandalone; // 0x9D
	private bool returnEntityReference; // 0x9E
	private string entityReferenceName; // 0xA0
	private StringBuilder valueBuffer; // 0xA8
	private TextReader reader; // 0xB0
	private char[] peekChars; // 0xB8
	private int peekCharsIndex; // 0xC0
	private int peekCharsLength; // 0xC4
	private int curNodePeekIndex; // 0xC8
	private bool preserveCurrentTag; // 0xCC
	private int line; // 0xD0
	private int column; // 0xD4
	private int currentLinkedNodeLineNumber; // 0xD8
	private int currentLinkedNodeLinePosition; // 0xDC
	private bool useProceedingLineInfo; // 0xE0
	private XmlNodeType startNodeType; // 0xE4
	private XmlNodeType currentState; // 0xE8
	private int nestLevel; // 0xEC
	private bool readCharsInProgress; // 0xF0
	private CharGetter binaryCharGetter; // 0xF8
	private bool namespaces; // 0x100
	private WhitespaceHandling whitespaceHandling; // 0x104
	private XmlResolver resolver; // 0x108
	private bool normalization; // 0x110
	private bool checkCharacters; // 0x111
	private bool prohibitDtd; // 0x112
	private bool closeInput; // 0x113
	private EntityHandling entityHandling; // 0x114
	private NameTable whitespacePool; // 0x118
	private char[] whitespaceCache; // 0x120
	private DtdInputStateStack stateStack; // 0x128
	private static Dictionary`2<string, int> <>f__switch$map38; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map39; // 0x8

	// Methods
	public void .ctor(TextReader input, XmlNameTable nt); // 0x1005EE6EC
	public void .ctor(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context); // 0x1005EE780
	public void .ctor(string url, Stream input, XmlNameTable nt); // 0x1005EE994
	public void .ctor(string url, TextReader input, XmlNameTable nt); // 0x1005EE774
	public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context); // 0x1005EEA18
	internal void .ctor(string url, TextReader fragment, XmlNodeType fragType, XmlParserContext context); // 0x1005EE87C
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x1005EEFA4
	public override int get_AttributeCount(); // 0x1005EEFAC
	public override string get_BaseURI(); // 0x1005EEFB4
	internal bool get_CharacterChecking(); // 0x1005EEFD0
	internal void set_CharacterChecking(bool value); // 0x1005EEFD8
	internal bool get_CloseInput(); // 0x1005EEFE0
	internal void set_CloseInput(bool value); // 0x1005EEFE8
	public override int get_Depth(); // 0x1005EEFF0
	public EntityHandling get_EntityHandling(); // 0x1005EF040
	public override bool get_EOF(); // 0x1005EF048
	public override bool get_HasValue(); // 0x1005EF058
	public override bool get_IsDefault(); // 0x1005EF0B0
	public override bool get_IsEmptyElement(); // 0x1005EF0B8
	public int get_LineNumber(); // 0x1005EF0D4
	public int get_LinePosition(); // 0x1005EF104
	public override string get_LocalName(); // 0x1005EF134
	public override string get_Name(); // 0x1005EF150
	public bool get_Namespaces(); // 0x1005EF16C
	public override string get_NamespaceURI(); // 0x1005EF174
	public override XmlNameTable get_NameTable(); // 0x1005EF190
	public override XmlNodeType get_NodeType(); // 0x1005EF198
	public bool get_Normalization(); // 0x1005EF1B4
	public void set_Normalization(bool value); // 0x1005EF1BC
	public override string get_Prefix(); // 0x1005EF1C4
	public override ReadState get_ReadState(); // 0x1005EF1E0
	public override XmlReaderSettings get_Settings(); // 0x1005EF1E8
	public override string get_Value(); // 0x1005EF1F0
	public WhitespaceHandling get_WhitespaceHandling(); // 0x1005EF2E4
	public void set_WhitespaceHandling(WhitespaceHandling value); // 0x1005EF2EC
	public override string get_XmlLang(); // 0x1005EF2F4
	public void set_XmlResolver(XmlResolver value); // 0x1005EF310
	public override XmlSpace get_XmlSpace(); // 0x1005EF318
	public override void Close(); // 0x1005EF334
	public override string GetAttribute(string name); // 0x1005EF414
	private int GetIndexOfQualifiedAttribute(string localName, string namespaceURI); // 0x1005EF568
	public override string GetAttribute(string localName, string namespaceURI); // 0x1005EF68C
	public TextReader GetRemainder(); // 0x1005EF724
	public bool HasLineInfo(); // 0x1005EF828
	public override string LookupNamespace(string prefix); // 0x1005EF830
	private string LookupNamespace(string prefix, bool atomizedNames); // 0x1005EF838
	public override void MoveToAttribute(int i); // 0x1005EF8EC
	public override bool MoveToAttribute(string name); // 0x1005EF9A8
	public override bool MoveToAttribute(string localName, string namespaceName); // 0x1005EFABC
	public override bool MoveToElement(); // 0x1005EFB24
	public override bool MoveToFirstAttribute(); // 0x1005EFB5C
	public override bool MoveToNextAttribute(); // 0x1005EFBFC
	public override bool Read(); // 0x1005EFC7C
	public override bool ReadAttributeValue(); // 0x1005F10C4
	public int ReadChars(char[] buffer, int offset, int length); // 0x1005F11BC
	public override void ResolveEntity(); // 0x1005F166C
	public override void Skip(); // 0x1005F16CC
	internal DTDObjectModel get_DTD(); // 0x1005F16D4
	internal XmlResolver get_Resolver(); // 0x1005F16F0
	private XmlException NotWFError(string message); // 0x1005F1024
	private void Init(); // 0x1005F16F8
	private void Clear(); // 0x1005F1880
	private void InitializeContext(string url, XmlParserContext context, TextReader fragment, XmlNodeType fragType); // 0x1005EEB88
	internal ConformanceLevel get_Conformance(); // 0x1005F1A10
	internal void set_Conformance(ConformanceLevel value); // 0x1005F1A24
	private void SetProperties(XmlNodeType nodeType, string name, string prefix, string localName, bool isEmptyElement, string value, bool clearAttributes); // 0x1005F1A3C
	private void SetTokenProperties(XmlTokenInfo token, XmlNodeType nodeType, string name, string prefix, string localName, bool isEmptyElement, string value, bool clearAttributes); // 0x1005F1AB0
	private void ClearAttributes(); // 0x1005F0268
	private int PeekSurrogate(int c); // 0x1005F1B40
	private int PeekChar(); // 0x1005F1E30
	private int ReadChar(); // 0x1005F1EDC
	private void Advance(int ch); // 0x1005F1F48
	private bool ReadTextReader(int remained); // 0x1005F1C20
	private bool ReadContent(); // 0x1005F0D40
	private void SetEntityReferenceProperties(); // 0x1005F1F94
	private void ReadStartTag(); // 0x1005F2664
	private void PushElementName(string name, string local, string prefix); // 0x1005F4228
	private void ReadEndTag(); // 0x1005F20F8
	private void CheckCurrentStateUpdate(); // 0x1005F45AC
	private void AppendValueChar(int ch); // 0x1005F4A2C
	private void AppendSurrogatePairValueChar(int ch); // 0x1005F4A5C
	private string CreateValueString(); // 0x1005F4AD8
	private void ClearValueBuffer(); // 0x1005EFE74
	private void ReadText(bool notWhitespace); // 0x1005F35B4
	private int ReadReference(bool ignoreEntityReferences); // 0x1005F4CB0
	private int ReadCharacterReference(); // 0x1005F4D0C
	private int ReadEntityReference(bool ignoreEntityReferences); // 0x1005F5320
	private void ReadAttributes(bool isXmlDecl); // 0x1005F3E34
	private void AddAttributeWithValue(string name, string value); // 0x1005F5478
	private void IncrementAttributeToken(); // 0x1005F0278
	private void IncrementAttributeValueToken(); // 0x1005F5630
	private void ReadAttributeValueTokens(int dummyQuoteChar); // 0x1005F0414
	private void CheckAttributeEntityReferenceWFC(string entName); // 0x1005F584C
	private void ReadProcessingInstruction(); // 0x1005F2294
	private void VerifyXmlDeclaration(); // 0x1005F59B0
	private bool SkipWhitespaceInString(string text, int idx); // 0x1005F62D0
	private void ParseAttributeFromString(string src, int idx, out string name, out string value); // 0x1005F5F0C
	internal void SkipTextDeclaration(); // 0x1005EFE94
	private void ReadDeclaration(); // 0x1005F2584
	private void ReadComment(); // 0x1005F63C0
	private void ReadCDATA(); // 0x1005F659C
	private void ReadDoctypeDecl(); // 0x1005F67C4
	internal DTDObjectModel GenerateDTDObjectModel(string name, string publicId, string systemId, string internalSubset); // 0x1005F7550
	internal DTDObjectModel GenerateDTDObjectModel(string name, string publicId, string systemId, string internalSubset, int intSubsetStartLine, int intSubsetStartColumn); // 0x1005F7328
	private DtdInputState get_State(); // 0x1005F7CB4
	private int ReadValueChar(); // 0x1005F7D58
	private void ExpectAndAppend(string s); // 0x1005F7D8C
	private void ReadInternalSubset(); // 0x1005F6D0C
	private string ReadSystemLiteral(bool expectSYSTEM); // 0x1005F6ABC
	private string ReadPubidLiteral(); // 0x1005F6B9C
	private string ReadName(); // 0x1005F5450
	private string ReadName(out string prefix, out string localName); // 0x1005F387C
	private void Expect(int expected); // 0x1005F4328
	private void Expect(string expected); // 0x1005F463C
	private void ExpectAfterWhitespace(char c); // 0x1005F47C0
	private bool SkipWhitespace(); // 0x1005F3D48
	private bool ReadWhitespace(); // 0x1005F336C
	private int ReadCharsInternal(char[] buffer, int offset, int length); // 0x1005F13D8
	private bool ReadUntilEndTag(); // 0x1005F0B88
}

// Namespace: 
internal class XmlTokenInfo // TypeDefIndex: 1829
{
	// Fields
	private string valueCache; // 0x10
	protected XmlTextReader Reader; // 0x18
	public string Name; // 0x20
	public string LocalName; // 0x28
	public string Prefix; // 0x30
	public string NamespaceURI; // 0x38
	public bool IsEmptyElement; // 0x40
	public char QuoteChar; // 0x42
	public int LineNumber; // 0x44
	public int LinePosition; // 0x48
	public int ValueBufferStart; // 0x4C
	public int ValueBufferEnd; // 0x50
	public XmlNodeType NodeType; // 0x54

	// Methods
	public void .ctor(XmlTextReader xtr); // 0x1005F1940
	public virtual string get_Value(); // 0x1005F82E0
	public virtual void set_Value(string value); // 0x1005F8384
	public virtual void Clear(); // 0x1005F824C
}

// Namespace: 
internal class XmlAttributeTokenInfo : XmlTokenInfo // TypeDefIndex: 1830
{
	// Fields
	public int ValueTokenStartIndex; // 0x58
	public int ValueTokenEndIndex; // 0x5C
	private string valueCache; // 0x60
	private StringBuilder tmpBuilder; // 0x68

	// Methods
	public void .ctor(XmlTextReader reader); // 0x1005F57CC
	public override string get_Value(); // 0x1005F7FC8
	public override void set_Value(string value); // 0x1005F8210
	public override void Clear(); // 0x1005F8218
	internal void FillXmlns(); // 0x1005F3FEC
	internal void FillNamespace(); // 0x1005F4140
}

// Namespace: 
private struct TagName // TypeDefIndex: 1831
{
	// Fields
	public readonly string Name; // 0x10
	public readonly string LocalName; // 0x18
	public readonly string Prefix; // 0x20

	// Methods
	public void .ctor(string n, string l, string p); // 0x1005F7EF4
}

// Namespace: 
private sealed class DtdInputState : Enum // TypeDefIndex: 1832
{
	// Fields
	public int value__; // 0x10
	public const DtdInputState Free = 1; // 0x0
	public const DtdInputState ElementDecl = 2; // 0x0
	public const DtdInputState AttlistDecl = 3; // 0x0
	public const DtdInputState EntityDecl = 4; // 0x0
	public const DtdInputState NotationDecl = 5; // 0x0
	public const DtdInputState PI = 6; // 0x0
	public const DtdInputState Comment = 7; // 0x0
	public const DtdInputState InsideSingleQuoted = 8; // 0x0
	public const DtdInputState InsideDoubleQuoted = 9; // 0x0

}

// Namespace: 
private class DtdInputStateStack // TypeDefIndex: 1833
{
	// Fields
	private Stack intern; // 0x10

	// Methods
	public void .ctor(); // 0x1005EEB14
	public DtdInputState Peek(); // 0x1005F7CCC
	public DtdInputState Pop(); // 0x1005F7E68
	public void Push(DtdInputState val); // 0x1005F7DC4
}

// Namespace: System.Xml
public class XmlTextReader : XmlReader, IHasXmlParserContext, IXmlLineInfo, IXmlNamespaceResolver // TypeDefIndex: 1834
{
	// Fields
	private XmlTextReader entity; // 0x20
	private XmlTextReader source; // 0x28
	private bool entityInsideAttribute; // 0x30
	private bool insideAttribute; // 0x31
	private Stack`1<string> entityNameStack; // 0x38

	// Methods
	public void .ctor(Stream input); // 0x100679128
	public void .ctor(TextReader input); // 0x100679198
	public void .ctor(TextReader input, XmlNameTable nt); // 0x100665350
	public void .ctor(string url, Stream input, XmlNameTable nt); // 0x1006792A0
	public void .ctor(string url, TextReader input, XmlNameTable nt); // 0x10067920C
	public void .ctor(string xmlFragment, XmlNodeType fragType, XmlParserContext context); // 0x100665830
	private void .ctor(XmlTextReader entityContainer, bool insideAttribute); // 0x100679328
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x100679364
	private XmlReader get_Current(); // 0x10067952C
	public override int get_AttributeCount(); // 0x100679594
	public override string get_BaseURI(); // 0x1006795EC
	public override bool get_CanResolveEntity(); // 0x100679644
	public override int get_Depth(); // 0x10067964C
	public override bool get_EOF(); // 0x100679758
	public override bool get_HasValue(); // 0x1006797AC
	public override bool get_IsDefault(); // 0x100679804
	public override bool get_IsEmptyElement(); // 0x10067985C
	public override string get_LocalName(); // 0x1006798B4
	public override string get_Name(); // 0x10067990C
	public override string get_NamespaceURI(); // 0x100679964
	public override XmlNameTable get_NameTable(); // 0x1006799BC
	public override XmlNodeType get_NodeType(); // 0x100679A14
	internal XmlParserContext get_ParserContext(); // 0x100679368
	public override string get_Prefix(); // 0x100679AF8
	public override ReadState get_ReadState(); // 0x100679B50
	public override XmlReaderSettings get_Settings(); // 0x100679BC0
	public override string get_Value(); // 0x100679BC8
	public override string get_XmlLang(); // 0x100679C20
	public override XmlSpace get_XmlSpace(); // 0x100679C78
	internal bool get_CharacterChecking(); // 0x100679CD0
	internal void set_CharacterChecking(bool value); // 0x100679CF8
	internal bool get_CloseInput(); // 0x100679D3C
	internal void set_CloseInput(bool value); // 0x100679D64
	internal void set_Conformance(ConformanceLevel value); // 0x100679DA8
	internal XmlResolver get_Resolver(); // 0x100679DEC
	private void CopyProperties(XmlTextReader other); // 0x100679E08
	public EntityHandling get_EntityHandling(); // 0x100679ECC
	public int get_LineNumber(); // 0x100679EE8
	public int get_LinePosition(); // 0x100679F10
	public bool get_Namespaces(); // 0x100679F38
	public bool get_Normalization(); // 0x100679F54
	public void set_Normalization(bool value); // 0x100679F70
	public WhitespaceHandling get_WhitespaceHandling(); // 0x100666FC0
	public void set_WhitespaceHandling(WhitespaceHandling value); // 0x100666FDC
	public void set_XmlResolver(XmlResolver value); // 0x1006653D8
	internal void SkipTextDeclaration(); // 0x100679FB4
	public override void Close(); // 0x100679FDC
	public override string GetAttribute(string name); // 0x10067A068
	public override string GetAttribute(string localName, string namespaceURI); // 0x10067A0D0
	public override string LookupNamespace(string prefix); // 0x10067A140
	public override void MoveToAttribute(int i); // 0x10067A1AC
	public override bool MoveToAttribute(string name); // 0x10067A2CC
	public override bool MoveToAttribute(string localName, string namespaceName); // 0x10067A3B8
	public override bool MoveToElement(); // 0x10067A4B0
	public override bool MoveToFirstAttribute(); // 0x10067A534
	public override bool MoveToNextAttribute(); // 0x10067A608
	public override bool Read(); // 0x10067A6DC
	public override bool ReadAttributeValue(); // 0x10067A884
	public override void ResolveEntity(); // 0x10067A978
	private void CloseEntity(); // 0x10067A23C
	public override void Skip(); // 0x10067AD4C
	public TextReader GetRemainder(); // 0x10067AD50
	public bool HasLineInfo(); // 0x10067ADF0
}

// Namespace: System.Xml
public sealed class XmlTokenizedType : Enum // TypeDefIndex: 1835
{
	// Fields
	public int value__; // 0x10
	public const XmlTokenizedType CDATA = 0; // 0x0
	public const XmlTokenizedType ID = 1; // 0x0
	public const XmlTokenizedType IDREF = 2; // 0x0
	public const XmlTokenizedType IDREFS = 3; // 0x0
	public const XmlTokenizedType ENTITY = 4; // 0x0
	public const XmlTokenizedType ENTITIES = 5; // 0x0
	public const XmlTokenizedType NMTOKEN = 6; // 0x0
	public const XmlTokenizedType NMTOKENS = 7; // 0x0
	public const XmlTokenizedType NOTATION = 8; // 0x0
	public const XmlTokenizedType ENUMERATION = 9; // 0x0
	public const XmlTokenizedType QName = 10; // 0x0
	public const XmlTokenizedType NCName = 11; // 0x0
	public const XmlTokenizedType None = 12; // 0x0

}

// Namespace: System.Xml
public class XmlUrlResolver : XmlResolver // TypeDefIndex: 1836
{
	// Fields
	private ICredentials credential; // 0x10

	// Methods
	public void .ctor(); // 0x10067FD30
	public override object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn); // 0x10067FD38
	public override Uri ResolveUri(Uri baseUri, string relativeUri); // 0x100680150
	private string UnescapeRelativeUriBody(string src); // 0x100680034
}

// Namespace: System.Xml
public class XmlValidatingReader : XmlReader, IHasXmlParserContext, IXmlLineInfo, IXmlNamespaceResolver // TypeDefIndex: 1837
{
	// Fields
	private EntityHandling entityHandling; // 0x20
	private XmlReader sourceReader; // 0x28
	private XmlTextReader xmlTextReader; // 0x30
	private XmlReader validatingReader; // 0x38
	private XmlResolver resolver; // 0x40
	private bool resolverSpecified; // 0x48
	private ValidationType validationType; // 0x4C
	private XmlSchemaCollection schemas; // 0x50
	private DTDValidatingReader dtdReader; // 0x58
	private IHasXmlSchemaInfo schemaInfo; // 0x60
	private StringBuilder storedCharacters; // 0x68
	private ValidationEventHandler ValidationEventHandler; // 0x70

	// Methods
	public void .ctor(XmlReader reader); // 0x100680158
	private XmlParserContext Mono.Xml.IHasXmlParserContext.get_ParserContext(); // 0x100680248
	public override int get_AttributeCount(); // 0x100680370
	public override string get_BaseURI(); // 0x1006803D4
	public override bool get_CanResolveEntity(); // 0x100680430
	public override int get_Depth(); // 0x100680438
	public EntityHandling get_EntityHandling(); // 0x10068049C
	public void set_EntityHandling(EntityHandling value); // 0x1006804A4
	public override bool get_EOF(); // 0x1006804BC
	public override bool get_HasValue(); // 0x100680520
	public override bool get_IsDefault(); // 0x100680584
	public override bool get_IsEmptyElement(); // 0x1006805E8
	public int get_LineNumber(); // 0x10068064C
	public int get_LinePosition(); // 0x10068078C
	public override string get_LocalName(); // 0x1006808D0
	public override string get_Name(); // 0x1006809D8
	public bool get_Namespaces(); // 0x1006809C0
	public override string get_NamespaceURI(); // 0x100680A8C
	public override XmlNameTable get_NameTable(); // 0x100680B60
	public override XmlNodeType get_NodeType(); // 0x100680BBC
	public override string get_Prefix(); // 0x100680C20
	public override ReadState get_ReadState(); // 0x100680CD4
	internal XmlResolver get_Resolver(); // 0x100680D38
	public XmlSchemaCollection get_Schemas(); // 0x100680D64
	public override XmlReaderSettings get_Settings(); // 0x100680E04
	public ValidationType get_ValidationType(); // 0x100680E60
	public void set_ValidationType(ValidationType value); // 0x100680E68
	public override string get_Value(); // 0x100680F64
	public override string get_XmlLang(); // 0x100681018
	public override XmlSpace get_XmlSpace(); // 0x1006810CC
	public override void Close(); // 0x100681130
	public override string GetAttribute(string name); // 0x10068118C
	public override string GetAttribute(string localName, string namespaceName); // 0x100681204
	public bool HasLineInfo(); // 0x100681284
	public override string LookupNamespace(string prefix); // 0x100681394
	public override void MoveToAttribute(int i); // 0x100681404
	public override bool MoveToAttribute(string name); // 0x1006814C0
	public override bool MoveToAttribute(string localName, string namespaceName); // 0x10068153C
	public override bool MoveToElement(); // 0x1006815C0
	public override bool MoveToFirstAttribute(); // 0x100681628
	public override bool MoveToNextAttribute(); // 0x100681690
	public override bool Read(); // 0x1006816F8
	public override bool ReadAttributeValue(); // 0x100681A54
	public override void ResolveEntity(); // 0x100681ABC
	internal void OnValidationEvent(object o, ValidationEventArgs e); // 0x100681B14
}

// Namespace: System.Xml
public class XmlWhitespace : XmlCharacterData // TypeDefIndex: 1838
{
	// Methods
	protected internal void .ctor(string strData, XmlDocument doc); // 0x100681B88
	public override string get_LocalName(); // 0x100681B90
	public override string get_Name(); // 0x100681BD8
	public override XmlNodeType get_NodeType(); // 0x100681C20
	public override string get_Value(); // 0x100681C28
	public override void set_Value(string value); // 0x100681C78
	public override XmlNode get_ParentNode(); // 0x100681D60
	public override XmlNode CloneNode(bool deep); // 0x100681D68
	public override void WriteContentTo(XmlWriter w); // 0x100681E2C
	public override void WriteTo(XmlWriter w); // 0x100681E30
}

// Namespace: System.Xml
public abstract class XmlWriter : IDisposable // TypeDefIndex: 1839
{
	// Fields
	private XmlWriterSettings settings; // 0x10

	// Methods
	protected void .ctor(); // 0x100681EC0
	private void System.IDisposable.Dispose(); // 0x100681EC8
	public virtual XmlWriterSettings get_Settings(); // 0x100681F18
	public virtual string get_XmlLang(); // 0x100681FB4
	public virtual XmlSpace get_XmlSpace(); // 0x100681FBC
	public abstract void Close(); // 0
	protected virtual void Dispose(bool disposing); // 0x100681FC4
	public abstract string LookupPrefix(string ns); // 0
	private void WriteAttribute(XmlReader reader, bool defattr); // 0x100682010
	public void WriteAttributeString(string localName, string value); // 0x1006822B0
	public void WriteAttributeString(string prefix, string localName, string ns, string value); // 0x10068233C
	public abstract void WriteCData(string text); // 0
	public abstract void WriteComment(string text); // 0
	public abstract void WriteDocType(string name, string pubid, string sysid, string subset); // 0
	public void WriteElementString(string localName, string value); // 0x100682420
	public abstract void WriteEndAttribute(); // 0
	public abstract void WriteEndElement(); // 0
	public abstract void WriteEntityRef(string name); // 0
	public abstract void WriteFullEndElement(); // 0
	public virtual void WriteName(string name); // 0x100682520
	internal void WriteNameInternal(string name); // 0x100682524
	public virtual void WriteNode(XmlReader reader, bool defattr); // 0x100682618
	public abstract void WriteProcessingInstruction(string name, string text); // 0
	public abstract void WriteRaw(string data); // 0
	public abstract void WriteStartAttribute(string prefix, string localName, string ns); // 0
	public void WriteStartElement(string localName); // 0x1006824BC
	public abstract void WriteStartElement(string prefix, string localName, string ns); // 0
	public abstract void WriteString(string text); // 0
	public abstract void WriteWhitespace(string ws); // 0
}

// Namespace: System.Xml
public sealed class XmlWriterSettings // TypeDefIndex: 1840
{
	// Fields
	private bool checkCharacters; // 0x10
	private bool closeOutput; // 0x11
	private ConformanceLevel conformance; // 0x14
	private Encoding encoding; // 0x18
	private bool indent; // 0x20
	private string indentChars; // 0x28
	private string newLineChars; // 0x30
	private bool newLineOnAttributes; // 0x38
	private NewLineHandling newLineHandling; // 0x3C
	private bool omitXmlDeclaration; // 0x40
	private XmlOutputMethod outputMethod; // 0x44

	// Methods
	public void .ctor(); // 0x100681F8C
	public void Reset(); // 0x100682F3C
	public ConformanceLevel get_ConformanceLevel(); // 0x100682610
}

// Namespace: System.Xml
public class XmlTextWriter : XmlWriter // TypeDefIndex: 1841
{
	// Fields
	private static readonly Encoding unmarked_utf8encoding; // 0x0
	private static char[] escaped_text_chars; // 0x8
	private static char[] escaped_attr_chars; // 0x10
	private Stream base_stream; // 0x18
	private TextWriter source; // 0x20
	private TextWriter writer; // 0x28
	private StringWriter preserver; // 0x30
	private string preserved_name; // 0x38
	private bool is_preserved_xmlns; // 0x40
	private bool allow_doc_fragment; // 0x41
	private bool close_output_stream; // 0x42
	private bool ignore_encoding; // 0x43
	private bool namespaces; // 0x44
	private XmlDeclState xmldecl_state; // 0x48
	private bool check_character_validity; // 0x4C
	private NewLineHandling newline_handling; // 0x50
	private bool is_document_entity; // 0x54
	private WriteState state; // 0x58
	private XmlNodeType node_state; // 0x5C
	private XmlNamespaceManager nsmanager; // 0x60
	private int open_count; // 0x68
	private XmlNodeInfo[] elements; // 0x70
	private Stack new_local_namespaces; // 0x78
	private ArrayList explicit_nsdecls; // 0x80
	private NamespaceHandling namespace_handling; // 0x88
	private bool indent; // 0x8C
	private int indent_count; // 0x90
	private char indent_char; // 0x94
	private string indent_string; // 0x98
	private string newline; // 0xA0
	private bool indent_attributes; // 0xA8
	private char quote_char; // 0xAA
	private bool v2; // 0xAC
	private static Dictionary`2<string, int> <>f__switch$map3A; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map3B; // 0x20

	// Methods
	public void .ctor(TextWriter writer); // 0x10066F740
	private static void .cctor(); // 0x10067B08C
	private void Initialize(TextWriter writer); // 0x10067ADF8
	public void set_Formatting(Formatting value); // 0x10067B100
	public override string get_XmlLang(); // 0x10067B110
	public override XmlSpace get_XmlSpace(); // 0x10067B16C
	public override string LookupPrefix(string namespaceUri); // 0x10067B1C8
	public override void Close(); // 0x10067B3A0
	private void WriteStartDocumentCore(bool outputStd, bool standalone); // 0x10067B484
	public override void WriteDocType(string name, string pubid, string sysid, string subset); // 0x10067B9D8
	public override void WriteStartElement(string prefix, string localName, string namespaceUri); // 0x10067BEB8
	private void CloseStartElement(); // 0x10067C5C8
	private void CloseStartElementCore(); // 0x10067C640
	public override void WriteEndElement(); // 0x10067CCFC
	public override void WriteFullEndElement(); // 0x10067CFEC
	private void WriteEndElementCore(bool full); // 0x10067CD04
	public override void WriteStartAttribute(string prefix, string localName, string namespaceUri); // 0x10067D000
	private string DetermineAttributePrefix(string prefix, string local, string ns); // 0x10067D634
	private string MockupPrefix(string ns, bool skipLookup); // 0x10067D950
	public override void WriteEndAttribute(); // 0x10067DD44
	public override void WriteComment(string text); // 0x10067E4BC
	public override void WriteProcessingInstruction(string name, string text); // 0x10067E86C
	public override void WriteWhitespace(string text); // 0x10067EAF8
	public override void WriteCData(string text); // 0x10067EC08
	public override void WriteString(string text); // 0x10067EFAC
	public override void WriteRaw(string raw); // 0x10067F050
	public override void WriteEntityRef(string name); // 0x10067F114
	public override void WriteName(string name); // 0x10067F274
	private void WriteIndent(); // 0x10067BEAC
	private void WriteIndentEndElement(); // 0x10067CFF4
	private void WriteIndentAttribute(); // 0x10067D8D4
	private bool WriteIndentCore(int nestFix, bool attribute); // 0x10067F348
	private void OutputAutoStartDocument(); // 0x10067BE94
	private void ShiftStateTopLevel(string occured, bool allowAttribute, bool dontCheckXmlDecl, bool isCharacter); // 0x10067E770
	private void CheckMixedContentState(); // 0x10067F488
	private void ShiftStateContent(string occured, bool allowAttribute); // 0x10067ED88
	private void WriteEscapedString(string text, bool isAttribute); // 0x10067CBE0
	private void WriteCheckedString(string s); // 0x10067EE68
	private void WriteCheckedBuffer(char[] text, int idx, int length); // 0x10067F4E0
	private void WriteEscapedBuffer(char[] text, int index, int length, bool isAttribute); // 0x10067F7EC
	private Exception ArgumentError(string msg); // 0x10067B328
	private Exception InvalidOperation(string msg); // 0x10067B960
	private Exception StateError(string occured); // 0x10067B8A0
}

// Namespace: 
private class XmlNodeInfo // TypeDefIndex: 1842
{
	// Fields
	public string Prefix; // 0x10
	public string LocalName; // 0x18
	public string NS; // 0x20
	public bool HasSimple; // 0x28
	public bool HasElements; // 0x29
	public string XmlLang; // 0x30
	public XmlSpace XmlSpace; // 0x38

	// Methods
	public void .ctor(); // 0x10067C638
}

// Namespace: 
internal class StringUtil // TypeDefIndex: 1843
{
	// Fields
	private static CultureInfo cul; // 0x0
	private static CompareInfo cmp; // 0x8

	// Methods
	private static void .cctor(); // 0x10067FC64
	public static int IndexOf(string src, string target); // 0x10067E6B8
	public static string Format(string format, object[] args); // 0x10067DC98
}

// Namespace: 
private sealed class XmlDeclState : Enum // TypeDefIndex: 1844
{
	// Fields
	public int value__; // 0x10
	public const XmlDeclState Allow = 0; // 0x0
	public const XmlDeclState Ignore = 1; // 0x0
	public const XmlDeclState Auto = 2; // 0x0
	public const XmlDeclState Prohibit = 3; // 0x0

}

// Namespace: System.Xml
internal class XmlStreamReader : NonBlockingStreamReader // TypeDefIndex: 1845
{
	// Fields
	private XmlInputStream input; // 0x68
	private static XmlException invalidDataException; // 0x0

	// Methods
	private void .ctor(XmlInputStream input); // 0x100678B1C
	public void .ctor(Stream input); // 0x100678BD8
	private static void .cctor(); // 0x100678C48
	public override void Close(); // 0x100678CBC
	public override int Read(out char[] dest_buffer, int index, int count); // 0x100678D10
	protected override void Dispose(bool disposing); // 0x100678E20
}

// Namespace: System.Xml
internal class NonBlockingStreamReader : TextReader // TypeDefIndex: 1846
{
	// Fields
	private byte[] input_buffer; // 0x18
	private char[] decoded_buffer; // 0x20
	private int decoded_count; // 0x28
	private int pos; // 0x2C
	private int buffer_size; // 0x30
	private Encoding encoding; // 0x38
	private Decoder decoder; // 0x40
	private Stream base_stream; // 0x48
	private bool mayBlock; // 0x50
	private StringBuilder line_builder; // 0x58
	private bool foundCR; // 0x60

	// Methods
	public void .ctor(Stream stream, Encoding encoding); // 0x1005FEAB8
	public Encoding get_Encoding(); // 0x1005F63B8
	public override void Close(); // 0x1005FEBE8
	protected override void Dispose(bool disposing); // 0x1005FEC38
	private int ReadBuffer(); // 0x1005FECB0
	public override int Peek(); // 0x1005FEDA0
	public override int Read(); // 0x1005FEE7C
	public override int Read(out char[] dest_buffer, int index, int count); // 0x1005FEF5C
	private int FindNextEOL(); // 0x1005FF144
	public override string ReadLine(); // 0x1005FF200
	public override string ReadToEnd(); // 0x1005FF448
}

// Namespace: System.Xml
internal class XmlInputStream : Stream // TypeDefIndex: 1847
{
	// Fields
	public static readonly Encoding StrictUTF8; // 0x0
	private Encoding enc; // 0x18
	private Stream stream; // 0x20
	private byte[] buffer; // 0x28
	private int bufLength; // 0x30
	private int bufPos; // 0x34
	private static XmlException encodingException; // 0x8

	// Methods
	public void .ctor(Stream stream); // 0x10066B9FC
	private static void .cctor(); // 0x10066BEF8
	private static string GetStringFromBytes(byte[] bytes, int index, int count); // 0x10066BF9C
	private void Initialize(Stream stream); // 0x10066BA7C
	private int ReadByteSpecial(); // 0x10066C068
	private int SkipWhitespace(); // 0x10066C1E8
	public Encoding get_ActualEncoding(); // 0x10066C274
	public override bool get_CanRead(); // 0x10066C27C
	public override bool get_CanSeek(); // 0x10066C2F0
	public override bool get_CanWrite(); // 0x10066C2F8
	public override long get_Length(); // 0x10066C300
	public override long get_Position(); // 0x10066C354
	public override void set_Position(long value); // 0x10066C3B4
	public override void Close(); // 0x10066C43C
	public override void Flush(); // 0x10066C490
	public override int Read(byte[] buffer, int offset, int count); // 0x10066C4E4
	public override int ReadByte(); // 0x10066C5DC
	public override long Seek(long offset, SeekOrigin origin); // 0x10066C67C
	public override void SetLength(long value); // 0x10066C780
	public override void Write(byte[] buffer, int offset, int count); // 0x10066C7E4
}

// Namespace: System.Xml
internal class XmlParserInput // TypeDefIndex: 1848
{
	// Fields
	private Stack sourceStack; // 0x10
	private XmlParserInputSource source; // 0x18
	private bool has_peek; // 0x20
	private int peek_char; // 0x24
	private bool allowTextDecl; // 0x28

	// Methods
	public void .ctor(TextReader reader, string baseURI); // 0x1006764DC
	public void .ctor(TextReader reader, string baseURI, int line, int column); // 0x1006764E8
	public void Close(); // 0x1006765FC
	public void PushPEBuffer(DTDParameterEntityDeclaration pe); // 0x100676740
	private int ReadSourceChar(); // 0x100676848
	public int PeekChar(); // 0x100676A38
	public int ReadChar(); // 0x100676AC0
	public string get_BaseURI(); // 0x100676AE4
	public bool get_HasPEBuffer(); // 0x100676B00
	public int get_LineNumber(); // 0x100676B58
	public int get_LinePosition(); // 0x100676B7C
	public bool get_AllowTextDecl(); // 0x100676BA0
	public void set_AllowTextDecl(bool value); // 0x100676BA8
}

// Namespace: 
private class XmlParserInputSource // TypeDefIndex: 1849
{
	// Fields
	public readonly string BaseURI; // 0x10
	private readonly TextReader reader; // 0x18
	public int state; // 0x20
	public bool isPE; // 0x24
	private int line; // 0x28
	private int column; // 0x2C

	// Methods
	public void .ctor(TextReader reader, string baseUri, bool pe, int line, int column); // 0x1006765A8
	public int get_LineNumber(); // 0x100676B74
	public int get_LinePosition(); // 0x100676B98
	public void Close(); // 0x1006766EC
	public int Read(); // 0x100676964
}

// Namespace: System.Xml.XPath
public interface IXPathNavigable // TypeDefIndex: 1850
{
}

// Namespace: Mono.Xml.Schema
internal sealed class XsdWhitespaceFacet : Enum // TypeDefIndex: 1851
{
	// Fields
	public int value__; // 0x10
	public const XsdWhitespaceFacet Preserve = 0; // 0x0
	public const XsdWhitespaceFacet Replace = 1; // 0x0
	public const XsdWhitespaceFacet Collapse = 2; // 0x0

}

// Namespace: Mono.Xml.Schema
internal sealed class XsdOrdering : Enum // TypeDefIndex: 1852
{
	// Fields
	public int value__; // 0x10
	public const XsdOrdering LessThan = -1; // 0x0
	public const XsdOrdering Equal = 0; // 0x0
	public const XsdOrdering GreaterThan = 1; // 0x0
	public const XsdOrdering Indeterminate = 2; // 0x0

}

// Namespace: Mono.Xml.Schema
internal class XsdAnySimpleType : XmlSchemaDatatype // TypeDefIndex: 1853
{
	// Fields
	private static XsdAnySimpleType instance; // 0x0
	private static readonly char[] whitespaceArray; // 0x8
	internal static readonly Facet booleanAllowedFacets; // 0x10
	internal static readonly Facet decimalAllowedFacets; // 0x14
	internal static readonly Facet durationAllowedFacets; // 0x18
	internal static readonly Facet stringAllowedFacets; // 0x1C

	// Methods
	protected void .ctor(); // 0x1005D5640
	private static void .cctor(); // 0x1005D6538
	public static XsdAnySimpleType get_Instance(); // 0x1005D65FC
	public override XmlTypeCode get_TypeCode(); // 0x1005D6664
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D666C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D6674
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D667C
	internal string[] ParseListValue(string s, XmlNameTable nameTable); // 0x1005D6710
	internal bool AllowsFacet(XmlSchemaFacet xsf); // 0x1005D67B0
	internal virtual XsdOrdering Compare(object x, object y); // 0x1005D6834
	internal virtual int Length(string s); // 0x1005D683C
	internal virtual Facet get_AllowedFacets(); // 0x1005D6858
}

// Namespace: Mono.Xml.Schema
internal class XdtAnyAtomicType : XsdAnySimpleType // TypeDefIndex: 1854
{
	// Methods
	internal void .ctor(); // 0x1005D55DC
	public override XmlTypeCode get_TypeCode(); // 0x1005D56A8
}

// Namespace: Mono.Xml.Schema
internal class XdtUntypedAtomic : XdtAnyAtomicType // TypeDefIndex: 1855
{
	// Methods
	internal void .ctor(); // 0x1005D5850
	public override XmlTypeCode get_TypeCode(); // 0x1005D5854
}

// Namespace: Mono.Xml.Schema
internal class XsdString : XsdAnySimpleType // TypeDefIndex: 1856
{
	// Methods
	internal void .ctor(); // 0x1005E0D5C
	internal override Facet get_AllowedFacets(); // 0x1005E0DC4
	public override XmlTokenizedType get_TokenizedType(); // 0x1005E0E2C
	public override XmlTypeCode get_TypeCode(); // 0x1005E0E34
}

// Namespace: Mono.Xml.Schema
internal class XsdNormalizedString : XsdString // TypeDefIndex: 1857
{
	// Methods
	internal void .ctor(); // 0x1005DF588
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DF5B4
	public override XmlTypeCode get_TypeCode(); // 0x1005DF5BC
}

// Namespace: Mono.Xml.Schema
internal class XsdToken : XsdNormalizedString // TypeDefIndex: 1858
{
	// Methods
	internal void .ctor(); // 0x1005E1894
	public override XmlTokenizedType get_TokenizedType(); // 0x1005E18C0
	public override XmlTypeCode get_TypeCode(); // 0x1005E18C8
}

// Namespace: Mono.Xml.Schema
internal class XsdLanguage : XsdToken // TypeDefIndex: 1859
{
	// Methods
	internal void .ctor(); // 0x1005DE870
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DE878
	public override XmlTypeCode get_TypeCode(); // 0x1005DE880
}

// Namespace: Mono.Xml.Schema
internal class XsdNMToken : XsdToken // TypeDefIndex: 1860
{
	// Methods
	internal void .ctor(); // 0x1005DEF8C
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DEF94
	public override XmlTypeCode get_TypeCode(); // 0x1005DEF9C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEFA4
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF090
}

// Namespace: Mono.Xml.Schema
internal class XsdNMTokens : XsdNMToken // TypeDefIndex: 1861
{
	// Methods
	internal void .ctor(); // 0x1005DF174
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DF17C
	public override XmlTypeCode get_TypeCode(); // 0x1005DF184
	public override object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x1005DF18C
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF29C
	private string[] GetValidatedArray(string value, XmlNameTable nt); // 0x1005DF190
}

// Namespace: Mono.Xml.Schema
internal class XsdName : XsdToken // TypeDefIndex: 1862
{
	// Methods
	internal void .ctor(); // 0x1005DA198
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DEA90
	public override XmlTypeCode get_TypeCode(); // 0x1005DEA98
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEAA0
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEB8C
}

// Namespace: Mono.Xml.Schema
internal class XsdNCName : XsdName // TypeDefIndex: 1863
{
	// Methods
	internal void .ctor(); // 0x1005DEC70
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DEC78
	public override XmlTypeCode get_TypeCode(); // 0x1005DEC80
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEC88
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DED74
}

// Namespace: Mono.Xml.Schema
internal class XsdID : XsdName // TypeDefIndex: 1864
{
	// Methods
	internal void .ctor(); // 0x1005DB7B4
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DB7BC
	public override XmlTypeCode get_TypeCode(); // 0x1005DB7C4
	public override object ParseValue(string s, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x1005DB7CC
}

// Namespace: Mono.Xml.Schema
internal class XsdIDRef : XsdName // TypeDefIndex: 1865
{
	// Methods
	internal void .ctor(); // 0x1005DC19C
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DC1A4
	public override XmlTypeCode get_TypeCode(); // 0x1005DC1AC
	public override object ParseValue(string s, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x1005DC1B4
}

// Namespace: Mono.Xml.Schema
internal class XsdIDRefs : XsdName // TypeDefIndex: 1866
{
	// Methods
	internal void .ctor(); // 0x1005DC2A0
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DC2A8
	public override XmlTypeCode get_TypeCode(); // 0x1005DC2B0
	public override object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x1005DC2B8
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DC394
	private string[] GetValidatedArray(string value, XmlNameTable nt); // 0x1005DC2BC
}

// Namespace: Mono.Xml.Schema
internal class XsdEntity : XsdName // TypeDefIndex: 1867
{
	// Methods
	internal void .ctor(); // 0x1005DA350
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DA358
	public override XmlTypeCode get_TypeCode(); // 0x1005DA360
}

// Namespace: Mono.Xml.Schema
internal class XsdEntities : XsdName // TypeDefIndex: 1868
{
	// Methods
	internal void .ctor(); // 0x1005DA190
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DA1A0
	public override XmlTypeCode get_TypeCode(); // 0x1005DA1A8
	public override object ParseValue(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x1005DA1B0
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DA2C0
	private string[] GetValidatedArray(string value, XmlNameTable nt); // 0x1005DA1B4
}

// Namespace: Mono.Xml.Schema
internal class XsdNotation : XsdAnySimpleType // TypeDefIndex: 1869
{
	// Methods
	internal void .ctor(); // 0x1005DF5C4
	internal override Facet get_AllowedFacets(); // 0x1005DF628
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DF690
	public override XmlTypeCode get_TypeCode(); // 0x1005DF698
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF6A0
}

// Namespace: Mono.Xml.Schema
internal class XsdDecimal : XsdAnySimpleType // TypeDefIndex: 1870
{
	// Methods
	internal void .ctor(); // 0x1005D916C
	internal override Facet get_AllowedFacets(); // 0x1005D91DC
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D9244
	public override XmlTypeCode get_TypeCode(); // 0x1005D924C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D9254
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D92C8
	internal override XsdOrdering Compare(object x, object y); // 0x1005D9378
}

// Namespace: Mono.Xml.Schema
internal class XsdInteger : XsdDecimal // TypeDefIndex: 1871
{
	// Methods
	public void .ctor(); // 0x1005DC634
	public override XmlTypeCode get_TypeCode(); // 0x1005DC638
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DC640
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DC6B4
}

// Namespace: Mono.Xml.Schema
internal class XsdLong : XsdInteger // TypeDefIndex: 1872
{
	// Methods
	public void .ctor(); // 0x1005DC428
	public override XmlTypeCode get_TypeCode(); // 0x1005DE888
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DE890
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DE904
	internal override XsdOrdering Compare(object x, object y); // 0x1005DE9B4
}

// Namespace: Mono.Xml.Schema
internal class XsdInt : XsdLong // TypeDefIndex: 1873
{
	// Methods
	public void .ctor(); // 0x1005DC424
	public override XmlTypeCode get_TypeCode(); // 0x1005DC42C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DC434
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DC4A8
	internal override XsdOrdering Compare(object x, object y); // 0x1005DC558
}

// Namespace: Mono.Xml.Schema
internal class XsdShort : XsdInt // TypeDefIndex: 1874
{
	// Methods
	public void .ctor(); // 0x1005E0AF8
	public override XmlTypeCode get_TypeCode(); // 0x1005E0B00
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E0B08
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E0B7C
	internal override XsdOrdering Compare(object x, object y); // 0x1005E0C80
}

// Namespace: Mono.Xml.Schema
internal class XsdByte : XsdShort // TypeDefIndex: 1875
{
	// Methods
	public void .ctor(); // 0x1005D7FB4
	public override XmlTypeCode get_TypeCode(); // 0x1005D7FBC
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D7FC4
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D8038
	internal override XsdOrdering Compare(object x, object y); // 0x1005D80E8
}

// Namespace: Mono.Xml.Schema
internal class XsdNonNegativeInteger : XsdInteger // TypeDefIndex: 1876
{
	// Methods
	public void .ctor(); // 0x1005DF32C
	public override XmlTypeCode get_TypeCode(); // 0x1005DF330
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF338
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF3AC
}

// Namespace: Mono.Xml.Schema
internal class XsdUnsignedLong : XsdNonNegativeInteger // TypeDefIndex: 1877
{
	// Methods
	public void .ctor(); // 0x1005E1AEC
	public override XmlTypeCode get_TypeCode(); // 0x1005E1CF8
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1D00
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1D74
	internal override XsdOrdering Compare(object x, object y); // 0x1005E1E20
}

// Namespace: Mono.Xml.Schema
internal class XsdUnsignedInt : XsdUnsignedLong // TypeDefIndex: 1878
{
	// Methods
	public void .ctor(); // 0x1005E1AE4
	public override XmlTypeCode get_TypeCode(); // 0x1005E1AF4
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1AFC
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1B70
	internal override XsdOrdering Compare(object x, object y); // 0x1005E1C1C
}

// Namespace: Mono.Xml.Schema
internal class XsdUnsignedShort : XsdUnsignedInt // TypeDefIndex: 1879
{
	// Methods
	public void .ctor(); // 0x1005E18D8
	public override XmlTypeCode get_TypeCode(); // 0x1005E1EFC
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1F04
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1F78
	internal override XsdOrdering Compare(object x, object y); // 0x1005E2024
}

// Namespace: Mono.Xml.Schema
internal class XsdUnsignedByte : XsdUnsignedShort // TypeDefIndex: 1880
{
	// Methods
	public void .ctor(); // 0x1005E18D0
	public override XmlTypeCode get_TypeCode(); // 0x1005E18E0
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E18E8
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E195C
	internal override XsdOrdering Compare(object x, object y); // 0x1005E1A08
}

// Namespace: Mono.Xml.Schema
internal class XsdPositiveInteger : XsdNonNegativeInteger // TypeDefIndex: 1881
{
	// Methods
	public void .ctor(); // 0x1005DFAFC
	public override XmlTypeCode get_TypeCode(); // 0x1005DFB00
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DFB08
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DFB7C
}

// Namespace: Mono.Xml.Schema
internal class XsdNonPositiveInteger : XsdInteger // TypeDefIndex: 1882
{
	// Methods
	public void .ctor(); // 0x1005DEE5C
	public override XmlTypeCode get_TypeCode(); // 0x1005DF45C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF464
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DF4D8
}

// Namespace: Mono.Xml.Schema
internal class XsdNegativeInteger : XsdNonPositiveInteger // TypeDefIndex: 1883
{
	// Methods
	public void .ctor(); // 0x1005DEE58
	public override XmlTypeCode get_TypeCode(); // 0x1005DEE60
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEE68
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DEEDC
}

// Namespace: Mono.Xml.Schema
internal class XsdFloat : XsdAnySimpleType // TypeDefIndex: 1884
{
	// Methods
	internal void .ctor(); // 0x1005DA368
	public override XmlTypeCode get_TypeCode(); // 0x1005DA3D8
	internal override Facet get_AllowedFacets(); // 0x1005DA3E0
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DA448
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DA4BC
	internal override XsdOrdering Compare(object x, object y); // 0x1005DA56C
}

// Namespace: Mono.Xml.Schema
internal class XsdDouble : XsdAnySimpleType // TypeDefIndex: 1885
{
	// Methods
	internal void .ctor(); // 0x1005D945C
	internal override Facet get_AllowedFacets(); // 0x1005D94CC
	public override XmlTypeCode get_TypeCode(); // 0x1005D9534
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D953C
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D95B0
	internal override XsdOrdering Compare(object x, object y); // 0x1005D9660
}

// Namespace: Mono.Xml.Schema
internal class XsdBase64Binary : XsdString // TypeDefIndex: 1886
{
	// Fields
	private static string ALPHABET; // 0x0
	private static byte[] decodeTable; // 0x8

	// Methods
	internal void .ctor(); // 0x1005D77C8
	private static void .cctor(); // 0x1005D77D0
	public override XmlTypeCode get_TypeCode(); // 0x1005D7958
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D7960
	internal override int Length(string s); // 0x1005D7A30
	protected static bool isPad(char octect); // 0x1005D7C4C
	protected static bool isData(char octect); // 0x1005D7BA4
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D7C58
}

// Namespace: Mono.Xml.Schema
internal class XsdHexBinary : XsdAnySimpleType // TypeDefIndex: 1887
{
	// Methods
	internal void .ctor(); // 0x1005DB500
	internal override Facet get_AllowedFacets(); // 0x1005DB570
	public override XmlTypeCode get_TypeCode(); // 0x1005DB5D8
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DB5E0
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB5E8
	internal override int Length(string s); // 0x1005DB674
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB6D0
}

// Namespace: Mono.Xml.Schema
internal class XsdQName : XsdName // TypeDefIndex: 1888
{
	// Methods
	internal void .ctor(); // 0x1005DFC2C
	public override XmlTokenizedType get_TokenizedType(); // 0x1005DFC34
	public override XmlTypeCode get_TypeCode(); // 0x1005DFC3C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DFC44
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DFDB0
}

// Namespace: Mono.Xml.Schema
internal class XsdBoolean : XsdAnySimpleType // TypeDefIndex: 1889
{
	// Methods
	internal void .ctor(); // 0x1005D7D3C
	internal override Facet get_AllowedFacets(); // 0x1005D7DAC
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D7E14
	public override XmlTypeCode get_TypeCode(); // 0x1005D7E88
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D7E90
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D7F04
}

// Namespace: Mono.Xml.Schema
internal class XsdAnyURI : XsdString // TypeDefIndex: 1890
{
	// Methods
	public void .ctor(); // 0x1005D68C0
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D68C8
	public override XmlTypeCode get_TypeCode(); // 0x1005D68D0
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D68D8
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D6968
}

// Namespace: Mono.Xml.Schema
internal class XmlSchemaUri : Uri // TypeDefIndex: 1891
{
	// Fields
	public string value; // 0x98

	// Methods
	public void .ctor(string src); // 0x1005D598C
	private void .ctor(string src, bool formal); // 0x1005D5ADC
	private static bool HasValidScheme(string src); // 0x1005D59BC
	public override bool Equals(object obj); // 0x1005D5BCC
	public override int GetHashCode(); // 0x1005D5D04
	public override string ToString(); // 0x1005D5D20
	public static bool op_Equality(XmlSchemaUri v1, XmlSchemaUri v2); // 0x1005D5C74
}

// Namespace: Mono.Xml.Schema
internal class XsdDuration : XsdAnySimpleType // TypeDefIndex: 1892
{
	// Methods
	internal void .ctor(); // 0x1005D56B4
	internal override Facet get_AllowedFacets(); // 0x1005D9744
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D97AC
	public override XmlTypeCode get_TypeCode(); // 0x1005D97B4
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D97BC
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D9830
	internal override XsdOrdering Compare(object x, object y); // 0x1005D98E0
}

// Namespace: Mono.Xml.Schema
internal class XdtDayTimeDuration : XsdDuration // TypeDefIndex: 1893
{
	// Methods
	internal void .ctor(); // 0x1005D56B0
	public override XmlTypeCode get_TypeCode(); // 0x1005D5724
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D572C
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D57A0
}

// Namespace: Mono.Xml.Schema
internal class XdtYearMonthDuration : XsdDuration // TypeDefIndex: 1894
{
	// Methods
	internal void .ctor(); // 0x1005D585C
	public override XmlTypeCode get_TypeCode(); // 0x1005D5860
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D5868
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D58DC
}

// Namespace: Mono.Xml.Schema
internal class XsdDateTime : XsdAnySimpleType // TypeDefIndex: 1895
{
	// Methods
	internal void .ctor(); // 0x1005D8E7C
	internal override Facet get_AllowedFacets(); // 0x1005D8EEC
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D8F54
	public override XmlTypeCode get_TypeCode(); // 0x1005D8F5C
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D8F64
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D8FD8
	internal override XsdOrdering Compare(object x, object y); // 0x1005D9088
}

// Namespace: Mono.Xml.Schema
internal class XsdDate : XsdAnySimpleType // TypeDefIndex: 1896
{
	// Methods
	internal void .ctor(); // 0x1005D8B84
	internal override Facet get_AllowedFacets(); // 0x1005D8BF4
	public override XmlTokenizedType get_TokenizedType(); // 0x1005D8C5C
	public override XmlTypeCode get_TypeCode(); // 0x1005D8C64
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D8C6C
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005D8CE0
	internal override XsdOrdering Compare(object x, object y); // 0x1005D8D98
}

// Namespace: Mono.Xml.Schema
internal class XsdTime : XsdAnySimpleType // TypeDefIndex: 1897
{
	// Fields
	private static string[] timeFormats; // 0x0

	// Methods
	internal void .ctor(); // 0x1005E0E3C
	private static void .cctor(); // 0x1005E0EB0
	internal override Facet get_AllowedFacets(); // 0x1005E15E8
	public override XmlTokenizedType get_TokenizedType(); // 0x1005E1650
	public override XmlTypeCode get_TypeCode(); // 0x1005E1658
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E1660
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005E16D4
	internal override XsdOrdering Compare(object x, object y); // 0x1005E17B0
}

// Namespace: Mono.Xml.Schema
internal class XsdGYearMonth : XsdAnySimpleType // TypeDefIndex: 1898
{
	// Methods
	internal void .ctor(); // 0x1005DB210
	internal override Facet get_AllowedFacets(); // 0x1005DB280
	public override XmlTypeCode get_TypeCode(); // 0x1005DB2E8
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB2F0
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB364
	internal override XsdOrdering Compare(object x, object y); // 0x1005DB41C
}

// Namespace: Mono.Xml.Schema
internal class XsdGMonthDay : XsdAnySimpleType // TypeDefIndex: 1899
{
	// Methods
	internal void .ctor(); // 0x1005DAC30
	internal override Facet get_AllowedFacets(); // 0x1005DACA0
	public override XmlTypeCode get_TypeCode(); // 0x1005DAD08
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DAD10
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DAD84
	internal override XsdOrdering Compare(object x, object y); // 0x1005DAE3C
}

// Namespace: Mono.Xml.Schema
internal class XsdGYear : XsdAnySimpleType // TypeDefIndex: 1900
{
	// Methods
	internal void .ctor(); // 0x1005DAF20
	internal override Facet get_AllowedFacets(); // 0x1005DAF90
	public override XmlTypeCode get_TypeCode(); // 0x1005DAFF8
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB000
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DB074
	internal override XsdOrdering Compare(object x, object y); // 0x1005DB12C
}

// Namespace: Mono.Xml.Schema
internal class XsdGMonth : XsdAnySimpleType // TypeDefIndex: 1901
{
	// Methods
	internal void .ctor(); // 0x1005DA940
	internal override Facet get_AllowedFacets(); // 0x1005DA9B0
	public override XmlTypeCode get_TypeCode(); // 0x1005DAA18
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DAA20
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DAA94
	internal override XsdOrdering Compare(object x, object y); // 0x1005DAB4C
}

// Namespace: Mono.Xml.Schema
internal class XsdGDay : XsdAnySimpleType // TypeDefIndex: 1902
{
	// Methods
	internal void .ctor(); // 0x1005DA650
	internal override Facet get_AllowedFacets(); // 0x1005DA6C0
	public override XmlTypeCode get_TypeCode(); // 0x1005DA728
	public override object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DA730
	internal override ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x1005DA7A4
	internal override XsdOrdering Compare(object x, object y); // 0x1005DA85C
}

// Namespace: System.Xml.Schema
public interface IXmlSchemaInfo // TypeDefIndex: 1903
{
	// Methods
	public abstract bool get_IsDefault(); // 0
	public abstract bool get_IsNil(); // 0
	public abstract XmlSchemaSimpleType get_MemberType(); // 0
	public abstract XmlSchemaAttribute get_SchemaAttribute(); // 0
	public abstract XmlSchemaElement get_SchemaElement(); // 0
	public abstract XmlSchemaType get_SchemaType(); // 0
	public abstract XmlSchemaValidity get_Validity(); // 0
}

// Namespace: System.Xml.Schema
internal struct QNameValueType // TypeDefIndex: 1904
{
	// Fields
	private XmlQualifiedName value; // 0x10

	// Methods
	public void .ctor(XmlQualifiedName value); // 0x1005FF58C
	public XmlQualifiedName get_Value(); // 0x1005FF594
	public override bool Equals(object obj); // 0x1005FF6A4
	public override int GetHashCode(); // 0x1005FF700
	public static bool op_Equality(QNameValueType v1, QNameValueType v2); // 0x1005FF628
}

// Namespace: System.Xml.Schema
internal struct StringValueType // TypeDefIndex: 1905
{
	// Fields
	private string value; // 0x10

	// Methods
	public void .ctor(string value); // 0x1005FF888
	public string get_Value(); // 0x1005FF890
	public override bool Equals(object obj); // 0x1005FF9A0
	public override int GetHashCode(); // 0x1005FF9C4
	public static bool op_Equality(StringValueType v1, StringValueType v2); // 0x1005FF924
}

// Namespace: System.Xml.Schema
internal struct UriValueType // TypeDefIndex: 1906
{
	// Fields
	private XmlSchemaUri value; // 0x10

	// Methods
	public void .ctor(XmlSchemaUri value); // 0x1005FFA4C
	public XmlSchemaUri get_Value(); // 0x1005FFA54
	public override bool Equals(object obj); // 0x1005FFAFC
	public override int GetHashCode(); // 0x1005FFB58
	public override string ToString(); // 0x1005FFBB4
	public static bool op_Equality(UriValueType v1, UriValueType v2); // 0x1005FFAF0
}

// Namespace: System.Xml.Schema
internal struct StringArrayValueType // TypeDefIndex: 1907
{
	// Fields
	private string[] value; // 0x10

	// Methods
	public void .ctor(string[] value); // 0x1005FF744
	public string[] get_Value(); // 0x1005FF74C
	public override bool Equals(object obj); // 0x1005FF7E8
	public override int GetHashCode(); // 0x1005FF844
	public static bool op_Equality(StringArrayValueType v1, StringArrayValueType v2); // 0x1005FF7DC
}

// Namespace: System.Xml.Schema
public class ValidationEventArgs : EventArgs // TypeDefIndex: 1908
{
	// Fields
	private XmlSchemaException exception; // 0x10
	private string message; // 0x18
	private XmlSeverityType severity; // 0x20

	// Methods
	internal void .ctor(XmlSchemaException ex, string message, XmlSeverityType severity); // 0x1005E3D48
	public XmlSchemaException get_Exception(); // 0x1005E3EA0
	public XmlSeverityType get_Severity(); // 0x1005E3E98
}

// Namespace: System.Xml.Schema
public class XmlSchema : XmlSchemaObject // TypeDefIndex: 1909
{
	// Fields
	private XmlSchemaForm attributeFormDefault; // 0x70
	private XmlSchemaObjectTable attributeGroups; // 0x78
	private XmlSchemaObjectTable attributes; // 0x80
	private XmlSchemaDerivationMethod blockDefault; // 0x88
	private XmlSchemaForm elementFormDefault; // 0x8C
	private XmlSchemaObjectTable elements; // 0x90
	private XmlSchemaDerivationMethod finalDefault; // 0x98
	private XmlSchemaObjectTable groups; // 0xA0
	private string id; // 0xA8
	private XmlSchemaObjectCollection includes; // 0xB0
	private XmlSchemaObjectCollection items; // 0xB8
	private XmlSchemaObjectTable notations; // 0xC0
	private XmlSchemaObjectTable schemaTypes; // 0xC8
	private string targetNamespace; // 0xD0
	private string version; // 0xD8
	private XmlSchemaSet schemas; // 0xE0
	private XmlNameTable nameTable; // 0xE8
	internal bool missedSubComponents; // 0xF0
	private XmlSchemaObjectCollection compilationItems; // 0xF8
	private static Dictionary`2<string, int> <>f__switch$map41; // 0x0

	// Methods
	public void .ctor(); // 0x1005FFFB4
	public XmlSchemaForm get_AttributeFormDefault(); // 0x1006001E8
	public XmlSchemaDerivationMethod get_BlockDefault(); // 0x1006001F0
	public XmlSchemaDerivationMethod get_FinalDefault(); // 0x1006001F8
	public XmlSchemaForm get_ElementFormDefault(); // 0x100600200
	public string get_TargetNamespace(); // 0x1005ECD60
	public void set_TargetNamespace(string value); // 0x1005ECD68
	public string get_Version(); // 0x100600208
	public XmlSchemaObjectCollection get_Includes(); // 0x100600210
	public XmlSchemaObjectCollection get_Items(); // 0x100600218
	public bool get_IsCompiled(); // 0x100600220
	public XmlSchemaObjectTable get_Attributes(); // 0x1006002A8
	public XmlSchemaObjectTable get_AttributeGroups(); // 0x1006002B0
	public XmlSchemaObjectTable get_SchemaTypes(); // 0x1006002B8
	public XmlSchemaObjectTable get_Elements(); // 0x1006002C0
	public string get_Id(); // 0x1006002C8
	public XmlSchemaObjectTable get_Groups(); // 0x1006002D0
	public XmlSchemaObjectTable get_Notations(); // 0x1006002D8
	internal XmlSchemaObjectTable get_NamedIdentities(); // 0x1006002E0
	internal XmlSchemaSet get_Schemas(); // 0x1006002FC
	internal Hashtable get_IDCollection(); // 0x100600304
	internal void CompileSubset(ValidationEventHandler handler, XmlSchemaSet col, XmlResolver resolver, Hashtable handledUris); // 0x100600320
	private void SetParent(); // 0x100600E3C
	private void DoCompile(ValidationEventHandler handler, Hashtable handledUris, XmlSchemaSet col, XmlResolver resolver); // 0x100600418
	private string GetResolvedUri(XmlResolver resolver, string relativeUri); // 0x100601B40
	private void ProcessExternal(ValidationEventHandler handler, Hashtable handledUris, XmlResolver resolver, XmlSchemaExternal ext, XmlSchemaSet col); // 0x1006010AC
	private void AddExternalComponentsTo(XmlSchema s, XmlSchemaObjectCollection items, ValidationEventHandler handler, Hashtable handledUris, XmlResolver resolver, XmlSchemaSet col); // 0x100601D24
	internal bool IsNamespaceAbsent(string ns); // 0x100602298
	internal XmlSchemaAttribute FindAttribute(XmlQualifiedName name); // 0x1006022C0
	internal XmlSchemaAttributeGroup FindAttributeGroup(XmlQualifiedName name); // 0x100602688
	internal XmlSchemaElement FindElement(XmlQualifiedName name); // 0x100602A50
	internal XmlSchemaType FindSchemaType(XmlQualifiedName name); // 0x100602E18
	internal void Validate(ValidationEventHandler handler); // 0x1006031E0
	public static XmlSchema Read(XmlReader rdr, ValidationEventHandler validationEventHandler); // 0x1005EB1B4
	private static void ReadAttributes(XmlSchema schema, XmlSchemaReader reader, ValidationEventHandler h); // 0x100604C28
	private static void ReadContent(XmlSchema schema, XmlSchemaReader reader, ValidationEventHandler h); // 0x100605424
}

// Namespace: System.Xml.Schema
public class XmlSchemaAll : XmlSchemaGroupBase // TypeDefIndex: 1910
{
	// Fields
	private XmlSchema schema; // 0x100
	private XmlSchemaObjectCollection items; // 0x108
	private bool emptiable; // 0x110

	// Methods
	public void .ctor(); // 0x10060D060
	public override XmlSchemaObjectCollection get_Items(); // 0x10060D130
	internal bool get_Emptiable(); // 0x10060D138
	internal override void SetParent(XmlSchemaObject parent); // 0x10060D140
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10060D338
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x10060DAF8
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10060E1BC
	private void ComputeEmptiable(); // 0x10060E040
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x10060E638
	internal override Decimal GetMinEffectiveTotalRange(); // 0x10060EA9C
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x10060EDC8
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x10060EFF4
	internal static XmlSchemaAll Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10060F20C
}

// Namespace: System.Xml.Schema
public class XmlSchemaAnnotated : XmlSchemaObject // TypeDefIndex: 1911
{
	// Fields
	private XmlSchemaAnnotation annotation; // 0x70
	private string id; // 0x78
	private XmlAttribute[] unhandledAttributes; // 0x80

	// Methods
	public void .ctor(); // 0x1006101F4
	public string get_Id(); // 0x10060D8D4
	public void set_Id(string value); // 0x10060FD60
	public XmlSchemaAnnotation get_Annotation(); // 0x1006101F8
	public void set_Annotation(XmlSchemaAnnotation value); // 0x1006101EC
	public XmlAttribute[] get_UnhandledAttributes(); // 0x100610200
	public void set_UnhandledAttributes(XmlAttribute[] value); // 0x10061035C
}

// Namespace: System.Xml.Schema
public class XmlSchemaAnnotation : XmlSchemaObject // TypeDefIndex: 1912
{
	// Fields
	private string id; // 0x70
	private XmlSchemaObjectCollection items; // 0x78

	// Methods
	public void .ctor(); // 0x100610368
	public void set_Id(string value); // 0x1006103D0
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x1006103D8
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100610488
	internal static XmlSchemaAnnotation Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10060776C
}

// Namespace: System.Xml.Schema
public class XmlSchemaAny : XmlSchemaParticle // TypeDefIndex: 1913
{
	// Fields
	private static XmlSchemaAny anyTypeContent; // 0x0
	private string nameSpace; // 0xF8
	private XmlSchemaContentProcessing processing; // 0x100
	private XsdWildcard wildcard; // 0x108

	// Methods
	public void .ctor(); // 0x10061126C
	internal static XmlSchemaAny get_AnyTypeContent(); // 0x1005E72F8
	public string get_Namespace(); // 0x10061146C
	public void set_Namespace(string value); // 0x10061145C
	public XmlSchemaContentProcessing get_ProcessContents(); // 0x100611474
	public void set_ProcessContents(XmlSchemaContentProcessing value); // 0x100611464
	internal bool get_HasValueAny(); // 0x1005EE0B4
	internal bool get_HasValueLocal(); // 0x1005EE0D0
	internal bool get_HasValueOther(); // 0x1005EE0EC
	internal bool get_HasValueTargetNamespace(); // 0x1005EE108
	internal StringCollection get_ResolvedNamespaces(); // 0x1005EE140
	internal XmlSchemaContentProcessing get_ResolvedProcessContents(); // 0x1005EE124
	internal string get_TargetNamespace(); // 0x1005EE15C
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10061147C
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x10061176C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100611848
	internal override bool ParticleEquals(XmlSchemaParticle other); // 0x100611850
	internal bool ExamineAttributeWildcardIntersection(XmlSchemaAny other, ValidationEventHandler h, XmlSchema schema); // 0x100611B00
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100611B18
	internal override void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x100611C68
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x100611C6C
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x100611FE0
	internal bool ValidateWildcardAllowsNamespaceName(string ns, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x1005EE178
	internal static XmlSchemaAny Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100611FE4
}

// Namespace: System.Xml.Schema
public class XmlSchemaAnyAttribute : XmlSchemaAnnotated // TypeDefIndex: 1914
{
	// Fields
	private string nameSpace; // 0x88
	private XmlSchemaContentProcessing processing; // 0x90
	private XsdWildcard wildcard; // 0x98

	// Methods
	public void .ctor(); // 0x100612AF8
	public string get_Namespace(); // 0x100612B64
	internal bool get_HasValueAny(); // 0x100612B6C
	internal bool get_HasValueLocal(); // 0x100612B88
	internal bool get_HasValueOther(); // 0x100612BA4
	internal bool get_HasValueTargetNamespace(); // 0x100612BC0
	internal StringCollection get_ResolvedNamespaces(); // 0x100612BDC
	internal XmlSchemaContentProcessing get_ResolvedProcessContents(); // 0x100612BF8
	internal string get_TargetNamespace(); // 0x100612C14
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100612C30
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100612DD4
	internal void ValidateWildcardSubset(XmlSchemaAnyAttribute other, ValidationEventHandler h, XmlSchema schema); // 0x100612DDC
	internal bool ValidateWildcardAllowsNamespaceName(string ns, XmlSchema schema); // 0x100612E04
	internal static XmlSchemaAnyAttribute Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100612E24
}

// Namespace: System.Xml.Schema
public class XmlSchemaAppInfo : XmlSchemaObject // TypeDefIndex: 1915
{
	// Fields
	private XmlNode[] markup; // 0x70
	private string source; // 0x78

	// Methods
	public void .ctor(); // 0x100613688
	public XmlNode[] get_Markup(); // 0x10061368C
	public void set_Markup(XmlNode[] value); // 0x100613694
	internal static XmlSchemaAppInfo Read(XmlSchemaReader reader, ValidationEventHandler h, out bool skip); // 0x100610490
}

// Namespace: System.Xml.Schema
public class XmlSchemaAttribute : XmlSchemaAnnotated // TypeDefIndex: 1916
{
	// Fields
	private object attributeType; // 0x88
	private XmlSchemaSimpleType attributeSchemaType; // 0x90
	private string defaultValue; // 0x98
	private string fixedValue; // 0xA0
	private string validatedDefaultValue; // 0xA8
	private string validatedFixedValue; // 0xB0
	private object validatedFixedTypedValue; // 0xB8
	private XmlSchemaForm form; // 0xC0
	private string name; // 0xC8
	private string targetNamespace; // 0xD0
	private XmlQualifiedName qualifiedName; // 0xD8
	private XmlQualifiedName refName; // 0xE0
	private XmlSchemaSimpleType schemaType; // 0xE8
	private XmlQualifiedName schemaTypeName; // 0xF0
	private XmlSchemaUse use; // 0xF8
	private XmlSchemaUse validatedUse; // 0xFC
	private XmlSchemaAttribute referencedAttribute; // 0x100

	// Methods
	public void .ctor(); // 0x10061369C
	internal bool get_ParentIsSchema(); // 0x100613720
	public string get_DefaultValue(); // 0x1006137AC
	public string get_FixedValue(); // 0x1006137B4
	public XmlSchemaForm get_Form(); // 0x1006137BC
	public string get_Name(); // 0x1006137C4
	public XmlQualifiedName get_RefName(); // 0x1006137CC
	public XmlQualifiedName get_SchemaTypeName(); // 0x1006137D4
	public XmlSchemaSimpleType get_SchemaType(); // 0x1006137DC
	public XmlSchemaUse get_Use(); // 0x1006137E4
	public XmlQualifiedName get_QualifiedName(); // 0x1005E307C
	public object get_AttributeType(); // 0x1005E28A4
	internal string get_ValidatedDefaultValue(); // 0x1005E375C
	internal string get_ValidatedFixedValue(); // 0x1005E3764
	internal XmlSchemaUse get_ValidatedUse(); // 0x1005E8AA8
	internal override void SetParent(XmlSchemaObject parent); // 0x1006137EC
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100613864
	private void CompileCommon(ValidationEventHandler h, XmlSchema schema, bool refIsNotPresent); // 0x100613C4C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100614244
	internal static XmlSchemaAttribute Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10060B52C
}

// Namespace: System.Xml.Schema
public class XmlSchemaAttributeGroup : XmlSchemaAnnotated // TypeDefIndex: 1917
{
	// Fields
	private XmlSchemaAnyAttribute anyAttribute; // 0x88
	private XmlSchemaObjectCollection attributes; // 0x90
	private string name; // 0x98
	private XmlSchemaAttributeGroup redefined; // 0xA0
	private XmlQualifiedName qualifiedName; // 0xA8
	private XmlSchemaObjectTable attributeUses; // 0xB0
	private XmlSchemaAnyAttribute anyAttributeUse; // 0xB8
	internal bool AttributeGroupRecursionCheck; // 0xC0

	// Methods
	public void .ctor(); // 0x100614ABC
	public string get_Name(); // 0x100614B54
	public XmlSchemaObjectCollection get_Attributes(); // 0x100614B5C
	internal XmlSchemaObjectTable get_AttributeUses(); // 0x100614B64
	internal XmlSchemaAnyAttribute get_AnyAttributeUse(); // 0x100614B6C
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x100614B74
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x100614B7C
	public XmlQualifiedName get_QualifiedName(); // 0x100601B20
	internal override void SetParent(XmlSchemaObject parent); // 0x100614B84
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100614D84
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x1006152C4
	internal static XmlSchemaAttributeGroup Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100609734
}

// Namespace: System.Xml.Schema
public class XmlSchemaAttributeGroupRef : XmlSchemaAnnotated // TypeDefIndex: 1918
{
	// Fields
	private XmlQualifiedName refName; // 0x88

	// Methods
	public void .ctor(); // 0x100615C40
	public XmlQualifiedName get_RefName(); // 0x100615CB8
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100615CC0
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100615EA4
	internal static XmlSchemaAttributeGroupRef Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100615468
}

// Namespace: System.Xml.Schema
public class XmlSchemaChoice : XmlSchemaGroupBase // TypeDefIndex: 1919
{
	// Fields
	private XmlSchemaObjectCollection items; // 0x100
	private Decimal minEffectiveTotalRange; // 0x108

	// Methods
	public void .ctor(); // 0x100615EAC
	public override XmlSchemaObjectCollection get_Items(); // 0x100615F38
	internal override void SetParent(XmlSchemaObject parent); // 0x100615F40
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100616130
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x100616558
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100616C14
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100616E7C
	internal override Decimal GetMinEffectiveTotalRange(); // 0x1006176E0
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x1006179F4
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x100617C20
	internal static XmlSchemaChoice Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100617E38
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaCollection : IEnumerable, ICollection // TypeDefIndex: 1920
{
	// Fields
	private XmlSchemaSet schemaSet; // 0x10
	private ValidationEventHandler ValidationEventHandler; // 0x18

	// Methods
	public void .ctor(XmlNameTable nameTable); // 0x100619528
	internal void .ctor(XmlSchemaSet schemaSet); // 0x1006195E4
	private int System.Collections.ICollection.get_Count(); // 0x100619610
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x100619630
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x1006196E8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1006196F0
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10061976C
	internal XmlSchemaSet get_SchemaSet(); // 0x100619770
	public int get_Count(); // 0x100619614
	public XmlSchemaCollectionEnumerator GetEnumerator(); // 0x1006196F4
	private void OnValidationError(object o, ValidationEventArgs e); // 0x100619874
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaCollectionEnumerator : IEnumerator // TypeDefIndex: 1921
{
	// Fields
	private IEnumerator xenum; // 0x10

	// Methods
	internal void .ctor(ICollection col); // 0x100619778
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1006198C8
	private void System.Collections.IEnumerator.Reset(); // 0x1006199BC
	private object System.Collections.IEnumerator.get_Current(); // 0x100619AB0
	public bool MoveNext(); // 0x100619BA0
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaCompilationSettings // TypeDefIndex: 1922
{
	// Fields
	private bool enable_upa_check; // 0x10

	// Methods
	public void .ctor(); // 0x100619C94
	public bool get_EnableUpaCheck(); // 0x100619CA4
}

// Namespace: System.Xml.Schema
public class XmlSchemaComplexContent : XmlSchemaContentModel // TypeDefIndex: 1923
{
	// Fields
	private XmlSchemaContent content; // 0x88
	private bool isMixed; // 0x90

	// Methods
	public void .ctor(); // 0x100619CAC
	public bool get_IsMixed(); // 0x100619CB4
	public override XmlSchemaContent get_Content(); // 0x100619CBC
	internal override void SetParent(XmlSchemaObject parent); // 0x100619CC4
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100619D8C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10061A0B0
	internal static XmlSchemaComplexContent Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10061A174
}

// Namespace: System.Xml.Schema
public class XmlSchemaComplexContentExtension : XmlSchemaContent // TypeDefIndex: 1924
{
	// Fields
	private XmlSchemaAnyAttribute any; // 0x90
	private XmlSchemaObjectCollection attributes; // 0x98
	private XmlQualifiedName baseTypeName; // 0xA0
	private XmlSchemaParticle particle; // 0xA8

	// Methods
	public void .ctor(); // 0x10061C148
	public XmlQualifiedName get_BaseTypeName(); // 0x10061C1E4
	public XmlSchemaParticle get_Particle(); // 0x10061C1EC
	public XmlSchemaObjectCollection get_Attributes(); // 0x10061C1F4
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x10061C1FC
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x10061C204
	internal override bool get_IsExtension(); // 0x10061C20C
	internal override void SetParent(XmlSchemaObject parent); // 0x10061C214
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10061C444
	internal override XmlQualifiedName GetBaseTypeName(); // 0x10061CC0C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10061CC14
	internal static XmlSchemaComplexContentExtension Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10061B5D8
}

// Namespace: System.Xml.Schema
public class XmlSchemaComplexContentRestriction : XmlSchemaContent // TypeDefIndex: 1925
{
	// Fields
	private XmlSchemaAnyAttribute any; // 0x90
	private XmlSchemaObjectCollection attributes; // 0x98
	private XmlQualifiedName baseTypeName; // 0xA0
	private XmlSchemaParticle particle; // 0xA8

	// Methods
	public void .ctor(); // 0x10061CE80
	public XmlQualifiedName get_BaseTypeName(); // 0x10061CF18
	public XmlSchemaParticle get_Particle(); // 0x10061CF20
	public XmlSchemaObjectCollection get_Attributes(); // 0x10061CF28
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x10061CF30
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x10061CF38
	internal override bool get_IsExtension(); // 0x10061CF40
	internal override void SetParent(XmlSchemaObject parent); // 0x10061CF48
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10061D178
	internal override XmlQualifiedName GetBaseTypeName(); // 0x10061D940
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10061D948
	internal static XmlSchemaComplexContentRestriction Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10061AA68
}

// Namespace: System.Xml.Schema
public class XmlSchemaComplexType : XmlSchemaType // TypeDefIndex: 1926
{
	// Fields
	private XmlSchemaAnyAttribute anyAttribute; // 0xC8
	private XmlSchemaObjectCollection attributes; // 0xD0
	private XmlSchemaObjectTable attributeUses; // 0xD8
	private XmlSchemaAnyAttribute attributeWildcard; // 0xE0
	private XmlSchemaDerivationMethod block; // 0xE8
	private XmlSchemaDerivationMethod blockResolved; // 0xEC
	private XmlSchemaContentModel contentModel; // 0xF0
	private XmlSchemaParticle validatableParticle; // 0xF8
	private XmlSchemaParticle contentTypeParticle; // 0x100
	private bool isAbstract; // 0x108
	private bool isMixed; // 0x109
	private XmlSchemaParticle particle; // 0x110
	private XmlSchemaContentType resolvedContentType; // 0x118
	internal bool ValidatedIsAbstract; // 0x11C
	private static XmlSchemaComplexType anyType; // 0x0
	internal static readonly XmlQualifiedName AnyTypeName; // 0x8
	private Guid CollectProcessId; // 0x120

	// Methods
	public void .ctor(); // 0x10061D9B4
	private static void .cctor(); // 0x10061DA4C
	internal bool get_ParentIsSchema(); // 0x10061DAD0
	internal static XmlSchemaComplexType get_AnyType(); // 0x1005E5940
	public bool get_IsAbstract(); // 0x1005E6ACC
	public void set_IsAbstract(bool value); // 0x10061DB54
	public XmlSchemaDerivationMethod get_Block(); // 0x10061DB5C
	public override bool get_IsMixed(); // 0x10061DB64
	public XmlSchemaContentModel get_ContentModel(); // 0x10061DB6C
	public void set_ContentModel(XmlSchemaContentModel value); // 0x10061DB74
	public XmlSchemaParticle get_Particle(); // 0x10061DB7C
	public XmlSchemaObjectCollection get_Attributes(); // 0x10061DB84
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x10061DB8C
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x10061DB94
	public XmlSchemaContentType get_ContentType(); // 0x1005E4AB0
	public XmlSchemaParticle get_ContentTypeParticle(); // 0x10061DB9C
	public XmlSchemaDerivationMethod get_BlockResolved(); // 0x1005E5F0C
	public XmlSchemaObjectTable get_AttributeUses(); // 0x1005E282C
	public XmlSchemaAnyAttribute get_AttributeWildcard(); // 0x10061DBA4
	internal XmlSchemaParticle get_ValidatableParticle(); // 0x1005E72F0
	internal override void SetParent(XmlSchemaObject parent); // 0x10061DBAC
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10061DE0C
	private void CollectSchemaComponent(ValidationEventHandler h, XmlSchema schema); // 0x10061EA98
	private void FillContentTypeParticle(ValidationEventHandler h, XmlSchema schema); // 0x10061ED90
	private void CollectContentTypeFromImmediateContent(); // 0x10061EFD4
	private void CollectContentTypeFromContentModel(ValidationEventHandler h, XmlSchema schema); // 0x10061EE48
	private void CollectContentTypeFromComplexExtension(ValidationEventHandler h, XmlSchema schema); // 0x10061F10C
	private void CollectContentTypeFromComplexRestriction(); // 0x10061F44C
	private XmlSchemaContentType GetComplexContentType(XmlSchemaContentModel content); // 0x10061F65C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10061F710
	private void ValidateImmediateAttributes(ValidationEventHandler h, XmlSchema schema); // 0x100621674
	private void ValidateContentFirstPass(ValidationEventHandler h, XmlSchema schema); // 0x10061FE74
	private void ValidateContentModel(ValidationEventHandler h, XmlSchema schema); // 0x100620090
	internal void ValidateTypeDerivationOK(object b, ValidationEventHandler h, XmlSchema schema); // 0x1005E5F14
	internal void ValidateComplexBaseDerivationValidExtension(XmlSchemaComplexType baseComplexType, ValidationEventHandler h, XmlSchema schema); // 0x100621764
	internal void ValidateSimpleBaseDerivationValidExtension(object baseType, ValidationEventHandler h, XmlSchema schema); // 0x100621DEC
	internal void ValidateDerivationValidRestriction(XmlSchemaComplexType baseType, ValidationEventHandler h, XmlSchema schema); // 0x100621F64
	internal static XmlSchemaComplexType Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100607F0C
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaContent : XmlSchemaAnnotated // TypeDefIndex: 1927
{
	// Fields
	internal object actualBaseSchemaType; // 0x88

	// Methods
	protected void .ctor(); // 0x10061C1E0
	internal virtual bool get_IsExtension(); // 0x100622958
	internal virtual XmlQualifiedName GetBaseTypeName(); // 0x100622960
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaContentModel : XmlSchemaAnnotated // TypeDefIndex: 1928
{
	// Methods
	protected void .ctor(); // 0x100619CB0
	public abstract XmlSchemaContent get_Content(); // 0
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaContentProcessing : Enum // TypeDefIndex: 1929
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaContentProcessing None = 0; // 0x0
	public const XmlSchemaContentProcessing Skip = 1; // 0x0
	public const XmlSchemaContentProcessing Lax = 2; // 0x0
	public const XmlSchemaContentProcessing Strict = 3; // 0x0

}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaContentType : Enum // TypeDefIndex: 1930
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaContentType TextOnly = 0; // 0x0
	public const XmlSchemaContentType Empty = 1; // 0x0
	public const XmlSchemaContentType ElementOnly = 2; // 0x0
	public const XmlSchemaContentType Mixed = 3; // 0x0

}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaDatatype // TypeDefIndex: 1931
{
	// Fields
	internal XsdWhitespaceFacet WhitespaceValue; // 0x10
	private static char[] wsChars; // 0x0
	private StringBuilder sb; // 0x18
	private static readonly XsdAnySimpleType datatypeAnySimpleType; // 0x8
	private static readonly XsdString datatypeString; // 0x10
	private static readonly XsdNormalizedString datatypeNormalizedString; // 0x18
	private static readonly XsdToken datatypeToken; // 0x20
	private static readonly XsdLanguage datatypeLanguage; // 0x28
	private static readonly XsdNMToken datatypeNMToken; // 0x30
	private static readonly XsdNMTokens datatypeNMTokens; // 0x38
	private static readonly XsdName datatypeName; // 0x40
	private static readonly XsdNCName datatypeNCName; // 0x48
	private static readonly XsdID datatypeID; // 0x50
	private static readonly XsdIDRef datatypeIDRef; // 0x58
	private static readonly XsdIDRefs datatypeIDRefs; // 0x60
	private static readonly XsdEntity datatypeEntity; // 0x68
	private static readonly XsdEntities datatypeEntities; // 0x70
	private static readonly XsdNotation datatypeNotation; // 0x78
	private static readonly XsdDecimal datatypeDecimal; // 0x80
	private static readonly XsdInteger datatypeInteger; // 0x88
	private static readonly XsdLong datatypeLong; // 0x90
	private static readonly XsdInt datatypeInt; // 0x98
	private static readonly XsdShort datatypeShort; // 0xA0
	private static readonly XsdByte datatypeByte; // 0xA8
	private static readonly XsdNonNegativeInteger datatypeNonNegativeInteger; // 0xB0
	private static readonly XsdPositiveInteger datatypePositiveInteger; // 0xB8
	private static readonly XsdUnsignedLong datatypeUnsignedLong; // 0xC0
	private static readonly XsdUnsignedInt datatypeUnsignedInt; // 0xC8
	private static readonly XsdUnsignedShort datatypeUnsignedShort; // 0xD0
	private static readonly XsdUnsignedByte datatypeUnsignedByte; // 0xD8
	private static readonly XsdNonPositiveInteger datatypeNonPositiveInteger; // 0xE0
	private static readonly XsdNegativeInteger datatypeNegativeInteger; // 0xE8
	private static readonly XsdFloat datatypeFloat; // 0xF0
	private static readonly XsdDouble datatypeDouble; // 0xF8
	private static readonly XsdBase64Binary datatypeBase64Binary; // 0x100
	private static readonly XsdBoolean datatypeBoolean; // 0x108
	private static readonly XsdAnyURI datatypeAnyURI; // 0x110
	private static readonly XsdDuration datatypeDuration; // 0x118
	private static readonly XsdDateTime datatypeDateTime; // 0x120
	private static readonly XsdDate datatypeDate; // 0x128
	private static readonly XsdTime datatypeTime; // 0x130
	private static readonly XsdHexBinary datatypeHexBinary; // 0x138
	private static readonly XsdQName datatypeQName; // 0x140
	private static readonly XsdGYearMonth datatypeGYearMonth; // 0x148
	private static readonly XsdGMonthDay datatypeGMonthDay; // 0x150
	private static readonly XsdGYear datatypeGYear; // 0x158
	private static readonly XsdGMonth datatypeGMonth; // 0x160
	private static readonly XsdGDay datatypeGDay; // 0x168
	private static readonly XdtAnyAtomicType datatypeAnyAtomicType; // 0x170
	private static readonly XdtUntypedAtomic datatypeUntypedAtomic; // 0x178
	private static readonly XdtDayTimeDuration datatypeDayTimeDuration; // 0x180
	private static readonly XdtYearMonthDuration datatypeYearMonthDuration; // 0x188
	private static Dictionary`2<string, int> <>f__switch$map3E; // 0x190
	private static Dictionary`2<string, int> <>f__switch$map3F; // 0x198
	private static Dictionary`2<string, int> <>f__switch$map40; // 0x1A0

	// Methods
	protected void .ctor(); // 0x100622968
	private static void .cctor(); // 0x1006229D0
	internal virtual XsdWhitespaceFacet get_Whitespace(); // 0x100623218
	public virtual XmlTypeCode get_TypeCode(); // 0x100623220
	public abstract XmlTokenizedType get_TokenizedType(); // 0
	public abstract object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0
	internal virtual ValueType ParseValueType(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr); // 0x100623228
	internal string Normalize(string s); // 0x1005E0C28
	internal string Normalize(string s, XsdWhitespaceFacet whitespaceFacet); // 0x100623230
	internal static XmlSchemaDatatype FromName(XmlQualifiedName qname); // 0x1005E5B74
	internal static XmlSchemaDatatype FromName(string localName, string ns); // 0x1005EBC50
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaDerivationMethod : Enum // TypeDefIndex: 1932
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaDerivationMethod Empty = 0; // 0x0
	public const XmlSchemaDerivationMethod Substitution = 1; // 0x0
	public const XmlSchemaDerivationMethod Extension = 2; // 0x0
	public const XmlSchemaDerivationMethod Restriction = 4; // 0x0
	public const XmlSchemaDerivationMethod List = 8; // 0x0
	public const XmlSchemaDerivationMethod Union = 16; // 0x0
	public const XmlSchemaDerivationMethod All = 255; // 0x0
	public const XmlSchemaDerivationMethod None = 256; // 0x0

}

// Namespace: System.Xml.Schema
public class XmlSchemaDocumentation : XmlSchemaObject // TypeDefIndex: 1933
{
	// Fields
	private string language; // 0x70
	private XmlNode[] markup; // 0x78
	private string source; // 0x80

	// Methods
	public void .ctor(); // 0x100623508
	public XmlNode[] get_Markup(); // 0x10062350C
	public void set_Markup(XmlNode[] value); // 0x100623514
	internal static XmlSchemaDocumentation Read(XmlSchemaReader reader, ValidationEventHandler h, out bool skip); // 0x100610B2C
}

// Namespace: System.Xml.Schema
public class XmlSchemaElement : XmlSchemaParticle // TypeDefIndex: 1934
{
	// Fields
	private XmlSchemaDerivationMethod block; // 0xF8
	private XmlSchemaObjectCollection constraints; // 0x100
	private string defaultValue; // 0x108
	private object elementType; // 0x110
	private XmlSchemaType elementSchemaType; // 0x118
	private XmlSchemaDerivationMethod final; // 0x120
	private string fixedValue; // 0x128
	private XmlSchemaForm form; // 0x130
	private bool isAbstract; // 0x134
	private bool isNillable; // 0x135
	private string name; // 0x138
	private XmlQualifiedName refName; // 0x140
	private XmlSchemaType schemaType; // 0x148
	private XmlQualifiedName schemaTypeName; // 0x150
	private XmlQualifiedName substitutionGroup; // 0x158
	private XmlSchema schema; // 0x160
	internal bool parentIsSchema; // 0x168
	private XmlQualifiedName qName; // 0x170
	private XmlSchemaDerivationMethod blockResolved; // 0x178
	private XmlSchemaDerivationMethod finalResolved; // 0x17C
	private XmlSchemaElement referencedElement; // 0x180
	private ArrayList substitutingElements; // 0x188
	private XmlSchemaElement substitutionGroupElement; // 0x190
	private bool actualIsAbstract; // 0x198
	private bool actualIsNillable; // 0x199
	private string validatedDefaultValue; // 0x1A0
	private string validatedFixedValue; // 0x1A8

	// Methods
	public void .ctor(); // 0x10062351C
	private void InitPostCompileInformations(); // 0x1006235E8
	public bool get_IsAbstract(); // 0x1006236AC
	public void set_IsAbstract(bool value); // 0x1006236B4
	public void set_Final(XmlSchemaDerivationMethod value); // 0x1006236BC
	public void set_Name(string value); // 0x1006236C4
	public bool get_IsNillable(); // 0x1006236CC
	public void set_IsNillable(bool value); // 0x1006236D4
	public XmlQualifiedName get_RefName(); // 0x1006236DC
	public XmlQualifiedName get_SubstitutionGroup(); // 0x1006236E4
	public XmlQualifiedName get_SchemaTypeName(); // 0x1006236EC
	public void set_SchemaTypeName(XmlQualifiedName value); // 0x1006236F4
	public XmlSchemaType get_SchemaType(); // 0x1006236FC
	public void set_SchemaType(XmlSchemaType value); // 0x100623704
	public XmlSchemaObjectCollection get_Constraints(); // 0x1005E93AC
	public XmlQualifiedName get_QualifiedName(); // 0x100601B28
	public object get_ElementType(); // 0x1005E6AA4
	public XmlSchemaDerivationMethod get_BlockResolved(); // 0x1005E6AB8
	public XmlSchemaDerivationMethod get_FinalResolved(); // 0x10062370C
	internal bool get_ActualIsNillable(); // 0x1005E7A20
	internal bool get_ActualIsAbstract(); // 0x1005E7A0C
	internal string get_ValidatedDefaultValue(); // 0x1005E4A9C
	internal string get_ValidatedFixedValue(); // 0x1005E4AB8
	internal ArrayList get_SubstitutingElements(); // 0x100623720
	internal override void SetParent(XmlSchemaObject parent); // 0x100623734
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100623934
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x100625014
	private void AddSubstElementRecursively(XmlSchemaObjectCollection col, XmlSchemaElement el); // 0x100625598
	internal void FillSubstitutionElementInfo(); // 0x100625838
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100625938
	internal override bool ParticleEquals(XmlSchemaParticle other); // 0x100626820
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100626E70
	private bool ValidateDerivationByRestrictionNameAndTypeOK(XmlSchemaElement baseElement, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100627180
	internal override void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x100627590
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x100627694
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x10062804C
	private void ValidateElementDefaultValidImmediate(ValidationEventHandler h, XmlSchema schema); // 0x100626460
	internal static XmlSchemaElement Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10060A01C
}

// Namespace: System.Xml.Schema
public class XmlSchemaEnumerationFacet : XmlSchemaFacet // TypeDefIndex: 1935
{
	// Methods
	public void .ctor(); // 0x10062945C
	internal override Facet get_ThisFacet(); // 0x1006294C4
	internal static XmlSchemaEnumerationFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x1006294CC
}

// Namespace: System.Xml.Schema
public class XmlSchemaException : SystemException // TypeDefIndex: 1936
{
	// Fields
	private bool hasLineInfo; // 0x60
	private int lineNumber; // 0x64
	private int linePosition; // 0x68
	private XmlSchemaObject sourceObj; // 0x70
	private string sourceUri; // 0x78

	// Methods
	public void .ctor(); // 0x100629C4C
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100629CBC
	internal void .ctor(string message, int lineNumber, int linePosition, XmlSchemaObject sourceObject, string sourceUri, Exception innerException); // 0x1005FB898
	internal void .ctor(string message, object sender, string sourceUri, XmlSchemaObject sourceObject, Exception innerException); // 0x1005FFD74
	internal void .ctor(string message, XmlSchemaObject sourceObject, Exception innerException); // 0x10062A470
	public void .ctor(string message, Exception innerException); // 0x1005FC440
	private static string GetMessage(string message, string sourceUri, object sender, XmlSchemaObject sourceObj); // 0x10062A2C0
	private static string GetMessage(string message, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject sourceObj); // 0x100629E40
	public override string get_Message(); // 0x10062A4F8
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x10062A500
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaExternal : XmlSchemaObject // TypeDefIndex: 1937
{
	// Fields
	private string id; // 0x70
	private XmlSchema schema; // 0x78
	private string location; // 0x80

	// Methods
	protected void .ctor(); // 0x10062A604
	public string get_SchemaLocation(); // 0x100601CC4
	public void set_SchemaLocation(string value); // 0x10062A608
	public XmlSchema get_Schema(); // 0x100601D14
	public void set_Schema(XmlSchema value); // 0x100601D0C
	public void set_Id(string value); // 0x10062A610
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaFacet : XmlSchemaAnnotated // TypeDefIndex: 1938
{
	// Fields
	internal static readonly Facet AllFacets; // 0x0
	private bool isFixed; // 0x88
	private string val; // 0x90

	// Methods
	protected void .ctor(); // 0x1006294C0
	private static void .cctor(); // 0x10062A618
	internal virtual Facet get_ThisFacet(); // 0x10062A66C
	public string get_Value(); // 0x10062A674
	public void set_Value(string value); // 0x100629C44
	public virtual bool get_IsFixed(); // 0x10062A67C
	public virtual void set_IsFixed(bool value); // 0x10062A684
}

// Namespace: 
protected internal sealed class Facet : Enum // TypeDefIndex: 1939
{
	// Fields
	public int value__; // 0x10
	public const Facet None = 0; // 0x0
	public const Facet length = 1; // 0x0
	public const Facet minLength = 2; // 0x0
	public const Facet maxLength = 4; // 0x0
	public const Facet pattern = 8; // 0x0
	public const Facet enumeration = 16; // 0x0
	public const Facet whiteSpace = 32; // 0x0
	public const Facet maxInclusive = 64; // 0x0
	public const Facet maxExclusive = 128; // 0x0
	public const Facet minExclusive = 256; // 0x0
	public const Facet minInclusive = 512; // 0x0
	public const Facet totalDigits = 1024; // 0x0
	public const Facet fractionDigits = 2048; // 0x0

}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaForm : Enum // TypeDefIndex: 1940
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaForm None = 0; // 0x0
	public const XmlSchemaForm Qualified = 1; // 0x0
	public const XmlSchemaForm Unqualified = 2; // 0x0

}

// Namespace: System.Xml.Schema
public class XmlSchemaFractionDigitsFacet : XmlSchemaNumericFacet // TypeDefIndex: 1941
{
	// Methods
	public void .ctor(); // 0x10062A68C
	internal override Facet get_ThisFacet(); // 0x10062A6F4
	internal static XmlSchemaFractionDigitsFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062A6FC
}

// Namespace: System.Xml.Schema
public class XmlSchemaGroup : XmlSchemaAnnotated // TypeDefIndex: 1942
{
	// Fields
	private string name; // 0x88
	private XmlSchemaGroupBase particle; // 0x90
	private XmlQualifiedName qualifiedName; // 0x98
	private bool isCircularDefinition; // 0xA0

	// Methods
	public void .ctor(); // 0x10062AFA8
	public string get_Name(); // 0x10062B020
	public XmlSchemaGroupBase get_Particle(); // 0x10062B028
	public void set_Particle(XmlSchemaGroupBase value); // 0x10062B030
	public XmlQualifiedName get_QualifiedName(); // 0x100601B30
	internal bool get_IsCircularDefinition(); // 0x10062B038
	internal override void SetParent(XmlSchemaObject parent); // 0x10062B040
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10062B0B8
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10062B380
	internal static XmlSchemaGroup Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100608E50
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaGroupBase : XmlSchemaParticle // TypeDefIndex: 1943
{
	// Fields
	private XmlSchemaObjectCollection compiledItems; // 0xF8

	// Methods
	protected void .ctor(); // 0x10060D0C8
	public abstract XmlSchemaObjectCollection get_Items(); // 0
	internal XmlSchemaObjectCollection get_CompiledItems(); // 0x1005E0384
	internal void CopyOptimizedItems(XmlSchemaGroupBase gb); // 0x10060DE90
	internal override bool ParticleEquals(XmlSchemaParticle other); // 0x10062B60C
	internal override void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x10062B8BC
	internal bool ValidateNSRecurseCheckCardinality(XmlSchemaAny any, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x10060E800
	internal bool ValidateRecurse(XmlSchemaGroupBase baseGroup, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x10060EA88
	internal bool ValidateSeqRecurseMapSumCommon(XmlSchemaGroupBase baseGroup, ValidationEventHandler h, XmlSchema schema, bool isLax, bool isMapAndSum, bool raiseError); // 0x100617158
}

// Namespace: System.Xml.Schema
public class XmlSchemaGroupRef : XmlSchemaParticle // TypeDefIndex: 1944
{
	// Fields
	private XmlSchema schema; // 0xF8
	private XmlQualifiedName refName; // 0x100
	private XmlSchemaGroup referencedGroup; // 0x108
	private bool busy; // 0x110

	// Methods
	public void .ctor(); // 0x10062BAD4
	public XmlQualifiedName get_RefName(); // 0x10062175C
	internal XmlSchemaGroup get_TargetGroup(); // 0x100621744
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10062BB4C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10062BD34
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x10062BFA0
	internal override bool ParticleEquals(XmlSchemaParticle other); // 0x10062C228
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x10062C2B8
	internal override void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x10062C368
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x10062C46C
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x10062C518
	internal static XmlSchemaGroupRef Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100618A54
}

// Namespace: System.Xml.Schema
public class XmlSchemaIdentityConstraint : XmlSchemaAnnotated // TypeDefIndex: 1945
{
	// Fields
	private XmlSchemaObjectCollection fields; // 0x88
	private string name; // 0x90
	private XmlQualifiedName qName; // 0x98
	private XmlSchemaXPath selector; // 0xA0
	private XsdIdentitySelector compiledSelector; // 0xA8

	// Methods
	public void .ctor(); // 0x10062C5BC
	public string get_Name(); // 0x10062C654
	public void set_Name(string value); // 0x10062C65C
	public XmlSchemaXPath get_Selector(); // 0x100626E60
	public void set_Selector(XmlSchemaXPath value); // 0x10062C664
	public XmlSchemaObjectCollection get_Fields(); // 0x100626E68
	public XmlQualifiedName get_QualifiedName(); // 0x10062500C
	internal XsdIdentitySelector get_CompiledSelector(); // 0x10062C66C
	internal override void SetParent(XmlSchemaObject parent); // 0x10062C674
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10062C874
}

// Namespace: System.Xml.Schema
public class XmlSchemaImport : XmlSchemaExternal // TypeDefIndex: 1946
{
	// Fields
	private XmlSchemaAnnotation annotation; // 0x88
	private string nameSpace; // 0x90

	// Methods
	public void .ctor(); // 0x10062CE60
	public string get_Namespace(); // 0x100601D1C
	public void set_Annotation(XmlSchemaAnnotation value); // 0x10062CE64
	internal static XmlSchemaImport Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x1006065F0
}

// Namespace: System.Xml.Schema
public class XmlSchemaInclude : XmlSchemaExternal // TypeDefIndex: 1947
{
	// Fields
	private XmlSchemaAnnotation annotation; // 0x88

	// Methods
	public void .ctor(); // 0x10062CE6C
	public void set_Annotation(XmlSchemaAnnotation value); // 0x10062CE70
	internal static XmlSchemaInclude Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100605E98
}

// Namespace: System.Xml.Schema
public class XmlSchemaInfo : IXmlSchemaInfo // TypeDefIndex: 1948
{
	// Fields
	private bool isDefault; // 0x10
	private bool isNil; // 0x11
	private XmlSchemaSimpleType memberType; // 0x18
	private XmlSchemaAttribute attr; // 0x20
	private XmlSchemaElement elem; // 0x28
	private XmlSchemaType type; // 0x30
	private XmlSchemaValidity validity; // 0x38

	// Methods
	internal void .ctor(IXmlSchemaInfo info); // 0x10062CE78
	public bool get_IsDefault(); // 0x10062D24C
	public bool get_IsNil(); // 0x10062D254
	public XmlSchemaSimpleType get_MemberType(); // 0x10062D25C
	public XmlSchemaAttribute get_SchemaAttribute(); // 0x10062D264
	public XmlSchemaElement get_SchemaElement(); // 0x10062D26C
	public XmlSchemaType get_SchemaType(); // 0x10062D274
	public XmlSchemaValidity get_Validity(); // 0x10062D27C
}

// Namespace: System.Xml.Schema
public class XmlSchemaKey : XmlSchemaIdentityConstraint // TypeDefIndex: 1949
{
	// Methods
	public void .ctor(); // 0x10062D284
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10062D288
	internal static XmlSchemaKey Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x1006281B0
}

// Namespace: System.Xml.Schema
public class XmlSchemaKeyref : XmlSchemaIdentityConstraint // TypeDefIndex: 1950
{
	// Fields
	private XmlQualifiedName refer; // 0xB0
	private XmlSchemaIdentityConstraint target; // 0xB8

	// Methods
	public void .ctor(); // 0x10062D28C
	public XmlQualifiedName get_Refer(); // 0x10062D304
	internal XmlSchemaIdentityConstraint get_Target(); // 0x1005E9B5C
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10062D30C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10062D450
	internal static XmlSchemaKeyref Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100628A80
}

// Namespace: System.Xml.Schema
public class XmlSchemaLengthFacet : XmlSchemaNumericFacet // TypeDefIndex: 1951
{
	// Methods
	public void .ctor(); // 0x10062D5B4
	internal override Facet get_ThisFacet(); // 0x10062D5B8
	internal static XmlSchemaLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062D5C0
}

// Namespace: System.Xml.Schema
public class XmlSchemaMaxExclusiveFacet : XmlSchemaFacet // TypeDefIndex: 1952
{
	// Methods
	public void .ctor(); // 0x10062DE6C
	internal override Facet get_ThisFacet(); // 0x10062DED0
	internal static XmlSchemaMaxExclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062DED8
}

// Namespace: System.Xml.Schema
public class XmlSchemaMaxInclusiveFacet : XmlSchemaFacet // TypeDefIndex: 1953
{
	// Methods
	public void .ctor(); // 0x10062E784
	internal override Facet get_ThisFacet(); // 0x10062E7E8
	internal static XmlSchemaMaxInclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062E7F0
}

// Namespace: System.Xml.Schema
public class XmlSchemaMaxLengthFacet : XmlSchemaNumericFacet // TypeDefIndex: 1954
{
	// Methods
	public void .ctor(); // 0x10062F09C
	internal override Facet get_ThisFacet(); // 0x10062F0A0
	internal static XmlSchemaMaxLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062F0A8
}

// Namespace: System.Xml.Schema
public class XmlSchemaMinExclusiveFacet : XmlSchemaFacet // TypeDefIndex: 1955
{
	// Methods
	public void .ctor(); // 0x10062F954
	internal override Facet get_ThisFacet(); // 0x10062F9B8
	internal static XmlSchemaMinExclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10062F9C0
}

// Namespace: System.Xml.Schema
public class XmlSchemaMinInclusiveFacet : XmlSchemaFacet // TypeDefIndex: 1956
{
	// Methods
	public void .ctor(); // 0x10063026C
	internal override Facet get_ThisFacet(); // 0x1006302D0
	internal static XmlSchemaMinInclusiveFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x1006302D8
}

// Namespace: System.Xml.Schema
public class XmlSchemaMinLengthFacet : XmlSchemaNumericFacet // TypeDefIndex: 1957
{
	// Methods
	public void .ctor(); // 0x100630B84
	internal override Facet get_ThisFacet(); // 0x100630B88
	internal static XmlSchemaMinLengthFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100630B90
}

// Namespace: System.Xml.Schema
public class XmlSchemaNotation : XmlSchemaAnnotated // TypeDefIndex: 1958
{
	// Fields
	private string name; // 0x88
	private string pub; // 0x90
	private string system; // 0x98
	private XmlQualifiedName qualifiedName; // 0xA0

	// Methods
	public void .ctor(); // 0x10063143C
	public string get_Name(); // 0x100631440
	public string get_Public(); // 0x100631448
	internal XmlQualifiedName get_QualifiedName(); // 0x100601B38
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100631450
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100631708
	internal static XmlSchemaNotation Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10060C258
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaNumericFacet : XmlSchemaFacet // TypeDefIndex: 1959
{
	// Methods
	protected void .ctor(); // 0x10062A690
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaObject // TypeDefIndex: 1960
{
	// Fields
	private int lineNumber; // 0x10
	private int linePosition; // 0x14
	private string sourceUri; // 0x18
	private XmlSerializerNamespaces namespaces; // 0x20
	internal ArrayList unhandledAttributeList; // 0x28
	internal bool isCompiled; // 0x30
	internal int errorCount; // 0x34
	internal Guid CompilationId; // 0x38
	internal Guid ValidationId; // 0x48
	internal bool isRedefineChild; // 0x58
	internal bool isRedefinedComponent; // 0x59
	internal XmlSchemaObject redefinedObject; // 0x60
	private XmlSchemaObject parent; // 0x68

	// Methods
	protected void .ctor(); // 0x1006000D8
	public int get_LineNumber(); // 0x10062A4E8
	public void set_LineNumber(int value); // 0x100604A40
	public int get_LinePosition(); // 0x10062A4F0
	public void set_LinePosition(int value); // 0x100604C18
	public string get_SourceUri(); // 0x100600410
	public void set_SourceUri(string value); // 0x100604C20
	public XmlSchemaObject get_Parent(); // 0x1006137A4
	public void set_Parent(XmlSchemaObject value); // 0x100631710
	internal XmlSchema get_AncestorSchema(); // 0x10061162C
	internal virtual void SetParent(XmlSchemaObject parent); // 0x10060D330
	public XmlSerializerNamespaces get_Namespaces(); // 0x1006281A8
	internal void error(ValidationEventHandler handle, string message); // 0x1005EDBFC
	internal void warn(ValidationEventHandler handle, string message); // 0x100601CCC
	internal static void error(ValidationEventHandler handle, string message, Exception innerException); // 0x100605E60
	internal static void error(ValidationEventHandler handle, string message, Exception innerException, XmlSchemaObject xsobj, object sender); // 0x100631718
	internal static void warn(ValidationEventHandler handle, string message, Exception innerException, XmlSchemaObject xsobj, object sender); // 0x100631748
	internal virtual int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100631778
	internal virtual int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100631780
	internal bool IsValidated(Guid validationId); // 0x10060E5AC
	internal virtual void CopyInfo(XmlSchemaParticle obj); // 0x100631788
}

// Namespace: System.Xml.Schema
public class XmlSchemaObjectCollection : CollectionBase // TypeDefIndex: 1961
{
	// Methods
	public void .ctor(); // 0x100600174
	public void .ctor(XmlSchemaObject parent); // 0x1006317B4
	public virtual XmlSchemaObject get_Item(int index); // 0x1006317BC
	public int Add(XmlSchemaObject item); // 0x100600F9C
	public bool Contains(XmlSchemaObject item); // 0x100625728
	public XmlSchemaObjectEnumerator GetEnumerator(); // 0x10060203C
	protected override void OnClear(); // 0x1006319C8
	protected override void OnInsert(int index, object item); // 0x1006319CC
	protected override void OnRemove(int index, object item); // 0x1006319D0
	protected override void OnSet(int index, object oldValue, object newValue); // 0x1006319D4
}

// Namespace: System.Xml.Schema
public class XmlSchemaObjectEnumerator : IEnumerator // TypeDefIndex: 1962
{
	// Fields
	private IEnumerator ienum; // 0x10

	// Methods
	internal void .ctor(IList list); // 0x1006318CC
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1006319D8
	private void System.Collections.IEnumerator.Reset(); // 0x100631ACC
	private object System.Collections.IEnumerator.get_Current(); // 0x100631BC0
	public XmlSchemaObject get_Current(); // 0x1006020AC
	public bool MoveNext(); // 0x1006021A4
	public void Reset(); // 0x100631CB8
}

// Namespace: System.Xml.Schema
public class XmlSchemaObjectTable // TypeDefIndex: 1963
{
	// Fields
	private HybridDictionary table; // 0x10

	// Methods
	internal void .ctor(); // 0x10060017C
	public XmlSchemaObject get_Item(XmlQualifiedName name); // 0x1005E2834
	public ICollection get_Names(); // 0x100631DAC
	public ICollection get_Values(); // 0x100604534
	public bool Contains(XmlQualifiedName name); // 0x100628014
	public IDictionaryEnumerator GetEnumerator(); // 0x1005E8A48
	internal void Add(XmlQualifiedName name, XmlSchemaObject value); // 0x100628030
	internal void Clear(); // 0x100600F80
	internal void Set(XmlQualifiedName name, XmlSchemaObject value); // 0x100631F5C
}

// Namespace: 
internal class XmlSchemaObjectTableEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1964
{
	// Fields
	private IDictionaryEnumerator xenum; // 0x10
	private IEnumerable tmp; // 0x18

	// Methods
	internal void .ctor(XmlSchemaObjectTable table); // 0x100631DC8
	private bool System.Collections.IEnumerator.MoveNext(); // 0x100631F78
	private void System.Collections.IEnumerator.Reset(); // 0x10063206C
	private object System.Collections.IEnumerator.get_Current(); // 0x100632160
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry(); // 0x10063226C
	private object System.Collections.IDictionaryEnumerator.get_Key(); // 0x10063235C
	private object System.Collections.IDictionaryEnumerator.get_Value(); // 0x100632458
	public DictionaryEntry get_Entry(); // 0x100632554
	public bool MoveNext(); // 0x100632644
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaParticle : XmlSchemaAnnotated // TypeDefIndex: 1965
{
	// Fields
	private Decimal minOccurs; // 0x88
	private Decimal maxOccurs; // 0x98
	private string minstr; // 0xA8
	private string maxstr; // 0xB0
	private static XmlSchemaParticle empty; // 0x0
	private Decimal validatedMinOccurs; // 0xB8
	private Decimal validatedMaxOccurs; // 0xC8
	internal int recursionDepth; // 0xD8
	private Decimal minEffectiveTotalRange; // 0xDC
	internal bool parentIsGroupDefinition; // 0xEC
	internal XmlSchemaParticle OptimizedParticle; // 0xF0

	// Methods
	protected void .ctor(); // 0x1006112D8
	internal static XmlSchemaParticle get_Empty(); // 0x1005E7464
	public string get_MinOccursString(); // 0x100624FFC
	public void set_MinOccursString(string value); // 0x100610008
	public string get_MaxOccursString(); // 0x100625004
	public void set_MaxOccursString(string value); // 0x10060FD68
	public Decimal get_MinOccurs(); // 0x10060D8C8
	public void set_MinOccurs(Decimal value); // 0x10061139C
	public Decimal get_MaxOccurs(); // 0x10060D8BC
	public void set_MaxOccurs(Decimal value); // 0x100625458
	internal Decimal get_ValidatedMinOccurs(); // 0x1005E0808
	internal Decimal get_ValidatedMaxOccurs(); // 0x1005E0404
	internal virtual XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x10063273C
	internal XmlSchemaParticle GetShallowClone(); // 0x10062C1D0
	internal void CompileOccurence(ValidationEventHandler h, XmlSchema schema); // 0x10060D8DC
	internal override void CopyInfo(XmlSchemaParticle obj); // 0x100632744
	internal virtual bool ValidateOccurenceRangeOK(XmlSchemaParticle other, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x1006328D0
	internal virtual Decimal GetMinEffectiveTotalRange(); // 0x100632A84
	internal Decimal GetMinEffectiveTotalRangeAllAndSequence(); // 0x10060EAA0
	internal virtual bool ValidateIsEmptiable(); // 0x100632A90
	internal virtual bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100632BAC
	internal virtual void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x100632BB4
	internal virtual void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x100632BB8
	internal virtual void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x100632BBC
	internal virtual bool ParticleEquals(XmlSchemaParticle other); // 0x100632BC0
}

// Namespace: 
internal class EmptyParticle : XmlSchemaParticle // TypeDefIndex: 1966
{
	// Methods
	internal void .ctor(); // 0x100632738
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x100632BC8
	internal override bool ParticleEquals(XmlSchemaParticle other); // 0x100632BCC
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100632C04
	internal override void CheckRecursion(int depth, ValidationEventHandler h, XmlSchema schema); // 0x100632C0C
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x100632C10
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x100632C14
}

// Namespace: System.Xml.Schema
public class XmlSchemaPatternFacet : XmlSchemaFacet // TypeDefIndex: 1967
{
	// Methods
	public void .ctor(); // 0x100632C18
	internal override Facet get_ThisFacet(); // 0x100632C7C
	internal static XmlSchemaPatternFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100632C84
}

// Namespace: System.Xml.Schema
public class XmlSchemaRedefine : XmlSchemaExternal // TypeDefIndex: 1968
{
	// Fields
	private XmlSchemaObjectTable attributeGroups; // 0x88
	private XmlSchemaObjectTable groups; // 0x90
	private XmlSchemaObjectCollection items; // 0x98
	private XmlSchemaObjectTable schemaTypes; // 0xA0

	// Methods
	public void .ctor(); // 0x1006343E4
	public XmlSchemaObjectCollection get_Items(); // 0x100601D04
	internal override void SetParent(XmlSchemaObject parent); // 0x100634498
	internal static XmlSchemaRedefine Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100606DCC
}

// Namespace: System.Xml.Schema
public class XmlSchemaSet // TypeDefIndex: 1969
{
	// Fields
	private XmlNameTable nameTable; // 0x10
	private XmlResolver xmlResolver; // 0x18
	private ArrayList schemas; // 0x20
	private XmlSchemaObjectTable attributes; // 0x28
	private XmlSchemaObjectTable elements; // 0x30
	private XmlSchemaObjectTable types; // 0x38
	private Hashtable idCollection; // 0x40
	private XmlSchemaObjectTable namedIdentities; // 0x48
	private XmlSchemaCompilationSettings settings; // 0x50
	private bool isCompiled; // 0x58
	internal Guid CompilationId; // 0x5C
	private ValidationEventHandler ValidationEventHandler; // 0x70

	// Methods
	public void .ctor(); // 0x100638480
	public void .ctor(XmlNameTable nameTable); // 0x1006384E4
	public void add_ValidationEventHandler(ValidationEventHandler value); // 0x100638608
	public void remove_ValidationEventHandler(ValidationEventHandler value); // 0x1006386E8
	public int get_Count(); // 0x1006387C8
	public XmlSchemaObjectTable get_GlobalAttributes(); // 0x10063881C
	public XmlSchemaObjectTable get_GlobalElements(); // 0x100638888
	public XmlSchemaObjectTable get_GlobalTypes(); // 0x1006388F4
	public bool get_IsCompiled(); // 0x100638960
	public XmlSchemaCompilationSettings get_CompilationSettings(); // 0x100638968
	internal Hashtable get_IDCollection(); // 0x100638970
	internal XmlSchemaObjectTable get_NamedIdentities(); // 0x1006389DC
	public XmlSchema Add(XmlSchema schema); // 0x100638A48
	public void Compile(); // 0x100638AC4
	private void ClearGlobalComponents(); // 0x1006399B8
	private void AddGlobalComponents(XmlSchema schema); // 0x100639A0C
	public bool Contains(string targetNamespace); // 0x10063A408
	public bool Contains(XmlSchema targetNamespace); // 0x10063A7F8
	internal void CopyTo(Array array, int index); // 0x10063AAF8
	private string GetSafeNs(string ns); // 0x10063A784
	private void ResetCompile(); // 0x100638ABC
	public ICollection Schemas(); // 0x10063AB68
	public ICollection Schemas(string targetNamespace); // 0x10063AB70
	internal bool MissedSubComponents(string targetNamespace); // 0x10063AF2C
}

// Namespace: System.Xml.Schema
public class XmlSchemaSequence : XmlSchemaGroupBase // TypeDefIndex: 1970
{
	// Fields
	private XmlSchemaObjectCollection items; // 0x100

	// Methods
	public void .ctor(); // 0x100634670
	public override XmlSchemaObjectCollection get_Items(); // 0x1006346DC
	internal override void SetParent(XmlSchemaObject parent); // 0x1006346E4
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x1006348EC
	internal override XmlSchemaParticle GetOptimizedParticle(bool isTop); // 0x100634E78
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x1006355BC
	internal override bool ValidateDerivationByRestriction(XmlSchemaParticle baseParticle, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x10063584C
	internal override Decimal GetMinEffectiveTotalRange(); // 0x1006362C8
	internal override void ValidateUniqueParticleAttribution(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x1006362D0
	private void ValidateUPAOnHeadingOptionalComponents(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x10063630C
	private void ValidateUPAOnItems(XmlSchemaObjectTable qnames, ArrayList nsNames, ValidationEventHandler h, XmlSchema schema); // 0x1006365A0
	internal override void ValidateUniqueTypeAttribution(XmlSchemaObjectTable labels, ValidationEventHandler h, XmlSchema schema); // 0x100637248
	internal static XmlSchemaSequence Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10063746C
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleContent : XmlSchemaContentModel // TypeDefIndex: 1971
{
	// Fields
	private XmlSchemaContent content; // 0x88

	// Methods
	public void .ctor(); // 0x10063B29C
	public override XmlSchemaContent get_Content(); // 0x10063B2A4
	internal override void SetParent(XmlSchemaObject parent); // 0x10063B2AC
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10063B378
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10063B614
	internal static XmlSchemaSimpleContent Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10063B6DC
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleContentExtension : XmlSchemaContent // TypeDefIndex: 1972
{
	// Fields
	private XmlSchemaAnyAttribute any; // 0x90
	private XmlSchemaObjectCollection attributes; // 0x98
	private XmlQualifiedName baseTypeName; // 0xA0

	// Methods
	public void .ctor(); // 0x10063D9DC
	public XmlQualifiedName get_BaseTypeName(); // 0x10063DA78
	public XmlSchemaObjectCollection get_Attributes(); // 0x10063DA80
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x10063DA88
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x10063DA90
	internal override bool get_IsExtension(); // 0x10063DA98
	internal override void SetParent(XmlSchemaObject parent); // 0x10063DAA0
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10063DCB8
	internal override XmlQualifiedName GetBaseTypeName(); // 0x10063E37C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10063E384
	internal static XmlSchemaSimpleContentExtension Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10063CFF4
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleContentRestriction : XmlSchemaContent // TypeDefIndex: 1973
{
	// Fields
	private XmlSchemaAnyAttribute any; // 0x90
	private XmlSchemaObjectCollection attributes; // 0x98
	private XmlSchemaSimpleType baseType; // 0xA0
	private XmlQualifiedName baseTypeName; // 0xA8
	private XmlSchemaObjectCollection facets; // 0xB0

	// Methods
	public void .ctor(); // 0x10063EEF0
	public XmlQualifiedName get_BaseTypeName(); // 0x10063EFAC
	public XmlSchemaSimpleType get_BaseType(); // 0x10063EFB4
	public XmlSchemaObjectCollection get_Attributes(); // 0x10063EFBC
	public XmlSchemaAnyAttribute get_AnyAttribute(); // 0x10063EFC4
	public void set_AnyAttribute(XmlSchemaAnyAttribute value); // 0x10063EFCC
	internal override bool get_IsExtension(); // 0x10063EFD4
	internal override void SetParent(XmlSchemaObject parent); // 0x10063EFDC
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10063F224
	internal override XmlQualifiedName GetBaseTypeName(); // 0x10063F8C0
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10063F8C8
	internal static XmlSchemaSimpleContentRestriction Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10063BEEC
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleType : XmlSchemaType // TypeDefIndex: 1974
{
	// Fields
	private static XmlSchemaSimpleType schemaLocationType; // 0x0
	private XmlSchemaSimpleTypeContent content; // 0xC8
	internal bool islocal; // 0xD0
	private bool recursed; // 0xD1
	private XmlSchemaDerivationMethod variety; // 0xD4
	internal static readonly XmlSchemaSimpleType XsAnySimpleType; // 0x8
	internal static readonly XmlSchemaSimpleType XsString; // 0x10
	internal static readonly XmlSchemaSimpleType XsBoolean; // 0x18
	internal static readonly XmlSchemaSimpleType XsDecimal; // 0x20
	internal static readonly XmlSchemaSimpleType XsFloat; // 0x28
	internal static readonly XmlSchemaSimpleType XsDouble; // 0x30
	internal static readonly XmlSchemaSimpleType XsDuration; // 0x38
	internal static readonly XmlSchemaSimpleType XsDateTime; // 0x40
	internal static readonly XmlSchemaSimpleType XsTime; // 0x48
	internal static readonly XmlSchemaSimpleType XsDate; // 0x50
	internal static readonly XmlSchemaSimpleType XsGYearMonth; // 0x58
	internal static readonly XmlSchemaSimpleType XsGYear; // 0x60
	internal static readonly XmlSchemaSimpleType XsGMonthDay; // 0x68
	internal static readonly XmlSchemaSimpleType XsGDay; // 0x70
	internal static readonly XmlSchemaSimpleType XsGMonth; // 0x78
	internal static readonly XmlSchemaSimpleType XsHexBinary; // 0x80
	internal static readonly XmlSchemaSimpleType XsBase64Binary; // 0x88
	internal static readonly XmlSchemaSimpleType XsAnyUri; // 0x90
	internal static readonly XmlSchemaSimpleType XsQName; // 0x98
	internal static readonly XmlSchemaSimpleType XsNotation; // 0xA0
	internal static readonly XmlSchemaSimpleType XsNormalizedString; // 0xA8
	internal static readonly XmlSchemaSimpleType XsToken; // 0xB0
	internal static readonly XmlSchemaSimpleType XsLanguage; // 0xB8
	internal static readonly XmlSchemaSimpleType XsNMToken; // 0xC0
	internal static readonly XmlSchemaSimpleType XsNMTokens; // 0xC8
	internal static readonly XmlSchemaSimpleType XsName; // 0xD0
	internal static readonly XmlSchemaSimpleType XsNCName; // 0xD8
	internal static readonly XmlSchemaSimpleType XsID; // 0xE0
	internal static readonly XmlSchemaSimpleType XsIDRef; // 0xE8
	internal static readonly XmlSchemaSimpleType XsIDRefs; // 0xF0
	internal static readonly XmlSchemaSimpleType XsEntity; // 0xF8
	internal static readonly XmlSchemaSimpleType XsEntities; // 0x100
	internal static readonly XmlSchemaSimpleType XsInteger; // 0x108
	internal static readonly XmlSchemaSimpleType XsNonPositiveInteger; // 0x110
	internal static readonly XmlSchemaSimpleType XsNegativeInteger; // 0x118
	internal static readonly XmlSchemaSimpleType XsLong; // 0x120
	internal static readonly XmlSchemaSimpleType XsInt; // 0x128
	internal static readonly XmlSchemaSimpleType XsShort; // 0x130
	internal static readonly XmlSchemaSimpleType XsByte; // 0x138
	internal static readonly XmlSchemaSimpleType XsNonNegativeInteger; // 0x140
	internal static readonly XmlSchemaSimpleType XsUnsignedLong; // 0x148
	internal static readonly XmlSchemaSimpleType XsUnsignedInt; // 0x150
	internal static readonly XmlSchemaSimpleType XsUnsignedShort; // 0x158
	internal static readonly XmlSchemaSimpleType XsUnsignedByte; // 0x160
	internal static readonly XmlSchemaSimpleType XsPositiveInteger; // 0x168
	internal static readonly XmlSchemaSimpleType XdtUntypedAtomic; // 0x170
	internal static readonly XmlSchemaSimpleType XdtAnyAtomicType; // 0x178
	internal static readonly XmlSchemaSimpleType XdtYearMonthDuration; // 0x180
	internal static readonly XmlSchemaSimpleType XdtDayTimeDuration; // 0x188

	// Methods
	public void .ctor(); // 0x1006417FC
	private static void .cctor(); // 0x10064188C
	private static XmlSchemaSimpleType BuildSchemaType(string name, string baseName); // 0x1006421C4
	private static XmlSchemaSimpleType BuildSchemaType(string name, string baseName, bool xdt, bool baseXdt); // 0x100642240
	internal static XsdAnySimpleType get_AnySimpleType(); // 0x10064351C
	public XmlSchemaSimpleTypeContent get_Content(); // 0x100643580
	public void set_Content(XmlSchemaSimpleTypeContent value); // 0x1006421BC
	internal XmlSchemaDerivationMethod get_Variety(); // 0x100643588
	internal override void SetParent(XmlSchemaObject parent); // 0x100643590
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10064360C
	internal void CollectBaseType(ValidationEventHandler h, XmlSchema schema); // 0x100643A90
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100643F44
	internal void ValidateDerivationValid(object baseType, XmlSchemaObjectCollection facets, ValidationEventHandler h, XmlSchema schema); // 0x100644238
	internal bool ValidateTypeDerivationOK(object baseType, ValidationEventHandler h, XmlSchema schema, bool raiseError); // 0x100644770
	internal static XmlSchemaSimpleType Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10063FC0C
}

// Namespace: System.Xml.Schema
public abstract class XmlSchemaSimpleTypeContent : XmlSchemaAnnotated // TypeDefIndex: 1975
{
	// Fields
	internal XmlSchemaSimpleType OwnerType; // 0x88

	// Methods
	protected void .ctor(); // 0x100647488
	internal object get_ActualBaseSchemaType(); // 0x100647490
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent // TypeDefIndex: 1976
{
	// Fields
	private XmlSchemaSimpleType itemType; // 0x90
	private XmlQualifiedName itemTypeName; // 0x98
	private object validatedListItemType; // 0xA0
	private XmlSchemaSimpleType validatedListItemSchemaType; // 0xA8

	// Methods
	public void .ctor(); // 0x100642040
	public XmlQualifiedName get_ItemTypeName(); // 0x100647530
	public void set_ItemTypeName(XmlQualifiedName value); // 0x1006421B4
	public XmlSchemaSimpleType get_ItemType(); // 0x100647538
	public void set_ItemType(XmlSchemaSimpleType value); // 0x10064237C
	internal object get_ValidatedListItemType(); // 0x100644768
	internal override void SetParent(XmlSchemaObject parent); // 0x100647540
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x1006475BC
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100647798
	internal static XmlSchemaSimpleTypeList Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100646190
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent // TypeDefIndex: 1977
{
	// Fields
	private XmlSchemaSimpleType baseType; // 0x90
	private XmlQualifiedName baseTypeName; // 0x98
	private XmlSchemaObjectCollection facets; // 0xA0
	private string[] enumarationFacetValues; // 0xA8
	private string[] patternFacetValues; // 0xB0
	private Regex[] rexPatterns; // 0xB8
	private Decimal lengthFacet; // 0xC0
	private Decimal maxLengthFacet; // 0xD0
	private Decimal minLengthFacet; // 0xE0
	private Decimal fractionDigitsFacet; // 0xF0
	private Decimal totalDigitsFacet; // 0x100
	private object maxInclusiveFacet; // 0x110
	private object maxExclusiveFacet; // 0x118
	private object minInclusiveFacet; // 0x120
	private object minExclusiveFacet; // 0x128
	private Facet fixedFacets; // 0x130
	private static NumberStyles lengthStyle; // 0x0
	private static readonly Facet listFacets; // 0x4

	// Methods
	public void .ctor(); // 0x100648484
	private static void .cctor(); // 0x100648520
	public XmlQualifiedName get_BaseTypeName(); // 0x100648578
	public XmlSchemaSimpleType get_BaseType(); // 0x100648580
	public XmlSchemaObjectCollection get_Facets(); // 0x100644230
	internal override void SetParent(XmlSchemaObject parent); // 0x100648588
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x1006487A0
	private bool IsAllowedFacet(XmlSchemaFacet xsf); // 0x100648A30
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x100648CA4
	internal void ValidateActualType(ValidationEventHandler h, XmlSchema schema); // 0x100649A08
	internal object GetActualType(ValidationEventHandler h, XmlSchema schema, bool validate); // 0x100643C0C
	private void checkTotalDigitsFacet(XmlSchemaTotalDigitsFacet totf, ValidationEventHandler h); // 0x10064B474
	private void checkFractionDigitsFacet(XmlSchemaFractionDigitsFacet fracf, ValidationEventHandler h); // 0x10064AF20
	private void checkMinMaxFacet(XmlSchemaFacet facet, object baseFacet, ValidationEventHandler h); // 0x10064AC2C
	private void checkLengthFacet(XmlSchemaLengthFacet lf, Facet facetsDefined, ValidationEventHandler h); // 0x100649A10
	private void checkMaxLengthFacet(XmlSchemaMaxLengthFacet maxlf, Facet facetsDefined, ValidationEventHandler h); // 0x100649D0C
	private void checkMinLengthFacet(XmlSchemaMinLengthFacet minlf, Facet facetsDefined, ValidationEventHandler h); // 0x10064A4A0
	private XsdAnySimpleType getDatatype(); // 0x10064BBD0
	private object ValidateValueWithDatatype(string value); // 0x10064B9C8
	internal bool ValidateValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x10064BCFC
	private bool ValidateListValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x10064BE08
	private bool ValidateListValueWithFacetsCore(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x10064BFD0
	private bool ValidateNonListValueWithFacets(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x10064BEEC
	private bool ValidateNonListValueWithFacetsCore(string value, XmlNameTable nt, IXmlNamespaceResolver nsmgr); // 0x10064CE40
	internal static XmlSchemaSimpleTypeRestriction Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x1006451F8
}

// Namespace: System.Xml.Schema
public class XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent // TypeDefIndex: 1978
{
	// Fields
	private XmlSchemaObjectCollection baseTypes; // 0x90
	private XmlQualifiedName[] memberTypes; // 0x98
	private object[] validatedTypes; // 0xA0
	private XmlSchemaSimpleType[] validatedSchemaTypes; // 0xA8

	// Methods
	public void .ctor(); // 0x10064D8D0
	public XmlSchemaObjectCollection get_BaseTypes(); // 0x10064D93C
	public XmlQualifiedName[] get_MemberTypes(); // 0x10064D944
	internal object[] get_ValidatedTypes(); // 0x100644A0C
	internal override void SetParent(XmlSchemaObject parent); // 0x10064D94C
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10064DB34
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10064DFF8
	internal static XmlSchemaSimpleTypeUnion Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100646AA0
}

// Namespace: System.Xml.Schema
public class XmlSchemaTotalDigitsFacet : XmlSchemaNumericFacet // TypeDefIndex: 1979
{
	// Methods
	public void .ctor(); // 0x10064ED3C
	internal override Facet get_ThisFacet(); // 0x10064ED44
	internal static XmlSchemaTotalDigitsFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100640608
}

// Namespace: System.Xml.Schema
public class XmlSchemaType : XmlSchemaAnnotated // TypeDefIndex: 1980
{
	// Fields
	private XmlSchemaDerivationMethod final; // 0x88
	private bool isMixed; // 0x8C
	private string name; // 0x90
	private bool recursed; // 0x98
	internal XmlQualifiedName BaseSchemaTypeName; // 0xA0
	internal XmlSchemaType BaseXmlSchemaTypeInternal; // 0xA8
	internal XmlSchemaDatatype DatatypeInternal; // 0xB0
	internal XmlSchemaDerivationMethod resolvedDerivedBy; // 0xB8
	internal XmlSchemaDerivationMethod finalResolved; // 0xBC
	internal XmlQualifiedName QNameInternal; // 0xC0
	private static Dictionary`2<string, int> <>f__switch$map42; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map43; // 0x8

	// Methods
	public void .ctor(); // 0x100641808
	public string get_Name(); // 0x100643A1C
	public void set_Name(string value); // 0x1006451F0
	public XmlSchemaDerivationMethod get_Final(); // 0x100643A24
	public void set_Final(XmlSchemaDerivationMethod value); // 0x1006451E8
	public XmlQualifiedName get_QualifiedName(); // 0x10063A400
	public XmlSchemaDerivationMethod get_FinalResolved(); // 0x100644228
	public object get_BaseSchemaType(); // 0x1006474A8
	public XmlSchemaType get_BaseXmlSchemaType(); // 0x100644220
	public XmlSchemaDerivationMethod get_DerivedBy(); // 0x10064EE74
	public XmlSchemaDatatype get_Datatype(); // 0x100643F3C
	public virtual bool get_IsMixed(); // 0x10064EE7C
	public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName); // 0x100642384
	public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode type); // 0x100647AFC
	internal bool ValidateRecursionCheck(); // 0x10064EE8C
}

// Namespace: System.Xml.Schema
public class XmlSchemaUnique : XmlSchemaIdentityConstraint // TypeDefIndex: 1981
{
	// Methods
	public void .ctor(); // 0x10064EF24
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x10064EF2C
	internal override int Validate(ValidationEventHandler h, XmlSchema schema); // 0x10064EF34
	internal static XmlSchemaUnique Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x10064EF3C
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaUse : Enum // TypeDefIndex: 1982
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaUse None = 0; // 0x0
	public const XmlSchemaUse Optional = 1; // 0x0
	public const XmlSchemaUse Prohibited = 2; // 0x0
	public const XmlSchemaUse Required = 3; // 0x0

}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaValidity : Enum // TypeDefIndex: 1983
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaValidity NotKnown = 0; // 0x0
	public const XmlSchemaValidity Valid = 1; // 0x0
	public const XmlSchemaValidity Invalid = 2; // 0x0

}

// Namespace: System.Xml.Schema
public class XmlSchemaValidationException : XmlSchemaException // TypeDefIndex: 1984
{
	// Methods
	public void .ctor(); // 0x100652DA4
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x100652DAC
	internal void .ctor(string message, object sender, string sourceUri, XmlSchemaObject sourceObject, Exception innerException); // 0x100652DB4
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x100652DBC
}

// Namespace: System.Xml.Schema
public class XmlSchemaWhiteSpaceFacet : XmlSchemaFacet // TypeDefIndex: 1985
{
	// Methods
	public void .ctor(); // 0x100652DC4
	internal override Facet get_ThisFacet(); // 0x100652E2C
	internal static XmlSchemaWhiteSpaceFacet Read(XmlSchemaReader reader, ValidationEventHandler h); // 0x100640F04
}

// Namespace: System.Xml.Schema
public class XmlSchemaXPath : XmlSchemaAnnotated // TypeDefIndex: 1986
{
	// Fields
	private string xpath; // 0x88
	private XmlNamespaceManager nsmgr; // 0x90
	internal bool isSelector; // 0x98
	private XsdIdentityPath[] compiledExpression; // 0xA0
	private XsdIdentityPath currentPath; // 0xA8
	private static Dictionary`2<string, int> <>f__switch$map4A; // 0x0

	// Methods
	public void .ctor(); // 0x100652E34
	public string get_XPath(); // 0x100652E3C
	internal override int Compile(ValidationEventHandler h, XmlSchema schema); // 0x100652E44
	internal XsdIdentityPath[] get_CompiledExpression(); // 0x100653534
	private void ParseExpression(string xpath, ValidationEventHandler h, XmlSchema schema); // 0x1006533A0
	private void ParsePath(string xpath, int pos, ArrayList paths, ValidationEventHandler h, XmlSchema schema); // 0x10065353C
	private void ParseStep(string xpath, int pos, ArrayList steps, ArrayList paths, ValidationEventHandler h, XmlSchema schema); // 0x100653728
	private int SkipWhitespace(string xpath, int pos); // 0x10065368C
	internal static XmlSchemaXPath Read(XmlSchemaReader reader, ValidationEventHandler h, string name); // 0x10064F85C
}

// Namespace: System.Xml.Schema
public sealed class XmlSeverityType : Enum // TypeDefIndex: 1987
{
	// Fields
	public int value__; // 0x10
	public const XmlSeverityType Error = 0; // 0x0
	public const XmlSeverityType Warning = 1; // 0x0

}

// Namespace: System.Xml.Schema
internal class ValidationHandler // TypeDefIndex: 1988
{
	// Methods
	public static void RaiseValidationEvent(ValidationEventHandler handle, Exception innerException, string message, XmlSchemaObject xsobj, object sender, string sourceUri, XmlSeverityType severity); // 0x1005FFC68
}

// Namespace: System.Xml.Schema
internal class XmlSchemaUtil // TypeDefIndex: 1989
{
	// Fields
	internal static XmlSchemaDerivationMethod FinalAllowed; // 0x0
	internal static XmlSchemaDerivationMethod ElementBlockAllowed; // 0x4
	internal static XmlSchemaDerivationMethod ComplexTypeBlockAllowed; // 0x8
	internal static readonly bool StrictMsCompliant; // 0xC
	private static Dictionary`2<string, int> <>f__switch$map4B; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map4C; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map4D; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map4E; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map4F; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map50; // 0x38

	// Methods
	private static void .cctor(); // 0x100650338
	public static void AddToTable(XmlSchemaObjectTable table, XmlSchemaObject obj, XmlQualifiedName qname, ValidationEventHandler h); // 0x1006503F4
	public static void CompileID(string id, XmlSchemaObject xso, Hashtable idCollection, ValidationEventHandler h); // 0x100634CB4
	public static bool CheckAnyUri(string uri); // 0x100650640
	public static bool CheckNormalizedString(string token); // 0x1006506A4
	public static bool CheckNCName(string name); // 0x100643A2C
	public static bool CheckQName(XmlQualifiedName qname); // 0x10063E374
	public static XmlParserContext GetParserContext(XmlReader reader); // 0x1006507B8
	public static bool IsBuiltInDatatypeName(XmlQualifiedName qname); // 0x10063E668
	public static bool AreSchemaDatatypeEqual(XsdAnySimpleType st1, object v1, XsdAnySimpleType st2, object v2); // 0x10064C5F4
	public static bool IsValidQName(string qname); // 0x1006508C4
	public static string[] SplitList(string list); // 0x10064E714
	public static void ReadUnhandledAttribute(XmlReader reader, XmlSchemaObject xso); // 0x100638108
	private static void ParseWsdlArrayType(XmlReader reader, XmlAttribute attr); // 0x100650B04
	public static bool ReadBoolAttribute(XmlReader reader, out Exception innerExcpetion); // 0x10064ED4C
	public static XmlSchemaDerivationMethod ReadDerivationAttribute(XmlReader reader, out Exception innerExcpetion, string name, XmlSchemaDerivationMethod allowed); // 0x100644A14
	private static XmlSchemaDerivationMethod AddFlag(XmlSchemaDerivationMethod dst, XmlSchemaDerivationMethod add, XmlSchemaDerivationMethod allowed); // 0x1006511B8
	public static XmlSchemaForm ReadFormAttribute(XmlReader reader, out Exception innerExcpetion); // 0x1006512F8
	public static XmlSchemaContentProcessing ReadProcessingAttribute(XmlReader reader, out Exception innerExcpetion); // 0x1006514E0
	public static XmlSchemaUse ReadUseAttribute(XmlReader reader, out Exception innerExcpetion); // 0x100651704
	public static XmlQualifiedName ReadQNameAttribute(XmlReader reader, out Exception innerEx); // 0x10063EE48
	public static XmlQualifiedName ToQName(XmlReader reader, string qnamestr, out Exception innerEx); // 0x10064EA60
	public static int ValidateAttributesResolved(XmlSchemaObjectTable attributesResolved, ValidationEventHandler h, XmlSchema schema, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlSchemaAnyAttribute anyAttributeUse, XmlSchemaAttributeGroup redefined, bool skipEquivalent); // 0x100651928
	internal static bool AreAttributesEqual(XmlSchemaAttribute one, XmlSchemaAttribute another); // 0x10065284C
	public static XmlSchemaObject FindAttributeDeclaration(string ns, XmlSchemaSet schemas, XmlSchemaComplexType cType, XmlQualifiedName qname); // 0x1006529CC
	private static bool AttributeWildcardItemValid(XmlSchemaAnyAttribute anyAttr, XmlQualifiedName qname, string ns); // 0x100652B54
}

// Namespace: System.Xml.Schema
internal class XmlSchemaReader : XmlReader, IXmlLineInfo // TypeDefIndex: 1990
{
	// Fields
	private XmlReader reader; // 0x20
	private ValidationEventHandler handler; // 0x28
	private bool hasLineInfo; // 0x30

	// Methods
	public void .ctor(XmlReader reader, ValidationEventHandler handler); // 0x100604550
	public string get_FullName(); // 0x1006333FC
	public XmlReader get_Reader(); // 0x1006334D0
	public void RaiseInvalidElementError(); // 0x10060CAD8
	public bool ReadNextElement(); // 0x1006046EC
	public void SkipToEnd(); // 0x10060FC14
	public bool HasLineInfo(); // 0x1006334D8
	public int get_LineNumber(); // 0x100604874
	public int get_LinePosition(); // 0x100604A48
	public override int get_AttributeCount(); // 0x1006334E0
	public override string get_BaseURI(); // 0x100633534
	public override bool get_CanResolveEntity(); // 0x100633588
	public override int get_Depth(); // 0x1006335DC
	public override bool get_EOF(); // 0x100633630
	public override bool get_HasAttributes(); // 0x100633684
	public override bool get_HasValue(); // 0x1006336D8
	public override bool get_IsDefault(); // 0x10063372C
	public override bool get_IsEmptyElement(); // 0x100633780
	public override string get_Item(string name); // 0x1006337D4
	public override string get_Item(string name, string namespaceURI); // 0x100633838
	public override string get_LocalName(); // 0x1006338A4
	public override string get_Name(); // 0x1006338F8
	public override string get_NamespaceURI(); // 0x10063394C
	public override XmlNameTable get_NameTable(); // 0x1006339A0
	public override XmlNodeType get_NodeType(); // 0x1006339F4
	public override string get_Prefix(); // 0x100633A48
	public override ReadState get_ReadState(); // 0x100633A9C
	public override string get_Value(); // 0x100633AF0
	public override string get_XmlLang(); // 0x100633B44
	public override XmlSpace get_XmlSpace(); // 0x100633B98
	public override void Close(); // 0x100633BEC
	public override bool Equals(object obj); // 0x100633C40
	public override string GetAttribute(string name); // 0x100633CA4
	public override string GetAttribute(string name, string namespaceURI); // 0x100633D08
	public override int GetHashCode(); // 0x100633D74
	public override string LookupNamespace(string prefix); // 0x100633DC8
	public override void MoveToAttribute(int i); // 0x100633E30
	public override bool MoveToAttribute(string name); // 0x100633E98
	public override bool MoveToAttribute(string name, string ns); // 0x100633F00
	public override XmlNodeType MoveToContent(); // 0x100633F70
	public override bool MoveToElement(); // 0x100633FC8
	public override bool MoveToFirstAttribute(); // 0x100634020
	public override bool MoveToNextAttribute(); // 0x100634078
	public override bool Read(); // 0x1006340D0
	public override bool ReadAttributeValue(); // 0x100634128
	public override void ReadEndElement(); // 0x100634180
	public override string ReadInnerXml(); // 0x1006341D8
	public override string ReadOuterXml(); // 0x100634230
	public override void ReadStartElement(); // 0x100634288
	public override void ResolveEntity(); // 0x1006342E0
	public override void Skip(); // 0x100634338
	public override string ToString(); // 0x100634390
}

// Namespace: System.Xml.Schema
public sealed class XmlSchemaValidationFlags : Enum // TypeDefIndex: 1991
{
	// Fields
	public int value__; // 0x10
	public const XmlSchemaValidationFlags None = 0; // 0x0
	public const XmlSchemaValidationFlags ProcessInlineSchema = 1; // 0x0
	public const XmlSchemaValidationFlags ProcessSchemaLocation = 2; // 0x0
	public const XmlSchemaValidationFlags ReportValidationWarnings = 4; // 0x0
	public const XmlSchemaValidationFlags ProcessIdentityConstraints = 8; // 0x0
	public const XmlSchemaValidationFlags AllowXmlAttributes = 16; // 0x0

}

// Namespace: System.Xml.Schema
public sealed class XmlTypeCode : Enum // TypeDefIndex: 1992
{
	// Fields
	public int value__; // 0x10
	public const XmlTypeCode None = 0; // 0x0
	public const XmlTypeCode Item = 1; // 0x0
	public const XmlTypeCode Node = 2; // 0x0
	public const XmlTypeCode Document = 3; // 0x0
	public const XmlTypeCode Element = 4; // 0x0
	public const XmlTypeCode Attribute = 5; // 0x0
	public const XmlTypeCode Namespace = 6; // 0x0
	public const XmlTypeCode ProcessingInstruction = 7; // 0x0
	public const XmlTypeCode Comment = 8; // 0x0
	public const XmlTypeCode Text = 9; // 0x0
	public const XmlTypeCode AnyAtomicType = 10; // 0x0
	public const XmlTypeCode UntypedAtomic = 11; // 0x0
	public const XmlTypeCode String = 12; // 0x0
	public const XmlTypeCode Boolean = 13; // 0x0
	public const XmlTypeCode Decimal = 14; // 0x0
	public const XmlTypeCode Float = 15; // 0x0
	public const XmlTypeCode Double = 16; // 0x0
	public const XmlTypeCode Duration = 17; // 0x0
	public const XmlTypeCode DateTime = 18; // 0x0
	public const XmlTypeCode Time = 19; // 0x0
	public const XmlTypeCode Date = 20; // 0x0
	public const XmlTypeCode GYearMonth = 21; // 0x0
	public const XmlTypeCode GYear = 22; // 0x0
	public const XmlTypeCode GMonthDay = 23; // 0x0
	public const XmlTypeCode GDay = 24; // 0x0
	public const XmlTypeCode GMonth = 25; // 0x0
	public const XmlTypeCode HexBinary = 26; // 0x0
	public const XmlTypeCode Base64Binary = 27; // 0x0
	public const XmlTypeCode AnyUri = 28; // 0x0
	public const XmlTypeCode QName = 29; // 0x0
	public const XmlTypeCode Notation = 30; // 0x0
	public const XmlTypeCode NormalizedString = 31; // 0x0
	public const XmlTypeCode Token = 32; // 0x0
	public const XmlTypeCode Language = 33; // 0x0
	public const XmlTypeCode NmToken = 34; // 0x0
	public const XmlTypeCode Name = 35; // 0x0
	public const XmlTypeCode NCName = 36; // 0x0
	public const XmlTypeCode Id = 37; // 0x0
	public const XmlTypeCode Idref = 38; // 0x0
	public const XmlTypeCode Entity = 39; // 0x0
	public const XmlTypeCode Integer = 40; // 0x0
	public const XmlTypeCode NonPositiveInteger = 41; // 0x0
	public const XmlTypeCode NegativeInteger = 42; // 0x0
	public const XmlTypeCode Long = 43; // 0x0
	public const XmlTypeCode Int = 44; // 0x0
	public const XmlTypeCode Short = 45; // 0x0
	public const XmlTypeCode Byte = 46; // 0x0
	public const XmlTypeCode NonNegativeInteger = 47; // 0x0
	public const XmlTypeCode UnsignedLong = 48; // 0x0
	public const XmlTypeCode UnsignedInt = 49; // 0x0
	public const XmlTypeCode UnsignedShort = 50; // 0x0
	public const XmlTypeCode UnsignedByte = 51; // 0x0
	public const XmlTypeCode PositiveInteger = 52; // 0x0
	public const XmlTypeCode YearMonthDuration = 53; // 0x0
	public const XmlTypeCode DayTimeDuration = 54; // 0x0

}

// Namespace: System.Xml.Serialization
public class CodeIdentifier // TypeDefIndex: 1993
{
	// Methods
	public static string MakePascal(string identifier); // 0x100654340
	public static string MakeValid(string identifier); // 0x100654478
}

// Namespace: System.Xml.Serialization
public interface IXmlSerializable // TypeDefIndex: 1994
{
}

// Namespace: System.Xml.Serialization
internal sealed class SchemaTypes : Enum // TypeDefIndex: 1995
{
	// Fields
	public int value__; // 0x10
	public const SchemaTypes NotSet = 0; // 0x0
	public const SchemaTypes Primitive = 1; // 0x0
	public const SchemaTypes Enum = 2; // 0x0
	public const SchemaTypes Array = 3; // 0x0
	public const SchemaTypes Class = 4; // 0x0
	public const SchemaTypes XmlSerializable = 5; // 0x0
	public const SchemaTypes XmlNode = 6; // 0x0
	public const SchemaTypes Void = 7; // 0x0

}

// Namespace: System.Xml.Serialization
internal class TypeData // TypeDefIndex: 1996
{
	// Fields
	private Type type; // 0x10
	private string elementName; // 0x18
	private SchemaTypes sType; // 0x20
	private Type listItemType; // 0x28
	private string typeName; // 0x30
	private string fullTypeName; // 0x38
	private TypeData listItemTypeData; // 0x40
	private TypeData mappedType; // 0x48
	private XmlSchemaPatternFacet facet; // 0x50
	private bool hasPublicConstructor; // 0x58
	private bool nullableOverride; // 0x59
	private static string[] keywords; // 0x0

	// Methods
	public void .ctor(Type type, string elementName, bool isPrimitive); // 0x1006546A4
	public void .ctor(Type type, string elementName, bool isPrimitive, TypeData mappedType, XmlSchemaPatternFacet facet); // 0x1006546B0
	private static void .cctor(); // 0x100654C64
	public string get_XmlType(); // 0x100654B24
	public Type get_Type(); // 0x10065635C
	public SchemaTypes get_SchemaType(); // 0x100656364
	public bool get_IsListType(); // 0x100654A84
	public void set_IsNullable(bool value); // 0x10065636C
	public TypeData get_ListItemTypeData(); // 0x100654A94
	public Type get_ListItemType(); // 0x100656374
	public static PropertyInfo GetIndexerProperty(Type collectionType); // 0x100656CD8
	private static InvalidOperationException CreateMissingAddMethodException(Type type, string inheritFrom, Type argumentType); // 0x100656E5C
	private Type GetGenericListItemType(Type type); // 0x100656B2C
}

// Namespace: System.Xml.Serialization
internal class TypeTranslator // TypeDefIndex: 1997
{
	// Fields
	private static Hashtable nameCache; // 0x0
	private static Hashtable primitiveTypes; // 0x8
	private static Hashtable primitiveArrayTypes; // 0x10
	private static Hashtable nullableTypes; // 0x18

	// Methods
	private static void .cctor(); // 0x100657074
	public static TypeData GetTypeData(Type type); // 0x100656AC4
	public static TypeData GetTypeData(Type runtimeType, string xmlDataType); // 0x1006595A8
	public static TypeData GetPrimitiveTypeData(string typeName); // 0x10065A040
	public static TypeData GetPrimitiveTypeData(string typeName, bool nullable); // 0x10065A168
	public static string GetArrayName(string elemName); // 0x100654B2C
	public static void ParseArrayType(string arrayType, out string type, out string ns, out string dimensions); // 0x100650DB0
}

// Namespace: System.Xml.Serialization
public class XmlAnyAttributeAttribute : Attribute // TypeDefIndex: 1998
{
	// Methods
	public void .ctor(); // 0x10065A36C
}

// Namespace: System.Xml.Serialization
public class XmlAnyElementAttribute : Attribute // TypeDefIndex: 1999
{
	// Fields
	private int order; // 0x10

	// Methods
	public void .ctor(); // 0x10065A374
}

// Namespace: System.Xml.Serialization
public class XmlAttributeAttribute : Attribute // TypeDefIndex: 2000
{
	// Fields
	private string attributeName; // 0x10
	private string dataType; // 0x18

	// Methods
	public void .ctor(string attributeName); // 0x10065A384
	public void set_DataType(string value); // 0x10065A3B0
}

// Namespace: System.Xml.Serialization
public class XmlElementAttribute : Attribute // TypeDefIndex: 2001
{
	// Fields
	private string elementName; // 0x10
	private Type type; // 0x18
	private int order; // 0x20

	// Methods
	public void .ctor(string elementName); // 0x10065A3B8
	public void .ctor(string elementName, Type type); // 0x10065A3EC
	public void set_Type(Type value); // 0x10065A42C
}

// Namespace: System.Xml.Serialization
public class XmlEnumAttribute : Attribute // TypeDefIndex: 2002
{
	// Fields
	private string name; // 0x10

	// Methods
	public void .ctor(string name); // 0x10065A434
}

// Namespace: System.Xml.Serialization
public class XmlIgnoreAttribute : Attribute // TypeDefIndex: 2003
{
	// Methods
	public void .ctor(); // 0x10065A460
}

// Namespace: System.Xml.Serialization
public class XmlNamespaceDeclarationsAttribute : Attribute // TypeDefIndex: 2004
{
	// Methods
	public void .ctor(); // 0x10065A468
}

// Namespace: System.Xml.Serialization
public class XmlRootAttribute : Attribute // TypeDefIndex: 2005
{
	// Fields
	private string elementName; // 0x10
	private bool isNullable; // 0x18
	private string ns; // 0x20

	// Methods
	public void .ctor(string elementName); // 0x10065A470
	public void set_Namespace(string value); // 0x10065A4A4
}

// Namespace: System.Xml.Serialization
public class XmlSerializerNamespaces // TypeDefIndex: 2006
{
	// Fields
	private ListDictionary namespaces; // 0x10

	// Methods
	public void .ctor(); // 0x10065A4AC
	public void Add(string prefix, string ns); // 0x1006509EC
	public XmlQualifiedName[] ToArray(); // 0x10065325C
}

// Namespace: System.Xml.Serialization
public class XmlTextAttribute : Attribute // TypeDefIndex: 2007
{
	// Methods
	public void .ctor(); // 0x10065A518
}

// Namespace: System.Xml
public sealed class XmlNodeChangedEventHandler : MulticastDelegate // TypeDefIndex: 2008
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100671190
	public virtual void Invoke(object sender, XmlNodeChangedEventArgs e); // 0x100665970
	public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object); // 0x1006711A0
	public virtual void EndInvoke(IAsyncResult result); // 0x1006711FC
}

// Namespace: System.Xml.Schema
public sealed class ValidationEventHandler : MulticastDelegate // TypeDefIndex: 2009
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1005FFBF0
	public virtual void Invoke(object sender, ValidationEventArgs e); // 0x1005E3DD8
	public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object); // 0x1005FFC00
	public virtual void EndInvoke(IAsyncResult result); // 0x1005FFC5C
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 2010
{
	// Fields
	internal static $ArrayType$8 $$field-36; // 0x0
	internal static $ArrayType$256 $$field-37; // 0x8
	internal static $ArrayType$256 $$field-38; // 0x108
	internal static $ArrayType$1280 $$field-39; // 0x208
	internal static $ArrayType$12 $$field-40; // 0x708
	internal static $ArrayType$12 $$field-41; // 0x714
	internal static $ArrayType$8 $$field-43; // 0x720
	internal static $ArrayType$8 $$field-44; // 0x728

}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 2011
{
}

// Namespace: 
private struct $ArrayType$8 // TypeDefIndex: 2012
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 2013
{
}

// Namespace: 
private struct $ArrayType$1280 // TypeDefIndex: 2014
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2015
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2016
{
}

// Namespace: System.Runtime.CompilerServices
public sealed class ExtensionAttribute : Attribute // TypeDefIndex: 2017
{
	// Methods
	public void .ctor(); // 0x1005BE4AC
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 2018
{
	// Methods
	public static string GetText(string msg); // 0x1005BBF10
	public static string GetText(string fmt, object[] args); // 0x1005BBF18
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 2019
{
	// Methods
	public void .ctor(); // 0x1005BE4A4
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 2020
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Methods
	private static RandomNumberGenerator get_Rng(); // 0x1005BBF94
	public static byte[] Key(int size); // 0x1005BC008
	public static byte[] IV(int size); // 0x1005BC0B0
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 2021
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected bool encrypt; // 0x18
	private int BlockSizeByte; // 0x1C
	private byte[] temp; // 0x20
	private byte[] temp2; // 0x28
	private byte[] workBuff; // 0x30
	private byte[] workout; // 0x38
	private int FeedBackByte; // 0x40
	private int FeedBackIter; // 0x44
	private bool m_disposed; // 0x48
	private bool lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Methods
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x1005BC158
	private void System.IDisposable.Dispose(); // 0x1005BC534
	protected override void Finalize(); // 0x1005BC58C
	protected virtual void Dispose(bool disposing); // 0x1005BC62C
	public virtual bool get_CanTransformMultipleBlocks(); // 0x1005BC694
	public virtual bool get_CanReuseTransform(); // 0x1005BC69C
	public virtual int get_InputBlockSize(); // 0x1005BC6A4
	public virtual int get_OutputBlockSize(); // 0x1005BC6AC
	protected virtual void Transform(byte[] input, byte[] output); // 0x1005BC6B4
	protected abstract void ECB(byte[] input, byte[] output); // 0
	protected virtual void CBC(byte[] input, byte[] output); // 0x1005BC904
	protected virtual void CFB(byte[] input, byte[] output); // 0x1005BCAD8
	protected virtual void OFB(byte[] input, byte[] output); // 0x1005BCD84
	protected virtual void CTS(byte[] input, byte[] output); // 0x1005BCDE4
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1005BCE44
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1005BCF80
	private bool get_KeepLastBlock(); // 0x1005BD1D0
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x1005BD270
	private void Random(byte[] buffer, int start, int length); // 0x1005BD47C
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x1005BD56C
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1005BD71C
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1005BDAE8
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x1005BDEC8
}

// Namespace: System.Linq
internal static class Check // TypeDefIndex: 2022
{
	// Methods
	public static void Source(object source); // 0x1005BE0C0
	public static void SourceAndSelector(object source, object selector); // 0x1005BE134
	public static void SourceAndPredicate(object source, object predicate); // 0x1005BE1DC
	public static void FirstAndSecond(object first, object second); // 0x1005BE284
	public static void SourceAndKeySelector(object source, object keySelector); // 0x1005BE32C
	public static void SourceAndKeyElementSelectors(object source, object keySelector, object elementSelector); // 0x1005BE3D4
}

// Namespace: System.Linq
public static class Enumerable // TypeDefIndex: 2023
{
	// Methods
	public static bool All(IEnumerable`1<T> source, Func`2<T, bool> predicate); // 0
	public static bool Any(IEnumerable`1<T> source); // 0
	public static bool Any(IEnumerable`1<T> source, Func`2<T, bool> predicate); // 0
	public static bool Contains(IEnumerable`1<T> source, T value, IEqualityComparer`1<T> comparer); // 0
	public static int Count(IEnumerable`1<T> source); // 0
	private static T ElementAt(IEnumerable`1<T> source, int index, Fallback fallback); // 0
	public static T ElementAt(IEnumerable`1<T> source, int index); // 0
	public static IEnumerable`1<T> Except(IEnumerable`1<T> first, IEnumerable`1<T> second); // 0
	public static IEnumerable`1<T> Except(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer); // 0
	private static IEnumerable`1<T> CreateExceptIterator(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer); // 0
	private static T First(IEnumerable`1<T> source, Func`2<T, bool> predicate, Fallback fallback); // 0
	public static T First(IEnumerable`1<T> source); // 0
	public static T FirstOrDefault(IEnumerable`1<T> source); // 0
	public static T FirstOrDefault(IEnumerable`1<T> source, Func`2<T, bool> predicate); // 0
	private static List`1<T> ContainsGroup(Dictionary`2<T, List`1<T>> items, T key, IEqualityComparer`1<T> comparer); // 0
	public static IEnumerable`1<IGrouping`2<T, T>> GroupBy(IEnumerable`1<T> source, Func`2<T, T> keySelector, Func`2<T, T> elementSelector); // 0
	public static IEnumerable`1<IGrouping`2<T, T>> GroupBy(IEnumerable`1<T> source, Func`2<T, T> keySelector, Func`2<T, T> elementSelector, IEqualityComparer`1<T> comparer); // 0
	private static IEnumerable`1<IGrouping`2<T, T>> CreateGroupByIterator(IEnumerable`1<T> source, Func`2<T, T> keySelector, Func`2<T, T> elementSelector, IEqualityComparer`1<T> comparer); // 0
	public static T Last(IEnumerable`1<T> source); // 0
	public static T LastOrDefault(IEnumerable`1<T> source); // 0
	public static int Max(IEnumerable`1<T> source, Func`2<T, int> selector); // 0
	private static T Iterate(IEnumerable`1<T> source, T initValue, Func`3<T, T, T> selector); // 0
	public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, T> keySelector); // 0
	public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, T> keySelector, IComparer`1<T> comparer); // 0
	public static IOrderedEnumerable`1<T> OrderByDescending(IEnumerable`1<T> source, Func`2<T, T> keySelector); // 0
	public static IOrderedEnumerable`1<T> OrderByDescending(IEnumerable`1<T> source, Func`2<T, T> keySelector, IComparer`1<T> comparer); // 0
	public static IEnumerable`1<T> Select(IEnumerable`1<T> source, Func`2<T, T> selector); // 0
	private static IEnumerable`1<T> CreateSelectIterator(IEnumerable`1<T> source, Func`2<T, T> selector); // 0
	public static T[] ToArray(IEnumerable`1<T> source); // 0
	public static List`1<T> ToList(IEnumerable`1<T> source); // 0
	public static IEnumerable`1<T> Where(IEnumerable`1<T> source, Func`2<T, bool> predicate); // 0
	private static IEnumerable`1<T> CreateWhereIterator(IEnumerable`1<T> source, Func`2<T, bool> predicate); // 0
}

// Namespace: 
private sealed class Fallback : Enum // TypeDefIndex: 2024
{
	// Fields
	public int value__; // 0x10
	public const Fallback Default = 0; // 0x0
	public const Fallback Throw = 1; // 0x0

}

// Namespace: 
private sealed class <CreateExceptIterator>c__Iterator4`1 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1<T>, IEnumerator`1<T> // TypeDefIndex: 2025
{
	// Fields
	internal IEnumerable`1<T> second; // 0x0
	internal IEqualityComparer`1<T> comparer; // 0x0
	internal HashSet`1<T> <items>__0; // 0x0
	internal IEnumerable`1<T> first; // 0x0
	internal IEnumerator`1<T> <$s_57>__1; // 0x0
	internal T <element>__2; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal IEnumerable`1<T> <$>second; // 0x0
	internal IEqualityComparer`1<T> <$>comparer; // 0x0
	internal IEnumerable`1<T> <$>first; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<TSource>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TSource>.GetEnumerator(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class <CreateGroupByIterator>c__Iterator6`3 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1<IGrouping`2<T, T>>, IEnumerator`1<IGrouping`2<T, T>> // TypeDefIndex: 2026
{
	// Fields
	internal Dictionary`2<T, List`1<T>> <groups>__0; // 0x0
	internal List`1<T> <nullList>__1; // 0x0
	internal int <counter>__2; // 0x0
	internal int <nullCounter>__3; // 0x0
	internal IEnumerable`1<T> source; // 0x0
	internal IEnumerator`1<T> <$s_63>__4; // 0x0
	internal T <item>__5; // 0x0
	internal Func`2<T, T> keySelector; // 0x0
	internal T <key>__6; // 0x0
	internal Func`2<T, T> elementSelector; // 0x0
	internal T <element>__7; // 0x0
	internal IEqualityComparer`1<T> comparer; // 0x0
	internal List`1<T> <group>__8; // 0x0
	internal Enumerator<T, List`1<T>> <$s_64>__9; // 0x0
	internal KeyValuePair`2<T, List`1<T>> <group>__10; // 0x0
	internal int $PC; // 0x0
	internal IGrouping`2<T, T> $current; // 0x0
	internal IEnumerable`1<T> <$>source; // 0x0
	internal Func`2<T, T> <$>keySelector; // 0x0
	internal Func`2<T, T> <$>elementSelector; // 0x0
	internal IEqualityComparer`1<T> <$>comparer; // 0x0

	// Methods
	public void .ctor(); // 0
	private IGrouping`2<T, T> System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<IGrouping`2<T, T>> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>.GetEnumerator(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class <CreateSelectIterator>c__Iterator10`2 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1<T>, IEnumerator`1<T> // TypeDefIndex: 2027
{
	// Fields
	internal IEnumerable`1<T> source; // 0x0
	internal IEnumerator`1<T> <$s_81>__0; // 0x0
	internal T <element>__1; // 0x0
	internal Func`2<T, T> selector; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal IEnumerable`1<T> <$>source; // 0x0
	internal Func`2<T, T> <$>selector; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<TResult>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TResult>.GetEnumerator(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class <CreateWhereIterator>c__Iterator1D`1 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1<T>, IEnumerator`1<T> // TypeDefIndex: 2028
{
	// Fields
	internal IEnumerable`1<T> source; // 0x0
	internal IEnumerator`1<T> <$s_110>__0; // 0x0
	internal T <element>__1; // 0x0
	internal Func`2<T, bool> predicate; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal IEnumerable`1<T> <$>source; // 0x0
	internal Func`2<T, bool> <$>predicate; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<TSource>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TSource>.GetEnumerator(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: 
private sealed class <Max>c__AnonStorey25`1 // TypeDefIndex: 2029
{
	// Fields
	internal Func`2<T, int> selector; // 0x0

	// Methods
	public void .ctor(); // 0
	internal int <>m__17(T a, int b); // 0
}

// Namespace: System.Linq
internal class Grouping`2 : IEnumerable, IEnumerable`1<T>, IGrouping`2<T, T> // TypeDefIndex: 2030
{
	// Fields
	private T key; // 0x0
	private IEnumerable`1<T> group; // 0x0

	// Methods
	public void .ctor(T key, IEnumerable`1<T> group); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public T get_Key(); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
}

// Namespace: System.Linq
public interface IGrouping`2 : IEnumerable, IEnumerable`1<T> // TypeDefIndex: 2031
{
	// Methods
	public abstract T get_Key(); // 0
}

// Namespace: System.Linq
public interface IOrderedEnumerable`1 : IEnumerable, IEnumerable`1<T> // TypeDefIndex: 2032
{
}

// Namespace: System.Linq
internal abstract class OrderedEnumerable`1 : IEnumerable, IEnumerable`1<T>, IOrderedEnumerable`1<T> // TypeDefIndex: 2033
{
	// Fields
	private IEnumerable`1<T> source; // 0x0

	// Methods
	protected void .ctor(IEnumerable`1<T> source); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public abstract SortContext`1<T> CreateContext(SortContext`1<T> current); // 0
	protected abstract IEnumerable`1<T> Sort(IEnumerable`1<T> source); // 0
}

// Namespace: System.Linq
internal class OrderedSequence`2 : OrderedEnumerable`1<T> // TypeDefIndex: 2034
{
	// Fields
	private OrderedEnumerable`1<T> parent; // 0x0
	private Func`2<T, T> selector; // 0x0
	private IComparer`1<T> comparer; // 0x0
	private SortDirection direction; // 0x0

	// Methods
	internal void .ctor(IEnumerable`1<T> source, Func`2<T, T> key_selector, IComparer`1<T> comparer, SortDirection direction); // 0
	public override SortContext`1<T> CreateContext(SortContext`1<T> current); // 0
	protected override IEnumerable`1<T> Sort(IEnumerable`1<T> source); // 0
}

// Namespace: System.Linq
internal class QuickSort`1 // TypeDefIndex: 2035
{
	// Fields
	private T[] elements; // 0x0
	private int[] indexes; // 0x0
	private SortContext`1<T> context; // 0x0

	// Methods
	private void .ctor(IEnumerable`1<T> source, SortContext`1<T> context); // 0
	private static int[] CreateIndexes(int length); // 0
	private void PerformSort(); // 0
	private int CompareItems(int first_index, int second_index); // 0
	private int MedianOfThree(int left, int right); // 0
	private void Sort(int left, int right); // 0
	private void InsertionSort(int left, int right); // 0
	private void Swap(int left, int right); // 0
	public static IEnumerable`1<T> Sort(IEnumerable`1<T> source, SortContext`1<T> context); // 0
}

// Namespace: 
private sealed class <Sort>c__Iterator21 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1<T>, IEnumerator`1<T> // TypeDefIndex: 2036
{
	// Fields
	internal IEnumerable`1<T> source; // 0x0
	internal SortContext`1<T> context; // 0x0
	internal QuickSort`1<T> <sorter>__0; // 0x0
	internal int <i>__1; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal IEnumerable`1<T> <$>source; // 0x0
	internal SortContext`1<T> <$>context; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<TElement>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: System.Linq
internal abstract class SortContext`1 // TypeDefIndex: 2037
{
	// Fields
	protected SortDirection direction; // 0x0
	protected SortContext`1<T> child_context; // 0x0

	// Methods
	protected void .ctor(SortDirection direction, SortContext`1<T> child_context); // 0
	public abstract void Initialize(T[] elements); // 0
	public abstract int Compare(int first_index, int second_index); // 0
}

// Namespace: System.Linq
internal sealed class SortDirection : Enum // TypeDefIndex: 2038
{
	// Fields
	public int value__; // 0x10
	public const SortDirection Ascending = 0; // 0x0
	public const SortDirection Descending = 1; // 0x0

}

// Namespace: System.Linq
internal class SortSequenceContext`2 : SortContext`1<T> // TypeDefIndex: 2039
{
	// Fields
	private Func`2<T, T> selector; // 0x0
	private IComparer`1<T> comparer; // 0x0
	private T[] keys; // 0x0

	// Methods
	public void .ctor(Func`2<T, T> selector, IComparer`1<T> comparer, SortDirection direction, SortContext`1<T> child_context); // 0
	public override void Initialize(T[] elements); // 0
	public override int Compare(int first_index, int second_index); // 0
}

// Namespace: System.Collections.Generic
public class HashSet`1 : IEnumerable, ISerializable, IDeserializationCallback, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 2040
{
	// Fields
	private const int INITIAL_SIZE = 10; // 0x0
	private const float DEFAULT_LOAD_FACTOR = 0.9; // 0x0
	private const int NO_SLOT = -1; // 0x0
	private const int HASH_FLAG = -2147483648; // 0x0
	private int[] table; // 0x0
	private Link<T>[] links; // 0x0
	private T[] slots; // 0x0
	private int touched; // 0x0
	private int empty_slot; // 0x0
	private int count; // 0x0
	private int threshold; // 0x0
	private IEqualityComparer`1<T> comparer; // 0x0
	private SerializationInfo si; // 0x0
	private int generation; // 0x0

	// Methods
	public void .ctor(); // 0
	public void .ctor(IEnumerable`1<T> collection); // 0
	public void .ctor(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer); // 0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator(); // 0
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly(); // 0
	private void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int index); // 0
	private void System.Collections.Generic.ICollection<T>.Add(T item); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public int get_Count(); // 0
	private void Init(int capacity, IEqualityComparer`1<T> comparer); // 0
	private void InitArrays(int size); // 0
	private bool SlotsContainsAt(int index, int hash, T item); // 0
	public void CopyTo(T[] array, int index); // 0
	public void CopyTo(T[] array, int index, int count); // 0
	private void Resize(); // 0
	private int GetLinkHashCode(int index); // 0
	private int GetItemHashCode(T item); // 0
	public bool Add(T item); // 0
	public void Clear(); // 0
	public bool Contains(T item); // 0
	public bool Remove(T item); // 0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0
	public virtual void OnDeserialization(object sender); // 0
	public Enumerator<T> GetEnumerator(); // 0
}

// Namespace: 
private struct Link // TypeDefIndex: 2041
{
	// Fields
	public int HashCode; // 0x0
	public int Next; // 0x0

}

// Namespace: 
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 2042
{
	// Fields
	private HashSet`1<T> hashset; // 0x0
	private int next; // 0x0
	private int stamp; // 0x0
	private T current; // 0x0

	// Methods
	internal void .ctor(HashSet`1<T> hashset); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	private void System.Collections.IEnumerator.Reset(); // 0
	public bool MoveNext(); // 0
	public T get_Current(); // 0
	public void Dispose(); // 0
	private void CheckState(); // 0
}

// Namespace: 
private static class PrimeHelper // TypeDefIndex: 2043
{
	// Fields
	private static readonly int[] primes_table; // 0x0

	// Methods
	private static void .cctor(); // 0
	private static bool TestPrime(int x); // 0
	private static int CalcPrime(int x); // 0
	public static int ToPrime(int x); // 0
}

// Namespace: System.Security.Cryptography
public abstract class Aes : SymmetricAlgorithm // TypeDefIndex: 2044
{
	// Methods
	protected void .ctor(); // 0x1005BE4B4
}

// Namespace: System.Security.Cryptography
public sealed class AesManaged : Aes // TypeDefIndex: 2045
{
	// Methods
	public void .ctor(); // 0x1005BE628
	public override void GenerateIV(); // 0x1005BE62C
	public override void GenerateKey(); // 0x1005BE658
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x1005BE684
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x1005BF044
	public override byte[] get_IV(); // 0x1005BF0C0
	public override void set_IV(byte[] value); // 0x1005BF0C8
	public override byte[] get_Key(); // 0x1005BF0D0
	public override void set_Key(byte[] value); // 0x1005BF0D8
	public override int get_KeySize(); // 0x1005BF0E0
	public override void set_KeySize(int value); // 0x1005BF0E8
	public override ICryptoTransform CreateDecryptor(); // 0x1005BF0F0
	public override ICryptoTransform CreateEncryptor(); // 0x1005BF130
	protected override void Dispose(bool disposing); // 0x1005BF170
}

// Namespace: System.Security.Cryptography
internal class AesTransform : SymmetricTransform // TypeDefIndex: 2046
{
	// Fields
	private uint[] expandedKey; // 0x58
	private int Nk; // 0x60
	private int Nr; // 0x64
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x8
	private static readonly byte[] iSBox; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] T1; // 0x20
	private static readonly uint[] T2; // 0x28
	private static readonly uint[] T3; // 0x30
	private static readonly uint[] iT0; // 0x38
	private static readonly uint[] iT1; // 0x40
	private static readonly uint[] iT2; // 0x48
	private static readonly uint[] iT3; // 0x50

	// Methods
	public void .ctor(Aes algo, bool encryption, byte[] key, byte[] iv); // 0x1005BE700
	private static void .cctor(); // 0x1005BF2CC
	protected override void ECB(byte[] input, byte[] output); // 0x1005BF614
	private uint SubByte(uint a); // 0x1005BF178
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x1005BF628
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x1005C3B30
}

// Namespace: System
public sealed class Action : MulticastDelegate // TypeDefIndex: 2047
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1005BDFA8
	public virtual void Invoke(); // 0x1005BDFB8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1005BE054
	public virtual void EndInvoke(IAsyncResult result); // 0x1005BE0B4
}

// Namespace: System
public sealed class Action`2 : MulticastDelegate // TypeDefIndex: 2048
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg1, T arg2); // 0
	public virtual IAsyncResult BeginInvoke(T arg1, T arg2, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Action`3 : MulticastDelegate // TypeDefIndex: 2049
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg1, T arg2, T arg3); // 0
	public virtual IAsyncResult BeginInvoke(T arg1, T arg2, T arg3, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Action`4 : MulticastDelegate // TypeDefIndex: 2050
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg1, T arg2, T arg3, T arg4); // 0
	public virtual IAsyncResult BeginInvoke(T arg1, T arg2, T arg3, T arg4, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Func`1 : MulticastDelegate // TypeDefIndex: 2051
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(); // 0
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Func`2 : MulticastDelegate // TypeDefIndex: 2052
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(T arg1); // 0
	public virtual IAsyncResult BeginInvoke(T arg1, AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: System
public sealed class Func`3 : MulticastDelegate // TypeDefIndex: 2053
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual T Invoke(T arg1, T arg2); // 0
	public virtual IAsyncResult BeginInvoke(T arg1, T arg2, AsyncCallback callback, object object); // 0
	public virtual T EndInvoke(IAsyncResult result); // 0
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 2054
{
	// Fields
	internal static $ArrayType$136 $$field-0; // 0x0
	internal static $ArrayType$120 $$field-1; // 0x88
	internal static $ArrayType$256 $$field-2; // 0x100
	internal static $ArrayType$256 $$field-3; // 0x200
	internal static $ArrayType$1024 $$field-4; // 0x300
	internal static $ArrayType$1024 $$field-5; // 0x700
	internal static $ArrayType$1024 $$field-6; // 0xB00
	internal static $ArrayType$1024 $$field-7; // 0xF00
	internal static $ArrayType$1024 $$field-8; // 0x1300
	internal static $ArrayType$1024 $$field-9; // 0x1700
	internal static $ArrayType$1024 $$field-10; // 0x1B00
	internal static $ArrayType$1024 $$field-11; // 0x1F00

}

// Namespace: 
private struct $ArrayType$136 // TypeDefIndex: 2055
{
}

// Namespace: 
private struct $ArrayType$120 // TypeDefIndex: 2056
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 2057
{
}

// Namespace: 
private struct $ArrayType$1024 // TypeDefIndex: 2058
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2059
{
}

// Namespace: UnityEngine
public sealed class AssetBundleCreateRequest : AsyncOperation // TypeDefIndex: 2060
{
	// Methods
	public void .ctor(); // 0x100797778
	public AssetBundle get_assetBundle(); // 0x100797788
	internal CompatibilityCheck get_compatibilityChecks(); // 0x1007977EC
	internal void set_compatibilityChecks(CompatibilityCheck value); // 0x100797850
}

// Namespace: 
internal sealed class CompatibilityCheck : Enum // TypeDefIndex: 2061
{
	// Fields
	public int value__; // 0x10
	public const CompatibilityCheck None = 0; // 0x0
	public const CompatibilityCheck TypeTree = 1; // 0x0
	public const CompatibilityCheck RuntimeVersion = 2; // 0x0
	public const CompatibilityCheck ClassVersion = 4; // 0x0
	public const CompatibilityCheck All = 7; // 0x0

}

// Namespace: UnityEngine
public sealed class AssetBundleRequest : AsyncOperation // TypeDefIndex: 2062
{
	// Methods
	public void .ctor(); // 0x100797A4C
	public Object get_asset(); // 0x100797A54
	public Object[] get_allAssets(); // 0x100797AB8
}

// Namespace: UnityEngine
public sealed class AssetBundle : Object // TypeDefIndex: 2063
{
	// Methods
	public static AssetBundle LoadFromFile(string path, uint crc, ulong offset); // 0x100797154
	public static AssetBundle LoadFromFile(string path); // 0x1007971D0
	public Object LoadAsset(string name); // 0x1007971DC
	public Object LoadAsset(string name, Type type); // 0x10079726C
	private Object LoadAsset_Internal(string name, Type type); // 0x100797364
	public AssetBundleRequest LoadAssetAsync(string name, Type type); // 0x1007973E0
	private AssetBundleRequest LoadAssetAsync_Internal(string name, Type type); // 0x1007974D8
	internal Object[] LoadAssetWithSubAssets_Internal(string name, Type type); // 0x100797554
	public Object[] LoadAllAssets(); // 0x1007975D0
	public Object[] LoadAllAssets(Type type); // 0x100797650
	public void Unload(bool unloadAllLoadedObjects); // 0x100797704
}

// Namespace: UnityEngine
public sealed class AssetBundleManifest : Object // TypeDefIndex: 2064
{
	// Methods
	public string[] GetAllAssetBundlesWithVariant(); // 0x1007978C4
	public Hash128 GetAssetBundleHash(string assetBundleName); // 0x100797928
	private static void INTERNAL_CALL_GetAssetBundleHash(AssetBundleManifest self, string assetBundleName, out Hash128 value); // 0x10079795C
	public string[] GetAllDependencies(string assetBundleName); // 0x1007979D8
}

// Namespace: UnityEngine
public sealed class SendMessageOptions : Enum // TypeDefIndex: 2065
{
	// Fields
	public int value__; // 0x10
	public const SendMessageOptions RequireReceiver = 0; // 0x0
	public const SendMessageOptions DontRequireReceiver = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class Space : Enum // TypeDefIndex: 2066
{
	// Fields
	public int value__; // 0x10
	public const Space World = 0; // 0x0
	public const Space Self = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class RuntimePlatform : Enum // TypeDefIndex: 2067
{
	// Fields
	public int value__; // 0x10
	public const RuntimePlatform OSXEditor = 0; // 0x0
	public const RuntimePlatform OSXPlayer = 1; // 0x0
	public const RuntimePlatform WindowsPlayer = 2; // 0x0
	public const RuntimePlatform OSXWebPlayer = 3; // 0x0
	public const RuntimePlatform OSXDashboardPlayer = 4; // 0x0
	public const RuntimePlatform WindowsWebPlayer = 5; // 0x0
	public const RuntimePlatform WindowsEditor = 7; // 0x0
	public const RuntimePlatform IPhonePlayer = 8; // 0x0
	public const RuntimePlatform XBOX360 = 10; // 0x0
	public const RuntimePlatform PS3 = 9; // 0x0
	public const RuntimePlatform Android = 11; // 0x0
	public const RuntimePlatform NaCl = 12; // 0x0
	public const RuntimePlatform FlashPlayer = 15; // 0x0
	public const RuntimePlatform LinuxPlayer = 13; // 0x0
	public const RuntimePlatform WebGLPlayer = 17; // 0x0
	public const RuntimePlatform MetroPlayerX86 = 18; // 0x0
	public const RuntimePlatform WSAPlayerX86 = 18; // 0x0
	public const RuntimePlatform MetroPlayerX64 = 19; // 0x0
	public const RuntimePlatform WSAPlayerX64 = 19; // 0x0
	public const RuntimePlatform MetroPlayerARM = 20; // 0x0
	public const RuntimePlatform WSAPlayerARM = 20; // 0x0
	public const RuntimePlatform WP8Player = 21; // 0x0
	public const RuntimePlatform BlackBerryPlayer = 22; // 0x0
	public const RuntimePlatform TizenPlayer = 23; // 0x0
	public const RuntimePlatform PSP2 = 24; // 0x0
	public const RuntimePlatform PS4 = 25; // 0x0
	public const RuntimePlatform PSM = 26; // 0x0
	public const RuntimePlatform XboxOne = 27; // 0x0
	public const RuntimePlatform SamsungTVPlayer = 28; // 0x0
	public const RuntimePlatform WiiU = 30; // 0x0
	public const RuntimePlatform tvOS = 31; // 0x0

}

// Namespace: UnityEngine
public sealed class SystemLanguage : Enum // TypeDefIndex: 2068
{
	// Fields
	public int value__; // 0x10
	public const SystemLanguage Afrikaans = 0; // 0x0
	public const SystemLanguage Arabic = 1; // 0x0
	public const SystemLanguage Basque = 2; // 0x0
	public const SystemLanguage Belarusian = 3; // 0x0
	public const SystemLanguage Bulgarian = 4; // 0x0
	public const SystemLanguage Catalan = 5; // 0x0
	public const SystemLanguage Chinese = 6; // 0x0
	public const SystemLanguage Czech = 7; // 0x0
	public const SystemLanguage Danish = 8; // 0x0
	public const SystemLanguage Dutch = 9; // 0x0
	public const SystemLanguage English = 10; // 0x0
	public const SystemLanguage Estonian = 11; // 0x0
	public const SystemLanguage Faroese = 12; // 0x0
	public const SystemLanguage Finnish = 13; // 0x0
	public const SystemLanguage French = 14; // 0x0
	public const SystemLanguage German = 15; // 0x0
	public const SystemLanguage Greek = 16; // 0x0
	public const SystemLanguage Hebrew = 17; // 0x0
	public const SystemLanguage Icelandic = 19; // 0x0
	public const SystemLanguage Indonesian = 20; // 0x0
	public const SystemLanguage Italian = 21; // 0x0
	public const SystemLanguage Japanese = 22; // 0x0
	public const SystemLanguage Korean = 23; // 0x0
	public const SystemLanguage Latvian = 24; // 0x0
	public const SystemLanguage Lithuanian = 25; // 0x0
	public const SystemLanguage Norwegian = 26; // 0x0
	public const SystemLanguage Polish = 27; // 0x0
	public const SystemLanguage Portuguese = 28; // 0x0
	public const SystemLanguage Romanian = 29; // 0x0
	public const SystemLanguage Russian = 30; // 0x0
	public const SystemLanguage SerboCroatian = 31; // 0x0
	public const SystemLanguage Slovak = 32; // 0x0
	public const SystemLanguage Slovenian = 33; // 0x0
	public const SystemLanguage Spanish = 34; // 0x0
	public const SystemLanguage Swedish = 35; // 0x0
	public const SystemLanguage Thai = 36; // 0x0
	public const SystemLanguage Turkish = 37; // 0x0
	public const SystemLanguage Ukrainian = 38; // 0x0
	public const SystemLanguage Vietnamese = 39; // 0x0
	public const SystemLanguage ChineseSimplified = 40; // 0x0
	public const SystemLanguage ChineseTraditional = 41; // 0x0
	public const SystemLanguage Unknown = 42; // 0x0
	public const SystemLanguage Hungarian = 18; // 0x0

}

// Namespace: UnityEngine
public sealed class LogType : Enum // TypeDefIndex: 2069
{
	// Fields
	public int value__; // 0x10
	public const LogType Error = 0; // 0x0
	public const LogType Assert = 1; // 0x0
	public const LogType Warning = 2; // 0x0
	public const LogType Log = 3; // 0x0
	public const LogType Exception = 4; // 0x0

}

// Namespace: UnityEngine
public sealed class SystemInfo // TypeDefIndex: 2070
{
	// Methods
	public static string get_operatingSystem(); // 0x1007DFCC8
	public static int get_graphicsShaderLevel(); // 0x1007DFD20
	public static bool get_supportsRenderTextures(); // 0x1007DFD78
	public static bool get_supportsImageEffects(); // 0x1007DFDD0
	public static bool get_supports3DTextures(); // 0x1007DFE28
	public static bool get_supportsComputeShaders(); // 0x1007DFE80
	public static bool SupportsRenderTextureFormat(RenderTextureFormat format); // 0x1007DFED8
	public static string get_deviceUniqueIdentifier(); // 0x1007DFF3C
	public static string get_deviceModel(); // 0x1007DFF94
}

// Namespace: UnityEngine
public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 2071
{
	// Fields
	internal float m_Seconds; // 0x10

	// Methods
	public void .ctor(float seconds); // 0x1007EB350
}

// Namespace: UnityEngine
public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 2072
{
	// Methods
	public void .ctor(); // 0x1007EB348
}

// Namespace: UnityEngine
public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 2073
{
	// Methods
	public void .ctor(); // 0x1007EB338
}

// Namespace: UnityEngine
public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 2074
{
	// Methods
	protected void .ctor(); // 0x10079FDC4
	public abstract bool get_keepWaiting(); // 0
	public object get_Current(); // 0x10079FDCC
	public bool MoveNext(); // 0x10079FDD4
	public void Reset(); // 0x10079FE20
}

// Namespace: UnityEngine
public sealed class Coroutine : YieldInstruction // TypeDefIndex: 2075
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	private void .ctor(); // 0x10079F7BC
	private void ReleaseCoroutine(); // 0x10079F7C4
	protected override void Finalize(); // 0x10079F828
}

// Namespace: UnityEngine
public class ScriptableObject : Object // TypeDefIndex: 2076
{
	// Methods
	public void .ctor(); // 0x1007D578C
	private static void Internal_CreateScriptableObject(ScriptableObject self); // 0x1007D57FC
	public static ScriptableObject CreateInstance(string className); // 0x1007D5860
	public static ScriptableObject CreateInstance(Type type); // 0x1007D58C4
	private static ScriptableObject CreateInstanceFromType(Type type); // 0x1007D58C8
	public static T CreateInstance(); // 0
}

// Namespace: UnityEngine
public sealed class Caching // TypeDefIndex: 2077
{
	// Methods
	public static bool CleanCache(); // 0x10079A8C4
	public static bool IsVersionCached(string url, Hash128 hash); // 0x10079A91C
	private static bool INTERNAL_CALL_IsVersionCached(string url, Hash128 hash); // 0x10079A96C
}

// Namespace: UnityEngine
internal sealed class UnhandledExceptionHandler // TypeDefIndex: 2078
{
	// Methods
	private static void RegisterUECatcher(); // 0x1007E9094
	private static void HandleUnhandledException(object sender, UnhandledExceptionEventArgs args); // 0x1007E912C
	private static void PrintException(string title, Exception e); // 0x1007E91CC
	private static void NativeUnhandledExceptionHandler(); // 0x1007E92FC
}

// Namespace: UnityEngine
public sealed class CursorLockMode : Enum // TypeDefIndex: 2079
{
	// Fields
	public int value__; // 0x10
	public const CursorLockMode None = 0; // 0x0
	public const CursorLockMode Locked = 1; // 0x0
	public const CursorLockMode Confined = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class Cursor // TypeDefIndex: 2080
{
	// Methods
	public static CursorLockMode get_lockState(); // 0x10079FD08
	public static void set_lockState(CursorLockMode value); // 0x10079FD60
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
public sealed class GameCenterPlatform : ISocialPlatform // TypeDefIndex: 2081
{
	// Fields
	private static Action`1<bool> s_AuthenticateCallback; // 0x0
	private static Action`1<bool> s_FriendsCallback; // 0x8
	private static Action`1<IAchievementDescription[]> s_AchievementDescriptionLoaderCallback; // 0x10
	private static Action`1<IAchievement[]> s_AchievementLoaderCallback; // 0x18
	private static Action`1<bool> s_ProgressCallback; // 0x20
	private static Action`1<bool> s_ScoreCallback; // 0x28
	private static Action`1<IScore[]> s_ScoreLoaderCallback; // 0x30
	private static Action`1<bool> s_LeaderboardCallback; // 0x38
	private static Action`1<IUserProfile[]> s_UsersCallback; // 0x40
	private static AchievementDescription[] s_adCache; // 0x48
	private static UserProfile[] s_friends; // 0x50
	private static UserProfile[] s_users; // 0x58
	private static Action`1<bool> s_ResetAchievements; // 0x60
	private static LocalUser m_LocalUser; // 0x68
	private static List`1<GcLeaderboard> m_GcBoards; // 0x70

	// Methods
	public void .ctor(); // 0x1007D8A64
	private static void .cctor(); // 0x1007D8A6C
	private void UnityEngine.SocialPlatforms.ISocialPlatform.LoadFriends(ILocalUser user, Action`1<bool> callback); // 0x1007D8B64
	private void UnityEngine.SocialPlatforms.ISocialPlatform.Authenticate(ILocalUser user, Action`1<bool> callback); // 0x1007D8C28
	internal static void Internal_Authenticate(); // 0x1007D8C94
	internal static bool Internal_Authenticated(); // 0x1007D8CEC
	internal static string Internal_UserName(); // 0x1007D8D44
	internal static string Internal_UserID(); // 0x1007D8D9C
	internal static bool Internal_Underage(); // 0x1007D8DF4
	internal static Texture2D Internal_UserImage(); // 0x1007D8E4C
	internal static void Internal_LoadFriends(); // 0x1007D8BD0
	internal static void Internal_LoadAchievementDescriptions(); // 0x1007D8EA4
	internal static void Internal_LoadAchievements(); // 0x1007D8EFC
	internal static void Internal_ReportProgress(string id, double progress); // 0x1007D8F54
	internal static void Internal_ReportScore(long score, string category); // 0x1007D8FC8
	internal static void Internal_LoadScores(string category); // 0x1007D903C
	internal static void Internal_ShowAchievementsUI(); // 0x1007D90A0
	internal static void Internal_ShowLeaderboardUI(); // 0x1007D90F8
	internal static void Internal_LoadUsers(string[] userIds); // 0x1007D9150
	internal static void Internal_ResetAllAchievements(); // 0x1007D91B4
	internal static void Internal_ShowDefaultAchievementBanner(bool value); // 0x1007D920C
	public static void ResetAllAchievements(Action`1<bool> callback); // 0x1007D9270
	public static void ShowDefaultAchievementCompletionBanner(bool value); // 0x1007D92DC
	public static void ShowLeaderboardUI(string leaderboardID, TimeScope timeScope); // 0x1007D9340
	internal static void Internal_ShowSpecificLeaderboardUI(string leaderboardID, int timeScope); // 0x1007D93B4
	private static void ClearAchievementDescriptions(int size); // 0x1007D9428
	private static void SetAchievementDescription(GcAchievementDescriptionData data, int number); // 0x1007D9514
	private static void SetAchievementDescriptionImage(Texture2D texture, int number); // 0x1007D9680
	private static void TriggerAchievementDescriptionCallback(); // 0x1007D97A4
	private static void AuthenticateCallbackWrapper(int result); // 0x1007D98E0
	private static void ClearFriends(int size); // 0x1007D9ACC
	private static void SetFriends(GcUserProfileData data, int number); // 0x1007D9BE4
	private static void SetFriendImage(Texture2D texture, int number); // 0x1007D9D6C
	private static void TriggerFriendsCallbackWrapper(int result); // 0x1007D9F34
	private static void AchievementCallbackWrapper(GcAchievementData[] result); // 0x1007DA048
	private static void ProgressCallbackWrapper(bool success); // 0x1007DA304
	private static void ScoreCallbackWrapper(bool success); // 0x1007DA3BC
	private static void ScoreLoaderCallbackWrapper(GcScoreData[] result); // 0x1007DA474
	public ILocalUser get_localUser(); // 0x1007DA704
	private static void PopulateLocalUser(); // 0x1007D99BC
	public void LoadAchievementDescriptions(Action`1<IAchievementDescription[]> callback); // 0x1007DA884
	public void ReportProgress(string id, double progress, Action`1<bool> callback); // 0x1007DAA78
	public void LoadAchievements(Action`1<IAchievement[]> callback); // 0x1007DAB3C
	public void ReportScore(long score, string board, Action`1<bool> callback); // 0x1007DABF8
	public void LoadScores(string category, Action`1<IScore[]> callback); // 0x1007DACB0
	public void LoadScores(ILeaderboard board, Action`1<bool> callback); // 0x1007DAD80
	private static void LeaderboardCallbackWrapper(bool success); // 0x1007DB35C
	public bool GetLoading(ILeaderboard board); // 0x1007DB414
	private bool VerifyAuthentication(); // 0x1007DA940
	public void ShowAchievementsUI(); // 0x1007DB6E4
	public void ShowLeaderboardUI(); // 0x1007DB740
	private static void ClearUsers(int size); // 0x1007DB79C
	private static void SetUser(GcUserProfileData data, int number); // 0x1007DB80C
	private static void SetUserImage(Texture2D texture, int number); // 0x1007DB88C
	private static void TriggerUsersCallbackWrapper(); // 0x1007DB90C
	public void LoadUsers(string[] userIds, Action`1<IUserProfile[]> callback); // 0x1007DB9C0
	private static void SafeSetUserImage(UserProfile[] array, Texture2D texture, int number); // 0x1007D9DEC
	private static void SafeClearArray(UserProfile[] array, int size); // 0x1007D9B3C
	public ILeaderboard CreateLeaderboard(); // 0x1007DBA90
	public IAchievement CreateAchievement(); // 0x1007DBAEC
	private static void TriggerResetAchievementCallback(bool result); // 0x1007DBB98
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
internal sealed class GcLeaderboard // TypeDefIndex: 2082
{
	// Fields
	private IntPtr m_InternalLeaderboard; // 0x10
	private Leaderboard m_GenericLeaderboard; // 0x18

	// Methods
	internal void .ctor(Leaderboard board); // 0x1007DB200
	protected override void Finalize(); // 0x1007DBE18
	internal bool Contains(Leaderboard board); // 0x1007DB670
	internal void SetScores(GcScoreData[] scoreDatas); // 0x1007DBEE8
	internal void SetLocalScore(GcScoreData scoreData); // 0x1007DC028
	internal void SetMaxRange(uint maxRange); // 0x1007DC068
	internal void SetTitle(string title); // 0x1007DC07C
	internal void Internal_LoadScores(string category, int from, int count, int playerScope, int timeScope); // 0x1007DB2B8
	internal void Internal_LoadScoresWithUsers(string category, int timeScope, string[] userIDs); // 0x1007DB22C
	internal bool Loading(); // 0x1007DB680
	internal void Dispose(); // 0x1007DBE84
}

// Namespace: UnityEngine
public sealed class RenderSettings : Object // TypeDefIndex: 2083
{
	// Methods
	public static bool get_fog(); // 0x1007D3CCC
	public static void set_fog(bool value); // 0x1007D3D24
	public static Color get_ambientEquatorColor(); // 0x1007D3D88
	public static void set_ambientEquatorColor(Color value); // 0x1007D3E18
	private static void INTERNAL_get_ambientEquatorColor(out Color value); // 0x1007D3DB4
	private static void INTERNAL_set_ambientEquatorColor(Color value); // 0x1007D3E40
	public static Color get_ambientGroundColor(); // 0x1007D3EA4
	public static void set_ambientGroundColor(Color value); // 0x1007D3F34
	private static void INTERNAL_get_ambientGroundColor(out Color value); // 0x1007D3ED0
	private static void INTERNAL_set_ambientGroundColor(Color value); // 0x1007D3F5C
	public static Color get_ambientLight(); // 0x1007D3FC0
	public static void set_ambientLight(Color value); // 0x1007D4050
	private static void INTERNAL_get_ambientLight(out Color value); // 0x1007D3FEC
	private static void INTERNAL_set_ambientLight(Color value); // 0x1007D4078
	public static Material get_skybox(); // 0x1007D40DC
	public static void set_skybox(Material value); // 0x1007D4134
}

// Namespace: UnityEngine
public sealed class QualitySettings : Object // TypeDefIndex: 2084
{
	// Methods
	public static void set_vSyncCount(int value); // 0x1007CEDE0
	public static ColorSpace get_activeColorSpace(); // 0x1007CEE44
}

// Namespace: UnityEngine
public sealed class MeshFilter : Component // TypeDefIndex: 2085
{
	// Methods
	public void set_mesh(Mesh value); // 0x1007C6180
	public Mesh get_sharedMesh(); // 0x1007C61F4
	public void set_sharedMesh(Mesh value); // 0x1007C6258
}

// Namespace: UnityEngine
public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 2086
{
}

// Namespace: UnityEngine
public class Renderer : Component // TypeDefIndex: 2087
{
	// Methods
	public Matrix4x4 get_worldToLocalMatrix(); // 0x1007D36B8
	private void INTERNAL_get_worldToLocalMatrix(out Matrix4x4 value); // 0x1007D3704
	public bool get_enabled(); // 0x1007D3778
	public void set_enabled(bool value); // 0x1007D37DC
	public Material get_material(); // 0x1007D3850
	public void set_material(Material value); // 0x1007D38B4
	public Material get_sharedMaterial(); // 0x1007D3928
	public Material[] get_materials(); // 0x1007D398C
	public void set_materials(Material[] value); // 0x1007D39F0
	public void set_sharedMaterials(Material[] value); // 0x1007D3A64
	public Bounds get_bounds(); // 0x1007D3AD8
	private void INTERNAL_get_bounds(out Bounds value); // 0x1007D3B1C
	public int get_sortingLayerID(); // 0x1007D3B90
	public int get_sortingOrder(); // 0x1007D3BF4
	public void set_sortingOrder(int value); // 0x1007D3C58
}

// Namespace: UnityEngine
public sealed class Graphics // TypeDefIndex: 2088
{
	// Methods
	public static void DrawMeshNow(Mesh mesh, Matrix4x4 matrix); // 0x1007A9A04
	private static void Internal_DrawMeshNow2(Mesh mesh, Matrix4x4 matrix, int materialIndex); // 0x1007A9A48
	private static void INTERNAL_CALL_Internal_DrawMeshNow2(Mesh mesh, Matrix4x4 matrix, int materialIndex); // 0x1007A9A4C
	public static void DrawProceduralIndirect(MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset); // 0x1007A9AC8
	public static void Blit(Texture source, RenderTexture dest); // 0x1007A9B44
	public static void Blit(Texture source, RenderTexture dest, Material mat); // 0x1007A9BB8
	public static void Blit(Texture source, RenderTexture dest, Material mat, int pass); // 0x1007A9BC4
	private static void Internal_BlitMaterial(Texture source, RenderTexture dest, Material mat, int pass, bool setRT); // 0x1007A9BCC
	public static void BlitMultiTap(Texture source, RenderTexture dest, Material mat, Vector2[] offsets); // 0x1007A9C60
	private static void Internal_BlitMultiTap(Texture source, RenderTexture dest, Material mat, Vector2[] offsets); // 0x1007A9C64
	private static void Internal_SetNullRT(); // 0x1007A9CF0
	private static void Internal_SetRTSimple(out RenderBuffer color, out RenderBuffer depth, int mip, CubemapFace face, int depthSlice); // 0x1007A9D48
	public static void SetRandomWriteTarget(int index, ComputeBuffer uav); // 0x1007A9DDC
	public static void SetRandomWriteTarget(int index, ComputeBuffer uav, bool preserveCounterValue); // 0x1007A9DE4
	public static void ClearRandomWriteTargets(); // 0x1007A9F48
	private static void Internal_SetRandomWriteTargetBuffer(int index, ComputeBuffer uav, bool preserveCounterValue); // 0x1007A9ECC
	internal static void SetRenderTargetImpl(RenderBuffer colorBuffer, RenderBuffer depthBuffer, int mipLevel, CubemapFace face, int depthSlice); // 0x1007A9FA0
	internal static void SetRenderTargetImpl(RenderTexture rt, int mipLevel, CubemapFace face, int depthSlice); // 0x1007A9FD8
	public static void SetRenderTarget(RenderTexture rt); // 0x1007AA0D0
}

// Namespace: UnityEngine
public sealed class LightmapData // TypeDefIndex: 2089
{
	// Fields
	internal Texture2D m_Light; // 0x10
	internal Texture2D m_Dir; // 0x18

	// Methods
	public void .ctor(); // 0x1007C1648
	public void set_lightmapFar(Texture2D value); // 0x1007C1650
	public Texture2D get_lightmapNear(); // 0x1007C1658
	public void set_lightmapNear(Texture2D value); // 0x1007C1660
}

// Namespace: UnityEngine
public sealed class LightProbes : Object // TypeDefIndex: 2090
{
}

// Namespace: UnityEngine
public sealed class LightmapSettings : Object // TypeDefIndex: 2091
{
	// Methods
	public static LightmapData[] get_lightmaps(); // 0x1007C169C
	public static void set_lightmaps(LightmapData[] value); // 0x1007C16F4
	public static LightProbes get_lightProbes(); // 0x1007C1758
	public static void set_lightProbes(LightProbes value); // 0x1007C17B0
}

// Namespace: UnityEngine
public sealed class Screen // TypeDefIndex: 2092
{
	// Methods
	public static int get_width(); // 0x1007D550C
	public static int get_height(); // 0x1007D5564
	public static float get_dpi(); // 0x1007D55BC
	public static bool get_fullScreen(); // 0x1007D5614
	public static void set_fullScreen(bool value); // 0x1007D566C
	public static ScreenOrientation get_orientation(); // 0x1007D56D0
	public static void set_sleepTimeout(int value); // 0x1007D5728
}

// Namespace: UnityEngine
public sealed class GL // TypeDefIndex: 2093
{
	// Methods
	public static void Vertex3(float x, float y, float z); // 0x1007A924C
	public static void TexCoord2(float x, float y); // 0x1007A92CC
	public static void MultiTexCoord2(int unit, float x, float y); // 0x1007A933C
	private static void BeginInternal(int mode); // 0x1007A93B8
	public static void Begin(int mode); // 0x1007A941C
	public static void End(); // 0x1007A9420
	public static void LoadOrtho(); // 0x1007A9478
	public static void LoadProjectionMatrix(Matrix4x4 mat); // 0x1007A94D0
	private static void INTERNAL_CALL_LoadProjectionMatrix(Matrix4x4 mat); // 0x1007A94D4
	public static void LoadIdentity(); // 0x1007A9538
	public static void PushMatrix(); // 0x1007A9590
	public static void PopMatrix(); // 0x1007A95E8
	public static Matrix4x4 GetGPUProjectionMatrix(Matrix4x4 proj, bool renderIntoTexture); // 0x1007A9640
	private static void INTERNAL_CALL_GetGPUProjectionMatrix(Matrix4x4 proj, bool renderIntoTexture, out Matrix4x4 value); // 0x1007A968C
	public static void Clear(bool clearDepth, bool clearColor, Color backgroundColor); // 0x1007A9708
	public static void Clear(bool clearDepth, bool clearColor, Color backgroundColor, float depth); // 0x1007A9734
	private static void Internal_Clear(bool clearDepth, bool clearColor, Color backgroundColor, float depth); // 0x1007A9760
	private static void INTERNAL_CALL_Internal_Clear(bool clearDepth, bool clearColor, Color backgroundColor, float depth); // 0x1007A978C
	public static void ClearWithSkybox(bool clearDepth, Camera camera); // 0x1007A9818
}

// Namespace: UnityEngine
public sealed class MeshRenderer : Renderer // TypeDefIndex: 2094
{
}

// Namespace: UnityEngine
public sealed class ImageEffectTransformsToLDR : Attribute // TypeDefIndex: 2095
{
	// Methods
	public void .ctor(); // 0x1007BE478
}

// Namespace: UnityEngine
public sealed class ImageEffectOpaque : Attribute // TypeDefIndex: 2096
{
	// Methods
	public void .ctor(); // 0x1007BE470
}

// Namespace: UnityEngine
public sealed class RectOffset // TypeDefIndex: 2097
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly GUIStyle m_SourceStyle; // 0x18

	// Methods
	public void .ctor(); // 0x1007D0DE0
	internal void .ctor(GUIStyle sourceStyle, IntPtr source); // 0x1007D0E6C
	public void .ctor(int left, int right, int top, int bottom); // 0x1007D0EA4
	private void Init(); // 0x1007D0E08
	private void Cleanup(); // 0x1007D10EC
	public int get_left(); // 0x1007D1150
	public void set_left(int value); // 0x1007D0F1C
	public int get_right(); // 0x1007D11B4
	public void set_right(int value); // 0x1007D0F90
	public int get_top(); // 0x1007D1218
	public void set_top(int value); // 0x1007D1004
	public int get_bottom(); // 0x1007D127C
	public void set_bottom(int value); // 0x1007D1078
	public int get_horizontal(); // 0x1007D12E0
	public int get_vertical(); // 0x1007D1344
	public Rect Remove(Rect rect); // 0x1007D13A8
	private static void INTERNAL_CALL_Remove(RectOffset self, Rect rect, out Rect value); // 0x1007D13E4
	protected override void Finalize(); // 0x1007D1460
	public override string ToString(); // 0x1007D14D8
}

// Namespace: UnityEngine
public class GUIElement : Behaviour // TypeDefIndex: 2098
{
}

// Namespace: UnityEngine
public sealed class GUILayer : Behaviour // TypeDefIndex: 2099
{
	// Methods
	public GUIElement HitTest(Vector3 screenPosition); // 0x1007B0838
	private static GUIElement INTERNAL_CALL_HitTest(GUILayer self, Vector3 screenPosition); // 0x1007B0864
}

// Namespace: UnityEngine
public class Texture : Object // TypeDefIndex: 2100
{
	// Methods
	public void .ctor(); // 0x1007E5DE4
	private static int Internal_GetWidth(Texture t); // 0x1007E5E4C
	private static int Internal_GetHeight(Texture t); // 0x1007E5EB0
	public virtual int get_width(); // 0x1007E5F14
	public virtual void set_width(int value); // 0x1007E5F1C
	public virtual int get_height(); // 0x1007E5F7C
	public virtual void set_height(int value); // 0x1007E5F84
	public void set_filterMode(FilterMode value); // 0x1007E5FE4
	public void set_anisoLevel(int value); // 0x1007E6058
	public void set_wrapMode(TextureWrapMode value); // 0x1007E60CC
	public Vector2 get_texelSize(); // 0x1007E6140
	private void INTERNAL_get_texelSize(out Vector2 value); // 0x1007E6168
}

// Namespace: UnityEngine
public sealed class Texture2D : Texture // TypeDefIndex: 2101
{
	// Methods
	public void .ctor(int width, int height); // 0x1007DD9DC
	public void .ctor(int width, int height, TextureFormat format, bool mipmap); // 0x1007E6288
	public void .ctor(int width, int height, TextureFormat format, bool mipmap, bool linear); // 0x1007E6328
	private static void Internal_Create(Texture2D mono, int width, int height, TextureFormat format, bool mipmap, bool linear, IntPtr nativeTex); // 0x1007E61DC
	public static Texture2D get_whiteTexture(); // 0x1007E63D4
	public void SetPixel(int x, int y, Color color); // 0x1007E642C
	private static void INTERNAL_CALL_SetPixel(Texture2D self, int x, int y, Color color); // 0x1007E6468
	public Color GetPixelBilinear(float u, float v); // 0x1007E64F4
	private static void INTERNAL_CALL_GetPixelBilinear(Texture2D self, float u, float v, out Color value); // 0x1007E6524
	public bool LoadImage(byte[] data, bool markNonReadable); // 0x1007E65B0
	public bool LoadImage(byte[] data); // 0x1007E662C
	public Color[] GetPixels(); // 0x1007E6634
	public Color[] GetPixels(int miplevel); // 0x1007E663C
	public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel); // 0x1007E66E4
	public void Apply(bool updateMipmaps, bool makeNoLongerReadable); // 0x1007E6788
	public void Apply(); // 0x1007E6804
	public void ReadPixels(Rect source, int destX, int destY); // 0x1007E6810
	private static void INTERNAL_CALL_ReadPixels(Texture2D self, Rect source, int destX, int destY, bool recalculateMipMaps); // 0x1007E6850
	public byte[] EncodeToPNG(); // 0x1007E68E4
}

// Namespace: UnityEngine
public sealed class Texture3D : Texture // TypeDefIndex: 2102
{
	// Methods
	public void .ctor(int width, int height, int depth, TextureFormat format, bool mipmap); // 0x1007E6948
	public void SetPixels(Color[] colors, int miplevel); // 0x1007E6A48
	public void SetPixels(Color[] colors); // 0x1007E6AC4
	public void Apply(bool updateMipmaps, bool makeNoLongerReadable); // 0x1007E6ACC
	public void Apply(); // 0x1007E6B48
	private static void Internal_Create(Texture3D mono, int width, int height, int depth, TextureFormat format, bool mipmap); // 0x1007E69A4
}

// Namespace: UnityEngine
public sealed class RenderTexture : Texture // TypeDefIndex: 2103
{
	// Methods
	public void .ctor(int width, int height, int depth, RenderTextureFormat format); // 0x1007D4198
	public void .ctor(int width, int height, int depth); // 0x1007D4404
	private static void Internal_CreateRenderTexture(RenderTexture rt); // 0x1007D4224
	public static RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing); // 0x1007D4484
	public static RenderTexture GetTemporary(int width, int height, int depthBuffer, RenderTextureFormat format); // 0x1007D4528
	public static RenderTexture GetTemporary(int width, int height, int depthBuffer); // 0x1007D4534
	public static RenderTexture GetTemporary(int width, int height); // 0x1007D4544
	public static void ReleaseTemporary(RenderTexture temp); // 0x1007D4558
	private static int Internal_GetWidth(RenderTexture mono); // 0x1007D45BC
	private static void Internal_SetWidth(RenderTexture mono, int width); // 0x1007D4620
	private static int Internal_GetHeight(RenderTexture mono); // 0x1007D4694
	private static void Internal_SetHeight(RenderTexture mono, int width); // 0x1007D46F8
	private static void Internal_SetSRGBReadWrite(RenderTexture mono, bool sRGB); // 0x1007D4390
	public override int get_width(); // 0x1007D476C
	public override void set_width(int value); // 0x1007D4288
	public override int get_height(); // 0x1007D4774
	public override void set_height(int value); // 0x1007D4298
	public void set_depth(int value); // 0x1007D42A8
	public RenderTextureFormat get_format(); // 0x1007D477C
	public void set_format(RenderTextureFormat value); // 0x1007D431C
	public void DiscardContents(); // 0x1007D47E0
	private static void INTERNAL_CALL_DiscardContents(RenderTexture self); // 0x1007D47E8
	public void MarkRestoreExpected(); // 0x1007D484C
	private static void INTERNAL_CALL_MarkRestoreExpected(RenderTexture self); // 0x1007D4854
	public RenderBuffer get_colorBuffer(); // 0x1007D48B8
	public RenderBuffer get_depthBuffer(); // 0x1007D4954
	private void GetColorBuffer(out RenderBuffer res); // 0x1007D48E0
	private void GetDepthBuffer(out RenderBuffer res); // 0x1007D497C
	public static void set_active(RenderTexture value); // 0x1007D49F0
}

// Namespace: UnityEngine
public struct CullingGroupEvent // TypeDefIndex: 2104
{
	// Fields
	private int m_Index; // 0x10
	private byte m_PrevState; // 0x14
	private byte m_ThisState; // 0x15

}

// Namespace: UnityEngine
public sealed class CullingGroup : IDisposable // TypeDefIndex: 2105
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private StateChanged m_OnStateChanged; // 0x18

	// Methods
	protected override void Finalize(); // 0x10079F8B0
	public void Dispose(); // 0x10079F9D4
	private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count); // 0x10079FA38
	private void FinalizerFailure(); // 0x10079F970
}

// Namespace: 
public sealed class StateChanged : MulticastDelegate // TypeDefIndex: 2106
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10079FBE8
	public virtual void Invoke(CullingGroupEvent sphere); // 0x10079FAD4
	public virtual IAsyncResult BeginInvoke(CullingGroupEvent sphere, AsyncCallback callback, object object); // 0x10079FC28
	public virtual void EndInvoke(IAsyncResult result); // 0x10079FCE0
}

// Namespace: UnityEngine
public sealed class Gradient // TypeDefIndex: 2107
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(); // 0x1007A988C
	private void Init(); // 0x1007A98B4
	private void Cleanup(); // 0x1007A9918
	protected override void Finalize(); // 0x1007A997C
}

// Namespace: UnityEngine
internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 2108
{
	// Fields
	public uint keyboardType; // 0x10
	public uint autocorrection; // 0x14
	public uint multiline; // 0x18
	public uint secure; // 0x1C
	public uint alert; // 0x20

}

// Namespace: UnityEngine
public sealed class TouchScreenKeyboardType : Enum // TypeDefIndex: 2109
{
	// Fields
	public int value__; // 0x10
	public const TouchScreenKeyboardType Default = 0; // 0x0
	public const TouchScreenKeyboardType ASCIICapable = 1; // 0x0
	public const TouchScreenKeyboardType NumbersAndPunctuation = 2; // 0x0
	public const TouchScreenKeyboardType URL = 3; // 0x0
	public const TouchScreenKeyboardType NumberPad = 4; // 0x0
	public const TouchScreenKeyboardType PhonePad = 5; // 0x0
	public const TouchScreenKeyboardType NamePhonePad = 6; // 0x0
	public const TouchScreenKeyboardType EmailAddress = 7; // 0x0
	public const TouchScreenKeyboardType NintendoNetworkAccount = 8; // 0x0

}

// Namespace: UnityEngine
public sealed class TouchScreenKeyboard // TypeDefIndex: 2110
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder); // 0x1007E6FD8
	private void Destroy(); // 0x1007E71DC
	protected override void Finalize(); // 0x1007E7240
	private void TouchScreenKeyboard_InternalConstructorHelper(TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder); // 0x1007E7150
	public static bool get_isSupported(); // 0x1007E72AC
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert); // 0x1007E7360
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure); // 0x1007E74CC
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline); // 0x1007E757C
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder); // 0x1007E741C
	public string get_text(); // 0x1007E7628
	public void set_text(string value); // 0x1007E768C
	public static void set_hideInput(bool value); // 0x1007E7700
	public bool get_active(); // 0x1007E7764
	public void set_active(bool value); // 0x1007E77C8
	public bool get_done(); // 0x1007E783C
	public bool get_wasCanceled(); // 0x1007E78A0
}

// Namespace: UnityEngine
public sealed class Gizmos // TypeDefIndex: 2111
{
	// Methods
	public static void DrawWireCube(Vector3 center, Vector3 size); // 0x1007A9008
	private static void INTERNAL_CALL_DrawWireCube(Vector3 center, Vector3 size); // 0x1007A903C
	public static void DrawCube(Vector3 center, Vector3 size); // 0x1007A90B0
	private static void INTERNAL_CALL_DrawCube(Vector3 center, Vector3 size); // 0x1007A90E4
	public static void set_color(Color value); // 0x1007A9158
	private static void INTERNAL_set_color(Color value); // 0x1007A9180
	public static void set_matrix(Matrix4x4 value); // 0x1007A91E4
	private static void INTERNAL_set_matrix(Matrix4x4 value); // 0x1007A91E8
}

// Namespace: UnityEngine
public struct LayerMask // TypeDefIndex: 2112
{
	// Fields
	private int m_Mask; // 0x10

	// Methods
	public int get_value(); // 0x1007C153C
	public static int NameToLayer(string layerName); // 0x1007C1544
	public static int op_Implicit(LayerMask mask); // 0x1007C15A8
	public static LayerMask op_Implicit(int intVal); // 0x1007C15B0
}

// Namespace: UnityEngine
public struct Vector2 // TypeDefIndex: 2113
{
	// Fields
	public const float kEpsilon = 1E-05; // 0x0
	public float x; // 0x10
	public float y; // 0x14

	// Methods
	public void .ctor(float x, float y); // 0x1007E94A8
	public float get_Item(int index); // 0x1007E9544
	public void set_Item(int index, float value); // 0x1007E95EC
	public void Set(float new_x, float new_y); // 0x1007E9600
	public static Vector2 Scale(Vector2 a, Vector2 b); // 0x1007E960C
	public void Normalize(); // 0x1007E96E8
	public Vector2 get_normalized(); // 0x1007E971C
	public override string ToString(); // 0x1007E987C
	public override int GetHashCode(); // 0x1007E98BC
	public override bool Equals(object other); // 0x1007E99A8
	public static float Dot(Vector2 lhs, Vector2 rhs); // 0x1007E99B0
	public float get_magnitude(); // 0x1007E99C0
	public float get_sqrMagnitude(); // 0x1007E99DC
	public static float Angle(Vector2 from, Vector2 to); // 0x1007E99F0
	public static float Distance(Vector2 a, Vector2 b); // 0x1007E9AC8
	public static float SqrMagnitude(Vector2 a); // 0x1007E9AF4
	public static Vector2 Max(Vector2 lhs, Vector2 rhs); // 0x1007E9B04
	public static Vector2 get_zero(); // 0x1007E0194
	public static Vector2 get_one(); // 0x1007E9BB4
	public static Vector2 get_up(); // 0x1007E9BC0
	public static Vector2 op_Addition(Vector2 a, Vector2 b); // 0x1007E2B50
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b); // 0x1007E455C
	public static Vector2 op_UnaryNegation(Vector2 a); // 0x1007E9BCC
	public static Vector2 op_Multiply(Vector2 a, float d); // 0x1007E9BD8
	public static Vector2 op_Division(Vector2 a, float d); // 0x1007E96DC
	public static bool op_Equality(Vector2 lhs, Vector2 rhs); // 0x1007E9BE4
	public static bool op_Inequality(Vector2 lhs, Vector2 rhs); // 0x1007E9C0C
	public static Vector2 op_Implicit(Vector3 v); // 0x1007E9C34
	public static Vector3 op_Implicit(Vector2 v); // 0x1007E9C38
}

// Namespace: UnityEngine
public struct Vector3 // TypeDefIndex: 2114
{
	// Fields
	public const float kEpsilon = 1E-05; // 0x0
	public float x; // 0x10
	public float y; // 0x14
	public float z; // 0x18

	// Methods
	public void .ctor(float x, float y, float z); // 0x1007E9C40
	public void .ctor(float x, float y); // 0x1007E9C58
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t); // 0x1007E9C64
	public static Vector3 Slerp(Vector3 a, Vector3 b, float t); // 0x1007E9D34
	private static void INTERNAL_CALL_Slerp(Vector3 a, Vector3 b, float t, out Vector3 value); // 0x1007E9D80
	public static Vector3 SmoothDamp(Vector3 current, Vector3 target, Vector3 currentVelocity, float smoothTime); // 0x1007E9E0C
	public static Vector3 SmoothDamp(Vector3 current, Vector3 target, Vector3 currentVelocity, float smoothTime, float maxSpeed, float deltaTime); // 0x1007E9EA0
	public float get_Item(int index); // 0x1007EA248
	public void set_Item(int index, float value); // 0x1007EA330
	public void Set(float new_x, float new_y, float new_z); // 0x1007EA344
	public static Vector3 Scale(Vector3 a, Vector3 b); // 0x1007EA350
	public override int GetHashCode(); // 0x1007EA3B4
	public override bool Equals(object other); // 0x1007EA484
	public static Vector3 Normalize(Vector3 value); // 0x1007EA48C
	public void Normalize(); // 0x1007EA5D8
	public Vector3 get_normalized(); // 0x1007EA5EC
	public override string ToString(); // 0x1007EA77C
	public static float Dot(Vector3 lhs, Vector3 rhs); // 0x1007EA14C
	public static float Angle(Vector3 from, Vector3 to); // 0x1007EA784
	public static float Distance(Vector3 a, Vector3 b); // 0x1007EA878
	public static Vector3 ClampMagnitude(Vector3 vector, float maxLength); // 0x1007EA0CC
	public static float Magnitude(Vector3 a); // 0x1007EA4E8
	public float get_magnitude(); // 0x1007EA9D8
	public static float SqrMagnitude(Vector3 a); // 0x1007EA9E0
	public float get_sqrMagnitude(); // 0x1007EA9F8
	public static Vector3 Min(Vector3 lhs, Vector3 rhs); // 0x1007EAA18
	public static Vector3 Max(Vector3 lhs, Vector3 rhs); // 0x1007EAAF4
	public static Vector3 get_zero(); // 0x1007E8F18
	public static Vector3 get_one(); // 0x1007EABD0
	public static Vector3 get_forward(); // 0x1007E7F44
	public static Vector3 get_back(); // 0x1007E8F28
	public static Vector3 get_up(); // 0x1007E7EF0
	public static Vector3 get_down(); // 0x1007EABE0
	public static Vector3 get_left(); // 0x1007EABF0
	public static Vector3 get_right(); // 0x1007E7E9C
	public static Vector3 op_Addition(Vector3 a, Vector3 b); // 0x1007EA12C
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b); // 0x1007EA0BC
	public static Vector3 op_UnaryNegation(Vector3 a); // 0x1007EAC00
	public static Vector3 op_Multiply(Vector3 a, float d); // 0x1007EA13C
	public static Vector3 op_Multiply(float d, Vector3 a); // 0x1007EA118
	public static Vector3 op_Division(Vector3 a, float d); // 0x1007EA164
	public static bool op_Equality(Vector3 lhs, Vector3 rhs); // 0x1007EAC10
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs); // 0x1007EAC44
}

// Namespace: UnityEngine
public struct Color32 // TypeDefIndex: 2115
{
	// Fields
	public byte r; // 0x10
	public byte g; // 0x11
	public byte b; // 0x12
	public byte a; // 0x13

	// Methods
	public void .ctor(byte r, byte g, byte b, byte a); // 0x10079E804
	public override string ToString(); // 0x10079E9F4
	public static Color32 op_Implicit(Color c); // 0x10079E9FC
	public static Color op_Implicit(Color32 c); // 0x10079EAF8
}

// Namespace: UnityEngine
public struct Quaternion // TypeDefIndex: 2116
{
	// Fields
	public const float kEpsilon = 1E-06; // 0x0
	public float x; // 0x10
	public float y; // 0x14
	public float z; // 0x18
	public float w; // 0x1C

	// Methods
	public void .ctor(float x, float y, float z, float w); // 0x1007CEEB0
	public static Quaternion get_identity(); // 0x1007CEEC4
	public static float Dot(Quaternion a, Quaternion b); // 0x1007CEED8
	public static Quaternion AngleAxis(float angle, Vector3 axis); // 0x1007CEEF8
	private static void INTERNAL_CALL_AngleAxis(float angle, Vector3 axis, out Quaternion value); // 0x1007CEF30
	public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection); // 0x1007CEFB4
	private static void INTERNAL_CALL_FromToRotation(Vector3 fromDirection, Vector3 toDirection, out Quaternion value); // 0x1007CEFF8
	public static Quaternion LookRotation(Vector3 forward, Vector3 upwards); // 0x1007CF074
	public static Quaternion LookRotation(Vector3 forward); // 0x1007CF134
	private static void INTERNAL_CALL_LookRotation(Vector3 forward, Vector3 upwards, out Quaternion value); // 0x1007CF0B8
	public static Quaternion Slerp(Quaternion a, Quaternion b, float t); // 0x1007CF184
	private static void INTERNAL_CALL_Slerp(Quaternion a, Quaternion b, float t, out Quaternion value); // 0x1007CF1D0
	public static Quaternion Lerp(Quaternion a, Quaternion b, float t); // 0x1007CF25C
	private static void INTERNAL_CALL_Lerp(Quaternion a, Quaternion b, float t, out Quaternion value); // 0x1007CF2A8
	public static Quaternion Inverse(Quaternion rotation); // 0x1007CF334
	private static void INTERNAL_CALL_Inverse(Quaternion rotation, out Quaternion value); // 0x1007CF36C
	public override string ToString(); // 0x1007CF5BC
	public Vector3 get_eulerAngles(); // 0x1007CF6CC
	public void set_eulerAngles(Vector3 value); // 0x1007CF748
	public static Quaternion Euler(float x, float y, float z); // 0x1007CF750
	public static Quaternion Euler(Vector3 euler); // 0x1007CF79C
	private static Vector3 Internal_MakePositive(Vector3 euler); // 0x1007CF630
	private static Vector3 Internal_ToEulerRad(Quaternion rotation); // 0x1007CF5F4
	private static void INTERNAL_CALL_Internal_ToEulerRad(Quaternion rotation, out Vector3 value); // 0x1007CF7C0
	private static Quaternion Internal_FromEulerRad(Vector3 euler); // 0x1007CF710
	private static void INTERNAL_CALL_Internal_FromEulerRad(Vector3 euler, out Quaternion value); // 0x1007CF834
	public override int GetHashCode(); // 0x1007CF910
	public override bool Equals(object other); // 0x1007CFA00
	public static Quaternion op_Multiply(Quaternion lhs, Quaternion rhs); // 0x1007CFA08
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point); // 0x1007CFA88
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs); // 0x1007CFB2C
}

// Namespace: UnityEngine
public struct Rect // TypeDefIndex: 2117
{
	// Fields
	private float m_XMin; // 0x10
	private float m_YMin; // 0x14
	private float m_Width; // 0x18
	private float m_Height; // 0x1C

	// Methods
	public void .ctor(float x, float y, float width, float height); // 0x1007D0420
	public void .ctor(Rect source); // 0x1007D0448
	public void Set(float x, float y, float width, float height); // 0x1007D0470
	public float get_x(); // 0x1007D048C
	public void set_x(float value); // 0x1007D049C
	public float get_y(); // 0x1007D04AC
	public void set_y(float value); // 0x1007D04BC
	public Vector2 get_position(); // 0x1007D04F4
	public Vector2 get_center(); // 0x1007D056C
	public Vector2 get_min(); // 0x1007D05F4
	public Vector2 get_max(); // 0x1007D0680
	public float get_width(); // 0x1007D06C4
	public void set_width(float value); // 0x1007D06D4
	public float get_height(); // 0x1007D06E4
	public void set_height(float value); // 0x1007D06F4
	public Vector2 get_size(); // 0x1007D072C
	public float get_xMin(); // 0x1007D075C
	public void set_xMin(float value); // 0x1007D0764
	public float get_yMin(); // 0x1007D0780
	public void set_yMin(float value); // 0x1007D0788
	public float get_xMax(); // 0x1007D07A4
	public void set_xMax(float value); // 0x1007D07B4
	public float get_yMax(); // 0x1007D07C4
	public void set_yMax(float value); // 0x1007D07D4
	public override string ToString(); // 0x1007D09C0
	public bool Contains(Vector2 point); // 0x1007D0A0C
	public bool Contains(Vector3 point); // 0x1007D0A50
	private static Rect OrderMinMax(Rect rect); // 0x1007D0A94
	public bool Overlaps(Rect other); // 0x1007D0B0C
	public bool Overlaps(Rect other, bool allowInverse); // 0x1007D0BA4
	public override int GetHashCode(); // 0x1007D0C40
	public override bool Equals(object other); // 0x1007D0D4C
	public static bool op_Inequality(Rect lhs, Rect rhs); // 0x1007D0D54
	public static bool op_Equality(Rect lhs, Rect rhs); // 0x1007D0D84
}

// Namespace: UnityEngine
public struct Matrix4x4 // TypeDefIndex: 2118
{
	// Fields
	public float m00; // 0x10
	public float m10; // 0x14
	public float m20; // 0x18
	public float m30; // 0x1C
	public float m01; // 0x20
	public float m11; // 0x24
	public float m21; // 0x28
	public float m31; // 0x2C
	public float m02; // 0x30
	public float m12; // 0x34
	public float m22; // 0x38
	public float m32; // 0x3C
	public float m03; // 0x40
	public float m13; // 0x44
	public float m23; // 0x48
	public float m33; // 0x4C

	// Methods
	public float get_Item(int row, int column); // 0x1007C3558
	public void set_Item(int row, int column, float value); // 0x1007C36D0
	public float get_Item(int index); // 0x1007C36DC
	public void set_Item(int index, float value); // 0x1007C36E4
	public override int GetHashCode(); // 0x1007C3850
	public override bool Equals(object other); // 0x1007C3A44
	public static Matrix4x4 Inverse(Matrix4x4 m); // 0x1007C3A4C
	private static void INTERNAL_CALL_Inverse(Matrix4x4 m, out Matrix4x4 value); // 0x1007C3A98
	public Matrix4x4 get_inverse(); // 0x1007C3B7C
	public Vector4 GetColumn(int i); // 0x1007C3BEC
	public void SetRow(int i, Vector4 v); // 0x1007C3C60
	public Vector3 MultiplyPoint(Vector3 v); // 0x1007C3D00
	public Vector3 MultiplyPoint3x4(Vector3 v); // 0x1007C3D7C
	public Vector3 MultiplyVector(Vector3 v); // 0x1007C3DE4
	public static Matrix4x4 Scale(Vector3 v); // 0x1007C3DEC
	public static Matrix4x4 get_identity(); // 0x1007C3EC8
	public void SetTRS(Vector3 pos, Quaternion q, Vector3 s); // 0x1007C405C
	public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s); // 0x1007C3FE4
	private static void INTERNAL_CALL_TRS(Vector3 pos, Quaternion q, Vector3 s, out Matrix4x4 value); // 0x1007C40BC
	public override string ToString(); // 0x1007C46E4
	public static Matrix4x4 op_Multiply(Matrix4x4 lhs, Matrix4x4 rhs); // 0x1007C46EC
	public static bool op_Equality(Matrix4x4 lhs, Matrix4x4 rhs); // 0x1007C48FC
	public static bool op_Inequality(Matrix4x4 lhs, Matrix4x4 rhs); // 0x1007C4A9C
}

// Namespace: UnityEngine
public struct Bounds // TypeDefIndex: 2119
{
	// Fields
	private Vector3 m_Center; // 0x10
	private Vector3 m_Extents; // 0x1C

	// Methods
	public void .ctor(Vector3 center, Vector3 size); // 0x100799C74
	public override int GetHashCode(); // 0x100799D44
	public override bool Equals(object other); // 0x100799E60
	public Vector3 get_center(); // 0x100799E68
	public void set_center(Vector3 value); // 0x100799E80
	public Vector3 get_size(); // 0x100799EA4
	public void set_size(Vector3 value); // 0x100799EF0
	public Vector3 get_extents(); // 0x100799F24
	public void set_extents(Vector3 value); // 0x100799F30
	public Vector3 get_min(); // 0x100799F54
	public Vector3 get_max(); // 0x100799F84
	public void SetMinMax(Vector3 min, Vector3 max); // 0x10079A044
	public void Encapsulate(Vector3 point); // 0x10079A114
	public void Encapsulate(Bounds bounds); // 0x10079A178
	private static bool Internal_Contains(Bounds m, Vector3 point); // 0x10079A1AC
	private static bool INTERNAL_CALL_Internal_Contains(Bounds m, Vector3 point); // 0x10079A1D4
	public bool Contains(Vector3 point); // 0x10079A284
	public override string ToString(); // 0x10079A40C
	public static bool op_Equality(Bounds lhs, Bounds rhs); // 0x10079A414
	public static bool op_Inequality(Bounds lhs, Bounds rhs); // 0x10079A478
}

// Namespace: UnityEngine
public struct Vector4 // TypeDefIndex: 2120
{
	// Fields
	public const float kEpsilon = 1E-05; // 0x0
	public float x; // 0x10
	public float y; // 0x14
	public float z; // 0x18
	public float w; // 0x1C

	// Methods
	public void .ctor(float x, float y, float z, float w); // 0x1007EAC78
	public void .ctor(float x, float y); // 0x1007EAC9C
	public float get_Item(int index); // 0x1007EAD8C
	public void set_Item(int index, float value); // 0x1007EAE80
	public override int GetHashCode(); // 0x1007EAEF0
	public override bool Equals(object other); // 0x1007EAFE0
	public override string ToString(); // 0x1007EB1BC
	public static float Dot(Vector4 a, Vector4 b); // 0x1007EB1C4
	public static float SqrMagnitude(Vector4 a); // 0x1007EB1E4
	public float get_sqrMagnitude(); // 0x1007EB22C
	public static Vector4 get_zero(); // 0x1007EB254
	public static Vector4 get_one(); // 0x1007EB268
	public static Vector4 op_Addition(Vector4 a, Vector4 b); // 0x1007EB27C
	public static Vector4 op_Subtraction(Vector4 a, Vector4 b); // 0x1007EB290
	public static Vector4 op_Multiply(Vector4 a, float d); // 0x1007EB2A4
	public static Vector4 op_Multiply(float d, Vector4 a); // 0x1007EB2B8
	public static Vector4 op_Division(Vector4 a, float d); // 0x1007EB2D0
	public static bool op_Equality(Vector4 lhs, Vector4 rhs); // 0x1007EB2E4
	public static Vector4 op_Implicit(Vector3 v); // 0x1007EB324
	public static Vector4 op_Implicit(Vector2 v); // 0x1007EB32C
}

// Namespace: UnityEngine
public struct Ray // TypeDefIndex: 2121
{
	// Fields
	private Vector3 m_Origin; // 0x10
	private Vector3 m_Direction; // 0x1C

	// Methods
	public void .ctor(Vector3 origin, Vector3 direction); // 0x1007CFD48
	public Vector3 get_origin(); // 0x1007CFD50
	public Vector3 get_direction(); // 0x1007CFD5C
	public Vector3 GetPoint(float distance); // 0x1007CFDC4
	public override string ToString(); // 0x1007CFF18
}

// Namespace: UnityEngine
public struct Plane // TypeDefIndex: 2122
{
	// Fields
	private Vector3 m_Normal; // 0x10
	private float m_Distance; // 0x1C

	// Methods
	public void .ctor(Vector3 inNormal, Vector3 inPoint); // 0x1007CE528
	public Vector3 get_normal(); // 0x1007CE530
	public float get_distance(); // 0x1007CE53C
	public bool Raycast(Ray ray, out float enter); // 0x1007CE644
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 2123
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods
	private static void .cctor(); // 0x1007EED98
}

// Namespace: UnityEngine
public struct Mathf // TypeDefIndex: 2124
{
	// Fields
	public static readonly float Epsilon; // 0x0

	// Methods
	private static void .cctor(); // 0x1007C2BF4
	public static float Sin(float f); // 0x1007C2CC0
	public static float Cos(float f); // 0x1007C2CDC
	public static float Tan(float f); // 0x1007C2CF8
	public static float Acos(float f); // 0x1007C2D14
	public static float Atan2(float y, float x); // 0x1007C2D30
	public static float Sqrt(float f); // 0x1007C2D50
	public static float Abs(float f); // 0x1007C2D58
	public static int Abs(int value); // 0x1007C2D60
	public static float Min(float a, float b); // 0x1007AEDB4
	public static int Min(int a, int b); // 0x1007B4488
	public static float Max(float a, float b); // 0x1007AEDC0
	public static int Max(int a, int b); // 0x1007B4494
	public static float Pow(float f, float p); // 0x1007C2D6C
	public static float Log(float f, float p); // 0x1007C2D8C
	public static float Ceil(float f); // 0x1007C2DB4
	public static float Floor(float f); // 0x1007C2DBC
	public static float Round(float f); // 0x1007C2DC4
	public static int CeilToInt(float f); // 0x1007C2E5C
	public static int FloorToInt(float f); // 0x1007C2E64
	public static int RoundToInt(float f); // 0x1007C2E6C
	public static float Sign(float f); // 0x1007C2F04
	public static float Clamp(float value, float min, float max); // 0x1007ADC94
	public static int Clamp(int value, int min, int max); // 0x1007C2F18
	public static float Clamp01(float value); // 0x1007C2F34
	public static float Lerp(float a, float b, float t); // 0x1007B523C
	public static float LerpAngle(float a, float b, float t); // 0x1007C2F50
	public static bool Approximately(float a, float b); // 0x1007C30A4
	public static float SmoothDamp(float current, float target, float currentVelocity, float smoothTime); // 0x1007C3158
	public static float SmoothDamp(float current, float target, float currentVelocity, float smoothTime, float maxSpeed, float deltaTime); // 0x1007C3200
	public static float Repeat(float t, float length); // 0x1007C3028
	public static float InverseLerp(float a, float b, float value); // 0x1007C3354
}

// Namespace: UnityEngine
public struct Keyframe // TypeDefIndex: 2125
{
	// Fields
	private float m_Time; // 0x10
	private float m_Value; // 0x14
	private float m_InTangent; // 0x18
	private float m_OutTangent; // 0x1C

	// Methods
	public void .ctor(float time, float value); // 0x1007C147C
	public void .ctor(float time, float value, float inTangent, float outTangent); // 0x1007C14A0
	public float get_time(); // 0x1007C14BC
	public void set_time(float value); // 0x1007C14C4
	public float get_value(); // 0x1007C14CC
	public void set_value(float value); // 0x1007C14D4
	public float get_inTangent(); // 0x1007C14DC
	public void set_inTangent(float value); // 0x1007C14E4
	public float get_outTangent(); // 0x1007C14EC
	public void set_outTangent(float value); // 0x1007C14F4
	public int get_tangentMode(); // 0x1007C14FC
	public void set_tangentMode(int value); // 0x1007C1504
}

// Namespace: UnityEngine
public sealed class AnimationCurve // TypeDefIndex: 2126
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(Keyframe[] keys); // 0x100794574
	public void .ctor(); // 0x100794618
	private void Cleanup(); // 0x100794644
	protected override void Finalize(); // 0x1007946A8
	public float Evaluate(float time); // 0x100794714
	public Keyframe[] get_keys(); // 0x100794788
	public Keyframe get_Item(int index); // 0x1007947F0
	public int get_length(); // 0x100794860
	private Keyframe GetKey_Internal(int index); // 0x100794828
	private static void INTERNAL_CALL_GetKey_Internal(AnimationCurve self, int index, out Keyframe value); // 0x1007948C4
	private Keyframe[] GetKeys(); // 0x10079478C
	public static AnimationCurve Linear(float timeStart, float valueStart, float timeEnd, float valueEnd); // 0x100794940
	private void Init(Keyframe[] keys); // 0x1007945A4
}

// Namespace: UnityEngine
public sealed class Mesh : Object // TypeDefIndex: 2127
{
	// Methods
	public void .ctor(); // 0x1007C4B90
	private static void Internal_Create(Mesh mono); // 0x1007C4C08
	public void Clear(bool keepVertexLayout); // 0x1007C4C6C
	public void Clear(); // 0x1007C4CE0
	internal bool get_canAccess(); // 0x1007C4CE8
	internal void PrintErrorCantAccessMesh(InternalShaderChannel channel); // 0x1007C4D4C
	internal void PrintErrorCantAccessMeshForIndices(); // 0x1007C4DC0
	internal void PrintErrorBadSubmeshIndexTriangles(); // 0x1007C4E24
	internal void PrintErrorBadSubmeshIndexIndices(); // 0x1007C4E88
	private void SetArrayForChannelImpl(InternalShaderChannel channel, InternalVertexChannelType format, int dim, Array values, int arraySize); // 0x1007C4EEC
	private Array GetAllocArrayFromChannelImpl(InternalShaderChannel channel, InternalVertexChannelType format, int dim); // 0x1007C4F90
	internal bool HasChannel(InternalShaderChannel channel); // 0x1007C501C
	private static Array ExtractArrayFromList(object list); // 0x1007C5090
	private int[] GetIndicesImpl(int submesh); // 0x1007C50F4
	private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds); // 0x1007C5168
	private void SetTrianglesImpl(int submesh, Array triangles, int arraySize); // 0x1007C51FC
	public void SetTriangles(int[] triangles, int submesh); // 0x1007C5204
	public void SetTriangles(int[] triangles, int submesh, bool calculateBounds); // 0x1007C520C
	public void SetTriangles(List`1<int> triangles, int submesh); // 0x1007C52A8
	public void SetTriangles(List`1<int> triangles, int submesh, bool calculateBounds); // 0x1007C52B0
	public Bounds get_bounds(); // 0x1007C536C
	public void set_bounds(Bounds value); // 0x1007C5424
	private void INTERNAL_get_bounds(out Bounds value); // 0x1007C53B0
	private void INTERNAL_set_bounds(Bounds value); // 0x1007C5428
	public void RecalculateBounds(); // 0x1007C549C
	public void RecalculateNormals(); // 0x1007C5500
	public int get_subMeshCount(); // 0x1007C5564
	public void set_subMeshCount(int value); // 0x1007C55C8
	internal InternalShaderChannel GetUVChannel(int uvIndex); // 0x1007C563C
	internal static int DefaultDimensionForChannel(InternalShaderChannel channel); // 0x1007C56C4
	private T[] GetAllocArrayFromChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim); // 0
	private T[] GetAllocArrayFromChannel(InternalShaderChannel channel); // 0
	private int SafeLength(Array values); // 0x1007C5290
	private int SafeLength(List`1<T> values); // 0
	private void SetSizedArrayForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, Array values, int valuesCount); // 0x1007C5778
	private void SetArrayForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, T[] values); // 0
	private void SetArrayForChannel(InternalShaderChannel channel, T[] values); // 0
	private void SetListForChannel(InternalShaderChannel channel, InternalVertexChannelType format, int dim, List`1<T> values); // 0
	private void SetListForChannel(InternalShaderChannel channel, List`1<T> values); // 0
	public Vector3[] get_vertices(); // 0x1007C57F4
	public void set_vertices(Vector3[] value); // 0x1007C5848
	public Vector3[] get_normals(); // 0x1007C58AC
	public void set_normals(Vector3[] value); // 0x1007C5900
	public Vector4[] get_tangents(); // 0x1007C5964
	public void set_tangents(Vector4[] value); // 0x1007C59B8
	public Vector2[] get_uv(); // 0x1007C5A1C
	public void set_uv(Vector2[] value); // 0x1007C5A70
	public Vector2[] get_uv2(); // 0x1007C5AD4
	public void set_uv2(Vector2[] value); // 0x1007C5B28
	public void set_colors(Color[] value); // 0x1007C5B8C
	public Color32[] get_colors32(); // 0x1007C5BF0
	public void set_colors32(Color32[] value); // 0x1007C5C4C
	public void SetVertices(List`1<Vector3> inVertices); // 0x1007C5CB8
	public void SetNormals(List`1<Vector3> inNormals); // 0x1007C5D1C
	public void SetTangents(List`1<Vector4> inTangents); // 0x1007C5D80
	public void SetColors(List`1<Color32> inColors); // 0x1007C5DE4
	private void SetUvsImpl(int uvIndex, int dim, List`1<T> uvs); // 0
	public void SetUVs(int channel, List`1<Vector2> uvs); // 0x1007C5E50
	private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles); // 0x1007C5EBC
	private bool CheckCanAccessSubmeshTriangles(int submesh); // 0x1007C5288
	private bool CheckCanAccessSubmeshIndices(int submesh); // 0x1007C5F30
	public void set_triangles(int[] value); // 0x1007C5F38
	public int[] GetIndices(int submesh); // 0x1007C5F9C
}

// Namespace: 
internal sealed class InternalShaderChannel : Enum // TypeDefIndex: 2128
{
	// Fields
	public int value__; // 0x10
	public const InternalShaderChannel Vertex = 0; // 0x0
	public const InternalShaderChannel Normal = 1; // 0x0
	public const InternalShaderChannel Color = 2; // 0x0
	public const InternalShaderChannel TexCoord0 = 3; // 0x0
	public const InternalShaderChannel TexCoord1 = 4; // 0x0
	public const InternalShaderChannel TexCoord2 = 5; // 0x0
	public const InternalShaderChannel TexCoord3 = 6; // 0x0
	public const InternalShaderChannel Tangent = 7; // 0x0

}

// Namespace: 
internal sealed class InternalVertexChannelType : Enum // TypeDefIndex: 2129
{
	// Fields
	public int value__; // 0x10
	public const InternalVertexChannelType Float = 0; // 0x0
	public const InternalVertexChannelType Color = 2; // 0x0

}

// Namespace: UnityEngine
public struct NetworkPlayer // TypeDefIndex: 2130
{
	// Fields
	internal int index; // 0x10

	// Methods
	public void .ctor(string ip, int port); // 0x1007CB9B4
	private static string Internal_GetIPAddress(int index); // 0x1007CB9BC
	private static int Internal_GetPort(int index); // 0x1007CBA20
	private static string Internal_GetExternalIP(); // 0x1007CBA84
	private static int Internal_GetExternalPort(); // 0x1007CBADC
	private static string Internal_GetLocalIP(); // 0x1007CBB34
	private static int Internal_GetLocalPort(); // 0x1007CBB8C
	private static int Internal_GetPlayerIndex(); // 0x1007CBBE4
	private static string Internal_GetGUID(int index); // 0x1007CBC3C
	private static string Internal_GetLocalGUID(); // 0x1007CBCA0
	public override int GetHashCode(); // 0x1007CBCF8
	public override bool Equals(object other); // 0x1007CBD8C
	public string get_ipAddress(); // 0x1007CBDD0
	public int get_port(); // 0x1007CBE14
	public string get_guid(); // 0x1007CBE58
	public override string ToString(); // 0x1007CBE60
	public string get_externalIP(); // 0x1007CBE6C
	public int get_externalPort(); // 0x1007CBE70
	internal static NetworkPlayer get_unassigned(); // 0x1007CBE74
	public static bool op_Equality(NetworkPlayer lhs, NetworkPlayer rhs); // 0x1007CBE7C
	public static bool op_Inequality(NetworkPlayer lhs, NetworkPlayer rhs); // 0x1007CBE88
}

// Namespace: UnityEngine
public struct NetworkViewID // TypeDefIndex: 2131
{
	// Fields
	private int a; // 0x10
	private int b; // 0x14
	private int c; // 0x18

	// Methods
	public static NetworkViewID get_unassigned(); // 0x1007CB79C
	private static void INTERNAL_get_unassigned(out NetworkViewID value); // 0x1007CBEF8
	internal static bool Internal_IsMine(NetworkViewID value); // 0x1007CBF5C
	private static bool INTERNAL_CALL_Internal_IsMine(NetworkViewID value); // 0x1007CBF84
	internal static void Internal_GetOwner(NetworkViewID value, out NetworkPlayer player); // 0x1007CBFE8
	private static void INTERNAL_CALL_Internal_GetOwner(NetworkViewID value, out NetworkPlayer player); // 0x1007CC014
	internal static string Internal_GetString(NetworkViewID value); // 0x1007CC088
	private static string INTERNAL_CALL_Internal_GetString(NetworkViewID value); // 0x1007CC0B0
	internal static bool Internal_Compare(NetworkViewID lhs, NetworkViewID rhs); // 0x1007CC114
	private static bool INTERNAL_CALL_Internal_Compare(NetworkViewID lhs, NetworkViewID rhs); // 0x1007CC148
	public override int GetHashCode(); // 0x1007CC1BC
	public override bool Equals(object other); // 0x1007CC27C
	public bool get_isMine(); // 0x1007CC284
	public NetworkPlayer get_owner(); // 0x1007CC2B4
	public override string ToString(); // 0x1007CC2F0
	public static bool op_Equality(NetworkViewID lhs, NetworkViewID rhs); // 0x1007CB7CC
	public static bool op_Inequality(NetworkViewID lhs, NetworkViewID rhs); // 0x1007CC320
}

// Namespace: UnityEngine
public sealed class NetworkView : Behaviour // TypeDefIndex: 2132
{
	// Methods
	public static NetworkView Find(NetworkViewID viewID); // 0x1007CB864
	private static NetworkView INTERNAL_CALL_Find(NetworkViewID viewID); // 0x1007CBE94
}

// Namespace: UnityEngine
public sealed class BitStream // TypeDefIndex: 2133
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(); // 0x1007995D8
	private void Serializeb(int value); // 0x1007995E0
	private void Serializec(char value); // 0x100799654
	private void Serializes(short value); // 0x1007996C8
	private void Serializei(int value); // 0x10079973C
	private void Serializef(float value, float maximumDelta); // 0x1007997B0
	private void Serializeq(Quaternion value, float maximumDelta); // 0x100799834
	private static void INTERNAL_CALL_Serializeq(BitStream self, Quaternion value, float maximumDelta); // 0x100799844
	private void Serializev(Vector3 value, float maximumDelta); // 0x1007998C8
	private static void INTERNAL_CALL_Serializev(BitStream self, Vector3 value, float maximumDelta); // 0x1007998D8
	private void Serializen(NetworkViewID viewID); // 0x10079995C
	private static void INTERNAL_CALL_Serializen(BitStream self, NetworkViewID viewID); // 0x10079996C
	public void Serialize(bool value); // 0x1007999E0
	public void Serialize(char value); // 0x100799A2C
	public void Serialize(short value); // 0x100799A30
	public void Serialize(int value); // 0x100799A34
	public void Serialize(float value); // 0x100799A38
	public void Serialize(float value, float maxDelta); // 0x100799A44
	public void Serialize(Quaternion value); // 0x100799A48
	public void Serialize(Quaternion value, float maxDelta); // 0x100799A60
	public void Serialize(Vector3 value); // 0x100799A70
	public void Serialize(Vector3 value, float maxDelta); // 0x100799A88
	public void Serialize(NetworkPlayer value); // 0x100799A98
	public void Serialize(NetworkViewID viewID); // 0x100799AD4
	public bool get_isReading(); // 0x100799AE4
	public bool get_isWriting(); // 0x100799B48
	private void Serialize(string value); // 0x100799BAC
}

// Namespace: UnityEngine
public sealed class RPC : Attribute // TypeDefIndex: 2134
{
	// Methods
	public void .ctor(); // 0x1007D51F0
}

// Namespace: UnityEngine
public sealed class HostData // TypeDefIndex: 2135
{
	// Fields
	private int m_Nat; // 0x10
	private string m_GameType; // 0x18
	private string m_GameName; // 0x20
	private int m_ConnectedPlayers; // 0x28
	private int m_PlayerLimit; // 0x2C
	private string[] m_IP; // 0x30
	private int m_Port; // 0x38
	private int m_PasswordProtected; // 0x3C
	private string m_Comment; // 0x40
	private string m_GUID; // 0x48

	// Methods
	public void .ctor(); // 0x1007BE0AC
	public bool get_useNat(); // 0x1007BE0B4
	public void set_useNat(bool value); // 0x1007BE0C4
	public string get_gameType(); // 0x1007BE0DC
	public void set_gameType(string value); // 0x1007BE0E4
	public string get_gameName(); // 0x1007BE0EC
	public void set_gameName(string value); // 0x1007BE0F4
	public int get_connectedPlayers(); // 0x1007BE0FC
	public void set_connectedPlayers(int value); // 0x1007BE104
	public int get_playerLimit(); // 0x1007BE10C
	public void set_playerLimit(int value); // 0x1007BE114
	public string[] get_ip(); // 0x1007BE11C
	public void set_ip(string[] value); // 0x1007BE124
	public int get_port(); // 0x1007BE12C
	public void set_port(int value); // 0x1007BE134
	public bool get_passwordProtected(); // 0x1007BE13C
	public void set_passwordProtected(bool value); // 0x1007BE14C
	public string get_comment(); // 0x1007BE164
	public void set_comment(string value); // 0x1007BE16C
	public string get_guid(); // 0x1007BE174
	public void set_guid(string value); // 0x1007BE17C
}

// Namespace: UnityEngine
public struct NetworkMessageInfo // TypeDefIndex: 2136
{
	// Fields
	private double m_TimeStamp; // 0x10
	private NetworkPlayer m_Sender; // 0x18
	private NetworkViewID m_ViewID; // 0x1C

	// Methods
	public double get_timestamp(); // 0x1007CB6A0
	public NetworkPlayer get_sender(); // 0x1007CB6A8
	public NetworkView get_networkView(); // 0x1007CB88C
	internal NetworkView NullNetworkView(); // 0x1007CB894
}

// Namespace: UnityEngine
public sealed class DrivenTransformProperties : Enum // TypeDefIndex: 2137
{
	// Fields
	public int value__; // 0x10
	public const DrivenTransformProperties None = 0; // 0x0
	public const DrivenTransformProperties All = -1; // 0x0
	public const DrivenTransformProperties AnchoredPositionX = 2; // 0x0
	public const DrivenTransformProperties AnchoredPositionY = 4; // 0x0
	public const DrivenTransformProperties AnchoredPositionZ = 8; // 0x0
	public const DrivenTransformProperties Rotation = 16; // 0x0
	public const DrivenTransformProperties ScaleX = 32; // 0x0
	public const DrivenTransformProperties ScaleY = 64; // 0x0
	public const DrivenTransformProperties ScaleZ = 128; // 0x0
	public const DrivenTransformProperties AnchorMinX = 256; // 0x0
	public const DrivenTransformProperties AnchorMinY = 512; // 0x0
	public const DrivenTransformProperties AnchorMaxX = 1024; // 0x0
	public const DrivenTransformProperties AnchorMaxY = 2048; // 0x0
	public const DrivenTransformProperties SizeDeltaX = 4096; // 0x0
	public const DrivenTransformProperties SizeDeltaY = 8192; // 0x0
	public const DrivenTransformProperties PivotX = 16384; // 0x0
	public const DrivenTransformProperties PivotY = 32768; // 0x0
	public const DrivenTransformProperties AnchoredPosition = 6; // 0x0
	public const DrivenTransformProperties AnchoredPosition3D = 14; // 0x0
	public const DrivenTransformProperties Scale = 224; // 0x0
	public const DrivenTransformProperties AnchorMin = 768; // 0x0
	public const DrivenTransformProperties AnchorMax = 3072; // 0x0
	public const DrivenTransformProperties Anchors = 3840; // 0x0
	public const DrivenTransformProperties SizeDelta = 12288; // 0x0
	public const DrivenTransformProperties Pivot = 49152; // 0x0

}

// Namespace: UnityEngine
public struct DrivenRectTransformTracker // TypeDefIndex: 2138
{
	// Methods
	public void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties); // 0x1007A0EC0
	public void Clear(); // 0x1007A0EC8
}

// Namespace: UnityEngine
public sealed class RectTransform : Transform // TypeDefIndex: 2139
{
	// Fields
	private static ReapplyDrivenProperties reapplyDrivenProperties; // 0x0

	// Methods
	public static void add_reapplyDrivenProperties(ReapplyDrivenProperties value); // 0x1007D16F8
	public static void remove_reapplyDrivenProperties(ReapplyDrivenProperties value); // 0x1007D17E4
	public Rect get_rect(); // 0x1007D18D0
	private void INTERNAL_get_rect(out Rect value); // 0x1007D18FC
	public Vector2 get_anchorMin(); // 0x1007D1970
	public void set_anchorMin(Vector2 value); // 0x1007D1A0C
	private void INTERNAL_get_anchorMin(out Vector2 value); // 0x1007D1998
	private void INTERNAL_set_anchorMin(Vector2 value); // 0x1007D1A30
	public Vector2 get_anchorMax(); // 0x1007D1AA4
	public void set_anchorMax(Vector2 value); // 0x1007D1B40
	private void INTERNAL_get_anchorMax(out Vector2 value); // 0x1007D1ACC
	private void INTERNAL_set_anchorMax(Vector2 value); // 0x1007D1B64
	public Vector2 get_anchoredPosition(); // 0x1007D1BD8
	public void set_anchoredPosition(Vector2 value); // 0x1007D1C74
	private void INTERNAL_get_anchoredPosition(out Vector2 value); // 0x1007D1C00
	private void INTERNAL_set_anchoredPosition(Vector2 value); // 0x1007D1C98
	public Vector2 get_sizeDelta(); // 0x1007D1D0C
	public void set_sizeDelta(Vector2 value); // 0x1007D1DA8
	private void INTERNAL_get_sizeDelta(out Vector2 value); // 0x1007D1D34
	private void INTERNAL_set_sizeDelta(Vector2 value); // 0x1007D1DCC
	public Vector2 get_pivot(); // 0x1007D1E40
	public void set_pivot(Vector2 value); // 0x1007D1EDC
	private void INTERNAL_get_pivot(out Vector2 value); // 0x1007D1E68
	private void INTERNAL_set_pivot(Vector2 value); // 0x1007D1F00
	internal static void SendReapplyDrivenProperties(RectTransform driven); // 0x1007D1F74
	public void GetLocalCorners(Vector3[] fourCornersArray); // 0x1007D207C
	public void GetWorldCorners(Vector3[] fourCornersArray); // 0x1007D226C
	public void SetInsetAndSizeFromParentEdge(Edge edge, float inset, float size); // 0x1007D2398
	public void SetSizeWithCurrentAnchors(Axis axis, float size); // 0x1007D255C
	private Vector2 GetParentSize(); // 0x1007D2650
}

// Namespace: 
public sealed class Edge : Enum // TypeDefIndex: 2140
{
	// Fields
	public int value__; // 0x10
	public const Edge Left = 0; // 0x0
	public const Edge Right = 1; // 0x0
	public const Edge Top = 2; // 0x0
	public const Edge Bottom = 3; // 0x0

}

// Namespace: 
public sealed class Axis : Enum // TypeDefIndex: 2141
{
	// Fields
	public int value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

}

// Namespace: 
public sealed class ReapplyDrivenProperties : MulticastDelegate // TypeDefIndex: 2142
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007D2734
	public virtual void Invoke(RectTransform driven); // 0x1007D1FE0
	public virtual IAsyncResult BeginInvoke(RectTransform driven, AsyncCallback callback, object object); // 0x1007D2744
	public virtual void EndInvoke(IAsyncResult result); // 0x1007D2794
}

// Namespace: UnityEngine
public sealed class ResourceRequest : AsyncOperation // TypeDefIndex: 2143
{
	// Fields
	internal string m_Path; // 0x18
	internal Type m_Type; // 0x20

	// Methods
	public void .ctor(); // 0x1007D4A80
	public Object get_asset(); // 0x1007D4A88
}

// Namespace: UnityEngine
public sealed class Resources // TypeDefIndex: 2144
{
	// Methods
	internal static T[] ConvertObjects(Object[] rawObjects); // 0
	public static Object Load(string path); // 0x1007D4B38
	public static T Load(string path); // 0
	public static Object Load(string path, Type systemTypeInstance); // 0x1007D4A90
	public static Object GetBuiltinResource(Type type, string path); // 0x1007D4BB8
	public static T GetBuiltinResource(string path); // 0
	public static void UnloadAsset(Object assetToUnload); // 0x1007D4C2C
	public static AsyncOperation UnloadUnusedAssets(); // 0x1007D4C90
}

// Namespace: UnityEngine
public class TextAsset : Object // TypeDefIndex: 2145
{
	// Methods
	public string get_text(); // 0x1007E0024
	public byte[] get_bytes(); // 0x1007E0088
	public override string ToString(); // 0x1007E00EC
}

// Namespace: UnityEngine
public sealed class SerializePrivateVariables : Attribute // TypeDefIndex: 2146
{
	// Methods
	public void .ctor(); // 0x1007D6DFC
}

// Namespace: UnityEngine
public sealed class SerializeField : Attribute // TypeDefIndex: 2147
{
	// Methods
	public void .ctor(); // 0x1007D6DF4
}

// Namespace: UnityEngine
public interface ISerializationCallbackReceiver // TypeDefIndex: 2148
{
	// Methods
	public abstract void OnBeforeSerialize(); // 0
	public abstract void OnAfterDeserialize(); // 0
}

// Namespace: UnityEngine
public sealed class Shader : Object // TypeDefIndex: 2149
{
	// Methods
	public static Shader Find(string name); // 0x1007D7098
	public bool get_isSupported(); // 0x1007D70FC
	public static int PropertyToID(string name); // 0x1007D7160
}

// Namespace: UnityEngine
public class Material : Object // TypeDefIndex: 2150
{
	// Methods
	public void .ctor(Shader shader); // 0x1007C1F3C
	public void .ctor(Material source); // 0x1007C2030
	public Shader get_shader(); // 0x1007C2124
	public void set_color(Color value); // 0x1007C2188
	public Texture get_mainTexture(); // 0x1007C2270
	public void set_mainTexture(Texture value); // 0x1007C2300
	public void SetColor(string propertyName, Color color); // 0x1007C2208
	public void SetColor(int nameID, Color color); // 0x1007C23A8
	private static void INTERNAL_CALL_SetColor(Material self, int nameID, Color color); // 0x1007C23DC
	public void SetVector(string propertyName, Vector4 vector); // 0x1007C2458
	public void SetTexture(string propertyName, Texture texture); // 0x1007C2370
	public void SetTexture(int nameID, Texture texture); // 0x1007C24A4
	public Texture GetTexture(string propertyName); // 0x1007C22D0
	public Texture GetTexture(int nameID); // 0x1007C2520
	public void SetTextureOffset(string propertyName, Vector2 offset); // 0x1007C2594
	private static void INTERNAL_CALL_SetTextureOffset(Material self, string propertyName, Vector2 offset); // 0x1007C25C4
	public void SetMatrix(string propertyName, Matrix4x4 matrix); // 0x1007C2640
	public void SetMatrix(int nameID, Matrix4x4 matrix); // 0x1007C26A4
	private static void INTERNAL_CALL_SetMatrix(Material self, int nameID, Matrix4x4 matrix); // 0x1007C26BC
	public void SetFloat(string propertyName, float value); // 0x1007C2738
	public void SetFloat(int nameID, float value); // 0x1007C2778
	public void SetInt(string propertyName, int value); // 0x1007C27FC
	public void SetBuffer(string propertyName, ComputeBuffer buffer); // 0x1007C283C
	public bool HasProperty(string propertyName); // 0x1007C28B8
	public bool HasProperty(int nameID); // 0x1007C28E8
	public int get_passCount(); // 0x1007C295C
	public bool SetPass(int pass); // 0x1007C29C0
	public int get_renderQueue(); // 0x1007C2A34
	public void set_renderQueue(int value); // 0x1007C2A98
	private static void Internal_CreateWithShader(Material mono, Shader shader); // 0x1007C1FBC
	private static void Internal_CreateWithMaterial(Material mono, Material source); // 0x1007C20B0
	public void EnableKeyword(string keyword); // 0x1007C2B0C
	public void DisableKeyword(string keyword); // 0x1007C2B80
}

// Namespace: UnityEngine
public struct SortingLayer // TypeDefIndex: 2151
{
	// Fields
	private int m_Id; // 0x10

	// Methods
	public static int GetLayerValueFromID(int id); // 0x1007DDDB8
}

// Namespace: UnityEngine
public sealed class Sprite : Object // TypeDefIndex: 2152
{
	// Methods
	public Bounds get_bounds(); // 0x1007DDE98
	private void INTERNAL_get_bounds(out Bounds value); // 0x1007DDEDC
	public Rect get_rect(); // 0x1007DDF50
	private void INTERNAL_get_rect(out Rect value); // 0x1007DDF7C
	public float get_pixelsPerUnit(); // 0x1007DDFF0
	public Texture2D get_texture(); // 0x1007DE054
	public Texture2D get_associatedAlphaSplitTexture(); // 0x1007DE0B8
	public Rect get_textureRect(); // 0x1007DE11C
	private void INTERNAL_get_textureRect(out Rect value); // 0x1007DE148
	public Vector4 get_border(); // 0x1007DE1BC
	private void INTERNAL_get_border(out Vector4 value); // 0x1007DE1E8
}

// Namespace: UnityEngine
public sealed class SpriteRenderer : Renderer // TypeDefIndex: 2153
{
	// Methods
	public Sprite get_sprite(); // 0x1007DE25C
	public void set_sprite(Sprite value); // 0x1007DE2C4
	private Sprite GetSprite_INTERNAL(); // 0x1007DE260
	private void SetSprite_INTERNAL(Sprite sprite); // 0x1007DE2C8
}

// Namespace: UnityEngine.Sprites
public sealed class DataUtility // TypeDefIndex: 2154
{
	// Methods
	public static Vector4 GetInnerUV(Sprite sprite); // 0x1007DE33C
	private static void INTERNAL_CALL_GetInnerUV(Sprite sprite, out Vector4 value); // 0x1007DE368
	public static Vector4 GetOuterUV(Sprite sprite); // 0x1007DE3DC
	private static void INTERNAL_CALL_GetOuterUV(Sprite sprite, out Vector4 value); // 0x1007DE408
	public static Vector4 GetPadding(Sprite sprite); // 0x1007DE47C
	private static void INTERNAL_CALL_GetPadding(Sprite sprite, out Vector4 value); // 0x1007DE4A8
	public static Vector2 GetMinSize(Sprite sprite); // 0x1007DE51C
	private static void Internal_GetMinSize(Sprite sprite, out Vector2 output); // 0x1007DE544
}

// Namespace: UnityEngine
public struct Hash128 // TypeDefIndex: 2155
{
	// Fields
	private uint m_u32_0; // 0x10
	private uint m_u32_1; // 0x14
	private uint m_u32_2; // 0x18
	private uint m_u32_3; // 0x1C

	// Methods
	public void .ctor(uint u32_0, uint u32_1, uint u32_2, uint u32_3); // 0x1007BDE14
	public bool get_isValid(); // 0x1007BDE50
	public override string ToString(); // 0x1007BDF0C
	internal static string Internal_Hash128ToString(uint d0, uint d1, uint d2, uint d3); // 0x1007BDE80
	public override bool Equals(object obj); // 0x1007BE000
	public override int GetHashCode(); // 0x1007BE070
	public static bool op_Equality(Hash128 hash1, Hash128 hash2); // 0x1007BDFCC
}

// Namespace: UnityEngine
public sealed class WWW : IDisposable // TypeDefIndex: 2156
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(string url); // 0x1007EB418
	public void .ctor(string url, WWWForm form); // 0x1007EB4DC
	public void .ctor(string url, byte[] postData, Dictionary`2<string, string> headers); // 0x1007ECF44
	internal void .ctor(string url, Hash128 hash, uint crc); // 0x1007ECF94
	public void Dispose(); // 0x1007ED0A0
	protected override void Finalize(); // 0x1007ED11C
	private void DestroyWWW(bool cancel); // 0x1007ED0A8
	public void InitWWW(string url, byte[] postData, string[] iHeaders); // 0x1007EB450
	public Dictionary`2<string, string> get_responseHeaders(); // 0x1007ED18C
	private string get_responseHeadersString(); // 0x1007ED274
	public string get_text(); // 0x1007ED4E0
	internal static Encoding get_DefaultEncoding(); // 0x1007ED914
	private Encoding GetTextEncoder(); // 0x1007ED628
	public byte[] get_bytes(); // 0x1007ED5C4
	public string get_error(); // 0x1007ED978
	private Texture2D GetTexture(bool markNonReadable); // 0x1007ED9DC
	public Texture2D get_texture(); // 0x1007EDA50
	public bool get_isDone(); // 0x1007ED210
	public float get_progress(); // 0x1007EDA58
	public string get_url(); // 0x1007EDABC
	public AssetBundle get_assetBundle(); // 0x1007EDB20
	private static void INTERNAL_CALL_WWW(WWW self, string url, Hash128 hash, uint crc); // 0x1007ED014
	public static WWW LoadFromCacheOrDownload(string url, int version); // 0x1007EDB84
	public static WWW LoadFromCacheOrDownload(string url, int version, uint crc); // 0x1007EDB8C
	public static WWW LoadFromCacheOrDownload(string url, Hash128 hash); // 0x1007EDCB0
	public static WWW LoadFromCacheOrDownload(string url, Hash128 hash, uint crc); // 0x1007EDBE8
	private static string[] FlattenedHeadersFrom(Dictionary`2<string, string> headers); // 0x1007EB6CC
	internal static Dictionary`2<string, string> ParseHTTPHeaderString(string input); // 0x1007ED2D8
}

// Namespace: UnityEngine
public sealed class WWWForm // TypeDefIndex: 2157
{
	// Fields
	private List`1<byte[]> formData; // 0x10
	private List`1<string> fieldNames; // 0x18
	private List`1<string> fileNames; // 0x20
	private List`1<string> types; // 0x28
	private byte[] boundary; // 0x30
	private bool containsFiles; // 0x38

	// Methods
	public void .ctor(); // 0x1007EDCB8
	public void AddField(string fieldName, string value); // 0x1007EDE18
	public void AddField(string fieldName, string value, Encoding e); // 0x1007EDEA4
	public void AddBinaryData(string fieldName, byte[] contents, string fileName, string mimeType); // 0x1007EE00C
	public Dictionary`2<string, string> get_headers(); // 0x1007EB544
	public byte[] get_data(); // 0x1007EB9E8
}

// Namespace: UnityEngine
internal sealed class WWWTranscoder // TypeDefIndex: 2158
{
	// Fields
	private static byte[] ucHexChars; // 0x0
	private static byte[] lcHexChars; // 0x8
	private static byte urlEscapeChar; // 0x10
	private static byte urlSpace; // 0x11
	private static byte[] urlForbidden; // 0x18
	private static byte qpEscapeChar; // 0x20
	private static byte qpSpace; // 0x21
	private static byte[] qpForbidden; // 0x28

	// Methods
	private static void .cctor(); // 0x1007EE474
	private static byte[] Byte2Hex(byte b, byte[] hexChars); // 0x1007EE60C
	public static string URLEncode(string toEncode, Encoding e); // 0x1007EE6F8
	public static byte[] URLEncode(byte[] toEncode); // 0x1007EE3F8
	public static string QPEncode(string toEncode, Encoding e); // 0x1007EE2E4
	public static byte[] Encode(byte[] input, byte escapeChar, byte space, byte[] forbidden, bool uppercase); // 0x1007EE80C
	private static bool ByteArrayContains(byte[] array, byte b); // 0x1007EEC60
	public static bool SevenBitClean(string s, Encoding e); // 0x1007EE240
	public static bool SevenBitClean(byte[] input); // 0x1007EECEC
}

// Namespace: UnityEngine
internal sealed class UnityString // TypeDefIndex: 2159
{
	// Methods
	public static string Format(string fmt, object[] args); // 0x1007E942C
}

// Namespace: UnityEngine
public class AsyncOperation : YieldInstruction // TypeDefIndex: 2160
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(); // 0x100797780
	private void InternalDestroy(); // 0x100797B38
	protected override void Finalize(); // 0x100797B9C
	public bool get_isDone(); // 0x100797C08
	public float get_progress(); // 0x100797C6C
	public int get_priority(); // 0x100797CD0
	public void set_priority(int value); // 0x100797D34
	public bool get_allowSceneActivation(); // 0x100797DA8
	public void set_allowSceneActivation(bool value); // 0x100797E0C
}

// Namespace: UnityEngine
public sealed class Application // TypeDefIndex: 2161
{
	// Fields
	internal static AdvertisingIdentifierCallback OnAdvertisingIdentifierCallback; // 0x0
	private static LogCallback s_LogCallbackHandler; // 0x8
	private static LogCallback s_LogCallbackHandlerThreaded; // 0x10
	private static LogCallback s_RegisterLogCallbackDeprecated; // 0x18

	// Methods
	public static void add_logMessageReceived(LogCallback value); // 0x1007957F0
	public static void remove_logMessageReceived(LogCallback value); // 0x100795948
	public static void add_logMessageReceivedThreaded(LogCallback value); // 0x100795A34
	public static void remove_logMessageReceivedThreaded(LogCallback value); // 0x100795B28
	public static void Quit(); // 0x100795C14
	private static bool CanStreamedLevelBeLoadedByName(string levelName); // 0x100795C6C
	public static bool CanStreamedLevelBeLoaded(string levelName); // 0x100795CD0
	public static bool get_isPlaying(); // 0x100795CD4
	public static bool get_isEditor(); // 0x100795D2C
	public static RuntimePlatform get_platform(); // 0x100795D84
	public static bool get_isMobilePlatform(); // 0x100795DDC
	public static bool get_isConsolePlatform(); // 0x100795E64
	public static string get_streamingAssetsPath(); // 0x100795EA4
	public static string get_persistentDataPath(); // 0x100795EFC
	public static string get_temporaryCachePath(); // 0x100795F54
	private static string ObjectToJSString(object o); // 0x100795FAC
	public static void ExternalCall(string functionName, object[] args); // 0x1007966B0
	private static string BuildInvocationForArguments(string functionName, object[] args); // 0x1007966C8
	public static void ExternalEval(string script); // 0x100796858
	private static void Internal_ExternalCall(string script); // 0x1007967F4
	public static string get_unityVersion(); // 0x100796940
	internal static void InvokeOnAdvertisingIdentifierCallback(string advertisingId, bool trackingEnabled); // 0x100796998
	public static void OpenURL(string url); // 0x100796B1C
	public static void set_targetFrameRate(int value); // 0x100796B80
	public static SystemLanguage get_systemLanguage(); // 0x100796BE4
	private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread); // 0x100796C3C
	private static void SetLogCallbackDefined(bool defined); // 0x1007958E4
	public static void RegisterLogCallback(LogCallback handler); // 0x100796DD8
	private static void RegisterLogCallback(LogCallback handler, bool threaded); // 0x100796DE0
}

// Namespace: 
public sealed class AdvertisingIdentifierCallback : MulticastDelegate // TypeDefIndex: 2162
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100796EB4
	public virtual void Invoke(string advertisingId, bool trackingEnabled, string errorMsg); // 0x100796A48
	public virtual IAsyncResult BeginInvoke(string advertisingId, bool trackingEnabled, string errorMsg, AsyncCallback callback, object object); // 0x100796F28
	public virtual void EndInvoke(IAsyncResult result); // 0x100796FF4
}

// Namespace: 
public sealed class LogCallback : MulticastDelegate // TypeDefIndex: 2163
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100797000
	public virtual void Invoke(string condition, string stackTrace, LogType type); // 0x100796D04
	public virtual IAsyncResult BeginInvoke(string condition, string stackTrace, LogType type, AsyncCallback callback, object object); // 0x100797074
	public virtual void EndInvoke(IAsyncResult result); // 0x100797140
}

// Namespace: UnityEngine
public class Behaviour : Component // TypeDefIndex: 2164
{
	// Methods
	public void .ctor(); // 0x100799430
	public bool get_enabled(); // 0x10079949C
	public void set_enabled(bool value); // 0x100799500
	public bool get_isActiveAndEnabled(); // 0x100799574
}

// Namespace: UnityEngine
public sealed class Camera : Behaviour // TypeDefIndex: 2165
{
	// Fields
	public static CameraCallback onPreCull; // 0x0
	public static CameraCallback onPreRender; // 0x8
	public static CameraCallback onPostRender; // 0x10

	// Methods
	public float get_fieldOfView(); // 0x10079A9E0
	public void set_fieldOfView(float value); // 0x10079AA44
	public float get_nearClipPlane(); // 0x10079AAB8
	public float get_farClipPlane(); // 0x10079AB1C
	public bool get_hdr(); // 0x10079AB80
	public float get_orthographicSize(); // 0x10079ABE4
	public bool get_orthographic(); // 0x10079AC48
	public void set_orthographic(bool value); // 0x10079ACAC
	public void set_transparencySortMode(TransparencySortMode value); // 0x10079AD20
	public float get_depth(); // 0x10079AD94
	public float get_aspect(); // 0x10079ADF8
	public int get_cullingMask(); // 0x10079AE5C
	public void set_cullingMask(int value); // 0x10079AEC0
	public int get_eventMask(); // 0x10079AF34
	public Rect get_rect(); // 0x10079AF98
	public void set_rect(Rect value); // 0x10079B038
	private void INTERNAL_get_rect(out Rect value); // 0x10079AFC4
	private void INTERNAL_set_rect(Rect value); // 0x10079B060
	public Rect get_pixelRect(); // 0x10079B0D4
	private void INTERNAL_get_pixelRect(out Rect value); // 0x10079B100
	public RenderTexture get_targetTexture(); // 0x10079B174
	public void set_targetTexture(RenderTexture value); // 0x10079B1D8
	public int get_pixelWidth(); // 0x10079B24C
	public int get_pixelHeight(); // 0x10079B2B0
	public Matrix4x4 get_worldToCameraMatrix(); // 0x10079B314
	private void INTERNAL_get_worldToCameraMatrix(out Matrix4x4 value); // 0x10079B360
	public Matrix4x4 get_projectionMatrix(); // 0x10079B3D4
	public void set_projectionMatrix(Matrix4x4 value); // 0x10079B494
	private void INTERNAL_get_projectionMatrix(out Matrix4x4 value); // 0x10079B420
	private void INTERNAL_set_projectionMatrix(Matrix4x4 value); // 0x10079B498
	public void ResetProjectionMatrix(); // 0x10079B50C
	private static void INTERNAL_CALL_ResetProjectionMatrix(Camera self); // 0x10079B514
	public CameraClearFlags get_clearFlags(); // 0x10079B578
	public void set_clearFlags(CameraClearFlags value); // 0x10079B5DC
	public Vector3 WorldToScreenPoint(Vector3 position); // 0x10079B650
	private static void INTERNAL_CALL_WorldToScreenPoint(Camera self, Vector3 position, out Vector3 value); // 0x10079B690
	public Vector3 WorldToViewportPoint(Vector3 position); // 0x10079B70C
	private static void INTERNAL_CALL_WorldToViewportPoint(Camera self, Vector3 position, out Vector3 value); // 0x10079B74C
	public Vector3 ScreenToWorldPoint(Vector3 position); // 0x10079B7C8
	private static void INTERNAL_CALL_ScreenToWorldPoint(Camera self, Vector3 position, out Vector3 value); // 0x10079B808
	public Vector3 ScreenToViewportPoint(Vector3 position); // 0x10079B884
	private static void INTERNAL_CALL_ScreenToViewportPoint(Camera self, Vector3 position, out Vector3 value); // 0x10079B8C4
	public Ray ScreenPointToRay(Vector3 position); // 0x10079B940
	private static void INTERNAL_CALL_ScreenPointToRay(Camera self, Vector3 position, out Ray value); // 0x10079B994
	public static Camera get_main(); // 0x10079BA10
	public static int get_allCamerasCount(); // 0x10079BA68
	public static int GetAllCameras(Camera[] cameras); // 0x10079BAC0
	private static void FireOnPreCull(Camera cam); // 0x10079BB24
	private static void FireOnPreRender(Camera cam); // 0x10079BC2C
	private static void FireOnPostRender(Camera cam); // 0x10079BC98
	public void Render(); // 0x10079BD04
	public void RenderWithShader(Shader shader, string replacementTag); // 0x10079BD68
	public void CopyFrom(Camera other); // 0x10079BDE4
	public DepthTextureMode get_depthTextureMode(); // 0x10079BE58
	public void set_depthTextureMode(DepthTextureMode value); // 0x10079BEBC
	internal GameObject RaycastTry(Ray ray, float distance, int layerMask); // 0x10079BF30
	private static GameObject INTERNAL_CALL_RaycastTry(Camera self, Ray ray, float distance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x10079BF4C
	internal GameObject RaycastTry2D(Ray ray, float distance, int layerMask); // 0x10079BFE8
	private static GameObject INTERNAL_CALL_RaycastTry2D(Camera self, Ray ray, float distance, int layerMask); // 0x10079C000
}

// Namespace: 
public sealed class CameraCallback : MulticastDelegate // TypeDefIndex: 2166
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10079C08C
	public virtual void Invoke(Camera cam); // 0x10079BB90
	public virtual IAsyncResult BeginInvoke(Camera cam, AsyncCallback callback, object object); // 0x10079C09C
	public virtual void EndInvoke(IAsyncResult result); // 0x10079C0EC
}

// Namespace: UnityEngine
public sealed class ComputeBuffer : IDisposable // TypeDefIndex: 2167
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public void .ctor(int count, int stride, ComputeBufferType type); // 0x10079F114
	protected override void Finalize(); // 0x10079F230
	public void Dispose(); // 0x10079F300
	private void Dispose(bool disposing); // 0x10079F2A0
	private static void InitBuffer(ComputeBuffer buf, int count, int stride, ComputeBufferType type); // 0x10079F1A4
	private static void DestroyBuffer(ComputeBuffer buf); // 0x10079F330
	public void Release(); // 0x10079F394
	public void SetData(Array data); // 0x10079F3C4
	private void InternalSetData(Array data, int elemSize); // 0x10079F49C
	public static void CopyCount(ComputeBuffer src, ComputeBuffer dst, int dstOffset); // 0x10079F518
}

// Namespace: UnityEngine
internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 2168
{
	// Methods
	public void .ctor(); // 0x10079FEB0
	internal static void Internal_Log(LogType level, string msg, Object obj); // 0x1007A0818
	internal static void Internal_LogException(Exception exception, Object obj); // 0x1007A0894
	public void LogFormat(LogType logType, Object context, string format, object[] args); // 0x1007A0908
	public void LogException(Exception exception, Object context); // 0x1007A09A4
}

// Namespace: UnityEngine
public sealed class Debug // TypeDefIndex: 2169
{
	// Fields
	internal static Logger s_Logger; // 0x0

	// Methods
	private static void .cctor(); // 0x10079FE24
	public static ILogger get_logger(); // 0x10079FEB8
	public static void Break(); // 0x10079FF20
	public static void Log(object message); // 0x100791158
	public static void Log(object message, Object context); // 0x10079FF78
	public static void LogError(object message); // 0x100794C48
	public static void LogError(object message, Object context); // 0x1007A00A8
	public static void LogException(Exception exception); // 0x1007A01D8
	public static void LogException(Exception exception, Object context); // 0x1007A0300
	public static void LogWarning(object message); // 0x1007A042C
	public static void LogWarning(object message, Object context); // 0x1007A0554
	public static void LogWarningFormat(Object context, string format, object[] args); // 0x1007A0684
	public static bool get_isDebugBuild(); // 0x1007A07C0
}

// Namespace: UnityEngine
public sealed class Display // TypeDefIndex: 2170
{
	// Fields
	internal IntPtr nativeDisplay; // 0x10
	public static Display[] displays; // 0x0
	private static Display _mainDisplay; // 0x8
	private static DisplaysUpdatedDelegate onDisplaysUpdated; // 0x10

	// Methods
	internal void .ctor(); // 0x1007A09B0
	internal void .ctor(IntPtr nativeDisplay); // 0x1007A09F8
	private static void .cctor(); // 0x1007A0A24
	private static void RecreateDisplayList(IntPtr[] nativeDisplay); // 0x1007A0B44
	private static void FireDisplaysUpdated(); // 0x1007A0CFC
}

// Namespace: 
public sealed class DisplaysUpdatedDelegate : MulticastDelegate // TypeDefIndex: 2171
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007A0E34
	public virtual void Invoke(); // 0x1007A0DA4
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007A0E50
	public virtual void EndInvoke(IAsyncResult result); // 0x1007A0EB0
}

// Namespace: UnityEngine
public class MonoBehaviour : Behaviour // TypeDefIndex: 2172
{
	// Methods
	public void .ctor(); // 0x1007C62CC
	private void Internal_CancelInvokeAll(); // 0x1007C62D4
	private bool Internal_IsInvokingAll(); // 0x1007C6338
	public void Invoke(string methodName, float time); // 0x1007C639C
	public void InvokeRepeating(string methodName, float time, float repeatRate); // 0x1007C6420
	public void CancelInvoke(); // 0x1007C64AC
	public void CancelInvoke(string methodName); // 0x1007C64B0
	public bool IsInvoking(string methodName); // 0x1007C6524
	public bool IsInvoking(); // 0x1007C6598
	public Coroutine StartCoroutine(IEnumerator routine); // 0x1007C659C
	public Coroutine StartCoroutine_Auto(IEnumerator routine); // 0x1007C65A0
	public Coroutine StartCoroutine(string methodName, object value); // 0x1007C6614
	public Coroutine StartCoroutine(string methodName); // 0x1007C6690
	public void StopCoroutine(string methodName); // 0x1007C6698
	public void StopCoroutine(IEnumerator routine); // 0x1007C670C
	public void StopCoroutine(Coroutine routine); // 0x1007C6784
	internal void StopCoroutineViaEnumerator_Auto(IEnumerator routine); // 0x1007C6710
	internal void StopCoroutine_Auto(Coroutine routine); // 0x1007C6788
	public void StopAllCoroutines(); // 0x1007C67FC
	public static void print(object message); // 0x1007C6860
	public bool get_useGUILayout(); // 0x1007C68CC
	public void set_useGUILayout(bool value); // 0x1007C6930
}

// Namespace: UnityEngine
public sealed class TouchPhase : Enum // TypeDefIndex: 2173
{
	// Fields
	public int value__; // 0x10
	public const TouchPhase Began = 0; // 0x0
	public const TouchPhase Moved = 1; // 0x0
	public const TouchPhase Stationary = 2; // 0x0
	public const TouchPhase Ended = 3; // 0x0
	public const TouchPhase Canceled = 4; // 0x0

}

// Namespace: UnityEngine
public sealed class IMECompositionMode : Enum // TypeDefIndex: 2174
{
	// Fields
	public int value__; // 0x10
	public const IMECompositionMode Auto = 0; // 0x0
	public const IMECompositionMode On = 1; // 0x0
	public const IMECompositionMode Off = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class TouchType : Enum // TypeDefIndex: 2175
{
	// Fields
	public int value__; // 0x10
	public const TouchType Direct = 0; // 0x0
	public const TouchType Indirect = 1; // 0x0
	public const TouchType Stylus = 2; // 0x0

}

// Namespace: UnityEngine
public struct Touch // TypeDefIndex: 2176
{
	// Fields
	private int m_FingerId; // 0x10
	private Vector2 m_Position; // 0x14
	private Vector2 m_RawPosition; // 0x1C
	private Vector2 m_PositionDelta; // 0x24
	private float m_TimeDelta; // 0x2C
	private int m_TapCount; // 0x30
	private TouchPhase m_Phase; // 0x34
	private TouchType m_Type; // 0x38
	private float m_Pressure; // 0x3C
	private float m_maximumPossiblePressure; // 0x40
	private float m_Radius; // 0x44
	private float m_RadiusVariance; // 0x48
	private float m_AltitudeAngle; // 0x4C
	private float m_AzimuthAngle; // 0x50

	// Methods
	public int get_fingerId(); // 0x1007E6EB8
	public Vector2 get_position(); // 0x1007E6EC8
	public Vector2 get_deltaPosition(); // 0x1007E6ED8
	public float get_deltaTime(); // 0x1007E6EE8
	public TouchPhase get_phase(); // 0x1007E6EF8
	public TouchType get_type(); // 0x1007E6F08
}

// Namespace: UnityEngine
public sealed class Input // TypeDefIndex: 2177
{
	// Methods
	private static void .cctor(); // 0x1007BE480
	private static bool GetKeyInt(int key); // 0x1007BE484
	private static bool GetKeyDownInt(int key); // 0x1007BE4E8
	public static float GetAxis(string axisName); // 0x1007BE54C
	public static float GetAxisRaw(string axisName); // 0x1007BE5B0
	public static bool GetButtonDown(string buttonName); // 0x1007BE614
	public static bool GetKey(KeyCode key); // 0x1007BE678
	public static bool GetKeyDown(KeyCode key); // 0x1007BE6DC
	public static bool GetMouseButton(int button); // 0x1007BE740
	public static bool GetMouseButtonDown(int button); // 0x1007BE7A4
	public static bool GetMouseButtonUp(int button); // 0x1007BE808
	public static Vector3 get_mousePosition(); // 0x1007BE86C
	private static void INTERNAL_get_mousePosition(out Vector3 value); // 0x1007BE8E8
	public static Vector2 get_mouseScrollDelta(); // 0x1007BE94C
	private static void INTERNAL_get_mouseScrollDelta(out Vector2 value); // 0x1007BE9C0
	public static bool get_mousePresent(); // 0x1007BEA24
	public static string get_inputString(); // 0x1007BEA7C
	public static Touch[] get_touches(); // 0x1007BEAD4
	public static Touch GetTouch(int index); // 0x1007BEC44
	private static void INTERNAL_CALL_GetTouch(int index, out Touch value); // 0x1007BECE4
	public static int get_touchCount(); // 0x1007BEBEC
	public static bool get_touchSupported(); // 0x1007BED58
	public static bool get_multiTouchEnabled(); // 0x1007BEDB0
	public static void set_imeCompositionMode(IMECompositionMode value); // 0x1007BEE08
	public static string get_compositionString(); // 0x1007AC7F4
	public static void set_compositionCursorPos(Vector2 value); // 0x1007BEE6C
	private static void INTERNAL_set_compositionCursorPos(Vector2 value); // 0x1007BEEDC
}

// Namespace: UnityEngine
public sealed class HideFlags : Enum // TypeDefIndex: 2178
{
	// Fields
	public int value__; // 0x10
	public const HideFlags None = 0; // 0x0
	public const HideFlags HideInHierarchy = 1; // 0x0
	public const HideFlags HideInInspector = 2; // 0x0
	public const HideFlags DontSaveInEditor = 4; // 0x0
	public const HideFlags NotEditable = 8; // 0x0
	public const HideFlags DontSaveInBuild = 16; // 0x0
	public const HideFlags DontUnloadUnusedAsset = 32; // 0x0
	public const HideFlags DontSave = 52; // 0x0
	public const HideFlags HideAndDontSave = 61; // 0x0

}

// Namespace: UnityEngine
public class Object // TypeDefIndex: 2179
{
	// Fields
	private IntPtr m_CachedPtr; // 0x10
	internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x0

	// Methods
	public void .ctor(); // 0x1007C4C00
	private static void .cctor(); // 0x1007CC358
	private static Object Internal_CloneSingle(Object data); // 0x1007CC3AC
	private static Object Internal_CloneSingleWithParent(Object data, Transform parent, bool worldPositionStays); // 0x1007CC410
	private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot); // 0x1007CC48C
	private static Object INTERNAL_CALL_Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot); // 0x1007CC514
	private static Object Internal_InstantiateSingleWithParent(Object data, Transform parent, Vector3 pos, Quaternion rot); // 0x1007CC590
	private static Object INTERNAL_CALL_Internal_InstantiateSingleWithParent(Object data, Transform parent, Vector3 pos, Quaternion rot); // 0x1007CC628
	private static int GetOffsetOfInstanceIDInCPlusPlusObject(); // 0x1007CC6B4
	private void EnsureRunningOnMainThread(); // 0x1007CC70C
	public static void Destroy(Object obj, float t); // 0x1007CC770
	public static void Destroy(Object obj); // 0x1007CC7E4
	public static void DestroyImmediate(Object obj, bool allowDestroyingAssets); // 0x1007CC84C
	public static void DestroyImmediate(Object obj); // 0x1007CC8C0
	public static Object[] FindObjectsOfType(Type type); // 0x1007CC928
	public string get_name(); // 0x1007CC98C
	public void set_name(string value); // 0x1007CC9F0
	public static void DontDestroyOnLoad(Object target); // 0x1007CCA64
	public HideFlags get_hideFlags(); // 0x1007CCAC8
	public void set_hideFlags(HideFlags value); // 0x1007CCB2C
	public static void DestroyObject(Object obj, float t); // 0x1007CCBA0
	public static void DestroyObject(Object obj); // 0x1007CCC14
	public static Object[] FindSceneObjectsOfType(Type type); // 0x1007CCC7C
	public static Object[] FindObjectsOfTypeIncludingAssets(Type type); // 0x1007CCCE0
	public override string ToString(); // 0x1007CCD44
	internal static bool DoesObjectWithInstanceIDExist(int instanceID); // 0x1007CCDA8
	public int GetInstanceID(); // 0x1007CCE0C
	public override int GetHashCode(); // 0x1007CCF38
	public override bool Equals(object o); // 0x1007CCF40
	private static bool CompareBaseObjects(Object lhs, Object rhs); // 0x1007CCFE8
	private static bool IsNativeObjectAlive(Object o); // 0x1007CD0C0
	private IntPtr GetCachedPtr(); // 0x1007CD128
	public static Object Instantiate(Object original, Vector3 position, Quaternion rotation); // 0x1007CD130
	public static Object Instantiate(Object original, Vector3 position, Quaternion rotation, Transform parent); // 0x1007CD278
	public static Object Instantiate(Object original); // 0x1007CD448
	public static Object Instantiate(Object original, Transform parent); // 0x1007CD4C0
	public static Object Instantiate(Object original, Transform parent, bool worldPositionStays); // 0x1007CD538
	public static T Instantiate(T original); // 0
	private static void CheckNullArgument(object arg, string message); // 0x1007CD200
	public static T[] FindObjectsOfType(); // 0
	public static Object FindObjectOfType(Type type); // 0x1007CD618
	public static T FindObjectOfType(); // 0
	public static bool op_Implicit(Object exists); // 0x1007CD6A0
	public static bool op_Equality(Object x, Object y); // 0x1007CD3D4
	public static bool op_Inequality(Object x, Object y); // 0x1007CD710
}

// Namespace: UnityEngine
public class Component : Object // TypeDefIndex: 2180
{
	// Methods
	public void .ctor(); // 0x100799434
	public Transform get_transform(); // 0x10079DDD8
	public GameObject get_gameObject(); // 0x10079DED0
	public Component GetComponent(Type type); // 0x10079EB80
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x10079EBB0
	public T GetComponent(); // 0
	public Component GetComponent(string type); // 0x10079EC2C
	public Component GetComponentInChildren(Type t, bool includeInactive); // 0x10079ECA0
	public Component GetComponentInChildren(Type t); // 0x10079ECD8
	public T GetComponentInChildren(); // 0
	public T GetComponentInChildren(bool includeInactive); // 0
	public Component[] GetComponentsInChildren(Type t); // 0x10079ECE0
	public Component[] GetComponentsInChildren(Type t, bool includeInactive); // 0x10079ECE8
	public T[] GetComponentsInChildren(bool includeInactive); // 0
	public void GetComponentsInChildren(bool includeInactive, List`1<T> result); // 0
	public T[] GetComponentsInChildren(); // 0
	public void GetComponentsInChildren(List`1<T> results); // 0
	public Component GetComponentInParent(Type t); // 0x10079ED20
	public T GetComponentInParent(); // 0
	public Component[] GetComponentsInParent(Type t); // 0x10079ED50
	public Component[] GetComponentsInParent(Type t, bool includeInactive); // 0x10079ED58
	public T[] GetComponentsInParent(bool includeInactive); // 0
	public void GetComponentsInParent(bool includeInactive, List`1<T> results); // 0
	public T[] GetComponentsInParent(); // 0
	public Component[] GetComponents(Type type); // 0x10079ED90
	private void GetComponentsForListInternal(Type searchType, object resultList); // 0x10079EDC0
	public void GetComponents(Type type, List`1<Component> results); // 0x10079EE3C
	public void GetComponents(List`1<T> results); // 0
	public string get_tag(); // 0x10079EE40
	public void set_tag(string value); // 0x10079EE60
	public T[] GetComponents(); // 0
	public bool CompareTag(string tag); // 0x10079EE90
	public void SendMessageUpwards(string methodName, object value, SendMessageOptions options); // 0x10079EF04
	public void SendMessageUpwards(string methodName, object value); // 0x10079EF90
	public void SendMessageUpwards(string methodName); // 0x10079EF98
	public void SendMessageUpwards(string methodName, SendMessageOptions options); // 0x10079EFA4
	public void SendMessage(string methodName, object value, SendMessageOptions options); // 0x10079EFB4
	public void SendMessage(string methodName, object value); // 0x10079F040
	public void SendMessage(string methodName); // 0x10079F048
	public void SendMessage(string methodName, SendMessageOptions options); // 0x10079F054
	public void BroadcastMessage(string methodName, object parameter, SendMessageOptions options); // 0x10079F064
	public void BroadcastMessage(string methodName, object parameter); // 0x10079F0F0
	public void BroadcastMessage(string methodName); // 0x10079F0F8
	public void BroadcastMessage(string methodName, SendMessageOptions options); // 0x10079F104
}

// Namespace: UnityEngine
public sealed class Light : Behaviour // TypeDefIndex: 2181
{
	// Methods
	public void set_intensity(float value); // 0x1007C15D4
}

// Namespace: UnityEngine
public sealed class GameObject : Object // TypeDefIndex: 2182
{
	// Methods
	public void .ctor(string name); // 0x1007A8258
	public void .ctor(); // 0x1007A834C
	public void .ctor(string name, Type[] components); // 0x1007A83C0
	public Component GetComponent(Type type); // 0x1007A8494
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue); // 0x1007A8508
	public T GetComponent(); // 0
	public Component GetComponentInChildren(Type type, bool includeInactive); // 0x1007A8584
	public T GetComponentInChildren(); // 0
	public T GetComponentInChildren(bool includeInactive); // 0
	public Component GetComponentInParent(Type type); // 0x1007A8600
	public T GetComponentInParent(); // 0
	public Component[] GetComponents(Type type); // 0x1007A8674
	public T[] GetComponents(); // 0
	public void GetComponents(List`1<T> results); // 0
	public Component[] GetComponentsInChildren(Type type, bool includeInactive); // 0x1007A8818
	public T[] GetComponentsInChildren(bool includeInactive); // 0
	public void GetComponentsInChildren(bool includeInactive, List`1<T> results); // 0
	public T[] GetComponentsInChildren(); // 0
	public Component[] GetComponentsInParent(Type type, bool includeInactive); // 0x1007A8914
	public void GetComponentsInParent(bool includeInactive, List`1<T> results); // 0
	public T[] GetComponentsInParent(bool includeInactive); // 0
	private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList); // 0x1007A876C
	public Transform get_transform(); // 0x1007A8A10
	public int get_layer(); // 0x1007A8A74
	public void set_layer(int value); // 0x1007A8AD8
	public bool get_active(); // 0x1007A8B4C
	public void SetActive(bool value); // 0x1007A8BB0
	public bool get_activeSelf(); // 0x1007A8C24
	public bool get_activeInHierarchy(); // 0x1007A8C88
	public string get_tag(); // 0x1007A8CEC
	public void set_tag(string value); // 0x1007A8D50
	public static GameObject FindGameObjectWithTag(string tag); // 0x1007A8DC4
	public static GameObject[] FindGameObjectsWithTag(string tag); // 0x1007A8E28
	public void SendMessage(string methodName, object value, SendMessageOptions options); // 0x1007A8E8C
	public void SendMessage(string methodName, object value); // 0x1007A8F18
	public void SendMessage(string methodName); // 0x1007A8F20
	private Component Internal_AddComponentWithType(Type componentType); // 0x1007A8F2C
	public Component AddComponent(Type componentType); // 0x1007A8490
	public T AddComponent(); // 0
	private static void Internal_CreateGameObject(GameObject mono, string name); // 0x1007A82D8
	public static GameObject Find(string name); // 0x1007A8FA0
	public GameObject get_gameObject(); // 0x1007A9004
}

// Namespace: UnityEngine
public class Transform : Component, IEnumerable // TypeDefIndex: 2183
{
	// Methods
	public Vector3 get_position(); // 0x1007E7A9C
	public void set_position(Vector3 value); // 0x1007E7B40
	private void INTERNAL_get_position(out Vector3 value); // 0x1007E7ACC
	private void INTERNAL_set_position(Vector3 value); // 0x1007E7B68
	public Vector3 get_localPosition(); // 0x1007E7BDC
	public void set_localPosition(Vector3 value); // 0x1007E7C80
	private void INTERNAL_get_localPosition(out Vector3 value); // 0x1007E7C0C
	private void INTERNAL_set_localPosition(Vector3 value); // 0x1007E7CA8
	public Vector3 get_eulerAngles(); // 0x1007E7D1C
	public void set_eulerAngles(Vector3 value); // 0x1007E7D80
	public void set_localEulerAngles(Vector3 value); // 0x1007E7DEC
	public Vector3 get_right(); // 0x1007E7E58
	public Vector3 get_up(); // 0x1007E7EAC
	public Vector3 get_forward(); // 0x1007E7F00
	public Quaternion get_rotation(); // 0x1007E7D54
	public void set_rotation(Quaternion value); // 0x1007E7DC4
	private void INTERNAL_get_rotation(out Quaternion value); // 0x1007E7F54
	private void INTERNAL_set_rotation(Quaternion value); // 0x1007E7FC8
	public Quaternion get_localRotation(); // 0x1007E803C
	public void set_localRotation(Quaternion value); // 0x1007E7E30
	private void INTERNAL_get_localRotation(out Quaternion value); // 0x1007E8068
	private void INTERNAL_set_localRotation(Quaternion value); // 0x1007E80DC
	public Vector3 get_localScale(); // 0x1007E8150
	public void set_localScale(Vector3 value); // 0x1007E81F4
	private void INTERNAL_get_localScale(out Vector3 value); // 0x1007E8180
	private void INTERNAL_set_localScale(Vector3 value); // 0x1007E821C
	public Transform get_parent(); // 0x1007E8290
	public void set_parent(Transform value); // 0x1007E82F8
	internal Transform get_parentInternal(); // 0x1007E8294
	internal void set_parentInternal(Transform value); // 0x1007E83A4
	public void SetParent(Transform parent); // 0x1007E8418
	public void SetParent(Transform parent, bool worldPositionStays); // 0x1007E8420
	public Matrix4x4 get_worldToLocalMatrix(); // 0x1007E849C
	private void INTERNAL_get_worldToLocalMatrix(out Matrix4x4 value); // 0x1007E84E8
	public Matrix4x4 get_localToWorldMatrix(); // 0x1007E855C
	private void INTERNAL_get_localToWorldMatrix(out Matrix4x4 value); // 0x1007E85A8
	public void Rotate(Vector3 eulerAngles); // 0x1007E861C
	public void Rotate(Vector3 eulerAngles, Space relativeTo); // 0x1007E8624
	public void Rotate(float xAngle, float yAngle, float zAngle); // 0x1007E87B8
	public void Rotate(float xAngle, float yAngle, float zAngle, Space relativeTo); // 0x1007E87C0
	public void LookAt(Vector3 worldPosition); // 0x1007E87D0
	private static void INTERNAL_CALL_LookAt(Transform self, Vector3 worldPosition, Vector3 worldUp); // 0x1007E8810
	public Vector3 TransformPoint(Vector3 position); // 0x1007E888C
	private static void INTERNAL_CALL_TransformPoint(Transform self, Vector3 position, out Vector3 value); // 0x1007E88CC
	public Vector3 InverseTransformPoint(Vector3 position); // 0x1007E8948
	private static void INTERNAL_CALL_InverseTransformPoint(Transform self, Vector3 position, out Vector3 value); // 0x1007E8988
	public Transform get_root(); // 0x1007E8A04
	public int get_childCount(); // 0x1007E8A68
	public void SetAsFirstSibling(); // 0x1007E8ACC
	public Transform Find(string name); // 0x1007E8B30
	public bool IsChildOf(Transform parent); // 0x1007E8BA4
	public IEnumerator GetEnumerator(); // 0x1007E8C18
	public Transform GetChild(int index); // 0x1007E8CB8
}

// Namespace: 
private sealed class Enumerator : IEnumerator // TypeDefIndex: 2184
{
	// Fields
	private Transform outer; // 0x10
	private int currentIndex; // 0x18

	// Methods
	internal void .ctor(Transform outer); // 0x1007E8C84
	public object get_Current(); // 0x1007E8D2C
	public bool MoveNext(); // 0x1007E8D4C
	public void Reset(); // 0x1007E8D8C
}

// Namespace: UnityEngine
public sealed class Time // TypeDefIndex: 2185
{
	// Methods
	public static float get_time(); // 0x1007E6B5C
	public static float get_deltaTime(); // 0x1007E6BB4
	public static float get_unscaledTime(); // 0x1007E6C0C
	public static float get_unscaledDeltaTime(); // 0x1007E6C64
	public static float get_maximumDeltaTime(); // 0x1007E6CBC
	public static float get_timeScale(); // 0x1007E6D14
	public static void set_timeScale(float value); // 0x1007E6D6C
	public static int get_frameCount(); // 0x1007E6DD4
	public static float get_realtimeSinceStartup(); // 0x1007E6E2C
}

// Namespace: UnityEngine
public sealed class Random // TypeDefIndex: 2186
{
	// Methods
	public static float Range(float min, float max); // 0x1007CFB88
	public static int Range(int min, int max); // 0x1007CA148
	private static int RandomRangeInt(int min, int max); // 0x1007CFBF8
	public static float get_value(); // 0x1007CFC6C
}

// Namespace: UnityEngine
public class YieldInstruction // TypeDefIndex: 2187
{
	// Methods
	public void .ctor(); // 0x1007EB340
}

// Namespace: UnityEngine
public sealed class PlayerPrefsException : Exception // TypeDefIndex: 2188
{
	// Methods
	public void .ctor(string error); // 0x1007CE8F8
}

// Namespace: UnityEngine
public sealed class PlayerPrefs // TypeDefIndex: 2189
{
	// Methods
	private static bool TrySetInt(string key, int value); // 0x1007CE714
	private static bool TrySetFloat(string key, float value); // 0x1007CE788
	private static bool TrySetSetString(string key, string value); // 0x1007CE7FC
	public static void SetInt(string key, int value); // 0x1007CE870
	public static int GetInt(string key, int defaultValue); // 0x1007CE900
	public static int GetInt(string key); // 0x1007CE974
	public static void SetFloat(string key, float value); // 0x1007CE97C
	public static float GetFloat(string key, float defaultValue); // 0x1007CEA04
	public static float GetFloat(string key); // 0x1007CEA78
	public static void SetString(string key, string value); // 0x1007CEA80
	public static string GetString(string key, string defaultValue); // 0x1007CEB08
	public static string GetString(string key); // 0x1007CEB7C
	public static bool HasKey(string key); // 0x1007CEBEC
	public static void DeleteKey(string key); // 0x1007CEC50
	public static void DeleteAll(); // 0x1007CECB4
	public static void Save(); // 0x1007CED0C
}

// Namespace: UnityEngine
public class AndroidJavaObject : IDisposable // TypeDefIndex: 2190
{
	// Fields
	private static bool enableDebugPrints; // 0x0
	private bool m_disposed; // 0x10
	protected IntPtr m_jobject; // 0x18
	protected IntPtr m_jclass; // 0x20
	private static AndroidJavaClass s_JavaLangClass; // 0x8

	// Methods
	public void .ctor(string className, object[] args); // 0x100790D8C
	internal void .ctor(IntPtr jobject); // 0x10078F430
	internal void .ctor(); // 0x10079081C
	private static void .cctor(); // 0x1007910E8
	public void Dispose(); // 0x1007910EC
	public IntPtr GetRawObject(); // 0x10078CDC0
	public IntPtr GetRawClass(); // 0x10078CDB8
	public T Call(string methodName, object[] args); // 0
	public T CallStatic(string methodName, object[] args); // 0
	protected void DebugPrint(string msg); // 0x100790B2C
	private void _AndroidJavaObject(string className, object[] args); // 0x100790DCC
	protected override void Finalize(); // 0x10079131C
	protected virtual void Dispose(bool disposing); // 0x1007913BC
	protected void _Dispose(); // 0x1007910F0
	protected T _Call(string methodName, object[] args); // 0
	protected T _CallStatic(string methodName, object[] args); // 0
	internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject); // 0x100791478
	internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass); // 0x100791518
	protected IntPtr _GetRawObject(); // 0x100791148
	protected IntPtr _GetRawClass(); // 0x100791150
	protected static AndroidJavaObject FindClass(string name); // 0x100790BCC
	protected static AndroidJavaClass get_JavaLangClass(); // 0x1007915B8
}

// Namespace: UnityEngine
public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 2191
{
	// Methods
	public void .ctor(string className); // 0x10079079C
	internal void .ctor(IntPtr jclass); // 0x100790A04
	private void _AndroidJavaClass(string className); // 0x100790824
}

// Namespace: UnityEngine
public struct jvalue // TypeDefIndex: 2192
{
	// Fields
	public bool z; // 0x10
	public byte b; // 0x10
	public char c; // 0x10
	public short s; // 0x10
	public int i; // 0x10
	public long j; // 0x10
	public float f; // 0x10
	public double d; // 0x10
	public IntPtr l; // 0x10

}

// Namespace: UnityEngine
public sealed class AndroidJNIHelper // TypeDefIndex: 2193
{
	// Methods
	public static void set_debug(bool value); // 0x1007933C4
	public static IntPtr GetConstructorID(IntPtr javaClass, string signature); // 0x10078DFBC
	public static IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature, bool isStatic); // 0x100793428
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x10078D820
	public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy); // 0x10078C604
	private static void INTERNAL_CALL_CreateJavaProxy(AndroidJavaProxy proxy, out IntPtr value); // 0x10079342C
	public static jvalue[] CreateJNIArgArray(object[] args); // 0x100791280
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x100791318
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x100791284
	public static T ConvertFromJNIArray(IntPtr array); // 0
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0
}

// Namespace: UnityEngine
public sealed class AndroidJNI // TypeDefIndex: 2194
{
	// Methods
	public static IntPtr FindClass(string name); // 0x10079185C
	private static void INTERNAL_CALL_FindClass(string name, out IntPtr value); // 0x100791884
	public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x1007918F8
	private static void INTERNAL_CALL_FromReflectedMethod(IntPtr refMethod, out IntPtr value); // 0x100791920
	public static IntPtr ExceptionOccurred(); // 0x100791994
	private static void INTERNAL_CALL_ExceptionOccurred(out IntPtr value); // 0x1007919BC
	public static void ExceptionClear(); // 0x100791A20
	public static IntPtr NewGlobalRef(IntPtr obj); // 0x100790B04
	private static void INTERNAL_CALL_NewGlobalRef(IntPtr obj, out IntPtr value); // 0x100791A78
	public static void DeleteGlobalRef(IntPtr obj); // 0x100791AEC
	public static void DeleteLocalRef(IntPtr obj); // 0x100791B50
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100791BB4
	private static void INTERNAL_CALL_NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args, out IntPtr value); // 0x100791BDC
	public static IntPtr GetObjectClass(IntPtr obj); // 0x100791C68
	private static void INTERNAL_CALL_GetObjectClass(IntPtr obj, out IntPtr value); // 0x100791C90
	public static IntPtr GetMethodID(IntPtr clazz, string name, string sig); // 0x100791D04
	private static void INTERNAL_CALL_GetMethodID(IntPtr clazz, string name, string sig, out IntPtr value); // 0x100791D2C
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x100791DB8
	private static void INTERNAL_CALL_GetStaticMethodID(IntPtr clazz, string name, string sig, out IntPtr value); // 0x100791DE0
	public static IntPtr NewStringUTF(string bytes); // 0x100791E6C
	private static void INTERNAL_CALL_NewStringUTF(string bytes, out IntPtr value); // 0x100791E94
	public static string GetStringUTFChars(IntPtr str); // 0x100791F08
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100791F6C
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100791FE8
	private static void INTERNAL_CALL_CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args, out IntPtr value); // 0x100792010
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x10079209C
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792118
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792194
	public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792210
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x10079228C
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792308
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792384
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100792400
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x10079247C
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007924F8
	private static void INTERNAL_CALL_CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args, out IntPtr value); // 0x100792520
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007925AC
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100792628
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007926A4
	public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100792720
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x10079279C
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100792818
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100792894
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100792910
	public static IntPtr ToBooleanArray(bool[] array); // 0x10079298C
	private static void INTERNAL_CALL_ToBooleanArray(bool[] array, out IntPtr value); // 0x1007929B4
	public static IntPtr ToByteArray(byte[] array); // 0x100792A28
	private static void INTERNAL_CALL_ToByteArray(byte[] array, out IntPtr value); // 0x100792A50
	public static IntPtr ToCharArray(char[] array); // 0x100792AC4
	private static void INTERNAL_CALL_ToCharArray(char[] array, out IntPtr value); // 0x100792AEC
	public static IntPtr ToShortArray(short[] array); // 0x100792B60
	private static void INTERNAL_CALL_ToShortArray(short[] array, out IntPtr value); // 0x100792B88
	public static IntPtr ToIntArray(int[] array); // 0x100792BFC
	private static void INTERNAL_CALL_ToIntArray(int[] array, out IntPtr value); // 0x100792C24
	public static IntPtr ToLongArray(long[] array); // 0x100792C98
	private static void INTERNAL_CALL_ToLongArray(long[] array, out IntPtr value); // 0x100792CC0
	public static IntPtr ToFloatArray(float[] array); // 0x100792D34
	private static void INTERNAL_CALL_ToFloatArray(float[] array, out IntPtr value); // 0x100792D5C
	public static IntPtr ToDoubleArray(double[] array); // 0x100792DD0
	private static void INTERNAL_CALL_ToDoubleArray(double[] array, out IntPtr value); // 0x100792DF8
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass); // 0x100792E6C
	private static void INTERNAL_CALL_ToObjectArray(IntPtr[] array, IntPtr arrayClass, out IntPtr value); // 0x100792E94
	public static bool[] FromBooleanArray(IntPtr array); // 0x100792F10
	public static byte[] FromByteArray(IntPtr array); // 0x100792F74
	public static char[] FromCharArray(IntPtr array); // 0x100792FD8
	public static short[] FromShortArray(IntPtr array); // 0x10079303C
	public static int[] FromIntArray(IntPtr array); // 0x1007930A0
	public static long[] FromLongArray(IntPtr array); // 0x100793104
	public static float[] FromFloatArray(IntPtr array); // 0x100793168
	public static double[] FromDoubleArray(IntPtr array); // 0x1007931CC
	public static int GetArrayLength(IntPtr array); // 0x100793230
	public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj); // 0x10078DD98
	private static void INTERNAL_CALL_NewObjectArray(int size, IntPtr clazz, IntPtr obj, out IntPtr value); // 0x100793294
	public static IntPtr GetObjectArrayElement(IntPtr array, int index); // 0x100793320
	private static void INTERNAL_CALL_GetObjectArrayElement(IntPtr array, int index, out IntPtr value); // 0x100793348
	public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj); // 0x10078DDC0
}

// Namespace: UnityEngine.iOS
public sealed class ADBannerView // TypeDefIndex: 2195
{
	// Fields
	private IntPtr _bannerView; // 0x10
	private static BannerWasClickedDelegate onBannerWasClicked; // 0x0
	private static BannerWasLoadedDelegate onBannerWasLoaded; // 0x8
	private static BannerFailedToLoadDelegate onBannerFailedToLoad; // 0x10

	// Methods
	private static void .cctor(); // 0x1007BF2D0
	private static void Native_DestroyBanner(IntPtr view); // 0x1007BF2D4
	protected override void Finalize(); // 0x1007BF338
	private static void FireBannerWasClicked(); // 0x1007BF3F0
	private static void FireBannerWasLoaded(); // 0x1007BF528
	private static void FireBannerFailedToLoad(); // 0x1007BF660
}

// Namespace: 
public sealed class BannerWasClickedDelegate : MulticastDelegate // TypeDefIndex: 2196
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007BF820
	public virtual void Invoke(); // 0x1007BF498
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007BF83C
	public virtual void EndInvoke(IAsyncResult result); // 0x1007BF89C
}

// Namespace: 
public sealed class BannerWasLoadedDelegate : MulticastDelegate // TypeDefIndex: 2197
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007BF8A8
	public virtual void Invoke(); // 0x1007BF5D0
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007BF8C4
	public virtual void EndInvoke(IAsyncResult result); // 0x1007BF924
}

// Namespace: 
public sealed class BannerFailedToLoadDelegate : MulticastDelegate // TypeDefIndex: 2198
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007BF798
	public virtual void Invoke(); // 0x1007BF708
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007BF7B4
	public virtual void EndInvoke(IAsyncResult result); // 0x1007BF814
}

// Namespace: UnityEngine.iOS
public sealed class ADInterstitialAd // TypeDefIndex: 2199
{
	// Fields
	private IntPtr interstitialView; // 0x10
	private static InterstitialWasLoadedDelegate onInterstitialWasLoaded; // 0x0
	private static InterstitialWasViewedDelegate onInterstitialWasViewed; // 0x8

	// Methods
	private static void .cctor(); // 0x1007BF930
	private static void Native_DestroyInterstitial(IntPtr view); // 0x1007BF934
	protected override void Finalize(); // 0x1007BF998
	private static void FireInterstitialWasLoaded(); // 0x1007BFA50
	private static void FireInterstitialWasViewed(); // 0x1007BFB88
}

// Namespace: 
public sealed class InterstitialWasLoadedDelegate : MulticastDelegate // TypeDefIndex: 2200
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007BFCC0
	public virtual void Invoke(); // 0x1007BFAF8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007BFCDC
	public virtual void EndInvoke(IAsyncResult result); // 0x1007BFD3C
}

// Namespace: 
public sealed class InterstitialWasViewedDelegate : MulticastDelegate // TypeDefIndex: 2201
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007BFD48
	public virtual void Invoke(); // 0x1007BFC30
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007BFD64
	public virtual void EndInvoke(IAsyncResult result); // 0x1007BFDC4
}

// Namespace: UnityEngine.iOS
public sealed class Device // TypeDefIndex: 2202
{
	// Methods
	public static string get_vendorIdentifier(); // 0x1007BFDD0
	public static string get_advertisingIdentifier(); // 0x1007BFE28
	private static string GetAdvertisingIdentifier(); // 0x1007BFE64
	public static bool get_advertisingTrackingEnabled(); // 0x1007BFEBC
}

// Namespace: UnityEngine.iOS
public sealed class CalendarIdentifier : Enum // TypeDefIndex: 2203
{
	// Fields
	public int value__; // 0x10
	public const CalendarIdentifier GregorianCalendar = 0; // 0x0
	public const CalendarIdentifier BuddhistCalendar = 1; // 0x0
	public const CalendarIdentifier ChineseCalendar = 2; // 0x0
	public const CalendarIdentifier HebrewCalendar = 3; // 0x0
	public const CalendarIdentifier IslamicCalendar = 4; // 0x0
	public const CalendarIdentifier IslamicCivilCalendar = 5; // 0x0
	public const CalendarIdentifier JapaneseCalendar = 6; // 0x0
	public const CalendarIdentifier RepublicOfChinaCalendar = 7; // 0x0
	public const CalendarIdentifier PersianCalendar = 8; // 0x0
	public const CalendarIdentifier IndianCalendar = 9; // 0x0
	public const CalendarIdentifier ISO8601Calendar = 10; // 0x0

}

// Namespace: UnityEngine.iOS
public sealed class CalendarUnit : Enum // TypeDefIndex: 2204
{
	// Fields
	public int value__; // 0x10
	public const CalendarUnit Era = 2; // 0x0
	public const CalendarUnit Year = 4; // 0x0
	public const CalendarUnit Month = 8; // 0x0
	public const CalendarUnit Day = 16; // 0x0
	public const CalendarUnit Hour = 32; // 0x0
	public const CalendarUnit Minute = 64; // 0x0
	public const CalendarUnit Second = 128; // 0x0
	public const CalendarUnit Week = 256; // 0x0
	public const CalendarUnit Weekday = 512; // 0x0
	public const CalendarUnit WeekdayOrdinal = 1024; // 0x0
	public const CalendarUnit Quarter = 2048; // 0x0

}

// Namespace: UnityEngine.iOS
public sealed class LocalNotification // TypeDefIndex: 2205
{
	// Fields
	private IntPtr notificationWrapper; // 0x10
	private static long m_NSReferenceDateTicks; // 0x0

	// Methods
	public void .ctor(); // 0x1007BFF14
	private static void .cctor(); // 0x1007BFFA0
	private double GetFireDate(); // 0x1007C0030
	private void SetFireDate(double dt); // 0x1007C0094
	public DateTime get_fireDate(); // 0x1007C0108
	public void set_fireDate(DateTime value); // 0x1007C01B8
	public string get_timeZone(); // 0x1007C0274
	public void set_timeZone(string value); // 0x1007C02D8
	public CalendarUnit get_repeatInterval(); // 0x1007C034C
	public void set_repeatInterval(CalendarUnit value); // 0x1007C03B0
	public CalendarIdentifier get_repeatCalendar(); // 0x1007C0424
	public void set_repeatCalendar(CalendarIdentifier value); // 0x1007C0488
	public string get_alertBody(); // 0x1007C04FC
	public void set_alertBody(string value); // 0x1007C0560
	public string get_alertAction(); // 0x1007C05D4
	public void set_alertAction(string value); // 0x1007C0638
	public bool get_hasAction(); // 0x1007C06AC
	public void set_hasAction(bool value); // 0x1007C0710
	public string get_alertLaunchImage(); // 0x1007C0784
	public void set_alertLaunchImage(string value); // 0x1007C07E8
	public int get_applicationIconBadgeNumber(); // 0x1007C085C
	public void set_applicationIconBadgeNumber(int value); // 0x1007C08C0
	public string get_soundName(); // 0x1007C0934
	public void set_soundName(string value); // 0x1007C0998
	public static string get_defaultSoundName(); // 0x1007C0A0C
	public IDictionary get_userInfo(); // 0x1007C0A64
	public void set_userInfo(IDictionary value); // 0x1007C0AC8
	private void Destroy(); // 0x1007C0B3C
	protected override void Finalize(); // 0x1007C0BA0
	private void InitWrapper(); // 0x1007BFF3C
}

// Namespace: UnityEngine.iOS
public sealed class RemoteNotification // TypeDefIndex: 2206
{
	// Fields
	private IntPtr notificationWrapper; // 0x10

	// Methods
	private void .ctor(); // 0x1007C10F8
	public string get_alertBody(); // 0x1007C1100
	public bool get_hasAction(); // 0x1007C1164
	public int get_applicationIconBadgeNumber(); // 0x1007C11C8
	public string get_soundName(); // 0x1007C122C
	public IDictionary get_userInfo(); // 0x1007C1290
	private void Destroy(); // 0x1007C12F4
	protected override void Finalize(); // 0x1007C1358
}

// Namespace: UnityEngine.iOS
public sealed class NotificationType : Enum // TypeDefIndex: 2207
{
	// Fields
	public int value__; // 0x10
	public const NotificationType None = 0; // 0x0
	public const NotificationType Badge = 1; // 0x0
	public const NotificationType Sound = 2; // 0x0
	public const NotificationType Alert = 4; // 0x0

}

// Namespace: UnityEngine.iOS
public sealed class NotificationServices // TypeDefIndex: 2208
{
	// Methods
	public static int get_localNotificationCount(); // 0x1007C0C0C
	public static LocalNotification GetLocalNotification(int index); // 0x1007C0C64
	public static LocalNotification[] get_localNotifications(); // 0x1007C0CC8
	public static void ScheduleLocalNotification(LocalNotification notification); // 0x1007C0DB0
	public static void CancelAllLocalNotifications(); // 0x1007C0E14
	public static void ClearLocalNotifications(); // 0x1007C0E6C
	public static void RegisterForNotifications(NotificationType notificationTypes); // 0x1007C0EC4
	public static void RegisterForNotifications(NotificationType notificationTypes, bool registerForRemote); // 0x1007C0ECC
}

// Namespace: UnityEngine.iOS
public sealed class OnDemandResourcesRequest : AsyncOperation, IDisposable // TypeDefIndex: 2209
{
	// Methods
	public string get_error(); // 0x1007C0FA8
	public void Dispose(); // 0x1007C100C
	protected override void Finalize(); // 0x1007C1070
}

// Namespace: UnityEngine.iOS
public static class OnDemandResources // TypeDefIndex: 2210
{
	// Methods
	public static OnDemandResourcesRequest PreloadAsync(string[] tags); // 0x1007C0F40
	private static OnDemandResourcesRequest PreloadAsyncInternal(string[] tags); // 0x1007C0F44
}

// Namespace: UnityEngine.Experimental.Director
public class DirectorPlayer : Behaviour // TypeDefIndex: 2211
{
}

// Namespace: UnityEngine.Experimental.Director
public sealed class PlayState : Enum // TypeDefIndex: 2212
{
	// Fields
	public int value__; // 0x10
	public const PlayState Paused = 0; // 0x0
	public const PlayState Playing = 1; // 0x0

}

// Namespace: UnityEngine.Experimental.Director
public struct Playable // TypeDefIndex: 2213
{
	// Fields
	internal IntPtr m_Handle; // 0x10
	internal int m_Version; // 0x18

	// Methods
	public void Destroy(); // 0x1007A6F6C
	public bool IsValid(); // 0x1007A6F78
	private static bool IsValidInternal(Playable playable); // 0x1007A6F74
	private static bool INTERNAL_CALL_IsValidInternal(Playable playable); // 0x1007A6F80
	public T CastTo(); // 0
	public static bool Connect(Playable source, Playable target, int sourceOutputPort, int targetInputPort); // 0x1007A5688
	public static void Disconnect(Playable target, int inputPort); // 0x1007A58A0
	public int get_inputCount(); // 0x1007A6FF0
	public int get_outputCount(); // 0x1007A6FFC
	public PlayState get_state(); // 0x1007A7008
	public void set_state(PlayState value); // 0x1007A7014
	public double get_time(); // 0x1007A7028
	public void set_time(double value); // 0x1007A7034
	private static PlayState GetPlayStateInternal(Playable playable); // 0x1007A7004
	private static PlayState INTERNAL_CALL_GetPlayStateInternal(Playable playable); // 0x1007A703C
	private static void SetPlayStateInternal(Playable playable, PlayState playState); // 0x1007A7010
	private static void INTERNAL_CALL_SetPlayStateInternal(Playable playable, PlayState playState); // 0x1007A70A0
	private static double GetTimeInternal(Playable playable); // 0x1007A7024
	private static double INTERNAL_CALL_GetTimeInternal(Playable playable); // 0x1007A7114
	private static void SetTimeInternal(Playable playable, double time); // 0x1007A7030
	private static void INTERNAL_CALL_SetTimeInternal(Playable playable, double time); // 0x1007A7178
	public double get_duration(); // 0x1007A71F0
	public void set_duration(double value); // 0x1007A71FC
	private static double GetDurationInternal(Playable playable); // 0x1007A71EC
	private static double INTERNAL_CALL_GetDurationInternal(Playable playable); // 0x1007A7204
	private static void SetDurationInternal(Playable playable, double duration); // 0x1007A71F8
	private static void INTERNAL_CALL_SetDurationInternal(Playable playable, double duration); // 0x1007A7268
	private static int GetInputCountInternal(Playable playable); // 0x1007A6FEC
	private static int INTERNAL_CALL_GetInputCountInternal(Playable playable); // 0x1007A72DC
	private static int GetOutputCountInternal(Playable playable); // 0x1007A6FF8
	private static int INTERNAL_CALL_GetOutputCountInternal(Playable playable); // 0x1007A7340
	public Playable[] GetInputs(); // 0x1007A7494
	public Playable GetInput(int inputPort); // 0x1007A74C4
	private static Playable GetInputInternal(Playable playable, int index); // 0x1007A749C
	private static void INTERNAL_CALL_GetInputInternal(Playable playable, int index, out Playable value); // 0x1007A74F8
	public Playable GetOutput(int outputPort); // 0x1007A759C
	private static Playable GetOutputInternal(Playable playable, int index); // 0x1007A7574
	private static void INTERNAL_CALL_GetOutputInternal(Playable playable, int index, out Playable value); // 0x1007A75D0
	private static void SetInputWeightFromIndexInternal(Playable playable, int index, float weight); // 0x1007A764C
	private static void INTERNAL_CALL_SetInputWeightFromIndexInternal(Playable playable, int index, float weight); // 0x1007A7650
	public bool SetInputWeight(int inputIndex, float weight); // 0x1007A76D4
	public float GetInputWeight(int index); // 0x1007A7724
	private static float GetInputWeightInternal(Playable playable, int index); // 0x1007A7720
	private static float INTERNAL_CALL_GetInputWeightInternal(Playable playable, int index); // 0x1007A7734
	public override bool Equals(object p); // 0x1007A7824
	public override int GetHashCode(); // 0x1007A782C
	internal bool CheckInputBounds(int inputIndex); // 0x1007A7B20
	internal bool CheckInputBounds(int inputIndex, bool acceptAny); // 0x1007A7B40
}

// Namespace: UnityEngine.Experimental.Director
public struct GenericMixerPlayable // TypeDefIndex: 2214
{
	// Fields
	internal Playable handle; // 0x10

	// Methods
	internal Playable get_node(); // 0x1007A6DB8
	public static GenericMixerPlayable Create(); // 0x1007A6DC4
	internal static void InternalCreate(GenericMixerPlayable playable); // 0x1007A6E44
	public void Destroy(); // 0x1007A6EA8
	public T CastTo(); // 0
	public static Playable op_Implicit(GenericMixerPlayable s); // 0x1007A6EB0
}

// Namespace: UnityEngine.Experimental.Director
internal sealed class Playables // TypeDefIndex: 2215
{
	// Methods
	internal static object CastToInternal(Type castType, IntPtr handle, int version); // 0x1007A7B5C
	internal static void InternalDestroy(Playable playable); // 0x1007A6F68
	private static void INTERNAL_CALL_InternalDestroy(Playable playable); // 0x1007A7BD8
	internal static bool ConnectInternal(Playable source, Playable target, int sourceOutputPort, int targetInputPort); // 0x1007A6FE4
	private static bool INTERNAL_CALL_ConnectInternal(Playable source, Playable target, int sourceOutputPort, int targetInputPort); // 0x1007A7C3C
	internal static void DisconnectInternal(Playable target, int inputPort); // 0x1007A6FE8
	private static void INTERNAL_CALL_DisconnectInternal(Playable target, int inputPort); // 0x1007A7CC8
	internal static bool CheckInputBounds(Playable playable, int inputIndex); // 0x1007A5DD0
	internal static bool IsValid(Playable playable); // 0x1007A5F6C
	internal static int GetInputCountValidated(Playable playable, Type typeofPlayable); // 0x1007A5FB8
	internal static int GetOutputCountValidated(Playable playable, Type typeofPlayable); // 0x1007A6698
	internal static PlayState GetPlayStateValidated(Playable playable, Type typeofPlayable); // 0x1007A6904
	internal static void SetPlayStateValidated(Playable playable, PlayState playState, Type typeofPlayable); // 0x1007A6984
	internal static double GetTimeValidated(Playable playable, Type typeofPlayable); // 0x1007A6A00
	internal static void SetTimeValidated(Playable playable, double time, Type typeofPlayable); // 0x1007A6A88
	internal static double GetDurationValidated(Playable playable, Type typeofPlayable); // 0x1007A6B00
	internal static void SetDurationValidated(Playable playable, double duration, Type typeofPlayable); // 0x1007A6B88
	internal static Playable GetInputValidated(Playable playable, int inputPort, Type typeofPlayable); // 0x1007A5FE4
	internal static Playable GetOutputValidated(Playable playable, int outputPort, Type typeofPlayable); // 0x1007A6724
	internal static void SetInputWeightValidated(Playable playable, int inputIndex, float weight, Type typeofPlayable); // 0x1007A685C
	internal static float GetInputWeightValidated(Playable playable, int index, Type typeofPlayable); // 0x1007A67B8
	internal static bool Equals(Playable isAPlayable, object mightBeAnythingOrNull); // 0x1007A5EA0
}

// Namespace: UnityEngine.Experimental.Director
public class ScriptPlayable // TypeDefIndex: 2216
{
	// Methods
	public void .ctor(); // 0x1007A649C
}

// Namespace: UnityEngine.SceneManagement
public sealed class LoadSceneMode : Enum // TypeDefIndex: 2217
{
	// Fields
	public int value__; // 0x10
	public const LoadSceneMode Single = 0; // 0x0
	public const LoadSceneMode Additive = 1; // 0x0

}

// Namespace: UnityEngine.SceneManagement
public class SceneManager // TypeDefIndex: 2218
{
	// Fields
	private static UnityAction`2<Scene, LoadSceneMode> sceneLoaded; // 0x0
	private static UnityAction`1<Scene> sceneUnloaded; // 0x8
	private static UnityAction`2<Scene, Scene> activeSceneChanged; // 0x10

	// Methods
	public static void LoadScene(string sceneName); // 0x1007D52B4
	public static void LoadScene(string sceneName, LoadSceneMode mode); // 0x1007D52C4
	public static AsyncOperation LoadSceneAsync(string sceneName); // 0x1007D5364
	public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneMode mode); // 0x1007D5374
	private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, bool isAdditive, bool mustCompleteNextFrame); // 0x1007D52D8
	private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode); // 0x1007D5388
	private static void Internal_SceneUnloaded(Scene scene); // 0x1007D5410
	private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene); // 0x1007D5484
}

// Namespace: UnityEngine.SceneManagement
public struct Scene // TypeDefIndex: 2219
{
	// Fields
	private int m_Handle; // 0x10

	// Methods
	internal int get_handle(); // 0x1007D51F8
	public override int GetHashCode(); // 0x1007D5200
	public override bool Equals(object other); // 0x1007D5290
}

// Namespace: UnityEngine
public sealed class ParticleSystem : Component // TypeDefIndex: 2220
{
	// Fields
	private static IteratorDelegate <>f__am$cache0; // 0x0
	private static IteratorDelegate <>f__am$cache1; // 0x8
	private static IteratorDelegate <>f__am$cache2; // 0x10
	private static IteratorDelegate <>f__am$cache3; // 0x18
	private static IteratorDelegate <>f__am$cache4; // 0x20

	// Methods
	public float get_duration(); // 0x1007CD7A8
	public void Emit(int count); // 0x1007CD80C
	private static void INTERNAL_CALL_Emit(ParticleSystem self, int count); // 0x1007CD81C
}

// Namespace: 
internal sealed class IteratorDelegate : MulticastDelegate // TypeDefIndex: 2221
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007CD890
	public virtual bool Invoke(ParticleSystem ps); // 0x1007CD8A0
	public virtual IAsyncResult BeginInvoke(ParticleSystem ps, AsyncCallback callback, object object); // 0x1007CD93C
	public virtual bool EndInvoke(IAsyncResult result); // 0x1007CD98C
}

// Namespace: UnityEngine
public sealed class ForceMode : Enum // TypeDefIndex: 2222
{
	// Fields
	public int value__; // 0x10
	public const ForceMode Force = 0; // 0x0
	public const ForceMode Acceleration = 5; // 0x0
	public const ForceMode Impulse = 1; // 0x0
	public const ForceMode VelocityChange = 2; // 0x0

}

// Namespace: UnityEngine
public class ControllerColliderHit // TypeDefIndex: 2223
{
	// Fields
	internal CharacterController m_Controller; // 0x10
	internal Collider m_Collider; // 0x18
	internal Vector3 m_Point; // 0x20
	internal Vector3 m_Normal; // 0x2C
	internal Vector3 m_MoveDirection; // 0x38
	internal float m_MoveLength; // 0x44
	internal int m_Push; // 0x48

	// Methods
	public void .ctor(); // 0x10079F6D4
	public CharacterController get_controller(); // 0x10079F6DC
	public Collider get_collider(); // 0x10079F6E4
	public Rigidbody get_rigidbody(); // 0x10079F6EC
	public GameObject get_gameObject(); // 0x10079F704
	public Transform get_transform(); // 0x10079F71C
	public Vector3 get_point(); // 0x10079F734
	public Vector3 get_normal(); // 0x10079F740
	public Vector3 get_moveDirection(); // 0x10079F74C
	public float get_moveLength(); // 0x10079F758
	private bool get_push(); // 0x10079F760
	private void set_push(bool value); // 0x10079F770
}

// Namespace: UnityEngine
public class Collision // TypeDefIndex: 2224
{
	// Fields
	internal Vector3 m_Impulse; // 0x10
	internal Vector3 m_RelativeVelocity; // 0x1C
	internal Rigidbody m_Rigidbody; // 0x28
	internal Collider m_Collider; // 0x30
	internal ContactPoint[] m_Contacts; // 0x38

	// Methods
	public void .ctor(); // 0x10079DD20
	public Vector3 get_relativeVelocity(); // 0x10079DD28
	public Rigidbody get_rigidbody(); // 0x10079DD34
	public Collider get_collider(); // 0x10079DD3C
	public Transform get_transform(); // 0x10079DD44
	public GameObject get_gameObject(); // 0x10079DE3C
	public ContactPoint[] get_contacts(); // 0x10079DF34
	public virtual IEnumerator GetEnumerator(); // 0x10079DF3C
	public Vector3 get_impulse(); // 0x10079DF58
	public Vector3 get_impactForceSum(); // 0x10079DF64
	public Vector3 get_frictionForceSum(); // 0x10079DF70
	public Component get_other(); // 0x10079DF7C
}

// Namespace: UnityEngine
public sealed class QueryTriggerInteraction : Enum // TypeDefIndex: 2225
{
	// Fields
	public int value__; // 0x10
	public const QueryTriggerInteraction UseGlobal = 0; // 0x0
	public const QueryTriggerInteraction Ignore = 1; // 0x0
	public const QueryTriggerInteraction Collide = 2; // 0x0

}

// Namespace: UnityEngine
public class Physics // TypeDefIndex: 2226
{
	// Methods
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CD9B8
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDA48
	public static bool Raycast(Ray ray, float maxDistance); // 0x1007CDAE8
	public static bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDB34
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask); // 0x1007CDBA0
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x1007CDC54
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDBF8
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask); // 0x1007CDCA8
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDCF8
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDD4C
	private static RaycastHit[] INTERNAL_CALL_RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDD94
	public static void IgnoreCollision(Collider collider1, Collider collider2, bool ignore); // 0x1007CDE30
	public static void IgnoreCollision(Collider collider1, Collider collider2); // 0x1007CDEAC
	private static bool Internal_Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDA98
	private static bool INTERNAL_CALL_Internal_Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDEB4
	private static bool Internal_RaycastTest(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDA00
	private static bool INTERNAL_CALL_Internal_RaycastTest(Vector3 origin, Vector3 direction, float maxDistance, int layermask, QueryTriggerInteraction queryTriggerInteraction); // 0x1007CDF58
}

// Namespace: UnityEngine
public struct ContactPoint // TypeDefIndex: 2227
{
	// Fields
	internal Vector3 m_Point; // 0x10
	internal Vector3 m_Normal; // 0x1C
	internal int m_ThisColliderInstanceID; // 0x28
	internal int m_OtherColliderInstanceID; // 0x2C
	internal float m_Separation; // 0x30

}

// Namespace: UnityEngine
public sealed class Rigidbody : Component // TypeDefIndex: 2228
{
	// Methods
	public void set_useGravity(bool value); // 0x1007D4CE8
	public void set_isKinematic(bool value); // 0x1007D4D5C
	public void AddForce(Vector3 force, ForceMode mode); // 0x1007D4DD0
	public void AddForce(Vector3 force); // 0x1007D4E80
	private static void INTERNAL_CALL_AddForce(Rigidbody self, Vector3 force, ForceMode mode); // 0x1007D4E04
	public void AddRelativeForce(Vector3 force, ForceMode mode); // 0x1007D4EB0
	private static void INTERNAL_CALL_AddRelativeForce(Rigidbody self, Vector3 force, ForceMode mode); // 0x1007D4EE4
	public void AddTorque(Vector3 torque, ForceMode mode); // 0x1007D4F60
	public void AddTorque(Vector3 torque); // 0x1007D5010
	private static void INTERNAL_CALL_AddTorque(Rigidbody self, Vector3 torque, ForceMode mode); // 0x1007D4F94
	public void AddTorque(float x, float y, float z); // 0x1007D5040
	public void AddTorque(float x, float y, float z, ForceMode mode); // 0x1007D5048
	public void AddRelativeTorque(Vector3 torque, ForceMode mode); // 0x1007D50A4
	private static void INTERNAL_CALL_AddRelativeTorque(Rigidbody self, Vector3 torque, ForceMode mode); // 0x1007D50D8
	public void set_centerOfMass(Vector3 value); // 0x1007D5154
	private void INTERNAL_set_centerOfMass(Vector3 value); // 0x1007D517C
}

// Namespace: UnityEngine
public class Collider : Component // TypeDefIndex: 2229
{
	// Methods
	public bool get_enabled(); // 0x10079D87C
	public void set_enabled(bool value); // 0x10079D8E0
	public Rigidbody get_attachedRigidbody(); // 0x10079D954
	public void set_sharedMaterial(PhysicMaterial value); // 0x10079D9B8
	public Bounds get_bounds(); // 0x10079DA2C
	private void INTERNAL_get_bounds(out Bounds value); // 0x10079DA70
	private static bool Internal_Raycast(Collider col, Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x10079DAE4
	private static bool INTERNAL_CALL_Internal_Raycast(Collider col, Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x10079DAE8
	public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance); // 0x10079DB74
}

// Namespace: UnityEngine
public sealed class BoxCollider : Collider // TypeDefIndex: 2230
{
	// Methods
	public Vector3 get_center(); // 0x10079A5AC
	public void set_center(Vector3 value); // 0x10079A650
	private void INTERNAL_get_center(out Vector3 value); // 0x10079A5DC
	private void INTERNAL_set_center(Vector3 value); // 0x10079A678
	public Vector3 get_size(); // 0x10079A6EC
	public void set_size(Vector3 value); // 0x10079A790
	private void INTERNAL_get_size(out Vector3 value); // 0x10079A71C
	private void INTERNAL_set_size(Vector3 value); // 0x10079A7B8
}

// Namespace: UnityEngine
public sealed class SphereCollider : Collider // TypeDefIndex: 2231
{
}

// Namespace: UnityEngine
public sealed class MeshCollider : Collider // TypeDefIndex: 2232
{
	// Methods
	public Mesh get_sharedMesh(); // 0x1007C6030
	public void set_sharedMesh(Mesh value); // 0x1007C6094
	public void set_convex(bool value); // 0x1007C6108
	public void set_smoothSphereCollisions(bool value); // 0x1007C617C
}

// Namespace: UnityEngine
public struct RaycastHit // TypeDefIndex: 2233
{
	// Fields
	private Vector3 m_Point; // 0x10
	private Vector3 m_Normal; // 0x1C
	private int m_FaceID; // 0x28
	private float m_Distance; // 0x2C
	private Vector2 m_UV; // 0x30
	private Collider m_Collider; // 0x38

	// Methods
	public Vector3 get_point(); // 0x1007D0018
	public Vector3 get_normal(); // 0x1007D0030
	public float get_distance(); // 0x1007D0044
	public Collider get_collider(); // 0x1007D0054
	public Rigidbody get_rigidbody(); // 0x1007D00F0
	public Transform get_transform(); // 0x1007D01D8
}

// Namespace: UnityEngine
public sealed class PhysicMaterial : Object // TypeDefIndex: 2234
{
}

// Namespace: UnityEngine
public sealed class CharacterController : Collider // TypeDefIndex: 2235
{
}

// Namespace: UnityEngine
public class Physics2D // TypeDefIndex: 2236
{
	// Fields
	private static List`1<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x0

	// Methods
	private static void .cctor(); // 0x1007CDFF4
	private static void Internal_Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, out RaycastHit2D raycastHit); // 0x1007CE068
	private static void INTERNAL_CALL_Internal_Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth, out RaycastHit2D raycastHit); // 0x1007CE120
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask); // 0x1007CE1D4
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth); // 0x1007CE298
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask); // 0x1007CE390
	private static RaycastHit2D[] INTERNAL_CALL_GetRayIntersectionAll(Ray ray, float distance, int layerMask); // 0x1007CE414
}

// Namespace: UnityEngine
public struct RaycastHit2D // TypeDefIndex: 2237
{
	// Fields
	private Vector2 m_Centroid; // 0x10
	private Vector2 m_Point; // 0x18
	private Vector2 m_Normal; // 0x20
	private float m_Distance; // 0x28
	private float m_Fraction; // 0x2C
	private Collider2D m_Collider; // 0x30

	// Methods
	public Vector2 get_point(); // 0x1007D021C
	public Vector2 get_normal(); // 0x1007D022C
	public float get_fraction(); // 0x1007D023C
	public Collider2D get_collider(); // 0x1007D024C
	public Rigidbody2D get_rigidbody(); // 0x1007D02E8
	public Transform get_transform(); // 0x1007D03D0
}

// Namespace: UnityEngine
public sealed class Rigidbody2D : Component // TypeDefIndex: 2238
{
}

// Namespace: UnityEngine
public class Collider2D : Behaviour // TypeDefIndex: 2239
{
	// Methods
	public void set_offset(Vector2 value); // 0x10079DBB0
	private void INTERNAL_set_offset(Vector2 value); // 0x10079DBD4
	public Rigidbody2D get_attachedRigidbody(); // 0x10079DC48
	public void set_sharedMaterial(PhysicsMaterial2D value); // 0x10079DCAC
}

// Namespace: UnityEngine
public sealed class BoxCollider2D : Collider2D // TypeDefIndex: 2240
{
	// Methods
	public void set_size(Vector2 value); // 0x10079A82C
	private void INTERNAL_set_size(Vector2 value); // 0x10079A850
}

// Namespace: UnityEngine
public sealed class EdgeCollider2D : Collider2D // TypeDefIndex: 2241
{
	// Methods
	public void set_points(Vector2[] value); // 0x1007A0ED8
}

// Namespace: UnityEngine
public sealed class PolygonCollider2D : Collider2D // TypeDefIndex: 2242
{
	// Methods
	public void set_points(Vector2[] value); // 0x1007CED64
}

// Namespace: UnityEngine
public struct ContactPoint2D // TypeDefIndex: 2243
{
	// Fields
	internal Vector2 m_Point; // 0x10
	internal Vector2 m_Normal; // 0x18
	internal Collider2D m_Collider; // 0x20
	internal Collider2D m_OtherCollider; // 0x28

}

// Namespace: UnityEngine
public class Collision2D // TypeDefIndex: 2244
{
	// Fields
	internal Rigidbody2D m_Rigidbody; // 0x10
	internal Collider2D m_Collider; // 0x18
	internal ContactPoint2D[] m_Contacts; // 0x20
	internal Vector2 m_RelativeVelocity; // 0x28
	internal bool m_Enabled; // 0x30

	// Methods
	public void .ctor(); // 0x10079E044
	public bool get_enabled(); // 0x10079E04C
	public Rigidbody2D get_rigidbody(); // 0x10079E054
	public Collider2D get_collider(); // 0x10079E05C
	public Transform get_transform(); // 0x10079E064
	public GameObject get_gameObject(); // 0x10079E0F8
	public ContactPoint2D[] get_contacts(); // 0x10079E18C
	public Vector2 get_relativeVelocity(); // 0x10079E194
}

// Namespace: UnityEngine
public sealed class PhysicsMaterial2D : Object // TypeDefIndex: 2245
{
}

// Namespace: UnityEngine
public sealed class AudioSettings // TypeDefIndex: 2246
{
	// Fields
	private static AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x0

	// Methods
	internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged); // 0x100798A40
}

// Namespace: 
public sealed class AudioConfigurationChangeHandler : MulticastDelegate // TypeDefIndex: 2247
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100798B20
	public virtual void Invoke(bool deviceWasChanged); // 0x100798AAC
	public virtual IAsyncResult BeginInvoke(bool deviceWasChanged, AsyncCallback callback, object object); // 0x100798B40
	public virtual void EndInvoke(IAsyncResult result); // 0x100798BF8
}

// Namespace: UnityEngine
public sealed class AudioType : Enum // TypeDefIndex: 2248
{
	// Fields
	public int value__; // 0x10
	public const AudioType UNKNOWN = 0; // 0x0
	public const AudioType ACC = 1; // 0x0
	public const AudioType AIFF = 2; // 0x0
	public const AudioType IT = 10; // 0x0
	public const AudioType MOD = 12; // 0x0
	public const AudioType MPEG = 13; // 0x0
	public const AudioType OGGVORBIS = 14; // 0x0
	public const AudioType S3M = 17; // 0x0
	public const AudioType WAV = 20; // 0x0
	public const AudioType XM = 21; // 0x0
	public const AudioType XMA = 22; // 0x0
	public const AudioType VAG = 23; // 0x0
	public const AudioType AUDIOQUEUE = 24; // 0x0

}

// Namespace: UnityEngine
public sealed class AudioClip : Object // TypeDefIndex: 2249
{
	// Fields
	private PCMReaderCallback m_PCMReaderCallback; // 0x18
	private PCMSetPositionCallback m_PCMSetPositionCallback; // 0x20

	// Methods
	public void .ctor(); // 0x100798658
	public float get_length(); // 0x1007986C0
	private void InvokePCMReaderCallback_Internal(float[] data); // 0x100798724
	private void InvokePCMSetPositionCallback_Internal(int position); // 0x1007987D4
}

// Namespace: 
public sealed class PCMReaderCallback : MulticastDelegate // TypeDefIndex: 2250
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10079885C
	public virtual void Invoke(float[] data); // 0x100798738
	public virtual IAsyncResult BeginInvoke(float[] data, AsyncCallback callback, object object); // 0x1007988A8
	public virtual void EndInvoke(IAsyncResult result); // 0x1007988F8
}

// Namespace: 
public sealed class PCMSetPositionCallback : MulticastDelegate // TypeDefIndex: 2251
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100798904
	public virtual void Invoke(int position); // 0x1007987E8
	public virtual IAsyncResult BeginInvoke(int position, AsyncCallback callback, object object); // 0x100798924
	public virtual void EndInvoke(IAsyncResult result); // 0x1007989DC
}

// Namespace: UnityEngine
public sealed class AudioListener : Behaviour // TypeDefIndex: 2252
{
	// Methods
	public static float get_volume(); // 0x1007989E8
}

// Namespace: UnityEngine
public sealed class AudioRolloffMode : Enum // TypeDefIndex: 2253
{
	// Fields
	public int value__; // 0x10
	public const AudioRolloffMode Logarithmic = 0; // 0x0
	public const AudioRolloffMode Linear = 1; // 0x0
	public const AudioRolloffMode Custom = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class AudioSourceCurveType : Enum // TypeDefIndex: 2254
{
	// Fields
	public int value__; // 0x10
	public const AudioSourceCurveType CustomRolloff = 0; // 0x0
	public const AudioSourceCurveType SpatialBlend = 1; // 0x0
	public const AudioSourceCurveType ReverbZoneMix = 2; // 0x0
	public const AudioSourceCurveType Spread = 3; // 0x0

}

// Namespace: UnityEngine
public sealed class AudioSource : Behaviour // TypeDefIndex: 2255
{
	// Methods
	public void set_volume(float value); // 0x100798C04
	public void set_pitch(float value); // 0x100798C78
	public void set_clip(AudioClip value); // 0x100798CEC
	public void Play(ulong delay); // 0x100798D60
	public void Play(); // 0x100798DD4
	public void PlayDelayed(float delay); // 0x100798DDC
	public void Stop(); // 0x100798E50
	public void PlayOneShot(AudioClip clip, float volumeScale); // 0x100798EB4
	public void PlayOneShot(AudioClip clip); // 0x100798F38
	public static void PlayClipAtPoint(AudioClip clip, Vector3 position); // 0x100798F40
	public static void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume); // 0x100798F48
	public void set_loop(bool value); // 0x1007991E4
	public void set_playOnAwake(bool value); // 0x100799258
	public void set_spatialBlend(float value); // 0x100799170
	public void SetCustomCurve(AudioSourceCurveType type, AnimationCurve curve); // 0x1007992CC
	public void set_maxDistance(float value); // 0x100799348
	public void set_rolloffMode(AudioRolloffMode value); // 0x1007993BC
}

// Namespace: UnityEngine
internal sealed class AnimationEventSource : Enum // TypeDefIndex: 2256
{
	// Fields
	public int value__; // 0x10
	public const AnimationEventSource NoSource = 0; // 0x0
	public const AnimationEventSource Legacy = 1; // 0x0
	public const AnimationEventSource Animator = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class AnimationEvent // TypeDefIndex: 2257
{
	// Fields
	internal float m_Time; // 0x10
	internal string m_FunctionName; // 0x18
	internal string m_StringParameter; // 0x20
	internal Object m_ObjectReferenceParameter; // 0x28
	internal float m_FloatParameter; // 0x30
	internal int m_IntParameter; // 0x34
	internal int m_MessageOptions; // 0x38
	internal AnimationEventSource m_Source; // 0x3C
	internal AnimationState m_StateSender; // 0x40
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6C

	// Methods
	public void .ctor(); // 0x100794AA0
	public string get_data(); // 0x100794B28
	public void set_data(string value); // 0x100794B30
	public string get_stringParameter(); // 0x100794B38
	public void set_stringParameter(string value); // 0x100794B40
	public float get_floatParameter(); // 0x100794B48
	public void set_floatParameter(float value); // 0x100794B50
	public int get_intParameter(); // 0x100794B58
	public void set_intParameter(int value); // 0x100794B60
	public Object get_objectReferenceParameter(); // 0x100794B68
	public void set_objectReferenceParameter(Object value); // 0x100794B70
	public string get_functionName(); // 0x100794B78
	public void set_functionName(string value); // 0x100794B80
	public float get_time(); // 0x100794B88
	public void set_time(float value); // 0x100794B90
	public SendMessageOptions get_messageOptions(); // 0x100794B98
	public void set_messageOptions(SendMessageOptions value); // 0x100794BA0
	public bool get_isFiredByLegacy(); // 0x100794BA8
	public bool get_isFiredByAnimator(); // 0x100794BB8
	public AnimationState get_animationState(); // 0x100794BC8
	public AnimatorStateInfo get_animatorStateInfo(); // 0x100794D70
	public AnimatorClipInfo get_animatorClipInfo(); // 0x100794E10
	internal int GetHash(); // 0x100794E90
}

// Namespace: UnityEngine
public sealed class PlayMode : Enum // TypeDefIndex: 2258
{
	// Fields
	public int value__; // 0x10
	public const PlayMode StopSameLayer = 0; // 0x0
	public const PlayMode StopAll = 4; // 0x0

}

// Namespace: UnityEngine
public sealed class Animation : Behaviour, IEnumerable // TypeDefIndex: 2259
{
	// Methods
	public bool Play(string animation, PlayMode mode); // 0x10079430C
	public bool Play(string animation); // 0x100794388
	public IEnumerator GetEnumerator(); // 0x100794390
	internal AnimationState GetStateAtIndex(int index); // 0x100794430
	internal int GetStateCount(); // 0x1007944A4
}

// Namespace: 
private sealed class Enumerator : IEnumerator // TypeDefIndex: 2260
{
	// Fields
	private Animation m_Outer; // 0x10
	private int m_CurrentIndex; // 0x18

	// Methods
	internal void .ctor(Animation outer); // 0x1007943FC
	public object get_Current(); // 0x100794508
	public bool MoveNext(); // 0x100794528
	public void Reset(); // 0x100794568
}

// Namespace: UnityEngine
public sealed class AnimationState : TrackedReference // TypeDefIndex: 2261
{
}

// Namespace: UnityEngine
public struct AnimatorClipInfo // TypeDefIndex: 2262
{
	// Fields
	private int m_ClipInstanceID; // 0x10
	private float m_Weight; // 0x14

}

// Namespace: UnityEngine
public struct AnimatorStateInfo // TypeDefIndex: 2263
{
	// Fields
	private int m_Name; // 0x10
	private int m_Path; // 0x14
	private int m_FullPath; // 0x18
	private float m_NormalizedTime; // 0x1C
	private float m_Length; // 0x20
	private float m_Speed; // 0x24
	private float m_SpeedMultiplier; // 0x28
	private int m_Tag; // 0x2C
	private int m_Loop; // 0x30

	// Methods
	public bool IsName(string name); // 0x10079558C
	public int get_fullPathHash(); // 0x1007955D8
	public int get_nameHash(); // 0x1007955E0
	public int get_shortNameHash(); // 0x1007955E8
	public float get_normalizedTime(); // 0x1007955F0
	public float get_length(); // 0x1007955F8
	public float get_speed(); // 0x100795600
	public float get_speedMultiplier(); // 0x100795608
	public int get_tagHash(); // 0x100795610
	public bool IsTag(string tag); // 0x100795644
	public bool get_loop(); // 0x100795670
}

// Namespace: UnityEngine
public struct AnimatorTransitionInfo // TypeDefIndex: 2264
{
	// Fields
	private int m_FullPath; // 0x10
	private int m_UserName; // 0x14
	private int m_Name; // 0x18
	private float m_NormalizedTime; // 0x1C
	private bool m_AnyState; // 0x20
	private int m_TransitionType; // 0x24

	// Methods
	public bool IsName(string name); // 0x100795728
	public bool IsUserName(string name); // 0x100795730
	public int get_fullPathHash(); // 0x10079575C
	public int get_nameHash(); // 0x100795764
	public int get_userNameHash(); // 0x10079576C
	public float get_normalizedTime(); // 0x100795774
	public bool get_anyState(); // 0x10079577C
	internal bool get_entry(); // 0x100795784
	internal bool get_exit(); // 0x100795790
}

// Namespace: UnityEngine
public sealed class Animator : DirectorPlayer // TypeDefIndex: 2265
{
	// Methods
	public bool GetBool(string name); // 0x100794F20
	public void SetBool(string name, bool value); // 0x100794F98
	public void SetTrigger(string name); // 0x100795018
	public void ResetTrigger(string name); // 0x100795090
	public void set_applyRootMotion(bool value); // 0x100795108
	public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex); // 0x10079517C
	public float get_speed(); // 0x1007951F8
	public void set_speed(float value); // 0x10079525C
	public void Play(string stateName); // 0x1007952D0
	public void Play(string stateName, int layer, float normalizedTime); // 0x100795304
	public void Play(int stateNameHash, int layer, float normalizedTime); // 0x1007953A8
	public void StopPlayback(); // 0x100795434
	public RuntimeAnimatorController get_runtimeAnimatorController(); // 0x100795498
	public void set_runtimeAnimatorController(RuntimeAnimatorController value); // 0x1007954FC
	public static int StringToHash(string name); // 0x100795344
	private void SetBoolString(string name, bool value); // 0x100794F9C
	private bool GetBoolString(string name); // 0x100794F24
	private void SetTriggerString(string name); // 0x10079501C
	private void ResetTriggerString(string name); // 0x100795094
}

// Namespace: UnityEngine
public struct SkeletonBone // TypeDefIndex: 2266
{
	// Fields
	public string name; // 0x10
	public Vector3 position; // 0x18
	public Quaternion rotation; // 0x24
	public Vector3 scale; // 0x34
	public int transformModified; // 0x40

}

// Namespace: UnityEngine
public struct HumanLimit // TypeDefIndex: 2267
{
	// Fields
	private Vector3 m_Min; // 0x10
	private Vector3 m_Max; // 0x1C
	private Vector3 m_Center; // 0x28
	private float m_AxisLength; // 0x34
	private int m_UseDefaultValues; // 0x38

}

// Namespace: UnityEngine
public struct HumanBone // TypeDefIndex: 2268
{
	// Fields
	private string m_BoneName; // 0x10
	private string m_HumanName; // 0x18
	public HumanLimit limit; // 0x20

	// Methods
	public string get_boneName(); // 0x1007BE1B8
	public void set_boneName(string value); // 0x1007BE1C0
	public string get_humanName(); // 0x1007BE1C8
	public void set_humanName(string value); // 0x1007BE1D0
}

// Namespace: UnityEngine
public class RuntimeAnimatorController : Object // TypeDefIndex: 2269
{
}

// Namespace: UnityEngine.Experimental.Director
public struct AnimatorControllerPlayable // TypeDefIndex: 2270
{
	// Fields
	internal AnimationPlayable handle; // 0x10

	// Methods
	internal Playable get_node(); // 0x1007A614C
	public override bool Equals(object p); // 0x1007A6164
	public override int GetHashCode(); // 0x1007A6198
	public static Playable op_Implicit(AnimatorControllerPlayable s); // 0x1007A6158
}

// Namespace: UnityEngine.Experimental.Director
public struct AnimationPlayable // TypeDefIndex: 2271
{
	// Fields
	internal Playable handle; // 0x10

	// Methods
	internal Playable get_node(); // 0x1007A55B8
	public int AddInput(Playable input); // 0x1007A5748
	public bool SetInput(Playable source, int index); // 0x1007A58E4
	public bool SetInputs(IEnumerable`1<Playable> sources); // 0x1007A5D64
	public bool RemoveInput(int index); // 0x1007A5E00
	public bool RemoveAllInputs(); // 0x1007A5E84
	public override bool Equals(object p); // 0x1007A5ED4
	public override int GetHashCode(); // 0x1007A5F3C
	public bool IsValid(); // 0x1007A5F90
	public T CastTo(); // 0
	public int get_inputCount(); // 0x1007A5FDC
	public Playable GetInput(int inputPort); // 0x1007A601C
	public static Playable op_Implicit(AnimationPlayable b); // 0x1007A567C
}

// Namespace: UnityEngine.Experimental.Director
public class CustomAnimationPlayable : ScriptPlayable // TypeDefIndex: 2272
{
	// Fields
	internal AnimationPlayable handle; // 0x10

	// Methods
	public void .ctor(); // 0x1007A61EC
	internal Playable get_node(); // 0x1007A64A4
	internal void SetHandle(int version, IntPtr playableHandle); // 0x1007A64B0
	public void Destroy(); // 0x1007A64BC
	public virtual void PrepareFrame(FrameData info); // 0x1007A64E4
	public virtual void OnSetTime(float localTime); // 0x1007A64E8
	public virtual void OnSetPlayState(PlayState newState); // 0x1007A64EC
	public T CastTo(); // 0
	public int get_inputCount(); // 0x1007A64F0
	public Playable GetInput(int inputPort); // 0x1007A65DC
	public int get_outputCount(); // 0x1007A6644
	public Playable GetOutput(int outputPort); // 0x1007A66BC
	public float GetInputWeight(int index); // 0x1007A675C
	public void SetInputWeight(int inputIndex, float weight); // 0x1007A67E0
	public PlayState get_state(); // 0x1007A68B0
	public void set_state(PlayState value); // 0x1007A6928
	public double get_time(); // 0x1007A69AC
	public void set_time(double value); // 0x1007A6A24
	public double get_duration(); // 0x1007A6AAC
	public void set_duration(double value); // 0x1007A6B24
	public int AddInput(Playable input); // 0x1007A6BAC
	public bool SetInput(Playable source, int index); // 0x1007A6C1C
	public bool SetInputs(IEnumerable`1<Playable> sources); // 0x1007A6C84
	public bool RemoveInput(int index); // 0x1007A6CD4
	public bool RemoveAllInputs(); // 0x1007A6D28
	public static Playable op_Implicit(CustomAnimationPlayable s); // 0x1007A6544
	public static AnimationPlayable op_Implicit(CustomAnimationPlayable s); // 0x1007A6C04
}

// Namespace: UnityEngine
public struct TextGenerationSettings // TypeDefIndex: 2273
{
	// Fields
	public Font font; // 0x10
	public Color color; // 0x18
	public int fontSize; // 0x28
	public float lineSpacing; // 0x2C
	public bool richText; // 0x30
	public float scaleFactor; // 0x34
	public FontStyle fontStyle; // 0x38
	public TextAnchor textAnchor; // 0x3C
	public bool alignByGeometry; // 0x40
	public bool resizeTextForBestFit; // 0x41
	public int resizeTextMinSize; // 0x44
	public int resizeTextMaxSize; // 0x48
	public bool updateBounds; // 0x4C
	public VerticalWrapMode verticalOverflow; // 0x50
	public HorizontalWrapMode horizontalOverflow; // 0x54
	public Vector2 generationExtents; // 0x58
	public Vector2 pivot; // 0x60
	public bool generateOutOfBounds; // 0x68

	// Methods
	private bool CompareColors(Color left, Color right); // 0x1007E4A04
	private bool CompareVector2(Vector2 left, Vector2 right); // 0x1007E4AD8
	public bool Equals(TextGenerationSettings other); // 0x1007E4D40
}

// Namespace: UnityEngine
public sealed class TextGenerator : IDisposable // TypeDefIndex: 2274
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private string m_LastString; // 0x18
	private TextGenerationSettings m_LastSettings; // 0x20
	private bool m_HasGenerated; // 0x80
	private bool m_LastValid; // 0x81
	private readonly List`1<UIVertex> m_Verts; // 0x88
	private readonly List`1<UICharInfo> m_Characters; // 0x90
	private readonly List`1<UILineInfo> m_Lines; // 0x98
	private bool m_CachedVerts; // 0xA0
	private bool m_CachedCharacters; // 0xA1
	private bool m_CachedLines; // 0xA2

	// Methods
	public void .ctor(); // 0x1007E4DB0
	public void .ctor(int initialCapacity); // 0x1007E4DB8
	private void System.IDisposable.Dispose(); // 0x1007E4F00
	protected override void Finalize(); // 0x1007E4F68
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings); // 0x1007E509C
	public void Invalidate(); // 0x1007E5344
	public void GetCharacters(List`1<UICharInfo> characters); // 0x1007E534C
	public void GetLines(List`1<UILineInfo> lines); // 0x1007E53C4
	public void GetVertices(List`1<UIVertex> vertices); // 0x1007E543C
	public float GetPreferredWidth(string str, TextGenerationSettings settings); // 0x1007E54B4
	public float GetPreferredHeight(string str, TextGenerationSettings settings); // 0x1007E564C
	public bool Populate(string str, TextGenerationSettings settings); // 0x1007E5534
	private bool PopulateAlways(string str, TextGenerationSettings settings); // 0x1007E56C8
	public IList`1<UIVertex> get_verts(); // 0x1007E5878
	public IList`1<UICharInfo> get_characters(); // 0x1007E58B4
	public IList`1<UILineInfo> get_lines(); // 0x1007E58F0
	private void Init(); // 0x1007E4E9C
	private void Dispose_cpp(); // 0x1007E4F04
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry); // 0x1007E57D4
	internal bool Populate_Internal_cpp(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry); // 0x1007E592C
	private static bool INTERNAL_CALL_Populate_Internal_cpp(TextGenerator self, string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry); // 0x1007E59D0
	public Rect get_rectExtents(); // 0x1007E5620
	private void INTERNAL_get_rectExtents(out Rect value); // 0x1007E5B10
	public int get_vertexCount(); // 0x1007E5B84
	private void GetVerticesInternal(object vertices); // 0x1007E5440
	public int get_characterCount(); // 0x1007E5BE8
	public int get_characterCountVisible(); // 0x1007E5C4C
	private void GetCharactersInternal(object characters); // 0x1007E5350
	public int get_lineCount(); // 0x1007E5D4C
	private void GetLinesInternal(object lines); // 0x1007E53C8
}

// Namespace: UnityEngine
public sealed class TextAnchor : Enum // TypeDefIndex: 2275
{
	// Fields
	public int value__; // 0x10
	public const TextAnchor UpperLeft = 0; // 0x0
	public const TextAnchor UpperCenter = 1; // 0x0
	public const TextAnchor UpperRight = 2; // 0x0
	public const TextAnchor MiddleLeft = 3; // 0x0
	public const TextAnchor MiddleCenter = 4; // 0x0
	public const TextAnchor MiddleRight = 5; // 0x0
	public const TextAnchor LowerLeft = 6; // 0x0
	public const TextAnchor LowerCenter = 7; // 0x0
	public const TextAnchor LowerRight = 8; // 0x0

}

// Namespace: UnityEngine
public sealed class HorizontalWrapMode : Enum // TypeDefIndex: 2276
{
	// Fields
	public int value__; // 0x10
	public const HorizontalWrapMode Wrap = 0; // 0x0
	public const HorizontalWrapMode Overflow = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class VerticalWrapMode : Enum // TypeDefIndex: 2277
{
	// Fields
	public int value__; // 0x10
	public const VerticalWrapMode Truncate = 0; // 0x0
	public const VerticalWrapMode Overflow = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class Font : Object // TypeDefIndex: 2278
{
	// Fields
	private static Action`1<Font> textureRebuilt; // 0x0
	private FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x18

	// Methods
	public static void add_textureRebuilt(Action`1<Font> value); // 0x1007A7D3C
	public static void remove_textureRebuilt(Action`1<Font> value); // 0x1007A7E28
	public Material get_material(); // 0x1007A7F14
	public bool HasCharacter(char c); // 0x1007A7F78
	private static void InvokeTextureRebuilt_Internal(Font font); // 0x1007A7FEC
	public bool get_dynamic(); // 0x1007A8108
	public int get_fontSize(); // 0x1007A816C
}

// Namespace: 
public sealed class FontTextureRebuildCallback : MulticastDelegate // TypeDefIndex: 2279
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007A81D0
	public virtual void Invoke(); // 0x1007A8078
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007A81EC
	public virtual void EndInvoke(IAsyncResult result); // 0x1007A824C
}

// Namespace: UnityEngine
public struct UICharInfo // TypeDefIndex: 2280
{
	// Fields
	public Vector2 cursorPos; // 0x10
	public float charWidth; // 0x18

}

// Namespace: UnityEngine
public struct UILineInfo // TypeDefIndex: 2281
{
	// Fields
	public int startCharIdx; // 0x10
	public int height; // 0x14
	public float topY; // 0x18

}

// Namespace: UnityEngine
public struct UIVertex // TypeDefIndex: 2282
{
	// Fields
	public Vector3 position; // 0x10
	public Vector3 normal; // 0x1C
	public Color32 color; // 0x28
	public Vector2 uv0; // 0x2C
	public Vector2 uv1; // 0x34
	public Vector4 tangent; // 0x3C
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector4 s_DefaultTangent; // 0x4
	public static UIVertex simpleVert; // 0x14

	// Methods
	private static void .cctor(); // 0x1007E8DF0
}

// Namespace: UnityEngine
public sealed class RenderMode : Enum // TypeDefIndex: 2283
{
	// Fields
	public int value__; // 0x10
	public const RenderMode ScreenSpaceOverlay = 0; // 0x0
	public const RenderMode ScreenSpaceCamera = 1; // 0x0
	public const RenderMode WorldSpace = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class Canvas : Behaviour // TypeDefIndex: 2284
{
	// Fields
	private static WillRenderCanvases willRenderCanvases; // 0x0

	// Methods
	public static void add_willRenderCanvases(WillRenderCanvases value); // 0x10079C0F8
	public static void remove_willRenderCanvases(WillRenderCanvases value); // 0x10079C1E4
	public RenderMode get_renderMode(); // 0x10079C2D0
	public bool get_isRootCanvas(); // 0x10079C334
	public Camera get_worldCamera(); // 0x10079C398
	public float get_scaleFactor(); // 0x10079C3FC
	public void set_scaleFactor(float value); // 0x10079C460
	public float get_referencePixelsPerUnit(); // 0x10079C4D4
	public void set_referencePixelsPerUnit(float value); // 0x10079C538
	public bool get_pixelPerfect(); // 0x10079C5AC
	public int get_renderOrder(); // 0x10079C610
	public bool get_overrideSorting(); // 0x10079C674
	public void set_overrideSorting(bool value); // 0x10079C6D8
	public int get_sortingOrder(); // 0x10079C74C
	public void set_sortingOrder(int value); // 0x10079C7B0
	public int get_sortingLayerID(); // 0x10079C824
	public void set_sortingLayerID(int value); // 0x10079C888
	public Canvas get_rootCanvas(); // 0x10079C8FC
	public static Material GetDefaultCanvasMaterial(); // 0x10079C960
	public static Material GetETC1SupportedCanvasMaterial(); // 0x10079C9B8
	private static void SendWillRenderCanvases(); // 0x10079CA10
	public static void ForceUpdateCanvases(); // 0x10079CB04
}

// Namespace: 
public sealed class WillRenderCanvases : MulticastDelegate // TypeDefIndex: 2285
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10079CB08
	public virtual void Invoke(); // 0x10079CA74
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10079CB24
	public virtual void EndInvoke(IAsyncResult result); // 0x10079CB84
}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 2286
{
	// Methods
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0
}

// Namespace: UnityEngine
public sealed class CanvasGroup : Component, ICanvasRaycastFilter // TypeDefIndex: 2287
{
	// Methods
	public float get_alpha(); // 0x10079CB90
	public void set_alpha(float value); // 0x10079CBF4
	public bool get_interactable(); // 0x10079CC68
	public bool get_blocksRaycasts(); // 0x10079CCCC
	public bool get_ignoreParentGroups(); // 0x10079CD30
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x10079CD94
}

// Namespace: UnityEngine
public sealed class CanvasRenderer : Component // TypeDefIndex: 2288
{
	// Methods
	public void SetColor(Color color); // 0x10079CD98
	private static void INTERNAL_CALL_SetColor(CanvasRenderer self, Color color); // 0x10079CDC4
	public Color GetColor(); // 0x10079CE38
	private static void INTERNAL_CALL_GetColor(CanvasRenderer self, out Color value); // 0x10079CE68
	public void EnableRectClipping(Rect rect); // 0x10079CEDC
	private static void INTERNAL_CALL_EnableRectClipping(CanvasRenderer self, Rect rect); // 0x10079CF08
	public void DisableRectClipping(); // 0x10079CF7C
	public void set_hasPopInstruction(bool value); // 0x10079CFE0
	public int get_materialCount(); // 0x10079D054
	public void set_materialCount(int value); // 0x10079D0B8
	public void SetMaterial(Material material, int index); // 0x10079D12C
	public void SetMaterial(Material material, Texture texture); // 0x10079D1A8
	public void set_popMaterialCount(int value); // 0x10079D284
	public void SetPopMaterial(Material material, int index); // 0x10079D2F8
	public void SetTexture(Texture texture); // 0x10079D210
	public void SetAlphaTexture(Texture texture); // 0x10079D374
	public void SetMesh(Mesh mesh); // 0x10079D3E8
	public void Clear(); // 0x10079D45C
	public static void SplitUIVertexStreams(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indicies); // 0x10079D4C0
	private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object normals, object tangents); // 0x10079D4F4
	private static void SplitIndiciesStreamsInternal(object verts, object indicies); // 0x10079D5A0
	public static void CreateUIVertexStream(List`1<UIVertex> verts, List`1<Vector3> positions, List`1<Color32> colors, List`1<Vector2> uv0S, List`1<Vector2> uv1S, List`1<Vector3> normals, List`1<Vector4> tangents, List`1<int> indicies); // 0x10079D614
	private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object normals, object tangents, object indicies); // 0x10079D620
	public bool get_cull(); // 0x10079D6DC
	public void set_cull(bool value); // 0x10079D740
	public int get_absoluteDepth(); // 0x10079D7B4
	public bool get_hasMoved(); // 0x10079D818
}

// Namespace: UnityEngine
public sealed class RectTransformUtility // TypeDefIndex: 2289
{
	// Fields
	private static Vector3[] s_Corners; // 0x0

	// Methods
	private static void .cctor(); // 0x1007D27A0
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam); // 0x1007D2810
	private static bool INTERNAL_CALL_RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam); // 0x1007D2898
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas); // 0x1007D2914
	private static void PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 output); // 0x1007D29B8
	private static void INTERNAL_CALL_PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 output); // 0x1007D2A48
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas); // 0x1007D2AD4
	private static void INTERNAL_CALL_PixelAdjustRect(RectTransform rectTransform, Canvas canvas, out Rect value); // 0x1007D2B64
	public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint); // 0x1007D2BE0
	public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint); // 0x1007D2EEC
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos); // 0x1007D2DC8
	public static Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint); // 0x1007D2FD8
	public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive); // 0x1007D30BC
	public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive); // 0x1007D3384
	private static Vector2 GetTransposed(Vector2 input); // 0x1007D3654
}

// Namespace: UnityEngine
public sealed class Event // TypeDefIndex: 2290
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private static Event s_Current; // 0x0
	private static Event s_MasterEvent; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x10

	// Methods
	public void .ctor(); // 0x1007A0F4C
	public void .ctor(int displayIndex); // 0x1007A0FEC
	protected override void Finalize(); // 0x1007A101C
	public Vector2 get_mousePosition(); // 0x1007A10EC
	public Vector2 get_delta(); // 0x1007A1188
	public bool get_shift(); // 0x1007A1224
	public bool get_alt(); // 0x1007A12A0
	public static Event get_current(); // 0x1007A12B8
	private static void Internal_MakeMasterEventCurrent(int displayIndex); // 0x1007A1308
	public bool get_isKey(); // 0x1007A14A0
	public bool get_isMouse(); // 0x1007A1524
	public static Event KeyboardEvent(string key); // 0x1007A1540
	public override int GetHashCode(); // 0x1007A24D8
	public override bool Equals(object obj); // 0x1007A25D4
	public override string ToString(); // 0x1007A27B4
	private void Init(int displayIndex); // 0x1007A0F78
	private void Cleanup(); // 0x1007A1088
	public EventType get_rawType(); // 0x1007A2F68
	public EventType get_type(); // 0x1007A14C0
	public void set_type(EventType value); // 0x1007A22A4
	public EventType GetTypeForControl(int controlID); // 0x1007A2FCC
	private void Internal_GetMousePosition(out Vector2 value); // 0x1007A1114
	private void Internal_GetMouseDelta(out Vector2 value); // 0x1007A11B0
	public EventModifiers get_modifiers(); // 0x1007A123C
	public void set_modifiers(EventModifiers value); // 0x1007A2318
	public int get_clickCount(); // 0x1007A3040
	public char get_character(); // 0x1007A2474
	public void set_character(char value); // 0x1007A238C
	public string get_commandName(); // 0x1007A2F04
	public KeyCode get_keyCode(); // 0x1007A2570
	public void set_keyCode(KeyCode value); // 0x1007A2400
	private static void Internal_SetNativeEvent(IntPtr ptr); // 0x1007A143C
	public void set_displayIndex(int value); // 0x1007A13C8
	public void Use(); // 0x1007A30A4
	public static bool PopEvent(Event outEvent); // 0x1007A3108
}

// Namespace: UnityEngine
public sealed class KeyCode : Enum // TypeDefIndex: 2291
{
	// Fields
	public int value__; // 0x10
	public const KeyCode None = 0; // 0x0
	public const KeyCode Backspace = 8; // 0x0
	public const KeyCode Delete = 127; // 0x0
	public const KeyCode Tab = 9; // 0x0
	public const KeyCode Clear = 12; // 0x0
	public const KeyCode Return = 13; // 0x0
	public const KeyCode Pause = 19; // 0x0
	public const KeyCode Escape = 27; // 0x0
	public const KeyCode Space = 32; // 0x0
	public const KeyCode Keypad0 = 256; // 0x0
	public const KeyCode Keypad1 = 257; // 0x0
	public const KeyCode Keypad2 = 258; // 0x0
	public const KeyCode Keypad3 = 259; // 0x0
	public const KeyCode Keypad4 = 260; // 0x0
	public const KeyCode Keypad5 = 261; // 0x0
	public const KeyCode Keypad6 = 262; // 0x0
	public const KeyCode Keypad7 = 263; // 0x0
	public const KeyCode Keypad8 = 264; // 0x0
	public const KeyCode Keypad9 = 265; // 0x0
	public const KeyCode KeypadPeriod = 266; // 0x0
	public const KeyCode KeypadDivide = 267; // 0x0
	public const KeyCode KeypadMultiply = 268; // 0x0
	public const KeyCode KeypadMinus = 269; // 0x0
	public const KeyCode KeypadPlus = 270; // 0x0
	public const KeyCode KeypadEnter = 271; // 0x0
	public const KeyCode KeypadEquals = 272; // 0x0
	public const KeyCode UpArrow = 273; // 0x0
	public const KeyCode DownArrow = 274; // 0x0
	public const KeyCode RightArrow = 275; // 0x0
	public const KeyCode LeftArrow = 276; // 0x0
	public const KeyCode Insert = 277; // 0x0
	public const KeyCode Home = 278; // 0x0
	public const KeyCode End = 279; // 0x0
	public const KeyCode PageUp = 280; // 0x0
	public const KeyCode PageDown = 281; // 0x0
	public const KeyCode F1 = 282; // 0x0
	public const KeyCode F2 = 283; // 0x0
	public const KeyCode F3 = 284; // 0x0
	public const KeyCode F4 = 285; // 0x0
	public const KeyCode F5 = 286; // 0x0
	public const KeyCode F6 = 287; // 0x0
	public const KeyCode F7 = 288; // 0x0
	public const KeyCode F8 = 289; // 0x0
	public const KeyCode F9 = 290; // 0x0
	public const KeyCode F10 = 291; // 0x0
	public const KeyCode F11 = 292; // 0x0
	public const KeyCode F12 = 293; // 0x0
	public const KeyCode F13 = 294; // 0x0
	public const KeyCode F14 = 295; // 0x0
	public const KeyCode F15 = 296; // 0x0
	public const KeyCode Alpha0 = 48; // 0x0
	public const KeyCode Alpha1 = 49; // 0x0
	public const KeyCode Alpha2 = 50; // 0x0
	public const KeyCode Alpha3 = 51; // 0x0
	public const KeyCode Alpha4 = 52; // 0x0
	public const KeyCode Alpha5 = 53; // 0x0
	public const KeyCode Alpha6 = 54; // 0x0
	public const KeyCode Alpha7 = 55; // 0x0
	public const KeyCode Alpha8 = 56; // 0x0
	public const KeyCode Alpha9 = 57; // 0x0
	public const KeyCode Exclaim = 33; // 0x0
	public const KeyCode DoubleQuote = 34; // 0x0
	public const KeyCode Hash = 35; // 0x0
	public const KeyCode Dollar = 36; // 0x0
	public const KeyCode Ampersand = 38; // 0x0
	public const KeyCode Quote = 39; // 0x0
	public const KeyCode LeftParen = 40; // 0x0
	public const KeyCode RightParen = 41; // 0x0
	public const KeyCode Asterisk = 42; // 0x0
	public const KeyCode Plus = 43; // 0x0
	public const KeyCode Comma = 44; // 0x0
	public const KeyCode Minus = 45; // 0x0
	public const KeyCode Period = 46; // 0x0
	public const KeyCode Slash = 47; // 0x0
	public const KeyCode Colon = 58; // 0x0
	public const KeyCode Semicolon = 59; // 0x0
	public const KeyCode Less = 60; // 0x0
	public const KeyCode Equals = 61; // 0x0
	public const KeyCode Greater = 62; // 0x0
	public const KeyCode Question = 63; // 0x0
	public const KeyCode At = 64; // 0x0
	public const KeyCode LeftBracket = 91; // 0x0
	public const KeyCode Backslash = 92; // 0x0
	public const KeyCode RightBracket = 93; // 0x0
	public const KeyCode Caret = 94; // 0x0
	public const KeyCode Underscore = 95; // 0x0
	public const KeyCode BackQuote = 96; // 0x0
	public const KeyCode A = 97; // 0x0
	public const KeyCode B = 98; // 0x0
	public const KeyCode C = 99; // 0x0
	public const KeyCode D = 100; // 0x0
	public const KeyCode E = 101; // 0x0
	public const KeyCode F = 102; // 0x0
	public const KeyCode G = 103; // 0x0
	public const KeyCode H = 104; // 0x0
	public const KeyCode I = 105; // 0x0
	public const KeyCode J = 106; // 0x0
	public const KeyCode K = 107; // 0x0
	public const KeyCode L = 108; // 0x0
	public const KeyCode M = 109; // 0x0
	public const KeyCode N = 110; // 0x0
	public const KeyCode O = 111; // 0x0
	public const KeyCode P = 112; // 0x0
	public const KeyCode Q = 113; // 0x0
	public const KeyCode R = 114; // 0x0
	public const KeyCode S = 115; // 0x0
	public const KeyCode T = 116; // 0x0
	public const KeyCode U = 117; // 0x0
	public const KeyCode V = 118; // 0x0
	public const KeyCode W = 119; // 0x0
	public const KeyCode X = 120; // 0x0
	public const KeyCode Y = 121; // 0x0
	public const KeyCode Z = 122; // 0x0
	public const KeyCode Numlock = 300; // 0x0
	public const KeyCode CapsLock = 301; // 0x0
	public const KeyCode ScrollLock = 302; // 0x0
	public const KeyCode RightShift = 303; // 0x0
	public const KeyCode LeftShift = 304; // 0x0
	public const KeyCode RightControl = 305; // 0x0
	public const KeyCode LeftControl = 306; // 0x0
	public const KeyCode RightAlt = 307; // 0x0
	public const KeyCode LeftAlt = 308; // 0x0
	public const KeyCode LeftCommand = 310; // 0x0
	public const KeyCode LeftApple = 310; // 0x0
	public const KeyCode LeftWindows = 311; // 0x0
	public const KeyCode RightCommand = 309; // 0x0
	public const KeyCode RightApple = 309; // 0x0
	public const KeyCode RightWindows = 312; // 0x0
	public const KeyCode AltGr = 313; // 0x0
	public const KeyCode Help = 315; // 0x0
	public const KeyCode Print = 316; // 0x0
	public const KeyCode SysReq = 317; // 0x0
	public const KeyCode Break = 318; // 0x0
	public const KeyCode Menu = 319; // 0x0
	public const KeyCode Mouse0 = 323; // 0x0
	public const KeyCode Mouse1 = 324; // 0x0
	public const KeyCode Mouse2 = 325; // 0x0
	public const KeyCode Mouse3 = 326; // 0x0
	public const KeyCode Mouse4 = 327; // 0x0
	public const KeyCode Mouse5 = 328; // 0x0
	public const KeyCode Mouse6 = 329; // 0x0
	public const KeyCode JoystickButton0 = 330; // 0x0
	public const KeyCode JoystickButton1 = 331; // 0x0
	public const KeyCode JoystickButton2 = 332; // 0x0
	public const KeyCode JoystickButton3 = 333; // 0x0
	public const KeyCode JoystickButton4 = 334; // 0x0
	public const KeyCode JoystickButton5 = 335; // 0x0
	public const KeyCode JoystickButton6 = 336; // 0x0
	public const KeyCode JoystickButton7 = 337; // 0x0
	public const KeyCode JoystickButton8 = 338; // 0x0
	public const KeyCode JoystickButton9 = 339; // 0x0
	public const KeyCode JoystickButton10 = 340; // 0x0
	public const KeyCode JoystickButton11 = 341; // 0x0
	public const KeyCode JoystickButton12 = 342; // 0x0
	public const KeyCode JoystickButton13 = 343; // 0x0
	public const KeyCode JoystickButton14 = 344; // 0x0
	public const KeyCode JoystickButton15 = 345; // 0x0
	public const KeyCode JoystickButton16 = 346; // 0x0
	public const KeyCode JoystickButton17 = 347; // 0x0
	public const KeyCode JoystickButton18 = 348; // 0x0
	public const KeyCode JoystickButton19 = 349; // 0x0
	public const KeyCode Joystick1Button0 = 350; // 0x0
	public const KeyCode Joystick1Button1 = 351; // 0x0
	public const KeyCode Joystick1Button2 = 352; // 0x0
	public const KeyCode Joystick1Button3 = 353; // 0x0
	public const KeyCode Joystick1Button4 = 354; // 0x0
	public const KeyCode Joystick1Button5 = 355; // 0x0
	public const KeyCode Joystick1Button6 = 356; // 0x0
	public const KeyCode Joystick1Button7 = 357; // 0x0
	public const KeyCode Joystick1Button8 = 358; // 0x0
	public const KeyCode Joystick1Button9 = 359; // 0x0
	public const KeyCode Joystick1Button10 = 360; // 0x0
	public const KeyCode Joystick1Button11 = 361; // 0x0
	public const KeyCode Joystick1Button12 = 362; // 0x0
	public const KeyCode Joystick1Button13 = 363; // 0x0
	public const KeyCode Joystick1Button14 = 364; // 0x0
	public const KeyCode Joystick1Button15 = 365; // 0x0
	public const KeyCode Joystick1Button16 = 366; // 0x0
	public const KeyCode Joystick1Button17 = 367; // 0x0
	public const KeyCode Joystick1Button18 = 368; // 0x0
	public const KeyCode Joystick1Button19 = 369; // 0x0
	public const KeyCode Joystick2Button0 = 370; // 0x0
	public const KeyCode Joystick2Button1 = 371; // 0x0
	public const KeyCode Joystick2Button2 = 372; // 0x0
	public const KeyCode Joystick2Button3 = 373; // 0x0
	public const KeyCode Joystick2Button4 = 374; // 0x0
	public const KeyCode Joystick2Button5 = 375; // 0x0
	public const KeyCode Joystick2Button6 = 376; // 0x0
	public const KeyCode Joystick2Button7 = 377; // 0x0
	public const KeyCode Joystick2Button8 = 378; // 0x0
	public const KeyCode Joystick2Button9 = 379; // 0x0
	public const KeyCode Joystick2Button10 = 380; // 0x0
	public const KeyCode Joystick2Button11 = 381; // 0x0
	public const KeyCode Joystick2Button12 = 382; // 0x0
	public const KeyCode Joystick2Button13 = 383; // 0x0
	public const KeyCode Joystick2Button14 = 384; // 0x0
	public const KeyCode Joystick2Button15 = 385; // 0x0
	public const KeyCode Joystick2Button16 = 386; // 0x0
	public const KeyCode Joystick2Button17 = 387; // 0x0
	public const KeyCode Joystick2Button18 = 388; // 0x0
	public const KeyCode Joystick2Button19 = 389; // 0x0
	public const KeyCode Joystick3Button0 = 390; // 0x0
	public const KeyCode Joystick3Button1 = 391; // 0x0
	public const KeyCode Joystick3Button2 = 392; // 0x0
	public const KeyCode Joystick3Button3 = 393; // 0x0
	public const KeyCode Joystick3Button4 = 394; // 0x0
	public const KeyCode Joystick3Button5 = 395; // 0x0
	public const KeyCode Joystick3Button6 = 396; // 0x0
	public const KeyCode Joystick3Button7 = 397; // 0x0
	public const KeyCode Joystick3Button8 = 398; // 0x0
	public const KeyCode Joystick3Button9 = 399; // 0x0
	public const KeyCode Joystick3Button10 = 400; // 0x0
	public const KeyCode Joystick3Button11 = 401; // 0x0
	public const KeyCode Joystick3Button12 = 402; // 0x0
	public const KeyCode Joystick3Button13 = 403; // 0x0
	public const KeyCode Joystick3Button14 = 404; // 0x0
	public const KeyCode Joystick3Button15 = 405; // 0x0
	public const KeyCode Joystick3Button16 = 406; // 0x0
	public const KeyCode Joystick3Button17 = 407; // 0x0
	public const KeyCode Joystick3Button18 = 408; // 0x0
	public const KeyCode Joystick3Button19 = 409; // 0x0
	public const KeyCode Joystick4Button0 = 410; // 0x0
	public const KeyCode Joystick4Button1 = 411; // 0x0
	public const KeyCode Joystick4Button2 = 412; // 0x0
	public const KeyCode Joystick4Button3 = 413; // 0x0
	public const KeyCode Joystick4Button4 = 414; // 0x0
	public const KeyCode Joystick4Button5 = 415; // 0x0
	public const KeyCode Joystick4Button6 = 416; // 0x0
	public const KeyCode Joystick4Button7 = 417; // 0x0
	public const KeyCode Joystick4Button8 = 418; // 0x0
	public const KeyCode Joystick4Button9 = 419; // 0x0
	public const KeyCode Joystick4Button10 = 420; // 0x0
	public const KeyCode Joystick4Button11 = 421; // 0x0
	public const KeyCode Joystick4Button12 = 422; // 0x0
	public const KeyCode Joystick4Button13 = 423; // 0x0
	public const KeyCode Joystick4Button14 = 424; // 0x0
	public const KeyCode Joystick4Button15 = 425; // 0x0
	public const KeyCode Joystick4Button16 = 426; // 0x0
	public const KeyCode Joystick4Button17 = 427; // 0x0
	public const KeyCode Joystick4Button18 = 428; // 0x0
	public const KeyCode Joystick4Button19 = 429; // 0x0
	public const KeyCode Joystick5Button0 = 430; // 0x0
	public const KeyCode Joystick5Button1 = 431; // 0x0
	public const KeyCode Joystick5Button2 = 432; // 0x0
	public const KeyCode Joystick5Button3 = 433; // 0x0
	public const KeyCode Joystick5Button4 = 434; // 0x0
	public const KeyCode Joystick5Button5 = 435; // 0x0
	public const KeyCode Joystick5Button6 = 436; // 0x0
	public const KeyCode Joystick5Button7 = 437; // 0x0
	public const KeyCode Joystick5Button8 = 438; // 0x0
	public const KeyCode Joystick5Button9 = 439; // 0x0
	public const KeyCode Joystick5Button10 = 440; // 0x0
	public const KeyCode Joystick5Button11 = 441; // 0x0
	public const KeyCode Joystick5Button12 = 442; // 0x0
	public const KeyCode Joystick5Button13 = 443; // 0x0
	public const KeyCode Joystick5Button14 = 444; // 0x0
	public const KeyCode Joystick5Button15 = 445; // 0x0
	public const KeyCode Joystick5Button16 = 446; // 0x0
	public const KeyCode Joystick5Button17 = 447; // 0x0
	public const KeyCode Joystick5Button18 = 448; // 0x0
	public const KeyCode Joystick5Button19 = 449; // 0x0
	public const KeyCode Joystick6Button0 = 450; // 0x0
	public const KeyCode Joystick6Button1 = 451; // 0x0
	public const KeyCode Joystick6Button2 = 452; // 0x0
	public const KeyCode Joystick6Button3 = 453; // 0x0
	public const KeyCode Joystick6Button4 = 454; // 0x0
	public const KeyCode Joystick6Button5 = 455; // 0x0
	public const KeyCode Joystick6Button6 = 456; // 0x0
	public const KeyCode Joystick6Button7 = 457; // 0x0
	public const KeyCode Joystick6Button8 = 458; // 0x0
	public const KeyCode Joystick6Button9 = 459; // 0x0
	public const KeyCode Joystick6Button10 = 460; // 0x0
	public const KeyCode Joystick6Button11 = 461; // 0x0
	public const KeyCode Joystick6Button12 = 462; // 0x0
	public const KeyCode Joystick6Button13 = 463; // 0x0
	public const KeyCode Joystick6Button14 = 464; // 0x0
	public const KeyCode Joystick6Button15 = 465; // 0x0
	public const KeyCode Joystick6Button16 = 466; // 0x0
	public const KeyCode Joystick6Button17 = 467; // 0x0
	public const KeyCode Joystick6Button18 = 468; // 0x0
	public const KeyCode Joystick6Button19 = 469; // 0x0
	public const KeyCode Joystick7Button0 = 470; // 0x0
	public const KeyCode Joystick7Button1 = 471; // 0x0
	public const KeyCode Joystick7Button2 = 472; // 0x0
	public const KeyCode Joystick7Button3 = 473; // 0x0
	public const KeyCode Joystick7Button4 = 474; // 0x0
	public const KeyCode Joystick7Button5 = 475; // 0x0
	public const KeyCode Joystick7Button6 = 476; // 0x0
	public const KeyCode Joystick7Button7 = 477; // 0x0
	public const KeyCode Joystick7Button8 = 478; // 0x0
	public const KeyCode Joystick7Button9 = 479; // 0x0
	public const KeyCode Joystick7Button10 = 480; // 0x0
	public const KeyCode Joystick7Button11 = 481; // 0x0
	public const KeyCode Joystick7Button12 = 482; // 0x0
	public const KeyCode Joystick7Button13 = 483; // 0x0
	public const KeyCode Joystick7Button14 = 484; // 0x0
	public const KeyCode Joystick7Button15 = 485; // 0x0
	public const KeyCode Joystick7Button16 = 486; // 0x0
	public const KeyCode Joystick7Button17 = 487; // 0x0
	public const KeyCode Joystick7Button18 = 488; // 0x0
	public const KeyCode Joystick7Button19 = 489; // 0x0
	public const KeyCode Joystick8Button0 = 490; // 0x0
	public const KeyCode Joystick8Button1 = 491; // 0x0
	public const KeyCode Joystick8Button2 = 492; // 0x0
	public const KeyCode Joystick8Button3 = 493; // 0x0
	public const KeyCode Joystick8Button4 = 494; // 0x0
	public const KeyCode Joystick8Button5 = 495; // 0x0
	public const KeyCode Joystick8Button6 = 496; // 0x0
	public const KeyCode Joystick8Button7 = 497; // 0x0
	public const KeyCode Joystick8Button8 = 498; // 0x0
	public const KeyCode Joystick8Button9 = 499; // 0x0
	public const KeyCode Joystick8Button10 = 500; // 0x0
	public const KeyCode Joystick8Button11 = 501; // 0x0
	public const KeyCode Joystick8Button12 = 502; // 0x0
	public const KeyCode Joystick8Button13 = 503; // 0x0
	public const KeyCode Joystick8Button14 = 504; // 0x0
	public const KeyCode Joystick8Button15 = 505; // 0x0
	public const KeyCode Joystick8Button16 = 506; // 0x0
	public const KeyCode Joystick8Button17 = 507; // 0x0
	public const KeyCode Joystick8Button18 = 508; // 0x0
	public const KeyCode Joystick8Button19 = 509; // 0x0

}

// Namespace: UnityEngine
public sealed class EventType : Enum // TypeDefIndex: 2292
{
	// Fields
	public int value__; // 0x10
	public const EventType MouseDown = 0; // 0x0
	public const EventType MouseUp = 1; // 0x0
	public const EventType MouseMove = 2; // 0x0
	public const EventType MouseDrag = 3; // 0x0
	public const EventType KeyDown = 4; // 0x0
	public const EventType KeyUp = 5; // 0x0
	public const EventType ScrollWheel = 6; // 0x0
	public const EventType Repaint = 7; // 0x0
	public const EventType Layout = 8; // 0x0
	public const EventType DragUpdated = 9; // 0x0
	public const EventType DragPerform = 10; // 0x0
	public const EventType DragExited = 15; // 0x0
	public const EventType Ignore = 11; // 0x0
	public const EventType Used = 12; // 0x0
	public const EventType ValidateCommand = 13; // 0x0
	public const EventType ExecuteCommand = 14; // 0x0
	public const EventType ContextClick = 16; // 0x0
	public const EventType mouseDown = 0; // 0x0
	public const EventType mouseUp = 1; // 0x0
	public const EventType mouseMove = 2; // 0x0
	public const EventType mouseDrag = 3; // 0x0
	public const EventType keyDown = 4; // 0x0
	public const EventType keyUp = 5; // 0x0
	public const EventType scrollWheel = 6; // 0x0
	public const EventType repaint = 7; // 0x0
	public const EventType layout = 8; // 0x0
	public const EventType dragUpdated = 9; // 0x0
	public const EventType dragPerform = 10; // 0x0
	public const EventType ignore = 11; // 0x0
	public const EventType used = 12; // 0x0

}

// Namespace: UnityEngine
public sealed class EventModifiers : Enum // TypeDefIndex: 2293
{
	// Fields
	public int value__; // 0x10
	public const EventModifiers None = 0; // 0x0
	public const EventModifiers Shift = 1; // 0x0
	public const EventModifiers Control = 2; // 0x0
	public const EventModifiers Alt = 4; // 0x0
	public const EventModifiers Command = 8; // 0x0
	public const EventModifiers Numeric = 16; // 0x0
	public const EventModifiers CapsLock = 32; // 0x0
	public const EventModifiers FunctionKey = 64; // 0x0

}

// Namespace: UnityEngine
public class GUI // TypeDefIndex: 2294
{
	// Fields
	private static float s_ScrollStepSize; // 0x0
	private static int s_ScrollControlId; // 0x4
	private static int s_HotTextField; // 0x8
	private static readonly int s_BoxHash; // 0xC
	private static readonly int s_RepeatButtonHash; // 0x10
	private static readonly int s_ToggleHash; // 0x14
	private static readonly int s_ButtonGridHash; // 0x18
	private static readonly int s_SliderHash; // 0x1C
	private static readonly int s_BeginGroupHash; // 0x20
	private static readonly int s_ScrollviewHash; // 0x24
	private static GUISkin s_Skin; // 0x28
	private static GenericStack s_ScrollViewStates; // 0x30
	private static DateTime <nextScrollStepTime>k__BackingField; // 0x38
	private static int <scrollTroughSide>k__BackingField; // 0x48

	// Methods
	private static void .cctor(); // 0x1007AA0E0
	internal static DateTime get_nextScrollStepTime(); // 0x1007AA310
	internal static void set_nextScrollStepTime(DateTime value); // 0x1007AA298
	internal static int get_scrollTroughSide(); // 0x1007AA378
	internal static void set_scrollTroughSide(int value); // 0x1007AA3E0
	public static void set_skin(GUISkin value); // 0x1007AA44C
	public static GUISkin get_skin(); // 0x1007AA640
	internal static void DoSetSkin(GUISkin newSkin); // 0x1007AA56C
	public static void set_matrix(Matrix4x4 value); // 0x1007AA7D4
	public static void Label(Rect position, string text, GUIStyle style); // 0x1007AA818
	public static void Label(Rect position, GUIContent content, GUIStyle style); // 0x1007AA9A4
	public static void Box(Rect position, string text, GUIStyle style); // 0x1007AAB04
	public static void Box(Rect position, GUIContent content, GUIStyle style); // 0x1007AABD4
	public static bool Button(Rect position, string text); // 0x1007AAD78
	public static bool Button(Rect position, GUIContent content); // 0x1007AAF10
	public static bool Button(Rect position, string text, GUIStyle style); // 0x1007AAFE8
	public static bool Button(Rect position, GUIContent content, GUIStyle style); // 0x1007AB0E8
	private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType); // 0x1007AB1BC
	internal static string PasswordFieldGetStrToShow(string password, char maskChar); // 0x1007AB594
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style); // 0x1007AB684
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText); // 0x1007AB74C
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar); // 0x1007AB830
	private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor); // 0x1007ABB10
	private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor); // 0x1007ABED0
	public static bool Toggle(Rect position, bool value, GUIContent content, GUIStyle style); // 0x1007AC8B0
	public static float HorizontalSlider(Rect position, float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb); // 0x1007ACA54
	public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x1007ACB74
	public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style); // 0x1007ACC94
	internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style); // 0x1007AD730
	public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style); // 0x1007ADA08
	internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz); // 0x1007AD174
	public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect); // 0x1007ADCB0
	public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar); // 0x1007AEA7C
	internal static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background); // 0x1007ADDBC
	public static void EndScrollView(); // 0x1007AEE0C
	public static void EndScrollView(bool handleScrollWheel); // 0x1007AEE6C
	public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text); // 0x1007AF1C0
	public static Rect ModalWindow(int id, Rect clientRect, WindowFunction func, string text, GUIStyle style); // 0x1007AF39C
	internal static void CallWindowDelegate(WindowFunction func, int id, GUISkin _skin, int forceRect, float width, float height, GUIStyle style); // 0x1007AF4B0
	public static void set_changed(bool value); // 0x1007AC658
	private static void DoLabel(Rect position, GUIContent content, IntPtr style); // 0x1007AAA78
	private static void INTERNAL_CALL_DoLabel(Rect position, GUIContent content, IntPtr style); // 0x1007AFF6C
	private static bool DoButton(Rect position, GUIContent content, IntPtr style); // 0x1007AAE84
	private static bool INTERNAL_CALL_DoButton(Rect position, GUIContent content, IntPtr style); // 0x1007AFFE8
	internal static bool DoToggle(Rect position, int id, bool value, GUIContent content, IntPtr style); // 0x1007AC9B0
	private static bool INTERNAL_CALL_DoToggle(Rect position, int id, bool value, GUIContent content, IntPtr style); // 0x1007B0064
	internal static bool get_usePageScrollbars(); // 0x1007B00F8
	internal static void InternalRepaintEditorWindow(); // 0x1007AD9B0
	private static Rect DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin); // 0x1007AF2E0
	private static void INTERNAL_CALL_DoModalWindow(int id, Rect clientRect, WindowFunction func, GUIContent content, GUIStyle style, GUISkin skin, out Rect value); // 0x1007B0150
}

// Namespace: 
internal sealed class ScrollViewState // TypeDefIndex: 2295
{
	// Fields
	public Rect position; // 0x10
	public Rect visibleRect; // 0x20
	public Rect viewRect; // 0x30
	public Vector2 scrollPosition; // 0x40
	public bool apply; // 0x48

	// Methods
	public void .ctor(); // 0x1007B01FC
}

// Namespace: 
public sealed class WindowFunction : MulticastDelegate // TypeDefIndex: 2296
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007B0204
	public virtual void Invoke(int id); // 0x1007AFC4C
	public virtual IAsyncResult BeginInvoke(int id, AsyncCallback callback, object object); // 0x1007B0224
	public virtual void EndInvoke(IAsyncResult result); // 0x1007B02DC
}

// Namespace: UnityEngine
public class GUIContent // TypeDefIndex: 2297
{
	// Fields
	private string m_Text; // 0x10
	private Texture m_Image; // 0x18
	private string m_Tooltip; // 0x20
	private static readonly GUIContent s_Text; // 0x0
	private static readonly GUIContent s_Image; // 0x8
	private static readonly GUIContent s_TextImage; // 0x10
	public static GUIContent none; // 0x18

	// Methods
	public void .ctor(); // 0x1007B03D8
	public void .ctor(string text); // 0x1007B0454
	public void .ctor(GUIContent src); // 0x1007B04E4
	private static void .cctor(); // 0x1007B0590
	public string get_text(); // 0x1007ABA8C
	public void set_text(string value); // 0x1007ABA94
	internal static GUIContent Temp(string t); // 0x1007AA8E8
	internal static GUIContent Temp(Texture i); // 0x1007B067C
	internal static void ClearStaticCache(); // 0x1007B0738
}

// Namespace: UnityEngine
public class GUILayout // TypeDefIndex: 2298
{
	// Methods
	public static void Label(Texture image, GUILayoutOption[] options); // 0x1007B08D8
	public static void Label(string text, GUILayoutOption[] options); // 0x1007B0A68
	private static void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B0990
	public static bool Button(Texture image, GUILayoutOption[] options); // 0x1007B0B94
	public static bool Button(string text, GUILayoutOption[] options); // 0x1007B0D1C
	private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B0C44
	public static string TextField(string text, GUIStyle style, GUILayoutOption[] options); // 0x1007B0DCC
	public static string TextArea(string text, GUILayoutOption[] options); // 0x1007B1048
	private static string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options); // 0x1007B0DE8
	public static bool Toggle(bool value, string text, GUILayoutOption[] options); // 0x1007B1144
	private static bool DoToggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B1204
	public static float HorizontalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options); // 0x1007B12EC
	private static float DoHorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options); // 0x1007B13A8
	public static void Space(float pixels); // 0x1007B14DC
	public static void FlexibleSpace(); // 0x1007B1838
	public static void BeginHorizontal(GUILayoutOption[] options); // 0x1007B1AD4
	public static void BeginHorizontal(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B1B70
	public static void EndHorizontal(); // 0x1007B1FC0
	public static void BeginVertical(GUILayoutOption[] options); // 0x1007B212C
	public static void BeginVertical(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B21C8
	public static void EndVertical(); // 0x1007B2360
	public static GUILayoutOption Width(float width); // 0x1007AF888
	public static GUILayoutOption MinWidth(float minWidth); // 0x1007B23F8
	public static GUILayoutOption Height(float height); // 0x1007AF91C
	public static GUILayoutOption ExpandWidth(bool expand); // 0x1007B1A44
	public static GUILayoutOption ExpandHeight(bool expand); // 0x1007B19B4
}

// Namespace: UnityEngine
public class GUILayoutUtility // TypeDefIndex: 2299
{
	// Fields
	private static Dictionary`2<int, LayoutCache> s_StoredLayouts; // 0x0
	private static Dictionary`2<int, LayoutCache> s_StoredWindows; // 0x8
	internal static LayoutCache current; // 0x10
	private static readonly Rect kDummyRect; // 0x18
	private static GUIStyle s_SpaceStyle; // 0x28

	// Methods
	private static void .cctor(); // 0x1007B6EB8
	internal static LayoutCache SelectIDList(int instanceID, bool isWindow); // 0x1007AF734
	internal static void Begin(int instanceID); // 0x1007B7098
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options); // 0x1007AF9B4
	public static void EndGroup(string groupName); // 0x1007B201C
	internal static void Layout(); // 0x1007AFCC0
	internal static void LayoutFromEditorWindow(); // 0x1007B77C8
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel); // 0x1007B72D8
	private static void LayoutSingleGroup(GUILayoutGroup i); // 0x1007B74D4
	private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType); // 0x1007B7AA0
	internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType); // 0x1007B1D04
	internal static void EndLayoutGroup(); // 0x1007B2020
	public static Rect GetRect(GUIContent content, GUIStyle style); // 0x1007B7BA8
	public static Rect GetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B0B18
	private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options); // 0x1007B7C20
	public static Rect GetRect(float width, float height, GUIStyle style, GUILayoutOption[] options); // 0x1007B17A4
	private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options); // 0x1007B8114
	internal static GUIStyle get_spaceStyle(); // 0x1007B16B4
	private static Rect Internal_GetWindowRect(int windowID); // 0x1007B79A4
	private static void INTERNAL_CALL_Internal_GetWindowRect(int windowID, out Rect value); // 0x1007B836C
	private static void Internal_MoveWindow(int windowID, Rect r); // 0x1007B7A24
	private static void INTERNAL_CALL_Internal_MoveWindow(int windowID, Rect r); // 0x1007B83E0
}

// Namespace: 
internal sealed class LayoutCache // TypeDefIndex: 2300
{
	// Fields
	internal GUILayoutGroup topLevel; // 0x10
	internal GenericStack layoutGroups; // 0x18
	internal GUILayoutGroup windows; // 0x20

	// Methods
	internal void .ctor(); // 0x1007B6FB0
}

// Namespace: UnityEngine
internal class GUILayoutEntry // TypeDefIndex: 2301
{
	// Fields
	public float minWidth; // 0x10
	public float maxWidth; // 0x14
	public float minHeight; // 0x18
	public float maxHeight; // 0x1C
	public Rect rect; // 0x20
	public int stretchWidth; // 0x30
	public int stretchHeight; // 0x34
	private GUIStyle m_Style; // 0x38
	internal static Rect kDummyRect; // 0x0
	protected static int indent; // 0x10

	// Methods
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style); // 0x1007B2490
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options); // 0x1007B25F8
	private static void .cctor(); // 0x1007B2708
	public GUIStyle get_style(); // 0x1007B2790
	public void set_style(GUIStyle value); // 0x1007B2598
	public virtual RectOffset get_margin(); // 0x1007B2798
	public virtual void CalcWidth(); // 0x1007B27B0
	public virtual void CalcHeight(); // 0x1007B27B4
	public virtual void SetHorizontal(float x, float width); // 0x1007B27B8
	public virtual void SetVertical(float y, float height); // 0x1007B27F8
	protected virtual void ApplyStyleSettings(GUIStyle style); // 0x1007B2838
	public virtual void ApplyOptions(GUILayoutOption[] options); // 0x1007B298C
	public override string ToString(); // 0x1007B2BE8
}

// Namespace: UnityEngine
internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2302
{
	// Fields
	public List`1<GUILayoutEntry> entries; // 0x40
	public bool isVertical; // 0x48
	public bool resetCoords; // 0x49
	public float spacing; // 0x4C
	public bool sameSize; // 0x50
	public bool isWindow; // 0x51
	public int windowID; // 0x54
	private int m_Cursor; // 0x58
	protected int m_StretchableCountX; // 0x5C
	protected int m_StretchableCountY; // 0x60
	protected bool m_UserSpecifiedWidth; // 0x64
	protected bool m_UserSpecifiedHeight; // 0x65
	protected float m_ChildMinWidth; // 0x68
	protected float m_ChildMaxWidth; // 0x6C
	protected float m_ChildMinHeight; // 0x70
	protected float m_ChildMaxHeight; // 0x74
	private readonly RectOffset m_Margin; // 0x78

	// Methods
	public void .ctor(); // 0x1007B3394
	public override RectOffset get_margin(); // 0x1007B34A8
	public override void ApplyOptions(GUILayoutOption[] options); // 0x1007B34B0
	protected override void ApplyStyleSettings(GUIStyle style); // 0x1007B3608
	public void ResetCursor(); // 0x1007B36D8
	public GUILayoutEntry GetNext(); // 0x1007B36E0
	public void Add(GUILayoutEntry e); // 0x1007B3A54
	public override void CalcWidth(); // 0x1007B3ABC
	public override void SetHorizontal(float x, float width); // 0x1007B44A0
	public override void CalcHeight(); // 0x1007B52D4
	public override void SetVertical(float y, float height); // 0x1007B5BD4
	public override string ToString(); // 0x1007B6970
}

// Namespace: UnityEngine
internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2303
{
	// Fields
	public float calcMinWidth; // 0x80
	public float calcMaxWidth; // 0x84
	public float calcMinHeight; // 0x88
	public float calcMaxHeight; // 0x8C
	public float clientWidth; // 0x90
	public float clientHeight; // 0x94
	public bool allowHorizontalScroll; // 0x98
	public bool allowVerticalScroll; // 0x99
	public bool needsHorizontalScrollbar; // 0x9A
	public bool needsVerticalScrollbar; // 0x9B
	public GUIStyle horizontalScrollbar; // 0xA0
	public GUIStyle verticalScrollbar; // 0xA8

	// Methods
	public void .ctor(); // 0x1007B8454
	public override void CalcWidth(); // 0x1007B8460
	public override void SetHorizontal(float x, float width); // 0x1007B84E4
	public override void CalcHeight(); // 0x1007B85E4
	public override void SetVertical(float y, float height); // 0x1007B86BC
}

// Namespace: UnityEngine
internal sealed class GUIWordWrapSizer : GUILayoutEntry // TypeDefIndex: 2304
{
	// Fields
	private readonly GUIContent m_Content; // 0x40
	private readonly float m_ForcedMinHeight; // 0x48
	private readonly float m_ForcedMaxHeight; // 0x4C

	// Methods
	public void .ctor(GUIStyle style, GUIContent content, GUILayoutOption[] options); // 0x1007B7F84
	public override void CalcWidth(); // 0x1007BDD00
	public override void CalcHeight(); // 0x1007BDD84
}

// Namespace: UnityEngine
public sealed class GUILayoutOption // TypeDefIndex: 2305
{
	// Fields
	internal Type type; // 0x10
	internal object value; // 0x18

	// Methods
	internal void .ctor(Type type, object value); // 0x1007B23BC
}

// Namespace: 
internal sealed class Type : Enum // TypeDefIndex: 2306
{
	// Fields
	public int value__; // 0x10
	public const Type fixedWidth = 0; // 0x0
	public const Type fixedHeight = 1; // 0x0
	public const Type minWidth = 2; // 0x0
	public const Type maxWidth = 3; // 0x0
	public const Type minHeight = 4; // 0x0
	public const Type maxHeight = 5; // 0x0
	public const Type stretchWidth = 6; // 0x0
	public const Type stretchHeight = 7; // 0x0
	public const Type alignStart = 8; // 0x0
	public const Type alignMiddle = 9; // 0x0
	public const Type alignEnd = 10; // 0x0
	public const Type alignJustify = 11; // 0x0
	public const Type equalSize = 12; // 0x0
	public const Type spacing = 13; // 0x0

}

// Namespace: UnityEngine
public sealed class GUISettings // TypeDefIndex: 2307
{
	// Fields
	private bool m_DoubleClickSelectsWord; // 0x10
	private bool m_TripleClickSelectsLine; // 0x11
	private Color m_CursorColor; // 0x14
	private float m_CursorFlashSpeed; // 0x24
	private Color m_SelectionColor; // 0x28

	// Methods
	public void .ctor(); // 0x1007B8868
	public bool get_doubleClickSelectsWord(); // 0x1007AC7D8
	public bool get_tripleClickSelectsLine(); // 0x1007AC7E0
	public Color get_cursorColor(); // 0x1007B88E8
	public float get_cursorFlashSpeed(); // 0x1007B88F4
	public Color get_selectionColor(); // 0x1007B8960
	private static float Internal_GetCursorFlashSpeed(); // 0x1007B8908
}

// Namespace: UnityEngine
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2308
{
	// Fields
	private Font m_Font; // 0x18
	private GUIStyle m_box; // 0x20
	private GUIStyle m_button; // 0x28
	private GUIStyle m_toggle; // 0x30
	private GUIStyle m_label; // 0x38
	private GUIStyle m_textField; // 0x40
	private GUIStyle m_textArea; // 0x48
	private GUIStyle m_window; // 0x50
	private GUIStyle m_horizontalSlider; // 0x58
	private GUIStyle m_horizontalSliderThumb; // 0x60
	private GUIStyle m_verticalSlider; // 0x68
	private GUIStyle m_verticalSliderThumb; // 0x70
	private GUIStyle m_horizontalScrollbar; // 0x78
	private GUIStyle m_horizontalScrollbarThumb; // 0x80
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x88
	private GUIStyle m_horizontalScrollbarRightButton; // 0x90
	private GUIStyle m_verticalScrollbar; // 0x98
	private GUIStyle m_verticalScrollbarThumb; // 0xA0
	private GUIStyle m_verticalScrollbarUpButton; // 0xA8
	private GUIStyle m_verticalScrollbarDownButton; // 0xB0
	private GUIStyle m_ScrollView; // 0xB8
	internal GUIStyle[] m_CustomStyles; // 0xC0
	private GUISettings m_Settings; // 0xC8
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary`2<string, GUIStyle> m_Styles; // 0xD0
	internal static SkinChangedDelegate m_SkinChanged; // 0x8
	internal static GUISkin current; // 0x10

	// Methods
	public void .ctor(); // 0x1007B896C
	internal void OnEnable(); // 0x1007B89F8
	internal static void CleanupRoots(); // 0x1007B8A80
	public Font get_font(); // 0x1007AC7EC
	public void set_font(Font value); // 0x1007B8AD4
	public GUIStyle get_box(); // 0x1007B8C04
	public void set_box(GUIStyle value); // 0x1007B8C0C
	public GUIStyle get_label(); // 0x1007B0988
	public void set_label(GUIStyle value); // 0x1007B8C14
	public GUIStyle get_textField(); // 0x1007B8C1C
	public void set_textField(GUIStyle value); // 0x1007B8C24
	public GUIStyle get_textArea(); // 0x1007B10D4
	public void set_textArea(GUIStyle value); // 0x1007B8C2C
	public GUIStyle get_button(); // 0x1007AAE7C
	public void set_button(GUIStyle value); // 0x1007B8C34
	public GUIStyle get_toggle(); // 0x1007B11FC
	public void set_toggle(GUIStyle value); // 0x1007B8C3C
	public GUIStyle get_window(); // 0x1007AF2D8
	public void set_window(GUIStyle value); // 0x1007B8C44
	public GUIStyle get_horizontalSlider(); // 0x1007B1398
	public void set_horizontalSlider(GUIStyle value); // 0x1007B8C4C
	public GUIStyle get_horizontalSliderThumb(); // 0x1007B13A0
	public void set_horizontalSliderThumb(GUIStyle value); // 0x1007B8C54
	public GUIStyle get_verticalSlider(); // 0x1007B8C5C
	public void set_verticalSlider(GUIStyle value); // 0x1007B8C64
	public GUIStyle get_verticalSliderThumb(); // 0x1007B8C6C
	public void set_verticalSliderThumb(GUIStyle value); // 0x1007B8C74
	public GUIStyle get_horizontalScrollbar(); // 0x1007ADDA4
	public void set_horizontalScrollbar(GUIStyle value); // 0x1007B8C7C
	public GUIStyle get_horizontalScrollbarThumb(); // 0x1007B8C84
	public void set_horizontalScrollbarThumb(GUIStyle value); // 0x1007B8C8C
	public GUIStyle get_horizontalScrollbarLeftButton(); // 0x1007B8C94
	public void set_horizontalScrollbarLeftButton(GUIStyle value); // 0x1007B8C9C
	public GUIStyle get_horizontalScrollbarRightButton(); // 0x1007B8CA4
	public void set_horizontalScrollbarRightButton(GUIStyle value); // 0x1007B8CAC
	public GUIStyle get_verticalScrollbar(); // 0x1007ADDAC
	public void set_verticalScrollbar(GUIStyle value); // 0x1007B8CB4
	public GUIStyle get_verticalScrollbarThumb(); // 0x1007B8CBC
	public void set_verticalScrollbarThumb(GUIStyle value); // 0x1007B8CC4
	public GUIStyle get_verticalScrollbarUpButton(); // 0x1007B8CCC
	public void set_verticalScrollbarUpButton(GUIStyle value); // 0x1007B8CD4
	public GUIStyle get_verticalScrollbarDownButton(); // 0x1007B8CDC
	public void set_verticalScrollbarDownButton(GUIStyle value); // 0x1007B8CE4
	public GUIStyle get_scrollView(); // 0x1007ADDB4
	public void set_scrollView(GUIStyle value); // 0x1007B8CEC
	public GUIStyle[] get_customStyles(); // 0x1007B8CF4
	public void set_customStyles(GUIStyle[] value); // 0x1007B8CFC
	public GUISettings get_settings(); // 0x1007AC7D0
	internal static GUIStyle get_error(); // 0x1007B8D04
	internal void Apply(); // 0x1007B89FC
	private void BuildStyleCache(); // 0x1007B8D94
	public GUIStyle GetStyle(string styleName); // 0x1007ACEBC
	public GUIStyle FindStyle(string styleName); // 0x1007B981C
	internal void MakeCurrent(); // 0x1007AA734
	public IEnumerator GetEnumerator(); // 0x1007B99BC
}

// Namespace: 
internal sealed class SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 2309
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007B9A6C
	public virtual void Invoke(); // 0x1007B992C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007B9A88
	public virtual void EndInvoke(IAsyncResult result); // 0x1007B9AE8
}

// Namespace: UnityEngine
public sealed class GUIStyleState // TypeDefIndex: 2310
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly GUIStyle m_SourceStyle; // 0x18
	private Texture2D m_Background; // 0x20

	// Methods
	public void .ctor(); // 0x1007BCF44
	private void .ctor(GUIStyle sourceStyle, IntPtr source); // 0x1007BCFD0
	internal static GUIStyleState ProduceGUIStyleStateFromDeserialization(GUIStyle sourceStyle, IntPtr source); // 0x1007BA108
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source); // 0x1007BA18C
	protected override void Finalize(); // 0x1007BD0D0
	public void set_background(Texture2D value); // 0x1007BD1AC
	private void Init(); // 0x1007BCF6C
	private void Cleanup(); // 0x1007BD148
	private void SetBackgroundInternal(Texture2D value); // 0x1007BD1D4
	private Texture2D GetBackgroundInternalFromDeserialization(); // 0x1007BD008
	private Texture2D GetBackgroundInternal(); // 0x1007BD06C
	public void set_textColor(Color value); // 0x1007B97F4
	private void INTERNAL_set_textColor(Color value); // 0x1007BD248
}

// Namespace: UnityEngine
public sealed class FontStyle : Enum // TypeDefIndex: 2311
{
	// Fields
	public int value__; // 0x10
	public const FontStyle Normal = 0; // 0x0
	public const FontStyle Bold = 1; // 0x0
	public const FontStyle Italic = 2; // 0x0
	public const FontStyle BoldAndItalic = 3; // 0x0

}

// Namespace: UnityEngine
public sealed class ImagePosition : Enum // TypeDefIndex: 2312
{
	// Fields
	public int value__; // 0x10
	public const ImagePosition ImageLeft = 0; // 0x0
	public const ImagePosition ImageAbove = 1; // 0x0
	public const ImagePosition ImageOnly = 2; // 0x0
	public const ImagePosition TextOnly = 3; // 0x0

}

// Namespace: UnityEngine
public sealed class GUIStyle // TypeDefIndex: 2313
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private GUIStyleState m_Normal; // 0x18
	private GUIStyleState m_Hover; // 0x20
	private GUIStyleState m_Active; // 0x28
	private GUIStyleState m_Focused; // 0x30
	private GUIStyleState m_OnNormal; // 0x38
	private GUIStyleState m_OnHover; // 0x40
	private GUIStyleState m_OnActive; // 0x48
	private GUIStyleState m_OnFocused; // 0x50
	private RectOffset m_Border; // 0x58
	private RectOffset m_Padding; // 0x60
	private RectOffset m_Margin; // 0x68
	private RectOffset m_Overflow; // 0x70
	private Font m_FontInternal; // 0x78
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x8

	// Methods
	public void .ctor(); // 0x1007B82D0
	public void .ctor(GUIStyle other); // 0x1007B9CE4
	private static void .cctor(); // 0x1007B9D88
	protected override void Finalize(); // 0x1007B9DDC
	internal static void CleanupRoots(); // 0x1007B9EAC
	internal void InternalOnAfterDeserialize(); // 0x1007B9F14
	public GUIStyleState get_normal(); // 0x1007B97B4
	public void set_normal(GUIStyleState value); // 0x1007BA210
	public GUIStyleState get_hover(); // 0x1007BA2A8
	public void set_hover(GUIStyleState value); // 0x1007BA2E8
	public GUIStyleState get_active(); // 0x1007BA304
	public void set_active(GUIStyleState value); // 0x1007BA344
	public GUIStyleState get_onNormal(); // 0x1007BA360
	public void set_onNormal(GUIStyleState value); // 0x1007BA3A0
	public GUIStyleState get_onHover(); // 0x1007BA3BC
	public void set_onHover(GUIStyleState value); // 0x1007BA3FC
	public GUIStyleState get_onActive(); // 0x1007BA418
	public void set_onActive(GUIStyleState value); // 0x1007BA458
	public GUIStyleState get_focused(); // 0x1007BA474
	public void set_focused(GUIStyleState value); // 0x1007BA4B4
	public GUIStyleState get_onFocused(); // 0x1007BA4D0
	public void set_onFocused(GUIStyleState value); // 0x1007BA510
	public RectOffset get_border(); // 0x1007BA52C
	public void set_border(RectOffset value); // 0x1007BA644
	public RectOffset get_margin(); // 0x1007AEB68
	public void set_margin(RectOffset value); // 0x1007BA6DC
	public RectOffset get_padding(); // 0x1007B43FC
	public void set_padding(RectOffset value); // 0x1007BA6F8
	public RectOffset get_overflow(); // 0x1007BA714
	public void set_overflow(RectOffset value); // 0x1007BA7A0
	public Vector2 get_clipOffset(); // 0x1007BA7BC
	public void set_clipOffset(Vector2 value); // 0x1007BA80C
	public Font get_font(); // 0x1007AC7E8
	public void set_font(Font value); // 0x1007BA8B8
	public float get_lineHeight(); // 0x1007BA954
	private static void Internal_Draw(IntPtr target, Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x1007BAAD4
	public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x1007AECBC
	public void Draw(Rect position, string text, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x1007BAC54
	public void Draw(Rect position, Texture image, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x1007BAD58
	public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus); // 0x1007BAE5C
	public void Draw(Rect position, GUIContent content, int controlID); // 0x1007AAD70
	public void Draw(Rect position, GUIContent content, int controlID, bool on); // 0x1007AC6BC
	public void DrawCursor(Rect position, GUIContent content, int controlID, int Character); // 0x1007BAFD8
	internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition); // 0x1007BB2E0
	public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter); // 0x1007BB63C
	public static GUIStyle get_none(); // 0x1007AEBF4
	public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex); // 0x1007BB644
	public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x1007BB7B0
	internal int GetNumCharactersThatFitWithinWidth(string text, float width); // 0x1007BB904
	public Vector2 CalcSize(GUIContent content); // 0x1007BBA10
	internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints); // 0x1007B806C
	public Vector2 CalcScreenSize(Vector2 contentSize); // 0x1007BBBAC
	public float CalcHeight(GUIContent content, float width); // 0x1007BBD40
	public bool get_isHeightDependantOnWidth(); // 0x1007B7F38
	public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth); // 0x1007BBF14
	public override string ToString(); // 0x1007BC030
	private void Init(); // 0x1007B9C80
	private void InitCopy(GUIStyle other); // 0x1007B9D14
	private void Cleanup(); // 0x1007B9E48
	public string get_name(); // 0x1007ACE58
	public void set_name(string value); // 0x1007B96CC
	private IntPtr GetStyleStatePtr(int idx); // 0x1007BA07C
	private static void INTERNAL_CALL_GetStyleStatePtr(GUIStyle self, int idx, out IntPtr value); // 0x1007BC0F4
	private void AssignStyleState(int idx, IntPtr srcStyleState); // 0x1007BA22C
	private IntPtr GetRectOffsetPtr(int idx); // 0x1007BA5B8
	private static void INTERNAL_CALL_GetRectOffsetPtr(GUIStyle self, int idx, out IntPtr value); // 0x1007BC170
	private void AssignRectOffset(int idx, IntPtr srcRectOffset); // 0x1007BA660
	public ImagePosition get_imagePosition(); // 0x1007BBEB0
	public void set_imagePosition(ImagePosition value); // 0x1007BC1EC
	public TextAnchor get_alignment(); // 0x1007BC260
	public void set_alignment(TextAnchor value); // 0x1007BC2C4
	public bool get_wordWrap(); // 0x1007BBE4C
	public void set_wordWrap(bool value); // 0x1007BC338
	public TextClipping get_clipping(); // 0x1007BC3AC
	public void set_clipping(TextClipping value); // 0x1007BC410
	public Vector2 get_contentOffset(); // 0x1007BC484
	public void set_contentOffset(Vector2 value); // 0x1007BC520
	private void INTERNAL_get_contentOffset(out Vector2 value); // 0x1007BC4AC
	private void INTERNAL_set_contentOffset(Vector2 value); // 0x1007BC544
	internal Vector2 get_Internal_clipOffset(); // 0x1007BA7E4
	internal void set_Internal_clipOffset(Vector2 value); // 0x1007BA830
	private void INTERNAL_get_Internal_clipOffset(out Vector2 value); // 0x1007BC5B8
	private void INTERNAL_set_Internal_clipOffset(Vector2 value); // 0x1007BC62C
	public float get_fixedWidth(); // 0x1007ADBCC
	public void set_fixedWidth(float value); // 0x1007BC6A0
	public float get_fixedHeight(); // 0x1007ADC30
	public void set_fixedHeight(float value); // 0x1007BC714
	public bool get_stretchWidth(); // 0x1007B28C4
	public void set_stretchWidth(bool value); // 0x1007B82F8
	public bool get_stretchHeight(); // 0x1007B2928
	public void set_stretchHeight(bool value); // 0x1007B9740
	private static float Internal_GetLineHeight(IntPtr target); // 0x1007BAA70
	private void SetFontInternal(Font value); // 0x1007BA8E0
	private Font GetFontInternalDuringLoadingThread(); // 0x1007BA018
	private Font GetFontInternal(); // 0x1007BA854
	public int get_fontSize(); // 0x1007BC788
	public void set_fontSize(int value); // 0x1007BC7EC
	public FontStyle get_fontStyle(); // 0x1007BC860
	public void set_fontStyle(FontStyle value); // 0x1007BC8C4
	public bool get_richText(); // 0x1007BC938
	public void set_richText(bool value); // 0x1007BC99C
	private static void Internal_Draw(GUIContent content, Internal_DrawArguments arguments); // 0x1007BABE0
	private static void Internal_Draw2(IntPtr style, Rect position, GUIContent content, int controlID, bool on); // 0x1007BAF34
	private static void INTERNAL_CALL_Internal_Draw2(IntPtr style, Rect position, GUIContent content, int controlID, bool on); // 0x1007BCA10
	private static void Internal_DrawPrefixLabel(IntPtr style, Rect position, GUIContent content, int controlID, bool on); // 0x1007BCAA4
	private static void INTERNAL_CALL_Internal_DrawPrefixLabel(IntPtr style, Rect position, GUIContent content, int controlID, bool on); // 0x1007BCB48
	private static float Internal_GetCursorFlashOffset(); // 0x1007BB1E8
	private static void Internal_DrawCursor(IntPtr target, Rect position, GUIContent content, int pos, Color cursorColor); // 0x1007BB240
	private static void INTERNAL_CALL_Internal_DrawCursor(IntPtr target, Rect position, GUIContent content, int pos, Color cursorColor); // 0x1007BCBDC
	private static void Internal_DrawWithTextSelection(GUIContent content, Internal_DrawWithTextSelectionArguments arguments); // 0x1007BB5C8
	internal static void SetDefaultFont(Font font); // 0x1007B8BA0
	internal static void Internal_GetCursorPixelPosition(IntPtr target, Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret); // 0x1007BB70C
	private static void INTERNAL_CALL_Internal_GetCursorPixelPosition(IntPtr target, Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret); // 0x1007BCC70
	internal static int Internal_GetCursorStringIndex(IntPtr target, Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x1007BB870
	private static int INTERNAL_CALL_Internal_GetCursorStringIndex(IntPtr target, Rect position, GUIContent content, Vector2 cursorPixelPosition); // 0x1007BCD04
	internal static int Internal_GetNumCharactersThatFitWithinWidth(IntPtr target, string text, float width); // 0x1007BB98C
	internal static void Internal_CalcSize(IntPtr target, GUIContent content, out Vector2 ret); // 0x1007BBAA0
	internal static void Internal_CalcSizeWithConstraints(IntPtr target, GUIContent content, Vector2 maxSize, out Vector2 ret); // 0x1007BBB1C
	private static void INTERNAL_CALL_Internal_CalcSizeWithConstraints(IntPtr target, GUIContent content, Vector2 maxSize, out Vector2 ret); // 0x1007BCD90
	private static float Internal_CalcHeight(IntPtr target, GUIContent content, float width); // 0x1007BBDC8
	private static void Internal_CalcMinMaxWidth(IntPtr target, GUIContent content, out float minWidth, out float maxWidth); // 0x1007BBFA4
	public static GUIStyle op_Implicit(string str); // 0x1007BCE1C
}

// Namespace: UnityEngine
public sealed class TextClipping : Enum // TypeDefIndex: 2314
{
	// Fields
	public int value__; // 0x10
	public const TextClipping Overflow = 0; // 0x0
	public const TextClipping Clip = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class ExitGUIException : Exception // TypeDefIndex: 2315
{
}

// Namespace: UnityEngine
public sealed class FocusType : Enum // TypeDefIndex: 2316
{
	// Fields
	public int value__; // 0x10
	public const FocusType Native = 0; // 0x0
	public const FocusType Keyboard = 1; // 0x0
	public const FocusType Passive = 2; // 0x0

}

// Namespace: UnityEngine
public class GUIUtility // TypeDefIndex: 2317
{
	// Fields
	internal static int s_SkinMode; // 0x0
	internal static int s_OriginalID; // 0x4
	internal static Vector2 s_EditorScreenPointOffset; // 0x8
	internal static bool s_HasKeyboardFocus; // 0x10
	private static bool <guiIsExiting>k__BackingField; // 0x11

	// Methods
	private static void .cctor(); // 0x1007BD480
	internal static float get_pixelsPerPoint(); // 0x1007B727C
	public static int GetControlID(FocusType focus); // 0x1007B10DC
	public static int GetControlID(int hint, FocusType focus, Rect position); // 0x1007AB430
	public static object GetStateObject(Type t, int controlID); // 0x1007ABA9C
	internal static void set_guiIsExiting(bool value); // 0x1007BD5CC
	public static int get_hotControl(); // 0x1007AB538
	public static void set_hotControl(int value); // 0x1007AB4D4
	internal static GUISkin GetDefaultSkin(); // 0x1007AA6CC
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout); // 0x1007BD758
	internal static void EndGUI(int layoutType); // 0x1007BD858
	internal static bool EndGUIFromException(Exception exception); // 0x1007BDAA0
	internal static void CheckOnGUI(); // 0x1007AA4D4
	private static float Internal_GetPixelsPerPoint(); // 0x1007BD4E8
	public static int GetControlID(int hint, FocusType focus); // 0x1007AACFC
	private static int Internal_GetNextControlID2(int hint, FocusType focusType, Rect rect); // 0x1007BD540
	private static int INTERNAL_CALL_Internal_GetNextControlID2(int hint, FocusType focusType, Rect rect); // 0x1007BDBC8
	private static int Internal_GetHotControl(); // 0x1007BD638
	private static void Internal_SetHotControl(int value); // 0x1007BD690
	public static int get_keyboardControl(); // 0x1007AC59C
	public static void set_keyboardControl(int value); // 0x1007AC5F4
	public static string get_systemCopyBuffer(); // 0x1007BDC44
	public static void set_systemCopyBuffer(string value); // 0x1007BDC9C
	private static GUISkin Internal_GetDefaultSkin(int skinMode); // 0x1007BD6F4
	private static void Internal_ExitGUI(); // 0x1007BDA48
	internal static int Internal_GetGUIDepth(); // 0x1007BDB70
	internal static void set_textFieldInput(bool value); // 0x1007AC84C
}

// Namespace: UnityEngine
internal sealed class GUIClip // TypeDefIndex: 2318
{
	// Methods
	internal static void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x1007AEDCC
	private static void INTERNAL_CALL_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset); // 0x1007B02E8
	internal static void Pop(); // 0x1007AF168
	internal static void SetMatrix(Matrix4x4 m); // 0x1007AA814
	private static void INTERNAL_CALL_SetMatrix(Matrix4x4 m); // 0x1007B0374
}

// Namespace: UnityEngine
internal class SliderState // TypeDefIndex: 2319
{
	// Fields
	public float dragStartPos; // 0x10
	public float dragStartValue; // 0x14
	public bool isDragging; // 0x18

	// Methods
	public void .ctor(); // 0x1007D889C
}

// Namespace: UnityEngine
internal struct SliderHandler // TypeDefIndex: 2320
{
	// Fields
	private readonly Rect position; // 0x10
	private readonly float currentValue; // 0x20
	private readonly float size; // 0x24
	private readonly float start; // 0x28
	private readonly float end; // 0x2C
	private readonly GUIStyle slider; // 0x30
	private readonly GUIStyle thumb; // 0x38
	private readonly bool horiz; // 0x40
	private readonly int id; // 0x44

	// Methods
	public void .ctor(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id); // 0x1007D734C
	public float Handle(); // 0x1007D7D80
	private float OnMouseDown(); // 0x1007D8188
	private float OnMouseDrag(); // 0x1007D826C
	private float OnMouseUp(); // 0x1007D8274
	private float OnRepaint(); // 0x1007D82A0
	private EventType CurrentEventType(); // 0x1007D82A8
	private int CurrentScrollTroughSide(); // 0x1007D82B0
	private bool IsEmptySlider(); // 0x1007D82B8
	private bool SupportsPageMovements(); // 0x1007D82C8
	private float PageMovementValue(); // 0x1007D8310
	private float PageUpMovementBound(); // 0x1007D8318
	private Event CurrentEvent(); // 0x1007D8320
	private float ValueForCurrentMousePosition(); // 0x1007D832C
	private float Clamp(float value); // 0x1007D8438
	private Rect ThumbSelectionRect(); // 0x1007D8440
	private void StartDraggingWithValue(float dragStartValue); // 0x1007D8448
	private SliderState SliderState(); // 0x1007D8450
	private Rect ThumbRect(); // 0x1007D8770
	private Rect VerticalThumbRect(); // 0x1007D8820
	private Rect HorizontalThumbRect(); // 0x1007D8828
	private float ClampedCurrentValue(); // 0x1007D8830
	private float MousePosition(); // 0x1007D8840
	private float ValuesPerPixel(); // 0x1007D8848
	private float ThumbSize(); // 0x1007D8850
	private float MaxValue(); // 0x1007D8858
	private float MinValue(); // 0x1007D8860
}

// Namespace: UnityEngine
public class GUITargetAttribute : Attribute // TypeDefIndex: 2321
{
	// Fields
	internal int displayMask; // 0x10

	// Methods
	private static int GetGUITargetAttrValue(Type klass, string methodName); // 0x1007BD2F0
}

// Namespace: UnityEngine
public class TextEditor // TypeDefIndex: 2322
{
	// Fields
	public TouchScreenKeyboard keyboardOnScreen; // 0x10
	public int controlID; // 0x18
	public GUIStyle style; // 0x20
	public bool multiline; // 0x28
	public bool hasHorizontalCursorPos; // 0x29
	public bool isPasswordField; // 0x2A
	internal bool m_HasFocus; // 0x2B
	public Vector2 scrollOffset; // 0x2C
	private GUIContent m_Content; // 0x38
	private Rect m_Position; // 0x40
	private int m_CursorIndex; // 0x50
	private int m_SelectIndex; // 0x54
	private bool m_RevealCursor; // 0x58
	public Vector2 graphicalCursorPos; // 0x5C
	public Vector2 graphicalSelectCursorPos; // 0x64
	private bool m_MouseDragSelectsWholeWords; // 0x6C
	private int m_DblClickInitPos; // 0x70
	private DblClickSnapping m_DblClickSnap; // 0x74
	private bool m_bJustSelected; // 0x75
	private int m_iAltCursorPos; // 0x78
	private string oldText; // 0x80
	private int oldPos; // 0x88
	private int oldSelectPos; // 0x8C
	private static Dictionary`2<Event, TextEditOp> s_Keyactions; // 0x0

	// Methods
	public void .ctor(); // 0x1007E00F0
	public string get_text(); // 0x1007E01A0
	public void set_text(string value); // 0x1007E01BC
	public Rect get_position(); // 0x1007E02A4
	public void set_position(Rect value); // 0x1007E02B0
	public int get_cursorIndex(); // 0x1007E0744
	public void set_cursorIndex(int value); // 0x1007E074C
	public int get_selectIndex(); // 0x1007E0798
	public void set_selectIndex(int value); // 0x1007E07A0
	private void ClearCursorPos(); // 0x1007E07B0
	public void OnFocus(); // 0x1007E07C0
	public void OnLostFocus(); // 0x1007E08BC
	private void GrabGraphicalCursorPos(); // 0x1007E08C8
	public bool HandleKeyEvent(Event e); // 0x1007E0940
	public bool DeleteLineBack(); // 0x1007E1560
	public bool DeleteWordBack(); // 0x1007E18A4
	public bool DeleteWordForward(); // 0x1007E1A5C
	public bool Delete(); // 0x1007E1CA0
	public bool Backspace(); // 0x1007E1D34
	public void SelectAll(); // 0x1007E083C
	public void SelectNone(); // 0x1007E1E1C
	public bool get_hasSelection(); // 0x1007E1674
	public bool DeleteSelection(); // 0x1007E1684
	public void ReplaceSelection(string replace); // 0x1007E1E54
	public void Insert(char c); // 0x1007E1F18
	public void MoveRight(); // 0x1007E1F58
	public void MoveLeft(); // 0x1007E2104
	public void MoveUp(); // 0x1007E21B0
	public void MoveDown(); // 0x1007E22B0
	public void MoveLineStart(); // 0x1007E23E0
	public void MoveLineEnd(); // 0x1007E24BC
	public void MoveGraphicalLineStart(); // 0x1007E25AC
	public void MoveGraphicalLineEnd(); // 0x1007E2698
	public void MoveTextStart(); // 0x1007E2790
	public void MoveTextEnd(); // 0x1007E27E8
	private int IndexOfEndOfLine(int startIndex); // 0x1007E285C
	public void MoveParagraphForward(); // 0x1007E28BC
	public void MoveParagraphBackward(); // 0x1007E29A4
	public void MoveCursorToPosition(Vector2 cursorPosition); // 0x1007E2AA0
	public void SelectToPosition(Vector2 cursorPosition); // 0x1007E2B5C
	public void SelectLeft(); // 0x1007E2F84
	public void SelectRight(); // 0x1007E302C
	public void SelectUp(); // 0x1007E30D4
	public void SelectDown(); // 0x1007E315C
	public void SelectTextEnd(); // 0x1007E3200
	public void SelectTextStart(); // 0x1007E3264
	public void MouseDragSelectsWholeWords(bool on); // 0x1007E32B0
	public void DblClickSnap(DblClickSnapping snapping); // 0x1007E32C0
	private int GetGraphicalLineStart(int p); // 0x1007E2634
	private int GetGraphicalLineEnd(int p); // 0x1007E2720
	private int FindNextSeperator(int startPos); // 0x1007E32C8
	private static bool isLetterLikeChar(char c); // 0x1007E3378
	private int FindPrevSeperator(int startPos); // 0x1007E33F4
	public void MoveWordRight(); // 0x1007E3488
	public void MoveToStartOfNextWord(); // 0x1007E3540
	public void MoveToEndOfPreviousWord(); // 0x1007E35E0
	public void SelectToStartOfNextWord(); // 0x1007E3680
	public void SelectToEndOfPreviousWord(); // 0x1007E36E4
	private CharacterType ClassifyChar(char c); // 0x1007E3748
	public int FindStartOfNextWord(int p); // 0x1007E1B08
	private int FindEndOfPreviousWord(int p); // 0x1007E198C
	public void MoveWordLeft(); // 0x1007E3800
	public void SelectWordRight(); // 0x1007E38A4
	public void SelectWordLeft(); // 0x1007E3948
	public void ExpandSelectGraphicalLineStart(); // 0x1007E39EC
	public void ExpandSelectGraphicalLineEnd(); // 0x1007E3AB8
	public void SelectGraphicalLineStart(); // 0x1007E3B84
	public void SelectGraphicalLineEnd(); // 0x1007E3BE8
	public void SelectParagraphForward(); // 0x1007E3C4C
	public void SelectParagraphBackward(); // 0x1007E3D1C
	public void SelectCurrentWord(); // 0x1007E3E44
	private int FindEndOfClassification(int p, int dir); // 0x1007E2EB4
	public void SelectCurrentParagraph(); // 0x1007E3FBC
	public void UpdateScrollOffsetIfNeeded(); // 0x1007E4090
	private void UpdateScrollOffset(); // 0x1007E033C
	public void DrawCursor(string newText); // 0x1007E410C
	private bool PerformOperation(TextEditOp operation); // 0x1007E1114
	public void SaveBackup(); // 0x1007E4760
	public bool Cut(); // 0x1007E4568
	public void Copy(); // 0x1007E45A8
	private static string ReplaceNewlinesWithSpaces(string value); // 0x1007E4788
	public bool Paste(); // 0x1007E4684
	private static void MapKey(string key, TextEditOp action); // 0x1007E4818
	private void InitKeyActions(); // 0x1007E0A50
	public void DetectFocusChange(); // 0x1007E2018
	private void ClampTextIndex(int index); // 0x1007E0200
}

// Namespace: 
public sealed class DblClickSnapping : Enum // TypeDefIndex: 2323
{
	// Fields
	public byte value__; // 0x10
	public const DblClickSnapping WORDS = 0; // 0x0
	public const DblClickSnapping PARAGRAPHS = 1; // 0x0

}

// Namespace: 
private sealed class CharacterType : Enum // TypeDefIndex: 2324
{
	// Fields
	public int value__; // 0x10
	public const CharacterType LetterLike = 0; // 0x0
	public const CharacterType Symbol = 1; // 0x0
	public const CharacterType Symbol2 = 2; // 0x0
	public const CharacterType WhiteSpace = 3; // 0x0

}

// Namespace: 
private sealed class TextEditOp : Enum // TypeDefIndex: 2325
{
	// Fields
	public int value__; // 0x10
	public const TextEditOp MoveLeft = 0; // 0x0
	public const TextEditOp MoveRight = 1; // 0x0
	public const TextEditOp MoveUp = 2; // 0x0
	public const TextEditOp MoveDown = 3; // 0x0
	public const TextEditOp MoveLineStart = 4; // 0x0
	public const TextEditOp MoveLineEnd = 5; // 0x0
	public const TextEditOp MoveTextStart = 6; // 0x0
	public const TextEditOp MoveTextEnd = 7; // 0x0
	public const TextEditOp MovePageUp = 8; // 0x0
	public const TextEditOp MovePageDown = 9; // 0x0
	public const TextEditOp MoveGraphicalLineStart = 10; // 0x0
	public const TextEditOp MoveGraphicalLineEnd = 11; // 0x0
	public const TextEditOp MoveWordLeft = 12; // 0x0
	public const TextEditOp MoveWordRight = 13; // 0x0
	public const TextEditOp MoveParagraphForward = 14; // 0x0
	public const TextEditOp MoveParagraphBackward = 15; // 0x0
	public const TextEditOp MoveToStartOfNextWord = 16; // 0x0
	public const TextEditOp MoveToEndOfPreviousWord = 17; // 0x0
	public const TextEditOp SelectLeft = 18; // 0x0
	public const TextEditOp SelectRight = 19; // 0x0
	public const TextEditOp SelectUp = 20; // 0x0
	public const TextEditOp SelectDown = 21; // 0x0
	public const TextEditOp SelectTextStart = 22; // 0x0
	public const TextEditOp SelectTextEnd = 23; // 0x0
	public const TextEditOp SelectPageUp = 24; // 0x0
	public const TextEditOp SelectPageDown = 25; // 0x0
	public const TextEditOp ExpandSelectGraphicalLineStart = 26; // 0x0
	public const TextEditOp ExpandSelectGraphicalLineEnd = 27; // 0x0
	public const TextEditOp SelectGraphicalLineStart = 28; // 0x0
	public const TextEditOp SelectGraphicalLineEnd = 29; // 0x0
	public const TextEditOp SelectWordLeft = 30; // 0x0
	public const TextEditOp SelectWordRight = 31; // 0x0
	public const TextEditOp SelectToEndOfPreviousWord = 32; // 0x0
	public const TextEditOp SelectToStartOfNextWord = 33; // 0x0
	public const TextEditOp SelectParagraphBackward = 34; // 0x0
	public const TextEditOp SelectParagraphForward = 35; // 0x0
	public const TextEditOp Delete = 36; // 0x0
	public const TextEditOp Backspace = 37; // 0x0
	public const TextEditOp DeleteWordBack = 38; // 0x0
	public const TextEditOp DeleteWordForward = 39; // 0x0
	public const TextEditOp DeleteLineBack = 40; // 0x0
	public const TextEditOp Cut = 41; // 0x0
	public const TextEditOp Copy = 42; // 0x0
	public const TextEditOp Paste = 43; // 0x0
	public const TextEditOp SelectAll = 44; // 0x0
	public const TextEditOp SelectNone = 45; // 0x0
	public const TextEditOp ScrollStart = 46; // 0x0
	public const TextEditOp ScrollEnd = 47; // 0x0
	public const TextEditOp ScrollPageUp = 48; // 0x0
	public const TextEditOp ScrollPageDown = 49; // 0x0

}

// Namespace: UnityEngine
internal struct Internal_DrawArguments // TypeDefIndex: 2326
{
	// Fields
	public IntPtr target; // 0x10
	public Rect position; // 0x18
	public int isHover; // 0x28
	public int isActive; // 0x2C
	public int on; // 0x30
	public int hasKeyboardFocus; // 0x34

}

// Namespace: UnityEngine
internal struct Internal_DrawWithTextSelectionArguments // TypeDefIndex: 2327
{
	// Fields
	public IntPtr target; // 0x10
	public Rect position; // 0x18
	public int firstPos; // 0x28
	public int lastPos; // 0x2C
	public Color cursorColor; // 0x30
	public Color selectionColor; // 0x40
	public int isHover; // 0x50
	public int isActive; // 0x54
	public int on; // 0x58
	public int hasKeyboardFocus; // 0x5C
	public int drawSelectionAsComposition; // 0x60

}

// Namespace: UnityEngine.Networking
public sealed class UnityWebRequest : IDisposable // TypeDefIndex: 2328
{
	// Fields
	public const string kHttpVerbGET = "GET"; // 0x0
	public const string kHttpVerbHEAD = "HEAD"; // 0x0
	public const string kHttpVerbPOST = "POST"; // 0x0
	public const string kHttpVerbPUT = "PUT"; // 0x0
	public const string kHttpVerbCREATE = "CREATE"; // 0x0
	public const string kHttpVerbDELETE = "DELETE"; // 0x0
	internal IntPtr m_Ptr; // 0x10
	private static Regex domainRegex; // 0x0
	private static readonly string[] forbiddenHeaderKeys; // 0x8
	private bool <disposeDownloadHandlerOnDispose>k__BackingField; // 0x18
	private bool <disposeUploadHandlerOnDispose>k__BackingField; // 0x19
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x10

	// Methods
	public void .ctor(); // 0x1007C6FFC
	public void .ctor(string url); // 0x1007C70A0
	public void .ctor(string url, string method); // 0x1007C7438
	public void .ctor(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler); // 0x1007C7734
	private static void .cctor(); // 0x1007C789C
	public static UnityWebRequest Get(string uri); // 0x1007C7EF0
	public static UnityWebRequest Delete(string uri); // 0x1007C7F90
	public static UnityWebRequest Head(string uri); // 0x1007C7FFC
	public static UnityWebRequest GetTexture(string uri); // 0x1007C8068
	public static UnityWebRequest GetTexture(string uri, bool nonReadable); // 0x1007C80D0
	public static UnityWebRequest GetAudioClip(string uri, AudioType audioType); // 0x1007C8178
	public static UnityWebRequest GetAssetBundle(string uri); // 0x1007C8224
	public static UnityWebRequest GetAssetBundle(string uri, uint crc); // 0x1007C828C
	public static UnityWebRequest GetAssetBundle(string uri, uint version, uint crc); // 0x1007C8338
	public static UnityWebRequest GetAssetBundle(string uri, Hash128 hash, uint crc); // 0x1007C83E0
	public static UnityWebRequest Put(string uri, byte[] bodyData); // 0x1007C84D8
	public static UnityWebRequest Put(string uri, string bodyData); // 0x1007C85D4
	public static UnityWebRequest Post(string uri, string postData); // 0x1007C870C
	public static UnityWebRequest Post(string uri, WWWForm formData); // 0x1007C89A4
	public static UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections); // 0x1007C8E4C
	public static UnityWebRequest Post(string uri, List`1<IMultipartFormSection> multipartFormSections, byte[] boundary); // 0x1007C8F90
	public static UnityWebRequest Post(string uri, Dictionary`2<string, string> formFields); // 0x1007C9C54
	public static byte[] SerializeFormSections(List`1<IMultipartFormSection> multipartFormSections, byte[] boundary); // 0x1007C918C
	public static byte[] GenerateBoundary(); // 0x1007C8EC8
	public static byte[] SerializeSimpleForm(Dictionary`2<string, string> formFields); // 0x1007C9D9C
	public bool get_disposeDownloadHandlerOnDispose(); // 0x1007CA14C
	public void set_disposeDownloadHandlerOnDispose(bool value); // 0x1007CA154
	public bool get_disposeUploadHandlerOnDispose(); // 0x1007CA15C
	public void set_disposeUploadHandlerOnDispose(bool value); // 0x1007CA164
	internal void InternalCreate(); // 0x1007C7030
	internal void InternalDestroy(); // 0x1007CA16C
	private void InternalSetDefaults(); // 0x1007C7094
	protected override void Finalize(); // 0x1007CA1D0
	public void Dispose(); // 0x1007CA23C
	internal AsyncOperation InternalBegin(); // 0x1007CA35C
	internal void InternalAbort(); // 0x1007CA3C0
	public AsyncOperation Send(); // 0x1007CA424
	public void Abort(); // 0x1007CA428
	internal void InternalSetMethod(UnityWebRequestMethod methodType); // 0x1007CA42C
	internal void InternalSetCustomMethod(string customMethodName); // 0x1007CA4A0
	internal int InternalGetMethod(); // 0x1007CA514
	internal string InternalGetCustomMethod(); // 0x1007CA578
	public string get_method(); // 0x1007CA5DC
	public void set_method(string value); // 0x1007C7490
	internal int InternalGetError(); // 0x1007CA6AC
	public string get_error(); // 0x1007CA710
	public bool get_useHttpContinue(); // 0x1007CA774
	public void set_useHttpContinue(bool value); // 0x1007CA7D8
	public string get_url(); // 0x1007CA84C
	public void set_url(string value); // 0x1007C70E0
	private string InternalGetUrl(); // 0x1007CA850
	private void InternalSetUrl(string url); // 0x1007CA8B4
	public long get_responseCode(); // 0x1007CA928
	public float get_uploadProgress(); // 0x1007CA98C
	public bool get_isModifiable(); // 0x1007CA9F0
	public bool get_isDone(); // 0x1007CAA54
	public bool get_isError(); // 0x1007CAAB8
	public float get_downloadProgress(); // 0x1007CAB1C
	public ulong get_uploadedBytes(); // 0x1007CAB80
	public ulong get_downloadedBytes(); // 0x1007CABE4
	public int get_redirectLimit(); // 0x1007CAC48
	public void set_redirectLimit(int value); // 0x1007CACAC
	public bool get_chunkedTransfer(); // 0x1007CAD20
	public void set_chunkedTransfer(bool value); // 0x1007CAD84
	public string GetRequestHeader(string name); // 0x1007CADF8
	internal void InternalSetRequestHeader(string name, string value); // 0x1007CAE6C
	public void SetRequestHeader(string name, string value); // 0x1007C8C58
	public string GetResponseHeader(string name); // 0x1007CB140
	internal string[] InternalGetResponseHeaderKeys(); // 0x1007CB1B4
	public Dictionary`2<string, string> GetResponseHeaders(); // 0x1007CB218
	public UploadHandler get_uploadHandler(); // 0x1007C88E4
	public void set_uploadHandler(UploadHandler value); // 0x1007C7828
	public DownloadHandler get_downloadHandler(); // 0x1007CA2CC
	public void set_downloadHandler(DownloadHandler value); // 0x1007C77B4
	private static bool ContainsForbiddenCharacters(string s, int firstAllowedCharCode); // 0x1007CB364
	private static bool IsHeaderNameLegal(string headerName); // 0x1007CAEE8
	private static bool IsHeaderValueLegal(string headerValue); // 0x1007CB094
	private static string GetErrorDescription(UnityWebRequestError errorCode); // 0x1007CB3F0
}

// Namespace: 
internal sealed class UnityWebRequestMethod : Enum // TypeDefIndex: 2329
{
	// Fields
	public int value__; // 0x10
	public const UnityWebRequestMethod Get = 0; // 0x0
	public const UnityWebRequestMethod Post = 1; // 0x0
	public const UnityWebRequestMethod Put = 2; // 0x0
	public const UnityWebRequestMethod Head = 3; // 0x0
	public const UnityWebRequestMethod Custom = 4; // 0x0

}

// Namespace: 
internal sealed class UnityWebRequestError : Enum // TypeDefIndex: 2330
{
	// Fields
	public int value__; // 0x10
	public const UnityWebRequestError OK = 0; // 0x0
	public const UnityWebRequestError Unknown = 1; // 0x0
	public const UnityWebRequestError SDKError = 2; // 0x0
	public const UnityWebRequestError UnsupportedProtocol = 3; // 0x0
	public const UnityWebRequestError MalformattedUrl = 4; // 0x0
	public const UnityWebRequestError CannotResolveProxy = 5; // 0x0
	public const UnityWebRequestError CannotResolveHost = 6; // 0x0
	public const UnityWebRequestError CannotConnectToHost = 7; // 0x0
	public const UnityWebRequestError AccessDenied = 8; // 0x0
	public const UnityWebRequestError GenericHTTPError = 9; // 0x0
	public const UnityWebRequestError WriteError = 10; // 0x0
	public const UnityWebRequestError ReadError = 11; // 0x0
	public const UnityWebRequestError OutOfMemory = 12; // 0x0
	public const UnityWebRequestError Timeout = 13; // 0x0
	public const UnityWebRequestError HTTPPostError = 14; // 0x0
	public const UnityWebRequestError SSLCannotConnect = 15; // 0x0
	public const UnityWebRequestError Aborted = 16; // 0x0
	public const UnityWebRequestError TooManyRedirects = 17; // 0x0
	public const UnityWebRequestError ReceivedNoData = 18; // 0x0
	public const UnityWebRequestError SSLNotSupported = 19; // 0x0
	public const UnityWebRequestError FailedToSendData = 20; // 0x0
	public const UnityWebRequestError FailedToReceiveData = 21; // 0x0
	public const UnityWebRequestError SSLCertificateError = 22; // 0x0
	public const UnityWebRequestError SSLCipherNotAvailable = 23; // 0x0
	public const UnityWebRequestError SSLCACertError = 24; // 0x0
	public const UnityWebRequestError UnrecognizedContentEncoding = 25; // 0x0
	public const UnityWebRequestError LoginFailed = 26; // 0x0
	public const UnityWebRequestError SSLShutdownFailed = 27; // 0x0
	public const UnityWebRequestError NoInternetConnection = 28; // 0x0

}

// Namespace: UnityEngine.Networking
public interface IMultipartFormSection // TypeDefIndex: 2331
{
	// Methods
	public abstract string get_sectionName(); // 0
	public abstract byte[] get_sectionData(); // 0
	public abstract string get_fileName(); // 0
	public abstract string get_contentType(); // 0
}

// Namespace: UnityEngine.Networking
public class UploadHandler : IDisposable // TypeDefIndex: 2332
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	internal void .ctor(); // 0x1007CB4A0
	internal void InternalCreateRaw(byte[] data); // 0x1007CB4A8
	private void InternalDestroy(); // 0x1007CB51C
	protected override void Finalize(); // 0x1007CB580
	public void Dispose(); // 0x1007CA330
	public void set_contentType(string value); // 0x1007C8948
	internal virtual void SetContentType(string newContentType); // 0x1007CB5EC
}

// Namespace: UnityEngine.Networking
public sealed class UploadHandlerRaw : UploadHandler // TypeDefIndex: 2333
{
	// Methods
	public void .ctor(byte[] data); // 0x1007C85A4
	private void InternalSetContentType(string newContentType); // 0x1007CB60C
	internal override void SetContentType(string newContentType); // 0x1007CB680
}

// Namespace: UnityEngine.Networking
public class DownloadHandler : IDisposable // TypeDefIndex: 2334
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	internal void .ctor(); // 0x1007C69A4
	internal void InternalCreateBuffer(); // 0x1007C69AC
	internal void InternalCreateTexture(bool readable); // 0x1007C6A10
	internal void InternalCreateAssetBundle(string url, uint crc); // 0x1007C6A84
	internal void InternalCreateAssetBundle(string url, Hash128 hash, uint crc); // 0x1007C6B00
	private static void INTERNAL_CALL_InternalCreateAssetBundle(DownloadHandler self, string url, Hash128 hash, uint crc); // 0x1007C6B5C
	internal void InternalCreateAudioClip(string url, AudioType audioType); // 0x1007C6BE8
	private void InternalDestroy(); // 0x1007C6C64
	protected override void Finalize(); // 0x1007C6CC8
	public void Dispose(); // 0x1007C6D34
}

// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerBuffer : DownloadHandler // TypeDefIndex: 2335
{
	// Methods
	public void .ctor(); // 0x1007C6F6C
}

// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerTexture : DownloadHandler // TypeDefIndex: 2336
{
	// Methods
	public void .ctor(bool readable); // 0x1007C6FB0
}

// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerAssetBundle : DownloadHandler // TypeDefIndex: 2337
{
	// Methods
	public void .ctor(string url, uint crc); // 0x1007C6D7C
	public void .ctor(string url, uint version, uint crc); // 0x1007C6DBC
	public void .ctor(string url, Hash128 hash, uint crc); // 0x1007C6E64
}

// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerAudioClip : DownloadHandler // TypeDefIndex: 2338
{
	// Methods
	public void .ctor(string url, AudioType audioType); // 0x1007C6F10
}

// Namespace: UnityEngine
public static class JsonUtility // TypeDefIndex: 2339
{
	// Methods
	public static T FromJson(string json); // 0
	public static object FromJson(string json, Type type); // 0x1007C13C4
}

// Namespace: UnityEngine.Advertisements
internal sealed class UnityAdsInternal // TypeDefIndex: 2340
{
	// Fields
	private static UnityAdsDelegate onCampaignsAvailable; // 0x0
	private static UnityAdsDelegate onCampaignsFetchFailed; // 0x8
	private static UnityAdsDelegate onShow; // 0x10
	private static UnityAdsDelegate onHide; // 0x18
	private static UnityAdsDelegate`2<string, bool> onVideoCompleted; // 0x20
	private static UnityAdsDelegate onVideoStarted; // 0x28

	// Methods
	public void .ctor(); // 0x10078F718
	public static void add_onCampaignsAvailable(UnityAdsDelegate value); // 0x10078F720
	public static void remove_onCampaignsAvailable(UnityAdsDelegate value); // 0x10078F80C
	public static void add_onCampaignsFetchFailed(UnityAdsDelegate value); // 0x10078F8F8
	public static void remove_onCampaignsFetchFailed(UnityAdsDelegate value); // 0x10078F9E4
	public static void add_onShow(UnityAdsDelegate value); // 0x10078FAD0
	public static void remove_onShow(UnityAdsDelegate value); // 0x10078FBBC
	public static void add_onHide(UnityAdsDelegate value); // 0x10078FCA8
	public static void remove_onHide(UnityAdsDelegate value); // 0x10078FD94
	public static void add_onVideoCompleted(UnityAdsDelegate`2<string, bool> value); // 0x10078FE80
	public static void remove_onVideoCompleted(UnityAdsDelegate`2<string, bool> value); // 0x10078FF6C
	public static void add_onVideoStarted(UnityAdsDelegate value); // 0x100790058
	public static void remove_onVideoStarted(UnityAdsDelegate value); // 0x100790144
	public static void RemoveAllEventHandlers(); // 0x100790230
	public static void CallUnityAdsCampaignsAvailable(); // 0x100790294
	public static void CallUnityAdsCampaignsFetchFailed(); // 0x1007902F8
	public static void CallUnityAdsShow(); // 0x10079035C
	public static void CallUnityAdsHide(); // 0x1007903C0
	public static void CallUnityAdsVideoCompleted(string rewardItemKey, bool skipped); // 0x100790424
	public static void CallUnityAdsVideoStarted(); // 0x1007904AC
	public static void RegisterNative(); // 0x100790510
	public static void Init(string gameId, bool testModeEnabled, bool debugModeEnabled, string unityVersion); // 0x100790568
	public static bool Show(string zoneId, string rewardItemKey, string options); // 0x1007905F4
	public static bool CanShowAds(string zoneId); // 0x100790670
	public static void SetLogLevel(int logLevel); // 0x1007906D4
	public static void SetCampaignDataURL(string url); // 0x100790738
}

// Namespace: UnityEngine
public sealed class AndroidJavaException : Exception // TypeDefIndex: 2341
{
	// Fields
	private string mJavaStackTrace; // 0x60

	// Methods
	internal void .ctor(string message, string javaStackTrace); // 0x100790CDC
	public override string get_StackTrace(); // 0x100790D08
}

// Namespace: UnityEngine
internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 2342
{
	// Fields
	private AndroidJavaRunnable mRunnable; // 0x18

	// Methods
	public void .ctor(AndroidJavaRunnable runnable); // 0x10078C5A0
}

// Namespace: UnityEngine
public class AndroidJavaProxy // TypeDefIndex: 2343
{
	// Fields
	public readonly AndroidJavaClass javaInterface; // 0x10

	// Methods
	public void .ctor(string javaInterface); // 0x1007916A0
	public void .ctor(AndroidJavaClass javaInterface); // 0x100791718
}

// Namespace: UnityEngine
internal class AndroidReflection // TypeDefIndex: 2344
{
	// Fields
	private static IntPtr s_ReflectionHelperClass; // 0x0
	private static IntPtr s_ReflectionHelperGetConstructorID; // 0x8
	private static IntPtr s_ReflectionHelperGetMethodID; // 0x10
	private static IntPtr s_ReflectionHelperGetFieldID; // 0x18
	private static IntPtr s_ReflectionHelperNewProxyInstance; // 0x20

	// Methods
	private static void .cctor(); // 0x10079415C
	public static bool IsPrimitive(Type t); // 0x10078CD34
	public static bool IsAssignableFrom(Type t, Type from); // 0x10078F52C
	private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature); // 0x100794288
	public static IntPtr GetConstructorMember(IntPtr jclass, string signature); // 0x10078E188
	public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x10078E58C
}

// Namespace: UnityEngine
internal sealed class _AndroidJNIHelper // TypeDefIndex: 2345
{
	// Methods
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable); // 0x10078C528
	public static jvalue[] CreateJNIArgArray(object[] args); // 0x10078C62C
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs); // 0x10078D824
	public static IntPtr ConvertToJNIArray(Array array); // 0x10078CDC8
	public static T ConvertFromJNIArray(IntPtr array); // 0
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args); // 0x10078DEA4
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic); // 0
	public static IntPtr GetConstructorID(IntPtr jclass, string signature); // 0x10078DFC0
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x10078E3B0
	private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic); // 0x10078E75C
	public static string GetSignature(object obj); // 0x10078E8DC
	public static string GetSignature(object[] args); // 0x10078DED0
	public static string GetSignature(object[] args); // 0
}

// Namespace: UnityEngine
internal class AndroidJNISafe // TypeDefIndex: 2346
{
	// Methods
	public static void CheckException(); // 0x1007934A0
	public static void DeleteGlobalRef(IntPtr globalref); // 0x100791400
	public static void DeleteLocalRef(IntPtr localref); // 0x10078D978
	public static IntPtr NewStringUTF(string bytes); // 0x10078CD50
	public static string GetStringUTFChars(IntPtr str); // 0x1007936CC
	public static IntPtr GetObjectClass(IntPtr ptr); // 0x100791080
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig); // 0x10078E874
	public static IntPtr GetMethodID(IntPtr obj, string name, string sig); // 0x10078E348
	public static IntPtr FromReflectedMethod(IntPtr refMethod); // 0x10078E2E0
	public static IntPtr FindClass(string name); // 0x10078DD30
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007912B0
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100793724
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x10079378C
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007937E4
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x10079383C
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x10079389C
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007938FC
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100793954
	public static byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x1007939AC
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100793A04
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args); // 0x100793A5C
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793AB4
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793B1C
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793B74
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793BCC
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793C2C
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793C8C
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793CE4
	public static byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793D3C
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793D94
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args); // 0x100793DEC
	public static char[] FromCharArray(IntPtr array); // 0x100793E44
	public static double[] FromDoubleArray(IntPtr array); // 0x100793E9C
	public static float[] FromFloatArray(IntPtr array); // 0x100793EF4
	public static long[] FromLongArray(IntPtr array); // 0x100793F4C
	public static short[] FromShortArray(IntPtr array); // 0x100793FA4
	public static byte[] FromByteArray(IntPtr array); // 0x100793FFC
	public static bool[] FromBooleanArray(IntPtr array); // 0x100794054
	public static int[] FromIntArray(IntPtr array); // 0x1007940AC
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type); // 0x10078DE3C
	public static IntPtr ToCharArray(char[] array); // 0x10078DCC8
	public static IntPtr ToDoubleArray(double[] array); // 0x10078DC60
	public static IntPtr ToFloatArray(float[] array); // 0x10078DBF8
	public static IntPtr ToLongArray(long[] array); // 0x10078DB90
	public static IntPtr ToShortArray(short[] array); // 0x10078DB28
	public static IntPtr ToByteArray(byte[] array); // 0x10078DAC0
	public static IntPtr ToBooleanArray(bool[] array); // 0x10078DA58
	public static IntPtr ToIntArray(int[] array); // 0x10078D9F0
	public static int GetArrayLength(IntPtr array); // 0x100794104
}

// Namespace: AOT
public class MonoPInvokeCallbackAttribute : Attribute // TypeDefIndex: 2347
{
	// Methods
	public void .ctor(Type type); // 0x10078C520
}

// Namespace: UnityEngine
internal class WrapperlessIcall : Attribute // TypeDefIndex: 2348
{
	// Methods
	public void .ctor(); // 0x1007EB408
}

// Namespace: UnityEngine
internal class IL2CPPStructAlignmentAttribute : Attribute // TypeDefIndex: 2349
{
	// Fields
	public int Align; // 0x10

	// Methods
	public void .ctor(); // 0x1007BE444
}

// Namespace: UnityEngine
internal class ThreadAndSerializationSafe : Attribute // TypeDefIndex: 2350
{
	// Methods
	public void .ctor(); // 0x1007E6B54
}

// Namespace: UnityEngine
internal class AttributeHelperEngine // TypeDefIndex: 2351
{
	// Fields
	public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x0
	public static ExecuteInEditMode[] _executeInEditModeArray; // 0x8
	public static RequireComponent[] _requireComponentArray; // 0x10

	// Methods
	private static void .cctor(); // 0x100797E9C
	private static Type GetParentTypeDisallowingMultipleInclusion(Type type); // 0x100797F6C
	private static Type[] GetRequiredComponents(Type klass); // 0x100798140
	private static bool CheckIsEditorScript(Type klass); // 0x100798510
}

// Namespace: UnityEngine
public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 2352
{
	// Methods
	public void .ctor(); // 0x1007A09A8
}

// Namespace: UnityEngine
public sealed class RequireComponent : Attribute // TypeDefIndex: 2353
{
	// Fields
	public Type m_Type0; // 0x10
	public Type m_Type1; // 0x18
	public Type m_Type2; // 0x20

	// Methods
	public void .ctor(Type requiredComponent); // 0x1007D4A54
}

// Namespace: UnityEngine
public sealed class AddComponentMenu : Attribute // TypeDefIndex: 2354
{
	// Fields
	private string m_AddComponentMenu; // 0x10
	private int m_Ordering; // 0x18

	// Methods
	public void .ctor(string menuName); // 0x10078F594
	public void .ctor(string menuName, int order); // 0x10078F5C4
}

// Namespace: UnityEngine
public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 2355
{
	// Methods
	public void .ctor(); // 0x1007A55B0
}

// Namespace: UnityEngine
public sealed class HideInInspector : Attribute // TypeDefIndex: 2356
{
	// Methods
	public void .ctor(); // 0x1007BE0A4
}

// Namespace: UnityEngine
internal struct CastHelper`1 // TypeDefIndex: 2357
{
	// Fields
	public T t; // 0x0
	public IntPtr onePointerFurtherThanT; // 0x0

}

// Namespace: UnityEngine
public struct Color // TypeDefIndex: 2358
{
	// Fields
	public float r; // 0x10
	public float g; // 0x14
	public float b; // 0x18
	public float a; // 0x1C

	// Methods
	public void .ctor(float r, float g, float b, float a); // 0x10079E1E4
	public void .ctor(float r, float g, float b); // 0x10079E210
	public override string ToString(); // 0x10079E404
	public override int GetHashCode(); // 0x10079E474
	public override bool Equals(object other); // 0x10079E564
	public static Color Lerp(Color a, Color b, float t); // 0x10079E56C
	public static Color get_red(); // 0x10079E65C
	public static Color get_white(); // 0x10079E670
	public static Color get_black(); // 0x10079E684
	public static Color get_yellow(); // 0x10079E698
	public static Color get_gray(); // 0x10079E6B4
	public static Color get_grey(); // 0x10079E6C8
	public static Color get_clear(); // 0x10079E6DC
	public static Color op_Multiply(Color a, float b); // 0x10079E6F0
	public static Color op_Multiply(float b, Color a); // 0x10079E704
	public static bool op_Equality(Color lhs, Color rhs); // 0x10079E71C
	public static bool op_Inequality(Color lhs, Color rhs); // 0x10079E7AC
	public static Vector4 op_Implicit(Color c); // 0x10079E444
}

// Namespace: UnityEngine
internal class SetupCoroutine // TypeDefIndex: 2359
{
	// Methods
	public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress); // 0x1007D6E04
	public static object InvokeMember(object behaviour, string name, object variable); // 0x1007D6F70
}

// Namespace: UnityEngine
internal class WritableAttribute : Attribute // TypeDefIndex: 2360
{
	// Methods
	public void .ctor(); // 0x1007EB410
}

// Namespace: UnityEngine
public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 2361
{
	// Methods
	public void .ctor(); // 0x10079714C
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
internal struct GcUserProfileData // TypeDefIndex: 2362
{
	// Fields
	public string userName; // 0x10
	public string userID; // 0x18
	public int isFriend; // 0x20
	public Texture2D image; // 0x28

	// Methods
	public UserProfile ToUserProfile(); // 0x1007DC25C
	public void AddToArray(UserProfile[] array, int number); // 0x1007DC264
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
internal struct GcAchievementDescriptionData // TypeDefIndex: 2363
{
	// Fields
	public string m_Identifier; // 0x10
	public string m_Title; // 0x18
	public Texture2D m_Image; // 0x20
	public string m_AchievedDescription; // 0x28
	public string m_UnachievedDescription; // 0x30
	public int m_Hidden; // 0x38
	public int m_Points; // 0x3C

	// Methods
	public AchievementDescription ToAchievementDescription(); // 0x1007DBDDC
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
internal struct GcAchievementData // TypeDefIndex: 2364
{
	// Fields
	public string m_Identifier; // 0x10
	public double m_PercentCompleted; // 0x18
	public int m_Completed; // 0x20
	public int m_Hidden; // 0x24
	public int m_LastReportedDate; // 0x28

	// Methods
	public Achievement ToAchievement(); // 0x1007DBCB8
}

// Namespace: UnityEngine.SocialPlatforms.GameCenter
internal struct GcScoreData // TypeDefIndex: 2365
{
	// Fields
	public string m_Category; // 0x10
	public int m_ValueLow; // 0x18
	public int m_ValueHigh; // 0x1C
	public int m_Date; // 0x20
	public string m_FormattedValue; // 0x28
	public string m_PlayerID; // 0x30
	public int m_Rank; // 0x38

	// Methods
	public Score ToScore(); // 0x1007DC0C4
}

// Namespace: UnityEngine
public struct RenderBuffer // TypeDefIndex: 2366
{
	// Fields
	internal int m_RenderTextureInstanceID; // 0x10
	internal IntPtr m_BufferPtr; // 0x18

}

// Namespace: UnityEngine
public sealed class TransparencySortMode : Enum // TypeDefIndex: 2367
{
	// Fields
	public int value__; // 0x10
	public const TransparencySortMode Default = 0; // 0x0
	public const TransparencySortMode Perspective = 1; // 0x0
	public const TransparencySortMode Orthographic = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class ComputeBufferType : Enum // TypeDefIndex: 2368
{
	// Fields
	public int value__; // 0x10
	public const ComputeBufferType Default = 0; // 0x0
	public const ComputeBufferType Raw = 1; // 0x0
	public const ComputeBufferType Append = 2; // 0x0
	public const ComputeBufferType Counter = 4; // 0x0
	public const ComputeBufferType DrawIndirect = 256; // 0x0
	public const ComputeBufferType IndirectArguments = 256; // 0x0
	public const ComputeBufferType GPUMemory = 512; // 0x0

}

// Namespace: UnityEngine
public sealed class CameraClearFlags : Enum // TypeDefIndex: 2369
{
	// Fields
	public int value__; // 0x10
	public const CameraClearFlags Skybox = 1; // 0x0
	public const CameraClearFlags Color = 2; // 0x0
	public const CameraClearFlags SolidColor = 2; // 0x0
	public const CameraClearFlags Depth = 3; // 0x0
	public const CameraClearFlags Nothing = 4; // 0x0

}

// Namespace: UnityEngine
public sealed class DepthTextureMode : Enum // TypeDefIndex: 2370
{
	// Fields
	public int value__; // 0x10
	public const DepthTextureMode None = 0; // 0x0
	public const DepthTextureMode Depth = 1; // 0x0
	public const DepthTextureMode DepthNormals = 2; // 0x0
	public const DepthTextureMode MotionVectors = 4; // 0x0

}

// Namespace: UnityEngine
public sealed class MeshTopology : Enum // TypeDefIndex: 2371
{
	// Fields
	public int value__; // 0x10
	public const MeshTopology Triangles = 0; // 0x0
	public const MeshTopology Quads = 2; // 0x0
	public const MeshTopology Lines = 3; // 0x0
	public const MeshTopology LineStrip = 4; // 0x0
	public const MeshTopology Points = 5; // 0x0

}

// Namespace: UnityEngine
public sealed class ColorSpace : Enum // TypeDefIndex: 2372
{
	// Fields
	public int value__; // 0x10
	public const ColorSpace Uninitialized = -1; // 0x0
	public const ColorSpace Gamma = 0; // 0x0
	public const ColorSpace Linear = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class ScreenOrientation : Enum // TypeDefIndex: 2373
{
	// Fields
	public int value__; // 0x10
	public const ScreenOrientation Unknown = 0; // 0x0
	public const ScreenOrientation Portrait = 1; // 0x0
	public const ScreenOrientation PortraitUpsideDown = 2; // 0x0
	public const ScreenOrientation LandscapeLeft = 3; // 0x0
	public const ScreenOrientation LandscapeRight = 4; // 0x0
	public const ScreenOrientation AutoRotation = 5; // 0x0
	public const ScreenOrientation Landscape = 3; // 0x0

}

// Namespace: UnityEngine
public sealed class FilterMode : Enum // TypeDefIndex: 2374
{
	// Fields
	public int value__; // 0x10
	public const FilterMode Point = 0; // 0x0
	public const FilterMode Bilinear = 1; // 0x0
	public const FilterMode Trilinear = 2; // 0x0

}

// Namespace: UnityEngine
public sealed class TextureWrapMode : Enum // TypeDefIndex: 2375
{
	// Fields
	public int value__; // 0x10
	public const TextureWrapMode Repeat = 0; // 0x0
	public const TextureWrapMode Clamp = 1; // 0x0

}

// Namespace: UnityEngine
public sealed class TextureFormat : Enum // TypeDefIndex: 2376
{
	// Fields
	public int value__; // 0x10
	public const TextureFormat Alpha8 = 1; // 0x0
	public const TextureFormat ARGB4444 = 2; // 0x0
	public const TextureFormat RGB24 = 3; // 0x0
	public const TextureFormat RGBA32 = 4; // 0x0
	public const TextureFormat ARGB32 = 5; // 0x0
	public const TextureFormat RGB565 = 7; // 0x0
	public const TextureFormat R16 = 9; // 0x0
	public const TextureFormat DXT1 = 10; // 0x0
	public const TextureFormat DXT5 = 12; // 0x0
	public const TextureFormat RGBA4444 = 13; // 0x0
	public const TextureFormat BGRA32 = 14; // 0x0
	public const TextureFormat RHalf = 15; // 0x0
	public const TextureFormat RGHalf = 16; // 0x0
	public const TextureFormat RGBAHalf = 17; // 0x0
	public const TextureFormat RFloat = 18; // 0x0
	public const TextureFormat RGFloat = 19; // 0x0
	public const TextureFormat RGBAFloat = 20; // 0x0
	public const TextureFormat YUY2 = 21; // 0x0
	public const TextureFormat PVRTC_RGB2 = 30; // 0x0
	public const TextureFormat PVRTC_RGBA2 = 31; // 0x0
	public const TextureFormat PVRTC_RGB4 = 32; // 0x0
	public const TextureFormat PVRTC_RGBA4 = 33; // 0x0
	public const TextureFormat ETC_RGB4 = 34; // 0x0
	public const TextureFormat ATC_RGB4 = 35; // 0x0
	public const TextureFormat ATC_RGBA8 = 36; // 0x0
	public const TextureFormat EAC_R = 41; // 0x0
	public const TextureFormat EAC_R_SIGNED = 42; // 0x0
	public const TextureFormat EAC_RG = 43; // 0x0
	public const TextureFormat EAC_RG_SIGNED = 44; // 0x0
	public const TextureFormat ETC2_RGB = 45; // 0x0
	public const TextureFormat ETC2_RGBA1 = 46; // 0x0
	public const TextureFormat ETC2_RGBA8 = 47; // 0x0
	public const TextureFormat ASTC_RGB_4x4 = 48; // 0x0
	public const TextureFormat ASTC_RGB_5x5 = 49; // 0x0
	public const TextureFormat ASTC_RGB_6x6 = 50; // 0x0
	public const TextureFormat ASTC_RGB_8x8 = 51; // 0x0
	public const TextureFormat ASTC_RGB_10x10 = 52; // 0x0
	public const TextureFormat ASTC_RGB_12x12 = 53; // 0x0
	public const TextureFormat ASTC_RGBA_4x4 = 54; // 0x0
	public const TextureFormat ASTC_RGBA_5x5 = 55; // 0x0
	public const TextureFormat ASTC_RGBA_6x6 = 56; // 0x0
	public const TextureFormat ASTC_RGBA_8x8 = 57; // 0x0
	public const TextureFormat ASTC_RGBA_10x10 = 58; // 0x0
	public const TextureFormat ASTC_RGBA_12x12 = 59; // 0x0
	public const TextureFormat ETC_RGB4_3DS = 60; // 0x0
	public const TextureFormat ETC_RGBA8_3DS = 61; // 0x0

}

// Namespace: UnityEngine
public sealed class CubemapFace : Enum // TypeDefIndex: 2377
{
	// Fields
	public int value__; // 0x10
	public const CubemapFace Unknown = -1; // 0x0
	public const CubemapFace PositiveX = 0; // 0x0
	public const CubemapFace NegativeX = 1; // 0x0
	public const CubemapFace PositiveY = 2; // 0x0
	public const CubemapFace NegativeY = 3; // 0x0
	public const CubemapFace PositiveZ = 4; // 0x0
	public const CubemapFace NegativeZ = 5; // 0x0

}

// Namespace: UnityEngine
public sealed class RenderTextureFormat : Enum // TypeDefIndex: 2378
{
	// Fields
	public int value__; // 0x10
	public const RenderTextureFormat ARGB32 = 0; // 0x0
	public const RenderTextureFormat Depth = 1; // 0x0
	public const RenderTextureFormat ARGBHalf = 2; // 0x0
	public const RenderTextureFormat Shadowmap = 3; // 0x0
	public const RenderTextureFormat RGB565 = 4; // 0x0
	public const RenderTextureFormat ARGB4444 = 5; // 0x0
	public const RenderTextureFormat ARGB1555 = 6; // 0x0
	public const RenderTextureFormat Default = 7; // 0x0
	public const RenderTextureFormat ARGB2101010 = 8; // 0x0
	public const RenderTextureFormat DefaultHDR = 9; // 0x0
	public const RenderTextureFormat ARGBFloat = 11; // 0x0
	public const RenderTextureFormat RGFloat = 12; // 0x0
	public const RenderTextureFormat RGHalf = 13; // 0x0
	public const RenderTextureFormat RFloat = 14; // 0x0
	public const RenderTextureFormat RHalf = 15; // 0x0
	public const RenderTextureFormat R8 = 16; // 0x0
	public const RenderTextureFormat ARGBInt = 17; // 0x0
	public const RenderTextureFormat RGInt = 18; // 0x0
	public const RenderTextureFormat RInt = 19; // 0x0
	public const RenderTextureFormat BGRA32 = 20; // 0x0
	public const RenderTextureFormat RGB111110Float = 22; // 0x0

}

// Namespace: UnityEngine
public sealed class RenderTextureReadWrite : Enum // TypeDefIndex: 2379
{
	// Fields
	public int value__; // 0x10
	public const RenderTextureReadWrite Default = 0; // 0x0
	public const RenderTextureReadWrite Linear = 1; // 0x0
	public const RenderTextureReadWrite sRGB = 2; // 0x0

}

// Namespace: UnityEngine.Rendering
public sealed class CompareFunction : Enum // TypeDefIndex: 2380
{
	// Fields
	public int value__; // 0x10
	public const CompareFunction Disabled = 0; // 0x0
	public const CompareFunction Never = 1; // 0x0
	public const CompareFunction Less = 2; // 0x0
	public const CompareFunction Equal = 3; // 0x0
	public const CompareFunction LessEqual = 4; // 0x0
	public const CompareFunction Greater = 5; // 0x0
	public const CompareFunction NotEqual = 6; // 0x0
	public const CompareFunction GreaterEqual = 7; // 0x0
	public const CompareFunction Always = 8; // 0x0

}

// Namespace: UnityEngine.Rendering
public sealed class ColorWriteMask : Enum // TypeDefIndex: 2381
{
	// Fields
	public int value__; // 0x10
	public const ColorWriteMask Alpha = 1; // 0x0
	public const ColorWriteMask Blue = 2; // 0x0
	public const ColorWriteMask Green = 4; // 0x0
	public const ColorWriteMask Red = 8; // 0x0
	public const ColorWriteMask All = 15; // 0x0

}

// Namespace: UnityEngine.Rendering
public sealed class StencilOp : Enum // TypeDefIndex: 2382
{
	// Fields
	public int value__; // 0x10
	public const StencilOp Keep = 0; // 0x0
	public const StencilOp Zero = 1; // 0x0
	public const StencilOp Replace = 2; // 0x0
	public const StencilOp IncrementSaturate = 3; // 0x0
	public const StencilOp DecrementSaturate = 4; // 0x0
	public const StencilOp Invert = 5; // 0x0
	public const StencilOp IncrementWrap = 6; // 0x0
	public const StencilOp DecrementWrap = 7; // 0x0

}

// Namespace: UnityEngine
internal class GUIStateObjects // TypeDefIndex: 2383
{
	// Fields
	private static Dictionary`2<int, object> s_StateCache; // 0x0

	// Methods
	private static void .cctor(); // 0x1007B9AF4
	internal static object GetStateObject(Type t, int controlID); // 0x1007B9B68
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class LocalUser : UserProfile, ILocalUser, IUserProfile // TypeDefIndex: 2384
{
	// Fields
	private IUserProfile[] m_Friends; // 0x30
	private bool m_Authenticated; // 0x38
	private bool m_Underage; // 0x39

	// Methods
	public void .ctor(); // 0x1007DD384
	public void Authenticate(Action`1<bool> callback); // 0x1007DD490
	public void SetFriends(IUserProfile[] friends); // 0x1007DD5A4
	public void SetAuthenticated(bool value); // 0x1007DD5AC
	public void SetUnderage(bool value); // 0x1007DD5B4
	public bool get_authenticated(); // 0x1007DD5BC
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class UserProfile : IUserProfile // TypeDefIndex: 2385
{
	// Fields
	protected string m_UserName; // 0x10
	protected string m_ID; // 0x18
	protected bool m_IsFriend; // 0x20
	protected UserState m_State; // 0x24
	protected Texture2D m_Image; // 0x28

	// Methods
	public void .ctor(); // 0x1007DD3F4
	public void .ctor(string name, string id, bool friend, UserState state, Texture2D image); // 0x1007DDA6C
	public override string ToString(); // 0x1007DDAC4
	public void SetUserName(string name); // 0x1007DDD7C
	public void SetUserID(string id); // 0x1007DDD84
	public void SetImage(Texture2D image); // 0x1007DDD8C
	public string get_userName(); // 0x1007DDD64
	public string get_id(); // 0x1007DDD5C
	public bool get_isFriend(); // 0x1007DDD6C
	public UserState get_state(); // 0x1007DDD74
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class Achievement : IAchievement // TypeDefIndex: 2386
{
	// Fields
	private bool m_Completed; // 0x10
	private bool m_Hidden; // 0x11
	private DateTime m_LastReportedDate; // 0x18
	private string <id>k__BackingField; // 0x28
	private double <percentCompleted>k__BackingField; // 0x30

	// Methods
	public void .ctor(string id, double percentCompleted, bool completed, bool hidden, DateTime lastReportedDate); // 0x1007DBC50
	public void .ctor(string id, double percent); // 0x1007DC2B0
	public void .ctor(); // 0x1007DBB44
	public override string ToString(); // 0x1007DC350
	public string get_id(); // 0x1007DC69C
	public void set_id(string value); // 0x1007DC2A0
	public double get_percentCompleted(); // 0x1007DC6A4
	public void set_percentCompleted(double value); // 0x1007DC2A8
	public bool get_completed(); // 0x1007DC6AC
	public bool get_hidden(); // 0x1007DC6B4
	public DateTime get_lastReportedDate(); // 0x1007DC6BC
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class AchievementDescription : IAchievementDescription // TypeDefIndex: 2387
{
	// Fields
	private string m_Title; // 0x10
	private Texture2D m_Image; // 0x18
	private string m_AchievedDescription; // 0x20
	private string m_UnachievedDescription; // 0x28
	private bool m_Hidden; // 0x30
	private int m_Points; // 0x34
	private string <id>k__BackingField; // 0x38

	// Methods
	public void .ctor(string id, string title, Texture2D image, string achievedDescription, string unachievedDescription, bool hidden, int points); // 0x1007DBD70
	public override string ToString(); // 0x1007DC6D0
	public void SetImage(Texture2D image); // 0x1007D979C
	public string get_id(); // 0x1007DCA60
	public void set_id(string value); // 0x1007DC6C8
	public string get_title(); // 0x1007DCA68
	public string get_achievedDescription(); // 0x1007DCA70
	public string get_unachievedDescription(); // 0x1007DCA78
	public bool get_hidden(); // 0x1007DCA88
	public int get_points(); // 0x1007DCA80
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class Score : IScore // TypeDefIndex: 2388
{
	// Fields
	private DateTime m_Date; // 0x10
	private string m_FormattedValue; // 0x20
	private string m_UserID; // 0x28
	private int m_Rank; // 0x30
	private string <leaderboardID>k__BackingField; // 0x38
	private long <value>k__BackingField; // 0x40

	// Methods
	public void .ctor(string leaderboardID, long value); // 0x1007DCBA8
	public void .ctor(string leaderboardID, long value, string userID, DateTime date, string formattedValue, int rank); // 0x1007DD5C4
	public override string ToString(); // 0x1007DD63C
	public string get_leaderboardID(); // 0x1007DD9D4
	public void set_leaderboardID(string value); // 0x1007DD62C
	public long get_value(); // 0x1007DD9CC
	public void set_value(long value); // 0x1007DD634
}

// Namespace: UnityEngine.SocialPlatforms.Impl
public class Leaderboard : ILeaderboard // TypeDefIndex: 2389
{
	// Fields
	private bool m_Loading; // 0x10
	private IScore m_LocalUserScore; // 0x18
	private uint m_MaxRange; // 0x20
	private IScore[] m_Scores; // 0x28
	private string m_Title; // 0x30
	private string[] m_UserIDs; // 0x38
	private string <id>k__BackingField; // 0x40
	private UserScope <userScope>k__BackingField; // 0x48
	private Range <range>k__BackingField; // 0x4C
	private TimeScope <timeScope>k__BackingField; // 0x54

	// Methods
	public void .ctor(); // 0x1007DCA90
	public override string ToString(); // 0x1007DCC94
	public void SetLocalUserScore(IScore score); // 0x1007DD35C
	public void SetMaxRange(uint maxRange); // 0x1007DD364
	public void SetScores(IScore[] scores); // 0x1007DD36C
	public void SetTitle(string title); // 0x1007DD374
	public string[] GetUserFilter(); // 0x1007DD37C
	public string get_id(); // 0x1007DD33C
	public void set_id(string value); // 0x1007DCB88
	public UserScope get_userScope(); // 0x1007DD34C
	public void set_userScope(UserScope value); // 0x1007DCB98
	public Range get_range(); // 0x1007DD344
	public void set_range(Range value); // 0x1007DCB90
	public TimeScope get_timeScope(); // 0x1007DD354
	public void set_timeScope(TimeScope value); // 0x1007DCBA0
}

// Namespace: UnityEngine
internal class SendMouseEvents // TypeDefIndex: 2390
{
	// Fields
	private static bool s_MouseUsed; // 0x0
	private static readonly HitInfo[] m_LastHit; // 0x8
	private static readonly HitInfo[] m_MouseDownHit; // 0x10
	private static readonly HitInfo[] m_CurrentHit; // 0x18
	private static Camera[] m_Cameras; // 0x20

	// Methods
	private static void .cctor(); // 0x1007D5960
	private static void SetMouseMoved(); // 0x1007D5CB8
	private static void DoSendMouseEvents(int skipRTCameras); // 0x1007D5D24
	private static void SendEvents(int i, HitInfo hit); // 0x1007D66B8
}

// Namespace: 
private struct HitInfo // TypeDefIndex: 2391
{
	// Fields
	public GameObject target; // 0x10
	public Camera camera; // 0x18

	// Methods
	public void SendMessage(string name); // 0x1007D6D84
	public static bool Compare(HitInfo lhs, HitInfo rhs); // 0x1007D6CC4
	public static bool op_Implicit(HitInfo exists); // 0x1007D6BF4
}

// Namespace: UnityEngine
public static class Social // TypeDefIndex: 2392
{
	// Methods
	public static ISocialPlatform get_Active(); // 0x1007D88A4
	public static ILocalUser get_localUser(); // 0x1007D8918
}

// Namespace: UnityEngine.SocialPlatforms
internal static class ActivePlatform // TypeDefIndex: 2393
{
	// Fields
	private static ISocialPlatform _active; // 0x0

	// Methods
	internal static ISocialPlatform get_Instance(); // 0x1007D88A8
	private static ISocialPlatform SelectSocialPlatform(); // 0x1007D8A08
}

// Namespace: UnityEngine.SocialPlatforms
public interface ISocialPlatform // TypeDefIndex: 2394
{
	// Methods
	public abstract ILocalUser get_localUser(); // 0
	public abstract void Authenticate(ILocalUser user, Action`1<bool> callback); // 0
	public abstract void LoadFriends(ILocalUser user, Action`1<bool> callback); // 0
}

// Namespace: UnityEngine.SocialPlatforms
public interface ILocalUser : IUserProfile // TypeDefIndex: 2395
{
	// Methods
	public abstract void Authenticate(Action`1<bool> callback); // 0
	public abstract bool get_authenticated(); // 0
}

// Namespace: UnityEngine.SocialPlatforms
public sealed class UserState : Enum // TypeDefIndex: 2396
{
	// Fields
	public int value__; // 0x10
	public const UserState Online = 0; // 0x0
	public const UserState OnlineAndAway = 1; // 0x0
	public const UserState OnlineAndBusy = 2; // 0x0
	public const UserState Offline = 3; // 0x0
	public const UserState Playing = 4; // 0x0

}

// Namespace: UnityEngine.SocialPlatforms
public interface IUserProfile // TypeDefIndex: 2397
{
	// Methods
	public abstract string get_userName(); // 0
	public abstract string get_id(); // 0
}

// Namespace: UnityEngine.SocialPlatforms
public interface IAchievement // TypeDefIndex: 2398
{
}

// Namespace: UnityEngine.SocialPlatforms
public interface IAchievementDescription // TypeDefIndex: 2399
{
}

// Namespace: UnityEngine.SocialPlatforms
public interface IScore // TypeDefIndex: 2400
{
}

// Namespace: UnityEngine.SocialPlatforms
public sealed class UserScope : Enum // TypeDefIndex: 2401
{
	// Fields
	public int value__; // 0x10
	public const UserScope Global = 0; // 0x0
	public const UserScope FriendsOnly = 1; // 0x0

}

// Namespace: UnityEngine.SocialPlatforms
public sealed class TimeScope : Enum // TypeDefIndex: 2402
{
	// Fields
	public int value__; // 0x10
	public const TimeScope Today = 0; // 0x0
	public const TimeScope Week = 1; // 0x0
	public const TimeScope AllTime = 2; // 0x0

}

// Namespace: UnityEngine.SocialPlatforms
public struct Range // TypeDefIndex: 2403
{
	// Fields
	public int from; // 0x10
	public int count; // 0x14

	// Methods
	public void .ctor(int fromValue, int valueCount); // 0x1007DDD94
}

// Namespace: UnityEngine.SocialPlatforms
public interface ILeaderboard // TypeDefIndex: 2404
{
	// Methods
	public abstract string get_id(); // 0
	public abstract UserScope get_userScope(); // 0
	public abstract Range get_range(); // 0
	public abstract TimeScope get_timeScope(); // 0
}

// Namespace: UnityEngine
public abstract class PropertyAttribute : Attribute // TypeDefIndex: 2405
{
	// Fields
	private int <order>k__BackingField; // 0x10

	// Methods
	protected void .ctor(); // 0x1007CEDD8
}

// Namespace: UnityEngine
public class TooltipAttribute : PropertyAttribute // TypeDefIndex: 2406
{
	// Fields
	public readonly string tooltip; // 0x18

	// Methods
	public void .ctor(string tooltip); // 0x1007E6E84
}

// Namespace: UnityEngine
public class SpaceAttribute : PropertyAttribute // TypeDefIndex: 2407
{
	// Fields
	public readonly float height; // 0x14

	// Methods
	public void .ctor(); // 0x1007DDE38
	public void .ctor(float height); // 0x1007DDE64
}

// Namespace: UnityEngine
public sealed class RangeAttribute : PropertyAttribute // TypeDefIndex: 2408
{
	// Fields
	public readonly float min; // 0x14
	public readonly float max; // 0x18

	// Methods
	public void .ctor(float min, float max); // 0x1007CFCC4
}

// Namespace: UnityEngine
public sealed class TextAreaAttribute : PropertyAttribute // TypeDefIndex: 2409
{
	// Fields
	public readonly int minLines; // 0x14
	public readonly int maxLines; // 0x18

	// Methods
	public void .ctor(int minLines, int maxLines); // 0x1007DFFEC
}

// Namespace: UnityEngine
public class SelectionBaseAttribute : Attribute // TypeDefIndex: 2410
{
	// Methods
	public void .ctor(); // 0x1007D5958
}

// Namespace: UnityEngine
public class StackTraceUtility // TypeDefIndex: 2411
{
	// Fields
	private static string projectFolder; // 0x0

	// Methods
	private static void .cctor(); // 0x1007DE5B8
	internal static void SetProjectFolder(string folder); // 0x1007DE634
	public static string ExtractStackTrace(); // 0x1007DE6A0
	private static bool IsSystemStacktraceType(object name); // 0x1007DEF68
	internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace); // 0x1007DF0D0
	internal static string PostprocessStacktrace(string oldString, bool stripEngineInternalInformation); // 0x1007DF550
	internal static string ExtractFormattedStackTrace(StackTrace stackTrace); // 0x1007DE734
}

// Namespace: UnityEngine
public class UnityException : Exception // TypeDefIndex: 2412
{
	// Fields
	private const int Result = -2147467261; // 0x0
	private string unityStackTrace; // 0x60

	// Methods
	public void .ctor(); // 0x1007E9354
	public void .ctor(string message); // 0x1007E93BC
	public void .ctor(string message, Exception innerException); // 0x1007E93F0
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x1007E9424
}

// Namespace: UnityEngine
public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2413
{
	// Methods
	public void .ctor(); // 0x1007D71C4
}

// Namespace: UnityEngine
public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2414
{
	// Methods
	protected void .ctor(); // 0x1007DFB9C
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x1007DFBA4
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x1007DFBA8
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x1007DFBAC
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x1007DFBB0
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex); // 0x1007DFBB4
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash); // 0x1007DFBB8
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash); // 0x1007DFBBC
	public virtual void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x1007DFBC0
	public virtual void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x1007DFBC4
	public virtual void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x1007DFBC8
	public virtual void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x1007DFBCC
	public virtual void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller); // 0x1007DFBD0
	public virtual void OnStateMachineEnter(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x1007DFBD4
	public virtual void OnStateMachineExit(Animator animator, int stateMachinePathHash, AnimatorControllerPlayable controller); // 0x1007DFBD8
}

// Namespace: UnityEngine
internal class SystemClock // TypeDefIndex: 2415
{
	// Fields
	private static readonly DateTime s_Epoch; // 0x0

	// Methods
	private static void .cctor(); // 0x1007DFBDC
	public static DateTime get_now(); // 0x1007DFC64
}

// Namespace: UnityEngine
public class TrackedReference // TypeDefIndex: 2416
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	public override bool Equals(object o); // 0x1007E7940
	public override int GetHashCode(); // 0x1007E7A70
	public static bool op_Equality(TrackedReference x, TrackedReference y); // 0x1007E79D0
}

// Namespace: UnityEngine.Events
public sealed class PersistentListenerMode : Enum // TypeDefIndex: 2417
{
	// Fields
	public int value__; // 0x10
	public const PersistentListenerMode EventDefined = 0; // 0x0
	public const PersistentListenerMode Void = 1; // 0x0
	public const PersistentListenerMode Object = 2; // 0x0
	public const PersistentListenerMode Int = 3; // 0x0
	public const PersistentListenerMode Float = 4; // 0x0
	public const PersistentListenerMode String = 5; // 0x0
	public const PersistentListenerMode Bool = 6; // 0x0

}

// Namespace: UnityEngine.Events
internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 2418
{
	// Fields
	private Object m_ObjectArgument; // 0x10
	private string m_ObjectArgumentAssemblyTypeName; // 0x18
	private int m_IntArgument; // 0x20
	private float m_FloatArgument; // 0x24
	private string m_StringArgument; // 0x28
	private bool m_BoolArgument; // 0x30

	// Methods
	public void .ctor(); // 0x1007A3188
	public Object get_unityObjectArgument(); // 0x1007A3190
	public string get_unityObjectArgumentAssemblyTypeName(); // 0x1007A3198
	public int get_intArgument(); // 0x1007A31A0
	public float get_floatArgument(); // 0x1007A31A8
	public string get_stringArgument(); // 0x1007A31B0
	public bool get_boolArgument(); // 0x1007A31B8
	private void TidyAssemblyTypeName(); // 0x1007A31C0
	public void OnBeforeSerialize(); // 0x1007A332C
	public void OnAfterDeserialize(); // 0x1007A3330
}

// Namespace: UnityEngine.Events
internal abstract class BaseInvokableCall // TypeDefIndex: 2419
{
	// Methods
	protected void .ctor(); // 0x1007A3334
	protected void .ctor(object target, MethodInfo function); // 0x1007A333C
	public abstract void Invoke(object[] args); // 0
	protected static void ThrowOnInvalidArg(object arg); // 0
	protected static bool AllowInvoke(Delegate delegate); // 0x1007A33F4
	public abstract bool Find(object targetObj, MethodInfo method); // 0
}

// Namespace: UnityEngine.Events
internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 2420
{
	// Fields
	private UnityAction Delegate; // 0x10

	// Methods
	public void .ctor(object target, MethodInfo theFunction); // 0x1007A34D8
	public void .ctor(UnityAction action); // 0x1007A3678
	public override void Invoke(object[] args); // 0x1007A3764
	public override bool Find(object targetObj, MethodInfo method); // 0x1007A37A8
}

// Namespace: UnityEngine.Events
internal class InvokableCall`1 : BaseInvokableCall // TypeDefIndex: 2421
{
	// Fields
	private UnityAction`1<T> Delegate; // 0x0

	// Methods
	public void .ctor(object target, MethodInfo theFunction); // 0
	public void .ctor(UnityAction`1<T> action); // 0
	public override void Invoke(object[] args); // 0
	public override bool Find(object targetObj, MethodInfo method); // 0
}

// Namespace: UnityEngine.Events
internal class InvokableCall`2 : BaseInvokableCall // TypeDefIndex: 2422
{
	// Fields
	private UnityAction`2<T, T> Delegate; // 0x0

	// Methods
	public void .ctor(object target, MethodInfo theFunction); // 0
	public override void Invoke(object[] args); // 0
	public override bool Find(object targetObj, MethodInfo method); // 0
}

// Namespace: UnityEngine.Events
internal class InvokableCall`3 : BaseInvokableCall // TypeDefIndex: 2423
{
	// Fields
	private UnityAction`3<T, T, T> Delegate; // 0x0

	// Methods
	public void .ctor(object target, MethodInfo theFunction); // 0
	public override void Invoke(object[] args); // 0
	public override bool Find(object targetObj, MethodInfo method); // 0
}

// Namespace: UnityEngine.Events
internal class InvokableCall`4 : BaseInvokableCall // TypeDefIndex: 2424
{
	// Fields
	private UnityAction`4<T, T, T, T> Delegate; // 0x0

	// Methods
	public void .ctor(object target, MethodInfo theFunction); // 0
	public override void Invoke(object[] args); // 0
	public override bool Find(object targetObj, MethodInfo method); // 0
}

// Namespace: UnityEngine.Events
internal class CachedInvokableCall`1 : InvokableCall`1<T> // TypeDefIndex: 2425
{
	// Fields
	private readonly object[] m_Arg1; // 0x0

	// Methods
	public void .ctor(Object target, MethodInfo theFunction, T argument); // 0
	public override void Invoke(object[] args); // 0
}

// Namespace: UnityEngine.Events
public sealed class UnityEventCallState : Enum // TypeDefIndex: 2426
{
	// Fields
	public int value__; // 0x10
	public const UnityEventCallState Off = 0; // 0x0
	public const UnityEventCallState EditorAndRuntime = 1; // 0x0
	public const UnityEventCallState RuntimeOnly = 2; // 0x0

}

// Namespace: UnityEngine.Events
internal class PersistentCall // TypeDefIndex: 2427
{
	// Fields
	private Object m_Target; // 0x10
	private string m_MethodName; // 0x18
	private PersistentListenerMode m_Mode; // 0x20
	private ArgumentCache m_Arguments; // 0x28
	private UnityEventCallState m_CallState; // 0x30

	// Methods
	public void .ctor(); // 0x1007A3CEC
	public Object get_target(); // 0x1007A3D5C
	public string get_methodName(); // 0x1007A3D64
	public PersistentListenerMode get_mode(); // 0x1007A3D6C
	public ArgumentCache get_arguments(); // 0x1007A3D74
	public bool IsValid(); // 0x1007A3D7C
	public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent); // 0x1007A3E30
	private static BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments); // 0x1007A40B8
}

// Namespace: UnityEngine.Events
internal class PersistentCallGroup // TypeDefIndex: 2428
{
	// Fields
	private List`1<PersistentCall> m_Calls; // 0x10

	// Methods
	public void .ctor(); // 0x1007A45A4
	public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase); // 0x1007A4618
}

// Namespace: UnityEngine.Events
internal class InvokableCallList // TypeDefIndex: 2429
{
	// Fields
	private readonly List`1<BaseInvokableCall> m_PersistentCalls; // 0x10
	private readonly List`1<BaseInvokableCall> m_RuntimeCalls; // 0x18
	private readonly List`1<BaseInvokableCall> m_ExecutingCalls; // 0x20
	private bool m_NeedsUpdate; // 0x28

	// Methods
	public void .ctor(); // 0x1007A3810
	public void AddPersistentInvokableCall(BaseInvokableCall call); // 0x1007A38C0
	public void AddListener(BaseInvokableCall call); // 0x1007A3934
	public void RemoveListener(object targetObj, MethodInfo method); // 0x1007A39A8
	public void ClearPersistent(); // 0x1007A3B58
	public void Invoke(object[] parameters); // 0x1007A3BBC
}

// Namespace: UnityEngine.Events
public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 2430
{
	// Fields
	private InvokableCallList m_Calls; // 0x10
	private PersistentCallGroup m_PersistentCalls; // 0x18
	private string m_TypeName; // 0x20
	private bool m_CallsDirty; // 0x28

	// Methods
	protected void .ctor(); // 0x1007A49C0
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x1007A4E7C
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x1007A4E80
	protected abstract MethodInfo FindMethod_Impl(string name, object targetObj); // 0
	internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0
	internal MethodInfo FindMethod(PersistentCall call); // 0x1007A4F20
	internal MethodInfo FindMethod(string name, object listener, PersistentListenerMode mode, Type argumentType); // 0x1007A50F0
	private void DirtyPersistentCalls(); // 0x1007A4EE8
	private void RebuildPersistentCallsIfNeeded(); // 0x1007A547C
	internal void AddCall(BaseInvokableCall call); // 0x1007A4B28
	protected void RemoveListener(object targetObj, MethodInfo method); // 0x1007A54C0
	protected void Invoke(object[] parameters); // 0x1007A4E44
	public override string ToString(); // 0x1007A54DC
	public static MethodInfo GetValidMethodInfo(object obj, string functionName, Type[] argumentTypes); // 0x1007A4BBC
}

// Namespace: UnityEngine.Events
public class UnityEvent : UnityEventBase // TypeDefIndex: 2431
{
	// Fields
	private readonly object[] m_InvokeArray; // 0x30

	// Methods
	public void .ctor(); // 0x1007A4958
	public void AddListener(UnityAction call); // 0x1007A4A9C
	protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0x1007A4B44
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0x1007A4DC8
	private static BaseInvokableCall GetDelegate(UnityAction action); // 0x1007A4AC4
	public void Invoke(); // 0x1007A4E3C
}

// Namespace: UnityEngine.Events
public abstract class UnityEvent`1 : UnityEventBase // TypeDefIndex: 2432
{
	// Fields
	private readonly object[] m_InvokeArray; // 0x0

	// Methods
	public void .ctor(); // 0
	public void AddListener(UnityAction`1<T> call); // 0
	public void RemoveListener(UnityAction`1<T> call); // 0
	protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0
	private static BaseInvokableCall GetDelegate(UnityAction`1<T> action); // 0
	public void Invoke(T arg0); // 0
}

// Namespace: UnityEngine.Events
public abstract class UnityEvent`2 : UnityEventBase // TypeDefIndex: 2433
{
	// Fields
	private readonly object[] m_InvokeArray; // 0x0

	// Methods
	public void .ctor(); // 0
	protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0
}

// Namespace: UnityEngine.Events
public abstract class UnityEvent`3 : UnityEventBase // TypeDefIndex: 2434
{
	// Fields
	private readonly object[] m_InvokeArray; // 0x0

	// Methods
	public void .ctor(); // 0
	protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0
}

// Namespace: UnityEngine.Events
public abstract class UnityEvent`4 : UnityEventBase // TypeDefIndex: 2435
{
	// Fields
	private readonly object[] m_InvokeArray; // 0x0

	// Methods
	public void .ctor(); // 0
	protected override MethodInfo FindMethod_Impl(string name, object targetObj); // 0
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction); // 0
}

// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 2436
{
	// Fields
	private float waitTime; // 0x10

	// Methods
	public void .ctor(float time); // 0x1007EB3A0
	public override bool get_keepWaiting(); // 0x1007EB3DC
}

// Namespace: UnityEngine.Experimental.Director
internal class AnimationPlayableUtilities // TypeDefIndex: 2437
{
	// Methods
	internal static int AddInputValidated(AnimationPlayable target, Playable input, Type typeofTarget); // 0x1007A6074
	internal static bool SetInputValidated(AnimationPlayable target, Playable source, int index, Type typeofTarget); // 0x1007A60A0
	internal static bool SetInputsValidated(AnimationPlayable target, IEnumerable`1<Playable> sources, Type typeofTarget); // 0x1007A60D0
	internal static bool RemoveInputValidated(AnimationPlayable target, int index, Type typeofTarget); // 0x1007A60F8
	internal static bool RemoveAllInputsValidated(AnimationPlayable target, Type typeofTarget); // 0x1007A6124
}

// Namespace: UnityEngine.Experimental.Director
public struct FrameData // TypeDefIndex: 2438
{
	// Fields
	internal int m_UpdateId; // 0x10
	internal double m_Time; // 0x18
	internal double m_LastTime; // 0x20
	internal double m_TimeScale; // 0x28

}

// Namespace: UnityEngine.Internal
public class DefaultValueAttribute : Attribute // TypeDefIndex: 2439
{
	// Fields
	private object DefaultValue; // 0x10

	// Methods
	public void .ctor(string value); // 0x1007BEF40
	public object get_Value(); // 0x1007BEF6C
	public override bool Equals(object obj); // 0x1007BEF74
	public override int GetHashCode(); // 0x1007BF05C
}

// Namespace: UnityEngine.Internal
public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 2440
{
	// Methods
	public void .ctor(); // 0x1007BF0C0
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 2441
{
	// Methods
	public abstract void set_filterLogType(LogType value); // 0
	public abstract void Log(LogType logType, object message); // 0
	public abstract void Log(LogType logType, object message, Object context); // 0
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 2442
{
	// Methods
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args); // 0
	public abstract void LogException(Exception exception, Object context); // 0
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 2443
{
	// Fields
	private ILogHandler <logHandler>k__BackingField; // 0x10
	private bool <logEnabled>k__BackingField; // 0x18
	private LogType <filterLogType>k__BackingField; // 0x1C

	// Methods
	public void .ctor(ILogHandler logHandler); // 0x1007C1814
	public ILogHandler get_logHandler(); // 0x1007C1868
	public void set_logHandler(ILogHandler value); // 0x1007C1850
	public bool get_logEnabled(); // 0x1007C1870
	public void set_logEnabled(bool value); // 0x1007C1858
	public LogType get_filterLogType(); // 0x1007C1878
	public void set_filterLogType(LogType value); // 0x1007C1860
	public bool IsLogTypeAllowed(LogType logType); // 0x1007C1880
	private static string GetString(object message); // 0x1007C18AC
	public void Log(LogType logType, object message); // 0x1007C193C
	public void Log(LogType logType, object message, Object context); // 0x1007C1AFC
	public void LogFormat(LogType logType, Object context, string format, object[] args); // 0x1007C1CC0
	public void LogException(Exception exception, Object context); // 0x1007C1E14
}

// Namespace: UnityEngine.Scripting
internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 2444
{
	// Methods
	public void .ctor(); // 0x1007D5950
}

// Namespace: UnityEngine.Scripting
internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 2445
{
	// Methods
	public void .ctor(); // 0x1007D5948
}

// Namespace: UnityEngine.Serialization
public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 2446
{
	// Fields
	private string m_oldName; // 0x10

	// Methods
	public void .ctor(string oldName); // 0x1007D6DC0
	public string get_oldName(); // 0x1007D6DEC
}

// Namespace: UnityEngineInternal
public sealed class TypeInferenceRules : Enum // TypeDefIndex: 2447
{
	// Fields
	public int value__; // 0x10
	public const TypeInferenceRules TypeReferencedByFirstArgument = 0; // 0x0
	public const TypeInferenceRules TypeReferencedBySecondArgument = 1; // 0x0
	public const TypeInferenceRules ArrayOfTypeReferencedByFirstArgument = 2; // 0x0
	public const TypeInferenceRules TypeOfFirstArgument = 3; // 0x0

}

// Namespace: UnityEngineInternal
public class TypeInferenceRuleAttribute : Attribute // TypeDefIndex: 2448
{
	// Fields
	private readonly string _rule; // 0x10

	// Methods
	public void .ctor(TypeInferenceRules rule); // 0x1007EEE4C
	public void .ctor(string rule); // 0x1007EEEFC
	public override string ToString(); // 0x1007EEF28
}

// Namespace: UnityEngineInternal
public class GenericStack : Stack // TypeDefIndex: 2449
{
	// Methods
	public void .ctor(); // 0x1007EED90
}

// Namespace: UnityEngineInternal
internal static class NetFxCoreExtensions // TypeDefIndex: 2450
{
	// Methods
	public static Delegate CreateDelegate(MethodInfo self, Type delegateType, object target); // 0x1007EEE14
	public static MethodInfo GetMethodInfo(Delegate self); // 0x1007EEE30
}

// Namespace: UnityEngine.Advertisements
public sealed class UnityAdsDelegate : MulticastDelegate // TypeDefIndex: 2451
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10078F600
	public virtual void Invoke(); // 0x10078F610
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10078F6AC
	public virtual void EndInvoke(IAsyncResult result); // 0x10078F70C
}

// Namespace: UnityEngine.Advertisements
public sealed class UnityAdsDelegate`2 : MulticastDelegate // TypeDefIndex: 2452
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T p1, T p2); // 0
	public virtual IAsyncResult BeginInvoke(T p1, T p2, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: UnityEngine
public sealed class AndroidJavaRunnable : MulticastDelegate // TypeDefIndex: 2453
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100791744
	public virtual void Invoke(); // 0x100791754
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007917F0
	public virtual void EndInvoke(IAsyncResult result); // 0x100791850
}

// Namespace: UnityEngine.Events
public sealed class UnityAction : MulticastDelegate // TypeDefIndex: 2454
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007A4840
	public virtual void Invoke(); // 0x1007A4850
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1007A48EC
	public virtual void EndInvoke(IAsyncResult result); // 0x1007A494C
}

// Namespace: UnityEngine.Events
public sealed class UnityAction`1 : MulticastDelegate // TypeDefIndex: 2455
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg0); // 0
	public virtual IAsyncResult BeginInvoke(T arg0, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: UnityEngine.Events
public sealed class UnityAction`2 : MulticastDelegate // TypeDefIndex: 2456
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg0, T arg1); // 0
	public virtual IAsyncResult BeginInvoke(T arg0, T arg1, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: UnityEngine.Events
public sealed class UnityAction`3 : MulticastDelegate // TypeDefIndex: 2457
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg0, T arg1, T arg2); // 0
	public virtual IAsyncResult BeginInvoke(T arg0, T arg1, T arg2, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: UnityEngine.Events
public sealed class UnityAction`4 : MulticastDelegate // TypeDefIndex: 2458
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T arg0, T arg1, T arg2, T arg3); // 0
	public virtual IAsyncResult BeginInvoke(T arg0, T arg1, T arg2, T arg3, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2459
{
}

// Namespace: Boo.Lang
public class Builtins // TypeDefIndex: 2460
{
	// Methods
	public static string join(IEnumerable enumerable, string separator); // 0x10035C3A0
}

// Namespace: Boo.Lang
public class List`1 : IEnumerable, ICollection, IEnumerable`1<T>, IList`1<T>, ICollection`1<T>, IEquatable`1<List`1<T>>, IList // TypeDefIndex: 2461
{
	// Fields
	private static readonly T[] EmptyArray; // 0x0
	protected T[] _items; // 0x0
	protected int _count; // 0x0

	// Methods
	public void .ctor(); // 0
	private static void .cctor(); // 0
	private void System.Collections.Generic.ICollection<T>.Add(T item); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	private void System.Collections.Generic.IList<T>.Insert(int index, T item); // 0
	private void System.Collections.Generic.IList<T>.RemoveAt(int index); // 0
	private bool System.Collections.Generic.ICollection<T>.Remove(T item); // 0
	private int System.Collections.IList.Add(object value); // 0
	private void System.Collections.IList.Insert(int index, object value); // 0
	private void System.Collections.IList.Remove(object value); // 0
	private int System.Collections.IList.IndexOf(object value); // 0
	private bool System.Collections.IList.Contains(object value); // 0
	private object System.Collections.IList.get_Item(int index); // 0
	private void System.Collections.IList.set_Item(int index, object value); // 0
	private void System.Collections.IList.RemoveAt(int index); // 0
	private bool System.Collections.IList.get_IsFixedSize(); // 0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0
	public int get_Count(); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public void CopyTo(T[] target, int index); // 0
	public bool get_IsSynchronized(); // 0
	public object get_SyncRoot(); // 0
	public bool get_IsReadOnly(); // 0
	public T get_Item(int index); // 0
	public void set_Item(int index, T value); // 0
	public List`1<T> Push(T item); // 0
	public virtual List`1<T> Add(T item); // 0
	public override string ToString(); // 0
	public string Join(string separator); // 0
	public override int GetHashCode(); // 0
	public override bool Equals(object other); // 0
	public bool Equals(List`1<T> other); // 0
	public void Clear(); // 0
	public bool Contains(T item); // 0
	public int IndexOf(T item); // 0
	public List`1<T> Insert(int index, T item); // 0
	public List`1<T> Remove(T item); // 0
	public List`1<T> RemoveAt(int index); // 0
	private void EnsureCapacity(int minCapacity); // 0
	private T[] NewArray(int minCapacity); // 0
	private void InnerRemoveAt(int index); // 0
	private bool InnerRemove(T item); // 0
	private int CheckIndex(int index); // 0
	private int NormalizeIndex(int index); // 0
	private static T Coerce(object value); // 0
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator6 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 2462
{
	// Fields
	internal int <originalCount>__0; // 0x0
	internal T[] <originalItems>__1; // 0x0
	internal int <i>__2; // 0x0
	internal int $PC; // 0x0
	internal T $current; // 0x0
	internal List`1<T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	private T System.Collections.Generic.IEnumerator<T>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: Boo.Lang.Runtime.DynamicDispatching
public class DispatcherCache // TypeDefIndex: 2463
{
	// Fields
	private static Dictionary`2<DispatcherKey, Dispatcher> _cache; // 0x0

	// Methods
	public void .ctor(); // 0x10035C98C
	private static void .cctor(); // 0x10035C994
	public Dispatcher Get(DispatcherKey key, DispatcherFactory factory); // 0x10035CA38
}

// Namespace: 
public sealed class DispatcherFactory : MulticastDelegate // TypeDefIndex: 2464
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10035CCA8
	public virtual Dispatcher Invoke(); // 0x10035CC18
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10035CD10
	public virtual Dispatcher EndInvoke(IAsyncResult result); // 0x10035CD70
}

// Namespace: Boo.Lang.Runtime.DynamicDispatching
public class DispatcherKey // TypeDefIndex: 2465
{
	// Fields
	public static readonly IEqualityComparer`1<DispatcherKey> EqualityComparer; // 0x0
	private readonly Type _type; // 0x10
	private readonly string _name; // 0x18
	private readonly Type[] _arguments; // 0x20

	// Methods
	public void .ctor(Type type, string name, Type[] arguments); // 0x10035CD7C
	private static void .cctor(); // 0x10035CDBC
}

// Namespace: 
private sealed class _EqualityComparer : IEqualityComparer`1<DispatcherKey> // TypeDefIndex: 2466
{
	// Methods
	public void .ctor(); // 0x10035CE28
	public int GetHashCode(DispatcherKey key); // 0x10035CE30
	public bool Equals(DispatcherKey x, DispatcherKey y); // 0x10035CEB0
}

// Namespace: Boo.Lang.Runtime.DynamicDispatching
public class NumericPromotions // TypeDefIndex: 2467
{
}

// Namespace: Boo.Lang.Runtime
public class ExtensionRegistry // TypeDefIndex: 2468
{
	// Fields
	private List`1<MemberInfo> _extensions; // 0x10
	private object _classLock; // 0x18

	// Methods
	public void .ctor(); // 0x10035CFF4
	public IEnumerable`1<MemberInfo> get_Extensions(); // 0x10035D084
}

// Namespace: Boo.Lang.Runtime
public interface ICoercible // TypeDefIndex: 2469
{
	// Methods
	public abstract object Coerce(Type to); // 0
}

// Namespace: Boo.Lang.Runtime
public class RuntimeServices // TypeDefIndex: 2470
{
	// Fields
	private static readonly object[] NoArguments; // 0x0
	private static readonly Type RuntimeServicesType; // 0x8
	private static readonly DispatcherCache _cache; // 0x10
	private static readonly ExtensionRegistry _extensions; // 0x18
	private static readonly object True; // 0x20

	// Methods
	private static void .cctor(); // 0x10035D08C
	private static Dispatcher GetDispatcher(object target, string cacheKeyName, Type[] cacheKeyTypes, DispatcherFactory factory); // 0x10035D1C4
	public static object Coerce(object value, Type toType); // 0x10035D2C8
	private static Dispatcher CreateCoerceDispatcher(object value, Type toType); // 0x10035D4A4
	private static Dispatcher EmitPromotionDispatcher(Type fromType, Type toType); // 0x10035D714
	private static bool IsPromotableNumeric(Type fromType); // 0x10035D660
	private static Dispatcher EmitImplicitConversionDispatcher(MethodInfo method); // 0x10035DB68
	private static object CoercibleDispatcher(object o, object[] args); // 0x10035DC24
	private static object IdentityDispatcher(object o, object[] args); // 0x10035DE1C
	private static bool IsNumeric(TypeCode code); // 0x10035DE24
	public static string op_Addition(string lhs, string rhs); // 0x10035DE48
	public static bool EqualityOperator(object lhs, object rhs); // 0x10035DEC4
	private static bool ArrayEqualityImpl(Array lhs, Array rhs); // 0x10035EAC8
	private static TypeCode GetConvertTypeCode(TypeCode lhsTypeCode, TypeCode rhsTypeCode); // 0x10035EC38
	private static bool EqualityOperator(object lhs, TypeCode lhsTypeCode, object rhs, TypeCode rhsTypeCode); // 0x10035E1B0
	internal static bool IsPromotableNumeric(TypeCode code); // 0x10035DBF8
	internal static MethodInfo FindImplicitConversionOperator(Type from, Type to); // 0x10035DA0C
	private static IEnumerable`1<MethodInfo> GetExtensionMethods(); // 0x10035F1FC
	private static MethodInfo FindImplicitConversionMethod(IEnumerable`1<MethodInfo> candidates, Type from, Type to); // 0x10035ED38
}

// Namespace: 
private sealed class <GetExtensionMethods>c__IteratorC : IEnumerable, IEnumerator, IDisposable, IEnumerable`1<MethodInfo>, IEnumerator`1<MethodInfo> // TypeDefIndex: 2471
{
	// Fields
	internal IEnumerator`1<MemberInfo> <$s_49>__0; // 0x10
	internal MemberInfo <member>__1; // 0x18
	internal int $PC; // 0x20
	internal MethodInfo $current; // 0x28

	// Methods
	public void .ctor(); // 0x10035F268
	private MethodInfo System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>.get_Current(); // 0x10035F3A4
	private object System.Collections.IEnumerator.get_Current(); // 0x10035F3AC
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10035F3B4
	private IEnumerator`1<MethodInfo> System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>.GetEnumerator(); // 0x10035F3B8
	public bool MoveNext(); // 0x10035F438
	public void Dispose(); // 0x10035F844
	public void Reset(); // 0x10035F954
}

// Namespace: 
private sealed class <Coerce>c__AnonStorey1D // TypeDefIndex: 2472
{
	// Fields
	internal object value; // 0x10
	internal Type toType; // 0x18

	// Methods
	public void .ctor(); // 0x10035D49C
	internal Dispatcher <>m__15(); // 0x10035F270
}

// Namespace: 
private sealed class <EmitImplicitConversionDispatcher>c__AnonStorey1E // TypeDefIndex: 2473
{
	// Fields
	internal MethodInfo method; // 0x10

	// Methods
	public void .ctor(); // 0x10035DC1C
	internal object <>m__16(object target, object[] args); // 0x10035F2E0
}

// Namespace: Boo.Lang.Runtime.DynamicDispatching
public sealed class Dispatcher : MulticastDelegate // TypeDefIndex: 2474
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10035C854
	public virtual object Invoke(object target, object[] args); // 0x10035C864
	public virtual IAsyncResult BeginInvoke(object target, object[] args, AsyncCallback callback, object object); // 0x10035C924
	public virtual object EndInvoke(IAsyncResult result); // 0x10035C980
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2475
{
}

// Namespace: Facebook.Unity.Settings
public class FacebookSettings : ScriptableObject // TypeDefIndex: 2476
{
	// Fields
	public const string FacebookSettingsAssetName = "FacebookSettings"; // 0x0
	public const string FacebookSettingsPath = "FacebookSDK/SDK/Resources"; // 0x0
	public const string FacebookSettingsAssetExtension = ".asset"; // 0x0
	private static List`1<OnChangeCallback> onChangeCallbacks; // 0x0
	private static FacebookSettings instance; // 0x8
	private int selectedAppIndex; // 0x18
	private List`1<string> clientTokens; // 0x20
	private List`1<string> appIds; // 0x28
	private List`1<string> appLabels; // 0x30
	private bool cookie; // 0x38
	private bool logging; // 0x39
	private bool status; // 0x3A
	private bool xfbml; // 0x3B
	private bool frictionlessRequests; // 0x3C
	private string iosURLSuffix; // 0x40
	private List`1<UrlSchemes> appLinkSchemes; // 0x48
	private string uploadAccessToken; // 0x50
	private static Action`1<OnChangeCallback> <>f__am$cache0; // 0x10

	// Methods
	public void .ctor(); // 0x1003602FC
	public static int get_SelectedAppIndex(); // 0x10036054C
	public static void set_SelectedAppIndex(int value); // 0x1003606C4
	public static List`1<string> get_AppIds(); // 0x100360878
	public static void set_AppIds(List`1<string> value); // 0x1003608E4
	public static List`1<string> get_AppLabels(); // 0x10036098C
	public static void set_AppLabels(List`1<string> value); // 0x1003609F8
	public static List`1<string> get_ClientTokens(); // 0x100360AA0
	public static void set_ClientTokens(List`1<string> value); // 0x100360B0C
	public static string get_AppId(); // 0x100360BB4
	public static string get_ClientToken(); // 0x100360C38
	public static bool get_IsValidAppId(); // 0x100360CBC
	public static bool get_Cookie(); // 0x100360D94
	public static void set_Cookie(bool value); // 0x100360E00
	public static bool get_Logging(); // 0x100360EB4
	public static void set_Logging(bool value); // 0x100360F20
	public static bool get_Status(); // 0x100360FD4
	public static void set_Status(bool value); // 0x100361040
	public static bool get_Xfbml(); // 0x1003610F4
	public static void set_Xfbml(bool value); // 0x100361160
	public static string get_IosURLSuffix(); // 0x100361214
	public static void set_IosURLSuffix(string value); // 0x100361280
	public static string get_ChannelUrl(); // 0x100361364
	public static bool get_FrictionlessRequests(); // 0x1003613AC
	public static void set_FrictionlessRequests(bool value); // 0x100361418
	public static List`1<UrlSchemes> get_AppLinkSchemes(); // 0x1003614CC
	public static void set_AppLinkSchemes(List`1<UrlSchemes> value); // 0x100361538
	public static string get_UploadAccessToken(); // 0x1003615E0
	public static void set_UploadAccessToken(string value); // 0x10036164C
	public static FacebookSettings get_Instance(); // 0x1003605B8
	public static FacebookSettings get_NullableInstance(); // 0x100361730
	public static void RegisterChangeEventCallback(OnChangeCallback callback); // 0x10036186C
	public static void UnregisterChangeEventCallback(OnChangeCallback callback); // 0x1003618F0
	private static void SettingsChanged(); // 0x10036076C
	private static void .cctor(); // 0x100361974
	private static void <SettingsChanged>m__0(OnChangeCallback callback); // 0x1003619E8
}

// Namespace: 
public sealed class OnChangeCallback : MulticastDelegate // TypeDefIndex: 2477
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100361A94
	public virtual void Invoke(); // 0x100361A04
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100361AB0
	public virtual void EndInvoke(IAsyncResult result); // 0x100361B10
}

// Namespace: 
public class UrlSchemes // TypeDefIndex: 2478
{
	// Fields
	private List`1<string> list; // 0x10

	// Methods
	public void .ctor(optional List`1<string> schemes); // 0x1003604C0
	public List`1<string> get_Schemes(); // 0x100361B1C
	public void set_Schemes(List`1<string> value); // 0x100361B24
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2479
{
}

// Namespace: JsonFx.Json
public interface ICustomConverter // TypeDefIndex: 2480
{
	// Methods
	public abstract object TryConvert(object value, Type targetType); // 0
}

// Namespace: JsonFx.Json
public interface IJsonSerializable // TypeDefIndex: 2481
{
	// Methods
	public abstract void ReadJson(JsonReader reader); // 0
	public abstract void WriteJson(JsonWriter writer); // 0
}

// Namespace: JsonFx.Json
public class JsonClassAttribute : Attribute // TypeDefIndex: 2482
{
	// Fields
	private string jsonName; // 0x10

	// Methods
	public string get_Name(); // 0x1004D2468
	public static string GetClassName(Type value); // 0x1004D2470
}

// Namespace: JsonFx.Json
public sealed class JsonIgnoreAttribute : Attribute // TypeDefIndex: 2483
{
	// Methods
	public static bool IsJsonIgnore(object value); // 0x1004D25B8
	public static bool IsXmlIgnore(object value); // 0x1004D27B8
}

// Namespace: JsonFx.Json
public class JsonNameAttribute : Attribute // TypeDefIndex: 2484
{
	// Fields
	private string jsonName; // 0x10

	// Methods
	public string get_Name(); // 0x1004D29B8
	public static string GetJsonName(object value); // 0x1004D29C0
}

// Namespace: JsonFx.Json
public class JsonReader // TypeDefIndex: 2485
{
	// Fields
	private readonly JsonReaderSettings Settings; // 0x10
	private readonly string Source; // 0x18
	private readonly int SourceLength; // 0x20
	private int index; // 0x24
	private Func`2<string, Type> typeCreator; // 0x28

	// Methods
	public void .ctor(string input); // 0x1004D2BD8
	public void .ctor(string input, JsonReaderSettings settings); // 0x1004D2CB8
	public object Deserialize(int start, Type type, Func`2<string, Type> typeCreator); // 0x1004D2D4C
	private object Read(Type expectedType, bool typeIsHint); // 0x1004D2D60
	public string GetFieldValue(string fieldNameToSearch); // 0x1004D4C34
	public object ReadObject(Type objectType); // 0x1004D3250
	private IEnumerable ReadArray(Type arrayType); // 0x1004D3AC4
	private string ReadUnquotedKey(); // 0x1004D54A8
	private object ReadString(Type expectedType); // 0x1004D3EC0
	private object ReadNumber(Type expectedType); // 0x1004D4344
	public static object Deserialize(string value); // 0x1004D6F5C
	public static object Deserialize(string value, int start, Type type, Func`2<string, Type> typeCreator); // 0x1004D6F6C
	private JsonToken Tokenize(); // 0x1004D3248
	private JsonToken Tokenize(bool allowUnquotedString); // 0x1004D4EA0
	private bool MatchLiteral(string literal); // 0x1004D7000
}

// Namespace: JsonFx.Json
public class JsonReaderSettings // TypeDefIndex: 2486
{
	// Fields
	internal readonly TypeCoercionUtility Coercion; // 0x10
	private bool allowUnquotedObjectKeys; // 0x18
	private string typeHintName; // 0x20

	// Methods
	public void .ctor(); // 0x1004D2C48
	public bool get_AllowUnquotedObjectKeys(); // 0x1004D4E98
	internal bool IsTypeHintName(string name); // 0x1004D5A38
}

// Namespace: JsonFx.Json
public class JsonSerializationException : InvalidOperationException // TypeDefIndex: 2487
{
	// Methods
	public void .ctor(string message); // 0x1004D25B0
}

// Namespace: JsonFx.Json
public class JsonDeserializationException : JsonSerializationException // TypeDefIndex: 2488
{
	// Fields
	private int index; // 0x60

	// Methods
	public void .ctor(string message, int index); // 0x1004D257C
}

// Namespace: JsonFx.Json
public class JsonTypeCoercionException : ArgumentException // TypeDefIndex: 2489
{
	// Methods
	public void .ctor(string message); // 0x1004D71D4
	public void .ctor(string message, Exception innerException); // 0x1004D71DC
}

// Namespace: JsonFx.Json
public class JsonSpecifiedPropertyAttribute : Attribute // TypeDefIndex: 2490
{
	// Fields
	private string specifiedProperty; // 0x10

	// Methods
	public string get_SpecifiedProperty(); // 0x1004D70C8
	public static string GetJsonSpecifiedProperty(MemberInfo memberInfo); // 0x1004D70D0
}

// Namespace: JsonFx.Json
internal sealed class JsonToken : Enum // TypeDefIndex: 2491
{
	// Fields
	public int value__; // 0x10
	public const JsonToken End = 0; // 0x0
	public const JsonToken Undefined = 1; // 0x0
	public const JsonToken Null = 2; // 0x0
	public const JsonToken False = 3; // 0x0
	public const JsonToken True = 4; // 0x0
	public const JsonToken NaN = 5; // 0x0
	public const JsonToken PositiveInfinity = 6; // 0x0
	public const JsonToken NegativeInfinity = 7; // 0x0
	public const JsonToken Number = 8; // 0x0
	public const JsonToken String = 9; // 0x0
	public const JsonToken ArrayStart = 10; // 0x0
	public const JsonToken ArrayEnd = 11; // 0x0
	public const JsonToken ObjectStart = 12; // 0x0
	public const JsonToken ObjectEnd = 13; // 0x0
	public const JsonToken NameDelim = 14; // 0x0
	public const JsonToken ValueDelim = 15; // 0x0
	public const JsonToken UnquotedName = 16; // 0x0

}

// Namespace: JsonFx.Json
public class JsonWriter : IDisposable // TypeDefIndex: 2492
{
	// Fields
	private readonly TextWriter Writer; // 0x10
	private JsonWriterSettings settings; // 0x18
	private int depth; // 0x20

	// Methods
	public void .ctor(StringBuilder output); // 0x1004D71E4
	public void .ctor(StringBuilder output, JsonWriterSettings settings); // 0x1004D72C4
	private void System.IDisposable.Dispose(); // 0x1004D7440
	public static string Serialize(object value); // 0x1004D7454
	public void Write(object value); // 0x1004D75D8
	protected virtual void Write(object value, bool isProperty); // 0x1004D7638
	public virtual void Write(DateTime value); // 0x1004D89FC
	public virtual void Write(Guid value); // 0x1004D8BF4
	public virtual void Write(Enum value); // 0x1004D8CB8
	public virtual void Write(string value); // 0x1004D9300
	public virtual void Write(bool value); // 0x1004D9764
	public virtual void Write(byte value); // 0x1004D980C
	public virtual void Write(sbyte value); // 0x1004D98E0
	public virtual void Write(short value); // 0x1004D99B4
	public virtual void Write(ushort value); // 0x1004D9A88
	public virtual void Write(int value); // 0x1004D9B5C
	public virtual void Write(uint value); // 0x1004D9C30
	public virtual void Write(long value); // 0x1004D9DDC
	public virtual void Write(ulong value); // 0x1004D9F88
	public virtual void Write(float value); // 0x1004DA134
	public virtual void Write(double value); // 0x1004DA294
	public virtual void Write(Decimal value); // 0x1004DA3F4
	public virtual void Write(char value); // 0x1004DA598
	public virtual void Write(TimeSpan value); // 0x1004DA604
	public virtual void Write(Uri value); // 0x1004DA66C
	public virtual void Write(Version value); // 0x1004DA6F8
	public virtual void Write(XmlNode value); // 0x1004DA768
	protected internal virtual void WriteArray(IEnumerable value); // 0x1004DA7F4
	protected virtual void WriteArrayItem(object item); // 0x1004DADB8
	protected virtual void WriteObject(IDictionary value); // 0x1004DAE18
	protected virtual void WriteDictionary(IEnumerable value); // 0x1004DAE74
	private void WriteObjectProperty(string key, object value); // 0x1004DB430
	protected virtual void WriteObjectPropertyName(string name); // 0x1004DB520
	protected virtual void WriteObjectPropertyValue(object value); // 0x1004DB57C
	protected virtual void WriteObject(object value, Type type); // 0x1004DB5DC
	protected virtual void WriteArrayItemDelim(); // 0x1004DC2A4
	protected virtual void WriteObjectPropertyDelim(); // 0x1004DC2FC
	protected virtual void WriteLine(); // 0x1004DC354
	private bool IsIgnored(Type objType, MemberInfo member, object obj); // 0x1004DBE90
	private bool IsDefaultValue(MemberInfo member, object value); // 0x1004DC124
	private static Enum[] GetFlagList(Type enumType, object value); // 0x1004D9020
	protected virtual bool InvalidIeee754(Decimal value); // 0x1004DC460
}

// Namespace: JsonFx.Json
public class JsonWriterSettings // TypeDefIndex: 2493
{
	// Fields
	private WriteDelegate`1<DateTime> dateTimeSerializer; // 0x10
	private int maxDepth; // 0x18
	private string newLine; // 0x20
	private bool prettyPrint; // 0x28
	private string tab; // 0x30
	private string typeHintName; // 0x38
	private bool useXmlSerializationAttributes; // 0x40

	// Methods
	public void .ctor(); // 0x1004D7254
	public virtual string get_TypeHintName(); // 0x1004DC590
	public virtual bool get_PrettyPrint(); // 0x1004DC598
	public virtual string get_Tab(); // 0x1004DC5A0
	public virtual string get_NewLine(); // 0x1004DC5A8
	public virtual int get_MaxDepth(); // 0x1004DC5B0
	public virtual bool get_UseXmlSerializationAttributes(); // 0x1004DC5B8
	public virtual WriteDelegate`1<DateTime> get_DateTimeSerializer(); // 0x1004DC5C0
}

// Namespace: JsonFx.Json
internal class TypeCoercionUtility // TypeDefIndex: 2494
{
	// Fields
	private Dictionary`2<Type, Dictionary`2<string, MemberInfo>> memberMapCache; // 0x10
	private bool allowNullValueTypes; // 0x18
	private ICustomConverter <CustomConverter>k__BackingField; // 0x20

	// Methods
	public void .ctor(); // 0x1004D70B8
	public ICustomConverter get_CustomConverter(); // 0x1004DC5C8
	private Dictionary`2<Type, Dictionary`2<string, MemberInfo>> get_MemberMapCache(); // 0x1004DC5D0
	internal object ProcessTypeHint(IDictionary result, string typeInfo, out Type objectType, out Dictionary`2<string, MemberInfo> memberMap); // 0x1004D5B74
	internal object InstantiateObject(Type objectType, out Dictionary`2<string, MemberInfo> memberMap); // 0x1004D550C
	private Dictionary`2<string, MemberInfo> CreateMemberMap(Type objectType); // 0x1004DCB20
	internal static Type GetMemberInfo(Dictionary`2<string, MemberInfo> memberMap, string memberName, out MemberInfo memberInfo); // 0x1004D58AC
	internal void SetMemberValue(object result, Type memberType, MemberInfo memberInfo, object value); // 0x1004D5CA4
	internal object CoerceType(Type targetType, object value); // 0x1004D5E48
	private object CoerceType(Type targetType, IDictionary value, out Dictionary`2<string, MemberInfo> memberMap); // 0x1004DC644
	private object CoerceList(Type targetType, Type arrayType, IEnumerable value); // 0x1004DCF74
	private Array CoerceArray(Type elementType, IEnumerable value); // 0x1004DDD50
	private static bool IsNullable(Type type); // 0x1004DCE8C
}

// Namespace: JsonFx.Json
public sealed class WriteDelegate`1 : MulticastDelegate // TypeDefIndex: 2495
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(JsonWriter writer, T value); // 0
	public virtual IAsyncResult BeginInvoke(JsonWriter writer, T value, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2496
{
}

// Namespace: TapjoyUnity.Internal
public abstract class ApiBinding // TypeDefIndex: 2497
{
	// Fields
	protected const string DEFAULT_EVENT_VALUE_NAME = "value"; // 0x0
	protected const string CONNECT_FLAG_DICTIONARY_NAME = "connectFlags"; // 0x0
	protected const string VERSION_NAME = "11.8.1"; // 0x0
	private static ApiBinding instance; // 0x0
	private static OnInstanceSetHandler onInstanceSetHandler; // 0x8
	private string name; // 0x10

	// Methods
	protected void .ctor(string name); // 0x100740ECC
	public static ApiBinding get_Instance(); // 0x100740EF8
	protected static void SetInstance(ApiBinding value); // 0x100741040
	internal static void set_OnInstanceSet(OnInstanceSetHandler value); // 0x100741204
	internal string get_Name(); // 0x1007412E0
	public abstract void Connect(string sdkKey, Dictionary`2<string, object> flag); // 0
	public abstract string GetSDKVersion(); // 0
	public abstract void SetDebugEnabled(bool enabled); // 0
	public abstract void SetGcmSender(string senderId); // 0
	public abstract void SetAppDataVersion(string dataVersion); // 0
	public abstract void ActivateUnitySupport(); // 0
	public abstract void GetCurrencyBalance(); // 0
	public abstract void SpendCurrency(int points); // 0
	public abstract void AwardCurrency(int points); // 0
	public abstract float GetCurrencyMultiplier(); // 0
	public abstract void SetCurrencyMultiplier(float multiplier); // 0
	public abstract void ShowDefaultEarnedCurrencyAlert(); // 0
	public abstract void ActionComplete(string actionID); // 0
	public abstract void CreatePlacement(string placementGuid, string placementName); // 0
	public abstract void DismissPlacementContent(); // 0
	public abstract void RequestPlacementContent(string placementGuid); // 0
	public abstract void ShowPlacementContent(string placementGuid); // 0
	public abstract void ActionRequestCompleted(string requestId); // 0
	public abstract void ActionRequestCancelled(string requestId); // 0
	public abstract void EnablePaidAppWithActionID(string enablePaidAppWithActionID); // 0
	public abstract bool IsPlacementContentReady(string placementGuid); // 0
	public abstract bool IsPlacementContentAvailable(string placementGuid); // 0
	public abstract void RemovePlacement(string placementGuid); // 0
	public abstract void RemoveActionRequest(string requestId); // 0
	public abstract void StartSession(); // 0
	public abstract void EndSession(); // 0
	public abstract void SetUserID(string userId); // 0
	public abstract void SetUserLevel(int userLevel); // 0
	public abstract void SetUserFriendCount(int friendCount); // 0
	public abstract void SetUserCohortVariable(int variableIndex, string value); // 0
	public abstract void ClearUserTags(); // 0
	public abstract void AddUserTag(string tag); // 0
	public abstract void RemoveUserTag(string tag); // 0
	public abstract void TrackEvent(string name, long value); // 0
	public abstract void TrackEvent(string category, string name, long value); // 0
	public abstract void TrackEvent(string category, string name, string parameter1, string parameter2, long value); // 0
	public abstract void TrackEvent(string category, string name, string parameter1, string parameter2, string value1Name, long value1, string value2Name, long value2, string value3Name, long value3); // 0
	public abstract void TrackPurchase(string productId, string currencyCode, double price, string campaignId); // 0
	public abstract void TrackPurchaseInGooglePlayStore(string skuDetails, string purchaseData, string dataSignature, string campaignId); // 0
	public abstract void TrackPurchaseInAppleAppStore(string productId, string currencyCode, double productPrice, string transactionId, string campaignId); // 0
	private static void .cctor(); // 0x1007412E8
}

// Namespace: 
internal sealed class OnInstanceSetHandler : MulticastDelegate // TypeDefIndex: 2498
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100741338
	public virtual void Invoke(); // 0x100741174
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100741354
	public virtual void EndInvoke(IAsyncResult result); // 0x1007413B4
}

// Namespace: TapjoyUnity.Internal
internal class ApiBindingNone : ApiBinding // TypeDefIndex: 2499
{
	// Methods
	public void .ctor(); // 0x100740FC4
	public override void Connect(string sdkKey, Dictionary`2<string, object> flag); // 0x1007413C0
	public override void ActionComplete(string actionID); // 0x1007413C4
	public override string GetSDKVersion(); // 0x1007413C8
	public override void SetDebugEnabled(bool enabled); // 0x100741410
	public override void SetGcmSender(string senderId); // 0x100741414
	public override void SetAppDataVersion(string dataVersion); // 0x100741418
	public override void ActivateUnitySupport(); // 0x10074141C
	public override void GetCurrencyBalance(); // 0x100741420
	public override void SpendCurrency(int amount); // 0x100741424
	public override void AwardCurrency(int amount); // 0x100741428
	public override float GetCurrencyMultiplier(); // 0x10074142C
	public override void SetCurrencyMultiplier(float multiplier); // 0x100741434
	public override void ShowDefaultEarnedCurrencyAlert(); // 0x100741438
	public override void CreatePlacement(string placementGuid, string eventName); // 0x10074143C
	public override void DismissPlacementContent(); // 0x100741440
	public override void RequestPlacementContent(string placementGuid); // 0x100741444
	public override void ShowPlacementContent(string placementGuid); // 0x100741448
	public override bool IsPlacementContentReady(string placementGuid); // 0x10074144C
	public override bool IsPlacementContentAvailable(string placementGuid); // 0x100741454
	public override void ActionRequestCompleted(string requestId); // 0x10074145C
	public override void ActionRequestCancelled(string requestId); // 0x100741460
	public override void EnablePaidAppWithActionID(string enablePaidAppWithActionID); // 0x100741464
	public override void RemovePlacement(string placementGuid); // 0x100741468
	public override void RemoveActionRequest(string requestID); // 0x10074146C
	public override void StartSession(); // 0x100741470
	public override void EndSession(); // 0x100741474
	public override void SetUserID(string userId); // 0x100741478
	public override void SetUserLevel(int userLevel); // 0x10074147C
	public override void SetUserFriendCount(int friendCount); // 0x100741480
	public override void SetUserCohortVariable(int variableIndex, string value); // 0x100741484
	public override void ClearUserTags(); // 0x100741488
	public override void AddUserTag(string tag); // 0x10074148C
	public override void RemoveUserTag(string tag); // 0x100741490
	public override void TrackEvent(string name, long value); // 0x100741494
	public override void TrackEvent(string category, string name, long value); // 0x100741498
	public override void TrackEvent(string category, string name, string parameter1, string parameter2, long value); // 0x10074149C
	public override void TrackEvent(string category, string name, string parameter1, string parameter2, string value1Name, long value1, string value2Name, long value2, string value3Name, long value3); // 0x1007414A0
	public override void TrackPurchase(string productId, string currencyCode, double price, string campaignId); // 0x1007414A4
	public override void TrackPurchaseInGooglePlayStore(string skuDetails, string purchaseData, string dataSignature, string campaignId); // 0x1007414A8
	public override void TrackPurchaseInAppleAppStore(string productId, string currencyCode, double productPrice, string transactionId, string campaignId); // 0x1007414AC
}

// Namespace: TapjoyUnity
public class Tapjoy // TypeDefIndex: 2500
{
	// Fields
	internal const string VERSION_NAME = "11.8.1"; // 0x0
	private static bool _isConnected; // 0x0
	private static OnConnectSuccessHandler OnConnectSuccessInvoker; // 0x8
	private static OnConnectSuccessHandler OnConnectSuccessInternalInvoker; // 0x10
	private static OnConnectFailureHandler OnConnectFailureInvoker; // 0x18
	private static OnConnectFailureHandler OnConnectFailureInternalInvoker; // 0x20
	private static OnSetUserIDSuccessHandler OnSetUserIDSuccessInvoker; // 0x28
	private static OnSetUserIDFailureHandler OnSetUserIDFailureInvoker; // 0x30
	private static OnGetCurrencyBalanceResponseHandler OnGetCurrencyBalanceResponseInvoker; // 0x38
	private static OnGetCurrencyBalanceResponseFailureHandler OnGetCurrencyBalanceResponseFailureInvoker; // 0x40
	private static OnSpendCurrencyResponseHandler OnSpendCurrencyResponseInvoker; // 0x48
	private static OnSpendCurrencyResponseFailureHandler OnSpendCurrencyResponseFailureInvoker; // 0x50
	private static OnAwardCurrencyResponseHandler OnAwardCurrencyResponseInvoker; // 0x58
	private static OnAwardCurrencyResponseFailureHandler OnAwardCurrencyResponseFailureInvoker; // 0x60
	private static OnEarnedCurrencyHandler OnEarnedCurrencyInvoker; // 0x68
	private static OnVideoStartHandler OnVideoStartInvoker; // 0x70
	private static OnVideoErrorHandler OnVideoErrorInvoker; // 0x78
	private static OnVideoCompleteHandler OnVideoCompleteInvoker; // 0x80
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x88

	// Methods
	public void .ctor(); // 0x100745C24
	public static string get_Version(); // 0x100745C2C
	public static bool get_IsConnected(); // 0x100742308
	public static void set_IsConnected(bool value); // 0x100745C74
	public static void Connect(); // 0x100745CE0
	public static void Connect(string sdkKey); // 0x100745DC8
	public static void Connect(string sdkKey, Dictionary`2<string, object> connectFlags); // 0x100745EBC
	public static void SetDebugEnabled(bool enable); // 0x100745FC0
	public static void SetGcmSender(string senderId); // 0x10074606C
	public static void ActionComplete(string actionID); // 0x100746118
	public static void EnablePaidAppWithActionID(string paidAppWithActionID); // 0x1007461C4
	public static void SetAppDataVersion(string dataVersion); // 0x100746270
	public static void SetUserID(string userId); // 0x10074631C
	public static void SetUserLevel(int userLevel); // 0x1007463C8
	public static void SetUserFriendCount(int friendCount); // 0x100746474
	public static void SetUserCohortVariable(int variableIndex, string value); // 0x100746524
	public static void ClearUserTags(); // 0x1007465DC
	public static void AddUserTag(string tag); // 0x10074667C
	public static void RemoveUserTag(string tag); // 0x10074672C
	public static void TrackEvent(string name, optional long value); // 0x1007467DC
	public static void TrackEvent(string category, string name, long value); // 0x100746894
	public static void TrackEvent(string category, string name, string parameter1, optional string parameter2, optional long value); // 0x10074695C
	public static void TrackEvent(string category, string name, string parameter1, string parameter2, string value1Name, long value1, optional string value2Name, optional long value2, optional string value3Name, optional long value3); // 0x100746A3C
	public static void TrackPurchase(string productId, string currencyCode, double productPrice, optional string campaignId); // 0x100746B38
	public static void TrackPurchaseInGooglePlayStore(string skuDetails, string purchaseData, string dataSignature, optional string campaignId); // 0x100746C10
	public static void TrackPurchaseInAppleAppStore(string productId, string currencyCode, double productPrice, string transactionId, optional string campaignId); // 0x100746CE0
	public static void AwardCurrency(int amount); // 0x100746DC0
	public static void GetCurrencyBalance(); // 0x100746E6C
	public static void SpendCurrency(int amount); // 0x100746F08
	public static float GetCurrencyMultiplier(); // 0x100746FB4
	public static void SetCurrencyMultiplier(float multiplier); // 0x100747050
	public static void ShowDefaultEarnedCurrencyAlert(); // 0x1007470FC
	public static void add_OnConnectSuccess(OnConnectSuccessHandler value); // 0x100747198
	public static void remove_OnConnectSuccess(OnConnectSuccessHandler value); // 0x10074729C
	internal static void add_OnConnectSuccessInternal(OnConnectSuccessHandler value); // 0x100742A24
	internal static void remove_OnConnectSuccessInternal(OnConnectSuccessHandler value); // 0x100742920
	public static void add_OnConnectFailure(OnConnectFailureHandler value); // 0x1007473A0
	public static void remove_OnConnectFailure(OnConnectFailureHandler value); // 0x1007474A4
	internal static void add_OnConnectFailureInternal(OnConnectFailureHandler value); // 0x100742C3C
	internal static void remove_OnConnectFailureInternal(OnConnectFailureHandler value); // 0x100742B38
	internal static void DispatchConnectEvent(string connectCallbackMethod); // 0x1007434F0
	public static void add_OnSetUserIDSuccess(OnSetUserIDSuccessHandler value); // 0x1007476C8
	public static void remove_OnSetUserIDSuccess(OnSetUserIDSuccessHandler value); // 0x1007477CC
	public static void add_OnSetUserIDFailure(OnSetUserIDFailureHandler value); // 0x1007478D0
	public static void remove_OnSetUserIDFailure(OnSetUserIDFailureHandler value); // 0x1007479D4
	internal static void DispatchSetUserIDEvent(string commaDelimitedMessage); // 0x1007437A0
	public static void add_OnGetCurrencyBalanceResponse(OnGetCurrencyBalanceResponseHandler value); // 0x100747C04
	public static void remove_OnGetCurrencyBalanceResponse(OnGetCurrencyBalanceResponseHandler value); // 0x100747D08
	public static void add_OnGetCurrencyBalanceResponseFailure(OnGetCurrencyBalanceResponseFailureHandler value); // 0x100747E0C
	public static void remove_OnGetCurrencyBalanceResponseFailure(OnGetCurrencyBalanceResponseFailureHandler value); // 0x100747F10
	public static void add_OnSpendCurrencyResponse(OnSpendCurrencyResponseHandler value); // 0x100748014
	public static void remove_OnSpendCurrencyResponse(OnSpendCurrencyResponseHandler value); // 0x100748118
	public static void add_OnSpendCurrencyResponseFailure(OnSpendCurrencyResponseFailureHandler value); // 0x10074821C
	public static void remove_OnSpendCurrencyResponseFailure(OnSpendCurrencyResponseFailureHandler value); // 0x100748320
	public static void add_OnAwardCurrencyResponse(OnAwardCurrencyResponseHandler value); // 0x100748424
	public static void remove_OnAwardCurrencyResponse(OnAwardCurrencyResponseHandler value); // 0x100748528
	public static void add_OnAwardCurrencyResponseFailure(OnAwardCurrencyResponseFailureHandler value); // 0x10074862C
	public static void remove_OnAwardCurrencyResponseFailure(OnAwardCurrencyResponseFailureHandler value); // 0x100748730
	public static void add_OnEarnedCurrency(OnEarnedCurrencyHandler value); // 0x100748834
	public static void remove_OnEarnedCurrency(OnEarnedCurrencyHandler value); // 0x100748938
	internal static void DispatchCurrencyEvent(string commaDelimitedMessage); // 0x100743AA0
	public static void add_OnVideoStart(OnVideoStartHandler value); // 0x100748F10
	public static void remove_OnVideoStart(OnVideoStartHandler value); // 0x100749014
	public static void add_OnVideoError(OnVideoErrorHandler value); // 0x100749118
	public static void remove_OnVideoError(OnVideoErrorHandler value); // 0x10074921C
	public static void add_OnVideoComplete(OnVideoCompleteHandler value); // 0x100749320
	public static void remove_OnVideoComplete(OnVideoCompleteHandler value); // 0x100749424
	internal static void DispatchVideoEvent(string commaDelimitedMessage); // 0x100744A00
	private static void .cctor(); // 0x1007496E4
}

// Namespace: 
public sealed class OnConnectSuccessHandler : MulticastDelegate // TypeDefIndex: 2501
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100742910
	public virtual void Invoke(); // 0x1007475A8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100749980
	public virtual void EndInvoke(IAsyncResult result); // 0x1007499E0
}

// Namespace: 
public sealed class OnConnectFailureHandler : MulticastDelegate // TypeDefIndex: 2502
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100742B28
	public virtual void Invoke(); // 0x100747638
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100749908
	public virtual void EndInvoke(IAsyncResult result); // 0x100749968
}

// Namespace: 
public sealed class OnSetUserIDSuccessHandler : MulticastDelegate // TypeDefIndex: 2503
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749D7C
	public virtual void Invoke(); // 0x100747AD8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100749D98
	public virtual void EndInvoke(IAsyncResult result); // 0x100749DF8
}

// Namespace: 
public sealed class OnSetUserIDFailureHandler : MulticastDelegate // TypeDefIndex: 2504
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749CDC
	public virtual void Invoke(string errorMessage); // 0x100747B68
	public virtual IAsyncResult BeginInvoke(string errorMessage, AsyncCallback callback, object object); // 0x100749D20
	public virtual void EndInvoke(IAsyncResult result); // 0x100749D70
}

// Namespace: 
public sealed class OnGetCurrencyBalanceResponseHandler : MulticastDelegate // TypeDefIndex: 2505
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749BB4
	public virtual void Invoke(string currencyName, int balance); // 0x100748A3C
	public virtual IAsyncResult BeginInvoke(string currencyName, int balance, AsyncCallback callback, object object); // 0x100749C08
	public virtual void EndInvoke(IAsyncResult result); // 0x100749CD0
}

// Namespace: 
public sealed class OnGetCurrencyBalanceResponseFailureHandler : MulticastDelegate // TypeDefIndex: 2506
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749B14
	public virtual void Invoke(string errorMessage); // 0x100748AFC
	public virtual IAsyncResult BeginInvoke(string errorMessage, AsyncCallback callback, object object); // 0x100749B58
	public virtual void EndInvoke(IAsyncResult result); // 0x100749BA8
}

// Namespace: 
public sealed class OnSpendCurrencyResponseHandler : MulticastDelegate // TypeDefIndex: 2507
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749EA4
	public virtual void Invoke(string currencyName, int balance); // 0x100748B98
	public virtual IAsyncResult BeginInvoke(string currencyName, int balance, AsyncCallback callback, object object); // 0x100749EF8
	public virtual void EndInvoke(IAsyncResult result); // 0x100749FC0
}

// Namespace: 
public sealed class OnSpendCurrencyResponseFailureHandler : MulticastDelegate // TypeDefIndex: 2508
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749E04
	public virtual void Invoke(string errorMessage); // 0x100748C58
	public virtual IAsyncResult BeginInvoke(string errorMessage, AsyncCallback callback, object object); // 0x100749E48
	public virtual void EndInvoke(IAsyncResult result); // 0x100749E98
}

// Namespace: 
public sealed class OnAwardCurrencyResponseHandler : MulticastDelegate // TypeDefIndex: 2509
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007497D4
	public virtual void Invoke(string currencyName, int balance); // 0x100748CF4
	public virtual IAsyncResult BeginInvoke(string currencyName, int balance, AsyncCallback callback, object object); // 0x100749828
	public virtual void EndInvoke(IAsyncResult result); // 0x1007498F0
}

// Namespace: 
public sealed class OnAwardCurrencyResponseFailureHandler : MulticastDelegate // TypeDefIndex: 2510
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749734
	public virtual void Invoke(string errorMessage); // 0x100748DB4
	public virtual IAsyncResult BeginInvoke(string errorMessage, AsyncCallback callback, object object); // 0x100749778
	public virtual void EndInvoke(IAsyncResult result); // 0x1007497C8
}

// Namespace: 
public sealed class OnEarnedCurrencyHandler : MulticastDelegate // TypeDefIndex: 2511
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1007499EC
	public virtual void Invoke(string currencyName, int amount); // 0x100748E50
	public virtual IAsyncResult BeginInvoke(string currencyName, int amount, AsyncCallback callback, object object); // 0x100749A40
	public virtual void EndInvoke(IAsyncResult result); // 0x100749B08
}

// Namespace: 
public sealed class OnVideoStartHandler : MulticastDelegate // TypeDefIndex: 2512
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074A0F4
	public virtual void Invoke(); // 0x100749528
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10074A110
	public virtual void EndInvoke(IAsyncResult result); // 0x10074A170
}

// Namespace: 
public sealed class OnVideoErrorHandler : MulticastDelegate // TypeDefIndex: 2513
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074A054
	public virtual void Invoke(string errorMessage); // 0x1007495B8
	public virtual IAsyncResult BeginInvoke(string errorMessage, AsyncCallback callback, object object); // 0x10074A098
	public virtual void EndInvoke(IAsyncResult result); // 0x10074A0E8
}

// Namespace: 
public sealed class OnVideoCompleteHandler : MulticastDelegate // TypeDefIndex: 2514
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100749FCC
	public virtual void Invoke(); // 0x100749654
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100749FE8
	public virtual void EndInvoke(IAsyncResult result); // 0x10074A048
}

// Namespace: TapjoyUnity.Internal
public class TapjoyComponent : MonoBehaviour // TypeDefIndex: 2515
{
	// Fields
	private const string GAME_OBJECT_NAME = "TapjoyUnity"; // 0x0
	private const string DISABLE_ADVERTISING_ID_CHECK = "TJC_OPTION_DISABLE_ADVERTISING_ID_CHECK"; // 0x0
	private const string DISABLE_PERSISTENT_IDS = "TJC_OPTION_DISABLE_PERSISTENT_IDS"; // 0x0
	private const string FYBER_APP_ID = "TJC_OPTION_FYBER_APP_ID"; // 0x0
	private const string FYBER_APP_TOKEN = "TJC_OPTION_FYBER_APP_TOKEN"; // 0x0
	private const string FYBER_USER_ID = "TJC_OPTION_FYBER_USER_ID"; // 0x0
	private static bool applicationPaused; // 0x0
	private static bool isConnecting; // 0x1
	private static bool triedConnecting; // 0x2
	private static PlatformSettings app; // 0x8
	private static GameObject singletonGameObject; // 0x10
	private Dictionary`2<string, object> lastConnectFlags; // 0x18
	private static Queue events; // 0x18
	public TapjoySettings settings; // 0x20

	// Methods
	public void .ctor(); // 0x100741AC4
	public static TapjoyComponent FindInstance(); // 0x100741ACC
	private void Awake(); // 0x100741BB4
	private void OnApiBindingSet(); // 0x100741FD4
	private void EnsureSingleton(); // 0x100741DD8
	internal void Reconnect(); // 0x10074214C
	internal bool ConnectManually(); // 0x100742370
	internal bool ConnectManually(string sdkKey); // 0x1007424E8
	internal bool ConnectManually(string sdkKey, Dictionary`2<string, object> flags); // 0x1007423F0
	private bool ConnectInternal(Dictionary`2<string, object> connectFlags); // 0x1007424F0
	private void OnDestroy(); // 0x100742D40
	private void HandleOnConnectSuccess(); // 0x100742E38
	private void HandleOnConnectFailure(); // 0x100742EBC
	private void Start(); // 0x100742F24
	private void Update(); // 0x100742FD8
	private void OnApplicationPause(bool paused); // 0x1007431DC
	private void OnApplicationQuit(); // 0x10074337C
	private void OnNativeConnectCallback(string commaDelimitedMessage); // 0x10074348C
	private void OnNativeSetUserIDCallback(string commaDelimitedMessage); // 0x10074373C
	private void OnNativeCurrencyCallback(string commaDelimitedMessage); // 0x100743A3C
	private void OnNativePlacementCallback(string commaDelimitedMessage); // 0x100744198
	private void OnNativeVideoCallback(string commaDelimitedMessage); // 0x10074499C
	private void OnNativePlacementVideoCallback(string commaDelimitedMessage); // 0x100744CD0
	public static void RemovePlacement(string placementID); // 0x1007450F8
	public static void RemoveActionRequest(string requestID); // 0x1007451C0
	public static TapjoyRuntimeCallbacks GetTapjoyRuntimeCallbacks(); // 0x100745294
	private void InitMediation(); // 0x100745348
	private static void .cctor(); // 0x100745834
}

// Namespace: 
private sealed class InternalEventType : Enum // TypeDefIndex: 2516
{
	// Fields
	public int value__; // 0x10
	public const InternalEventType RemovePlacement = 0; // 0x0
	public const InternalEventType RemoveActionRequest = 1; // 0x0

}

// Namespace: 
private struct InternalEvent // TypeDefIndex: 2517
{
	// Fields
	public InternalEventType type; // 0x10
	public string data; // 0x18

	// Methods
	public void .ctor(InternalEventType _type, string _data); // 0x1007458C4
}

// Namespace: TapjoyUnity
public sealed class TJActionRequest // TypeDefIndex: 2518
{
	// Fields
	public string requestID; // 0x10
	public string token; // 0x18

	// Methods
	internal void .ctor(string requestID, string token); // 0x10074A1CC
	protected override void Finalize(); // 0x10074A204
	public void Completed(); // 0x10074A2C0
	public void Cancelled(); // 0x10074A370
}

// Namespace: TapjoyUnity
public class TJPlacement // TypeDefIndex: 2519
{
	// Fields
	private static Dictionary`2<string, WeakReference> placementDictionary; // 0x0
	private string _placementName; // 0x10
	private string _guid; // 0x18
	private static OnRequestSuccessHandler OnRequestSuccessInvoker; // 0x8
	private static OnRequestFailureHandler OnRequestFailureInvoker; // 0x10
	private static OnContentReadyHandler OnContentReadyInvoker; // 0x18
	private static OnContentShowHandler OnContentShowInvoker; // 0x20
	private static OnContentDismissHandler OnContentDismissInvoker; // 0x28
	private static OnPurchaseRequestHandler OnPurchaseRequestInvoker; // 0x30
	private static OnRewardRequestHandler OnRewardRequestInvoker; // 0x38
	private static OnVideoStartHandler OnVideoStartInvoker; // 0x40
	private static OnVideoErrorHandler OnVideoErrorInvoker; // 0x48
	private static OnVideoCompleteHandler OnVideoCompleteInvoker; // 0x50
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x58

	// Methods
	private void .ctor(string placementName); // 0x10074A420
	protected override void Finalize(); // 0x10074A594
	public static TJPlacement CreatePlacement(string placementName); // 0x10074A650
	public static void DismissContent(); // 0x10074A6B0
	public void RequestContent(); // 0x10074A74C
	public void ShowContent(); // 0x10074A86C
	public bool IsContentAvailable(); // 0x10074A91C
	public bool IsContentReady(); // 0x10074A9CC
	public string GetName(); // 0x10074AA7C
	public static void add_OnRequestSuccess(OnRequestSuccessHandler value); // 0x10074AA84
	public static void remove_OnRequestSuccess(OnRequestSuccessHandler value); // 0x10074AB88
	public static void add_OnRequestFailure(OnRequestFailureHandler value); // 0x10074AC8C
	public static void remove_OnRequestFailure(OnRequestFailureHandler value); // 0x10074AD90
	public static void add_OnContentReady(OnContentReadyHandler value); // 0x10074AE94
	public static void remove_OnContentReady(OnContentReadyHandler value); // 0x10074AF98
	public static void add_OnContentShow(OnContentShowHandler value); // 0x10074B09C
	public static void remove_OnContentShow(OnContentShowHandler value); // 0x10074B1A0
	public static void add_OnContentDismiss(OnContentDismissHandler value); // 0x10074B2A4
	public static void remove_OnContentDismiss(OnContentDismissHandler value); // 0x10074B3A8
	public static void add_OnPurchaseRequest(OnPurchaseRequestHandler value); // 0x10074B4AC
	public static void remove_OnPurchaseRequest(OnPurchaseRequestHandler value); // 0x10074B5B0
	public static void add_OnRewardRequest(OnRewardRequestHandler value); // 0x10074B6B4
	public static void remove_OnRewardRequest(OnRewardRequestHandler value); // 0x10074B7B8
	internal static void DispatchPlacementEvent(string commaDelimitedMessage); // 0x1007441FC
	public static void add_OnVideoStart(OnVideoStartHandler value); // 0x10074BDB8
	public static void remove_OnVideoStart(OnVideoStartHandler value); // 0x10074BEBC
	public static void add_OnVideoError(OnVideoErrorHandler value); // 0x10074BFC0
	public static void remove_OnVideoError(OnVideoErrorHandler value); // 0x10074C0C4
	public static void add_OnVideoComplete(OnVideoCompleteHandler value); // 0x10074C1C8
	public static void remove_OnVideoComplete(OnVideoCompleteHandler value); // 0x10074C2CC
	internal static void DispatchPlacementVideoEvent(string commaDelimitedMessage); // 0x100744D34
	private static void .cctor(); // 0x10074C5C8
}

// Namespace: 
public sealed class OnRequestSuccessHandler : MulticastDelegate // TypeDefIndex: 2520
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C870
	public virtual void Invoke(TJPlacement placement); // 0x10074B8BC
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074C880
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C8D0
}

// Namespace: 
public sealed class OnRequestFailureHandler : MulticastDelegate // TypeDefIndex: 2521
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C7F8
	public virtual void Invoke(TJPlacement placement, string error); // 0x10074B958
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, string error, AsyncCallback callback, object object); // 0x10074C808
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C864
}

// Namespace: 
public sealed class OnContentReadyHandler : MulticastDelegate // TypeDefIndex: 2522
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C6A8
	public virtual void Invoke(TJPlacement placement); // 0x10074BA18
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074C6B8
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C708
}

// Namespace: 
public sealed class OnContentShowHandler : MulticastDelegate // TypeDefIndex: 2523
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C714
	public virtual void Invoke(TJPlacement placement); // 0x10074BAB4
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074C724
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C774
}

// Namespace: 
public sealed class OnContentDismissHandler : MulticastDelegate // TypeDefIndex: 2524
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C63C
	public virtual void Invoke(TJPlacement placement); // 0x10074BB50
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074C64C
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C69C
}

// Namespace: 
public sealed class OnPurchaseRequestHandler : MulticastDelegate // TypeDefIndex: 2525
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C780
	public virtual void Invoke(TJPlacement placement, TJActionRequest request, string productId); // 0x10074BBEC
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, TJActionRequest request, string productId, AsyncCallback callback, object object); // 0x10074C790
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C7EC
}

// Namespace: 
public sealed class OnRewardRequestHandler : MulticastDelegate // TypeDefIndex: 2526
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C8DC
	public virtual void Invoke(TJPlacement placement, TJActionRequest request, string itemId, int quantity); // 0x10074BCC0
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, TJActionRequest request, string itemId, int quantity, AsyncCallback callback, object object); // 0x10074C8EC
	public virtual void EndInvoke(IAsyncResult result); // 0x10074C9C8
}

// Namespace: 
public sealed class OnVideoStartHandler : MulticastDelegate // TypeDefIndex: 2527
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074CAB8
	public virtual void Invoke(TJPlacement placement); // 0x10074C3D0
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074CAC8
	public virtual void EndInvoke(IAsyncResult result); // 0x10074CB18
}

// Namespace: 
public sealed class OnVideoErrorHandler : MulticastDelegate // TypeDefIndex: 2528
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074CA40
	public virtual void Invoke(TJPlacement placement, string errorMessage); // 0x10074C46C
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, string errorMessage, AsyncCallback callback, object object); // 0x10074CA50
	public virtual void EndInvoke(IAsyncResult result); // 0x10074CAAC
}

// Namespace: 
public sealed class OnVideoCompleteHandler : MulticastDelegate // TypeDefIndex: 2529
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10074C9D4
	public virtual void Invoke(TJPlacement placement); // 0x10074C52C
	public virtual IAsyncResult BeginInvoke(TJPlacement placement, AsyncCallback callback, object object); // 0x10074C9E4
	public virtual void EndInvoke(IAsyncResult result); // 0x10074CA34
}

// Namespace: TapjoyUnity.Internal
public class TapjoySettings : ScriptableObject // TypeDefIndex: 2530
{
	// Fields
	private PlatformSettings androidSettings; // 0x18
	private PlatformSettings iosSettings; // 0x20
	private bool autoConnectEnabled; // 0x28
	private bool debugEnabled; // 0x29
	private TapjoyRuntimeCallbacks tjCallbacks; // 0x30
	private string hostURL; // 0x38
	private string eventURL; // 0x40
	private bool dirty; // 0x48

	// Methods
	public void .ctor(); // 0x100745958
	public PlatformSettings get_AndroidSettings(); // 0x100741DC8
	public PlatformSettings get_IosSettings(); // 0x100741DD0
	public bool get_AutoConnectEnabled(); // 0x100742FD0
	public void set_AutoConnectEnabled(bool value); // 0x1007459E4
	public bool get_DebugEnabled(); // 0x100742144
	public void set_DebugEnabled(bool value); // 0x100745A0C
	public string get_HostURL(); // 0x100745A34
	public void set_HostURL(string value); // 0x100745A3C
	public string get_EventURL(); // 0x100745AD0
	public void set_EventURL(string value); // 0x100745AD8
	public bool get_Dirty(); // 0x100745B6C
	public void set_Dirty(bool value); // 0x100745BDC
}

// Namespace: TapjoyUnity.Internal
public class PlatformSettings // TypeDefIndex: 2531
{
	// Fields
	private string sdkKey; // 0x10
	private string pushKey; // 0x18
	private bool disableAdvertisingId; // 0x20
	private bool disablePersistentIds; // 0x21
	private bool dirty; // 0x22
	private FyberSettings fyberSettings; // 0x28

	// Methods
	public void .ctor(); // 0x1007417C4
	public FyberSettings get_FyberMediationSettings(); // 0x100741864
	public string get_SdkKey(); // 0x10074186C
	public void set_SdkKey(string value); // 0x100741874
	public string get_PushKey(); // 0x100741908
	public void set_PushKey(string value); // 0x100741910
	public bool get_DisableAdvertisingId(); // 0x1007419A4
	public void set_DisableAdvertisingId(bool value); // 0x1007419AC
	public bool get_DisablePersistentIds(); // 0x1007419D4
	public void set_DisablePersistentIds(bool value); // 0x1007419DC
	public bool get_Valid(); // 0x100741A04
	public bool get_Dirty(); // 0x100741A80
	public void set_Dirty(bool value); // 0x100741AB0
}

// Namespace: TapjoyUnity.Internal
public class FyberSettings // TypeDefIndex: 2532
{
	// Fields
	private string appId; // 0x10
	private string appToken; // 0x18
	private string userId; // 0x20
	private bool dirty; // 0x28

	// Methods
	public void .ctor(); // 0x1007414B0
	public string get_AppId(); // 0x1007414B8
	public void set_AppId(string value); // 0x1007414C0
	public string get_AppToken(); // 0x100741554
	public void set_AppToken(string value); // 0x10074155C
	public string get_UserId(); // 0x1007415F0
	public void set_UserId(string value); // 0x1007415F8
	public bool get_Valid(); // 0x10074168C
	public bool get_HasData(); // 0x100741718
	public bool get_Dirty(); // 0x1007417B4
	public void set_Dirty(bool value); // 0x1007417BC
}

// Namespace: TapjoyUnity
public class TapjoyRuntimeCallbacks : MonoBehaviour // TypeDefIndex: 2533
{
	// Methods
	public void .ctor(); // 0x10074A17C
	public virtual string GetFyberUserId(); // 0x10074A184
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2534
{
}

// Namespace: Facebook.Unity
public class AccessToken // TypeDefIndex: 2535
{
	// Fields
	private static AccessToken <CurrentAccessToken>k__BackingField; // 0x0
	private string <TokenString>k__BackingField; // 0x10
	private DateTime <ExpirationTime>k__BackingField; // 0x18
	private IEnumerable`1<string> <Permissions>k__BackingField; // 0x28
	private string <UserId>k__BackingField; // 0x30
	private Nullable`1<DateTime> <LastRefresh>k__BackingField; // 0x38

	// Methods
	internal void .ctor(string tokenString, string userId, DateTime expirationTime, IEnumerable`1<string> permissions, Nullable`1<DateTime> lastRefresh); // 0x100363C78
	public static AccessToken get_CurrentAccessToken(); // 0x100363E90
	internal static void set_CurrentAccessToken(AccessToken value); // 0x100363EE0
	public string get_TokenString(); // 0x100363F34
	private void set_TokenString(string value); // 0x100363E5C
	public DateTime get_ExpirationTime(); // 0x100363F3C
	private void set_ExpirationTime(DateTime value); // 0x100363E64
	public IEnumerable`1<string> get_Permissions(); // 0x100363F48
	private void set_Permissions(IEnumerable`1<string> value); // 0x100363E6C
	public string get_UserId(); // 0x100363F50
	private void set_UserId(string value); // 0x100363E74
	public Nullable`1<DateTime> get_LastRefresh(); // 0x100363F58
	private void set_LastRefresh(Nullable`1<DateTime> value); // 0x100363E7C
	public override string ToString(); // 0x100363F6C
	internal string ToJson(); // 0x10036475C
}

// Namespace: Facebook.Unity
internal class CallbackManager // TypeDefIndex: 2536
{
	// Fields
	private IDictionary`2<string, object> facebookDelegates; // 0x10
	private int nextAsyncId; // 0x18

	// Methods
	public void .ctor(); // 0x100365BD0
	public string AddFacebookDelegate(FacebookDelegate`1<T> callback); // 0
	public void OnFacebookResponse(IInternalResult result); // 0x100367358
	private static void CallCallback(object callback, IResult result); // 0x1003694CC
	private static bool TryCallCallback(object callback, IResult result); // 0
}

// Namespace: Facebook.Unity
internal class ComponentFactory // TypeDefIndex: 2537
{
	// Fields
	private static GameObject facebookGameObject; // 0x0

	// Methods
	private static GameObject get_FacebookGameObject(); // 0x10036ECE4
	public static T GetComponent(optional IfNotExist ifNotExist); // 0
	public static T AddComponent(); // 0
}

// Namespace: 
internal sealed class IfNotExist : Enum // TypeDefIndex: 2538
{
	// Fields
	public int value__; // 0x10
	public const IfNotExist AddNew = 0; // 0x0
	public const IfNotExist ReturnNull = 1; // 0x0

}

// Namespace: Facebook.Unity
internal static class Constants // TypeDefIndex: 2539
{
	// Fields
	private static Nullable`1<FacebookUnityPlatform> currentPlatform; // 0x0

	// Methods
	public static Uri get_GraphUrl(); // 0x10036EDAC
	public static string get_GraphApiUserAgent(); // 0x100369118
	public static bool get_IsEditor(); // 0x10036F0F0
	public static bool get_IsWeb(); // 0x10036F0FC
	public static bool get_IsArcade(); // 0x10036F118
	public static string get_UnitySDKUserAgentSuffixLegacy(); // 0x10036F134
	public static string get_UnitySDKUserAgent(); // 0x10036F078
	public static bool get_DebugMode(); // 0x10036F274
	public static FacebookUnityPlatform get_CurrentPlatform(); // 0x100369068
	private static FacebookUnityPlatform GetCurrentPlatform(); // 0x10036F2D8
}

// Namespace: Facebook.Unity
public sealed class FB : ScriptableObject // TypeDefIndex: 2540
{
	// Fields
	private const string DefaultJSSDKLocale = "en_US"; // 0x0
	private static IFacebook facebook; // 0x0
	private static bool isInitCalled; // 0x8
	private static string facebookDomain; // 0x10
	private static string graphApiVersion; // 0x18
	private static string <AppId>k__BackingField; // 0x20
	private static string <ClientToken>k__BackingField; // 0x28
	private static OnDLLLoaded <OnDLLLoadedDelegate>k__BackingField; // 0x30

	// Methods
	public void .ctor(); // 0x1003750C8
	public static string get_AppId(); // 0x10036F7F8
	private static void set_AppId(string value); // 0x1003750D0
	public static string get_ClientToken(); // 0x10037513C
	private static void set_ClientToken(string value); // 0x1003751A4
	public static string get_GraphApiVersion(); // 0x10036A638
	public static void set_GraphApiVersion(string value); // 0x100375210
	public static bool get_IsLoggedIn(); // 0x1003709B4
	public static bool get_IsInitialized(); // 0x10037527C
	public static bool get_LimitAppEventUsage(); // 0x1003753CC
	public static void set_LimitAppEventUsage(bool value); // 0x10037551C
	internal static IFacebook get_FacebookImpl(); // 0x10036EFB8
	internal static void set_FacebookImpl(IFacebook value); // 0x10037567C
	internal static string get_FacebookDomain(); // 0x10036EF50
	internal static void set_FacebookDomain(string value); // 0x1003756E8
	private static OnDLLLoaded get_OnDLLLoadedDelegate(); // 0x100375754
	private static void set_OnDLLLoadedDelegate(OnDLLLoaded value); // 0x1003757BC
	public static void Init(optional InitDelegate onInitComplete, optional HideUnityDelegate onHideUnity, optional string authResponse); // 0x100375828
	public static void Init(string appId, optional string clientToken, optional bool cookie, optional bool logging, optional bool status, optional bool xfbml, optional bool frictionlessRequests, optional string authResponse, optional string javascriptSDKLocale, optional HideUnityDelegate onHideUnity, optional InitDelegate onInitComplete); // 0x10037597C
	public static void LogInWithPublishPermissions(optional IEnumerable`1<string> permissions, optional FacebookDelegate`1<ILoginResult> callback); // 0x100375DE8
	public static void LogInWithReadPermissions(optional IEnumerable`1<string> permissions, optional FacebookDelegate`1<ILoginResult> callback); // 0x100375F14
	public static void LogOut(); // 0x100376040
	public static void AppRequest(string message, OGActionType actionType, string objectId, IEnumerable`1<string> to, optional string data, optional string title, optional FacebookDelegate`1<IAppRequestResult> callback); // 0x100376154
	public static void AppRequest(string message, OGActionType actionType, string objectId, optional IEnumerable`1<object> filters, optional IEnumerable`1<string> excludeIds, optional Nullable`1<int> maxRecipients, optional string data, optional string title, optional FacebookDelegate`1<IAppRequestResult> callback); // 0x100376344
	public static void AppRequest(string message, optional IEnumerable`1<string> to, optional IEnumerable`1<object> filters, optional IEnumerable`1<string> excludeIds, optional Nullable`1<int> maxRecipients, optional string data, optional string title, optional FacebookDelegate`1<IAppRequestResult> callback); // 0x1003764E8
	public static void ShareLink(optional Uri contentURL, optional string contentTitle, optional string contentDescription, optional Uri photoURL, optional FacebookDelegate`1<IShareResult> callback); // 0x1003766A8
	public static void FeedShare(optional string toId, optional Uri link, optional string linkName, optional string linkCaption, optional string linkDescription, optional Uri picture, optional string mediaSource, optional FacebookDelegate`1<IShareResult> callback); // 0x1003767FC
	public static void API(string query, HttpMethod method, optional FacebookDelegate`1<IGraphResult> callback, optional IDictionary`2<string, string> formData); // 0x100366580
	public static void API(string query, HttpMethod method, FacebookDelegate`1<IGraphResult> callback, WWWForm formData); // 0x10037696C
	public static void ActivateApp(); // 0x100376B20
	public static void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x100376C48
	public static void GameGroupCreate(string name, string description, optional string privacy, optional FacebookDelegate`1<IGroupCreateResult> callback); // 0x100376D84
	public static void GameGroupJoin(string id, optional FacebookDelegate`1<IGroupJoinResult> callback); // 0x100376EC8
	public static void LogAppEvent(string logEvent, optional Nullable`1<float> valueToSum, optional Dictionary`2<string, object> parameters); // 0x100376FF4
	public static void LogPurchase(float logPurchase, optional string currency, optional Dictionary`2<string, object> parameters); // 0x100377130
	private static void LogVersion(); // 0x1003772B0
	private static void .cctor(); // 0x1003774C4
}

// Namespace: 
private sealed class OnDLLLoaded : MulticastDelegate // TypeDefIndex: 2541
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100375DD8
	public virtual void Invoke(); // 0x100377F38
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100377FD4
	public virtual void EndInvoke(IAsyncResult result); // 0x100378034
}

// Namespace: 
internal abstract class CompiledFacebookLoader : MonoBehaviour // TypeDefIndex: 2542
{
	// Methods
	protected void .ctor(); // 0x100368394
	protected abstract FacebookGameObject get_FBGameObject(); // 0
	public void Start(); // 0x100377E54
}

// Namespace: 
private sealed class <Init>c__AnonStorey0 // TypeDefIndex: 2543
{
	// Fields
	internal InitDelegate onInitComplete; // 0x10
	internal string appId; // 0x18
	internal bool cookie; // 0x20
	internal bool logging; // 0x21
	internal bool status; // 0x22
	internal bool xfbml; // 0x23
	internal string authResponse; // 0x28
	internal bool frictionlessRequests; // 0x30
	internal string javascriptSDKLocale; // 0x38
	internal HideUnityDelegate onHideUnity; // 0x40

	// Methods
	public void .ctor(); // 0x100375DD0
	internal void <>m__0(); // 0x100377530
	internal void <>m__1(); // 0x10037760C
	internal void <>m__2(); // 0x10037781C
	internal void <>m__3(); // 0x100377A40
	internal void <>m__4(); // 0x100377D04
}

// Namespace: Facebook.Unity
internal abstract class FacebookBase : IFacebookImplementation, IFacebook, IFacebookResultHandler // TypeDefIndex: 2544
{
	// Fields
	private InitDelegate onInitCompleteDelegate; // 0x10
	private bool <Initialized>k__BackingField; // 0x18
	private CallbackManager <CallbackManager>k__BackingField; // 0x20
	private static Func`2<string, bool> <>f__mg$cache0; // 0x0

	// Methods
	protected void .ctor(CallbackManager callbackManager); // 0x100365C7C
	public abstract bool get_LimitEventUsage(); // 0
	public abstract void set_LimitEventUsage(bool value); // 0
	public abstract string get_SDKName(); // 0
	public abstract string get_SDKVersion(); // 0
	public virtual string get_SDKUserAgent(); // 0x100369D84
	public bool get_LoggedIn(); // 0x100373260
	public bool get_Initialized(); // 0x100373330
	private void set_Initialized(bool value); // 0x100373338
	protected CallbackManager get_CallbackManager(); // 0x100366D58
	private void set_CallbackManager(CallbackManager value); // 0x100373258
	public virtual void Init(InitDelegate onInitComplete); // 0x100365EFC
	public abstract void LogInWithPublishPermissions(IEnumerable`1<string> scope, FacebookDelegate`1<ILoginResult> callback); // 0
	public abstract void LogInWithReadPermissions(IEnumerable`1<string> scope, FacebookDelegate`1<ILoginResult> callback); // 0
	public virtual void LogOut(); // 0x10036AD2C
	public abstract void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0
	public abstract void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0
	public abstract void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0
	public void API(string query, HttpMethod method, IDictionary`2<string, string> formData, FacebookDelegate`1<IGraphResult> callback); // 0x100373340
	public void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate`1<IGraphResult> callback); // 0x100373C90
	public abstract void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0
	public abstract void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0
	public abstract void ActivateApp(optional string appId); // 0
	public abstract void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0
	public abstract void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0
	public abstract void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0
	public virtual void OnInitComplete(ResultContainer resultContainer); // 0x100373E6C
	public abstract void OnLoginComplete(ResultContainer resultContainer); // 0
	public void OnLogoutComplete(ResultContainer resultContainer); // 0x100374020
	public abstract void OnGetAppLinkComplete(ResultContainer resultContainer); // 0
	public abstract void OnGroupCreateComplete(ResultContainer resultContainer); // 0
	public abstract void OnGroupJoinComplete(ResultContainer resultContainer); // 0
	public abstract void OnAppRequestsComplete(ResultContainer resultContainer); // 0
	public abstract void OnShareLinkComplete(ResultContainer resultContainer); // 0
	protected void ValidateAppRequestArgs(string message, Nullable`1<OGActionType> actionType, string objectId, optional IEnumerable`1<string> to, optional IEnumerable`1<object> filters, optional IEnumerable`1<string> excludeIds, optional Nullable`1<int> maxRecipients, optional string data, optional string title, optional FacebookDelegate`1<IAppRequestResult> callback); // 0x10036AFF4
	protected virtual void OnAuthResponse(LoginResult result); // 0x100374070
	private IDictionary`2<string, string> CopyByValue(IDictionary`2<string, string> data); // 0x1003736A8
	private Uri GetGraphUrl(string query); // 0x100373BAC
	private void <OnInitComplete>m__0(ILoginResult result); // 0x1003740EC
}

// Namespace: Facebook.Unity
public sealed class InitDelegate : MulticastDelegate // TypeDefIndex: 2545
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1003783E0
	public virtual void Invoke(); // 0x100374100
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1003783FC
	public virtual void EndInvoke(IAsyncResult result); // 0x10037845C
}

// Namespace: Facebook.Unity
public sealed class FacebookDelegate`1 : MulticastDelegate // TypeDefIndex: 2546
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T result); // 0
	public virtual IAsyncResult BeginInvoke(T result, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: Facebook.Unity
public sealed class HideUnityDelegate : MulticastDelegate // TypeDefIndex: 2547
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1003782FC
	public virtual void Invoke(bool isUnityShown); // 0x10036D158
	public virtual IAsyncResult BeginInvoke(bool isUnityShown, AsyncCallback callback, object object); // 0x10037831C
	public virtual void EndInvoke(IAsyncResult result); // 0x1003783D4
}

// Namespace: Facebook.Unity
internal abstract class FacebookGameObject : MonoBehaviour, IFacebookCallbackHandler // TypeDefIndex: 2548
{
	// Fields
	private IFacebookImplementation <Facebook>k__BackingField; // 0x18

	// Methods
	protected void .ctor(); // 0x100367F6C
	public IFacebookImplementation get_Facebook(); // 0x100368040
	public void set_Facebook(IFacebookImplementation value); // 0x100368424
	public void Awake(); // 0x100374190
	public void OnInitComplete(string message); // 0x100374268
	public void OnLoginComplete(string message); // 0x100374384
	public void OnLogoutComplete(string message); // 0x1003744A4
	public void OnGetAppLinkComplete(string message); // 0x1003745C4
	public void OnGroupCreateComplete(string message); // 0x1003746E4
	public void OnGroupJoinComplete(string message); // 0x100374804
	public void OnAppRequestsComplete(string message); // 0x100374924
	public void OnShareLinkComplete(string message); // 0x100374A44
	protected virtual void OnAwake(); // 0x100374B64
}

// Namespace: Facebook.Unity
public class FacebookSdkVersion // TypeDefIndex: 2549
{
	// Methods
	public static string get_Build(); // 0x100369E04
}

// Namespace: Facebook.Unity
internal sealed class FacebookUnityPlatform : Enum // TypeDefIndex: 2550
{
	// Fields
	public int value__; // 0x10
	public const FacebookUnityPlatform Unknown = 0; // 0x0
	public const FacebookUnityPlatform Android = 1; // 0x0
	public const FacebookUnityPlatform IOS = 2; // 0x0
	public const FacebookUnityPlatform WebGL = 3; // 0x0
	public const FacebookUnityPlatform Arcade = 4; // 0x0

}

// Namespace: Facebook.Unity
internal interface IFacebook // TypeDefIndex: 2551
{
	// Methods
	public abstract bool get_LoggedIn(); // 0
	public abstract bool get_LimitEventUsage(); // 0
	public abstract void set_LimitEventUsage(bool value); // 0
	public abstract string get_SDKUserAgent(); // 0
	public abstract bool get_Initialized(); // 0
	public abstract void LogInWithPublishPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0
	public abstract void LogInWithReadPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0
	public abstract void LogOut(); // 0
	public abstract void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0
	public abstract void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0
	public abstract void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0
	public abstract void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0
	public abstract void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0
	public abstract void API(string query, HttpMethod method, IDictionary`2<string, string> formData, FacebookDelegate`1<IGraphResult> callback); // 0
	public abstract void API(string query, HttpMethod method, WWWForm formData, FacebookDelegate`1<IGraphResult> callback); // 0
	public abstract void ActivateApp(optional string appId); // 0
	public abstract void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0
	public abstract void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0
	public abstract void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0
}

// Namespace: Facebook.Unity
internal interface IFacebookCallbackHandler // TypeDefIndex: 2552
{
	// Methods
	public abstract void OnInitComplete(string message); // 0
	public abstract void OnLoginComplete(string message); // 0
	public abstract void OnGroupCreateComplete(string message); // 0
	public abstract void OnGroupJoinComplete(string message); // 0
	public abstract void OnAppRequestsComplete(string message); // 0
	public abstract void OnShareLinkComplete(string message); // 0
}

// Namespace: Facebook.Unity
internal interface IFacebookImplementation : IFacebook, IFacebookResultHandler // TypeDefIndex: 2553
{
}

// Namespace: Facebook.Unity
internal interface IFacebookResultHandler // TypeDefIndex: 2554
{
	// Methods
	public abstract void OnInitComplete(ResultContainer resultContainer); // 0
	public abstract void OnLoginComplete(ResultContainer resultContainer); // 0
	public abstract void OnLogoutComplete(ResultContainer resultContainer); // 0
	public abstract void OnGetAppLinkComplete(ResultContainer resultContainer); // 0
	public abstract void OnGroupCreateComplete(ResultContainer resultContainer); // 0
	public abstract void OnGroupJoinComplete(ResultContainer resultContainer); // 0
	public abstract void OnAppRequestsComplete(ResultContainer resultContainer); // 0
	public abstract void OnShareLinkComplete(ResultContainer resultContainer); // 0
}

// Namespace: Facebook.Unity
internal interface IPayFacebook // TypeDefIndex: 2555
{
}

// Namespace: Facebook.Unity
internal class MethodArguments // TypeDefIndex: 2556
{
	// Fields
	private IDictionary`2<string, object> arguments; // 0x10

	// Methods
	public void .ctor(); // 0x10036A478
	public void .ctor(MethodArguments methodArgs); // 0x1003786E4
	private void .ctor(IDictionary`2<string, object> arguments); // 0x100378660
	public void AddPrimative(string argumentName, T value); // 0
	public void AddNullablePrimitive(string argumentName, Nullable`1<T> nullable); // 0
	public void AddString(string argumentName, string value); // 0x10036A4E4
	public void AddCommaSeparatedList(string argumentName, IEnumerable`1<string> value); // 0x10036B29C
	public void AddDictionary(string argumentName, IDictionary`2<string, object> dict); // 0x1003786FC
	public void AddList(string argumentName, IEnumerable`1<T> list); // 0
	public void AddUri(string argumentName, Uri uri); // 0x10036B67C
	public string ToJsonString(); // 0x10036A6A0
	private static Dictionary`2<string, string> ToStringDict(IDictionary`2<string, object> dict); // 0x10037882C
}

// Namespace: Facebook.Unity
internal abstract class MethodCall`1 // TypeDefIndex: 2557
{
	// Fields
	private string <MethodName>k__BackingField; // 0x0
	private FacebookDelegate`1<T> <Callback>k__BackingField; // 0x0
	private FacebookBase <FacebookImpl>k__BackingField; // 0x0
	private MethodArguments <Parameters>k__BackingField; // 0x0

	// Methods
	public void .ctor(FacebookBase facebookImpl, string methodName); // 0
	public string get_MethodName(); // 0
	private void set_MethodName(string value); // 0
	protected FacebookDelegate`1<T> get_Callback(); // 0
	public void set_Callback(FacebookDelegate`1<T> value); // 0
	protected void set_FacebookImpl(FacebookBase value); // 0
	protected void set_Parameters(MethodArguments value); // 0
	public abstract void Call(optional MethodArguments args); // 0
}

// Namespace: Facebook.Unity
public sealed class OGActionType : Enum // TypeDefIndex: 2558
{
	// Fields
	public int value__; // 0x10
	public const OGActionType SEND = 0; // 0x0
	public const OGActionType ASKFOR = 1; // 0x0
	public const OGActionType TURN = 2; // 0x0

}

// Namespace: Facebook.Unity.Canvas
internal sealed class CanvasFacebook : FacebookBase, ICanvasFacebookImplementation, ICanvasFacebook, ICanvasFacebookResultHandler, IPayFacebook, IFacebook, IFacebookResultHandler // TypeDefIndex: 2559
{
	// Fields
	private string appId; // 0x28
	private string appLinkUrl; // 0x30
	private ICanvasJSWrapper canvasJSWrapper; // 0x38
	private HideUnityDelegate onHideUnityDelegate; // 0x40
	private bool <LimitEventUsage>k__BackingField; // 0x48
	private static Callback`1<ResultContainer> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x100369730
	public void .ctor(ICanvasJSWrapper canvasJSWrapper, CallbackManager callbackManager); // 0x1003697C8
	public override bool get_LimitEventUsage(); // 0x100369804
	public override void set_LimitEventUsage(bool value); // 0x10036980C
	public override string get_SDKName(); // 0x100369814
	public override string get_SDKVersion(); // 0x10036985C
	public override string get_SDKUserAgent(); // 0x10036994C
	public void Init(string appId, bool cookie, bool logging, bool status, bool xfbml, string channelUrl, string authResponse, bool frictionlessRequests, string javascriptSDKLocale, bool loadDebugJSSDK, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x100369F9C
	public override void LogInWithPublishPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x10036A708
	public override void LogInWithReadPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x10036A964
	public override void LogOut(); // 0x10036ABC0
	public override void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0x10036AD7C
	public override void ActivateApp(string appId); // 0x10036B3CC
	public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0x10036B500
	public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0x10036B850
	public override void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0x10036BA28
	public override void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0x10036BBA0
	public override void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x10036BCD8
	public override void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0x10036BE44
	public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0x10036C078
	public override void OnLoginComplete(ResultContainer result); // 0x10036C2B4
	public override void OnGetAppLinkComplete(ResultContainer message); // 0x10036CC1C
	public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x10036CC70
	public void OnPayComplete(ResultContainer resultContainer); // 0x10036CD24
	public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x10036CE74
	public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x10036CEEC
	public override void OnGroupCreateComplete(ResultContainer resultContainer); // 0x10036CF64
	public override void OnGroupJoinComplete(ResultContainer resultContainer); // 0x10036D0C0
	public void OnUrlResponse(string url); // 0x10036D13C
	public void OnHideUnity(bool isGameShown); // 0x10036D144
	private static void FormatAuthResponse(ResultContainer result, Callback`1<ResultContainer> callback); // 0x10036C340
	private void <OnLoginComplete>m__0(ResultContainer formattedResponse); // 0x10036D1DC
	private static void <OnFacebookAuthResponseChange>m__1(ResultContainer formattedResponse); // 0x10036D27C
}

// Namespace: 
private class CanvasUIMethodCall`1 : MethodCall`1<T> // TypeDefIndex: 2560
{
	// Fields
	private CanvasFacebook canvasImpl; // 0x0
	private string callbackMethod; // 0x0

	// Methods
	public void .ctor(CanvasFacebook canvasImpl, string methodName, string callbackMethod); // 0
	public override void Call(MethodArguments args); // 0
	private void UI(string method, MethodArguments args, optional FacebookDelegate`1<T> callback); // 0
}

// Namespace: 
private sealed class <FormatAuthResponse>c__AnonStorey0 // TypeDefIndex: 2561
{
	// Fields
	internal ResultContainer result; // 0x10
	internal Callback`1<ResultContainer> callback; // 0x18

	// Methods
	public void .ctor(); // 0x10036D1CC
	internal void <>m__0(IGraphResult r); // 0x10036D324
}

// Namespace: Facebook.Unity.Canvas
internal class CanvasFacebookGameObject : FacebookGameObject, ICanvasFacebookCallbackHandler, IFacebookCallbackHandler // TypeDefIndex: 2562
{
	// Methods
	public void .ctor(); // 0x10036DB08
	protected ICanvasFacebookImplementation get_CanvasFacebookImpl(); // 0x10036DB10
	public void OnPayComplete(string result); // 0x10036DBDC
	public void OnFacebookAuthResponseChange(string message); // 0x10036DD00
	public void OnUrlResponse(string message); // 0x10036DE28
	public void OnHideUnity(bool hide); // 0x10036DF34
	protected override void OnAwake(); // 0x10036E040
}

// Namespace: Facebook.Unity.Canvas
internal class CanvasFacebookLoader : CompiledFacebookLoader // TypeDefIndex: 2563
{
	// Methods
	public void .ctor(); // 0x10036E0FC
	protected override FacebookGameObject get_FBGameObject(); // 0x10036E104
}

// Namespace: Facebook.Unity.Canvas
internal class CanvasJSWrapper : ICanvasJSWrapper // TypeDefIndex: 2564
{
	// Methods
	public void .ctor(); // 0x1003697C0
	public string GetSDKVersion(); // 0x10036E18C
	public void ExternalCall(string functionName, object[] args); // 0x10036E1D4
	public void ExternalEval(string script); // 0x10036E1E0
	public void DisableFullScreen(); // 0x10036E1EC
}

// Namespace: Facebook.Unity.Canvas
internal interface ICanvasFacebook : IPayFacebook, IFacebook // TypeDefIndex: 2565
{
}

// Namespace: Facebook.Unity.Canvas
internal interface ICanvasFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 2566
{
	// Methods
	public abstract void OnPayComplete(string message); // 0
	public abstract void OnFacebookAuthResponseChange(string message); // 0
	public abstract void OnUrlResponse(string message); // 0
	public abstract void OnHideUnity(bool hide); // 0
}

// Namespace: Facebook.Unity.Canvas
internal interface ICanvasFacebookImplementation : ICanvasFacebook, ICanvasFacebookResultHandler, IPayFacebook, IFacebook, IFacebookResultHandler // TypeDefIndex: 2567
{
}

// Namespace: Facebook.Unity.Canvas
internal interface ICanvasFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 2568
{
	// Methods
	public abstract void OnPayComplete(ResultContainer resultContainer); // 0
	public abstract void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0
	public abstract void OnUrlResponse(string message); // 0
	public abstract void OnHideUnity(bool hide); // 0
}

// Namespace: Facebook.Unity.Canvas
internal interface ICanvasJSWrapper // TypeDefIndex: 2569
{
	// Methods
	public abstract string GetSDKVersion(); // 0
	public abstract void ExternalCall(string functionName, object[] args); // 0
	public abstract void DisableFullScreen(); // 0
	public abstract void ExternalEval(string script); // 0
}

// Namespace: Facebook.Unity.Canvas
internal class JsBridge : MonoBehaviour // TypeDefIndex: 2570
{
	// Fields
	private ICanvasFacebookCallbackHandler facebook; // 0x18

	// Methods
	public void .ctor(); // 0x10036E220
	public void Start(); // 0x10036E228
	public void OnLoginComplete(optional string responseJsonData); // 0x10036E284
	public void OnFacebookAuthResponseChange(optional string responseJsonData); // 0x10036E388
	public void OnPayComplete(optional string responseJsonData); // 0x10036E48C
	public void OnAppRequestsComplete(optional string responseJsonData); // 0x10036E58C
	public void OnShareLinkComplete(optional string responseJsonData); // 0x10036E690
	public void OnGroupCreateComplete(optional string responseJsonData); // 0x10036E794
	public void OnJoinGroupComplete(optional string responseJsonData); // 0x10036E898
	public void OnFacebookFocus(string state); // 0x10036E99C
	public void OnInitComplete(optional string responseJsonData); // 0x10036EAE0
	public void OnUrlResponse(optional string url); // 0x10036EBE0
}

// Namespace: Facebook.Unity.Arcade
internal sealed class ArcadeFacebook : FacebookBase, IArcadeFacebookImplementation, IArcadeFacebook, IArcadeFacebookResultHandler, IPayFacebook, IFacebook, IFacebookResultHandler // TypeDefIndex: 2571
{
	// Fields
	private string appId; // 0x28
	private IArcadeWrapper arcadeWrapper; // 0x30
	private bool <LimitEventUsage>k__BackingField; // 0x38

	// Methods
	public void .ctor(); // 0x100365A1C
	public void .ctor(IArcadeWrapper arcadeWrapper, CallbackManager callbackManager); // 0x100365C40
	public override bool get_LimitEventUsage(); // 0x100365CA8
	public override void set_LimitEventUsage(bool value); // 0x100365CB0
	public override string get_SDKName(); // 0x100365CB8
	public override string get_SDKVersion(); // 0x100365D00
	public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x100365D48
	public override void ActivateApp(optional string appId); // 0x100366208
	public override void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0x1003662FC
	public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0x100366734
	public override void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0x100366854
	public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0x100366D70
	public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0x100366FC8
	public override void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0x10036705C
	public override void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0x1003670B0
	public override void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x100367104
	public override void LogInWithPublishPermissions(IEnumerable`1<string> scope, FacebookDelegate`1<ILoginResult> callback); // 0x100367158
	public override void LogInWithReadPermissions(IEnumerable`1<string> scope, FacebookDelegate`1<ILoginResult> callback); // 0x1003672D8
	public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x1003672DC
	public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x100367668
	public override void OnGroupCreateComplete(ResultContainer resultContainer); // 0x1003676BC
	public override void OnGroupJoinComplete(ResultContainer resultContainer); // 0x100367710
	public override void OnLoginComplete(ResultContainer resultContainer); // 0x100367764
	public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x1003679BC
	public bool HaveReceivedPipeResponse(); // 0x100367B64
	public string GetPipeResponse(string callbackId); // 0x100367C58
	private static IArcadeWrapper GetArcadeWrapper(); // 0x100365A98
	private void LoginWithPermissions(IEnumerable`1<string> scope, FacebookDelegate`1<ILoginResult> callback); // 0x10036715C
}

// Namespace: 
public sealed class OnComplete : MulticastDelegate // TypeDefIndex: 2572
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100366D60
	public virtual void Invoke(ResultContainer resultContainer); // 0x100367E6C
	public virtual IAsyncResult BeginInvoke(ResultContainer resultContainer, AsyncCallback callback, object object); // 0x100367F08
	public virtual void EndInvoke(IAsyncResult result); // 0x100367F58
}

// Namespace: Facebook.Unity.Arcade
internal class ArcadeFacebookGameObject : FacebookGameObject, IFacebookCallbackHandler // TypeDefIndex: 2573
{
	// Methods
	public void .ctor(); // 0x100367F64
	protected IArcadeFacebookImplementation get_ArcadeFacebookImpl(); // 0x100367F74
	public void WaitForResponse(OnComplete onCompleteDelegate, string callbackId); // 0x100368048
	protected override void OnAwake(); // 0x1003680F4
	private IEnumerator WaitForPipeResponse(OnComplete onCompleteDelegate, string callbackId); // 0x100368074
}

// Namespace: 
private sealed class <WaitForPipeResponse>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 2574
{
	// Fields
	internal OnComplete onCompleteDelegate; // 0x10
	internal string callbackId; // 0x18
	internal ArcadeFacebookGameObject $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Methods
	public void .ctor(); // 0x1003680F8
	public bool MoveNext(); // 0x100368100
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100368314
	private object System.Collections.IEnumerator.get_Current(); // 0x10036831C
	public void Dispose(); // 0x100368324
	public void Reset(); // 0x100368338
}

// Namespace: Facebook.Unity.Arcade
internal class ArcadeFacebookLoader : CompiledFacebookLoader // TypeDefIndex: 2575
{
	// Methods
	public void .ctor(); // 0x10036838C
	protected override FacebookGameObject get_FBGameObject(); // 0x10036839C
}

// Namespace: Facebook.Unity.Arcade
internal interface IArcadeFacebook : IPayFacebook, IFacebook // TypeDefIndex: 2576
{
}

// Namespace: Facebook.Unity.Arcade
internal interface IArcadeFacebookImplementation : IArcadeFacebook, IArcadeFacebookResultHandler, IPayFacebook, IFacebook, IFacebookResultHandler // TypeDefIndex: 2577
{
	// Methods
	public abstract bool HaveReceivedPipeResponse(); // 0
	public abstract string GetPipeResponse(string callbackId); // 0
}

// Namespace: Facebook.Unity.Arcade
internal interface IArcadeFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 2578
{
}

// Namespace: Facebook.Unity.Arcade
internal interface IArcadeWrapper // TypeDefIndex: 2579
{
	// Methods
	public abstract IDictionary`2<string, object> get_PipeResponse(); // 0
	public abstract void set_PipeResponse(IDictionary`2<string, object> value); // 0
	public abstract void DoLoginRequest(string appID, string permissions, string callbackID, OnComplete completeDelegate); // 0
	public abstract void DoFeedShareRequest(string appId, string toId, string link, string linkName, string linkCaption, string linkDescription, string pictureLink, string mediaSource, string callbackID, OnComplete completeDelegate); // 0
	public abstract void DoAppRequestRequest(string appId, string message, string actionType, string objectId, string to, string filters, string excludeIDs, string maxRecipients, string data, string title, string callbackID, OnComplete completeDelegate); // 0
}

// Namespace: Facebook.Unity.Mobile
internal interface IMobileFacebook : IFacebook // TypeDefIndex: 2580
{
}

// Namespace: Facebook.Unity.Mobile
internal interface IMobileFacebookCallbackHandler : IFacebookCallbackHandler // TypeDefIndex: 2581
{
}

// Namespace: Facebook.Unity.Mobile
internal interface IMobileFacebookImplementation : IMobileFacebook, IMobileFacebookResultHandler, IFacebook, IFacebookResultHandler // TypeDefIndex: 2582
{
}

// Namespace: Facebook.Unity.Mobile
internal interface IMobileFacebookResultHandler : IFacebookResultHandler // TypeDefIndex: 2583
{
	// Methods
	public abstract void OnAppInviteComplete(ResultContainer resultContainer); // 0
	public abstract void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0
	public abstract void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0
}

// Namespace: Facebook.Unity.Mobile
internal abstract class MobileFacebook : FacebookBase, IMobileFacebookImplementation, IMobileFacebook, IMobileFacebookResultHandler, IFacebook, IFacebookResultHandler // TypeDefIndex: 2584
{
	// Methods
	protected void .ctor(CallbackManager callbackManager); // 0x100378E54
	public override void OnLoginComplete(ResultContainer resultContainer); // 0x10037BC80
	public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x10037BD20
	public override void OnGroupCreateComplete(ResultContainer resultContainer); // 0x10037BD98
	public override void OnGroupJoinComplete(ResultContainer resultContainer); // 0x10037BE10
	public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x10037BE88
	public void OnAppInviteComplete(ResultContainer resultContainer); // 0x10037BF00
	public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x10037BF78
	public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x10037BFF0
	public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x10037C068
}

// Namespace: Facebook.Unity.Mobile
internal abstract class MobileFacebookGameObject : FacebookGameObject, IMobileFacebookCallbackHandler, IFacebookCallbackHandler // TypeDefIndex: 2585
{
	// Methods
	protected void .ctor(); // 0x100379F68
	private IMobileFacebookImplementation get_MobileFacebook(); // 0x10037C124
	public void OnAppInviteComplete(string message); // 0x10037C1F0
	public void OnFetchDeferredAppLinkComplete(string message); // 0x10037C314
	public void OnRefreshCurrentAccessTokenComplete(string message); // 0x10037C43C
}

// Namespace: Facebook.Unity.Mobile.Android
internal sealed class AndroidFacebook : MobileFacebook // TypeDefIndex: 2586
{
	// Fields
	private bool limitEventUsage; // 0x28
	private IAndroidWrapper androidWrapper; // 0x30
	private string <KeyHash>k__BackingField; // 0x38

	// Methods
	public void .ctor(); // 0x100378C18
	public void .ctor(IAndroidWrapper androidWrapper, CallbackManager callbackManager); // 0x100378DC4
	private void set_KeyHash(string value); // 0x100378E80
	public override bool get_LimitEventUsage(); // 0x100378E88
	public override void set_LimitEventUsage(bool value); // 0x100378E90
	public override string get_SDKName(); // 0x100379078
	public override string get_SDKVersion(); // 0x1003790C0
	public void Init(string appId, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x100377B90
	public override void LogInWithReadPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x100379148
	public override void LogInWithPublishPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x100379254
	public override void LogOut(); // 0x100379360
	public override void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0x100379410
	public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0x10037967C
	public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0x1003797EC
	public override void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0x1003799B8
	public override void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0x100379B04
	public override void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x100379C10
	public override void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0x100379CE4
	public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0x100379E20
	public override void ActivateApp(string appId); // 0x100379F5C
	private static IAndroidWrapper GetAndroidWrapper(); // 0x100378C8C
	private void CallFB(string method, string args); // 0x100378F10
}

// Namespace: 
private class JavaMethodCall`1 : MethodCall`1<T> // TypeDefIndex: 2587
{
	// Fields
	private AndroidFacebook androidImpl; // 0x0

	// Methods
	public void .ctor(AndroidFacebook androidImpl, string methodName); // 0
	public override void Call(optional MethodArguments args); // 0
}

// Namespace: Facebook.Unity.Mobile.Android
internal class AndroidFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 2588
{
	// Methods
	public void .ctor(); // 0x100379F60
	protected override void OnAwake(); // 0x100379F70
}

// Namespace: Facebook.Unity.Mobile.Android
internal class AndroidFacebookLoader : CompiledFacebookLoader // TypeDefIndex: 2589
{
	// Methods
	public void .ctor(); // 0x100379FE4
	protected override FacebookGameObject get_FBGameObject(); // 0x100379FEC
}

// Namespace: Facebook.Unity.Mobile.Android
internal interface IAndroidWrapper // TypeDefIndex: 2590
{
	// Methods
	public abstract T CallStatic(string methodName); // 0
	public abstract void CallStatic(string methodName, object[] args); // 0
}

// Namespace: Facebook.Unity.Mobile.IOS
internal interface IIOSWrapper // TypeDefIndex: 2591
{
	// Methods
	public abstract void Init(string appId, bool frictionlessRequests, string urlSuffix, string unityUserAgentSuffix); // 0
	public abstract void LogInWithReadPermissions(int requestId, string scope); // 0
	public abstract void LogInWithPublishPermissions(int requestId, string scope); // 0
	public abstract void LogOut(); // 0
	public abstract void ShareLink(int requestId, string contentURL, string contentTitle, string contentDescription, string photoURL); // 0
	public abstract void FeedShare(int requestId, string toId, string link, string linkName, string linkCaption, string linkDescription, string picture, string mediaSource); // 0
	public abstract void AppRequest(int requestId, string message, string actionType, string objectId, optional string[] to, optional int toLength, optional string filters, optional string[] excludeIds, optional int excludeIdsLength, optional bool hasMaxRecipients, optional int maxRecipients, optional string data, optional string title); // 0
	public abstract void CreateGameGroup(int requestId, string name, string description, string privacy); // 0
	public abstract void JoinGameGroup(int requestId, string groupId); // 0
	public abstract void LogAppEvent(string logEvent, double valueToSum, int numParams, string[] paramKeys, string[] paramVals); // 0
	public abstract void LogPurchaseAppEvent(double logPurchase, string currency, int numParams, string[] paramKeys, string[] paramVals); // 0
	public abstract void FBAppEventsSetLimitEventUsage(bool limitEventUsage); // 0
	public abstract void GetAppLink(int requestId); // 0
	public abstract string FBSdkVersion(); // 0
}

// Namespace: Facebook.Unity.Mobile.IOS
internal class IOSFacebook : MobileFacebook // TypeDefIndex: 2592
{
	// Fields
	private bool limitEventUsage; // 0x28
	private IIOSWrapper iosWrapper; // 0x30

	// Methods
	public void .ctor(); // 0x10037A074
	public void .ctor(IIOSWrapper iosWrapper, CallbackManager callbackManager); // 0x10037A228
	public override bool get_LimitEventUsage(); // 0x10037A264
	public override void set_LimitEventUsage(bool value); // 0x10037A26C
	public override string get_SDKName(); // 0x10037A374
	public override string get_SDKVersion(); // 0x10037A3BC
	public void Init(string appId, bool frictionlessRequests, string iosURLSuffix, HideUnityDelegate hideUnityDelegate, InitDelegate onInitComplete); // 0x100377914
	public override void LogInWithReadPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x10037A4B0
	public override void LogInWithPublishPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x10037A5E4
	public override void LogOut(); // 0x10037A718
	public override void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0x10037A844
	public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0x10037AC98
	public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0x10037AEC0
	public override void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0x10037B144
	public override void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0x10037B284
	public override void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0x10037B3E4
	public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0x10037B904
	public override void ActivateApp(string appId); // 0x10037BA48
	public override void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x10037BA4C
	private static IIOSWrapper GetIOSWrapper(); // 0x10037A0F0
	private static NativeDict MarshallDict(Dictionary`2<string, object> dict); // 0x10037B5F0
	private int AddCallback(FacebookDelegate`1<T> callback); // 0
}

// Namespace: 
private class NativeDict // TypeDefIndex: 2593
{
	// Fields
	private int <NumEntries>k__BackingField; // 0x10
	private string[] <Keys>k__BackingField; // 0x18
	private string[] <Values>k__BackingField; // 0x20

	// Methods
	public void .ctor(); // 0x10037BBA4
	public int get_NumEntries(); // 0x10037B8EC
	public void set_NumEntries(int value); // 0x10037BBE0
	public string[] get_Keys(); // 0x10037B8F4
	public void set_Keys(string[] value); // 0x10037BBD0
	public string[] get_Values(); // 0x10037B8FC
	public void set_Values(string[] value); // 0x10037BBD8
}

// Namespace: Facebook.Unity.Mobile.IOS
internal class IOSFacebookGameObject : MobileFacebookGameObject // TypeDefIndex: 2594
{
	// Methods
	public void .ctor(); // 0x10037BBE8
}

// Namespace: Facebook.Unity.Mobile.IOS
internal class IOSFacebookLoader : CompiledFacebookLoader // TypeDefIndex: 2595
{
	// Methods
	public void .ctor(); // 0x10037BBF0
	protected override FacebookGameObject get_FBGameObject(); // 0x10037BBF8
}

// Namespace: Facebook.Unity.Editor
internal class EditorFacebook : FacebookBase, IMobileFacebookImplementation, ICanvasFacebookImplementation, IMobileFacebook, IMobileFacebookResultHandler, IFacebook, IFacebookResultHandler, ICanvasFacebook, ICanvasFacebookResultHandler, IPayFacebook // TypeDefIndex: 2596
{
	// Fields
	private IEditorWrapper editorWrapper; // 0x28
	private bool <LimitEventUsage>k__BackingField; // 0x30

	// Methods
	public void .ctor(IEditorWrapper wrapper, CallbackManager callbackManager); // 0x100370D44
	public void .ctor(); // 0x100370D7C
	public override bool get_LimitEventUsage(); // 0x100370E90
	public override void set_LimitEventUsage(bool value); // 0x100370E98
	public override string get_SDKName(); // 0x100370EA0
	public override string get_SDKVersion(); // 0x100370EE8
	private static IFacebookCallbackHandler get_EditorGameObject(); // 0x100370E14
	public override void Init(InitDelegate onInitComplete); // 0x100370F30
	public override void LogInWithReadPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x100371060
	public override void LogInWithPublishPermissions(IEnumerable`1<string> permissions, FacebookDelegate`1<ILoginResult> callback); // 0x1003710C8
	public override void AppRequest(string message, Nullable`1<OGActionType> actionType, string objectId, IEnumerable`1<string> to, IEnumerable`1<object> filters, IEnumerable`1<string> excludeIds, Nullable`1<int> maxRecipients, string data, string title, FacebookDelegate`1<IAppRequestResult> callback); // 0x10037124C
	public override void ShareLink(Uri contentURL, string contentTitle, string contentDescription, Uri photoURL, FacebookDelegate`1<IShareResult> callback); // 0x1003713BC
	public override void FeedShare(string toId, Uri link, string linkName, string linkCaption, string linkDescription, Uri picture, string mediaSource, FacebookDelegate`1<IShareResult> callback); // 0x10037153C
	public override void GameGroupCreate(string name, string description, string privacy, FacebookDelegate`1<IGroupCreateResult> callback); // 0x1003716BC
	public override void GameGroupJoin(string id, FacebookDelegate`1<IGroupJoinResult> callback); // 0x10037182C
	public override void ActivateApp(string appId); // 0x10037199C
	public override void GetAppLink(FacebookDelegate`1<IAppLinkResult> callback); // 0x100371B28
	public override void AppEventsLogEvent(string logEvent, Nullable`1<float> valueToSum, Dictionary`2<string, object> parameters); // 0x100371C58
	public override void AppEventsLogPurchase(float logPurchase, string currency, Dictionary`2<string, object> parameters); // 0x100371DE0
	public override void OnAppRequestsComplete(ResultContainer resultContainer); // 0x100371E48
	public override void OnGetAppLinkComplete(ResultContainer resultContainer); // 0x100371EC0
	public override void OnGroupCreateComplete(ResultContainer resultContainer); // 0x100371F38
	public override void OnGroupJoinComplete(ResultContainer resultContainer); // 0x100371FB0
	public override void OnLoginComplete(ResultContainer resultContainer); // 0x100372028
	public override void OnShareLinkComplete(ResultContainer resultContainer); // 0x1003720C8
	public void OnAppInviteComplete(ResultContainer resultContainer); // 0x100372140
	public void OnFetchDeferredAppLinkComplete(ResultContainer resultContainer); // 0x1003721B8
	public void OnPayComplete(ResultContainer resultContainer); // 0x100372230
	public void OnRefreshCurrentAccessTokenComplete(ResultContainer resultContainer); // 0x1003722A8
	public void OnFacebookAuthResponseChange(ResultContainer resultContainer); // 0x100372320
	public void OnUrlResponse(string message); // 0x100372374
	public void OnHideUnity(bool hidden); // 0x1003723C8
}

// Namespace: Facebook.Unity.Editor
internal class EditorFacebookGameObject : FacebookGameObject // TypeDefIndex: 2597
{
	// Methods
	public void .ctor(); // 0x10037241C
}

// Namespace: Facebook.Unity.Editor
internal class EditorFacebookLoader : CompiledFacebookLoader // TypeDefIndex: 2598
{
	// Methods
	public void .ctor(); // 0x100372424
	protected override FacebookGameObject get_FBGameObject(); // 0x10037242C
}

// Namespace: Facebook.Unity.Editor
internal abstract class EditorFacebookMockDialog : MonoBehaviour // TypeDefIndex: 2599
{
	// Fields
	private Rect modalRect; // 0x18
	private GUIStyle modalStyle; // 0x28
	private Callback`1<ResultContainer> <Callback>k__BackingField; // 0x30
	private string <CallbackID>k__BackingField; // 0x38

	// Methods
	protected void .ctor(); // 0x10036F35C
	protected Callback`1<ResultContainer> get_Callback(); // 0x10036F4D4
	public void set_Callback(Callback`1<ResultContainer> value); // 0x1003724AC
	protected string get_CallbackID(); // 0x10036F4CC
	public void set_CallbackID(string value); // 0x1003724B4
	protected abstract string get_DialogTitle(); // 0
	public void Start(); // 0x1003724BC
	public void OnGUI(); // 0x100372610
	protected abstract void DoGui(); // 0
	protected abstract void SendSuccessResult(); // 0
	protected virtual void SendCancelResult(); // 0x100372744
	protected virtual void SendErrorResult(string errorMessage); // 0x10037289C
	private void OnGUIDialog(int windowId); // 0x1003729D0
}

// Namespace: Facebook.Unity.Editor
internal class EditorWrapper : IEditorWrapper // TypeDefIndex: 2600
{
	// Fields
	private IFacebookCallbackHandler callbackHandler; // 0x10

	// Methods
	public void .ctor(IFacebookCallbackHandler callbackHandler); // 0x100370E64
	public void Init(); // 0x100372EB0
	public void ShowLoginMockDialog(Callback`1<ResultContainer> callback, string callbackId, string permsisions); // 0x100372FD8
	public void ShowAppRequestMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0x100373048
	public void ShowGameGroupCreateMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0x100373120
	public void ShowGameGroupJoinMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0x100373180
	public void ShowMockShareDialog(Callback`1<ResultContainer> callback, string subTitle, string callbackId); // 0x1003731E0
	private void ShowEmptyMockDialog(Callback`1<ResultContainer> callback, string callbackId, string title); // 0x1003730A8
}

// Namespace: Facebook.Unity.Editor
internal interface IEditorWrapper // TypeDefIndex: 2601
{
	// Methods
	public abstract void Init(); // 0
	public abstract void ShowLoginMockDialog(Callback`1<ResultContainer> callback, string callbackId, string permissions); // 0
	public abstract void ShowAppRequestMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0
	public abstract void ShowGameGroupCreateMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0
	public abstract void ShowGameGroupJoinMockDialog(Callback`1<ResultContainer> callback, string callbackId); // 0
	public abstract void ShowMockShareDialog(Callback`1<ResultContainer> callback, string subTitle, string callbackId); // 0
}

// Namespace: Facebook.Unity.Editor.Dialogs
internal class EmptyMockDialog : EditorFacebookMockDialog // TypeDefIndex: 2602
{
	// Fields
	private string <EmptyDialogTitle>k__BackingField; // 0x40

	// Methods
	public void .ctor(); // 0x10036F354
	public string get_EmptyDialogTitle(); // 0x10036F364
	public void set_EmptyDialogTitle(string value); // 0x10036F36C
	protected override string get_DialogTitle(); // 0x10036F374
	protected override void DoGui(); // 0x10036F37C
	protected override void SendSuccessResult(); // 0x10036F380
}

// Namespace: Facebook.Unity.Editor.Dialogs
internal class MockLoginDialog : EditorFacebookMockDialog // TypeDefIndex: 2603
{
	// Fields
	private string accessToken; // 0x40

	// Methods
	public void .ctor(); // 0x10036F4DC
	protected override string get_DialogTitle(); // 0x10036F554
	protected override void DoGui(); // 0x10036F59C
	protected override void SendSuccessResult(); // 0x10036F860
	private void <SendSuccessResult>m__0(IGraphResult graphResult); // 0x10036F9D8
}

// Namespace: 
private sealed class <SendSuccessResult>c__AnonStorey0 // TypeDefIndex: 2604
{
	// Fields
	internal string facebookID; // 0x10
	internal MockLoginDialog $this; // 0x18

	// Methods
	public void .ctor(); // 0x10036FDE8
	internal void <>m__0(IGraphResult permResult); // 0x10036FDF0
}

// Namespace: Facebook.Unity.Editor.Dialogs
internal class MockShareDialog : EditorFacebookMockDialog // TypeDefIndex: 2605
{
	// Fields
	private string <SubTitle>k__BackingField; // 0x40

	// Methods
	public void .ctor(); // 0x100370778
	private string get_SubTitle(); // 0x100370780
	public void set_SubTitle(string value); // 0x100370788
	protected override string get_DialogTitle(); // 0x100370790
	protected override void DoGui(); // 0x100370818
	protected override void SendSuccessResult(); // 0x10037081C
	protected override void SendCancelResult(); // 0x100370C18
	private string GenerateFakePostID(); // 0x100370AFC
}

// Namespace: Facebook.Unity
internal class AccessTokenRefreshResult : ResultBase, IAccessTokenRefreshResult, IResult // TypeDefIndex: 2606
{
	// Fields
	private AccessToken <AccessToken>k__BackingField; // 0x48

	// Methods
	public void .ctor(ResultContainer resultContainer); // 0x1003649B4
	public AccessToken get_AccessToken(); // 0x100364D14
	private void set_AccessToken(AccessToken value); // 0x100364D0C
	public override string ToString(); // 0x100364D1C
}

// Namespace: Facebook.Unity
internal class AppInviteResult : ResultBase, IAppInviteResult, IResult // TypeDefIndex: 2607
{
	// Methods
	public void .ctor(ResultContainer resultContainer); // 0x100364FDC
}

// Namespace: Facebook.Unity
internal class AppLinkResult : ResultBase, IAppLinkResult, IResult // TypeDefIndex: 2608
{
	// Fields
	private string <Url>k__BackingField; // 0x48
	private string <TargetUrl>k__BackingField; // 0x50
	private string <Ref>k__BackingField; // 0x58
	private IDictionary`2<string, object> <Extras>k__BackingField; // 0x60

	// Methods
	public void .ctor(ResultContainer resultContainer); // 0x100364FE0
	public string get_Url(); // 0x1003651E0
	private void set_Url(string value); // 0x1003651C0
	public string get_TargetUrl(); // 0x1003651E8
	private void set_TargetUrl(string value); // 0x1003651C8
	public string get_Ref(); // 0x1003651F0
	private void set_Ref(string value); // 0x1003651D0
	public IDictionary`2<string, object> get_Extras(); // 0x1003651F8
	private void set_Extras(IDictionary`2<string, object> value); // 0x1003651D8
	public override string ToString(); // 0x100365200
}

// Namespace: Facebook.Unity
internal class AppRequestResult : ResultBase, IAppRequestResult, IResult // TypeDefIndex: 2609
{
	// Fields
	private string <RequestID>k__BackingField; // 0x48
	private IEnumerable`1<string> <To>k__BackingField; // 0x50

	// Methods
	public void .ctor(ResultContainer resultContainer); // 0x1003653B4
	public string get_RequestID(); // 0x1003658E4
	private void set_RequestID(string value); // 0x1003658D4
	public IEnumerable`1<string> get_To(); // 0x1003658EC
	private void set_To(IEnumerable`1<string> value); // 0x1003658DC
	public override string ToString(); // 0x1003658F4
}

// Namespace: Facebook.Unity
internal class GraphResult : ResultBase, IGraphResult, IResult // TypeDefIndex: 2610
{
	// Fields
	private IList`1<object> <ResultList>k__BackingField; // 0x48
	private Texture2D <Texture>k__BackingField; // 0x50

	// Methods
	internal void .ctor(WWW result); // 0x100369340
	private void set_ResultList(IList`1<object> value); // 0x1003781F0
	private void set_Texture(Texture2D value); // 0x1003781E8
	private void Init(string rawResult); // 0x10037808C
}

// Namespace: Facebook.Unity
internal class GroupCreateResult : ResultBase, IGroupCreateResult, IResult // TypeDefIndex: 2611
{
	// Fields
	private string <GroupId>k__BackingField; // 0x48

	// Methods
	public void .ctor(ResultContainer resultContainer); // 0x10036CFDC
	public string get_GroupId(); // 0x100378200
	private void set_GroupId(string value); // 0x1003781F8
	public override string ToString(); // 0x100378208
}

// Namespace: Facebook.Unity
internal class GroupJoinResult : ResultBase, IGroupJoinResult, IResult // TypeDefIndex: 2612
{
	// Methods
	internal void .ctor(ResultContainer resultContainer); // 0x10036D138
}

// Namespace: Facebook.Unity
public interface IAccessTokenRefreshResult : IResult // TypeDefIndex: 2613
{
}

// Namespace: Facebook.Unity
public interface IAppInviteResult : IResult // TypeDefIndex: 2614
{
}

// Namespace: Facebook.Unity
public interface IAppLinkResult : IResult // TypeDefIndex: 2615
{
}

// Namespace: Facebook.Unity
public interface IAppRequestResult : IResult // TypeDefIndex: 2616
{
}

// Namespace: Facebook.Unity
public interface IGraphResult : IResult // TypeDefIndex: 2617
{
}

// Namespace: Facebook.Unity
public interface IGroupCreateResult : IResult // TypeDefIndex: 2618
{
}

// Namespace: Facebook.Unity
public interface IGroupJoinResult : IResult // TypeDefIndex: 2619
{
}

// Namespace: Facebook.Unity
internal interface IInternalResult : IResult // TypeDefIndex: 2620
{
	// Methods
	public abstract string get_CallbackId(); // 0
}

// Namespace: Facebook.Unity
public interface ILoginResult : IResult // TypeDefIndex: 2621
{
}

// Namespace: Facebook.Unity
public interface IPayResult : IResult // TypeDefIndex: 2622
{
}

// Namespace: Facebook.Unity
public interface IResult // TypeDefIndex: 2623
{
	// Methods
	public abstract string get_Error(); // 0
	public abstract IDictionary`2<string, object> get_ResultDictionary(); // 0
	public abstract string get_RawResult(); // 0
}

// Namespace: Facebook.Unity
public interface IShareResult : IResult // TypeDefIndex: 2624
{
}

// Namespace: Facebook.Unity
internal class LoginResult : ResultBase, ILoginResult, IResult // TypeDefIndex: 2625
{
	// Fields
	public static readonly string UserIdKey; // 0x0
	public static readonly string ExpirationTimestampKey; // 0x8
	public static readonly string PermissionsKey; // 0x10
	public static readonly string AccessTokenKey; // 0x18
	private AccessToken <AccessToken>k__BackingField; // 0x48

	// Methods
	internal void .ctor(ResultContainer resultContainer); // 0x100367804
	public AccessToken get_AccessToken(); // 0x10036D31C
	private void set_AccessToken(AccessToken value); // 0x100378468
	public override string ToString(); // 0x100378470
	private static void .cctor(); // 0x10037856C
}

// Namespace: Facebook.Unity
internal class PayResult : ResultBase, IPayResult, IResult // TypeDefIndex: 2626
{
	// Methods
	internal void .ctor(ResultContainer resultContainer); // 0x10036CD9C
	public long get_ErrorCode(); // 0x10037C570
	public override string ToString(); // 0x10037C5D4
}

// Namespace: Facebook.Unity
internal abstract class ResultBase : IInternalResult, IResult // TypeDefIndex: 2627
{
	// Fields
	private string <Error>k__BackingField; // 0x10
	private IDictionary`2<string, object> <ResultDictionary>k__BackingField; // 0x18
	private string <RawResult>k__BackingField; // 0x20
	private bool <Cancelled>k__BackingField; // 0x28
	private string <CallbackId>k__BackingField; // 0x30
	private Nullable`1<long> <CanvasErrorCode>k__BackingField; // 0x38

	// Methods
	internal void .ctor(ResultContainer result); // 0x100364B6C
	internal void .ctor(ResultContainer result, string error, bool cancelled); // 0x100378040
	public virtual string get_Error(); // 0x10037CCD8
	protected virtual void set_Error(string value); // 0x10037CCE0
	public virtual IDictionary`2<string, object> get_ResultDictionary(); // 0x10037CCE8
	protected virtual void set_ResultDictionary(IDictionary`2<string, object> value); // 0x10037CCF0
	public virtual string get_RawResult(); // 0x10037CCF8
	protected virtual void set_RawResult(string value); // 0x10037CD00
	public virtual bool get_Cancelled(); // 0x10037CD08
	protected virtual void set_Cancelled(bool value); // 0x10037CD10
	public virtual string get_CallbackId(); // 0x10037CD18
	protected virtual void set_CallbackId(string value); // 0x10037CD20
	protected Nullable`1<long> get_CanvasErrorCode(); // 0x10037C564
	private void set_CanvasErrorCode(Nullable`1<long> value); // 0x10037CD28
	public override string ToString(); // 0x100364E18
	protected void Init(ResultContainer result, string error, bool cancelled, string callbackId); // 0x10037CA3C
	private static string GetErrorValue(IDictionary`2<string, object> result); // 0x10037C6F0
	private static bool GetCancelledValue(IDictionary`2<string, object> result); // 0x10037C77C
	private static string GetCallbackId(IDictionary`2<string, object> result); // 0x10037C9B0
}

// Namespace: Facebook.Unity
internal class ResultContainer // TypeDefIndex: 2628
{
	// Fields
	private const string CanvasResponseKey = "response"; // 0x0
	private string <RawResult>k__BackingField; // 0x10
	private IDictionary`2<string, object> <ResultDictionary>k__BackingField; // 0x18

	// Methods
	public void .ctor(IDictionary`2<string, object> dictionary); // 0x10036BDF8
	public void .ctor(string result); // 0x1003660C0
	public string get_RawResult(); // 0x10037CD30
	private void set_RawResult(string value); // 0x10037CD38
	public IDictionary`2<string, object> get_ResultDictionary(); // 0x10036D1D4
	public void set_ResultDictionary(IDictionary`2<string, object> value); // 0x10037CD40
	private IDictionary`2<string, object> GetWebFormattedResponseDictionary(IDictionary`2<string, object> resultDictionary); // 0x10037CD48
}

// Namespace: Facebook.Unity
internal class ShareResult : ResultBase, IShareResult, IResult // TypeDefIndex: 2629
{
	// Fields
	private string <PostId>k__BackingField; // 0x48

	// Methods
	internal void .ctor(ResultContainer resultContainer); // 0x100367A38
	public string get_PostId(); // 0x10037CF88
	private void set_PostId(string value); // 0x10037CF80
	internal static string get_PostIDKey(); // 0x10037CF24
	public override string ToString(); // 0x10037CF90
}

// Namespace: Facebook.Unity
internal class AsyncRequestString : MonoBehaviour // TypeDefIndex: 2630
{
	// Fields
	private Uri url; // 0x18
	private HttpMethod method; // 0x20
	private IDictionary`2<string, string> formData; // 0x28
	private WWWForm query; // 0x30
	private FacebookDelegate`1<IGraphResult> callback; // 0x38

	// Methods
	public void .ctor(); // 0x10036842C
	internal static void Post(Uri url, optional Dictionary`2<string, string> formData, optional FacebookDelegate`1<IGraphResult> callback); // 0x100368434
	internal static void Get(Uri url, optional Dictionary`2<string, string> formData, optional FacebookDelegate`1<IGraphResult> callback); // 0x1003684D4
	internal static void Request(Uri url, HttpMethod method, optional WWWForm query, optional FacebookDelegate`1<IGraphResult> callback); // 0x1003684EC
	internal static void Request(Uri url, HttpMethod method, optional IDictionary`2<string, string> formData, optional FacebookDelegate`1<IGraphResult> callback); // 0x10036844C
	internal IEnumerator Start(); // 0x100368598
	internal AsyncRequestString SetUrl(Uri url); // 0x100368570
	internal AsyncRequestString SetMethod(HttpMethod method); // 0x100368578
	internal AsyncRequestString SetFormData(IDictionary`2<string, string> formData); // 0x100368590
	internal AsyncRequestString SetQuery(WWWForm query); // 0x100368580
	internal AsyncRequestString SetCallback(FacebookDelegate`1<IGraphResult> callback); // 0x100368588
}

// Namespace: 
private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 2631
{
	// Fields
	internal WWW <www>__1; // 0x10
	internal AsyncRequestString $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Methods
	public void .ctor(); // 0x100368604
	public bool MoveNext(); // 0x10036860C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100369444
	private object System.Collections.IEnumerator.get_Current(); // 0x10036944C
	public void Dispose(); // 0x100369454
	public void Reset(); // 0x100369468
}

// Namespace: Facebook.Unity
internal static class FacebookLogger // TypeDefIndex: 2632
{
	// Fields
	private static IFacebookLogger <Instance>k__BackingField; // 0x0

	// Methods
	private static void .cctor(); // 0x100374B68
	private static IFacebookLogger get_Instance(); // 0x100374C38
	internal static void set_Instance(IFacebookLogger value); // 0x100374BCC
	public static void Log(string msg); // 0x100371CC0
	public static void Info(string msg); // 0x100371A04
	public static void Warn(string msg); // 0x100369C60
	public static void Warn(string format, string[] args); // 0x100374CA0
}

// Namespace: 
private class DebugLogger : IFacebookLogger // TypeDefIndex: 2633
{
	// Methods
	public void .ctor(); // 0x100374BC4
	public void Log(string msg); // 0x100374D48
	public void Info(string msg); // 0x100374DE8
	public void Warn(string msg); // 0x100374E54
}

// Namespace: Facebook.Unity
public sealed class HttpMethod : Enum // TypeDefIndex: 2634
{
	// Fields
	public int value__; // 0x10
	public const HttpMethod GET = 0; // 0x0
	public const HttpMethod POST = 1; // 0x0
	public const HttpMethod DELETE = 2; // 0x0

}

// Namespace: Facebook.Unity
internal interface IFacebookLogger // TypeDefIndex: 2635
{
	// Methods
	public abstract void Log(string msg); // 0
	public abstract void Info(string msg); // 0
	public abstract void Warn(string msg); // 0
}

// Namespace: Facebook.MiniJSON
public static class Json // TypeDefIndex: 2636
{
	// Fields
	private static NumberFormatInfo numberFormat; // 0x0

	// Methods
	public static object Deserialize(string json); // 0x100361B2C
	public static string Serialize(object obj); // 0x100361CAC
	private static void .cctor(); // 0x100361D54
}

// Namespace: 
private sealed class Parser : IDisposable // TypeDefIndex: 2637
{
	// Fields
	private StringReader json; // 0x10

	// Methods
	private void .ctor(string jsonString); // 0x100361E00
	private char get_PeekChar(); // 0x100361E7C
	private char get_NextChar(); // 0x100361F24
	private string get_NextWord(); // 0x100361FCC
	private TOKEN get_NextToken(); // 0x1003620EC
	public static object Parse(string jsonString); // 0x100361B3C
	public void Dispose(); // 0x1003624D8
	private Dictionary`2<string, object> ParseObject(); // 0x10036250C
	private List`1<object> ParseArray(); // 0x1003629AC
	private object ParseValue(); // 0x1003624B0
	private object ParseByToken(TOKEN token); // 0x100362AC0
	private string ParseString(); // 0x100362678
	private object ParseNumber(); // 0x100362BFC
	private void EatWhitespace(); // 0x1003623D8
}

// Namespace: 
private sealed class TOKEN : Enum // TypeDefIndex: 2638
{
	// Fields
	public int value__; // 0x10
	public const TOKEN NONE = 0; // 0x0
	public const TOKEN CURLY_OPEN = 1; // 0x0
	public const TOKEN CURLY_CLOSE = 2; // 0x0
	public const TOKEN SQUARED_OPEN = 3; // 0x0
	public const TOKEN SQUARED_CLOSE = 4; // 0x0
	public const TOKEN COLON = 5; // 0x0
	public const TOKEN COMMA = 6; // 0x0
	public const TOKEN STRING = 7; // 0x0
	public const TOKEN NUMBER = 8; // 0x0
	public const TOKEN TRUE = 9; // 0x0
	public const TOKEN FALSE = 10; // 0x0
	public const TOKEN NULL = 11; // 0x0

}

// Namespace: 
private sealed class Serializer // TypeDefIndex: 2639
{
	// Fields
	private StringBuilder builder; // 0x10

	// Methods
	private void .ctor(); // 0x100362D04
	public static string Serialize(object obj); // 0x100361CB0
	private void SerializeValue(object value); // 0x100362D70
	private void SerializeObject(IDictionary obj); // 0x1003635D0
	private void SerializeArray(IList array); // 0x100363254
	private void SerializeString(string str); // 0x100362F24
	private void SerializeOther(object value); // 0x100363AD0
}

// Namespace: Facebook.Unity
internal static class Utilities // TypeDefIndex: 2640
{
	// Fields
	private static Dictionary`2<string, string> commandLineArguments; // 0x0
	private static Func`2<object, string> <>f__am$cache0; // 0x8

	// Methods
	public static Dictionary`2<string, string> get_CommandLineArguments(); // 0x100365F04
	public static bool TryGetValue(IDictionary`2<string, object> dictionary, string key, out T value); // 0
	public static long TotalSeconds(DateTime dateTime); // 0x100364104
	public static T GetValueOrDefault(IDictionary`2<string, object> dictionary, string key, optional bool logWarning); // 0
	public static string ToCommaSeparateList(IEnumerable`1<string> list); // 0x1003641D0
	public static string AbsoluteUrlOrEmptyString(Uri uri); // 0x10037AE00
	public static string GetUserAgent(string productName, string productVersion); // 0x100369E4C
	public static string ToJson(IDictionary`2<string, object> dictionary); // 0x100365350
	public static AccessToken ParseAccessTokenFromResult(IDictionary`2<string, object> resultDictionary); // 0x100364BD8
	public static string ToStringNullOk(object obj); // 0x1003642A0
	public static string FormatToString(string baseString, string className, IDictionary`2<string, string> propertiesAndValues); // 0x100364330
	private static DateTime ParseExpirationDateFromResult(IDictionary`2<string, object> resultDictionary); // 0x10037D084
	private static Nullable`1<DateTime> ParseLastRefreshFromResult(IDictionary`2<string, object> resultDictionary); // 0x10037D508
	private static ICollection`1<string> ParsePermissionFromResult(IDictionary`2<string, object> resultDictionary); // 0x10037D25C
	private static DateTime FromTimestamp(int timestamp); // 0x10037D628
	private static string <ParsePermissionFromResult>m__0(object permission); // 0x10037D688
}

// Namespace: 
public sealed class Callback`1 : MulticastDelegate // TypeDefIndex: 2641
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T obj); // 0
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: Facebook.Unity
internal static class FBUnityUtility // TypeDefIndex: 2642
{
	// Fields
	private static IAsyncRequestStringWrapper asyncRequestStringWrapper; // 0x0

	// Methods
	public static IAsyncRequestStringWrapper get_AsyncRequestStringWrapper(); // 0x100373B24
}

// Namespace: Facebook.Unity
internal class AsyncRequestStringWrapper : IAsyncRequestStringWrapper // TypeDefIndex: 2643
{
	// Methods
	public void .ctor(); // 0x1003694BC
	public void Request(Uri url, HttpMethod method, optional WWWForm query, optional FacebookDelegate`1<IGraphResult> callback); // 0x1003694C4
	public void Request(Uri url, HttpMethod method, optional IDictionary`2<string, string> formData, optional FacebookDelegate`1<IGraphResult> callback); // 0x1003694C8
}

// Namespace: Facebook.Unity
internal interface IAsyncRequestStringWrapper // TypeDefIndex: 2644
{
	// Methods
	public abstract void Request(Uri url, HttpMethod method, optional WWWForm query, optional FacebookDelegate`1<IGraphResult> callback); // 0
	public abstract void Request(Uri url, HttpMethod method, optional IDictionary`2<string, string> formData, optional FacebookDelegate`1<IGraphResult> callback); // 0
}

// Namespace: Facebook.Unity.Canvas
internal static class CanvasConstants // TypeDefIndex: 2645
{
	// Methods
	internal static string get_JSSDKBindings(); // 0x1003696E8
}

// Namespace: Facebook.Unity
internal class FacebookScheduler : MonoBehaviour, IFacebookScheduler // TypeDefIndex: 2646
{
	// Methods
	public void .ctor(); // 0x100374EC0
	public void Schedule(Action action, long delay); // 0x100374EC8
	public IEnumerator DelayEvent(Action action, long delay); // 0x100374EF4
}

// Namespace: 
private sealed class <DelayEvent>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 2647
{
	// Fields
	internal long delay; // 0x10
	internal Action action; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Methods
	public void .ctor(); // 0x100374F6C
	public bool MoveNext(); // 0x100374F74
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100375050
	private object System.Collections.IEnumerator.get_Current(); // 0x100375058
	public void Dispose(); // 0x100375060
	public void Reset(); // 0x100375074
}

// Namespace: Facebook.Unity
internal interface IFacebookScheduler // TypeDefIndex: 2648
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2649
{
}

// Namespace: Sfs2X
public class SmartFox : IDispatchable // TypeDefIndex: 2650
{
	// Fields
	private const int DEFAULT_HTTP_PORT = 8080; // 0x0
	private const char CLIENT_TYPE_SEPARATOR = :; // 0x0
	private int majVersion; // 0x10
	private int minVersion; // 0x14
	private int subVersion; // 0x18
	private ISocketClient socketClient; // 0x20
	private string clientDetails; // 0x28
	private ILagMonitor lagMonitor; // 0x30
	private Nullable`1<UseWebSocket> useWebSocket; // 0x38
	private bool useBlueBox; // 0x40
	private bool isJoining; // 0x41
	private User mySelf; // 0x48
	private string sessionToken; // 0x50
	private Room lastJoinedRoom; // 0x58
	private Logger log; // 0x60
	private bool inited; // 0x68
	private bool debug; // 0x69
	private bool threadSafeMode; // 0x6A
	private bool isConnecting; // 0x6B
	private IUserManager userManager; // 0x70
	private IRoomManager roomManager; // 0x78
	private IBuddyManager buddyManager; // 0x80
	private ConfigData config; // 0x88
	private string currentZone; // 0x90
	private bool autoConnectOnConfig; // 0x98
	private string lastHost; // 0xA0
	private EventDispatcher dispatcher; // 0xA8
	private object eventsLocker; // 0xB0
	private Queue`1<BaseEvent> eventsQueue; // 0xB8

	// Methods
	public void .ctor(bool debug); // 0x100575FC4
	public Logger get_Log(); // 0x10056F1B4
	private void Initialize(bool debug); // 0x1005760EC
	private void Reset(); // 0x10057692C
	public ILagMonitor get_LagMonitor(); // 0x100576A94
	public bool get_IsConnected(); // 0x100576A9C
	public string get_Version(); // 0x100576BA0
	public ConfigData get_Config(); // 0x100573AB4
	public bool get_UseBlueBox(); // 0x100576E18
	public void set_UseBlueBox(bool value); // 0x100576E20
	public Room GetRoomById(int id); // 0x100576E28
	public void Connect(string host, int port); // 0x100576F2C
	public void Disconnect(); // 0x1005772D4
	public bool get_Debug(); // 0x1005772B4
	public User get_MySelf(); // 0x10056FC8C
	public void set_MySelf(User value); // 0x100577E10
	public Room get_LastJoinedRoom(); // 0x100572520
	public void set_LastJoinedRoom(Room value); // 0x100577E18
	public List`1<Room> get_JoinedRooms(); // 0x10057242C
	public IRoomManager get_RoomManager(); // 0x100577E20
	public IUserManager get_UserManager(); // 0x100577E28
	public IBuddyManager get_BuddyManager(); // 0x100569DC0
	public void set_IsJoining(bool value); // 0x100577E30
	public string get_SessionToken(); // 0x100573774
	public EventDispatcher get_Dispatcher(); // 0x100577E38
	public int GetReconnectionSeconds(); // 0x100577E40
	public void SetReconnectionSeconds(int seconds); // 0x100577F34
	public void Send(IRequest request); // 0x1005774EC
	public void AddLogListener(LogLevel logLevel, EventListenerDelegate eventListener); // 0x100578038
	private void OnSocketConnect(BaseEvent e); // 0x10057809C
	private void OnSocketClose(BaseEvent e); // 0x100578B90
	private void OnSocketReconnectionTry(BaseEvent e); // 0x100578D9C
	private void OnSocketDataError(BaseEvent e); // 0x100578E2C
	private void OnSocketIOError(BaseEvent e); // 0x100578FF0
	private void OnSocketSecurityError(BaseEvent e); // 0x100579098
	public void HandleHandShake(BaseEvent evt); // 0x100579140
	public void HandleLogin(BaseEvent evt); // 0x100579E14
	public void HandleClientDisconnection(string reason); // 0x100577BC8
	public void HandleLogout(); // 0x100579F54
	private void HandleConnectionProblem(BaseEvent e); // 0x1005783F0
	public void HandleReconnectionFailure(); // 0x10057A128
	private void SendHandshakeRequest(bool isReconnection); // 0x100578350
	internal void DispatchEvent(BaseEvent evt); // 0x10055F698
	private void EnqueueEvent(BaseEvent evt); // 0x10057A228
	public void ProcessEvents(); // 0x10057A304
	public void AddEventListener(string eventType, EventListenerDelegate listener); // 0x100578080
	public void RemoveAllEventListeners(); // 0x10057A558
}

// Namespace: Sfs2X.Bitswarm
public abstract class BaseController : IController // TypeDefIndex: 2651
{
	// Fields
	protected int id; // 0x10
	protected SmartFox sfs; // 0x18
	protected ISocketClient socketClient; // 0x20
	protected Logger log; // 0x28

	// Methods
	public void .ctor(ISocketClient socketClient); // 0x100524A10
	public abstract void HandleMessage(IMessage message); // 0
}

// Namespace: Sfs2X.Bitswarm
public class BitSwarmClient : ISocketClient, IDispatchable // TypeDefIndex: 2652
{
	// Fields
	private readonly double reconnectionDelayMillis; // 0x10
	private ISocketLayer socket; // 0x18
	private IoHandler ioHandler; // 0x20
	private Dictionary`2<int, IController> controllers; // 0x28
	private int compressionThreshold; // 0x30
	private int maxMessageSize; // 0x34
	private SmartFox sfs; // 0x38
	private string lastHost; // 0x40
	private int lastTcpPort; // 0x48
	private Logger log; // 0x50
	private int reconnectionSeconds; // 0x58
	private bool attemptingReconnection; // 0x5C
	private DateTime firstReconnAttempt; // 0x60
	private int reconnCounter; // 0x70
	private SystemController sysController; // 0x78
	private ExtensionController extController; // 0x80
	private IUDPManager udpManager; // 0x88
	private bool controllersInited; // 0x90
	private EventDispatcher dispatcher; // 0x98
	private BBClient bbClient; // 0xA0
	private bool useBlueBox; // 0xA8
	private bool bbConnected; // 0xA9
	private string connectionMode; // 0xB0
	private ThreadManager threadManager; // 0xB8
	private CryptoKey cryptoKey; // 0xC0
	private bool manualDisconnection; // 0xC8
	private Timer retryTimer; // 0xD0

	// Methods
	public void .ctor(SmartFox sfs); // 0x1005267B0
	public ThreadManager get_ThreadManager(); // 0x1005269B0
	public string get_ConnectionMode(); // 0x1005269B8
	public bool get_UseBlueBox(); // 0x1005269C0
	public bool get_Debug(); // 0x100524C70
	public SmartFox get_Sfs(); // 0x1005269E4
	public bool get_Connected(); // 0x1005269EC
	public void set_IoHandler(IoHandler value); // 0x100526B0C
	public int get_CompressionThreshold(); // 0x100526B98
	public void set_CompressionThreshold(int value); // 0x100526BA0
	public int get_MaxMessageSize(); // 0x100526C28
	public void set_MaxMessageSize(int value); // 0x100526C30
	public ISocketLayer get_Socket(); // 0x100526C38
	public BBClient get_HttpClient(); // 0x100526C40
	public bool get_IsReconnecting(); // 0x100526C48
	public void set_IsReconnecting(bool value); // 0x100526C50
	public int get_ReconnectionSeconds(); // 0x100526C58
	public void set_ReconnectionSeconds(int value); // 0x100526C64
	public EventDispatcher get_Dispatcher(); // 0x100526C6C
	public Logger get_Log(); // 0x100524C88
	public CryptoKey get_CryptoKey(); // 0x100526C74
	public void ForceBlueBox(bool val); // 0x100526C7C
	public void Init(); // 0x100526D08
	public void Destroy(); // 0x10052779C
	public IController GetController(int id); // 0x100528030
	private void AddController(int id, IController controller); // 0x100528098
	public void Connect(string host, int port); // 0x100528300
	public void Send(IMessage message); // 0x100528674
	public void Disconnect(string reason); // 0x100528800
	private void InitControllers(); // 0x1005275F0
	private void OnSocketConnect(); // 0x100528BD8
	public void StopReconnection(); // 0x100528E10
	private void OnSocketClose(); // 0x1005290EC
	private void SetTimeout(ElapsedEventHandler handler, double timeout); // 0x10052962C
	private void OnRetryConnectionEvent(object source, ElapsedEventArgs e); // 0x1005296FC
	private void Reconnect(); // 0x100529224
	private void ExecuteDisconnection(); // 0x100528FC4
	private void ReleaseResources(); // 0x1005289A8
	private void OnSocketData(byte[] data); // 0x10052982C
	private void OnSocketError(string message, SocketError se); // 0x100529B98
	public long NextUdpPacketId(); // 0x100529DF4
	public IUDPManager get_UdpManager(); // 0x100529EE8
	private void DispatchEvent(BitSwarmEvent evt); // 0x100528DF8
	private void OnBBConnect(BaseEvent e); // 0x100529EF0
	private void OnBBData(BaseEvent e); // 0x10052A15C
	private void OnBBDisconnect(BaseEvent e); // 0x10052A344
	private void OnBBError(BaseEvent e); // 0x10052A388
}

// Namespace: Sfs2X.Bitswarm
public class BitSwarmEvent : BaseEvent // TypeDefIndex: 2653
{
	// Fields
	public static readonly string CONNECT; // 0x0
	public static readonly string DISCONNECT; // 0x8
	public static readonly string RECONNECTION_TRY; // 0x10
	public static readonly string IO_ERROR; // 0x18
	public static readonly string SECURITY_ERROR; // 0x20
	public static readonly string DATA_ERROR; // 0x28

	// Methods
	public void .ctor(string type); // 0x100528D60
	public void .ctor(string type, Hashtable arguments); // 0x100529828
	private static void .cctor(); // 0x10052A7A0
}

// Namespace: Sfs2X.Bitswarm
public class ConnectionModes // TypeDefIndex: 2654
{
	// Fields
	public static readonly string SOCKET; // 0x0
	public static readonly string HTTP; // 0x8
	public static readonly string WEBSOCKET; // 0x10
	public static readonly string WEBSOCKET_SECURE; // 0x18

	// Methods
	private static void .cctor(); // 0x10052A854
}

// Namespace: Sfs2X.Bitswarm
public interface IController // TypeDefIndex: 2655
{
	// Methods
	public abstract void HandleMessage(IMessage message); // 0
}

// Namespace: Sfs2X.Bitswarm
public interface IMessage // TypeDefIndex: 2656
{
	// Methods
	public abstract int get_Id(); // 0
	public abstract void set_Id(int value); // 0
	public abstract ISFSObject get_Content(); // 0
	public abstract void set_Content(ISFSObject value); // 0
	public abstract int get_TargetController(); // 0
	public abstract void set_TargetController(int value); // 0
	public abstract void set_IsEncrypted(bool value); // 0
	public abstract bool get_IsUDP(); // 0
	public abstract void set_IsUDP(bool value); // 0
	public abstract long get_PacketId(); // 0
	public abstract void set_PacketId(long value); // 0
}

// Namespace: Sfs2X.Bitswarm
public interface ISocketClient // TypeDefIndex: 2657
{
	// Methods
	public abstract string get_ConnectionMode(); // 0
	public abstract bool get_Debug(); // 0
	public abstract SmartFox get_Sfs(); // 0
	public abstract bool get_Connected(); // 0
	public abstract void set_IoHandler(IoHandler value); // 0
	public abstract int get_CompressionThreshold(); // 0
	public abstract void set_CompressionThreshold(int value); // 0
	public abstract int get_MaxMessageSize(); // 0
	public abstract void set_MaxMessageSize(int value); // 0
	public abstract ISocketLayer get_Socket(); // 0
	public abstract bool get_IsReconnecting(); // 0
	public abstract void set_IsReconnecting(bool value); // 0
	public abstract int get_ReconnectionSeconds(); // 0
	public abstract void set_ReconnectionSeconds(int value); // 0
	public abstract EventDispatcher get_Dispatcher(); // 0
	public abstract Logger get_Log(); // 0
	public abstract void ForceBlueBox(bool val); // 0
	public abstract void Init(); // 0
	public abstract void Destroy(); // 0
	public abstract IController GetController(int id); // 0
	public abstract void Connect(string host, int port); // 0
	public abstract void Send(IMessage message); // 0
	public abstract void Disconnect(string reason); // 0
	public abstract void StopReconnection(); // 0
	public abstract long NextUdpPacketId(); // 0
}

// Namespace: Sfs2X.Bitswarm
public interface IUDPManager // TypeDefIndex: 2658
{
	// Methods
	public abstract bool get_Inited(); // 0
	public abstract long get_NextUdpPacketId(); // 0
	public abstract void Send(ByteArray binaryData); // 0
	public abstract void Disconnect(); // 0
}

// Namespace: Sfs2X.Bitswarm
public interface IoHandler // TypeDefIndex: 2659
{
	// Methods
	public abstract void OnDataRead(ByteArray buffer); // 0
	public abstract void OnDataRead(string jsonData); // 0
	public abstract void OnDataWrite(IMessage message); // 0
	public abstract IProtocolCodec get_Codec(); // 0
}

// Namespace: Sfs2X.Bitswarm
public class Message : IMessage // TypeDefIndex: 2660
{
	// Fields
	private int id; // 0x10
	private ISFSObject content; // 0x18
	private int targetController; // 0x20
	private bool isEncrypted; // 0x24
	private bool isUDP; // 0x25
	private long packetId; // 0x28

	// Methods
	public void .ctor(); // 0x10052A8E8
	public int get_Id(); // 0x10052A910
	public void set_Id(int value); // 0x10052A918
	public ISFSObject get_Content(); // 0x10052A920
	public void set_Content(ISFSObject value); // 0x10052A928
	public int get_TargetController(); // 0x10052A930
	public void set_TargetController(int value); // 0x10052A938
	public void set_IsEncrypted(bool value); // 0x10052A940
	public bool get_IsUDP(); // 0x10052A948
	public void set_IsUDP(bool value); // 0x10052A950
	public long get_PacketId(); // 0x10052A958
	public void set_PacketId(long value); // 0x10052A960
	public override string ToString(); // 0x10052A968
}

// Namespace: Sfs2X.Bitswarm
public sealed class PacketReadState : Enum // TypeDefIndex: 2661
{
	// Fields
	public int value__; // 0x10
	public const PacketReadState WAIT_NEW_PACKET = 0; // 0x0
	public const PacketReadState WAIT_DATA_SIZE = 1; // 0x0
	public const PacketReadState WAIT_DATA_SIZE_FRAGMENT = 2; // 0x0
	public const PacketReadState WAIT_DATA = 3; // 0x0
	public const PacketReadState INVALID_DATA = 4; // 0x0

}

// Namespace: Sfs2X.Bitswarm
public sealed class PacketReadTransition : Enum // TypeDefIndex: 2662
{
	// Fields
	public int value__; // 0x10
	public const PacketReadTransition HeaderReceived = 0; // 0x0
	public const PacketReadTransition SizeReceived = 1; // 0x0
	public const PacketReadTransition IncompleteSize = 2; // 0x0
	public const PacketReadTransition WholeSizeReceived = 3; // 0x0
	public const PacketReadTransition PacketFinished = 4; // 0x0
	public const PacketReadTransition InvalidData = 5; // 0x0
	public const PacketReadTransition InvalidDataFinished = 6; // 0x0

}

// Namespace: Sfs2X.Bitswarm
public class PendingPacket // TypeDefIndex: 2663
{
	// Fields
	private PacketHeader header; // 0x10
	private ByteArray buffer; // 0x18

	// Methods
	public void .ctor(PacketHeader header); // 0x10052AB4C
	public PacketHeader get_Header(); // 0x10052ABE8
	public ByteArray get_Buffer(); // 0x10052ABF0
	public void set_Buffer(ByteArray value); // 0x10052ABF8
}

// Namespace: Sfs2X.Bitswarm.BBox
public class BBClient : IDispatchable // TypeDefIndex: 2664
{
	// Fields
	private bool isConnected; // 0x10
	private string host; // 0x18
	private int port; // 0x20
	private string bbUrl; // 0x28
	private bool debug; // 0x30
	private string sessId; // 0x38
	private int pollSpeed; // 0x40
	private EventDispatcher dispatcher; // 0x48
	private Logger log; // 0x50
	private Timer pollTimer; // 0x58

	// Methods
	public void .ctor(BitSwarmClient bs); // 0x100524B98
	public void set_PollSpeed(int value); // 0x100524D80
	public void Connect(string host, int port); // 0x100524DAC
	public void Send(ByteArray binData); // 0x1005250E4
	public void Close(); // 0x100525324
	internal void OnHttpResponse(bool error, string response); // 0x1005253F8
	private void Poll(object state); // 0x100525C4C
	private void SendRequest(string cmd); // 0x1005250DC
	private void SendRequest(string cmd, object data); // 0x10052517C
	private SFSWebClient GetWebClient(); // 0x100526018
	private void HandleConnectionLost(bool fireEvent); // 0x10052532C
	private string EncodeRequest(string cmd, object data); // 0x100525D4C
	private ByteArray DecodeResponse(string rawData); // 0x100525CB4
	public void AddEventListener(string eventType, EventListenerDelegate listener); // 0x100526178
	private void DispatchEvent(BaseEvent evt); // 0x100525C2C
}

// Namespace: Sfs2X.Bitswarm.BBox
public class BBEvent : BaseEvent // TypeDefIndex: 2665
{
	// Fields
	public static readonly string CONNECT; // 0x0
	public static readonly string DISCONNECT; // 0x8
	public static readonly string DATA; // 0x10
	public static readonly string IO_ERROR; // 0x18
	public static readonly string SECURITY_ERROR; // 0x20

	// Methods
	public void .ctor(string type); // 0x100525C44
	public void .ctor(string type, Hashtable arguments); // 0x100525C28
	private static void .cctor(); // 0x10052670C
}

// Namespace: Sfs2X.Controllers
public class ExtensionController : BaseController // TypeDefIndex: 2666
{
	// Fields
	public static readonly string KEY_CMD; // 0x0
	public static readonly string KEY_PARAMS; // 0x8
	public static readonly string KEY_ROOM; // 0x10

	// Methods
	public void .ctor(ISocketClient socketClient); // 0x100528BD4
	private static void .cctor(); // 0x10052D0BC
	public override void HandleMessage(IMessage message); // 0x10052D140
}

// Namespace: Sfs2X.Controllers
public sealed class RequestDelegate : MulticastDelegate // TypeDefIndex: 2667
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052D804
	public virtual void Invoke(IMessage msg); // 0x10052D814
	public virtual IAsyncResult BeginInvoke(IMessage msg, AsyncCallback callback, object object); // 0x10052D8B0
	public virtual void EndInvoke(IAsyncResult result); // 0x10052D900
}

// Namespace: Sfs2X.Controllers
public class SystemController : BaseController // TypeDefIndex: 2668
{
	// Fields
	private Dictionary`2<int, RequestDelegate> requestHandlers; // 0x30

	// Methods
	public void .ctor(ISocketClient socketClient); // 0x100528B50
	private void InitRequestHandlers(); // 0x10052D90C
	public override void HandleMessage(IMessage message); // 0x10052E26C
	private void FnHandshake(IMessage msg); // 0x10052E7F0
	private void FnLogin(IMessage msg); // 0x10052E9AC
	private void FnCreateRoom(IMessage msg); // 0x10052F8FC
	private void FnJoinRoom(IMessage msg); // 0x100530EEC
	private void FnUserEnterRoom(IMessage msg); // 0x1005320C4
	private void FnUserCountChange(IMessage msg); // 0x100532518
	private void FnUserLost(IMessage msg); // 0x100532B44
	private void FnRoomLost(IMessage msg); // 0x100533358
	private void FnUserExitRoom(IMessage msg); // 0x1005338E8
	private void FnClientDisconnection(IMessage msg); // 0x1005342E0
	private void FnSetRoomVariables(IMessage msg); // 0x1005344B8
	private void FnSetUserVariables(IMessage msg); // 0x100535000
	private void FnSubscribeRoomGroup(IMessage msg); // 0x10053594C
	private void FnUnsubscribeRoomGroup(IMessage msg); // 0x100536198
	private void FnChangeRoomName(IMessage msg); // 0x100536914
	private void FnChangeRoomPassword(IMessage msg); // 0x100537240
	private void FnChangeRoomCapacity(IMessage msg); // 0x100537A90
	private void FnLogout(IMessage msg); // 0x100538390
	private User GetOrCreateUser(ISFSArray userObj, bool addToGlobalManager, Room room); // 0x100531AB0
	private void FnSpectatorToPlayer(IMessage msg); // 0x100538BC4
	private void FnPlayerToSpectator(IMessage msg); // 0x1005398EC
	private void FnInitBuddyList(IMessage msg); // 0x10053A550
	private void FnAddBuddy(IMessage msg); // 0x10053BA70
	private void FnRemoveBuddy(IMessage msg); // 0x10053C0A0
	private void FnBlockBuddy(IMessage msg); // 0x10053C79C
	private void FnGoOnline(IMessage msg); // 0x10053CFD4
	private void FnReconnectionFailure(IMessage msg); // 0x10053DE0C
	private void FnSetBuddyVariables(IMessage msg); // 0x10053DE28
	private void FnFindRooms(IMessage msg); // 0x10053EB00
	private void FnFindUsers(IMessage msg); // 0x10053F0F0
	private void FnInviteUsers(IMessage msg); // 0x10053F5E4
	private void FnInvitationReply(IMessage msg); // 0x10053FCF8
	private void FnQuickJoinGame(IMessage msg); // 0x10054060C
	private void FnPingPong(IMessage msg); // 0x100540A4C
	private void FnSetUserPosition(IMessage msg); // 0x100540C30
	private void FnSetMMOItemVariables(IMessage msg); // 0x100542418
	private void PopulateRoomList(ISFSArray roomList); // 0x10052F678
	private void FnGenericMessage(IMessage msg); // 0x100542D18
	private void HandlePublicMessage(ISFSObject sfso); // 0x100542FB8
	public void HandlePrivateMessage(ISFSObject sfso); // 0x100543630
	public void HandleBuddyMessage(ISFSObject sfso); // 0x100543C3C
	public void HandleModMessage(ISFSObject sfso); // 0x10054413C
	public void HandleAdminMessage(ISFSObject sfso); // 0x1005441BC
	private void HandleModMessage(ISFSObject sfso, string evt); // 0x100544584
	public void HandleObjectMessage(ISFSObject sfso); // 0x10054423C
}

// Namespace: Sfs2X.Core
public class BaseEvent // TypeDefIndex: 2669
{
	// Fields
	protected Hashtable arguments; // 0x10
	protected string type; // 0x18
	protected object target; // 0x20

	// Methods
	public void .ctor(string type, Hashtable args); // 0x100526688
	public string get_Type(); // 0x1005448E8
	public void set_Type(string value); // 0x1005448E0
	public IDictionary get_Params(); // 0x100529DEC
	public void set_Params(IDictionary value); // 0x100528D68
	public void set_Target(object value); // 0x1005448F0
	public override string ToString(); // 0x1005448F8
}

// Namespace: Sfs2X.Core
public class DefaultPacketEncrypter : IPacketEncrypter // TypeDefIndex: 2670
{
	// Fields
	private BitSwarmClient bitSwarm; // 0x10

	// Methods
	public void .ctor(BitSwarmClient bitSwarm); // 0x1005449D4
	public void Encrypt(ByteArray data); // 0x100544A00
	public void Decrypt(ByteArray data); // 0x100544F90
}

// Namespace: Sfs2X.Core
public sealed class EventListenerDelegate : MulticastDelegate // TypeDefIndex: 2671
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052778C
	public virtual void Invoke(BaseEvent evt); // 0x100545528
	public virtual IAsyncResult BeginInvoke(BaseEvent evt, AsyncCallback callback, object object); // 0x100545618
	public virtual void EndInvoke(IAsyncResult result); // 0x100545668
}

// Namespace: Sfs2X.Core
public class EventDispatcher // TypeDefIndex: 2672
{
	// Fields
	private object target; // 0x10
	private Hashtable listeners; // 0x18

	// Methods
	public void .ctor(object target); // 0x100524D04
	public void AddEventListener(string eventType, EventListenerDelegate listener); // 0x100526190
	public void DispatchEvent(BaseEvent evt); // 0x100526304
	public void RemoveAll(); // 0x1005455C4
}

// Namespace: Sfs2X.Core
public interface IDispatchable // TypeDefIndex: 2673
{
}

// Namespace: Sfs2X.Core
public interface IPacketEncrypter // TypeDefIndex: 2674
{
	// Methods
	public abstract void Encrypt(ByteArray data); // 0
	public abstract void Decrypt(ByteArray data); // 0
}

// Namespace: Sfs2X.Core
public class PacketHeader // TypeDefIndex: 2675
{
	// Fields
	private int expectedLength; // 0x10
	private bool binary; // 0x14
	private bool compressed; // 0x15
	private bool encrypted; // 0x16
	private bool blueBoxed; // 0x17
	private bool bigSized; // 0x18

	// Methods
	public void .ctor(bool encrypted, bool compressed, bool blueBoxed, bool bigSized); // 0x100545674
	public int get_ExpectedLength(); // 0x1005456D8
	public void set_ExpectedLength(int value); // 0x1005456E0
	public bool get_Encrypted(); // 0x1005456E8
	public bool get_Compressed(); // 0x10052ABE0
	public bool get_BigSized(); // 0x1005456F0
	public static PacketHeader FromBinary(int headerByte); // 0x1005456F8
	public byte Encode(); // 0x100545788
	public override string ToString(); // 0x1005457E4
}

// Namespace: Sfs2X.Core
public class SFSBuddyEvent : BaseEvent // TypeDefIndex: 2676
{
	// Fields
	public static readonly string BUDDY_LIST_INIT; // 0x0
	public static readonly string BUDDY_ADD; // 0x8
	public static readonly string BUDDY_REMOVE; // 0x10
	public static readonly string BUDDY_BLOCK; // 0x18
	public static readonly string BUDDY_ERROR; // 0x20
	public static readonly string BUDDY_ONLINE_STATE_UPDATE; // 0x28
	public static readonly string BUDDY_VARIABLES_UPDATE; // 0x30
	public static readonly string BUDDY_MESSAGE; // 0x38

	// Methods
	public void .ctor(string type, Hashtable args); // 0x10053BA6C
	private static void .cctor(); // 0x100545A34
}

// Namespace: Sfs2X.Core
public class SFSEvent : BaseEvent // TypeDefIndex: 2677
{
	// Fields
	public static readonly string HANDSHAKE; // 0x0
	public static readonly string UDP_INIT; // 0x8
	public static readonly string CONNECTION; // 0x10
	public static readonly string PING_PONG; // 0x18
	public static readonly string SOCKET_ERROR; // 0x20
	public static readonly string CONNECTION_LOST; // 0x28
	public static readonly string CONNECTION_RETRY; // 0x30
	public static readonly string CONNECTION_RESUME; // 0x38
	public static readonly string CONNECTION_ATTEMPT_HTTP; // 0x40
	public static readonly string CONFIG_LOAD_SUCCESS; // 0x48
	public static readonly string CONFIG_LOAD_FAILURE; // 0x50
	public static readonly string LOGIN; // 0x58
	public static readonly string LOGIN_ERROR; // 0x60
	public static readonly string LOGOUT; // 0x68
	public static readonly string ROOM_ADD; // 0x70
	public static readonly string ROOM_REMOVE; // 0x78
	public static readonly string ROOM_CREATION_ERROR; // 0x80
	public static readonly string ROOM_JOIN; // 0x88
	public static readonly string ROOM_JOIN_ERROR; // 0x90
	public static readonly string USER_ENTER_ROOM; // 0x98
	public static readonly string USER_EXIT_ROOM; // 0xA0
	public static readonly string USER_COUNT_CHANGE; // 0xA8
	public static readonly string PUBLIC_MESSAGE; // 0xB0
	public static readonly string PRIVATE_MESSAGE; // 0xB8
	public static readonly string MODERATOR_MESSAGE; // 0xC0
	public static readonly string ADMIN_MESSAGE; // 0xC8
	public static readonly string OBJECT_MESSAGE; // 0xD0
	public static readonly string EXTENSION_RESPONSE; // 0xD8
	public static readonly string ROOM_VARIABLES_UPDATE; // 0xE0
	public static readonly string USER_VARIABLES_UPDATE; // 0xE8
	public static readonly string ROOM_GROUP_SUBSCRIBE; // 0xF0
	public static readonly string ROOM_GROUP_UNSUBSCRIBE; // 0xF8
	public static readonly string ROOM_GROUP_SUBSCRIBE_ERROR; // 0x100
	public static readonly string ROOM_GROUP_UNSUBSCRIBE_ERROR; // 0x108
	public static readonly string SPECTATOR_TO_PLAYER; // 0x110
	public static readonly string PLAYER_TO_SPECTATOR; // 0x118
	public static readonly string SPECTATOR_TO_PLAYER_ERROR; // 0x120
	public static readonly string PLAYER_TO_SPECTATOR_ERROR; // 0x128
	public static readonly string ROOM_NAME_CHANGE; // 0x130
	public static readonly string ROOM_NAME_CHANGE_ERROR; // 0x138
	public static readonly string ROOM_PASSWORD_STATE_CHANGE; // 0x140
	public static readonly string ROOM_PASSWORD_STATE_CHANGE_ERROR; // 0x148
	public static readonly string ROOM_CAPACITY_CHANGE; // 0x150
	public static readonly string ROOM_CAPACITY_CHANGE_ERROR; // 0x158
	public static readonly string ROOM_FIND_RESULT; // 0x160
	public static readonly string USER_FIND_RESULT; // 0x168
	public static readonly string INVITATION; // 0x170
	public static readonly string INVITATION_REPLY; // 0x178
	public static readonly string INVITATION_REPLY_ERROR; // 0x180
	public static readonly string PROXIMITY_LIST_UPDATE; // 0x188
	public static readonly string MMOITEM_VARIABLES_UPDATE; // 0x190
	public static readonly string CRYPTO_INIT; // 0x198

	// Methods
	public void .ctor(string type, Hashtable data); // 0x10052D800
	public void .ctor(string type); // 0x100545B08
	private static void .cctor(); // 0x100545B10
}

// Namespace: Sfs2X.Core
public class SFSIOHandler : IoHandler // TypeDefIndex: 2678
{
	// Fields
	public static readonly int SHORT_BYTE_SIZE; // 0x0
	public static readonly int INT_BYTE_SIZE; // 0x4
	private readonly ByteArray EMPTY_BUFFER; // 0x10
	private BitSwarmClient bitSwarm; // 0x18
	private Logger log; // 0x20
	private PendingPacket pendingPacket; // 0x28
	private IProtocolCodec protocolCodec; // 0x30
	private IPacketEncrypter packetEncrypter; // 0x38
	private int skipBytes; // 0x40
	private FiniteStateMachine fsm; // 0x48

	// Methods
	public void .ctor(ISocketClient bitSwarm); // 0x100545EB4
	private static void .cctor(); // 0x1005464E8
	public IProtocolCodec get_Codec(); // 0x100546540
	private PacketReadState get_ReadState(); // 0x100546548
	private void InitStates(); // 0x100546178
	public void OnDataRead(ByteArray data); // 0x100546AC8
	public void OnDataRead(string jsonData); // 0x100548310
	private ByteArray HandleNewPacket(ByteArray data); // 0x100546D94
	private ByteArray HandleDataSize(ByteArray data); // 0x100546F54
	private ByteArray HandleDataSizeFragment(ByteArray data); // 0x1005474A0
	private ByteArray HandlePacketData(ByteArray data); // 0x1005478F0
	private ByteArray HandleInvalidData(ByteArray data); // 0x100548224
	private ByteArray ResizeByteArray(ByteArray array, int pos, int len); // 0x100548490
	private void WriteBinaryData(PacketHeader header, ByteArray binData, bool udp); // 0x10054855C
	public void OnDataWrite(IMessage message); // 0x100548AD0
	private void WriteTCP(ByteArray writeBuffer); // 0x1005489B0
	private void WriteUDP(ByteArray writeBuffer); // 0x1005488A4
}

// Namespace: Sfs2X.Core
public class SFSProtocolCodec : IProtocolCodec // TypeDefIndex: 2679
{
	// Fields
	private static readonly string CONTROLLER_ID; // 0x0
	private static readonly string ACTION_ID; // 0x8
	private static readonly string PARAM_ID; // 0x10
	private static readonly string USER_ID; // 0x18
	private static readonly string UDP_PACKET_ID; // 0x20
	private IoHandler ioHandler; // 0x10
	private Logger log; // 0x18
	private ISocketClient bitSwarm; // 0x20

	// Methods
	public void .ctor(IoHandler ioHandler, ISocketClient bitSwarm); // 0x10054606C
	private static void .cctor(); // 0x100549428
	public void OnPacketRead(ByteArray packet); // 0x1005494CC
	public void OnPacketRead(ISFSObject packet); // 0x100549F1C
	public void OnPacketWrite(IMessage message); // 0x100549F20
	private ISFSObject PrepareTCPPacket(IMessage message); // 0x10054AA00
	private ISFSObject PrepareUDPPacket(IMessage message); // 0x10054A394
	private void DispatchRequest(ISFSObject requestObject); // 0x1005495B4
}

// Namespace: Sfs2X.Core
public sealed class WriteBinaryDataDelegate : MulticastDelegate // TypeDefIndex: 2680
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1005491FC
	public virtual void Invoke(PacketHeader header, ByteArray binData, bool udp); // 0x10054E8B4
	public virtual IAsyncResult BeginInvoke(PacketHeader header, ByteArray binData, bool udp, AsyncCallback callback, object object); // 0x10054E9D0
	public virtual void EndInvoke(IAsyncResult result); // 0x10054EA9C
}

// Namespace: Sfs2X.Core
public class ThreadManager // TypeDefIndex: 2681
{
	// Fields
	private bool running; // 0x10
	private Thread inThread; // 0x18
	private bool inHasQueuedItems; // 0x20
	private Queue`1<Hashtable> inThreadQueue; // 0x28
	private object inQueueLocker; // 0x30
	private Thread outThread; // 0x38
	private bool outHasQueuedItems; // 0x40
	private Queue`1<Hashtable> outThreadQueue; // 0x48
	private object outQueueLocker; // 0x50

	// Methods
	public void .ctor(); // 0x1005268D4
	private static void Sleep(int ms); // 0x10054E220
	private void InThread(); // 0x10054E28C
	private void OutThread(); // 0x10054E574
	private void ProcessOutItem(Hashtable item); // 0x10054E6A8
	private void ProcessItem(Hashtable item); // 0x10054E3C0
	public void Start(); // 0x10052850C
	public void Stop(); // 0x100527F88
	private void StopThread(); // 0x10054E988
	public void EnqueueDataCall(OnDataDelegate callback, byte[] data); // 0x10054CD0C
	public void EnqueueCustom(ParameterizedThreadStart callback, Hashtable data); // 0x10054BF1C
	public void EnqueueSend(WriteBinaryDataDelegate callback, PacketHeader header, ByteArray data, bool udp); // 0x10054920C
}

// Namespace: Sfs2X.Core.Sockets
public class BaseSocketLayer // TypeDefIndex: 2682
{
	// Fields
	protected Logger log; // 0x10
	protected ISocketClient socketClient; // 0x18
	protected FiniteStateMachine fsm; // 0x20
	protected bool isDisconnecting; // 0x28

	// Methods
	public void .ctor(); // 0x10054AEC0
	protected States get_State(); // 0x10054AEEC
	protected void InitStates(); // 0x10054AF04
}

// Namespace: 
protected sealed class States : Enum // TypeDefIndex: 2683
{
	// Fields
	public int value__; // 0x10
	public const States Disconnected = 0; // 0x0
	public const States Connecting = 1; // 0x0
	public const States Connected = 2; // 0x0

}

// Namespace: 
protected sealed class Transitions : Enum // TypeDefIndex: 2684
{
	// Fields
	public int value__; // 0x10
	public const Transitions StartConnect = 0; // 0x0
	public const Transitions ConnectionSuccess = 1; // 0x0
	public const Transitions ConnectionFailure = 2; // 0x0
	public const Transitions Disconnect = 3; // 0x0

}

// Namespace: Sfs2X.Core.Sockets
public sealed class ConnectionDelegate : MulticastDelegate // TypeDefIndex: 2685
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052775C
	public virtual void Invoke(); // 0x10054B164
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10054B200
	public virtual void EndInvoke(IAsyncResult result); // 0x10054B260
}

// Namespace: Sfs2X.Core.Sockets
public sealed class OnDataDelegate : MulticastDelegate // TypeDefIndex: 2686
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052776C
	public virtual void Invoke(byte[] msg); // 0x10054B26C
	public virtual IAsyncResult BeginInvoke(byte[] msg, AsyncCallback callback, object object); // 0x10054B344
	public virtual void EndInvoke(IAsyncResult result); // 0x10054B394
}

// Namespace: Sfs2X.Core.Sockets
public sealed class OnStringDataDelegate : MulticastDelegate // TypeDefIndex: 2687
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052BC0C
	public virtual void Invoke(string msg); // 0x10054B578
	public virtual IAsyncResult BeginInvoke(string msg, AsyncCallback callback, object object); // 0x10054B648
	public virtual void EndInvoke(IAsyncResult result); // 0x10054B698
}

// Namespace: Sfs2X.Core.Sockets
public sealed class OnErrorDelegate : MulticastDelegate // TypeDefIndex: 2688
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10052777C
	public virtual void Invoke(string error, SocketError se); // 0x10054B3A0
	public virtual IAsyncResult BeginInvoke(string error, SocketError se, AsyncCallback callback, object object); // 0x10054B4A4
	public virtual void EndInvoke(IAsyncResult result); // 0x10054B56C
}

// Namespace: Sfs2X.Core.Sockets
public interface ISocketLayer // TypeDefIndex: 2689
{
	// Methods
	public abstract void Connect(string host, int port); // 0
	public abstract bool get_IsConnected(); // 0
	public abstract void Disconnect(); // 0
	public abstract void Disconnect(string reason); // 0
	public abstract ConnectionDelegate get_OnConnect(); // 0
	public abstract void set_OnConnect(ConnectionDelegate value); // 0
	public abstract ConnectionDelegate get_OnDisconnect(); // 0
	public abstract void set_OnDisconnect(ConnectionDelegate value); // 0
	public abstract void Write(byte[] data); // 0
	public abstract void Write(string data); // 0
	public abstract OnDataDelegate get_OnData(); // 0
	public abstract void set_OnData(OnDataDelegate value); // 0
	public abstract OnStringDataDelegate get_OnStringData(); // 0
	public abstract void set_OnStringData(OnStringDataDelegate value); // 0
	public abstract OnErrorDelegate get_OnError(); // 0
	public abstract void set_OnError(OnErrorDelegate value); // 0
}

// Namespace: Sfs2X.Core.Sockets
public class TCPSocketLayer : BaseSocketLayer, ISocketLayer // TypeDefIndex: 2690
{
	// Fields
	private static readonly int READ_BUFFER_SIZE; // 0x0
	private static int connId; // 0x4
	private int socketPollSleep; // 0x2C
	private Thread thrConnect; // 0x30
	private string host; // 0x38
	private int socketNumber; // 0x40
	private TcpClient connection; // 0x48
	private NetworkStream networkStream; // 0x50
	private Thread thrSocketReader; // 0x58
	private byte[] byteBuffer; // 0x60
	private OnDataDelegate onData; // 0x68
	private OnErrorDelegate onError; // 0x70
	private ConnectionDelegate onConnect; // 0x78
	private ConnectionDelegate onDisconnect; // 0x80

	// Methods
	public void .ctor(BitSwarmClient bs); // 0x10052768C
	private static void .cctor(); // 0x10054B6A4
	private void LogWarn(string msg); // 0x10054B6FC
	private void LogError(string msg); // 0x10054B80C
	private void ConnectThread(); // 0x10054B91C
	private void HandleError(string err); // 0x10054BF14
	private void HandleError(string err, SocketError se); // 0x10054BD78
	private void HandleErrorCallback(object state); // 0x10054C054
	private void HandleDisconnection(); // 0x10054C264
	private void HandleDisconnection(string reason); // 0x10054C26C
	private void WriteSocket(byte[] buf); // 0x10054C328
	private static void Sleep(int ms); // 0x10054C5D0
	private void Read(); // 0x10054C638
	private void HandleBinaryData(byte[] buf, int size); // 0x10054C8B8
	public void Connect(string host, int port); // 0x10054CA04
	public void Disconnect(); // 0x10054CB28
	public void Disconnect(string reason); // 0x10054CB30
	public bool get_IsConnected(); // 0x10054CCD4
	public OnDataDelegate get_OnData(); // 0x10054CCF0
	public void set_OnData(OnDataDelegate value); // 0x10054CCF8
	public OnStringDataDelegate get_OnStringData(); // 0x10054CD00
	public void set_OnStringData(OnStringDataDelegate value); // 0x10054CD08
	private void CallOnData(byte[] data); // 0x10054C954
	public OnErrorDelegate get_OnError(); // 0x10054CEA8
	public void set_OnError(OnErrorDelegate value); // 0x10054CEB0
	private void CallOnError(string msg, SocketError se); // 0x10054C250
	public ConnectionDelegate get_OnConnect(); // 0x10054CEB8
	public void set_OnConnect(ConnectionDelegate value); // 0x10054CEC0
	private void CallOnConnect(); // 0x10054BD64
	public ConnectionDelegate get_OnDisconnect(); // 0x10054CEC8
	public void set_OnDisconnect(ConnectionDelegate value); // 0x10054CED0
	private void CallOnDisconnect(); // 0x10054C314
	public void Write(byte[] data); // 0x10054CED8
	public void Write(string data); // 0x10054CEDC
}

// Namespace: Sfs2X.Entities
public interface Buddy // TypeDefIndex: 2691
{
	// Methods
	public abstract int get_Id(); // 0
	public abstract void set_Id(int value); // 0
	public abstract string get_Name(); // 0
	public abstract bool get_IsBlocked(); // 0
	public abstract void set_IsBlocked(bool value); // 0
	public abstract bool get_IsTemp(); // 0
	public abstract void SetVariable(BuddyVariable bVar); // 0
	public abstract void SetVariables(ICollection`1<BuddyVariable> variables); // 0
	public abstract void ClearVolatileVariables(); // 0
}

// Namespace: Sfs2X.Entities
public interface IMMOItem // TypeDefIndex: 2692
{
	// Methods
	public abstract int get_Id(); // 0
	public abstract void SetVariable(IMMOItemVariable variable); // 0
}

// Namespace: Sfs2X.Entities
public class MMOItem : IMMOItem // TypeDefIndex: 2693
{
	// Fields
	private int id; // 0x10
	private Vec3D aoiEntryPoint; // 0x18
	private Dictionary`2<string, IMMOItemVariable> variables; // 0x20

	// Methods
	public void .ctor(int id); // 0x1005591F8
	public static IMMOItem FromSFSArray(ISFSArray encodedItem); // 0x100541FC8
	public int get_Id(); // 0x10055927C
	public void set_AOIEntryPoint(Vec3D value); // 0x100542410
	public void SetVariable(IMMOItemVariable variable); // 0x100559284
}

// Namespace: Sfs2X.Entities
public class MMORoom : SFSRoom // TypeDefIndex: 2694
{
	// Fields
	private Vec3D defaultAOI; // 0x60
	private Vec3D lowerMapLimit; // 0x68
	private Vec3D higherMapLimit; // 0x70
	private Dictionary`2<int, IMMOItem> itemsById; // 0x78

	// Methods
	public void .ctor(int id, string name, string groupId); // 0x10055943C
	public void set_DefaultAOI(Vec3D value); // 0x100559524
	public void set_LowerMapLimit(Vec3D value); // 0x10055952C
	public void set_HigherMapLimit(Vec3D value); // 0x100559534
	public IMMOItem GetMMOItem(int id); // 0x100541EF8
	public void AddMMOItem(IMMOItem item); // 0x100542300
	public void RemoveItem(int id); // 0x100541F60
}

// Namespace: Sfs2X.Entities
public interface Room // TypeDefIndex: 2695
{
	// Methods
	public abstract int get_Id(); // 0
	public abstract string get_Name(); // 0
	public abstract void set_Name(string value); // 0
	public abstract string get_GroupId(); // 0
	public abstract bool get_IsJoined(); // 0
	public abstract void set_IsJoined(bool value); // 0
	public abstract bool get_IsGame(); // 0
	public abstract void set_IsGame(bool value); // 0
	public abstract void set_IsHidden(bool value); // 0
	public abstract void set_IsPasswordProtected(bool value); // 0
	public abstract bool get_IsManaged(); // 0
	public abstract void set_IsManaged(bool value); // 0
	public abstract void set_UserCount(int value); // 0
	public abstract void set_MaxUsers(int value); // 0
	public abstract void set_SpectatorCount(int value); // 0
	public abstract void set_MaxSpectators(int value); // 0
	public abstract int get_Capacity(); // 0
	public abstract void AddUser(User user); // 0
	public abstract void RemoveUser(User user); // 0
	public abstract bool ContainsUser(User user); // 0
	public abstract User GetUserById(int id); // 0
	public abstract List`1<User> get_UserList(); // 0
	public abstract List`1<RoomVariable> GetVariables(); // 0
	public abstract void SetVariable(RoomVariable roomVariable); // 0
	public abstract void SetVariables(ICollection`1<RoomVariable> roomVariables); // 0
	public abstract IRoomManager get_RoomManager(); // 0
	public abstract void set_RoomManager(IRoomManager value); // 0
	public abstract void Merge(Room anotherRoom); // 0
}

// Namespace: Sfs2X.Entities
public class SFSBuddy : Buddy // TypeDefIndex: 2696
{
	// Fields
	protected string name; // 0x10
	protected int id; // 0x18
	protected bool isBlocked; // 0x1C
	protected Dictionary`2<string, BuddyVariable> variables; // 0x20
	protected bool isTemp; // 0x28

	// Methods
	public void .ctor(int id, string name, bool isBlocked, bool isTemp); // 0x10055953C
	public static Buddy FromSFSArray(ISFSArray arr); // 0x10053B2EC
	public int get_Id(); // 0x100559600
	public void set_Id(int value); // 0x100559608
	public bool get_IsBlocked(); // 0x100559610
	public void set_IsBlocked(bool value); // 0x100559618
	public bool get_IsTemp(); // 0x100559620
	public string get_Name(); // 0x100559628
	public void SetVariable(BuddyVariable bVar); // 0x100559630
	public void SetVariables(ICollection`1<BuddyVariable> variables); // 0x100559740
	public void RemoveVariable(string varName); // 0x100559A70
	public void ClearVolatileVariables(); // 0x100559AD8
	public override string ToString(); // 0x100559EF4
}

// Namespace: Sfs2X.Entities
public class SFSRoom : Room // TypeDefIndex: 2697
{
	// Fields
	protected int id; // 0x10
	protected string name; // 0x18
	protected string groupId; // 0x20
	protected bool isGame; // 0x28
	protected bool isHidden; // 0x29
	protected bool isJoined; // 0x2A
	protected bool isPasswordProtected; // 0x2B
	protected bool isManaged; // 0x2C
	protected Dictionary`2<string, RoomVariable> variables; // 0x30
	protected Hashtable properties; // 0x38
	protected IUserManager userManager; // 0x40
	protected int maxUsers; // 0x48
	protected int maxSpectators; // 0x4C
	protected int userCount; // 0x50
	protected int specCount; // 0x54
	protected IRoomManager roomManager; // 0x58

	// Methods
	public void .ctor(int id, string name, string groupId); // 0x1005594DC
	public static Room FromSFSArray(ISFSArray sfsa); // 0x10052FFC0
	private void Init(int id, string name, string groupId); // 0x10055A108
	public int get_Id(); // 0x10055A1E8
	public string get_Name(); // 0x10055A1F0
	public void set_Name(string value); // 0x10055A1F8
	public string get_GroupId(); // 0x10055A200
	public bool get_IsGame(); // 0x10055A208
	public void set_IsGame(bool value); // 0x10055A210
	public void set_IsHidden(bool value); // 0x10055A218
	public bool get_IsJoined(); // 0x10055A220
	public void set_IsJoined(bool value); // 0x10055A228
	public void set_IsPasswordProtected(bool value); // 0x10055A230
	public bool get_IsManaged(); // 0x10055A238
	public void set_IsManaged(bool value); // 0x10055A240
	public void set_MaxSpectators(int value); // 0x10055A248
	public List`1<RoomVariable> GetVariables(); // 0x10055A250
	public void set_UserCount(int value); // 0x10055A2DC
	public void set_MaxUsers(int value); // 0x10055A2E4
	public int get_Capacity(); // 0x10055A2EC
	public void set_SpectatorCount(int value); // 0x10055A2F8
	public User GetUserById(int id); // 0x10055A300
	public List`1<User> get_UserList(); // 0x10055A404
	public void RemoveUser(User user); // 0x10055A4F8
	public void SetVariable(RoomVariable roomVariable); // 0x10055A5FC
	public void SetVariables(ICollection`1<RoomVariable> roomVariables); // 0x10055A7B4
	public void AddUser(User user); // 0x10055AAE4
	public bool ContainsUser(User user); // 0x10055ABE8
	public IRoomManager get_RoomManager(); // 0x10055ACE8
	public void set_RoomManager(IRoomManager value); // 0x10055ACF0
	public override string ToString(); // 0x10055ADAC
	public void Merge(Room anotherRoom); // 0x10055B044
}

// Namespace: Sfs2X.Entities
public class SFSUser : User // TypeDefIndex: 2698
{
	// Fields
	protected int id; // 0x10
	protected int privilegeId; // 0x14
	protected string name; // 0x18
	protected bool isItMe; // 0x20
	protected Dictionary`2<string, UserVariable> variables; // 0x28
	protected Dictionary`2<string, object> properties; // 0x30
	protected bool isModerator; // 0x38
	protected Dictionary`2<int, int> playerIdByRoomId; // 0x40
	protected IUserManager userManager; // 0x48
	protected Vec3D aoiEntryPoint; // 0x50

	// Methods
	public void .ctor(int id, string name); // 0x10055B56C
	public void .ctor(int id, string name, bool isItMe); // 0x10052F8AC
	public static User FromSFSArray(ISFSArray sfsa, Room room); // 0x100538600
	public static User FromSFSArray(ISFSArray sfsa); // 0x10053F5DC
	private void Init(int id, string name, bool isItMe); // 0x10055B5B8
	public int get_Id(); // 0x10055B69C
	public string get_Name(); // 0x10055B6A4
	public bool IsJoinedInRoom(Room room); // 0x10055B6AC
	public void set_PrivilegeId(int value); // 0x10055B7AC
	public void SetPlayerId(int id, Room room); // 0x10055B7B4
	public bool get_IsItMe(); // 0x10055B8D0
	public void set_UserManager(IUserManager value); // 0x10055B8D8
	public void SetVariable(UserVariable userVariable); // 0x10055B994
	public void set_AOIEntryPoint(Vec3D value); // 0x100541EF0
	public override string ToString(); // 0x10055BB4C
}

// Namespace: Sfs2X.Entities
public interface User // TypeDefIndex: 2699
{
	// Methods
	public abstract int get_Id(); // 0
	public abstract string get_Name(); // 0
	public abstract void SetPlayerId(int id, Room room); // 0
	public abstract void set_PrivilegeId(int value); // 0
	public abstract void set_UserManager(IUserManager value); // 0
	public abstract bool IsJoinedInRoom(Room room); // 0
	public abstract bool get_IsItMe(); // 0
	public abstract void SetVariable(UserVariable userVariable); // 0
}

// Namespace: Sfs2X.Entities.Data
public interface ISFSArray : ICollection, IEnumerable // TypeDefIndex: 2700
{
	// Methods
	public abstract object GetElementAt(int index); // 0
	public abstract SFSDataWrapper GetWrappedElementAt(int index); // 0
	public abstract object RemoveElementAt(int index); // 0
	public abstract int Size(); // 0
	public abstract void AddNull(); // 0
	public abstract void AddBool(bool val); // 0
	public abstract void AddByte(byte val); // 0
	public abstract void AddInt(int val); // 0
	public abstract void AddDouble(double val); // 0
	public abstract void AddUtfString(string val); // 0
	public abstract void AddSFSArray(ISFSArray val); // 0
	public abstract void AddSFSObject(ISFSObject val); // 0
	public abstract void Add(SFSDataWrapper val); // 0
	public abstract bool IsNull(int index); // 0
	public abstract bool GetBool(int index); // 0
	public abstract byte GetByte(int index); // 0
	public abstract short GetShort(int index); // 0
	public abstract int GetInt(int index); // 0
	public abstract string GetUtfString(int index); // 0
	public abstract ISFSArray GetSFSArray(int index); // 0
	public abstract ISFSObject GetSFSObject(int index); // 0
}

// Namespace: Sfs2X.Entities.Data
public interface ISFSObject // TypeDefIndex: 2701
{
	// Methods
	public abstract bool IsNull(string key); // 0
	public abstract bool ContainsKey(string key); // 0
	public abstract string[] GetKeys(); // 0
	public abstract int Size(); // 0
	public abstract ByteArray ToBinary(); // 0
	public abstract string ToJson(); // 0
	public abstract string GetDump(); // 0
	public abstract string GetHexDump(); // 0
	public abstract SFSDataWrapper GetData(string key); // 0
	public abstract bool GetBool(string key); // 0
	public abstract byte GetByte(string key); // 0
	public abstract short GetShort(string key); // 0
	public abstract int GetInt(string key); // 0
	public abstract long GetLong(string key); // 0
	public abstract float GetFloat(string key); // 0
	public abstract double GetDouble(string key); // 0
	public abstract string GetUtfString(string key); // 0
	public abstract ByteArray GetByteArray(string key); // 0
	public abstract int[] GetIntArray(string key); // 0
	public abstract string[] GetUtfStringArray(string key); // 0
	public abstract ISFSArray GetSFSArray(string key); // 0
	public abstract ISFSObject GetSFSObject(string key); // 0
	public abstract void PutBool(string key, bool val); // 0
	public abstract void PutByte(string key, byte val); // 0
	public abstract void PutShort(string key, short val); // 0
	public abstract void PutInt(string key, int val); // 0
	public abstract void PutLong(string key, long val); // 0
	public abstract void PutFloat(string key, float val); // 0
	public abstract void PutDouble(string key, double val); // 0
	public abstract void PutUtfString(string key, string val); // 0
	public abstract void PutBoolArray(string key, bool[] val); // 0
	public abstract void PutIntArray(string key, int[] val); // 0
	public abstract void PutFloatArray(string key, float[] val); // 0
	public abstract void PutSFSArray(string key, ISFSArray val); // 0
	public abstract void PutSFSObject(string key, ISFSObject val); // 0
	public abstract void Put(string key, SFSDataWrapper val); // 0
}

// Namespace: Sfs2X.Entities.Data
public class SFSArray : ISFSArray, ICollection, IEnumerable // TypeDefIndex: 2702
{
	// Fields
	private ISFSDataSerializer serializer; // 0x10
	private List`1<SFSDataWrapper> dataHolder; // 0x18

	// Methods
	public void .ctor(); // 0x1005503A0
	private void System.Collections.ICollection.CopyTo(Array toArray, int index); // 0x100550444
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100550578
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10055061C
	private object System.Collections.ICollection.get_SyncRoot(); // 0x100550624
	private int System.Collections.ICollection.get_Count(); // 0x100550628
	public static SFSArray NewInstance(); // 0x100550680
	public SFSDataWrapper GetWrappedElementAt(int index); // 0x1005506D8
	public object GetElementAt(int index); // 0x100550740
	public object RemoveElementAt(int index); // 0x1005507D4
	public int Size(); // 0x100550890
	public string GetDump(bool format); // 0x1005508E8
	private string Dump(); // 0x100550984
	public void AddNull(); // 0x100550F44
	public void AddBool(bool val); // 0x100550FCC
	public void AddByte(byte val); // 0x100551048
	public void AddInt(int val); // 0x1005510C4
	public void AddDouble(double val); // 0x100551140
	public void AddUtfString(string val); // 0x1005511BC
	public void AddSFSArray(ISFSArray val); // 0x1005511C4
	public void AddSFSObject(ISFSObject val); // 0x1005511CC
	public void Add(SFSDataWrapper wrappedObject); // 0x1005511D4
	private void AddObject(object val, SFSDataType tp); // 0x100550F50
	public bool IsNull(int index); // 0x100551278
	public T GetValue(int index); // 0
	public virtual bool GetBool(int index); // 0x10055131C
	public virtual byte GetByte(int index); // 0x10055137C
	public virtual short GetShort(int index); // 0x1005513DC
	public virtual int GetInt(int index); // 0x10055143C
	public string GetUtfString(int index); // 0x10055149C
	public virtual ISFSArray GetSFSArray(int index); // 0x1005514FC
	public virtual ISFSObject GetSFSObject(int index); // 0x10055155C
}

// Namespace: Sfs2X.Entities.Data
public class SFSArrayEnumerator : IEnumerator // TypeDefIndex: 2703
{
	// Fields
	private List`1<SFSDataWrapper> data; // 0x10
	private int cursorIndex; // 0x18

	// Methods
	public void .ctor(List`1<SFSDataWrapper> data); // 0x1005505E8
	private void System.Collections.IEnumerator.Reset(); // 0x1005515BC
	private bool System.Collections.IEnumerator.MoveNext(); // 0x1005515C8
	private object System.Collections.IEnumerator.get_Current(); // 0x100551660
}

// Namespace: Sfs2X.Entities.Data
public class SFSArrayLite : SFSArray // TypeDefIndex: 2704
{
	// Methods
	public void .ctor(); // 0x100551718
	public static ISFSArray NewInstance(); // 0x10055171C
	public override byte GetByte(int index); // 0x100551774
	public override short GetShort(int index); // 0x100551804
}

// Namespace: Sfs2X.Entities.Data
public sealed class SFSDataType : Enum // TypeDefIndex: 2705
{
	// Fields
	public int value__; // 0x10
	public const SFSDataType NULL = 0; // 0x0
	public const SFSDataType BOOL = 1; // 0x0
	public const SFSDataType BYTE = 2; // 0x0
	public const SFSDataType SHORT = 3; // 0x0
	public const SFSDataType INT = 4; // 0x0
	public const SFSDataType LONG = 5; // 0x0
	public const SFSDataType FLOAT = 6; // 0x0
	public const SFSDataType DOUBLE = 7; // 0x0
	public const SFSDataType UTF_STRING = 8; // 0x0
	public const SFSDataType BOOL_ARRAY = 9; // 0x0
	public const SFSDataType BYTE_ARRAY = 10; // 0x0
	public const SFSDataType SHORT_ARRAY = 11; // 0x0
	public const SFSDataType INT_ARRAY = 12; // 0x0
	public const SFSDataType LONG_ARRAY = 13; // 0x0
	public const SFSDataType FLOAT_ARRAY = 14; // 0x0
	public const SFSDataType DOUBLE_ARRAY = 15; // 0x0
	public const SFSDataType UTF_STRING_ARRAY = 16; // 0x0
	public const SFSDataType SFS_ARRAY = 17; // 0x0
	public const SFSDataType SFS_OBJECT = 18; // 0x0
	public const SFSDataType CLASS = 19; // 0x0

}

// Namespace: Sfs2X.Entities.Data
public class SFSDataWrapper // TypeDefIndex: 2706
{
	// Fields
	private int type; // 0x10
	private object data; // 0x18

	// Methods
	public void .ctor(int type, object data); // 0x10055123C
	public void .ctor(SFSDataType tp, object data); // 0x10055188C
	public int get_Type(); // 0x100550EA0
	public object get_Data(); // 0x1005507CC
}

// Namespace: Sfs2X.Entities.Data
public class SFSObject : ISFSObject // TypeDefIndex: 2707
{
	// Fields
	private Dictionary`2<string, SFSDataWrapper> dataHolder; // 0x10
	private ISFSDataSerializer serializer; // 0x18

	// Methods
	public void .ctor(); // 0x10054AE1C
	public static SFSObject NewFromBinaryData(ByteArray ba); // 0x1005494F4
	public static ISFSObject NewFromJsonData(string js); // 0x10054F5A0
	public static SFSObject NewInstance(); // 0x1005518C8
	private string Dump(); // 0x100551920
	public SFSDataWrapper GetData(string key); // 0x100551F9C
	public T GetValue(string key); // 0
	public virtual bool GetBool(string key); // 0x100552004
	public virtual byte GetByte(string key); // 0x100552064
	public virtual short GetShort(string key); // 0x1005520C4
	public virtual int GetInt(string key); // 0x100552124
	public virtual long GetLong(string key); // 0x100552184
	public virtual float GetFloat(string key); // 0x1005521E4
	public virtual double GetDouble(string key); // 0x100552244
	public virtual string GetUtfString(string key); // 0x1005522A4
	private ICollection GetArray(string key); // 0x100552304
	public virtual ByteArray GetByteArray(string key); // 0x100552364
	public virtual int[] GetIntArray(string key); // 0x1005523C4
	public virtual string[] GetUtfStringArray(string key); // 0x1005524A8
	public virtual ISFSArray GetSFSArray(string key); // 0x10055258C
	public virtual ISFSObject GetSFSObject(string key); // 0x1005525EC
	public void PutBool(string key, bool val); // 0x10055264C
	public void PutByte(string key, byte val); // 0x100552710
	public void PutShort(string key, short val); // 0x1005527D4
	public void PutInt(string key, int val); // 0x100552898
	public void PutLong(string key, long val); // 0x10055295C
	public void PutFloat(string key, float val); // 0x100552A20
	public void PutDouble(string key, double val); // 0x100552AEC
	public void PutUtfString(string key, string val); // 0x100552BB8
	public void PutBoolArray(string key, bool[] val); // 0x100552C54
	public void PutIntArray(string key, int[] val); // 0x100552CF0
	public void PutFloatArray(string key, float[] val); // 0x100552D8C
	public void PutSFSArray(string key, ISFSArray val); // 0x100552E28
	public void PutSFSObject(string key, ISFSObject val); // 0x100552EC4
	public void Put(string key, SFSDataWrapper val); // 0x100552F60
	public bool ContainsKey(string key); // 0x100552FD0
	public string GetDump(bool format); // 0x100550EA8
	public string GetDump(); // 0x100553038
	public string GetHexDump(); // 0x100553040
	public string[] GetKeys(); // 0x1005531B4
	public bool IsNull(string key); // 0x100553284
	public int Size(); // 0x100551F44
	public ByteArray ToBinary(); // 0x1005530B8
	public string ToJson(); // 0x1005532D4
	private Dictionary`2<string, object> flatten(); // 0x1005533E0
}

// Namespace: Sfs2X.Entities.Data
public class SFSObjectLite : SFSObject // TypeDefIndex: 2708
{
	// Methods
	public void .ctor(); // 0x10055348C
	public static ISFSObject NewInstance(); // 0x100553490
	public override byte GetByte(string key); // 0x1005534E8
	public override short GetShort(string key); // 0x100553578
	public override long GetLong(string key); // 0x100553600
	public override float GetFloat(string key); // 0x1005536D0
	public override ByteArray GetByteArray(string key); // 0x100553760
	public override int[] GetIntArray(string key); // 0x1005537C0
	public override string[] GetUtfStringArray(string key); // 0x100553A3C
}

// Namespace: Sfs2X.Entities.Data
public class Vec3D // TypeDefIndex: 2709
{
	// Fields
	private float fx; // 0x10
	private float fy; // 0x14
	private float fz; // 0x18
	private int ix; // 0x1C
	private int iy; // 0x20
	private int iz; // 0x24
	private bool useFloat; // 0x28

	// Methods
	public void .ctor(int px, int py, int pz); // 0x100553C90
	public void .ctor(float px, float py, float pz); // 0x100553CD4
	public static Vec3D fromArray(object array); // 0x100541B04
	private static Vec3D fromIntArray(int[] array); // 0x100553D28
	private static Vec3D fromFloatArray(float[] array); // 0x100553DE8
	public bool IsFloat(); // 0x100553EAC
	public int[] ToIntArray(); // 0x100553EB4
	public float[] ToFloatArray(); // 0x100553F7C
	public override string ToString(); // 0x100554044
}

// Namespace: Sfs2X.Entities.Invitation
public interface Invitation // TypeDefIndex: 2710
{
	// Methods
	public abstract void set_Id(int value); // 0
}

// Namespace: Sfs2X.Entities.Invitation
public class SFSInvitation : Invitation // TypeDefIndex: 2711
{
	// Fields
	protected int id; // 0x10
	protected User inviter; // 0x18
	protected User invitee; // 0x20
	protected int secondsForAnswer; // 0x28
	protected ISFSObject parameters; // 0x30

	// Methods
	public void .ctor(User inviter, User invitee, int secondsForAnswer, ISFSObject parameters); // 0x10053FCA8
	private void Init(User inviter, User invitee, int secondsForAnswer, ISFSObject parameters); // 0x100554170
	public void set_Id(int value); // 0x100554180
}

// Namespace: Sfs2X.Entities.Managers
public interface IBuddyManager // TypeDefIndex: 2712
{
	// Methods
	public abstract bool get_Inited(); // 0
	public abstract void set_Inited(bool value); // 0
	public abstract void AddBuddy(Buddy buddy); // 0
	public abstract Buddy RemoveBuddyByName(string name); // 0
	public abstract bool ContainsBuddy(string name); // 0
	public abstract Buddy GetBuddyById(int id); // 0
	public abstract Buddy GetBuddyByName(string name); // 0
	public abstract List`1<Buddy> get_BuddyList(); // 0
	public abstract void set_BuddyStates(List`1<string> value); // 0
	public abstract List`1<BuddyVariable> get_MyVariables(); // 0
	public abstract void set_MyVariables(List`1<BuddyVariable> value); // 0
	public abstract bool get_MyOnlineState(); // 0
	public abstract void set_MyOnlineState(bool value); // 0
	public abstract void ClearAll(); // 0
}

// Namespace: Sfs2X.Entities.Managers
public interface IRoomManager // TypeDefIndex: 2713
{
	// Methods
	public abstract void AddRoom(Room room); // 0
	public abstract Room ReplaceRoom(Room room, bool addToGroupIfMissing); // 0
	public abstract Room ReplaceRoom(Room room); // 0
	public abstract void RemoveGroup(string groupId); // 0
	public abstract bool ContainsGroup(string groupId); // 0
	public abstract void ChangeRoomName(Room room, string newName); // 0
	public abstract void ChangeRoomPasswordState(Room room, bool isPassProtected); // 0
	public abstract void ChangeRoomCapacity(Room room, int maxUsers, int maxSpect); // 0
	public abstract Room GetRoomById(int id); // 0
	public abstract List`1<Room> GetRoomListFromGroup(string groupId); // 0
	public abstract List`1<Room> GetJoinedRooms(); // 0
	public abstract List`1<Room> GetUserRooms(User user); // 0
	public abstract void RemoveRoom(Room room); // 0
	public abstract void RemoveUser(User user); // 0
	public abstract SmartFox get_SmartFoxClient(); // 0
}

// Namespace: Sfs2X.Entities.Managers
public interface IUserManager // TypeDefIndex: 2714
{
	// Methods
	public abstract bool ContainsUser(User user); // 0
	public abstract User GetUserById(int userId); // 0
	public abstract void AddUser(User user); // 0
	public abstract void RemoveUser(User user); // 0
	public abstract List`1<User> GetUserList(); // 0
	public abstract void ClearAll(); // 0
}

// Namespace: Sfs2X.Entities.Managers
public class SFSBuddyManager : IBuddyManager // TypeDefIndex: 2715
{
	// Fields
	protected Dictionary`2<string, Buddy> buddiesByName; // 0x10
	protected Dictionary`2<string, BuddyVariable> myVariables; // 0x18
	protected bool inited; // 0x20
	private List`1<string> buddyStates; // 0x28

	// Methods
	public void .ctor(SmartFox sfs); // 0x100554188
	public bool get_Inited(); // 0x100554228
	public void set_Inited(bool value); // 0x100554230
	public void AddBuddy(Buddy buddy); // 0x100554238
	public void ClearAll(); // 0x1005543D8
	public Buddy RemoveBuddyByName(string name); // 0x10055449C
	public Buddy GetBuddyById(int id); // 0x100554660
	public bool ContainsBuddy(string name); // 0x100554910
	public Buddy GetBuddyByName(string name); // 0x10055457C
	public List`1<Buddy> get_BuddyList(); // 0x1005549E8
	public BuddyVariable GetMyVariable(string varName); // 0x100554AE8
	public List`1<BuddyVariable> get_MyVariables(); // 0x100554BCC
	public void set_MyVariables(List`1<BuddyVariable> value); // 0x100554CCC
	public bool get_MyOnlineState(); // 0x100554F78
	public void set_MyOnlineState(bool value); // 0x1005550C0
	public void set_BuddyStates(List`1<string> value); // 0x100555194
	public void SetMyVariable(BuddyVariable bVar); // 0x100554DDC
}

// Namespace: Sfs2X.Entities.Managers
public class SFSGlobalUserManager : SFSUserManager, IUserManager // TypeDefIndex: 2716
{
	// Fields
	private Dictionary`2<User, int> roomRefCount; // 0x30

	// Methods
	public void .ctor(SmartFox sfs); // 0x10055519C
	public override void AddUser(User user); // 0x1005552C8
	public override void RemoveUser(User user); // 0x100555580
	public void RemoveUserReference(User user, bool disconnected); // 0x1005330E8
}

// Namespace: Sfs2X.Entities.Managers
public class SFSRoomManager : IRoomManager // TypeDefIndex: 2717
{
	// Fields
	private List`1<string> groups; // 0x10
	private Dictionary`2<int, Room> roomsById; // 0x18
	private Dictionary`2<string, Room> roomsByName; // 0x20
	protected SmartFox smartFox; // 0x28

	// Methods
	public void .ctor(SmartFox sfs); // 0x100555B4C
	public SmartFox get_SmartFoxClient(); // 0x100555C20
	public void AddRoom(Room room); // 0x100555C28
	public void AddRoom(Room room, bool addGroupIfMissing); // 0x100555C30
	public Room ReplaceRoom(Room room); // 0x100556280
	public Room ReplaceRoom(Room room, bool addToGroupIfMissing); // 0x100556288
	public void ChangeRoomName(Room room, string newName); // 0x10055650C
	public void ChangeRoomPasswordState(Room room, bool isPassProtected); // 0x100556744
	public void ChangeRoomCapacity(Room room, int maxUsers, int maxSpect); // 0x100556844
	public void AddGroup(string groupId); // 0x1005561A4
	public void RemoveGroup(string groupId); // 0x1005569C8
	public bool ContainsGroup(string groupId); // 0x1005560CC
	public Room GetRoomById(int id); // 0x100556428
	public List`1<Room> GetRoomListFromGroup(string groupId); // 0x100556CEC
	public void RemoveRoom(Room room); // 0x100557020
	public List`1<Room> GetJoinedRooms(); // 0x1005572F0
	public List`1<Room> GetUserRooms(User user); // 0x1005575C4
	public void RemoveUser(User user); // 0x1005578A0
	private void RemoveRoom(int id, string name); // 0x100557198
}

// Namespace: Sfs2X.Entities.Managers
public class SFSUserManager : IUserManager // TypeDefIndex: 2718
{
	// Fields
	private Dictionary`2<string, User> usersByName; // 0x10
	private Dictionary`2<int, User> usersById; // 0x18
	protected Room room; // 0x20
	protected SmartFox sfs; // 0x28

	// Methods
	public void .ctor(SmartFox sfs); // 0x10055521C
	public void .ctor(Room room); // 0x100557BC4
	protected void LogWarn(string msg); // 0x100555588
	public bool ContainsUserId(int userId); // 0x100557C70
	public bool ContainsUser(User user); // 0x100557D48
	public User GetUserById(int userId); // 0x100557E20
	public virtual void AddUser(User user); // 0x100555434
	protected void AddUserInternal(User user); // 0x100557F04
	public virtual void RemoveUser(User user); // 0x100555894
	public List`1<User> GetUserList(); // 0x1005581CC
	public void ClearAll(); // 0x1005582CC
}

// Namespace: Sfs2X.Entities.Match
public interface IMatcher // TypeDefIndex: 2719
{
	// Methods
	public abstract string get_Symbol(); // 0
	public abstract int get_Type(); // 0
}

// Namespace: Sfs2X.Entities.Match
public class LogicOperator // TypeDefIndex: 2720
{
	// Fields
	public static readonly LogicOperator AND; // 0x0
	public static readonly LogicOperator OR; // 0x8
	private string id; // 0x10

	// Methods
	public void .ctor(string id); // 0x10055835C
	private static void .cctor(); // 0x100558388
	public string get_Id(); // 0x100558434
}

// Namespace: Sfs2X.Entities.Match
public class MatchExpression // TypeDefIndex: 2721
{
	// Fields
	private string varName; // 0x10
	private IMatcher condition; // 0x18
	private object varValue; // 0x20
	internal LogicOperator logicOp; // 0x28
	internal MatchExpression parent; // 0x30
	internal MatchExpression next; // 0x38

	// Methods
	public bool HasNext(); // 0x10055843C
	public MatchExpression Next(); // 0x10055844C
	public MatchExpression Rewind(); // 0x100558454
	public string AsString(); // 0x100558478
	public override string ToString(); // 0x10055884C
	public ISFSArray ToSFSArray(); // 0x100558930
	private ISFSArray ExpressionAsSFSArray(); // 0x100558AB4
}

// Namespace: Sfs2X.Entities.Variables
public interface BuddyVariable : UserVariable // TypeDefIndex: 2722
{
}

// Namespace: Sfs2X.Entities.Variables
public interface IMMOItemVariable : UserVariable // TypeDefIndex: 2723
{
}

// Namespace: Sfs2X.Entities.Variables
public class MMOItemVariable : SFSUserVariable, IMMOItemVariable, UserVariable // TypeDefIndex: 2724
{
	// Methods
	public void .ctor(string name, object val, int type); // 0x10055BE00
	public static IMMOItemVariable FromSFSArray(ISFSArray sfsa); // 0x100542B00
}

// Namespace: Sfs2X.Entities.Variables
public class ReservedBuddyVariables // TypeDefIndex: 2725
{
	// Fields
	public static readonly string BV_ONLINE; // 0x0
	public static readonly string BV_STATE; // 0x8
	public static readonly string BV_NICKNAME; // 0x10

	// Methods
	private static void .cctor(); // 0x10055BE64
}

// Namespace: Sfs2X.Entities.Variables
public interface RoomVariable : UserVariable // TypeDefIndex: 2726
{
	// Methods
	public abstract void set_IsPrivate(bool value); // 0
	public abstract void set_IsPersistent(bool value); // 0
}

// Namespace: Sfs2X.Entities.Variables
public class SFSBuddyVariable : BuddyVariable, UserVariable // TypeDefIndex: 2727
{
	// Fields
	public static readonly string OFFLINE_PREFIX; // 0x0
	protected string name; // 0x10
	protected VariableType type; // 0x18
	protected object val; // 0x20

	// Methods
	public void .ctor(string name, object val, int type); // 0x10055BEE8
	public void .ctor(string name, object val); // 0x10053DDCC
	private static void .cctor(); // 0x10055C16C
	public static BuddyVariable FromSFSArray(ISFSArray sfsa); // 0x10053B854
	public string get_Name(); // 0x10055C1C8
	public bool GetBoolValue(); // 0x10055C1D0
	public int GetIntValue(); // 0x10055C228
	public double GetDoubleValue(); // 0x10055C280
	public string GetStringValue(); // 0x10055C2D8
	public ISFSObject GetSFSObjectValue(); // 0x10055C340
	public ISFSArray GetSFSArrayValue(); // 0x10055C390
	public bool IsNull(); // 0x10055C3E0
	public virtual ISFSArray ToSFSArray(); // 0x10055C3F0
	public override string ToString(); // 0x10055CA38
	private void PopulateArrayWithValue(ISFSArray arr); // 0x10055C580
	private void SetValue(object val); // 0x10055BF48
}

// Namespace: Sfs2X.Entities.Variables
public class SFSRoomVariable : SFSUserVariable, RoomVariable, UserVariable // TypeDefIndex: 2728
{
	// Fields
	private bool isPersistent; // 0x28
	private bool isPrivate; // 0x29

	// Methods
	public void .ctor(string name, object val, int type); // 0x10055CCD0
	public static RoomVariable FromSFSArray(ISFSArray sfsa); // 0x100534BEC
	public void set_IsPrivate(bool value); // 0x10055CCD4
	public void set_IsPersistent(bool value); // 0x10055CCDC
	public override string ToString(); // 0x10055CCE4
	public override ISFSArray ToSFSArray(); // 0x10055D01C
}

// Namespace: Sfs2X.Entities.Variables
public class SFSUserVariable : UserVariable // TypeDefIndex: 2729
{
	// Fields
	protected string name; // 0x10
	protected VariableType type; // 0x18
	protected object val; // 0x20

	// Methods
	public void .ctor(string name, object val, int type); // 0x10055BE04
	public static UserVariable FromSFSArray(ISFSArray sfsa); // 0x100535734
	public string get_Name(); // 0x10055D560
	public bool GetBoolValue(); // 0x10055D568
	public int GetIntValue(); // 0x10055D5C0
	public double GetDoubleValue(); // 0x10055D618
	public string GetStringValue(); // 0x10055D670
	public ISFSObject GetSFSObjectValue(); // 0x10055D6D8
	public ISFSArray GetSFSArrayValue(); // 0x10055D728
	public bool IsNull(); // 0x10055D778
	public virtual ISFSArray ToSFSArray(); // 0x10055D1AC
	public override string ToString(); // 0x10055DC40
	private void PopulateArrayWithValue(ISFSArray arr); // 0x10055D788
	private void SetValue(object val); // 0x10055D33C
}

// Namespace: Sfs2X.Entities.Variables
public interface UserVariable // TypeDefIndex: 2730
{
	// Methods
	public abstract string get_Name(); // 0
	public abstract bool GetBoolValue(); // 0
	public abstract bool IsNull(); // 0
	public abstract ISFSArray ToSFSArray(); // 0
}

// Namespace: Sfs2X.Entities.Variables
public sealed class VariableType : Enum // TypeDefIndex: 2731
{
	// Fields
	public int value__; // 0x10
	public const VariableType NULL = 0; // 0x0
	public const VariableType BOOL = 1; // 0x0
	public const VariableType INT = 2; // 0x0
	public const VariableType DOUBLE = 3; // 0x0
	public const VariableType STRING = 4; // 0x0
	public const VariableType OBJECT = 5; // 0x0
	public const VariableType ARRAY = 6; // 0x0

}

// Namespace: Sfs2X.Exceptions
public class SFSCodecError : Exception // TypeDefIndex: 2732
{
	// Methods
	public void .ctor(string message); // 0x1005491F4
}

// Namespace: Sfs2X.Exceptions
public class SFSError : Exception // TypeDefIndex: 2733
{
	// Methods
	public void .ctor(string message); // 0x100526B90
}

// Namespace: Sfs2X.Exceptions
public class SFSValidationError : Exception // TypeDefIndex: 2734
{
	// Fields
	private List`1<string> errors; // 0x60

	// Methods
	public void .ctor(string message, ICollection`1<string> errors); // 0x10055DED8
	public List`1<string> get_Errors(); // 0x10055DF64
}

// Namespace: Sfs2X.FSM
public class FSMState // TypeDefIndex: 2735
{
	// Fields
	private int stateName; // 0x10
	private Dictionary`2<int, int> transitions; // 0x18

	// Methods
	public void .ctor(); // 0x10055E00C
	public void SetStateName(int newStateName); // 0x10055E07C
	public int GetStateName(); // 0x10055E388
	public void AddTransition(int transition, int outputState); // 0x10055E1E8
	public int ApplyTransition(int transition); // 0x10055E258
}

// Namespace: Sfs2X.FSM
public class FiniteStateMachine // TypeDefIndex: 2736
{
	// Fields
	private List`1<FSMState> states; // 0x10
	private int currentStateName; // 0x18
	public OnStateChangeDelegate onStateChange; // 0x20
	private object locker; // 0x28

	// Methods
	public void .ctor(); // 0x1005465E8
	public void AddState(object st); // 0x10055DF6C
	public void AddAllStates(Type statesEnumType); // 0x100546678
	public void AddStateTransition(object from, object to, object tr); // 0x10054696C
	public int ApplyTransition(object tr); // 0x100548314
	public int GetCurrentState(); // 0x100546560
	public void SetCurrentState(object state); // 0x100546A38
	private FSMState FindStateObjByName(object st); // 0x10055E084
}

// Namespace: 
public sealed class OnStateChangeDelegate : MulticastDelegate // TypeDefIndex: 2737
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10055E390
	public virtual void Invoke(int fromStateName, int toStateName); // 0x10055E2F8
	public virtual IAsyncResult BeginInvoke(int fromStateName, int toStateName, AsyncCallback callback, object object); // 0x10055E3B4
	public virtual void EndInvoke(IAsyncResult result); // 0x10055E47C
}

// Namespace: Sfs2X.Http
public sealed class HttpResponseDelegate : MulticastDelegate // TypeDefIndex: 2738
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100526168
	public virtual void Invoke(bool error, string message); // 0x10055E488
	public virtual IAsyncResult BeginInvoke(bool error, string message, AsyncCallback callback, object object); // 0x10055E560
	public virtual void EndInvoke(IAsyncResult result); // 0x10055E624
}

// Namespace: Sfs2X.Http
public class SFSWebClient // TypeDefIndex: 2739
{
	// Fields
	private HttpResponseDelegate onHttpResponse; // 0x10

	// Methods
	public void .ctor(); // 0x10055E630
	public void UploadValuesAsync(Uri uri, string paramName, string encodedData); // 0x10055E638
	public HttpResponseDelegate get_OnHttpResponse(); // 0x10055F0A8
	public void set_OnHttpResponse(HttpResponseDelegate value); // 0x10055F0B0
}

// Namespace: Sfs2X.Logging
public sealed class LogLevel : Enum // TypeDefIndex: 2740
{
	// Fields
	public int value__; // 0x10
	public const LogLevel DEBUG = 100; // 0x0
	public const LogLevel INFO = 200; // 0x0
	public const LogLevel WARN = 300; // 0x0
	public const LogLevel ERROR = 400; // 0x0

}

// Namespace: Sfs2X.Logging
public class Logger // TypeDefIndex: 2741
{
	// Fields
	private SmartFox smartFox; // 0x10
	private bool enableConsoleTrace; // 0x18
	private bool enableEventDispatching; // 0x19
	private LogLevel loggingLevel; // 0x1C

	// Methods
	public void .ctor(SmartFox smartFox); // 0x10055F0B8
	public void set_EnableEventDispatching(bool value); // 0x10055F0F4
	public void Debug(string[] messages); // 0x10055F0FC
	public void Info(string[] messages); // 0x10055F460
	public void Warn(string[] messages); // 0x10055F4F4
	public void Error(string[] messages); // 0x10055F588
	private void Log(LogLevel level, string message); // 0x10055F190
}

// Namespace: Sfs2X.Logging
public class LoggerEvent : BaseEvent, ICloneable // TypeDefIndex: 2742
{
	// Fields
	private LogLevel level; // 0x28

	// Methods
	public void .ctor(LogLevel level, Hashtable parameters); // 0x10055F650
	public static string LogEventType(LogLevel level); // 0x10055F6C0
	public override string ToString(); // 0x10055F798
	public object Clone(); // 0x10055F84C
}

// Namespace: Sfs2X.Protocol
public interface IProtocolCodec // TypeDefIndex: 2743
{
	// Methods
	public abstract void OnPacketRead(ISFSObject packet); // 0
	public abstract void OnPacketRead(ByteArray packet); // 0
	public abstract void OnPacketWrite(IMessage message); // 0
}

// Namespace: Sfs2X.Protocol.Serialization
public class DefaultObjectDumpFormatter // TypeDefIndex: 2744
{
	// Fields
	public static readonly char TOKEN_INDENT_OPEN; // 0x0
	public static readonly char TOKEN_INDENT_CLOSE; // 0x2
	public static readonly char TOKEN_DIVIDER; // 0x4
	public static readonly char NEW_LINE; // 0x6
	public static readonly char TAB; // 0x8
	public static readonly char DOT; // 0xA
	public static readonly int HEX_BYTES_PER_LINE; // 0xC
	public static int MAX_DUMP_LENGTH; // 0x10

	// Methods
	private static void .cctor(); // 0x10055F8D4
	public static string PrettyPrintDump(string rawDump); // 0x10055F948
	private static string GetFormatTabs(int howMany); // 0x10055FCDC
	private static string StrFill(char ch, int howMany); // 0x10055FD4C
	public static string HexDump(ByteArray ba); // 0x10055FE14
	public static string HexDump(ByteArray ba, int bytesPerLine); // 0x10055FE84
}

// Namespace: Sfs2X.Protocol.Serialization
public class DefaultSFSDataSerializer : ISFSDataSerializer // TypeDefIndex: 2745
{
	// Fields
	private static readonly string CLASS_MARKER_KEY; // 0x0
	private static readonly string CLASS_FIELDS_KEY; // 0x8
	private static readonly string FIELD_NAME_KEY; // 0x10
	private static readonly string FIELD_VALUE_KEY; // 0x18
	private static DefaultSFSDataSerializer instance; // 0x20
	private static Assembly runningAssembly; // 0x28

	// Methods
	private void .ctor(); // 0x100560778
	private static void .cctor(); // 0x100560780
	public static DefaultSFSDataSerializer get_Instance(); // 0x100560818
	public ByteArray Object2Binary(ISFSObject obj); // 0x1005608D8
	private ByteArray Obj2bin(ISFSObject obj, ByteArray buffer); // 0x100560BF0
	public ByteArray Array2Binary(ISFSArray array); // 0x10056164C
	private ByteArray Arr2bin(ISFSArray array, ByteArray buffer); // 0x1005617C4
	public ISFSObject Binary2Object(ByteArray data); // 0x100561994
	private ISFSObject DecodeSFSObject(ByteArray buffer); // 0x100561AA8
	private ISFSArray DecodeSFSArray(ByteArray buffer); // 0x10056271C
	private SFSDataWrapper DecodeObject(ByteArray buffer); // 0x1005620A8
	private ByteArray EncodeObject(ByteArray buffer, int typeId, object data); // 0x100560E3C
	private SFSDataWrapper BinDecode_NULL(ByteArray buffer); // 0x100562BEC
	private SFSDataWrapper BinDecode_BOOL(ByteArray buffer); // 0x100562C50
	private SFSDataWrapper BinDecode_BYTE(ByteArray buffer); // 0x100562DE4
	private SFSDataWrapper BinDecode_SHORT(ByteArray buffer); // 0x100562FC4
	private SFSDataWrapper BinDecode_INT(ByteArray buffer); // 0x100563158
	private SFSDataWrapper BinDecode_LONG(ByteArray buffer); // 0x1005632EC
	private SFSDataWrapper BinDecode_FLOAT(ByteArray buffer); // 0x100563480
	private SFSDataWrapper BinDecode_DOUBLE(ByteArray buffer); // 0x10056361C
	private SFSDataWrapper BinDecode_UTF_STRING(ByteArray buffer); // 0x1005637B8
	private SFSDataWrapper BinDecode_BOOL_ARRAY(ByteArray buffer); // 0x100562CEC
	private SFSDataWrapper BinDecode_BYTE_ARRAY(ByteArray buffer); // 0x100562E80
	private SFSDataWrapper BinDecode_SHORT_ARRAY(ByteArray buffer); // 0x100563060
	private SFSDataWrapper BinDecode_INT_ARRAY(ByteArray buffer); // 0x1005631F4
	private SFSDataWrapper BinDecode_LONG_ARRAY(ByteArray buffer); // 0x100563388
	private SFSDataWrapper BinDecode_FLOAT_ARRAY(ByteArray buffer); // 0x10056351C
	private SFSDataWrapper BinDecode_DOUBLE_ARRAY(ByteArray buffer); // 0x1005636B8
	private SFSDataWrapper BinDecode_UTF_STRING_ARRAY(ByteArray buffer); // 0x100563834
	private int GetTypedArraySize(ByteArray buffer); // 0x100564F78
	private ByteArray BinEncode_NULL(ByteArray buffer); // 0x100563FA0
	private ByteArray BinEncode_BOOL(ByteArray buffer, bool val); // 0x100564014
	private ByteArray BinEncode_BYTE(ByteArray buffer, byte val); // 0x1005640A0
	private ByteArray BinEncode_SHORT(ByteArray buffer, short val); // 0x10056412C
	private ByteArray BinEncode_INT(ByteArray buffer, int val); // 0x1005641B8
	private ByteArray BinEncode_LONG(ByteArray buffer, long val); // 0x100564244
	private ByteArray BinEncode_FLOAT(ByteArray buffer, float val); // 0x1005642D0
	private ByteArray BinEncode_DOUBLE(ByteArray buffer, double val); // 0x10056435C
	private ByteArray BinEncode_UTF_STRING(ByteArray buffer, string val); // 0x1005643E8
	private ByteArray BinEncode_BOOL_ARRAY(ByteArray buffer, bool[] val); // 0x100564474
	private ByteArray BinEncode_BYTE_ARRAY(ByteArray buffer, ByteArray val); // 0x10056457C
	private ByteArray BinEncode_SHORT_ARRAY(ByteArray buffer, short[] val); // 0x100564620
	private ByteArray BinEncode_INT_ARRAY(ByteArray buffer, int[] val); // 0x100564728
	private ByteArray BinEncode_LONG_ARRAY(ByteArray buffer, long[] val); // 0x100564830
	private ByteArray BinEncode_FLOAT_ARRAY(ByteArray buffer, float[] val); // 0x100564938
	private ByteArray BinEncode_DOUBLE_ARRAY(ByteArray buffer, double[] val); // 0x100564A40
	private ByteArray BinEncode_UTF_STRING_ARRAY(ByteArray buffer, string[] val); // 0x100564B48
	private ByteArray EncodeSFSObjectKey(ByteArray buffer, string val); // 0x100560E08
	private ByteArray AddData(ByteArray buffer, ByteArray newData); // 0x100564C50
	public string Object2Json(Dictionary`2<string, object> map); // 0x100565660
	public void flattenObject(Dictionary`2<string, object> map, ISFSObject sfsObj); // 0x100565830
	public void flattenArray(List`1<object> list, ISFSArray sfsArray); // 0x100565BFC
	public ISFSObject Json2Object(string jsonStr); // 0x100565F8C
	private ISFSObject decodeSFSObject(JsonData jdo); // 0x1005661B8
	private ISFSArray decodeSFSArray(JsonData jdo); // 0x100566C34
	private SFSDataWrapper decodeJsonObject(JsonData jdo); // 0x10056685C
	public ISFSObject Cs2Sfs(object csObj); // 0x100564C88
	private void ConvertCsObj(object csObj, ISFSObject sfsObj); // 0x1005673D4
	private SFSDataWrapper WrapField(object val); // 0x100567CD0
	private ISFSArray UnrollArray(ArrayList arr); // 0x100567FF0
	private ISFSObject UnrollDictionary(Hashtable dict); // 0x100568420
	public object Sfs2Cs(ISFSObject sfsObj); // 0x100563954
	private void ConvertSFSObject(ISFSArray fieldList, object csObj, Type objType); // 0x100568B18
	private object UnwrapField(SFSDataWrapper wrapper); // 0x100568E60
	private ArrayList RebuildArray(ISFSArray sfsArr); // 0x100569114
	private Hashtable RebuildDict(ISFSObject sfsObj); // 0x1005692FC
}

// Namespace: Sfs2X.Protocol.Serialization
public interface ISFSDataSerializer // TypeDefIndex: 2746
{
	// Methods
	public abstract ByteArray Object2Binary(ISFSObject obj); // 0
	public abstract string Object2Json(Dictionary`2<string, object> map); // 0
}

// Namespace: Sfs2X.Protocol.Serialization
public interface SerializableSFSType // TypeDefIndex: 2747
{
}

// Namespace: Sfs2X.Requests
public class BaseRequest : IRequest // TypeDefIndex: 2748
{
	// Fields
	public static readonly string KEY_ERROR_CODE; // 0x0
	public static readonly string KEY_ERROR_PARAMS; // 0x8
	protected ISFSObject sfso; // 0x10
	private int id; // 0x18
	protected int targetController; // 0x1C
	private bool isEncrypted; // 0x20

	// Methods
	public void .ctor(RequestType tp); // 0x100569520
	private static void .cctor(); // 0x100569560
	public virtual void Validate(SmartFox sfs); // 0x1005695D4
	public virtual void Execute(SmartFox sfs); // 0x1005695D8
	public IMessage get_Message(); // 0x1005695DC
}

// Namespace: Sfs2X.Requests
public class ChangeRoomCapacityRequest : BaseRequest // TypeDefIndex: 2749
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_USER_SIZE; // 0x8
	public static readonly string KEY_SPEC_SIZE; // 0x10
	private Room room; // 0x28
	private int newMaxUsers; // 0x30
	private int newMaxSpect; // 0x34

	// Methods
	private static void .cctor(); // 0x10056B870
	public override void Validate(SmartFox sfs); // 0x10056B8F4
	public override void Execute(SmartFox sfs); // 0x10056B9E0
}

// Namespace: Sfs2X.Requests
public class ChangeRoomNameRequest : BaseRequest // TypeDefIndex: 2750
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_NAME; // 0x8
	private Room room; // 0x28
	private string newName; // 0x30

	// Methods
	private static void .cctor(); // 0x10056BCD0
	public override void Validate(SmartFox sfs); // 0x10056BD44
	public override void Execute(SmartFox sfs); // 0x10056BE68
}

// Namespace: Sfs2X.Requests
public class ChangeRoomPasswordStateRequest : BaseRequest // TypeDefIndex: 2751
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_PASS; // 0x8
	private Room room; // 0x28
	private string newPass; // 0x30

	// Methods
	private static void .cctor(); // 0x10056C0C4
	public override void Validate(SmartFox sfs); // 0x10056C138
	public override void Execute(SmartFox sfs); // 0x10056C250
}

// Namespace: Sfs2X.Requests
public class CreateRoomRequest : BaseRequest // TypeDefIndex: 2752
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_NAME; // 0x8
	public static readonly string KEY_PASSWORD; // 0x10
	public static readonly string KEY_GROUP_ID; // 0x18
	public static readonly string KEY_ISGAME; // 0x20
	public static readonly string KEY_MAXUSERS; // 0x28
	public static readonly string KEY_MAXSPECTATORS; // 0x30
	public static readonly string KEY_MAXVARS; // 0x38
	public static readonly string KEY_ROOMVARS; // 0x40
	public static readonly string KEY_PERMISSIONS; // 0x48
	public static readonly string KEY_EVENTS; // 0x50
	public static readonly string KEY_EXTID; // 0x58
	public static readonly string KEY_EXTCLASS; // 0x60
	public static readonly string KEY_EXTPROP; // 0x68
	public static readonly string KEY_AUTOJOIN; // 0x70
	public static readonly string KEY_ROOM_TO_LEAVE; // 0x78
	public static readonly string KEY_MMO_DEFAULT_AOI; // 0x80
	public static readonly string KEY_MMO_MAP_LOW_LIMIT; // 0x88
	public static readonly string KEY_MMO_MAP_HIGH_LIMIT; // 0x90
	public static readonly string KEY_MMO_USER_MAX_LIMBO_SECONDS; // 0x98
	public static readonly string KEY_MMO_PROXIMITY_UPDATE_MILLIS; // 0xA0
	public static readonly string KEY_MMO_SEND_ENTRY_POINT; // 0xA8
	private RoomSettings settings; // 0x28
	private bool autoJoin; // 0x30
	private Room roomToLeave; // 0x38

	// Methods
	private static void .cctor(); // 0x10056C4AC
	public override void Validate(SmartFox sfs); // 0x10056C660
	public override void Execute(SmartFox sfs); // 0x10056C914
}

// Namespace: Sfs2X.Requests
public class ExtensionRequest : BaseRequest // TypeDefIndex: 2753
{
	// Fields
	public static readonly string KEY_CMD; // 0x0
	public static readonly string KEY_PARAMS; // 0x8
	public static readonly string KEY_ROOM; // 0x10
	private string extCmd; // 0x28
	private ISFSObject parameters; // 0x30
	private Room room; // 0x38
	private bool useUDP; // 0x40

	// Methods
	public void .ctor(string extCmd, ISFSObject parameters, Room room); // 0x10056DFA0
	public void .ctor(string extCmd, ISFSObject parameters); // 0x10056E0FC
	private static void .cctor(); // 0x10056E1AC
	private void Init(string extCmd, ISFSObject parameters, Room room, bool useUDP); // 0x10056E05C
	public bool get_UseUDP(); // 0x100569928
	public override void Validate(SmartFox sfs); // 0x10056E230
	public override void Execute(SmartFox sfs); // 0x10056E354
}

// Namespace: Sfs2X.Requests
public class FindRoomsRequest : BaseRequest // TypeDefIndex: 2754
{
	// Fields
	public static readonly string KEY_EXPRESSION; // 0x0
	public static readonly string KEY_GROUP; // 0x8
	public static readonly string KEY_LIMIT; // 0x10
	public static readonly string KEY_FILTERED_ROOMS; // 0x18
	private MatchExpression matchExpr; // 0x28
	private string groupId; // 0x30
	private int limit; // 0x38

	// Methods
	private static void .cctor(); // 0x10056E67C
	public override void Validate(SmartFox sfs); // 0x10056E710
	public override void Execute(SmartFox sfs); // 0x10056E7FC
}

// Namespace: Sfs2X.Requests
public class FindUsersRequest : BaseRequest // TypeDefIndex: 2755
{
	// Fields
	public static readonly string KEY_EXPRESSION; // 0x0
	public static readonly string KEY_GROUP; // 0x8
	public static readonly string KEY_ROOM; // 0x10
	public static readonly string KEY_LIMIT; // 0x18
	public static readonly string KEY_FILTERED_USERS; // 0x20
	private MatchExpression matchExpr; // 0x28
	private object target; // 0x30
	private int limit; // 0x38

	// Methods
	private static void .cctor(); // 0x10056EAE0
	public override void Validate(SmartFox sfs); // 0x10056EB84
	public override void Execute(SmartFox sfs); // 0x10056EC70
}

// Namespace: Sfs2X.Requests
public class GenericMessageRequest : BaseRequest // TypeDefIndex: 2756
{
	// Fields
	public static readonly string KEY_ROOM_ID; // 0x0
	public static readonly string KEY_USER_ID; // 0x8
	public static readonly string KEY_MESSAGE; // 0x10
	public static readonly string KEY_MESSAGE_TYPE; // 0x18
	public static readonly string KEY_RECIPIENT; // 0x20
	public static readonly string KEY_RECIPIENT_MODE; // 0x28
	public static readonly string KEY_XTRA_PARAMS; // 0x30
	public static readonly string KEY_SENDER_DATA; // 0x38
	protected int type; // 0x24
	protected Room room; // 0x28
	protected string message; // 0x30
	protected ISFSObject parameters; // 0x38
	protected object recipient; // 0x40
	protected int sendMode; // 0x48

	// Methods
	private static void .cctor(); // 0x10056FC94
	public override void Validate(SmartFox sfs); // 0x10056FD68
	public override void Execute(SmartFox sfs); // 0x10057065C
	private void ValidatePublicMessage(SmartFox sfs, List`1<string> errors); // 0x10056FFEC
	private void ValidatePrivateMessage(SmartFox sfs, List`1<string> errors); // 0x100570110
	private void ValidateObjectMessage(SmartFox sfs, List`1<string> errors); // 0x10057021C
	private void ValidateBuddyMessage(SmartFox sfs, List`1<string> errors); // 0x1005702A4
	private void ValidateSuperUserMessage(SmartFox sfs, List`1<string> errors); // 0x100570508
	private void ExecutePublicMessage(SmartFox sfs); // 0x1005708D0
	private void ExecutePrivateMessage(SmartFox sfs); // 0x100570D70
	private void ExecuteBuddyMessage(SmartFox sfs); // 0x1005719FC
	private void ExecuteSuperUserMessage(SmartFox sfs); // 0x100571CBC
	private void ExecuteObjectMessage(SmartFox sfs); // 0x100571030
}

// Namespace: Sfs2X.Requests
public sealed class GenericMessageType : Enum // TypeDefIndex: 2757
{
	// Fields
	public int value__; // 0x10
	public const GenericMessageType PUBLIC_MSG = 0; // 0x0
	public const GenericMessageType PRIVATE_MSG = 1; // 0x0
	public const GenericMessageType MODERATOR_MSG = 2; // 0x0
	public const GenericMessageType ADMIN_MSG = 3; // 0x0
	public const GenericMessageType OBJECT_MSG = 4; // 0x0
	public const GenericMessageType BUDDY_MSG = 5; // 0x0

}

// Namespace: Sfs2X.Requests
public class HandshakeRequest : BaseRequest, IRequest // TypeDefIndex: 2758
{
	// Fields
	public static readonly string KEY_SESSION_TOKEN; // 0x0
	public static readonly string KEY_API; // 0x8
	public static readonly string KEY_COMPRESSION_THRESHOLD; // 0x10
	public static readonly string KEY_RECONNECTION_TOKEN; // 0x18
	public static readonly string KEY_CLIENT_TYPE; // 0x20
	public static readonly string KEY_MAX_MESSAGE_SIZE; // 0x28

	// Methods
	public void .ctor(string apiVersion, string reconnectionToken, string clientDetails); // 0x100572528
	private static void .cctor(); // 0x10057281C
}

// Namespace: Sfs2X.Requests
public interface IRequest // TypeDefIndex: 2759
{
	// Methods
	public abstract void Validate(SmartFox sfs); // 0
	public abstract void Execute(SmartFox sfs); // 0
	public abstract IMessage get_Message(); // 0
}

// Namespace: Sfs2X.Requests
public class JoinRoomRequest : BaseRequest // TypeDefIndex: 2760
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_USER_LIST; // 0x8
	public static readonly string KEY_ROOM_NAME; // 0x10
	public static readonly string KEY_ROOM_ID; // 0x18
	public static readonly string KEY_PASS; // 0x20
	public static readonly string KEY_ROOM_TO_LEAVE; // 0x28
	public static readonly string KEY_AS_SPECTATOR; // 0x30
	private int id; // 0x24
	private string name; // 0x28
	private string pass; // 0x30
	private Nullable`1<int> roomIdToLeave; // 0x38
	private bool asSpectator; // 0x40

	// Methods
	public void .ctor(object id); // 0x1005728D0
	private static void .cctor(); // 0x100572B50
	private void Init(object id, string pass, Nullable`1<int> roomIdToLeave, bool asSpectator); // 0x1005729C4
	public override void Validate(SmartFox sfs); // 0x100572C14
	public override void Execute(SmartFox sfs); // 0x100572CF0
}

// Namespace: Sfs2X.Requests
public class LoginRequest : BaseRequest // TypeDefIndex: 2761
{
	// Fields
	public static readonly string KEY_ZONE_NAME; // 0x0
	public static readonly string KEY_USER_NAME; // 0x8
	public static readonly string KEY_PASSWORD; // 0x10
	public static readonly string KEY_PARAMS; // 0x18
	public static readonly string KEY_PRIVILEGE_ID; // 0x20
	public static readonly string KEY_ID; // 0x28
	public static readonly string KEY_ROOMLIST; // 0x30
	public static readonly string KEY_RECONNECTION_SECONDS; // 0x38
	private string zoneName; // 0x28
	private string userName; // 0x30
	private string password; // 0x38
	private ISFSObject parameters; // 0x40

	// Methods
	public void .ctor(string userName, string password, string zoneName, ISFSObject parameters); // 0x10057318C
	private static void .cctor(); // 0x1005732D4
	private void Init(string userName, string password, string zoneName, ISFSObject parameters); // 0x10057324C
	public override void Execute(SmartFox sfs); // 0x1005733A8
	public override void Validate(SmartFox sfs); // 0x10057394C
}

// Namespace: Sfs2X.Requests
public class LogoutRequest : BaseRequest // TypeDefIndex: 2762
{
	// Fields
	public static readonly string KEY_ZONE_NAME; // 0x0

	// Methods
	public void .ctor(); // 0x100573AC4
	private static void .cctor(); // 0x100573B50
	public override void Validate(SmartFox sfs); // 0x100573BAC
}

// Namespace: Sfs2X.Requests
public class ManualDisconnectionRequest : BaseRequest // TypeDefIndex: 2763
{
	// Methods
	public void .ctor(); // 0x100573C84
	public override void Validate(SmartFox sfs); // 0x100573D10
	public override void Execute(SmartFox sfs); // 0x100573D14
}

// Namespace: Sfs2X.Requests
public sealed class MessageRecipientType : Enum // TypeDefIndex: 2764
{
	// Fields
	public int value__; // 0x10
	public const MessageRecipientType TO_USER = 0; // 0x0
	public const MessageRecipientType TO_ROOM = 1; // 0x0
	public const MessageRecipientType TO_GROUP = 2; // 0x0
	public const MessageRecipientType TO_ZONE = 3; // 0x0

}

// Namespace: Sfs2X.Requests
public class PlayerToSpectatorRequest : BaseRequest // TypeDefIndex: 2765
{
	// Fields
	public static readonly string KEY_ROOM_ID; // 0x0
	public static readonly string KEY_USER_ID; // 0x8
	private Room room; // 0x28

	// Methods
	private static void .cctor(); // 0x10057430C
	public override void Validate(SmartFox sfs); // 0x100574380
	public override void Execute(SmartFox sfs); // 0x10057448C
}

// Namespace: Sfs2X.Requests
public sealed class RequestType : Enum // TypeDefIndex: 2766
{
	// Fields
	public int value__; // 0x10
	public const RequestType Handshake = 0; // 0x0
	public const RequestType Login = 1; // 0x0
	public const RequestType Logout = 2; // 0x0
	public const RequestType GetRoomList = 3; // 0x0
	public const RequestType JoinRoom = 4; // 0x0
	public const RequestType AutoJoin = 5; // 0x0
	public const RequestType CreateRoom = 6; // 0x0
	public const RequestType GenericMessage = 7; // 0x0
	public const RequestType ChangeRoomName = 8; // 0x0
	public const RequestType ChangeRoomPassword = 9; // 0x0
	public const RequestType ObjectMessage = 10; // 0x0
	public const RequestType SetRoomVariables = 11; // 0x0
	public const RequestType SetUserVariables = 12; // 0x0
	public const RequestType CallExtension = 13; // 0x0
	public const RequestType LeaveRoom = 14; // 0x0
	public const RequestType SubscribeRoomGroup = 15; // 0x0
	public const RequestType UnsubscribeRoomGroup = 16; // 0x0
	public const RequestType SpectatorToPlayer = 17; // 0x0
	public const RequestType PlayerToSpectator = 18; // 0x0
	public const RequestType ChangeRoomCapacity = 19; // 0x0
	public const RequestType PublicMessage = 20; // 0x0
	public const RequestType PrivateMessage = 21; // 0x0
	public const RequestType ModeratorMessage = 22; // 0x0
	public const RequestType AdminMessage = 23; // 0x0
	public const RequestType KickUser = 24; // 0x0
	public const RequestType BanUser = 25; // 0x0
	public const RequestType ManualDisconnection = 26; // 0x0
	public const RequestType FindRooms = 27; // 0x0
	public const RequestType FindUsers = 28; // 0x0
	public const RequestType PingPong = 29; // 0x0
	public const RequestType SetUserPosition = 30; // 0x0
	public const RequestType InitBuddyList = 200; // 0x0
	public const RequestType AddBuddy = 201; // 0x0
	public const RequestType BlockBuddy = 202; // 0x0
	public const RequestType RemoveBuddy = 203; // 0x0
	public const RequestType SetBuddyVariables = 204; // 0x0
	public const RequestType GoOnline = 205; // 0x0
	public const RequestType InviteUser = 300; // 0x0
	public const RequestType InvitationReply = 301; // 0x0
	public const RequestType CreateSFSGame = 302; // 0x0
	public const RequestType QuickJoinGame = 303; // 0x0

}

// Namespace: Sfs2X.Requests
public class RoomEvents // TypeDefIndex: 2767
{
	// Fields
	private bool allowUserEnter; // 0x10
	private bool allowUserExit; // 0x11
	private bool allowUserCountChange; // 0x12
	private bool allowUserVariablesUpdate; // 0x13

	// Methods
	public bool get_AllowUserEnter(); // 0x10056DF60
	public bool get_AllowUserExit(); // 0x10056DF68
	public bool get_AllowUserCountChange(); // 0x10056DF70
	public bool get_AllowUserVariablesUpdate(); // 0x10056DF78
}

// Namespace: Sfs2X.Requests
public class RoomExtension // TypeDefIndex: 2768
{
	// Fields
	private string id; // 0x10
	private string className; // 0x18
	private string propertiesFile; // 0x20

	// Methods
	public string get_Id(); // 0x10056C8EC
	public string get_ClassName(); // 0x10056C8E4
	public string get_PropertiesFile(); // 0x10056DF80
}

// Namespace: Sfs2X.Requests
public class RoomPermissions // TypeDefIndex: 2769
{
	// Fields
	private bool allowNameChange; // 0x10
	private bool allowPasswordStateChange; // 0x11
	private bool allowPublicMessages; // 0x12
	private bool allowResizing; // 0x13

	// Methods
	public bool get_AllowNameChange(); // 0x10056DF38
	public bool get_AllowPasswordStateChange(); // 0x10056DF40
	public bool get_AllowPublicMessages(); // 0x10056DF48
	public bool get_AllowResizing(); // 0x10056DF50
}

// Namespace: Sfs2X.Requests
public class RoomSettings // TypeDefIndex: 2770
{
	// Fields
	private string name; // 0x10
	private string password; // 0x18
	private string groupId; // 0x20
	private bool isGame; // 0x28
	private short maxUsers; // 0x2A
	private short maxSpectators; // 0x2C
	private short maxVariables; // 0x2E
	private List`1<RoomVariable> variables; // 0x30
	private RoomPermissions permissions; // 0x38
	private RoomEvents events; // 0x40
	private RoomExtension extension; // 0x48

	// Methods
	public string get_Name(); // 0x10056C8CC
	public string get_Password(); // 0x10056DF08
	public bool get_IsGame(); // 0x10056DF10
	public short get_MaxUsers(); // 0x10056C8D4
	public short get_MaxVariables(); // 0x10056DF20
	public short get_MaxSpectators(); // 0x10056DF18
	public List`1<RoomVariable> get_Variables(); // 0x10056DF28
	public RoomPermissions get_Permissions(); // 0x10056DF30
	public RoomEvents get_Events(); // 0x10056DF58
	public RoomExtension get_Extension(); // 0x10056C8DC
	public string get_GroupId(); // 0x10056DF00
}

// Namespace: Sfs2X.Requests
public class SetRoomVariablesRequest : BaseRequest // TypeDefIndex: 2771
{
	// Fields
	public static readonly string KEY_VAR_ROOM; // 0x0
	public static readonly string KEY_VAR_LIST; // 0x8
	private ICollection`1<RoomVariable> roomVariables; // 0x28
	private Room room; // 0x30

	// Methods
	private static void .cctor(); // 0x100574664
	public override void Validate(SmartFox sfs); // 0x1005746D8
	public override void Execute(SmartFox sfs); // 0x10057494C
}

// Namespace: Sfs2X.Requests
public class SetUserVariablesRequest : BaseRequest // TypeDefIndex: 2772
{
	// Fields
	public static readonly string KEY_USER; // 0x0
	public static readonly string KEY_VAR_LIST; // 0x8
	private ICollection`1<UserVariable> userVariables; // 0x28

	// Methods
	private static void .cctor(); // 0x100574FD8
	public override void Validate(SmartFox sfs); // 0x10057504C
	public override void Execute(SmartFox sfs); // 0x1005751DC
}

// Namespace: Sfs2X.Requests
public class SpectatorToPlayerRequest : BaseRequest // TypeDefIndex: 2773
{
	// Fields
	public static readonly string KEY_ROOM_ID; // 0x0
	public static readonly string KEY_USER_ID; // 0x8
	public static readonly string KEY_PLAYER_ID; // 0x10
	private Room room; // 0x28

	// Methods
	private static void .cctor(); // 0x100575734
	public override void Validate(SmartFox sfs); // 0x1005757B8
	public override void Execute(SmartFox sfs); // 0x1005758C4
}

// Namespace: Sfs2X.Requests
public class SubscribeRoomGroupRequest : BaseRequest // TypeDefIndex: 2774
{
	// Fields
	public static readonly string KEY_GROUP_ID; // 0x0
	public static readonly string KEY_ROOM_LIST; // 0x8
	private string groupId; // 0x28

	// Methods
	private static void .cctor(); // 0x100575A9C
	public override void Validate(SmartFox sfs); // 0x100575B10
	public override void Execute(SmartFox sfs); // 0x100575C08
}

// Namespace: Sfs2X.Requests
public class UnsubscribeRoomGroupRequest : BaseRequest // TypeDefIndex: 2775
{
	// Fields
	public static readonly string KEY_GROUP_ID; // 0x0
	private string groupId; // 0x28

	// Methods
	private static void .cctor(); // 0x100575D3C
	public override void Validate(SmartFox sfs); // 0x100575D98
	public override void Execute(SmartFox sfs); // 0x100575E90
}

// Namespace: Sfs2X.Requests.Buddylist
public class AddBuddyRequest : BaseRequest // TypeDefIndex: 2776
{
	// Fields
	public static readonly string KEY_BUDDY_NAME; // 0x0
	private string name; // 0x28

	// Methods
	private static void .cctor(); // 0x100569930
	public override void Validate(SmartFox sfs); // 0x10056998C
	public override void Execute(SmartFox sfs); // 0x100569DC8
}

// Namespace: Sfs2X.Requests.Buddylist
public class BlockBuddyRequest : BaseRequest // TypeDefIndex: 2777
{
	// Fields
	public static readonly string KEY_BUDDY_NAME; // 0x0
	public static readonly string KEY_BUDDY_BLOCK_STATE; // 0x8
	private string buddyName; // 0x28
	private bool blocked; // 0x30

	// Methods
	private static void .cctor(); // 0x100569EFC
	public override void Validate(SmartFox sfs); // 0x100569F70
	public override void Execute(SmartFox sfs); // 0x10056A53C
}

// Namespace: Sfs2X.Requests.Buddylist
public class GoOnlineRequest : BaseRequest // TypeDefIndex: 2778
{
	// Fields
	public static readonly string KEY_ONLINE; // 0x0
	public static readonly string KEY_BUDDY_NAME; // 0x8
	public static readonly string KEY_BUDDY_ID; // 0x10
	private bool online; // 0x21

	// Methods
	private static void .cctor(); // 0x10056A71C
	public override void Validate(SmartFox sfs); // 0x10056A7A0
	public override void Execute(SmartFox sfs); // 0x10056A938
}

// Namespace: Sfs2X.Requests.Buddylist
public class InitBuddyListRequest : BaseRequest // TypeDefIndex: 2779
{
	// Fields
	public static readonly string KEY_BLIST; // 0x0
	public static readonly string KEY_BUDDY_STATES; // 0x8
	public static readonly string KEY_MY_VARS; // 0x10

	// Methods
	private static void .cctor(); // 0x10056AB14
	public override void Validate(SmartFox sfs); // 0x10056AB98
	public override void Execute(SmartFox sfs); // 0x10056AD30
}

// Namespace: Sfs2X.Requests.Buddylist
public class RemoveBuddyRequest : BaseRequest // TypeDefIndex: 2780
{
	// Fields
	public static readonly string KEY_BUDDY_NAME; // 0x0
	private string name; // 0x28

	// Methods
	private static void .cctor(); // 0x10056AD34
	public override void Validate(SmartFox sfs); // 0x10056AD90
	public override void Execute(SmartFox sfs); // 0x10056B0C4
}

// Namespace: Sfs2X.Requests.Buddylist
public class SetBuddyVariablesRequest : BaseRequest // TypeDefIndex: 2781
{
	// Fields
	public static readonly string KEY_BUDDY_NAME; // 0x0
	public static readonly string KEY_BUDDY_VARS; // 0x8
	private List`1<BuddyVariable> buddyVariables; // 0x28

	// Methods
	private static void .cctor(); // 0x10056B1F8
	public override void Validate(SmartFox sfs); // 0x10056B26C
	public override void Execute(SmartFox sfs); // 0x10056B4FC
}

// Namespace: Sfs2X.Requests.Game
public class InviteUsersRequest : BaseRequest // TypeDefIndex: 2782
{
	// Fields
	public static readonly string KEY_USER; // 0x0
	public static readonly string KEY_USER_ID; // 0x8
	public static readonly string KEY_INVITATION_ID; // 0x10
	public static readonly string KEY_TIME; // 0x18
	public static readonly string KEY_PARAMS; // 0x20
	public static readonly string KEY_INVITEE_ID; // 0x28
	public static readonly string KEY_INVITED_USERS; // 0x30
	public static readonly string KEY_REPLY_ID; // 0x38
	public static readonly int MAX_INVITATIONS_FROM_CLIENT_SIDE; // 0x40
	public static readonly int MIN_EXPIRY_TIME; // 0x44
	public static readonly int MAX_EXPIRY_TIME; // 0x48
	private List`1<object> invitedUsers; // 0x28
	private int secondsForAnswer; // 0x30
	private ISFSObject parameters; // 0x38

	// Methods
	private static void .cctor(); // 0x10056F1BC
	public override void Validate(SmartFox sfs); // 0x10056F2A4
	public override void Execute(SmartFox sfs); // 0x10056F6CC
}

// Namespace: Sfs2X.Requests.MMO
public class MMORoomSettings : RoomSettings // TypeDefIndex: 2783
{
	// Fields
	private Vec3D defaultAOI; // 0x50
	private MapLimits mapLimits; // 0x58
	private int userMaxLimboSeconds; // 0x60
	private int proximityListUpdateMillis; // 0x64
	private bool sendAOIEntryPoint; // 0x68

	// Methods
	public Vec3D get_DefaultAOI(); // 0x10056C8F4
	public MapLimits get_MapLimits(); // 0x10056C8FC
	public int get_UserMaxLimboSeconds(); // 0x10056DF88
	public int get_ProximityListUpdateMillis(); // 0x10056DF90
	public bool get_SendAOIEntryPoint(); // 0x10056DF98
}

// Namespace: Sfs2X.Requests.MMO
public class MapLimits // TypeDefIndex: 2784
{
	// Fields
	private Vec3D lowerLimit; // 0x10
	private Vec3D higherLimit; // 0x18

	// Methods
	public Vec3D get_LowerLimit(); // 0x10056C904
	public Vec3D get_HigherLimit(); // 0x10056C90C
}

// Namespace: Sfs2X.Requests.MMO
public class SetMMOItemVariables // TypeDefIndex: 2785
{
	// Fields
	public static readonly string KEY_ROOM_ID; // 0x0
	public static readonly string KEY_ITEM_ID; // 0x8
	public static readonly string KEY_VAR_LIST; // 0x10

	// Methods
	private static void .cctor(); // 0x100573D18
}

// Namespace: Sfs2X.Requests.MMO
public class SetUserPositionRequest : BaseRequest // TypeDefIndex: 2786
{
	// Fields
	public static readonly string KEY_ROOM; // 0x0
	public static readonly string KEY_VEC3D; // 0x8
	public static readonly string KEY_PLUS_USER_LIST; // 0x10
	public static readonly string KEY_MINUS_USER_LIST; // 0x18
	public static readonly string KEY_PLUS_ITEM_LIST; // 0x20
	public static readonly string KEY_MINUS_ITEM_LIST; // 0x28
	private Vec3D pos; // 0x28
	private Room room; // 0x30

	// Methods
	private static void .cctor(); // 0x100573D9C
	public override void Validate(SmartFox sfs); // 0x100573E50
	public override void Execute(SmartFox sfs); // 0x100573FE0
}

// Namespace: Sfs2X.Util
public class ByteArray // TypeDefIndex: 2787
{
	// Fields
	private byte[] buffer; // 0x10
	private int position; // 0x18
	private bool compressed; // 0x1C

	// Methods
	public void .ctor(); // 0x100560A50
	public void .ctor(byte[] buf); // 0x1005650F8
	public byte[] get_Bytes(); // 0x100560770
	public void set_Bytes(byte[] value); // 0x10057A574
	public int get_Length(); // 0x100560754
	public int get_Position(); // 0x10056394C
	public void set_Position(int value); // 0x100561AA0
	public void set_Compressed(bool value); // 0x10057A580
	public void Compress(); // 0x10057A588
	public void Uncompress(); // 0x10057A7DC
	private void CheckCompressedWrite(); // 0x10057A9F0
	private void CheckCompressedRead(); // 0x10057AA68
	public byte[] ReverseOrder(byte[] dt); // 0x10057AAE0
	public void WriteByte(SFSDataType tp); // 0x10056512C
	public void WriteByte(byte b); // 0x100560AC8
	public void WriteBytes(byte[] data); // 0x100565644
	public void WriteBytes(byte[] data, int ofs, int count); // 0x10057AC08
	public void WriteBool(bool b); // 0x1005651B0
	public void WriteInt(int i); // 0x10056524C
	public void WriteUShort(ushort us); // 0x10057ACEC
	public void WriteShort(short s); // 0x100560B5C
	public void WriteLong(long l); // 0x1005652E0
	public void WriteFloat(float f); // 0x100565374
	public void WriteDouble(double d); // 0x100565408
	public void WriteUTF(string str); // 0x10056549C
	public byte ReadByte(); // 0x100561ED4
	public byte[] ReadBytes(int count); // 0x100565058
	public bool ReadBool(); // 0x100564CD4
	public int ReadInt(); // 0x100564D38
	public ushort ReadUShort(); // 0x10057AD80
	public short ReadShort(); // 0x100561F30
	public long ReadLong(); // 0x100564DC8
	public float ReadFloat(); // 0x100564E58
	public double ReadDouble(); // 0x100564EE8
	public string ReadUTF(); // 0x100561FC0
}

// Namespace: Sfs2X.Util
public static class ClientDisconnectionReason // TypeDefIndex: 2788
{
	// Fields
	public static readonly string IDLE; // 0x0
	public static readonly string KICK; // 0x8
	public static readonly string BAN; // 0x10
	public static readonly string MANUAL; // 0x18
	public static readonly string UNKNOWN; // 0x20
	private static string[] reasons; // 0x28

	// Methods
	private static void .cctor(); // 0x10057AE10
	public static string GetReason(int reasonId); // 0x10057AFB8
}

// Namespace: Sfs2X.Util
public class ConfigData // TypeDefIndex: 2789
{
	// Fields
	private string host; // 0x10
	private int port; // 0x18
	private string udpHost; // 0x20
	private int udpPort; // 0x28
	private string zone; // 0x30
	private bool debug; // 0x38
	private int httpPort; // 0x3C
	private int httpsPort; // 0x40
	private bool useBlueBox; // 0x44
	private int blueBoxPollingRate; // 0x48

	// Methods
	public void .ctor(); // 0x100577224
	public string get_Host(); // 0x1005772C4
	public int get_Port(); // 0x1005772CC
	public string get_Zone(); // 0x100573ABC
	public void set_Debug(bool value); // 0x1005772BC
	public int get_HttpPort(); // 0x10057A120
	public void set_UseBlueBox(bool value); // 0x1005772AC
	public int get_BlueBoxPollingRate(); // 0x10057B048
}

// Namespace: Sfs2X.Util
public class CryptoKey // TypeDefIndex: 2790
{
	// Fields
	private ByteArray iv; // 0x10
	private ByteArray key; // 0x18

	// Methods
	public ByteArray get_IV(); // 0x10057B050
	public ByteArray get_Key(); // 0x10057B058
}

// Namespace: Sfs2X.Util
public class PasswordUtil // TypeDefIndex: 2791
{
	// Methods
	public static string MD5Password(string pass); // 0x10057377C
}

// Namespace: Sfs2X.Util
public static class SFSErrorCodes // TypeDefIndex: 2792
{
	// Fields
	private static Dictionary`2<int, string> errorsByCode; // 0x0

	// Methods
	private static void .cctor(); // 0x10057B060
	public static string GetErrorMessage(int code, Logger log, object[] args); // 0x100579B94
}

// Namespace: Sfs2X.Util.LagMonitor
public interface ILagMonitor // TypeDefIndex: 2793
{
	// Methods
	public abstract void Stop(); // 0
	public abstract void Destroy(); // 0
	public abstract bool get_IsRunning(); // 0
	public abstract int OnPingPong(); // 0
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class Adler32 // TypeDefIndex: 2794
{
	// Methods
	public void .ctor(); // 0x100518F2C
	internal long adler32(long adler, byte[] buf, int index, int len); // 0x100518F34
}

// Namespace: ComponentAce.Compression.Libs.zlib
public sealed class Deflate // TypeDefIndex: 2795
{
	// Fields
	private static Config[] config_table; // 0x0
	private static readonly string[] z_errmsg; // 0x8
	private static readonly int MIN_LOOKAHEAD; // 0x10
	private static readonly int L_CODES; // 0x14
	private static readonly int HEAP_SIZE; // 0x18
	internal ZStream strm; // 0x10
	internal int status; // 0x18
	internal byte[] pending_buf; // 0x20
	internal int pending_buf_size; // 0x28
	internal int pending_out; // 0x2C
	internal int pending; // 0x30
	internal int noheader; // 0x34
	internal byte data_type; // 0x38
	internal byte method; // 0x39
	internal int last_flush; // 0x3C
	internal int w_size; // 0x40
	internal int w_bits; // 0x44
	internal int w_mask; // 0x48
	internal byte[] window; // 0x50
	internal int window_size; // 0x58
	internal short[] prev; // 0x60
	internal short[] head; // 0x68
	internal int ins_h; // 0x70
	internal int hash_size; // 0x74
	internal int hash_bits; // 0x78
	internal int hash_mask; // 0x7C
	internal int hash_shift; // 0x80
	internal int block_start; // 0x84
	internal int match_length; // 0x88
	internal int prev_match; // 0x8C
	internal int match_available; // 0x90
	internal int strstart; // 0x94
	internal int match_start; // 0x98
	internal int lookahead; // 0x9C
	internal int prev_length; // 0xA0
	internal int max_chain_length; // 0xA4
	internal int max_lazy_match; // 0xA8
	internal int level; // 0xAC
	internal int strategy; // 0xB0
	internal int good_match; // 0xB4
	internal int nice_match; // 0xB8
	internal short[] dyn_ltree; // 0xC0
	internal short[] dyn_dtree; // 0xC8
	internal short[] bl_tree; // 0xD0
	internal Tree l_desc; // 0xD8
	internal Tree d_desc; // 0xE0
	internal Tree bl_desc; // 0xE8
	internal short[] bl_count; // 0xF0
	internal int[] heap; // 0xF8
	internal int heap_len; // 0x100
	internal int heap_max; // 0x104
	internal byte[] depth; // 0x108
	internal int l_buf; // 0x110
	internal int lit_bufsize; // 0x114
	internal int last_lit; // 0x118
	internal int d_buf; // 0x11C
	internal int opt_len; // 0x120
	internal int static_len; // 0x124
	internal int matches; // 0x128
	internal int last_eob_len; // 0x12C
	internal short bi_buf; // 0x130
	internal int bi_valid; // 0x134

	// Methods
	internal void .ctor(); // 0x10051934C
	private static void .cctor(); // 0x100519518
	internal void lm_init(); // 0x100519D80
	internal void tr_init(); // 0x100519F74
	internal void init_block(); // 0x10051A044
	internal void pqdownheap(short[] tree, int k); // 0x10051A1AC
	internal static bool smaller(short[] tree, int n, int m, byte[] depth); // 0x10051A3C8
	internal void scan_tree(short[] tree, int max_code); // 0x10051A4EC
	internal int build_bl_tree(); // 0x10051A748
	internal void send_all_trees(int lcodes, int dcodes, int blcodes); // 0x10051AE60
	internal void send_tree(short[] tree, int max_code); // 0x10051B070
	internal void put_byte(byte[] p, int start, int len); // 0x10051B2D4
	internal void put_byte(byte c); // 0x10051B318
	internal void put_short(int w); // 0x10051B370
	internal void putShortMSB(int b); // 0x10051B3C4
	internal void send_code(int c, short[] tree); // 0x10051B25C
	internal void send_bits(int value_Renamed, int length); // 0x10051AFB8
	internal void _tr_align(); // 0x10051B3F4
	internal bool _tr_tally(int dist, int lc); // 0x10051B568
	internal void compress_block(short[] ltree, short[] dtree); // 0x10051B958
	internal void set_data_type(); // 0x10051BC70
	internal void bi_flush(); // 0x10051B4EC
	internal void bi_windup(); // 0x10051BDA4
	internal void copy_block(int buf, int len, bool header); // 0x10051BE0C
	internal void flush_block_only(bool eof); // 0x10051BEC0
	internal int deflate_stored(int flush); // 0x10051C1C0
	internal void _tr_stored_block(int buf, int stored_len, bool eof); // 0x10051C650
	internal void _tr_flush_block(int buf, int stored_len, bool eof); // 0x10051BF18
	internal void fill_window(); // 0x10051C34C
	internal int deflate_fast(int flush); // 0x10051C76C
	internal int deflate_slow(int flush); // 0x10051D42C
	internal int longest_match(int cur_match); // 0x10051CC7C
	internal int deflateInit(ZStream strm, int level, int bits); // 0x10051D9C8
	internal int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy); // 0x10051D9E0
	internal int deflateReset(ZStream strm); // 0x10051DBD8
	internal int deflateEnd(); // 0x10051DC5C
	internal int deflate(ZStream strm, int flush); // 0x10051DCA0
}

// Namespace: 
internal class Config // TypeDefIndex: 2796
{
	// Fields
	internal int good_length; // 0x10
	internal int max_lazy; // 0x14
	internal int nice_length; // 0x18
	internal int max_chain; // 0x1C
	internal int func; // 0x20

	// Methods
	internal void .ctor(int good_length, int max_lazy, int nice_length, int max_chain, int func); // 0x100519D2C
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class InfBlocks // TypeDefIndex: 2797
{
	// Fields
	private static readonly int[] inflate_mask; // 0x0
	internal static readonly int[] border; // 0x8
	internal int mode; // 0x10
	internal int left; // 0x14
	internal int table; // 0x18
	internal int index; // 0x1C
	internal int[] blens; // 0x20
	internal int[] bb; // 0x28
	internal int[] tb; // 0x30
	internal InfCodes codes; // 0x38
	internal int last; // 0x40
	internal int bitk; // 0x44
	internal int bitb; // 0x48
	internal int[] hufts; // 0x50
	internal byte[] window; // 0x58
	internal int end; // 0x60
	internal int read; // 0x64
	internal int write; // 0x68
	internal object checkfn; // 0x70
	internal long check; // 0x78

	// Methods
	internal void .ctor(ZStream z, object checkfn, int w); // 0x10051E194
	private static void .cctor(); // 0x10051E334
	internal void reset(ZStream z, long[] c); // 0x10051E294
	internal int proc(ZStream z, int r); // 0x10051E414
	internal void free(ZStream z); // 0x100520CAC
	internal int inflate_flush(ZStream z, int r); // 0x10051F810
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class InfCodes // TypeDefIndex: 2798
{
	// Fields
	private static readonly int[] inflate_mask; // 0x0
	internal int mode; // 0x10
	internal int len; // 0x14
	internal int[] tree; // 0x18
	internal int tree_index; // 0x20
	internal int need; // 0x24
	internal int lit; // 0x28
	internal int get_Renamed; // 0x2C
	internal int dist; // 0x30
	internal byte lbits; // 0x34
	internal byte dbits; // 0x35
	internal int[] ltree; // 0x38
	internal int ltree_index; // 0x40
	internal int[] dtree; // 0x48
	internal int dtree_index; // 0x50

	// Methods
	internal void .ctor(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, ZStream z); // 0x10051FF00
	internal void .ctor(int bl, int bd, int[] tl, int[] td, ZStream z); // 0x10051FAE8
	private static void .cctor(); // 0x100520CD4
	internal int proc(InfBlocks s, ZStream z, int r); // 0x10051FF74
	internal void free(ZStream z); // 0x10051E410
	internal int inflate_fast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, InfBlocks s, ZStream z); // 0x100520D64
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class InfTree // TypeDefIndex: 2799
{
	// Fields
	internal static readonly int[] fixed_tl; // 0x0
	internal static readonly int[] fixed_td; // 0x8
	internal static readonly int[] cplens; // 0x10
	internal static readonly int[] cplext; // 0x18
	internal static readonly int[] cpdist; // 0x20
	internal static readonly int[] cpdext; // 0x28

	// Methods
	private static void .cctor(); // 0x10052236C
	internal static int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v); // 0x100522558
	internal static int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZStream z); // 0x10051FB4C
	internal static int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZStream z); // 0x10051FCA4
	internal static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZStream z); // 0x10051F9A4
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class Inflate // TypeDefIndex: 2800
{
	// Fields
	internal int mode; // 0x10
	internal int method; // 0x14
	internal long[] was; // 0x18
	internal long need; // 0x20
	internal int marker; // 0x28
	internal int nowrap; // 0x2C
	internal int wbits; // 0x30
	internal InfBlocks blocks; // 0x38
	private static byte[] mark; // 0x0

	// Methods
	public void .ctor(); // 0x1005219A0
	private static void .cctor(); // 0x100521A0C
	internal int inflateReset(ZStream z); // 0x100521ABC
	internal int inflateEnd(ZStream z); // 0x100521B14
	internal int inflateInit(ZStream z, int w); // 0x100521B50
	internal int inflate(ZStream z, int f); // 0x100521C34
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class StaticTree // TypeDefIndex: 2801
{
	// Fields
	private static readonly int L_CODES; // 0x0
	internal static readonly short[] static_ltree; // 0x8
	internal static readonly short[] static_dtree; // 0x10
	internal static StaticTree static_l_desc; // 0x18
	internal static StaticTree static_d_desc; // 0x20
	internal static StaticTree static_bl_desc; // 0x28
	internal short[] static_tree; // 0x10
	internal int[] extra_bits; // 0x18
	internal int extra_base; // 0x20
	internal int elems; // 0x24
	internal int max_length; // 0x28

	// Methods
	internal void .ctor(short[] static_tree, int[] extra_bits, int extra_base, int elems, int max_length); // 0x10052306C
	private static void .cctor(); // 0x1005230C0
}

// Namespace: ComponentAce.Compression.Libs.zlib
public class SupportClass // TypeDefIndex: 2802
{
	// Methods
	public static long Identity(long literal); // 0x10051A740
	public static int URShift(int number, int bits); // 0x10051B3A0
	public static long URShift(long number, int bits); // 0x10051E170
}

// Namespace: ComponentAce.Compression.Libs.zlib
internal sealed class Tree // TypeDefIndex: 2803
{
	// Fields
	private static readonly int L_CODES; // 0x0
	private static readonly int HEAP_SIZE; // 0x4
	internal static readonly int[] extra_lbits; // 0x8
	internal static readonly int[] extra_dbits; // 0x10
	internal static readonly int[] extra_blbits; // 0x18
	internal static readonly byte[] bl_order; // 0x20
	internal static readonly byte[] _dist_code; // 0x28
	internal static readonly byte[] _length_code; // 0x30
	internal static readonly int[] base_length; // 0x38
	internal static readonly int[] base_dist; // 0x40
	internal short[] dyn_tree; // 0x10
	internal int max_code; // 0x18
	internal StaticTree stat_desc; // 0x20

	// Methods
	public void .ctor(); // 0x100519510
	private static void .cctor(); // 0x1005232A4
	internal static int d_code(int dist); // 0x10051B87C
	internal void gen_bitlen(Deflate s); // 0x100523534
	internal void build_tree(Deflate s); // 0x10051A880
	internal static void gen_codes(short[] tree, int max_code, short[] bl_count); // 0x100523AB8
	internal static int bi_reverse(int code, int len); // 0x100523C84
}

// Namespace: ComponentAce.Compression.Libs.zlib
public class ZOutputStream : Stream // TypeDefIndex: 2804
{
	// Fields
	protected internal ZStream z; // 0x18
	protected internal int bufsize; // 0x20
	protected internal int flush_Renamed_Field; // 0x24
	protected internal byte[] buf; // 0x28
	protected internal byte[] buf1; // 0x30
	protected internal bool compress; // 0x38
	private Stream out_Renamed; // 0x40
	private bool disposed; // 0x48

	// Methods
	public void .ctor(Stream out_Renamed); // 0x100523CC8
	public void .ctor(Stream out_Renamed, int level); // 0x100523EF4
	private void InitBlock(); // 0x100523E10
	public void WriteByte(int b); // 0x100523FEC
	public override void WriteByte(byte b); // 0x100524074
	public override void Write(byte[] b1, int off, int len); // 0x100524078
	public virtual void finish(); // 0x1005242E4
	public virtual void end(); // 0x100524548
	protected override void Dispose(bool disposing); // 0x100524698
	public override void Flush(); // 0x10052481C
	public override int Read(byte[] buffer, int offset, int count); // 0x100524870
	public override void SetLength(long value); // 0x100524878
	public override long Seek(long offset, SeekOrigin origin); // 0x10052487C
	public override bool get_CanRead(); // 0x100524884
	public override bool get_CanSeek(); // 0x10052488C
	public override bool get_CanWrite(); // 0x100524894
	public override long get_Length(); // 0x10052489C
	public override long get_Position(); // 0x1005248A4
	public override void set_Position(long value); // 0x1005248AC
}

// Namespace: ComponentAce.Compression.Libs.zlib
public sealed class ZStream // TypeDefIndex: 2805
{
	// Fields
	private static readonly int DEF_WBITS; // 0x0
	public byte[] next_in; // 0x10
	public int next_in_index; // 0x18
	public int avail_in; // 0x1C
	public long total_in; // 0x20
	public byte[] next_out; // 0x28
	public int next_out_index; // 0x30
	public int avail_out; // 0x34
	public long total_out; // 0x38
	public string msg; // 0x40
	internal Deflate dstate; // 0x48
	internal Inflate istate; // 0x50
	internal int data_type; // 0x58
	public long adler; // 0x60
	internal Adler32 _adler; // 0x68

	// Methods
	public void .ctor(); // 0x100523DA8
	private static void .cctor(); // 0x1005248B0
	public int inflateInit(); // 0x100523E84
	public int inflateInit(int w); // 0x100524904
	public int inflate(int f); // 0x1005242BC
	public int inflateEnd(); // 0x100524628
	public int deflateInit(int level); // 0x100523FE4
	public int deflateInit(int level, int bits); // 0x100524980
	public int deflate(int flush); // 0x100524298
	public int deflateEnd(); // 0x1005245D0
	internal void flush_pending(); // 0x10051C100
	internal int read_buf(byte[] buf, int start, int size); // 0x10051C6A4
	public void free(); // 0x100524684
}

// Namespace: ComponentAce.Compression.Libs.zlib
public class ZStreamException : IOException // TypeDefIndex: 2806
{
	// Methods
	public void .ctor(string s); // 0x1005242DC
}

// Namespace: Sfs2X.Util
public sealed class UseWebSocket : Enum // TypeDefIndex: 2807
{
	// Fields
	public int value__; // 0x10
	public const UseWebSocket WS = 0; // 0x0
	public const UseWebSocket WSS = 1; // 0x0

}

// Namespace: Sfs2X.Bitswarm
public class WebSocketClient : ISocketClient, IDispatchable // TypeDefIndex: 2808
{
	// Fields
	private ISocketLayer socket; // 0x10
	private IoHandler ioHandler; // 0x18
	private Dictionary`2<int, IController> controllers; // 0x20
	private int maxMessageSize; // 0x28
	private SmartFox sfs; // 0x30
	private string lastHost; // 0x38
	private int lastWsPort; // 0x40
	private bool useWSS; // 0x44
	private Logger log; // 0x48
	private SystemController sysController; // 0x50
	private ExtensionController extController; // 0x58
	private bool controllersInited; // 0x60
	private EventDispatcher dispatcher; // 0x68

	// Methods
	public void .ctor(SmartFox sfs, bool useWSS); // 0x10052AC00
	public string get_ConnectionMode(); // 0x10052ACB4
	public bool get_Debug(); // 0x10052AD4C
	public SmartFox get_Sfs(); // 0x10052AD64
	public bool get_Connected(); // 0x10052AD6C
	public void set_IoHandler(IoHandler value); // 0x10052AE70
	public int get_CompressionThreshold(); // 0x10052AEF4
	public void set_CompressionThreshold(int value); // 0x10052AEFC
	public int get_MaxMessageSize(); // 0x10052B200
	public void set_MaxMessageSize(int value); // 0x10052B208
	public ISocketLayer get_Socket(); // 0x10052B210
	public bool get_IsReconnecting(); // 0x10052B218
	public void set_IsReconnecting(bool value); // 0x10052B220
	public int get_ReconnectionSeconds(); // 0x10052B27C
	public void set_ReconnectionSeconds(int value); // 0x10052B284
	public EventDispatcher get_Dispatcher(); // 0x10052B2E0
	public Logger get_Log(); // 0x10052B2E8
	public void ForceBlueBox(bool val); // 0x10052B364
	public void Init(); // 0x10052B3C0
	public void Destroy(); // 0x10052BC1C
	public IController GetController(int id); // 0x10052C3FC
	public void Connect(string host, int port); // 0x10052C464
	public void Send(IMessage message); // 0x10052C574
	public void Disconnect(string reason); // 0x10052C700
	public void StopReconnection(); // 0x10052C804
	public long NextUdpPacketId(); // 0x10052C860
	private void AddController(int id, IController controller); // 0x10052C868
	private void InitControllers(); // 0x10052BB0C
	private void ExecuteDisconnection(); // 0x10052CAD0
	private void logUnsupportedFeature(string feature, string method); // 0x10052AF58
	private void OnSocketConnect(); // 0x10052CC08
	private void OnSocketClose(); // 0x10052CD8C
	private void OnSocketData(string data); // 0x10052CD90
	private void OnSocketError(string message, SocketError se); // 0x10052CE94
	private void DispatchEvent(BitSwarmEvent evt); // 0x10052CBF0
}

// Namespace: Sfs2X.Core.Sockets
public class WebSocketLayer : BaseSocketLayer, ISocketLayer // TypeDefIndex: 2809
{
	// Fields
	private WebSocketHelper wsh; // 0x30
	private bool useWSS; // 0x38
	private ConnectionDelegate onConnect; // 0x40
	private ConnectionDelegate onDisconnect; // 0x48
	private OnStringDataDelegate onData; // 0x50
	private OnErrorDelegate onError; // 0x58

	// Methods
	public void .ctor(WebSocketClient wsc, bool useWSS); // 0x10052BBA8
	private void LogWarn(string msg); // 0x10054D5AC
	private void LogError(string msg); // 0x10054D6BC
	public void Connect(string host, int port); // 0x10054D7CC
	public void Disconnect(); // 0x10054DB40
	public void Disconnect(string reason); // 0x10054DB48
	public void Write(byte[] data); // 0x10054DC9C
	public void Write(string data); // 0x10054DD08
	public bool get_IsConnected(); // 0x10054DD94
	public ConnectionDelegate get_OnConnect(); // 0x10054DDB0
	public void set_OnConnect(ConnectionDelegate value); // 0x10054DDB8
	public ConnectionDelegate get_OnDisconnect(); // 0x10054DDC0
	public void set_OnDisconnect(ConnectionDelegate value); // 0x10054DDC8
	public OnDataDelegate get_OnData(); // 0x10054DDD0
	public void set_OnData(OnDataDelegate value); // 0x10054DDD8
	public OnStringDataDelegate get_OnStringData(); // 0x10054DDDC
	public void set_OnStringData(OnStringDataDelegate value); // 0x10054DDE4
	public OnErrorDelegate get_OnError(); // 0x10054DDEC
	public void set_OnError(OnErrorDelegate value); // 0x10054DDF4
	public void ProcessState(); // 0x10054DDFC
	private void HandleError(string err, Exception e); // 0x10054E0C4
	private void HandleDisconnection(); // 0x10054E204
	private void HandleDisconnection(string reason); // 0x10054DBF4
	private void CallOnConnect(); // 0x10054E1DC
	private void CallOnDisconnect(); // 0x10054E20C
	private void CallOnData(string data); // 0x10054E1F0
}

// Namespace: Sfs2X.Core
public class WSIOHandler : IoHandler // TypeDefIndex: 2810
{
	// Fields
	private ISocketClient socketClient; // 0x10
	private Logger log; // 0x18
	private IProtocolCodec protocolCodec; // 0x20

	// Methods
	public void .ctor(ISocketClient socketClient); // 0x10054EAA8
	public IProtocolCodec get_Codec(); // 0x10054EC10
	public void OnDataWrite(IMessage message); // 0x10054EC18
	public void OnDataRead(string jsonData); // 0x10054F308
	public void OnDataRead(ByteArray data); // 0x10054F61C
}

// Namespace: Sfs2X.Core.Sockets
public class WebSocketHelper // TypeDefIndex: 2811
{
	// Fields
	private Uri url; // 0x10
	private Logger log; // 0x18
	private WebSocket socket; // 0x20
	private Queue`1<byte[]> binaryQueue; // 0x28
	private Queue`1<string> stringQueue; // 0x30
	private bool isConnected; // 0x38
	private WebSocketError error; // 0x40

	// Methods
	public void .ctor(Uri url, Logger log); // 0x10054CF90
	public void Connect(); // 0x10054D104
	public bool get_IsConnected(); // 0x10054D340
	public void Send(string str); // 0x10054D348
	public string ReceiveString(); // 0x10054D368
	public void Close(); // 0x10054D3E8
	public WebSocketError get_Error(); // 0x10054D420
	private void HandleOnMessage(object sender, MessageEventArgs e); // 0x10054D428
	private void HandleOnOpen(object sender, EventArgs e); // 0x10054D508
	private void HandleOnError(object sender, ErrorEventArgs e); // 0x10054D514
}

// Namespace: Sfs2X.Core.Sockets
public class WebSocketError // TypeDefIndex: 2812
{
	// Fields
	private Exception _exception; // 0x10
	private string _message; // 0x18

	// Methods
	public void .ctor(string message, Exception exception); // 0x10054CF48
	public Exception get_Exception(); // 0x10054CF80
	public string get_Message(); // 0x10054CF88
}

// Namespace: Sfs2X.Core
public class WSProtocolCodec : IProtocolCodec // TypeDefIndex: 2813
{
	// Fields
	private static readonly string CONTROLLER_ID; // 0x0
	private static readonly string ACTION_ID; // 0x8
	private static readonly string PARAM_ID; // 0x10
	private IoHandler ioHandler; // 0x10
	private ISocketClient socketClient; // 0x18

	// Methods
	public void .ctor(IoHandler ioHandler, ISocketClient socketClient); // 0x10054EBD4
	private static void .cctor(); // 0x10054F620
	public void OnPacketRead(ISFSObject packet); // 0x10054F6A4
	public void OnPacketRead(ByteArray packet); // 0x10054FDE0
	public void OnPacketWrite(IMessage message); // 0x10054FDE4
	private ISFSObject PrepareWSPacket(IMessage message); // 0x10054FF84
	private void DispatchRequest(ISFSObject requestObject); // 0x10054F6A8
}

// Namespace: SFSLitJson
public sealed class JsonType : Enum // TypeDefIndex: 2814
{
	// Fields
	public int value__; // 0x10
	public const JsonType None = 0; // 0x0
	public const JsonType Object = 1; // 0x0
	public const JsonType Array = 2; // 0x0
	public const JsonType String = 3; // 0x0
	public const JsonType Int = 4; // 0x0
	public const JsonType Long = 5; // 0x0
	public const JsonType Double = 6; // 0x0
	public const JsonType Boolean = 7; // 0x0

}

// Namespace: SFSLitJson
public interface IJsonWrapper : IDictionary, ICollection, IEnumerable, IList, IOrderedDictionary // TypeDefIndex: 2815
{
	// Methods
	public abstract bool get_IsArray(); // 0
	public abstract bool get_IsBoolean(); // 0
	public abstract bool get_IsDouble(); // 0
	public abstract bool get_IsInt(); // 0
	public abstract bool get_IsLong(); // 0
	public abstract bool get_IsObject(); // 0
	public abstract bool get_IsString(); // 0
	public abstract bool GetBoolean(); // 0
	public abstract double GetDouble(); // 0
	public abstract int GetInt(); // 0
	public abstract long GetLong(); // 0
	public abstract string GetString(); // 0
	public abstract void SetBoolean(bool val); // 0
	public abstract void SetDouble(double val); // 0
	public abstract void SetInt(int val); // 0
	public abstract void SetJsonType(JsonType type); // 0
	public abstract void SetLong(long val); // 0
	public abstract void SetString(string val); // 0
	public abstract string ToJson(); // 0
	public abstract void ToJson(JsonWriter writer); // 0
}

// Namespace: SFSLitJson
public class JsonData : IDictionary, ICollection, IEnumerable, IList, IOrderedDictionary, IJsonWrapper, IEquatable`1<JsonData> // TypeDefIndex: 2816
{
	// Fields
	private IList`1<JsonData> inst_array; // 0x10
	private bool inst_boolean; // 0x18
	private double inst_double; // 0x20
	private int inst_int; // 0x28
	private long inst_long; // 0x30
	private IDictionary`2<string, JsonData> inst_object; // 0x38
	private string inst_string; // 0x40
	private string json; // 0x48
	private JsonType type; // 0x50
	private IList`1<KeyValuePair`2<string, JsonData>> object_list; // 0x58

	// Methods
	public void .ctor(); // 0x10057B814
	public void .ctor(object obj); // 0x10057B81C
	private int System.Collections.ICollection.get_Count(); // 0x10057B990
	private bool System.Collections.ICollection.get_IsSynchronized(); // 0x10057B994
	private object System.Collections.ICollection.get_SyncRoot(); // 0x10057BBFC
	private ICollection System.Collections.IDictionary.get_Keys(); // 0x10057BCF8
	private ICollection System.Collections.IDictionary.get_Values(); // 0x10057C35C
	private bool SFSLitJson.IJsonWrapper.get_IsArray(); // 0x10057C800
	private bool SFSLitJson.IJsonWrapper.get_IsBoolean(); // 0x10057C810
	private bool SFSLitJson.IJsonWrapper.get_IsDouble(); // 0x10057C820
	private bool SFSLitJson.IJsonWrapper.get_IsInt(); // 0x10057C830
	private bool SFSLitJson.IJsonWrapper.get_IsLong(); // 0x10057C840
	private bool SFSLitJson.IJsonWrapper.get_IsObject(); // 0x10057C850
	private bool SFSLitJson.IJsonWrapper.get_IsString(); // 0x10057C860
	private bool System.Collections.IList.get_IsFixedSize(); // 0x10057C870
	private bool System.Collections.IList.get_IsReadOnly(); // 0x10057CAFC
	private object System.Collections.IDictionary.get_Item(object key); // 0x10057CBF8
	private void System.Collections.IDictionary.set_Item(object key, object value); // 0x10057CD00
	private object System.Collections.IList.get_Item(int index); // 0x10057D34C
	private void System.Collections.IList.set_Item(int index, object value); // 0x10057D458
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x10057D7C8
	private void System.Collections.IDictionary.Add(object key, object value); // 0x10057D8DC
	private void System.Collections.IDictionary.Clear(); // 0x10057DB2C
	private bool System.Collections.IDictionary.Contains(object key); // 0x10057DCB0
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator(); // 0x10057DDBC
	private void System.Collections.IDictionary.Remove(object key); // 0x10057DEA0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10057E230
	private bool SFSLitJson.IJsonWrapper.GetBoolean(); // 0x10057E328
	private double SFSLitJson.IJsonWrapper.GetDouble(); // 0x10057E3A8
	private int SFSLitJson.IJsonWrapper.GetInt(); // 0x10057E428
	private long SFSLitJson.IJsonWrapper.GetLong(); // 0x10057E4A8
	private string SFSLitJson.IJsonWrapper.GetString(); // 0x10057E528
	private void SFSLitJson.IJsonWrapper.SetBoolean(bool val); // 0x10057E5A8
	private void SFSLitJson.IJsonWrapper.SetDouble(double val); // 0x10057E5BC
	private void SFSLitJson.IJsonWrapper.SetInt(int val); // 0x10057E5D0
	private void SFSLitJson.IJsonWrapper.SetLong(long val); // 0x10057E5E4
	private void SFSLitJson.IJsonWrapper.SetString(string val); // 0x10057E5F8
	private string SFSLitJson.IJsonWrapper.ToJson(); // 0x10057E608
	private void SFSLitJson.IJsonWrapper.ToJson(JsonWriter writer); // 0x10057E6D8
	private int System.Collections.IList.Add(object value); // 0x10057E718
	private void System.Collections.IList.Clear(); // 0x10057E838
	private bool System.Collections.IList.Contains(object value); // 0x10057E934
	private int System.Collections.IList.IndexOf(object value); // 0x10057EA40
	private void System.Collections.IList.Insert(int index, object value); // 0x10057EB4C
	private void System.Collections.IList.Remove(object value); // 0x10057EC60
	private void System.Collections.IList.RemoveAt(int index); // 0x10057ED6C
	private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator(); // 0x10057EE78
	public int get_Count(); // 0x100566FC4
	public bool get_IsArray(); // 0x1005673C4
	public bool get_IsBoolean(); // 0x100567284
	public bool get_IsDouble(); // 0x1005671EC
	public bool get_IsInt(); // 0x1005670BC
	public bool get_IsLong(); // 0x100567154
	public bool get_IsObject(); // 0x1005673B4
	public bool get_IsString(); // 0x10056731C
	public ICollection`1<string> get_Keys(); // 0x100566654
	public JsonData get_Item(string prop_name); // 0x100566750
	public void set_Item(string prop_name, JsonData value); // 0x10057CED4
	public JsonData get_Item(int index); // 0x100566E04
	public void set_Item(int index, JsonData value); // 0x10057D49C
	private ICollection EnsureCollection(); // 0x10057BA90
	private IDictionary EnsureDictionary(); // 0x10057C19C
	private IList EnsureList(); // 0x10057C968
	private JsonData ToJsonData(object obj); // 0x10057CE28
	private static void WriteJson(IJsonWrapper obj, JsonWriter writer); // 0x10057EFC0
	public int Add(object value); // 0x10057E71C
	public bool Equals(JsonData x); // 0x1005805FC
	public void SetJsonType(JsonType type); // 0x1005807A8
	public string ToJson(); // 0x10057E60C
	public void ToJson(JsonWriter writer); // 0x10057E6DC
	public override string ToString(); // 0x1005809A8
	public static bool op_Explicit(JsonData data); // 0x100567294
	public static double op_Explicit(JsonData data); // 0x1005671FC
	public static int op_Explicit(JsonData data); // 0x1005670CC
	public static long op_Explicit(JsonData data); // 0x100567164
	public static string op_Explicit(JsonData data); // 0x10056732C
}

// Namespace: SFSLitJson
internal class OrderedDictionaryEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 2817
{
	// Fields
	private IEnumerator`1<KeyValuePair`2<string, JsonData>> list_enumerator; // 0x10

	// Methods
	public void .ctor(IEnumerator`1<KeyValuePair`2<string, JsonData>> enumerator); // 0x10057EF94
	public object get_Current(); // 0x10058AC68
	public DictionaryEntry get_Entry(); // 0x10058ACD0
	public object get_Key(); // 0x10058AE14
	public object get_Value(); // 0x10058AF24
	public bool MoveNext(); // 0x10058B034
	public void Reset(); // 0x10058B128
}

// Namespace: SFSLitJson
public class JsonException : ApplicationException // TypeDefIndex: 2818
{
	// Methods
	internal void .ctor(ParserToken token, Exception inner_exception); // 0x100580ABC
	internal void .ctor(int c); // 0x100580B80
	public void .ctor(string message); // 0x100580C3C
}

// Namespace: SFSLitJson
internal struct PropertyMetadata // TypeDefIndex: 2819
{
	// Fields
	public MemberInfo Info; // 0x10
	public bool IsField; // 0x18
	public Type Type; // 0x20

}

// Namespace: SFSLitJson
internal struct ArrayMetadata // TypeDefIndex: 2820
{
	// Fields
	private Type element_type; // 0x10
	private bool is_array; // 0x18
	private bool is_list; // 0x19

}

// Namespace: SFSLitJson
internal struct ObjectMetadata // TypeDefIndex: 2821
{
	// Fields
	private Type element_type; // 0x10
	private bool is_dictionary; // 0x18
	private IDictionary`2<string, PropertyMetadata> properties; // 0x20

}

// Namespace: SFSLitJson
internal sealed class ExporterFunc : MulticastDelegate // TypeDefIndex: 2822
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10057B5CC
	public virtual void Invoke(object obj, JsonWriter writer); // 0x10057B5DC
	public virtual IAsyncResult BeginInvoke(object obj, JsonWriter writer, AsyncCallback callback, object object); // 0x10057B69C
	public virtual void EndInvoke(IAsyncResult result); // 0x10057B6F8
}

// Namespace: SFSLitJson
internal sealed class ImporterFunc : MulticastDelegate // TypeDefIndex: 2823
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10057B70C
	public virtual object Invoke(object input); // 0x10057B71C
	public virtual IAsyncResult BeginInvoke(object input, AsyncCallback callback, object object); // 0x10057B7B8
	public virtual object EndInvoke(IAsyncResult result); // 0x10057B808
}

// Namespace: SFSLitJson
public sealed class WrapperFactory : MulticastDelegate // TypeDefIndex: 2824
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1005858D8
	public virtual IJsonWrapper Invoke(); // 0x1005838C8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10058B250
	public virtual IJsonWrapper EndInvoke(IAsyncResult result); // 0x10058B2B0
}

// Namespace: SFSLitJson
public class JsonMapper // TypeDefIndex: 2825
{
	// Fields
	private static int max_nesting_depth; // 0x0
	private static IFormatProvider datetime_format; // 0x8
	private static IDictionary`2<Type, ExporterFunc> base_exporters_table; // 0x10
	private static IDictionary`2<Type, ExporterFunc> custom_exporters_table; // 0x18
	private static IDictionary`2<Type, IDictionary`2<Type, ImporterFunc>> base_importers_table; // 0x20
	private static IDictionary`2<Type, IDictionary`2<Type, ImporterFunc>> custom_importers_table; // 0x28
	private static IDictionary`2<Type, ArrayMetadata> array_metadata; // 0x30
	private static readonly object array_metadata_lock; // 0x38
	private static IDictionary`2<Type, IDictionary`2<Type, MethodInfo>> conv_ops; // 0x40
	private static readonly object conv_ops_lock; // 0x48
	private static IDictionary`2<Type, ObjectMetadata> object_metadata; // 0x50
	private static readonly object object_metadata_lock; // 0x58
	private static IDictionary`2<Type, IList`1<PropertyMetadata>> type_properties; // 0x60
	private static readonly object type_properties_lock; // 0x68
	private static JsonWriter static_writer; // 0x70
	private static readonly object static_writer_lock; // 0x78
	private static ExporterFunc <>f__am$cache11; // 0x80
	private static ExporterFunc <>f__am$cache12; // 0x88
	private static ExporterFunc <>f__am$cache13; // 0x90
	private static ExporterFunc <>f__am$cache14; // 0x98
	private static ExporterFunc <>f__am$cache15; // 0xA0
	private static ExporterFunc <>f__am$cache16; // 0xA8
	private static ExporterFunc <>f__am$cache17; // 0xB0
	private static ExporterFunc <>f__am$cache18; // 0xB8
	private static ExporterFunc <>f__am$cache19; // 0xC0
	private static ImporterFunc <>f__am$cache1A; // 0xC8
	private static ImporterFunc <>f__am$cache1B; // 0xD0
	private static ImporterFunc <>f__am$cache1C; // 0xD8
	private static ImporterFunc <>f__am$cache1D; // 0xE0
	private static ImporterFunc <>f__am$cache1E; // 0xE8
	private static ImporterFunc <>f__am$cache1F; // 0xF0
	private static ImporterFunc <>f__am$cache20; // 0xF8
	private static ImporterFunc <>f__am$cache21; // 0x100
	private static ImporterFunc <>f__am$cache22; // 0x108
	private static ImporterFunc <>f__am$cache23; // 0x110
	private static ImporterFunc <>f__am$cache24; // 0x118
	private static ImporterFunc <>f__am$cache25; // 0x120
	private static WrapperFactory <>f__am$cache28; // 0x128

	// Methods
	private static void .cctor(); // 0x100580C44
	private static void AddTypeProperties(Type type); // 0x10058266C
	private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader); // 0x100582CA8
	private static void RegisterBaseExporters(); // 0x100580F9C
	private static void RegisterBaseImporters(); // 0x100581B94
	private static void RegisterImporter(IDictionary`2<Type, IDictionary`2<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer); // 0x100583960
	private static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth); // 0x100583C20
	public static string ToJson(object obj); // 0x1005656C4
	public static JsonData ToObject(string json); // 0x1005660BC
	public static IJsonWrapper ToWrapper(WrapperFactory factory, string json); // 0x1005858E8
	private static void <RegisterBaseExporters>m__1(object obj, JsonWriter writer); // 0x1005859F0
	private static void <RegisterBaseExporters>m__2(object obj, JsonWriter writer); // 0x100585A90
	private static void <RegisterBaseExporters>m__3(object obj, JsonWriter writer); // 0x100585B30
	private static void <RegisterBaseExporters>m__4(object obj, JsonWriter writer); // 0x100585C00
	private static void <RegisterBaseExporters>m__5(object obj, JsonWriter writer); // 0x100585D58
	private static void <RegisterBaseExporters>m__6(object obj, JsonWriter writer); // 0x100585DF8
	private static void <RegisterBaseExporters>m__7(object obj, JsonWriter writer); // 0x100585E98
	private static void <RegisterBaseExporters>m__8(object obj, JsonWriter writer); // 0x100585F38
	private static void <RegisterBaseExporters>m__9(object obj, JsonWriter writer); // 0x100585FD8
	private static object <RegisterBaseImporters>m__A(object input); // 0x100586048
	private static object <RegisterBaseImporters>m__B(object input); // 0x1005860EC
	private static object <RegisterBaseImporters>m__C(object input); // 0x100586190
	private static object <RegisterBaseImporters>m__D(object input); // 0x100586234
	private static object <RegisterBaseImporters>m__E(object input); // 0x1005862D8
	private static object <RegisterBaseImporters>m__F(object input); // 0x10058637C
	private static object <RegisterBaseImporters>m__10(object input); // 0x100586420
	private static object <RegisterBaseImporters>m__11(object input); // 0x1005864C4
	private static object <RegisterBaseImporters>m__12(object input); // 0x100586568
	private static object <RegisterBaseImporters>m__13(object input); // 0x10058660C
	private static object <RegisterBaseImporters>m__14(object input); // 0x1005866B0
	private static object <RegisterBaseImporters>m__15(object input); // 0x1005867B4
	private static IJsonWrapper <ToObject>m__18(); // 0x1005868E8
}

// Namespace: SFSLitJson
public sealed class JsonToken : Enum // TypeDefIndex: 2826
{
	// Fields
	public int value__; // 0x10
	public const JsonToken None = 0; // 0x0
	public const JsonToken ObjectStart = 1; // 0x0
	public const JsonToken PropertyName = 2; // 0x0
	public const JsonToken ObjectEnd = 3; // 0x0
	public const JsonToken ArrayStart = 4; // 0x0
	public const JsonToken ArrayEnd = 5; // 0x0
	public const JsonToken Int = 6; // 0x0
	public const JsonToken Long = 7; // 0x0
	public const JsonToken Double = 8; // 0x0
	public const JsonToken String = 9; // 0x0
	public const JsonToken Boolean = 10; // 0x0
	public const JsonToken Null = 11; // 0x0

}

// Namespace: SFSLitJson
public class JsonReader // TypeDefIndex: 2827
{
	// Fields
	private static IDictionary`2<int, IDictionary`2<int, int[]>> parse_table; // 0x0
	private Stack`1<int> automaton_stack; // 0x10
	private int current_input; // 0x18
	private int current_symbol; // 0x1C
	private bool end_of_json; // 0x20
	private bool end_of_input; // 0x21
	private Lexer lexer; // 0x28
	private bool parser_in_string; // 0x30
	private bool parser_return; // 0x31
	private bool read_started; // 0x32
	private TextReader reader; // 0x38
	private bool reader_is_owned; // 0x40
	private bool skip_non_members; // 0x41
	private object token_value; // 0x48
	private JsonToken token; // 0x50

	// Methods
	public void .ctor(string json_text); // 0x100585978
	private void .ctor(TextReader reader, bool owned); // 0x100586944
	private static void .cctor(); // 0x100586B44
	public JsonToken get_Token(); // 0x1005838C0
	public object get_Value(); // 0x100583958
	private static void PopulateParseTable(); // 0x100586B80
	private static void TableAddCol(ParserToken row, int col, int[] symbols); // 0x1005875D4
	private static void TableAddRow(ParserToken rule); // 0x100587488
	private void ProcessNumber(string number); // 0x100587798
	private void ProcessSymbol(); // 0x100587968
	private bool ReadToken(); // 0x100587B30
	public void Close(); // 0x100587D8C
	public bool Read(); // 0x100583434
}

// Namespace: SFSLitJson
internal sealed class Condition : Enum // TypeDefIndex: 2828
{
	// Fields
	public int value__; // 0x10
	public const Condition InArray = 0; // 0x0
	public const Condition InObject = 1; // 0x0
	public const Condition NotAProperty = 2; // 0x0
	public const Condition Property = 3; // 0x0
	public const Condition Value = 4; // 0x0

}

// Namespace: SFSLitJson
internal class WriterContext // TypeDefIndex: 2829
{
	// Fields
	public int Count; // 0x10
	public bool InArray; // 0x14
	public bool InObject; // 0x15
	public bool ExpectingValue; // 0x16
	public int Padding; // 0x18

	// Methods
	public void .ctor(); // 0x100588150
}

// Namespace: SFSLitJson
public class JsonWriter // TypeDefIndex: 2830
{
	// Fields
	private static NumberFormatInfo number_format; // 0x0
	private WriterContext context; // 0x10
	private Stack`1<WriterContext> ctx_stack; // 0x18
	private bool has_reached_end; // 0x20
	private char[] hex_seq; // 0x28
	private int indentation; // 0x30
	private int indent_value; // 0x34
	private StringBuilder inst_string_builder; // 0x38
	private bool pretty_print; // 0x40
	private bool validate; // 0x41
	private TextWriter writer; // 0x48

	// Methods
	public void .ctor(); // 0x100580F00
	public void .ctor(TextWriter writer); // 0x100580904
	private static void .cctor(); // 0x100587EE4
	public TextWriter get_TextWriter(); // 0x1005855C0
	public bool get_Validate(); // 0x1005809A0
	public void set_Validate(bool value); // 0x100580998
	private void DoValidation(Condition cond); // 0x100587F60
	private void Init(); // 0x100587E04
	private static void IntToHex(int n, char[] hex); // 0x100588158
	private void Indent(); // 0x1005881FC
	private void Put(string str); // 0x100588214
	private void PutNewline(); // 0x1005882EC
	private void PutNewline(bool add_comma); // 0x1005882F4
	private void PutString(string str); // 0x1005883D4
	private void Unindent(); // 0x1005887AC
	public override string ToString(); // 0x1005887C4
	public void Reset(); // 0x10058580C
	public void Write(bool boolean); // 0x10057FD2C
	public void Write(Decimal number); // 0x100585C70
	public void Write(float number); // 0x1005855C8
	public void Write(double number); // 0x10057FDC8
	public void Write(int number); // 0x10057FF2C
	public void Write(long number); // 0x10058000C
	public void Write(string str); // 0x10057FC90
	public void Write(ulong number); // 0x10058572C
	public void WriteArrayEnd(); // 0x1005801C0
	public void WriteArrayStart(); // 0x1005800EC
	public void WriteObjectEnd(); // 0x100580514
	public void WriteObjectStart(); // 0x1005802A8
	public void WritePropertyName(string property_name); // 0x10058037C
}

// Namespace: SFSLitJson
internal class FsmContext // TypeDefIndex: 2831
{
	// Fields
	public bool Return; // 0x10
	public int NextState; // 0x14
	public Lexer L; // 0x18
	public int StateStack; // 0x20

	// Methods
	public void .ctor(); // 0x10057B704
}

// Namespace: SFSLitJson
internal class Lexer // TypeDefIndex: 2832
{
	// Fields
	private static int[] fsm_return_table; // 0x0
	private static StateHandler[] fsm_handler_table; // 0x8
	private bool allow_comments; // 0x10
	private bool allow_single_quoted_strings; // 0x11
	private bool end_of_input; // 0x12
	private FsmContext fsm_context; // 0x18
	private int input_buffer; // 0x20
	private int input_char; // 0x24
	private TextReader reader; // 0x28
	private int state; // 0x30
	private StringBuilder string_buffer; // 0x38
	private string string_value; // 0x40
	private int token; // 0x48
	private int unichar; // 0x4C

	// Methods
	public void .ctor(TextReader reader); // 0x100586A80
	private static void .cctor(); // 0x100588878
	public bool get_EndOfInput(); // 0x100587D84
	public int get_Token(); // 0x100587DFC
	public string get_StringValue(); // 0x100587B28
	private static int HexValue(int digit); // 0x1005893B0
	private static void PopulateFsmTables(); // 0x1005888B4
	private static char ProcessEscChar(int esc_char); // 0x1005894A0
	private static bool State1(FsmContext ctx); // 0x1005895B0
	private static bool State2(FsmContext ctx); // 0x10058985C
	private static bool State3(FsmContext ctx); // 0x100589908
	private static bool State4(FsmContext ctx); // 0x100589AB0
	private static bool State5(FsmContext ctx); // 0x100589C10
	private static bool State6(FsmContext ctx); // 0x100589C98
	private static bool State7(FsmContext ctx); // 0x100589DA4
	private static bool State8(FsmContext ctx); // 0x100589E5C
	private static bool State9(FsmContext ctx); // 0x100589F34
	private static bool State10(FsmContext ctx); // 0x100589FA4
	private static bool State11(FsmContext ctx); // 0x10058A014
	private static bool State12(FsmContext ctx); // 0x10058A084
	private static bool State13(FsmContext ctx); // 0x10058A0F4
	private static bool State14(FsmContext ctx); // 0x10058A164
	private static bool State15(FsmContext ctx); // 0x10058A1D4
	private static bool State16(FsmContext ctx); // 0x10058A244
	private static bool State17(FsmContext ctx); // 0x10058A2B4
	private static bool State18(FsmContext ctx); // 0x10058A324
	private static bool State19(FsmContext ctx); // 0x10058A394
	private static bool State20(FsmContext ctx); // 0x10058A444
	private static bool State21(FsmContext ctx); // 0x10058A4B4
	private static bool State22(FsmContext ctx); // 0x10058A618
	private static bool State23(FsmContext ctx); // 0x10058A7A0
	private static bool State24(FsmContext ctx); // 0x10058A850
	private static bool State25(FsmContext ctx); // 0x10058A8C8
	private static bool State26(FsmContext ctx); // 0x10058A948
	private static bool State27(FsmContext ctx); // 0x10058A9B8
	private static bool State28(FsmContext ctx); // 0x10058AA28
	private bool GetChar(); // 0x100589820
	private int NextChar(); // 0x10058AAA8
	public bool NextToken(); // 0x100587B90
	private void UngetChar(); // 0x100589AA4
}

// Namespace: 
private sealed class StateHandler : MulticastDelegate // TypeDefIndex: 2833
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100589490
	public virtual bool Invoke(FsmContext ctx); // 0x10058AB1C
	public virtual IAsyncResult BeginInvoke(FsmContext ctx, AsyncCallback callback, object object); // 0x10058ABB8
	public virtual bool EndInvoke(IAsyncResult result); // 0x10058AC08
}

// Namespace: SFSLitJson
internal sealed class ParserToken : Enum // TypeDefIndex: 2834
{
	// Fields
	public int value__; // 0x10
	public const ParserToken None = 65536; // 0x0
	public const ParserToken Number = 65537; // 0x0
	public const ParserToken True = 65538; // 0x0
	public const ParserToken False = 65539; // 0x0
	public const ParserToken Null = 65540; // 0x0
	public const ParserToken CharSeq = 65541; // 0x0
	public const ParserToken Char = 65542; // 0x0
	public const ParserToken Text = 65543; // 0x0
	public const ParserToken Object = 65544; // 0x0
	public const ParserToken ObjectPrime = 65545; // 0x0
	public const ParserToken Pair = 65546; // 0x0
	public const ParserToken PairRest = 65547; // 0x0
	public const ParserToken Array = 65548; // 0x0
	public const ParserToken ArrayPrime = 65549; // 0x0
	public const ParserToken Value = 65550; // 0x0
	public const ParserToken ValueRest = 65551; // 0x0
	public const ParserToken String = 65552; // 0x0
	public const ParserToken End = 65553; // 0x0
	public const ParserToken Epsilon = 65554; // 0x0

}

// Namespace: WebSocketSharp
public sealed class ByteOrder : Enum // TypeDefIndex: 2835
{
	// Fields
	public byte value__; // 0x10
	public const ByteOrder Little = 0; // 0x0
	public const ByteOrder Big = 1; // 0x0

}

// Namespace: WebSocketSharp
public class CloseEventArgs : EventArgs // TypeDefIndex: 2836
{
	// Fields
	private bool _clean; // 0x10
	private ushort _code; // 0x12
	private PayloadData _payloadData; // 0x18
	private byte[] _rawData; // 0x20
	private string _reason; // 0x28

	// Methods
	internal void .ctor(); // 0x10058B2BC
	internal void .ctor(ushort code); // 0x10058B398
	internal void .ctor(CloseStatusCode code); // 0x10058B4F4
	internal void .ctor(PayloadData payloadData); // 0x10058B4F8
	internal void .ctor(ushort code, string reason); // 0x10058B72C
	internal void .ctor(CloseStatusCode code, string reason); // 0x10058BABC
	internal PayloadData get_PayloadData(); // 0x10058BAC0
	internal void set_WasClean(bool value); // 0x10058BB3C
}

// Namespace: WebSocketSharp
public sealed class CloseStatusCode : Enum // TypeDefIndex: 2837
{
	// Fields
	public ushort value__; // 0x10
	public const CloseStatusCode Normal = 1000; // 0x0
	public const CloseStatusCode Away = 1001; // 0x0
	public const CloseStatusCode ProtocolError = 1002; // 0x0
	public const CloseStatusCode IncorrectData = 1003; // 0x0
	public const CloseStatusCode Undefined = 1004; // 0x0
	public const CloseStatusCode NoStatusCode = 1005; // 0x0
	public const CloseStatusCode Abnormal = 1006; // 0x0
	public const CloseStatusCode InconsistentData = 1007; // 0x0
	public const CloseStatusCode PolicyViolation = 1008; // 0x0
	public const CloseStatusCode TooBig = 1009; // 0x0
	public const CloseStatusCode IgnoreExtension = 1010; // 0x0
	public const CloseStatusCode ServerError = 1011; // 0x0
	public const CloseStatusCode TlsHandshakeFailure = 1015; // 0x0

}

// Namespace: WebSocketSharp
public sealed class CompressionMethod : Enum // TypeDefIndex: 2838
{
	// Fields
	public byte value__; // 0x10
	public const CompressionMethod None = 0; // 0x0
	public const CompressionMethod Deflate = 1; // 0x0

}

// Namespace: WebSocketSharp
public class ErrorEventArgs : EventArgs // TypeDefIndex: 2839
{
	// Fields
	private Exception _exception; // 0x10
	private string _message; // 0x18

	// Methods
	internal void .ctor(string message, Exception exception); // 0x10058BB44
	public Exception get_Exception(); // 0x10058BBC4
	public string get_Message(); // 0x10058BBCC
}

// Namespace: WebSocketSharp
public static class Ext // TypeDefIndex: 2840
{
	// Fields
	private static Func`2<string, bool> <>f__am$cache0; // 0x0

	// Methods
	private static MemoryStream compress(Stream stream); // 0x10058BBD4
	private static byte[] decompress(byte[] data); // 0x10058BF04
	private static MemoryStream decompress(Stream stream); // 0x10058C220
	private static byte[] decompressToArray(Stream stream); // 0x10058C07C
	private static byte[] readBytes(Stream stream, byte[] buffer, int offset, int length); // 0x10058C430
	private static bool readBytes(Stream stream, byte[] buffer, int offset, int length, Stream destination); // 0x10058C608
	internal static byte[] Append(ushort code, string reason); // 0x10058B7FC
	internal static string CheckIfClosable(WebSocketState state); // 0x10058C698
	internal static string CheckIfConnectable(WebSocketState state); // 0x10058C704
	internal static string CheckIfOpen(WebSocketState state); // 0x10058C75C
	internal static string CheckIfValidProtocols(string[] protocols); // 0x10058C7D8
	internal static string CheckIfValidSendData(string data); // 0x10058C9A4
	internal static Stream Compress(Stream stream, CompressionMethod method); // 0x10058C9F8
	internal static bool Contains(IEnumerable`1<T> source, Func`2<T, bool> condition); // 0
	internal static bool ContainsTwice(string[] values); // 0x10058C8D0
	internal static void CopyTo(Stream source, Stream destination); // 0x10058BE10
	internal static byte[] Decompress(byte[] data, CompressionMethod method); // 0x10058CA14
	internal static byte[] DecompressToArray(Stream stream, CompressionMethod method); // 0x10058CA28
	internal static bool EqualsWith(int value, char c, Action`1<int> action); // 0x10058CC20
	internal static string GetAbsolutePath(Uri uri); // 0x10058CC98
	internal static string GetMessage(CloseStatusCode code); // 0x10058CDD0
	internal static string GetValue(string nameAndValue, char separator); // 0x10058CE6C
	internal static string GetValue(string nameAndValue, char separator, bool unquote); // 0x10058CEE8
	internal static byte[] InternalToByteArray(ushort value, ByteOrder order); // 0x10058B454
	internal static byte[] InternalToByteArray(ulong value, ByteOrder order); // 0x10058D0F8
	internal static bool IsCompressionExtension(string value, CompressionMethod method); // 0x10058D198
	internal static bool IsReserved(ushort code); // 0x10058D3B8
	internal static bool IsReserved(CloseStatusCode code); // 0x10058D3D4
	internal static bool IsText(string value); // 0x10058D3F0
	internal static bool IsToken(string value); // 0x10058D5DC
	internal static string Quote(string value); // 0x10058D6E4
	internal static byte[] ReadBytes(Stream stream, int length); // 0x10058D78C
	internal static byte[] ReadBytes(Stream stream, long length, int bufferLength); // 0x10058D808
	internal static void ReadBytesAsync(Stream stream, int length, Action`1<byte[]> completed, Action`1<Exception> error); // 0x10058DA64
	internal static T[] Reverse(T[] array); // 0
	internal static IEnumerable`1<string> SplitHeaderValue(string value, char[] separators); // 0x10058DBA0
	internal static byte[] ToByteArray(Stream stream); // 0x10058CA38
	internal static string ToExtensionString(CompressionMethod method, string[] parameters); // 0x10058D224
	internal static ushort ToUInt16(byte[] source, ByteOrder sourceOrder); // 0x10058B6A0
	internal static ulong ToUInt64(byte[] source, ByteOrder sourceOrder); // 0x10058DCF0
	internal static bool TryCreateWebSocketUri(string uriString, out Uri result, out string message); // 0x10058DD7C
	internal static string Unquote(string value); // 0x10058CF88
	internal static void WriteBytes(Stream stream, byte[] bytes); // 0x10058E2CC
	public static bool Contains(string value, char[] chars); // 0x10058D574
	public static bool Contains(NameValueCollection collection, string name); // 0x10058E438
	public static bool Contains(NameValueCollection collection, string name, string value); // 0x10058E4B0
	public static void Emit(EventHandler eventHandler, object sender, EventArgs e); // 0x10058E614
	public static void Emit(EventHandler`1<T> eventHandler, object sender, T e); // 0
	public static CookieCollection GetCookies(NameValueCollection headers, bool response); // 0x10058E630
	public static string GetDescription(HttpStatusCode code); // 0x10058E770
	public static string GetStatusDescription(int code); // 0x10058E774
	public static bool IsEnclosedIn(string value, char c); // 0x10058EBCC
	public static bool IsHostOrder(ByteOrder order); // 0x10058D074
	public static bool IsNullOrEmpty(string value); // 0x10058EC50
	public static bool IsPredefinedScheme(string value); // 0x10058EC80
	public static bool MaybeUri(string value); // 0x10058EFB8
	public static T[] SubArray(T[] array, int startIndex, int length); // 0
	public static T[] SubArray(T[] array, long startIndex, long length); // 0
	public static void Times(int n, Action`1<int> action); // 0x10058F034
	public static byte[] ToHostOrder(byte[] source, ByteOrder sourceOrder); // 0x10058DC30
	public static string ToString(T[] array, string separator); // 0
	public static Uri ToUri(string uriString); // 0x10058E228
	public static string UrlDecode(string value); // 0x10058F0B4
	public static string UrlEncode(string value); // 0x10058F148
	private static bool <CheckIfValidProtocols>m__1B(string protocol); // 0x10058F1DC
}

// Namespace: 
private sealed class <ContainsTwice>c__AnonStoreyC // TypeDefIndex: 2841
{
	// Fields
	internal int len; // 0x10
	internal string[] values; // 0x18
	internal Func`2<int, bool> contains; // 0x20

	// Methods
	public void .ctor(); // 0x10058CA0C
	internal bool <>m__1C(int idx); // 0x10058F220
}

// Namespace: 
private sealed class <ReadBytesAsync>c__AnonStoreyD // TypeDefIndex: 2842
{
	// Fields
	internal Stream stream; // 0x10
	internal int length; // 0x18
	internal byte[] buff; // 0x20
	internal Action`1<byte[]> completed; // 0x28
	internal Action`1<Exception> error; // 0x30

	// Methods
	public void .ctor(); // 0x10058DB98
	internal void <>m__1D(IAsyncResult ar); // 0x10058F388
}

// Namespace: 
private sealed class <SplitHeaderValue>c__Iterator1 : IDisposable, IEnumerator, IEnumerable`1<string>, IEnumerator`1<string>, IEnumerable // TypeDefIndex: 2843
{
	// Fields
	internal string value; // 0x10
	internal int <len>__0; // 0x18
	internal char[] separators; // 0x20
	internal string <seps>__1; // 0x28
	internal StringBuilder <buff>__2; // 0x30
	internal bool <escaped>__3; // 0x38
	internal bool <quoted>__4; // 0x39
	internal int <i>__5; // 0x3C
	internal char <c>__6; // 0x40
	internal int $PC; // 0x44
	internal string $current; // 0x48
	internal string <$>value; // 0x50
	internal char[] <$>separators; // 0x58

	// Methods
	public void .ctor(); // 0x10058DC28
	private string System.Collections.Generic.IEnumerator<string>.get_Current(); // 0x10058F5DC
	private object System.Collections.IEnumerator.get_Current(); // 0x10058F5E4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10058F5EC
	private IEnumerator`1<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator(); // 0x10058F5F0
	public bool MoveNext(); // 0x10058F68C
	public void Dispose(); // 0x10058F944
	public void Reset(); // 0x10058F950
}

// Namespace: 
private sealed class <ToString>c__AnonStoreyE`1 // TypeDefIndex: 2844
{
	// Fields
	internal StringBuilder buff; // 0x0
	internal T[] array; // 0x0
	internal string separator; // 0x0

	// Methods
	public void .ctor(); // 0
	internal void <>m__1E(int i); // 0
}

// Namespace: WebSocketSharp
internal sealed class Fin : Enum // TypeDefIndex: 2845
{
	// Fields
	public byte value__; // 0x10
	public const Fin More = 0; // 0x0
	public const Fin Final = 1; // 0x0

}

// Namespace: WebSocketSharp
internal abstract class HttpBase // TypeDefIndex: 2846
{
	// Fields
	private NameValueCollection _headers; // 0x10
	private Version _version; // 0x18
	internal byte[] EntityBodyData; // 0x20

	// Methods
	protected void .ctor(Version version, NameValueCollection headers); // 0x10058F9A4
	public string get_EntityBody(); // 0x10058F9DC
	public NameValueCollection get_Headers(); // 0x10058FB58
	public Version get_ProtocolVersion(); // 0x10058FB60
	private static byte[] readEntityBody(Stream stream, string length); // 0x10058FB68
	private static string[] readHeaders(Stream stream, int maxLength); // 0x10058FC88
	protected static T Read(Stream stream, Func`2<string[], T> parser, int millisecondsTimeout); // 0
	public byte[] ToByteArray(); // 0x10058FFD4
}

// Namespace: 
private sealed class <readHeaders>c__AnonStoreyF // TypeDefIndex: 2847
{
	// Fields
	internal List`1<byte> buff; // 0x10
	internal int cnt; // 0x18

	// Methods
	public void .ctor(); // 0x10058FFCC
	internal void <>m__1F(int i); // 0x1005900B0
}

// Namespace: 
private sealed class <Read>c__AnonStorey10`1 // TypeDefIndex: 2848
{
	// Fields
	internal bool timeout; // 0x0
	internal Stream stream; // 0x0

	// Methods
	public void .ctor(); // 0
	internal void <>m__20(object state); // 0
}

// Namespace: WebSocketSharp
internal class HttpRequest : HttpBase // TypeDefIndex: 2849
{
	// Fields
	private string _method; // 0x28
	private string _uri; // 0x30

	// Methods
	private void .ctor(string method, string uri, Version version, NameValueCollection headers); // 0x100590160
	internal void .ctor(string method, string uri); // 0x1005901AC
	internal static HttpRequest CreateConnectRequest(Uri uri); // 0x100590288
	internal static HttpRequest CreateWebSocketRequest(Uri uri); // 0x1005903B4
	internal HttpResponse GetResponse(Stream stream, int millisecondsTimeout); // 0x1005904DC
	public void SetCookies(CookieCollection cookies); // 0x1005905D4
	public override string ToString(); // 0x100590C50
}

// Namespace: WebSocketSharp
internal class HttpResponse : HttpBase // TypeDefIndex: 2850
{
	// Fields
	private string _code; // 0x28
	private string _reason; // 0x30

	// Methods
	private void .ctor(string code, string reason, Version version, NameValueCollection headers); // 0x100590F28
	internal void .ctor(HttpStatusCode code); // 0x100590F74
	internal void .ctor(HttpStatusCode code, string reason); // 0x100590FA4
	public CookieCollection get_Cookies(); // 0x1005910A0
	public bool get_HasConnectionClose(); // 0x1005910AC
	public bool get_IsProxyAuthenticationRequired(); // 0x100591108
	public bool get_IsRedirect(); // 0x100591184
	public bool get_IsUnauthorized(); // 0x100591258
	public bool get_IsWebSocketResponse(); // 0x1005912D4
	public string get_StatusCode(); // 0x1005913F0
	internal static HttpResponse CreateCloseResponse(HttpStatusCode code); // 0x1005913F8
	internal static HttpResponse CreateWebSocketResponse(); // 0x100591498
	internal static HttpResponse Parse(string[] headerParts); // 0x10059155C
	public void SetCookies(CookieCollection cookies); // 0x1005917C4
	public override string ToString(); // 0x100591C28
}

// Namespace: WebSocketSharp
public class LogData // TypeDefIndex: 2851
{
	// Fields
	private StackFrame _caller; // 0x10
	private DateTime _date; // 0x18
	private LogLevel _level; // 0x28
	private string _message; // 0x30

	// Methods
	internal void .ctor(LogLevel level, StackFrame caller, string message); // 0x100591F00
	public override string ToString(); // 0x100591FDC
}

// Namespace: WebSocketSharp
public sealed class LogLevel : Enum // TypeDefIndex: 2852
{
	// Fields
	public int value__; // 0x10
	public const LogLevel Trace = 0; // 0x0
	public const LogLevel Debug = 1; // 0x0
	public const LogLevel Info = 2; // 0x0
	public const LogLevel Warn = 3; // 0x0
	public const LogLevel Error = 4; // 0x0
	public const LogLevel Fatal = 5; // 0x0

}

// Namespace: WebSocketSharp
public class Logger // TypeDefIndex: 2853
{
	// Fields
	private string _file; // 0x10
	private LogLevel _level; // 0x18
	private Action`2<LogData, string> _output; // 0x20
	private object _sync; // 0x28

	// Methods
	public void .ctor(); // 0x100592558
	public void .ctor(LogLevel level, string file, Action`2<LogData, string> output); // 0x100592568
	private static void defaultOutput(LogData data, string path); // 0x100592640
	private void output(string message, LogLevel level); // 0x1005929C8
	private static void writeToFile(string value, string path); // 0x10059271C
	public void Debug(string message); // 0x100592CC4
	public void Error(string message); // 0x100592D18
	public void Fatal(string message); // 0x100592D6C
	public void Info(string message); // 0x100592D74
	public void Trace(string message); // 0x100592DC8
	public void Warn(string message); // 0x100592E1C
}

// Namespace: WebSocketSharp
internal sealed class Mask : Enum // TypeDefIndex: 2854
{
	// Fields
	public byte value__; // 0x10
	public const Mask Unmask = 0; // 0x0
	public const Mask Mask = 1; // 0x0

}

// Namespace: WebSocketSharp
public class MessageEventArgs : EventArgs // TypeDefIndex: 2855
{
	// Fields
	private string _data; // 0x10
	private Opcode _opcode; // 0x18
	private byte[] _rawData; // 0x20

	// Methods
	internal void .ctor(WebSocketFrame frame); // 0x100592E70
	internal void .ctor(Opcode opcode, byte[] rawData); // 0x100593088
	public string get_Data(); // 0x10059315C
	public byte[] get_RawData(); // 0x100593164
	public Opcode get_Type(); // 0x10059316C
	private static string convertToString(Opcode opcode, byte[] rawData); // 0x100592F2C
}

// Namespace: WebSocketSharp
public sealed class Opcode : Enum // TypeDefIndex: 2856
{
	// Fields
	public byte value__; // 0x10
	public const Opcode Cont = 0; // 0x0
	public const Opcode Text = 1; // 0x0
	public const Opcode Binary = 2; // 0x0
	public const Opcode Close = 8; // 0x0
	public const Opcode Ping = 9; // 0x0
	public const Opcode Pong = 10; // 0x0

}

// Namespace: WebSocketSharp
internal class PayloadData : IEnumerable, IEnumerable`1<byte> // TypeDefIndex: 2857
{
	// Fields
	private byte[] _data; // 0x10
	private long _extDataLength; // 0x18
	private long _length; // 0x20
	private bool _masked; // 0x28

	// Methods
	internal void .ctor(); // 0x10059C5C4
	internal void .ctor(byte[] data); // 0x10059C634
	internal void .ctor(byte[] data, bool masked); // 0x10059C63C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10059C690
	internal bool get_IncludesReservedCloseStatusCode(); // 0x10059C700
	public byte[] get_ApplicationData(); // 0x10059C79C
	public ulong get_Length(); // 0x10059C810
	internal void Mask(byte[] key); // 0x10059C818
	public IEnumerator`1<byte> GetEnumerator(); // 0x10059C694
	public byte[] ToByteArray(); // 0x10059C910
	public override string ToString(); // 0x10059C918
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator2 : IDisposable, IEnumerator, IEnumerator`1<byte> // TypeDefIndex: 2858
{
	// Fields
	internal byte[] <<$$>>__0; // 0x10
	internal int <<$$>>__1; // 0x18
	internal byte <b>__2; // 0x1C
	internal int $PC; // 0x20
	internal byte $current; // 0x24
	internal PayloadData <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x10059C908
	private byte System.Collections.Generic.IEnumerator<byte>.get_Current(); // 0x10059C988
	private object System.Collections.IEnumerator.get_Current(); // 0x10059C990
	public bool MoveNext(); // 0x10059C9F4
	public void Dispose(); // 0x10059CAC8
	public void Reset(); // 0x10059CAD4
}

// Namespace: WebSocketSharp
internal sealed class Rsv : Enum // TypeDefIndex: 2859
{
	// Fields
	public byte value__; // 0x10
	public const Rsv Off = 0; // 0x0
	public const Rsv On = 1; // 0x0

}

// Namespace: WebSocketSharp
public class WebSocket : IDisposable // TypeDefIndex: 2860
{
	// Fields
	private AuthenticationChallenge _authChallenge; // 0x10
	private string _base64Key; // 0x18
	private bool _client; // 0x20
	private Action _closeContext; // 0x28
	private CompressionMethod _compression; // 0x30
	private WebSocketContext _context; // 0x38
	private CookieCollection _cookies; // 0x40
	private NetworkCredential _credentials; // 0x48
	private bool _enableRedirection; // 0x50
	private string _extensions; // 0x58
	private AutoResetEvent _exitReceiving; // 0x60
	private object _forConn; // 0x68
	private object _forEvent; // 0x70
	private object _forMessageEventQueue; // 0x78
	private object _forSend; // 0x80
	private Func`2<WebSocketContext, string> _handshakeRequestChecker; // 0x88
	private bool _ignoreExtensions; // 0x90
	private Logger _logger; // 0x98
	private Queue`1<MessageEventArgs> _messageEventQueue; // 0xA0
	private uint _nonceCount; // 0xA8
	private string _origin; // 0xB0
	private bool _preAuth; // 0xB8
	private string _protocol; // 0xC0
	private string[] _protocols; // 0xC8
	private NetworkCredential _proxyCredentials; // 0xD0
	private Uri _proxyUri; // 0xD8
	private WebSocketState _readyState; // 0xE0
	private AutoResetEvent _receivePong; // 0xE8
	private bool _secure; // 0xF0
	private ClientSslConfiguration _sslConfig; // 0xF8
	private Stream _stream; // 0x100
	private TcpClient _tcpClient; // 0x108
	private Uri _uri; // 0x110
	private TimeSpan _waitTime; // 0x118
	private EventHandler`1<CloseEventArgs> OnClose; // 0x120
	private EventHandler`1<ErrorEventArgs> OnError; // 0x128
	private EventHandler`1<MessageEventArgs> OnMessage; // 0x130
	private EventHandler OnOpen; // 0x138
	private static Func`2<WebSocketContext, string> <>f__am$cache26; // 0x0

	// Methods
	public void .ctor(string url, string[] protocols); // 0x10059CB28
	public void add_OnError(EventHandler`1<ErrorEventArgs> value); // 0x10059CFF8
	public void remove_OnError(EventHandler`1<ErrorEventArgs> value); // 0x10059D118
	public void add_OnMessage(EventHandler`1<MessageEventArgs> value); // 0x10059D238
	public void remove_OnMessage(EventHandler`1<MessageEventArgs> value); // 0x10059D358
	public void add_OnOpen(EventHandler value); // 0x10059D478
	public void remove_OnOpen(EventHandler value); // 0x10059D598
	private void System.IDisposable.Dispose(); // 0x10059D6B8
	internal Func`2<WebSocketContext, string> get_CustomHandshakeRequestChecker(); // 0x10059DB20
	public ClientSslConfiguration get_SslConfiguration(); // 0x10059DBD8
	private bool acceptHandshake(); // 0x10059DC78
	private string checkIfCanConnect(); // 0x10059E978
	private string checkIfValidHandshakeRequest(WebSocketContext context); // 0x10059DEF0
	private string checkIfValidHandshakeResponse(HttpResponse response); // 0x10059EACC
	private string checkIfValidReceivedFrame(WebSocketFrame frame); // 0x10059F470
	private void close(CloseEventArgs e, bool send, bool wait); // 0x10059D728
	private bool closeHandshake(byte[] frameAsBytes, TimeSpan timeout, Action release); // 0x10059F910
	private bool concatenateFragmentsInto(Stream destination); // 0x10059FC98
	private bool connect(); // 0x1005A02AC
	private string createExtensions(); // 0x1005A07F0
	private HttpResponse createHandshakeCloseResponse(HttpStatusCode code); // 0x1005A09C0
	private HttpRequest createHandshakeRequest(); // 0x1005A0A50
	private HttpResponse createHandshakeResponse(); // 0x10059E784
	private MessageEventArgs dequeueFromMessageEventQueue(); // 0x1005A0E2C
	private bool doHandshake(); // 0x1005A04A0
	private void enqueueToMessageEventQueue(MessageEventArgs e); // 0x1005A16A0
	private void error(string message, Exception exception); // 0x10059E0AC
	private void init(); // 0x10059CE64
	private void open(); // 0x1005A177C
	private bool processCloseFrame(WebSocketFrame frame); // 0x1005A0210
	private bool processDataFrame(WebSocketFrame frame); // 0x1005A1AE0
	private void processException(Exception exception, string message); // 0x1005A05D0
	private bool processFragmentedFrame(WebSocketFrame frame); // 0x1005A1BD4
	private bool processFragments(WebSocketFrame first); // 0x1005A1BF8
	private bool processPingFrame(WebSocketFrame frame); // 0x1005A00A8
	private bool processPongFrame(WebSocketFrame frame); // 0x1005A0184
	private bool processReceivedFrame(WebSocketFrame frame); // 0x1005A1F94
	private void processSecWebSocketExtensionsHeader(string value); // 0x10059E23C
	private bool processUnsupportedFrame(WebSocketFrame frame, CloseStatusCode code, string reason); // 0x10059FEE8
	private void releaseClientResources(); // 0x1005A2160
	private void releaseServerResources(); // 0x1005A21A4
	private bool send(byte[] frameAsBytes); // 0x1005A1E8C
	private bool send(Opcode opcode, Stream stream); // 0x1005A21DC
	private bool send(Opcode opcode, Stream stream, bool compressed); // 0x1005A24BC
	private bool send(Fin fin, Opcode opcode, byte[] data, bool compressed); // 0x1005A2828
	private void sendAsync(Opcode opcode, Stream stream, Action`1<bool> completed); // 0x1005A2A40
	private bool sendBytes(byte[] bytes); // 0x10059FB3C
	private HttpResponse sendHandshakeRequest(); // 0x1005A128C
	private HttpResponse sendHttpRequest(HttpRequest request, int millisecondsTimeout); // 0x1005A2B5C
	private bool sendHttpResponse(HttpResponse response); // 0x10059E888
	private void sendProxyConnectRequest(); // 0x1005A2CB8
	private void setClientStream(); // 0x1005A0F28
	private void startReceiving(); // 0x1005A19B4
	private bool validateSecWebSocketAcceptHeader(string value); // 0x10059EC5C
	private bool validateSecWebSocketExtensionsHeader(string value); // 0x10059EDF4
	private bool validateSecWebSocketKeyHeader(string value); // 0x10059E9FC
	private bool validateSecWebSocketProtocolHeader(string value); // 0x10059ECFC
	private bool validateSecWebSocketVersionClientHeader(string value); // 0x10059EA40
	private bool validateSecWebSocketVersionServerHeader(string value); // 0x10059F3E4
	internal void Close(HttpResponse response); // 0x1005A301C
	internal void Close(HttpStatusCode code); // 0x10059E214
	internal static string CreateBase64Key(); // 0x10059CD84
	internal static string CreateResponseKey(string base64Key); // 0x1005A0CB4
	public void Close(); // 0x1005A307C
	public void ConnectAsync(); // 0x1005A3154
	public void SendAsync(string data, Action`1<bool> completed); // 0x1005A32A4
	private static string <get_CustomHandshakeRequestChecker>m__21(WebSocketContext context); // 0x1005A340C
	private bool <acceptHandshake>m__22(string protocol); // 0x1005A3414
}

// Namespace: 
private sealed class <sendAsync>c__AnonStorey12 // TypeDefIndex: 2861
{
	// Fields
	internal Func`3<Opcode, Stream, bool> sender; // 0x10
	internal Action`1<bool> completed; // 0x18
	internal WebSocket <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1005A2B54
	internal void <>m__24(IAsyncResult ar); // 0x1005A351C
}

// Namespace: 
private sealed class <startReceiving>c__AnonStorey13 // TypeDefIndex: 2862
{
	// Fields
	internal Action receive; // 0x10
	internal WebSocket <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1005A3004
	internal void <>m__25(); // 0x1005A369C
	internal void <>m__2B(WebSocketFrame frame); // 0x1005A3878
	internal void <>m__2C(Exception ex); // 0x1005A3AC4
}

// Namespace: 
private sealed class <validateSecWebSocketExtensionsHeader>c__AnonStorey14 // TypeDefIndex: 2863
{
	// Fields
	internal string method; // 0x10

	// Methods
	public void .ctor(); // 0x1005A300C
	internal bool <>m__26(string t); // 0x1005A3B2C
}

// Namespace: 
private sealed class <validateSecWebSocketProtocolHeader>c__AnonStorey15 // TypeDefIndex: 2864
{
	// Fields
	internal string value; // 0x10

	// Methods
	public void .ctor(); // 0x1005A3014
	internal bool <>m__27(string protocol); // 0x1005A3C48
}

// Namespace: 
private sealed class <ConnectAsync>c__AnonStorey16 // TypeDefIndex: 2865
{
	// Fields
	internal Func`1<bool> connector; // 0x10
	internal WebSocket <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1005A329C
	internal void <>m__28(IAsyncResult ar); // 0x1005A3494
}

// Namespace: WebSocketSharp
public class WebSocketException : Exception // TypeDefIndex: 2866
{
	// Fields
	private CloseStatusCode _code; // 0x60

	// Methods
	internal void .ctor(string message); // 0x1005A2FE0
	internal void .ctor(CloseStatusCode code); // 0x1005A3D28
	internal void .ctor(string message, Exception innerException); // 0x1005A3D34
	internal void .ctor(CloseStatusCode code, Exception innerException); // 0x1005A2FF4
	internal void .ctor(CloseStatusCode code, string message); // 0x1005A2158
	internal void .ctor(CloseStatusCode code, string message, Exception innerException); // 0x1005A3CC8
	public CloseStatusCode get_Code(); // 0x1005A1BCC
}

// Namespace: WebSocketSharp
internal class WebSocketFrame : IEnumerable, IEnumerable`1<byte> // TypeDefIndex: 2867
{
	// Fields
	private byte[] _extPayloadLength; // 0x10
	private Fin _fin; // 0x18
	private Mask _mask; // 0x19
	private byte[] _maskingKey; // 0x20
	private Opcode _opcode; // 0x28
	private PayloadData _payloadData; // 0x30
	private byte _payloadLength; // 0x38
	private Rsv _rsv1; // 0x39
	private Rsv _rsv2; // 0x3A
	private Rsv _rsv3; // 0x3B
	internal static readonly byte[] EmptyUnmaskPingBytes; // 0x0

	// Methods
	private void .ctor(); // 0x1005A3D4C
	internal void .ctor(Opcode opcode, PayloadData payloadData, bool mask); // 0x1005A1E68
	internal void .ctor(Fin fin, Opcode opcode, byte[] data, bool compressed, bool mask); // 0x1005A299C
	internal void .ctor(Fin fin, Opcode opcode, PayloadData payloadData, bool compressed, bool mask); // 0x1005A3D54
	private static void .cctor(); // 0x1005A3FC0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x1005A40B4
	public bool get_IsClose(); // 0x1005A0200
	public bool get_IsCompressed(); // 0x10059F540
	public bool get_IsContinuation(); // 0x1005A0080
	public bool get_IsData(); // 0x1005A20AC
	public bool get_IsFinal(); // 0x1005A0070
	public bool get_IsFragmented(); // 0x1005A208C
	public bool get_IsMasked(); // 0x10059F530
	public bool get_IsPing(); // 0x1005A0098
	public bool get_IsPong(); // 0x1005A0174
	public bool get_IsText(); // 0x1005A4124
	public ulong get_Length(); // 0x1005A4134
	public Opcode get_Opcode(); // 0x1005A1BC4
	public PayloadData get_PayloadData(); // 0x1005A0090
	private static byte[] createMaskingKey(); // 0x1005A3F08
	private static string dump(WebSocketFrame frame); // 0x1005A4178
	private static bool isControl(Opcode opcode); // 0x1005A488C
	private static bool isData(Opcode opcode); // 0x1005A3EF8
	private static string print(WebSocketFrame frame); // 0x1005A48A8
	private static WebSocketFrame read(byte[] header, Stream stream, bool unmask); // 0x1005A4F0C
	internal static WebSocketFrame CreateCloseFrame(PayloadData payloadData, bool mask); // 0x10059F550
	internal static WebSocketFrame CreatePingFrame(bool mask); // 0x1005A4024
	internal static WebSocketFrame Read(Stream stream, bool unmask); // 0x10059FE18
	internal static void ReadAsync(Stream stream, bool unmask, Action`1<WebSocketFrame> completed, Action`1<Exception> error); // 0x1005A379C
	internal void Unmask(); // 0x10059FFEC
	public IEnumerator`1<byte> GetEnumerator(); // 0x1005A40B8
	public string PrintToString(bool dumped); // 0x1005A20C0
	public byte[] ToByteArray(); // 0x10059F5CC
	public override string ToString(); // 0x1005A541C
}

// Namespace: 
private sealed class <dump>c__AnonStorey18 // TypeDefIndex: 2868
{
	// Fields
	internal StringBuilder output; // 0x10
	internal string lineFmt; // 0x18

	// Methods
	public void .ctor(); // 0x1005A4884
	internal Action`4<string, string, string, string> <>m__2D(); // 0x1005A5494
}

// Namespace: 
private sealed class <dump>c__AnonStorey19 // TypeDefIndex: 2869
{
	// Fields
	internal long lineCnt; // 0x10
	internal <dump>c__AnonStorey18 <>f__ref$24; // 0x18

	// Methods
	public void .ctor(); // 0x1005A5540
	internal void <>m__2F(string arg1, string arg2, string arg3, string arg4); // 0x1005A5548
}

// Namespace: 
private sealed class <ReadAsync>c__AnonStorey1A // TypeDefIndex: 2870
{
	// Fields
	internal Stream stream; // 0x10
	internal bool unmask; // 0x18
	internal Action`1<WebSocketFrame> completed; // 0x20

	// Methods
	public void .ctor(); // 0x1005A540C
	internal void <>m__2E(byte[] header); // 0x1005A58E8
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator4 : IDisposable, IEnumerator, IEnumerator`1<byte> // TypeDefIndex: 2871
{
	// Fields
	internal byte[] <<$$>>__0; // 0x10
	internal int <<$$>>__1; // 0x18
	internal byte <b>__2; // 0x1C
	internal int $PC; // 0x20
	internal byte $current; // 0x24
	internal WebSocketFrame <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1005A5414
	private byte System.Collections.Generic.IEnumerator<byte>.get_Current(); // 0x1005A5744
	private object System.Collections.IEnumerator.get_Current(); // 0x1005A574C
	public bool MoveNext(); // 0x1005A57B0
	public void Dispose(); // 0x1005A5888
	public void Reset(); // 0x1005A5894
}

// Namespace: WebSocketSharp
public sealed class WebSocketState : Enum // TypeDefIndex: 2872
{
	// Fields
	public ushort value__; // 0x10
	public const WebSocketState Connecting = 0; // 0x0
	public const WebSocketState Open = 1; // 0x0
	public const WebSocketState Closing = 2; // 0x0
	public const WebSocketState Closed = 3; // 0x0

}

// Namespace: WebSocketSharp.Net
internal abstract class AuthenticationBase // TypeDefIndex: 2873
{
	// Fields
	private AuthenticationSchemes _scheme; // 0x10
	internal NameValueCollection Parameters; // 0x18

	// Methods
	protected void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters); // 0x100593174
	public AuthenticationSchemes get_Scheme(); // 0x1005931B0
	internal static string CreateNonceValue(); // 0x1005931B8
	internal static NameValueCollection ParseParameters(string value); // 0x100593334
	internal abstract string ToBasicString(); // 0
	internal abstract string ToDigestString(); // 0
	public override string ToString(); // 0x1005938D4
}

// Namespace: WebSocketSharp.Net
internal class AuthenticationChallenge : AuthenticationBase // TypeDefIndex: 2874
{
	// Methods
	private void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters); // 0x1005939A8
	internal static AuthenticationChallenge Parse(string value); // 0x1005939E4
	internal override string ToBasicString(); // 0x100593BC4
	internal override string ToDigestString(); // 0x100593C60
}

// Namespace: WebSocketSharp.Net
internal class AuthenticationResponse : AuthenticationBase // TypeDefIndex: 2875
{
	// Fields
	private uint _nonceCount; // 0x20
	private static Func`2<string, bool> <>f__am$cache1; // 0x0

	// Methods
	internal void .ctor(NetworkCredential credentials); // 0x100593EA8
	internal void .ctor(AuthenticationChallenge challenge, NetworkCredential credentials, uint nonceCount); // 0x100594050
	internal void .ctor(AuthenticationSchemes scheme, NameValueCollection parameters, NetworkCredential credentials, uint nonceCount); // 0x100593F24
	internal uint get_NonceCount(); // 0x100594308
	private static string createA1(string username, string password, string realm); // 0x100594318
	private static string createA1(string username, string password, string realm, string nonce, string cnonce); // 0x1005943A8
	private static string createA2(string method, string uri); // 0x1005945F8
	private static string createA2(string method, string uri, string entity); // 0x100594680
	private static string hash(string value); // 0x100594464
	private void initAsDigest(); // 0x100594080
	internal static string CreateRequestDigest(NameValueCollection parameters); // 0x10059471C
	internal override string ToBasicString(); // 0x100594BE4
	internal override string ToDigestString(); // 0x100594D5C
	private static bool <initAsDigest>m__30(string qop); // 0x1005950F8
}

// Namespace: WebSocketSharp.Net
public sealed class AuthenticationSchemes : Enum // TypeDefIndex: 2876
{
	// Fields
	public int value__; // 0x10
	public const AuthenticationSchemes None = 0; // 0x0
	public const AuthenticationSchemes Digest = 1; // 0x0
	public const AuthenticationSchemes Basic = 8; // 0x0
	public const AuthenticationSchemes Anonymous = 32768; // 0x0

}

// Namespace: WebSocketSharp.Net
public class ClientSslConfiguration : SslConfiguration // TypeDefIndex: 2877
{
	// Fields
	private X509CertificateCollection _certs; // 0x28
	private string _host; // 0x30

	// Methods
	public void .ctor(string targetHost); // 0x100595194
	public void .ctor(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation); // 0x1005951C8
	public X509CertificateCollection get_ClientCertificates(); // 0x100595208
	public LocalCertificateSelectionCallback get_ClientCertificateSelectionCallback(); // 0x100595210
	public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback(); // 0x100595218
	public string get_TargetHost(); // 0x100595220
}

// Namespace: WebSocketSharp.Net
public sealed class Cookie // TypeDefIndex: 2878
{
	// Fields
	private string _comment; // 0x10
	private Uri _commentUri; // 0x18
	private bool _discard; // 0x20
	private string _domain; // 0x28
	private DateTime _expires; // 0x30
	private bool _httpOnly; // 0x40
	private string _name; // 0x48
	private string _path; // 0x50
	private string _port; // 0x58
	private int[] _ports; // 0x60
	private static readonly char[] _reservedCharsForName; // 0x0
	private static readonly char[] _reservedCharsForValue; // 0x8
	private bool _secure; // 0x68
	private DateTime _timestamp; // 0x70
	private string _value; // 0x80
	private int _version; // 0x88
	private bool <ExactDomain>k__BackingField; // 0x8C

	// Methods
	public void .ctor(); // 0x100595228
	public void .ctor(string name, string value); // 0x100595340
	private static void .cctor(); // 0x100595518
	internal void set_ExactDomain(bool value); // 0x100595614
	internal int get_MaxAge(); // 0x10059561C
	public void set_Comment(string value); // 0x10059578C
	public void set_CommentUri(Uri value); // 0x100595814
	public void set_Discard(bool value); // 0x10059581C
	public string get_Domain(); // 0x100595824
	public void set_Domain(string value); // 0x10059582C
	public bool get_Expired(); // 0x100590B70
	public DateTime get_Expires(); // 0x1005958E4
	public void set_Expires(DateTime value); // 0x1005958F0
	public void set_HttpOnly(bool value); // 0x1005958F8
	public string get_Name(); // 0x100595900
	public void set_Name(string value); // 0x100595384
	public string get_Path(); // 0x100595A1C
	public void set_Path(string value); // 0x100595A24
	public void set_Port(string value); // 0x100595AAC
	public void set_Secure(bool value); // 0x100595EC4
	public string get_Value(); // 0x100595ECC
	public void set_Value(string value); // 0x100595438
	public int get_Version(); // 0x100595FC8
	public void set_Version(int value); // 0x100595FD0
	private static bool canSetName(string name, out string message); // 0x100595908
	private static bool canSetValue(string value, out string message); // 0x100595ED4
	private static int hash(int i, int j, int k, int l, int m); // 0x100596064
	private string toResponseStringVersion0(); // 0x100596098
	private string toResponseStringVersion1(); // 0x1005962C8
	private static bool tryCreatePorts(string value, out int[] result, out string parseError); // 0x100595C50
	internal string ToRequestString(Uri uri); // 0x100596620
	internal string ToResponseString(); // 0x100591B78
	public override bool Equals(object comparand); // 0x100596998
	public override int GetHashCode(); // 0x100596A8C
	public override string ToString(); // 0x100596C44
}

// Namespace: WebSocketSharp.Net
public class CookieCollection : ICollection, IEnumerable // TypeDefIndex: 2879
{
	// Fields
	private List`1<Cookie> _list; // 0x10
	private object _sync; // 0x18

	// Methods
	public void .ctor(); // 0x10058E6FC
	internal IEnumerable`1<Cookie> get_Sorted(); // 0x100590A84
	public int get_Count(); // 0x100590A2C
	public bool get_IsSynchronized(); // 0x100596C4C
	public object get_SyncRoot(); // 0x100596C54
	private static int compareCookieWithinSorted(Cookie x, Cookie y); // 0x100596D50
	private static CookieCollection parseRequest(string value); // 0x100596DCC
	private static CookieCollection parseResponse(string value); // 0x1005973E8
	private int searchCookie(Cookie cookie); // 0x100597C84
	private static string[] splitCookieHeaderValue(string value); // 0x100597224
	internal static CookieCollection Parse(string value, bool response); // 0x10058E6F0
	internal void SetOrRemove(Cookie cookie); // 0x100597DBC
	internal void SetOrRemove(CookieCollection cookies); // 0x100597EB0
	public void Add(Cookie cookie); // 0x100597310
	public void CopyTo(Array array, int index); // 0x10059827C
	public IEnumerator GetEnumerator(); // 0x1005981F0
}

// Namespace: WebSocketSharp.Net
public class CookieException : FormatException, ISerializable // TypeDefIndex: 2880
{
	// Methods
	internal void .ctor(string message); // 0x100595A14
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1005985A8
	public void .ctor(); // 0x1005985B0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1005985B8
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x1005985C0
}

// Namespace: WebSocketSharp.Net
internal class HttpHeaderInfo // TypeDefIndex: 2881
{
	// Fields
	private string _name; // 0x10
	private HttpHeaderType _type; // 0x18

	// Methods
	internal void .ctor(string name, HttpHeaderType type); // 0x1005985C8
	internal bool get_IsMultiValueInRequest(); // 0x100598604
	internal bool get_IsMultiValueInResponse(); // 0x100598610
	public bool get_IsRequest(); // 0x10059861C
	public bool get_IsResponse(); // 0x100598628
	public string get_Name(); // 0x100598634
	public bool IsMultiValue(bool response); // 0x10059863C
	public bool IsRestricted(bool response); // 0x100598674
}

// Namespace: WebSocketSharp.Net
internal sealed class HttpHeaderType : Enum // TypeDefIndex: 2882
{
	// Fields
	public int value__; // 0x10
	public const HttpHeaderType Unspecified = 0; // 0x0
	public const HttpHeaderType Request = 1; // 0x0
	public const HttpHeaderType Response = 2; // 0x0
	public const HttpHeaderType Restricted = 4; // 0x0
	public const HttpHeaderType MultiValue = 8; // 0x0
	public const HttpHeaderType MultiValueInRequest = 16; // 0x0
	public const HttpHeaderType MultiValueInResponse = 32; // 0x0

}

// Namespace: WebSocketSharp.Net
public sealed class HttpStatusCode : Enum // TypeDefIndex: 2883
{
	// Fields
	public int value__; // 0x10
	public const HttpStatusCode Continue = 100; // 0x0
	public const HttpStatusCode SwitchingProtocols = 101; // 0x0
	public const HttpStatusCode OK = 200; // 0x0
	public const HttpStatusCode Created = 201; // 0x0
	public const HttpStatusCode Accepted = 202; // 0x0
	public const HttpStatusCode NonAuthoritativeInformation = 203; // 0x0
	public const HttpStatusCode NoContent = 204; // 0x0
	public const HttpStatusCode ResetContent = 205; // 0x0
	public const HttpStatusCode PartialContent = 206; // 0x0
	public const HttpStatusCode MultipleChoices = 300; // 0x0
	public const HttpStatusCode Ambiguous = 300; // 0x0
	public const HttpStatusCode MovedPermanently = 301; // 0x0
	public const HttpStatusCode Moved = 301; // 0x0
	public const HttpStatusCode Found = 302; // 0x0
	public const HttpStatusCode Redirect = 302; // 0x0
	public const HttpStatusCode SeeOther = 303; // 0x0
	public const HttpStatusCode RedirectMethod = 303; // 0x0
	public const HttpStatusCode NotModified = 304; // 0x0
	public const HttpStatusCode UseProxy = 305; // 0x0
	public const HttpStatusCode Unused = 306; // 0x0
	public const HttpStatusCode TemporaryRedirect = 307; // 0x0
	public const HttpStatusCode RedirectKeepVerb = 307; // 0x0
	public const HttpStatusCode BadRequest = 400; // 0x0
	public const HttpStatusCode Unauthorized = 401; // 0x0
	public const HttpStatusCode PaymentRequired = 402; // 0x0
	public const HttpStatusCode Forbidden = 403; // 0x0
	public const HttpStatusCode NotFound = 404; // 0x0
	public const HttpStatusCode MethodNotAllowed = 405; // 0x0
	public const HttpStatusCode NotAcceptable = 406; // 0x0
	public const HttpStatusCode ProxyAuthenticationRequired = 407; // 0x0
	public const HttpStatusCode RequestTimeout = 408; // 0x0
	public const HttpStatusCode Conflict = 409; // 0x0
	public const HttpStatusCode Gone = 410; // 0x0
	public const HttpStatusCode LengthRequired = 411; // 0x0
	public const HttpStatusCode PreconditionFailed = 412; // 0x0
	public const HttpStatusCode RequestEntityTooLarge = 413; // 0x0
	public const HttpStatusCode RequestUriTooLong = 414; // 0x0
	public const HttpStatusCode UnsupportedMediaType = 415; // 0x0
	public const HttpStatusCode RequestedRangeNotSatisfiable = 416; // 0x0
	public const HttpStatusCode ExpectationFailed = 417; // 0x0
	public const HttpStatusCode InternalServerError = 500; // 0x0
	public const HttpStatusCode NotImplemented = 501; // 0x0
	public const HttpStatusCode BadGateway = 502; // 0x0
	public const HttpStatusCode ServiceUnavailable = 503; // 0x0
	public const HttpStatusCode GatewayTimeout = 504; // 0x0
	public const HttpStatusCode HttpVersionNotSupported = 505; // 0x0

}

// Namespace: WebSocketSharp.Net
internal sealed class HttpUtility // TypeDefIndex: 2884
{
	// Fields
	private static char[] _hexChars; // 0x0
	private static object _sync; // 0x8

	// Methods
	private static void .cctor(); // 0x100598694
	private static int getChar(string s, int offset, int length); // 0x100598728
	private static int getInt(byte b); // 0x10059884C
	private static bool notEncoded(char c); // 0x10059888C
	private static void urlEncode(char c, Stream result, bool unicode); // 0x1005988BC
	private static void writeCharBytes(char c, IList buffer, Encoding encoding); // 0x100598CDC
	internal static Encoding GetEncoding(string contentType); // 0x100598F64
	internal static byte[] InternalUrlEncodeToBytes(byte[] bytes, int offset, int count); // 0x1005990E4
	public static string UrlDecode(string s); // 0x100599320
	public static string UrlDecode(string s, Encoding encoding); // 0x1005993B8
	public static string UrlEncode(string s); // 0x100599744
	public static string UrlEncode(string s, Encoding encoding); // 0x1005997DC
}

// Namespace: WebSocketSharp.Net
public class HttpVersion // TypeDefIndex: 2885
{
	// Fields
	public static readonly Version Version10; // 0x0
	public static readonly Version Version11; // 0x8

	// Methods
	private static void .cctor(); // 0x100599A8C
}

// Namespace: WebSocketSharp.Net
public class NetworkCredential // TypeDefIndex: 2886
{
	// Fields
	private string _domain; // 0x10
	private string _password; // 0x18
	private string _username; // 0x20

	// Methods
	public string get_Domain(); // 0x100599B30
	public string get_Password(); // 0x100599BA4
	public string get_UserName(); // 0x100599C18
}

// Namespace: WebSocketSharp.Net
public abstract class SslConfiguration // TypeDefIndex: 2887
{
	// Fields
	private LocalCertificateSelectionCallback _certSelectionCallback; // 0x10
	private RemoteCertificateValidationCallback _certValidationCallback; // 0x18
	private bool _checkCertRevocation; // 0x20
	private SslProtocols _enabledProtocols; // 0x24
	private static LocalCertificateSelectionCallback <>f__am$cache4; // 0x0
	private static RemoteCertificateValidationCallback <>f__am$cache5; // 0x8

	// Methods
	protected void .ctor(SslProtocols enabledSslProtocols, bool checkCertificateRevocation); // 0x100599C20
	protected LocalCertificateSelectionCallback get_CertificateSelectionCallback(); // 0x100599C5C
	protected RemoteCertificateValidationCallback get_CertificateValidationCallback(); // 0x100599D10
	public bool get_CheckCertificateRevocation(); // 0x100599DBC
	public SslProtocols get_EnabledSslProtocols(); // 0x100599DC4
	private static X509Certificate <get_CertificateSelectionCallback>m__36(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers); // 0x100599DCC
	private static bool <get_CertificateValidationCallback>m__37(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors); // 0x100599DD4
}

// Namespace: WebSocketSharp.Net
public class WebHeaderCollection : NameValueCollection, ISerializable // TypeDefIndex: 2888
{
	// Fields
	private static readonly Dictionary`2<string, HttpHeaderInfo> _headers; // 0x0
	private bool _internallyCreated; // 0x68
	private HttpHeaderType _state; // 0x6C

	// Methods
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x100599DDC
	public void .ctor(); // 0x10059A018
	private static void .cctor(); // 0x10059A040
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x10059AF48
	public override string[] get_AllKeys(); // 0x10059AFBC
	public override int get_Count(); // 0x10059AFC4
	public override KeysCollection get_Keys(); // 0x10059AFCC
	private void add(string name, string value, bool ignoreRestricted); // 0x10059AFD4
	private void addWithoutCheckingName(string name, string value); // 0x10059B2B0
	private void addWithoutCheckingNameAndRestricted(string name, string value); // 0x10059B400
	private static int checkColonSeparated(string header); // 0x10059B5E4
	private static HttpHeaderType checkHeaderType(string name); // 0x10059B680
	private static string checkName(string name); // 0x10059B0B4
	private void checkRestricted(string name); // 0x10059B92C
	private void checkState(bool response); // 0x10059BA70
	private static string checkValue(string value); // 0x10059B488
	private void doWithCheckingState(Action`2<string, string> action, string name, string value, bool setState); // 0x10059B1B4
	private void doWithCheckingState(Action`2<string, string> action, string name, string value, bool response, bool setState); // 0x10059BB40
	private void doWithoutCheckingName(Action`2<string, string> action, string name, string value); // 0x10059B350
	private static HttpHeaderInfo getHeaderInfo(string name); // 0x10059B744
	private static bool isRestricted(string name, bool response); // 0x10059B9E0
	private void removeWithoutCheckingName(string name, string unuse); // 0x10059BBF8
	private void setWithoutCheckingName(string name, string value); // 0x10059BC28
	internal void InternalSet(string header, bool response); // 0x10059BCC8
	internal void InternalSet(string name, string value, bool response); // 0x10059BD8C
	internal static bool IsHeaderName(string name); // 0x10059B8DC
	internal static bool IsHeaderValue(string value); // 0x10059BB34
	internal static bool IsMultiValue(string headerName, bool response); // 0x10059BE58
	public override void Add(string name, string value); // 0x10059BF00
	public override string Get(int index); // 0x10059BF08
	public override string Get(string name); // 0x10059BF10
	public override IEnumerator GetEnumerator(); // 0x10059BF18
	public override string GetKey(int index); // 0x10059BF20
	public override string[] GetValues(string header); // 0x10059BF28
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x10059BF54
	public override void OnDeserialization(object sender); // 0x10059C0E0
	public override void Remove(string name); // 0x10059C0E4
	public override void Set(string name, string value); // 0x10059C1A4
	public override string ToString(); // 0x10059C270
}

// Namespace: 
private sealed class <GetObjectData>c__AnonStorey1E // TypeDefIndex: 2889
{
	// Fields
	internal SerializationInfo serializationInfo; // 0x10
	internal int cnt; // 0x18
	internal WebHeaderCollection <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10059C0D8
	internal void <>m__39(int i); // 0x10059C3D0
}

// Namespace: 
private sealed class <ToString>c__AnonStorey1F // TypeDefIndex: 2890
{
	// Fields
	internal StringBuilder buff; // 0x10
	internal WebHeaderCollection <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10059C3C8
	internal void <>m__3A(int i); // 0x10059C4E4
}

// Namespace: WebSocketSharp.Net.WebSockets
public abstract class WebSocketContext // TypeDefIndex: 2891
{
	// Methods
	public abstract NameValueCollection get_Headers(); // 0
	public abstract bool get_IsWebSocketRequest(); // 0
	public abstract Uri get_RequestUri(); // 0
	public abstract IEnumerable`1<string> get_SecWebSocketProtocols(); // 0
	public abstract IPEndPoint get_UserEndPoint(); // 0
}

// Namespace: 
internal static class <PrivateImplementationDetails>{9e30ab07-02c9-443a-b9d6-08818c78accd} // TypeDefIndex: 2892
{
	// Fields
	internal static $ArrayType=68 $field-0; // 0x0
	internal static $ArrayType=76 $field-1; // 0x44
	internal static $ArrayType=68 $field-2; // 0x90
	internal static $ArrayType=6144 $field-3; // 0xD4
	internal static $ArrayType=384 $field-4; // 0x18D4
	internal static $ArrayType=124 $field-5; // 0x1A54
	internal static $ArrayType=124 $field-6; // 0x1AD0
	internal static $ArrayType=120 $field-7; // 0x1B4C
	internal static $ArrayType=120 $field-8; // 0x1BC4
	internal static $ArrayType=1152 $field-9; // 0x1C3C
	internal static $ArrayType=120 $field-A; // 0x20BC
	internal static $ArrayType=116 $field-B; // 0x2134
	internal static $ArrayType=120 $field-C; // 0x21A8
	internal static $ArrayType=76 $field-D; // 0x2220
	internal static $ArrayType=20 $field-E; // 0x226C
	internal static $ArrayType=512 $field-F; // 0x2280
	internal static $ArrayType=256 $field-10; // 0x2480
	internal static $ArrayType=116 $field-11; // 0x2580
	internal static $ArrayType=120 $field-12; // 0x25F4
	internal static $ArrayType=12 $field-13; // 0x266C
	internal static $ArrayType=12 $field-14; // 0x2678
	internal static $ArrayType=12 $field-15; // 0x2684
	internal static $ArrayType=12 $field-16; // 0x2690
	internal static $ArrayType=12 $field-17; // 0x269C
	internal static $ArrayType=12 $field-18; // 0x26A8
	internal static $ArrayType=12 $field-19; // 0x26B4
	internal static $ArrayType=12 $field-1A; // 0x26C0
	internal static $ArrayType=12 $field-1B; // 0x26CC
	internal static $ArrayType=12 $field-1C; // 0x26D8
	internal static $ArrayType=12 $field-1D; // 0x26E4
	internal static $ArrayType=12 $field-1E; // 0x26F0
	internal static $ArrayType=112 $field-1F; // 0x26FC
	internal static $ArrayType=16 $field-20; // 0x276C

}

// Namespace: 
private struct $ArrayType=68 // TypeDefIndex: 2893
{
}

// Namespace: 
private struct $ArrayType=76 // TypeDefIndex: 2894
{
}

// Namespace: 
private struct $ArrayType=6144 // TypeDefIndex: 2895
{
}

// Namespace: 
private struct $ArrayType=384 // TypeDefIndex: 2896
{
}

// Namespace: 
private struct $ArrayType=124 // TypeDefIndex: 2897
{
}

// Namespace: 
private struct $ArrayType=120 // TypeDefIndex: 2898
{
}

// Namespace: 
private struct $ArrayType=1152 // TypeDefIndex: 2899
{
}

// Namespace: 
private struct $ArrayType=116 // TypeDefIndex: 2900
{
}

// Namespace: 
private struct $ArrayType=20 // TypeDefIndex: 2901
{
}

// Namespace: 
private struct $ArrayType=512 // TypeDefIndex: 2902
{
}

// Namespace: 
private struct $ArrayType=256 // TypeDefIndex: 2903
{
}

// Namespace: 
private struct $ArrayType=12 // TypeDefIndex: 2904
{
}

// Namespace: 
private struct $ArrayType=112 // TypeDefIndex: 2905
{
}

// Namespace: 
private struct $ArrayType=16 // TypeDefIndex: 2906
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2907
{
}

// Namespace: TapjoyUnity.Internal
public sealed class ApiBindingIos : ApiBinding // TypeDefIndex: 2908
{
	// Methods
	private void .ctor(); // 0x10073FD1C
	public static void Install(); // 0x10073FDDC
	public override void Connect(string sdkKey, Dictionary`2<string, object> flags); // 0x10073FE5C
	private void transferDictionaryToObjectiveCWithName(Dictionary`2<string, object> dictionary, string dictionaryName); // 0x100740104
	public override void ActionComplete(string actionID); // 0x1007404D0
	public override string GetSDKVersion(); // 0x100740528
	public override void SetDebugEnabled(bool enabled); // 0x100740590
	public override void SetGcmSender(string senderId); // 0x1007405A0
	public override void SetAppDataVersion(string dataVersion); // 0x1007405A4
	public override void ActivateUnitySupport(); // 0x1007405FC
	public override void GetCurrencyBalance(); // 0x100740600
	public override void SpendCurrency(int amount); // 0x100740608
	public override void AwardCurrency(int amount); // 0x100740618
	public override float GetCurrencyMultiplier(); // 0x100740628
	public override void SetCurrencyMultiplier(float multiplier); // 0x100740630
	public override void ShowDefaultEarnedCurrencyAlert(); // 0x100740638
	public override void CreatePlacement(string placementGuid, string eventName); // 0x100740640
	public override void DismissPlacementContent(); // 0x100740690
	public override void RequestPlacementContent(string placementGuid); // 0x100740698
	public override void ShowPlacementContent(string placementGuid); // 0x1007406F0
	public override bool IsPlacementContentReady(string placementGuid); // 0x100740748
	public override bool IsPlacementContentAvailable(string placementGuid); // 0x1007407C0
	public override void ActionRequestCompleted(string requestId); // 0x100740838
	public override void ActionRequestCancelled(string requestId); // 0x100740890
	public override void RemovePlacement(string placementGuid); // 0x1007408E8
	public override void RemoveActionRequest(string requestID); // 0x100740940
	public override void EnablePaidAppWithActionID(string enablePaidAppWithActionID); // 0x100740998
	public override void StartSession(); // 0x10074099C
	public override void EndSession(); // 0x1007409A4
	public override void SetUserID(string userID); // 0x1007409AC
	public override void SetUserLevel(int userLevel); // 0x100740A04
	public override void SetUserFriendCount(int friendCount); // 0x100740A14
	public override void SetUserCohortVariable(int variableIndex, string value); // 0x100740A24
	public override void ClearUserTags(); // 0x100740A94
	public override void AddUserTag(string tag); // 0x100740A9C
	public override void RemoveUserTag(string tag); // 0x100740AF4
	public override void TrackEvent(string name, long value); // 0x100740B4C
	public override void TrackEvent(string category, string name, long value); // 0x100740CE0
	public override void TrackEvent(string category, string name, string parameter1, string parameter2, long value); // 0x100740D68
	public override void TrackEvent(string category, string name, string parameter1, string parameter2, string value1Name, long value1, string value2Name, long value2, string value3Name, long value3); // 0x100740E00
	public override void TrackPurchase(string productId, string currencyCode, double price, string campaignId); // 0x100740E14
	public override void TrackPurchaseInGooglePlayStore(string skuDetails, string purchaseData, string dataSignature, string campaignId); // 0x100740EB8
	public override void TrackPurchaseInAppleAppStore(string productId, string currencyCode, double productPrice, string transactionId, string campaignId); // 0x100740EBC
	private static extern void Tapjoy_SetUnityVersion(string version); // 0x10073FDB0
	private static extern void Tapjoy_Connect(string sdkKey); // 0x1007404A4
	private static extern void Tapjoy_ActionComplete(string actionID); // 0x1007404FC
	private static extern void Tapjoy_SetKeyToValueInDictionary(string key, string valueToSet, string dictionaryName); // 0x100740434
	private static extern void Tapjoy_SetKeyToDictionaryRefValueInDictionary(string key, string dictionaryNameToSet, string dictionaryNameToSetTo); // 0x1007403C4
	private static extern string Tapjoy_GetSDKVersion(); // 0x10074055C
	private static extern void Tapjoy_SetDebugEnabled(bool enabled); // 0x100740598
	private static extern void Tapjoy_SetAppDataVersion(string dataVersion); // 0x1007405D0
	private static extern void Tapjoy_GetCurrencyBalance(); // 0x100740604
	private static extern void Tapjoy_SpendCurrency(int amount); // 0x100740610
	private static extern void Tapjoy_AwardCurrency(int amount); // 0x100740620
	private static extern float Tapjoy_GetCurrencyMultiplier(); // 0x10074062C
	private static extern void Tapjoy_SetCurrencyMultiplier(float multiplier); // 0x100740634
	private static extern void Tapjoy_ShowDefaultEarnedCurrencyAlert(); // 0x10074063C
	private static extern void Tapjoy_CreatePlacement(string placementGuid, string eventName); // 0x100740644
	private static extern void Tapjoy_DismissPlacementContent(); // 0x100740694
	private static extern void Tapjoy_RequestPlacementContent(string placementGuid); // 0x1007406C4
	private static extern void Tapjoy_ShowPlacementContent(string placementGuid); // 0x10074071C
	private static extern bool Tapjoy_IsPlacementContentAvailable(string placementGuid); // 0x1007407FC
	private static extern bool Tapjoy_IsPlacementContentReady(string placementGuid); // 0x100740784
	private static extern void Tapjoy_ActionRequestCompleted(string requestId); // 0x100740864
	private static extern void Tapjoy_ActionRequestCancelled(string requestId); // 0x1007408BC
	private static extern void Tapjoy_RemovePlacement(string placementGuid); // 0x100740914
	private static extern void Tapjoy_RemoveActionRequest(string requestId); // 0x10074096C
	private static extern void Tapjoy_StartSession(); // 0x1007409A0
	private static extern void Tapjoy_EndSession(); // 0x1007409A8
	private static extern void Tapjoy_SetUserID(string userId); // 0x1007409D8
	private static extern void Tapjoy_SetUserLevel(int userLevel); // 0x100740A0C
	private static extern void Tapjoy_SetUserFriendCount(int friendCount); // 0x100740A1C
	private static extern void Tapjoy_SetUserCohortVariable(int variableIndex, string value); // 0x100740A5C
	private static extern void Tapjoy_ClearUserTags(); // 0x100740A98
	private static extern void Tapjoy_AddUserTag(string tag); // 0x100740AC8
	private static extern void Tapjoy_RemoveUserTag(string tag); // 0x100740B20
	private static extern void Tapjoy_TrackEvent(string category, string name, string parameter1, string parameter2, string value1Name, long value1, string value2Name, long value2, string value3Name, long value3); // 0x100740BD0
	private static extern void Tapjoy_TrackPurchase(string productId, string currencyCode, double price, string campaignId, string transactionId); // 0x100740E1C
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2909
{
}

// Namespace: UnityEngine.EventSystems
public interface IEventSystemHandler // TypeDefIndex: 2910
{
}

// Namespace: UnityEngine.EventSystems
public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2911
{
	// Methods
	public abstract void OnPointerEnter(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2912
{
	// Methods
	public abstract void OnPointerExit(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2913
{
	// Methods
	public abstract void OnPointerDown(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2914
{
	// Methods
	public abstract void OnPointerUp(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2915
{
	// Methods
	public abstract void OnPointerClick(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2916
{
	// Methods
	public abstract void OnBeginDrag(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2917
{
	// Methods
	public abstract void OnInitializePotentialDrag(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2918
{
	// Methods
	public abstract void OnDrag(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2919
{
	// Methods
	public abstract void OnEndDrag(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2920
{
	// Methods
	public abstract void OnDrop(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2921
{
	// Methods
	public abstract void OnScroll(PointerEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2922
{
	// Methods
	public abstract void OnUpdateSelected(BaseEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2923
{
	// Methods
	public abstract void OnSelect(BaseEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2924
{
	// Methods
	public abstract void OnDeselect(BaseEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2925
{
	// Methods
	public abstract void OnMove(AxisEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2926
{
	// Methods
	public abstract void OnSubmit(BaseEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2927
{
	// Methods
	public abstract void OnCancel(BaseEventData eventData); // 0
}

// Namespace: UnityEngine.EventSystems
public class EventSystem : UIBehaviour // TypeDefIndex: 2928
{
	// Fields
	private List`1<BaseInputModule> m_SystemInputModules; // 0x18
	private BaseInputModule m_CurrentInputModule; // 0x20
	private GameObject m_FirstSelected; // 0x28
	private bool m_sendNavigationEvents; // 0x30
	private int m_DragThreshold; // 0x34
	private GameObject m_CurrentSelected; // 0x38
	private bool m_SelectionGuard; // 0x40
	private BaseEventData m_DummyData; // 0x48
	private static readonly Comparison`1<RaycastResult> s_RaycastComparer; // 0x0
	private static EventSystem <current>k__BackingField; // 0x8

	// Methods
	protected void .ctor(); // 0x10074E20C
	private static void .cctor(); // 0x10074E28C
	public static EventSystem get_current(); // 0x10074E314
	public static void set_current(EventSystem value); // 0x10074E37C
	public bool get_sendNavigationEvents(); // 0x10074E3E8
	public void set_sendNavigationEvents(bool value); // 0x10074E3F0
	public int get_pixelDragThreshold(); // 0x10074E3F8
	public void set_pixelDragThreshold(int value); // 0x10074E400
	public BaseInputModule get_currentInputModule(); // 0x10074E408
	public GameObject get_firstSelectedGameObject(); // 0x10074E410
	public void set_firstSelectedGameObject(GameObject value); // 0x10074E418
	public GameObject get_currentSelectedGameObject(); // 0x10074E420
	public GameObject get_lastSelectedGameObject(); // 0x10074E428
	public void UpdateModules(); // 0x10074CE80
	public bool get_alreadySelecting(); // 0x10074E430
	public void SetSelectedGameObject(GameObject selected, BaseEventData pointer); // 0x10074CC04
	private BaseEventData get_baseEventDataCache(); // 0x10074E508
	public void SetSelectedGameObject(GameObject selected); // 0x10074E578
	private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs); // 0x10074E5A8
	public void RaycastAll(PointerEventData eventData, List`1<RaycastResult> raycastResults); // 0x10074EAC0
	public bool IsPointerOverGameObject(); // 0x10074ECF4
	public bool IsPointerOverGameObject(int pointerId); // 0x10074ECFC
	protected override void OnEnable(); // 0x10074EDDC
	protected override void OnDisable(); // 0x10074EEB0
	private void TickModules(); // 0x10074EFF8
	protected virtual void Update(); // 0x10074F11C
	private void ChangeEventModule(BaseInputModule module); // 0x10074F448
	public override string ToString(); // 0x10074F598
}

// Namespace: UnityEngine.EventSystems
public class EventTrigger : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2929
{
	// Fields
	private List`1<Entry> m_Delegates; // 0x18
	public List`1<Entry> delegates; // 0x20

	// Methods
	protected void .ctor(); // 0x10074F6FC
	public List`1<Entry> get_triggers(); // 0x10074F704
	public void set_triggers(List`1<Entry> value); // 0x10074F778
	private void Execute(EventTriggerType id, BaseEventData eventData); // 0x10074F780
	public virtual void OnPointerEnter(PointerEventData eventData); // 0x10074F868
	public virtual void OnPointerExit(PointerEventData eventData); // 0x10074F878
	public virtual void OnDrag(PointerEventData eventData); // 0x10074F888
	public virtual void OnDrop(PointerEventData eventData); // 0x10074F898
	public virtual void OnPointerDown(PointerEventData eventData); // 0x10074F8A8
	public virtual void OnPointerUp(PointerEventData eventData); // 0x10074F8B8
	public virtual void OnPointerClick(PointerEventData eventData); // 0x10074F8C8
	public virtual void OnSelect(BaseEventData eventData); // 0x10074F8D8
	public virtual void OnDeselect(BaseEventData eventData); // 0x10074F8E8
	public virtual void OnScroll(PointerEventData eventData); // 0x10074F8F8
	public virtual void OnMove(AxisEventData eventData); // 0x10074F908
	public virtual void OnUpdateSelected(BaseEventData eventData); // 0x10074F918
	public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x10074F928
	public virtual void OnBeginDrag(PointerEventData eventData); // 0x10074F938
	public virtual void OnEndDrag(PointerEventData eventData); // 0x10074F948
	public virtual void OnSubmit(BaseEventData eventData); // 0x10074F958
	public virtual void OnCancel(BaseEventData eventData); // 0x10074F968
}

// Namespace: 
public class TriggerEvent : UnityEvent`1<BaseEventData> // TypeDefIndex: 2930
{
	// Methods
	public void .ctor(); // 0x10074F9E4
}

// Namespace: 
public class Entry // TypeDefIndex: 2931
{
	// Fields
	public EventTriggerType eventID; // 0x10
	public TriggerEvent callback; // 0x18

	// Methods
	public void .ctor(); // 0x10074F978
}

// Namespace: UnityEngine.EventSystems
public sealed class EventTriggerType : Enum // TypeDefIndex: 2932
{
	// Fields
	public int value__; // 0x10
	public const EventTriggerType PointerEnter = 0; // 0x0
	public const EventTriggerType PointerExit = 1; // 0x0
	public const EventTriggerType PointerDown = 2; // 0x0
	public const EventTriggerType PointerUp = 3; // 0x0
	public const EventTriggerType PointerClick = 4; // 0x0
	public const EventTriggerType Drag = 5; // 0x0
	public const EventTriggerType Drop = 6; // 0x0
	public const EventTriggerType Scroll = 7; // 0x0
	public const EventTriggerType UpdateSelected = 8; // 0x0
	public const EventTriggerType Select = 9; // 0x0
	public const EventTriggerType Deselect = 10; // 0x0
	public const EventTriggerType Move = 11; // 0x0
	public const EventTriggerType InitializePotentialDrag = 12; // 0x0
	public const EventTriggerType BeginDrag = 13; // 0x0
	public const EventTriggerType EndDrag = 14; // 0x0
	public const EventTriggerType Submit = 15; // 0x0
	public const EventTriggerType Cancel = 16; // 0x0

}

// Namespace: UnityEngine.EventSystems
public static class ExecuteEvents // TypeDefIndex: 2933
{
	// Fields
	private static readonly EventFunction`1<IPointerEnterHandler> s_PointerEnterHandler; // 0x0
	private static readonly EventFunction`1<IPointerExitHandler> s_PointerExitHandler; // 0x8
	private static readonly EventFunction`1<IPointerDownHandler> s_PointerDownHandler; // 0x10
	private static readonly EventFunction`1<IPointerUpHandler> s_PointerUpHandler; // 0x18
	private static readonly EventFunction`1<IPointerClickHandler> s_PointerClickHandler; // 0x20
	private static readonly EventFunction`1<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x28
	private static readonly EventFunction`1<IBeginDragHandler> s_BeginDragHandler; // 0x30
	private static readonly EventFunction`1<IDragHandler> s_DragHandler; // 0x38
	private static readonly EventFunction`1<IEndDragHandler> s_EndDragHandler; // 0x40
	private static readonly EventFunction`1<IDropHandler> s_DropHandler; // 0x48
	private static readonly EventFunction`1<IScrollHandler> s_ScrollHandler; // 0x50
	private static readonly EventFunction`1<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x58
	private static readonly EventFunction`1<ISelectHandler> s_SelectHandler; // 0x60
	private static readonly EventFunction`1<IDeselectHandler> s_DeselectHandler; // 0x68
	private static readonly EventFunction`1<IMoveHandler> s_MoveHandler; // 0x70
	private static readonly EventFunction`1<ISubmitHandler> s_SubmitHandler; // 0x78
	private static readonly EventFunction`1<ICancelHandler> s_CancelHandler; // 0x80
	private static readonly ObjectPool`1<List`1<IEventSystemHandler>> s_HandlerListPool; // 0x88
	private static readonly List`1<Transform> s_InternalTransformList; // 0x90
	private static UnityAction`1<List`1<IEventSystemHandler>> <>f__am$cache13; // 0x98

	// Methods
	private static void .cctor(); // 0x10074FA34
	public static T ValidateEventData(BaseEventData data); // 0
	private static void Execute(IPointerEnterHandler handler, BaseEventData eventData); // 0x10074FFC0
	private static void Execute(IPointerExitHandler handler, BaseEventData eventData); // 0x1007500F8
	private static void Execute(IPointerDownHandler handler, BaseEventData eventData); // 0x100750230
	private static void Execute(IPointerUpHandler handler, BaseEventData eventData); // 0x100750368
	private static void Execute(IPointerClickHandler handler, BaseEventData eventData); // 0x1007504A0
	private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData); // 0x1007505D8
	private static void Execute(IBeginDragHandler handler, BaseEventData eventData); // 0x100750710
	private static void Execute(IDragHandler handler, BaseEventData eventData); // 0x100750848
	private static void Execute(IEndDragHandler handler, BaseEventData eventData); // 0x100750980
	private static void Execute(IDropHandler handler, BaseEventData eventData); // 0x100750AB8
	private static void Execute(IScrollHandler handler, BaseEventData eventData); // 0x100750BF0
	private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData); // 0x100750D28
	private static void Execute(ISelectHandler handler, BaseEventData eventData); // 0x100750E24
	private static void Execute(IDeselectHandler handler, BaseEventData eventData); // 0x100750F20
	private static void Execute(IMoveHandler handler, BaseEventData eventData); // 0x10075101C
	private static void Execute(ISubmitHandler handler, BaseEventData eventData); // 0x100751154
	private static void Execute(ICancelHandler handler, BaseEventData eventData); // 0x100751250
	public static EventFunction`1<IPointerEnterHandler> get_pointerEnterHandler(); // 0x10074D988
	public static EventFunction`1<IPointerExitHandler> get_pointerExitHandler(); // 0x10074D918
	public static EventFunction`1<IPointerDownHandler> get_pointerDownHandler(); // 0x10075134C
	public static EventFunction`1<IPointerUpHandler> get_pointerUpHandler(); // 0x1007513B4
	public static EventFunction`1<IPointerClickHandler> get_pointerClickHandler(); // 0x10075141C
	public static EventFunction`1<IInitializePotentialDragHandler> get_initializePotentialDrag(); // 0x100751484
	public static EventFunction`1<IBeginDragHandler> get_beginDragHandler(); // 0x1007514EC
	public static EventFunction`1<IDragHandler> get_dragHandler(); // 0x100751554
	public static EventFunction`1<IEndDragHandler> get_endDragHandler(); // 0x1007515BC
	public static EventFunction`1<IDropHandler> get_dropHandler(); // 0x100751624
	public static EventFunction`1<IScrollHandler> get_scrollHandler(); // 0x10075168C
	public static EventFunction`1<IUpdateSelectedHandler> get_updateSelectedHandler(); // 0x1007516F4
	public static EventFunction`1<ISelectHandler> get_selectHandler(); // 0x10074E4A0
	public static EventFunction`1<IDeselectHandler> get_deselectHandler(); // 0x10074E438
	public static EventFunction`1<IMoveHandler> get_moveHandler(); // 0x10075175C
	public static EventFunction`1<ISubmitHandler> get_submitHandler(); // 0x1007517C4
	public static EventFunction`1<ICancelHandler> get_cancelHandler(); // 0x10075182C
	private static void GetEventChain(GameObject root, IList`1<Transform> eventChain); // 0x100751894
	public static bool Execute(GameObject target, BaseEventData eventData, EventFunction`1<T> functor); // 0
	public static GameObject ExecuteHierarchy(GameObject root, BaseEventData eventData, EventFunction`1<T> callbackFunction); // 0
	private static bool ShouldSendToComponent(Component component); // 0
	private static void GetEventList(GameObject go, IList`1<IEventSystemHandler> results); // 0
	public static bool CanHandleEvent(GameObject go); // 0
	public static GameObject GetEventHandler(GameObject root); // 0
	private static void <s_HandlerListPool>m__0(List`1<IEventSystemHandler> l); // 0x100751A98
}

// Namespace: 
public sealed class EventFunction`1 : MulticastDelegate // TypeDefIndex: 2934
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0
	public virtual void Invoke(T handler, BaseEventData eventData); // 0
	public virtual IAsyncResult BeginInvoke(T handler, BaseEventData eventData, AsyncCallback callback, object object); // 0
	public virtual void EndInvoke(IAsyncResult result); // 0
}

// Namespace: UnityEngine.EventSystems
public sealed class MoveDirection : Enum // TypeDefIndex: 2935
{
	// Fields
	public int value__; // 0x10
	public const MoveDirection Left = 0; // 0x0
	public const MoveDirection Up = 1; // 0x0
	public const MoveDirection Right = 2; // 0x0
	public const MoveDirection Down = 3; // 0x0
	public const MoveDirection None = 4; // 0x0

}

// Namespace: UnityEngine.EventSystems
internal static class RaycasterManager // TypeDefIndex: 2936
{
	// Fields
	private static readonly List`1<BaseRaycaster> s_Raycasters; // 0x0

	// Methods
	private static void .cctor(); // 0x100754CFC
	public static void AddRaycaster(BaseRaycaster baseRaycaster); // 0x10074E010
	public static List`1<BaseRaycaster> GetRaycasters(); // 0x10074EC8C
	public static void RemoveRaycasters(BaseRaycaster baseRaycaster); // 0x10074E144
}

// Namespace: UnityEngine.EventSystems
public struct RaycastResult // TypeDefIndex: 2937
{
	// Fields
	private GameObject m_GameObject; // 0x10
	public BaseRaycaster module; // 0x18
	public float distance; // 0x20
	public float index; // 0x24
	public int depth; // 0x28
	public int sortingLayer; // 0x2C
	public int sortingOrder; // 0x30
	public Vector3 worldPosition; // 0x34
	public Vector3 worldNormal; // 0x40
	public Vector2 screenPosition; // 0x4C

	// Methods
	public GameObject get_gameObject(); // 0x100754D70
	public void set_gameObject(GameObject value); // 0x100754D78
	public bool get_isValid(); // 0x100754E40
	public override string ToString(); // 0x100754E48
}

// Namespace: UnityEngine.EventSystems
public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2938
{
	// Methods
	protected void .ctor(); // 0x10074CE0C
	protected virtual void Awake(); // 0x1007579A8
	protected virtual void OnEnable(); // 0x10074CE7C
	protected virtual void Start(); // 0x1007579AC
	protected virtual void OnDisable(); // 0x10074CFFC
	protected virtual void OnDestroy(); // 0x1007579B0
	public virtual bool IsActive(); // 0x1007579B4
	protected virtual void OnRectTransformDimensionsChange(); // 0x1007579BC
	protected virtual void OnBeforeTransformParentChanged(); // 0x1007579C0
	protected virtual void OnTransformParentChanged(); // 0x1007579C4
	protected virtual void OnDidApplyAnimationProperties(); // 0x1007579C8
	protected virtual void OnCanvasGroupChanged(); // 0x1007579CC
	protected virtual void OnCanvasHierarchyChanged(); // 0x1007579D0
	public bool IsDestroyed(); // 0x1007579D4
}

// Namespace: UnityEngine.EventSystems
public class AxisEventData : BaseEventData // TypeDefIndex: 2939
{
	// Fields
	private Vector2 <moveVector>k__BackingField; // 0x20
	private MoveDirection <moveDir>k__BackingField; // 0x28

	// Methods
	public void .ctor(EventSystem eventSystem); // 0x10074CB54
	public void set_moveVector(Vector2 value); // 0x10074CBC8
	public MoveDirection get_moveDir(); // 0x10074CBDC
	public void set_moveDir(MoveDirection value); // 0x10074CBD4
}

// Namespace: UnityEngine.EventSystems
public abstract class AbstractEventData // TypeDefIndex: 2940
{
	// Fields
	protected bool m_Used; // 0x10

	// Methods
	protected void .ctor(); // 0x10074CB30
	public virtual void Reset(); // 0x10074CB38
	public virtual void Use(); // 0x10074CB40
	public virtual bool get_used(); // 0x10074CB4C
}

// Namespace: UnityEngine.EventSystems
public class BaseEventData : AbstractEventData // TypeDefIndex: 2941
{
	// Fields
	private readonly EventSystem m_EventSystem; // 0x18

	// Methods
	public void .ctor(EventSystem eventSystem); // 0x10074CB9C
	public void set_selectedObject(GameObject value); // 0x10074CBE4
}

// Namespace: UnityEngine.EventSystems
public class PointerEventData : BaseEventData // TypeDefIndex: 2942
{
	// Fields
	private GameObject m_PointerPress; // 0x20
	public List`1<GameObject> hovered; // 0x28
	private GameObject <pointerEnter>k__BackingField; // 0x30
	private GameObject <lastPress>k__BackingField; // 0x38
	private GameObject <rawPointerPress>k__BackingField; // 0x40
	private GameObject <pointerDrag>k__BackingField; // 0x48
	private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x50
	private RaycastResult <pointerPressRaycast>k__BackingField; // 0x98
	private bool <eligibleForClick>k__BackingField; // 0xE0
	private int <pointerId>k__BackingField; // 0xE4
	private Vector2 <position>k__BackingField; // 0xE8
	private Vector2 <delta>k__BackingField; // 0xF0
	private Vector2 <pressPosition>k__BackingField; // 0xF8
	private Vector3 <worldPosition>k__BackingField; // 0x100
	private Vector3 <worldNormal>k__BackingField; // 0x10C
	private float <clickTime>k__BackingField; // 0x118
	private int <clickCount>k__BackingField; // 0x11C
	private Vector2 <scrollDelta>k__BackingField; // 0x120
	private bool <useDragThreshold>k__BackingField; // 0x128
	private bool <dragging>k__BackingField; // 0x129
	private InputButton <button>k__BackingField; // 0x12C

	// Methods
	public void .ctor(EventSystem eventSystem); // 0x1007527AC
	public GameObject get_pointerEnter(); // 0x10074D910
	public void set_pointerEnter(GameObject value); // 0x10074D980
	public GameObject get_lastPress(); // 0x1007528FC
	private void set_lastPress(GameObject value); // 0x100752904
	public void set_rawPointerPress(GameObject value); // 0x10075290C
	public GameObject get_pointerDrag(); // 0x100752914
	public void set_pointerDrag(GameObject value); // 0x10075291C
	public RaycastResult get_pointerCurrentRaycast(); // 0x100752924
	public void set_pointerCurrentRaycast(RaycastResult value); // 0x100752934
	public RaycastResult get_pointerPressRaycast(); // 0x100752950
	public void set_pointerPressRaycast(RaycastResult value); // 0x100752960
	public bool get_eligibleForClick(); // 0x10075297C
	public void set_eligibleForClick(bool value); // 0x100752894
	public int get_pointerId(); // 0x100752984
	public void set_pointerId(int value); // 0x10075289C
	public Vector2 get_position(); // 0x100752084
	public void set_position(Vector2 value); // 0x1007528A4
	public Vector2 get_delta(); // 0x10075298C
	public void set_delta(Vector2 value); // 0x1007528B0
	public Vector2 get_pressPosition(); // 0x100752994
	public void set_pressPosition(Vector2 value); // 0x1007528BC
	public float get_clickTime(); // 0x10075299C
	public void set_clickTime(float value); // 0x1007528C8
	public int get_clickCount(); // 0x1007529A4
	public void set_clickCount(int value); // 0x1007528D0
	public Vector2 get_scrollDelta(); // 0x1007529AC
	public void set_scrollDelta(Vector2 value); // 0x1007528D8
	public bool get_useDragThreshold(); // 0x1007529B8
	public void set_useDragThreshold(bool value); // 0x1007528E4
	public bool get_dragging(); // 0x1007529C0
	public void set_dragging(bool value); // 0x1007528EC
	public InputButton get_button(); // 0x1007529C8
	public void set_button(InputButton value); // 0x1007528F4
	public bool IsPointerMoving(); // 0x1007529D0
	public Camera get_enterEventCamera(); // 0x100752A04
	public Camera get_pressEventCamera(); // 0x100752AD0
	public GameObject get_pointerPress(); // 0x100752B9C
	public void set_pointerPress(GameObject value); // 0x100752BA4
	public override string ToString(); // 0x100752C38
}

// Namespace: 
public sealed class InputButton : Enum // TypeDefIndex: 2943
{
	// Fields
	public int value__; // 0x10
	public const InputButton Left = 0; // 0x0
	public const InputButton Right = 1; // 0x0
	public const InputButton Middle = 2; // 0x0

}

// Namespace: 
public sealed class FramePressState : Enum // TypeDefIndex: 2944
{
	// Fields
	public int value__; // 0x10
	public const FramePressState Pressed = 0; // 0x0
	public const FramePressState Released = 1; // 0x0
	public const FramePressState PressedAndReleased = 2; // 0x0
	public const FramePressState NotChanged = 3; // 0x0

}

// Namespace: UnityEngine.EventSystems
public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2945
{
	// Fields
	protected List`1<RaycastResult> m_RaycastResultCache; // 0x18
	private AxisEventData m_AxisEventData; // 0x20
	private EventSystem m_EventSystem; // 0x28
	private BaseEventData m_BaseEventData; // 0x30

	// Methods
	protected void .ctor(); // 0x10074CD9C
	protected EventSystem get_eventSystem(); // 0x10074CE14
	protected override void OnEnable(); // 0x10074CE1C
	protected override void OnDisable(); // 0x10074CFE4
	public abstract void Process(); // 0
	protected static RaycastResult FindFirstRaycast(List`1<RaycastResult> candidates); // 0x10074D000
	protected static MoveDirection DetermineMoveDirection(float x, float y); // 0x10074D160
	protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone); // 0x10074D16C
	protected static GameObject FindCommonRoot(GameObject g1, GameObject g2); // 0x10074D24C
	protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget); // 0x10074D408
	protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone); // 0x10074D9F0
	protected virtual BaseEventData GetBaseEventData(); // 0x10074DB1C
	public virtual bool IsPointerOverGameObject(int pointerId); // 0x10074DBC4
	public virtual bool ShouldActivateModule(); // 0x10074DBCC
	public virtual void DeactivateModule(); // 0x10074DC18
	public virtual void ActivateModule(); // 0x10074DC1C
	public virtual void UpdateModule(); // 0x10074DC20
	public virtual bool IsModuleSupported(); // 0x10074DC24
}

// Namespace: UnityEngine.EventSystems
public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2946
{
	// Fields
	public const int kMouseLeftId = -1; // 0x0
	public const int kMouseRightId = -2; // 0x0
	public const int kMouseMiddleId = -3; // 0x0
	public const int kFakeTouchesId = -4; // 0x0
	protected Dictionary`2<int, PointerEventData> m_PointerData; // 0x38
	private readonly MouseState m_MouseState; // 0x40

	// Methods
	protected void .ctor(); // 0x10075383C
	protected bool GetPointerData(int id, out PointerEventData data, bool create); // 0x100753934
	protected void RemovePointerData(PointerEventData data); // 0x100753A18
	protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released); // 0x100753A84
	protected void CopyFromTo(PointerEventData from, PointerEventData to); // 0x100753C8C
	protected static FramePressState StateForMouseButton(int buttonId); // 0x100753CE8
	protected virtual MouseState GetMousePointerEventData(); // 0x100753D88
	protected virtual MouseState GetMousePointerEventData(int id); // 0x100753DD8
	protected PointerEventData GetLastPointerEventData(int id); // 0x100754138
	private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold); // 0x100754164
	protected virtual void ProcessMove(PointerEventData pointerEvent); // 0x1007541C0
	protected virtual void ProcessDrag(PointerEventData pointerEvent); // 0x1007541D8
	public override bool IsPointerOverGameObject(int pointerId); // 0x100754420
	protected void ClearSelection(); // 0x1007544D4
	public override string ToString(); // 0x10075470C
	protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent); // 0x100754A78
}

// Namespace: 
protected class ButtonState // TypeDefIndex: 2947
{
	// Fields
	private InputButton m_Button; // 0x10
	private MouseButtonEventData m_EventData; // 0x18

	// Methods
	public void .ctor(); // 0x100754B6C
	public MouseButtonEventData get_eventData(); // 0x100754B74
	public void set_eventData(MouseButtonEventData value); // 0x100754B7C
	public InputButton get_button(); // 0x100754B84
	public void set_button(InputButton value); // 0x100754B8C
}

// Namespace: 
protected class MouseState // TypeDefIndex: 2948
{
	// Fields
	private List`1<ButtonState> m_TrackedButtons; // 0x10

	// Methods
	public void .ctor(); // 0x1007538C4
	public ButtonState GetButtonState(InputButton button); // 0x100754BC4
	public void SetButtonState(InputButton button, FramePressState stateForMouseButton, PointerEventData data); // 0x1007540FC
}

// Namespace: 
public class MouseButtonEventData // TypeDefIndex: 2949
{
	// Fields
	public FramePressState buttonState; // 0x10
	public PointerEventData buttonData; // 0x18

	// Methods
	public void .ctor(); // 0x100754B94
	public bool PressedThisFrame(); // 0x100754B9C
	public bool ReleasedThisFrame(); // 0x100754BB0
}

// Namespace: UnityEngine.EventSystems
public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2950
{
	// Fields
	private float m_PrevActionTime; // 0x48
	private Vector2 m_LastMoveVector; // 0x4C
	private int m_ConsecutiveMoveCount; // 0x54
	private Vector2 m_LastMousePosition; // 0x58
	private Vector2 m_MousePosition; // 0x60
	private string m_HorizontalAxis; // 0x68
	private string m_VerticalAxis; // 0x70
	private string m_SubmitButton; // 0x78
	private string m_CancelButton; // 0x80
	private float m_InputActionsPerSecond; // 0x88
	private float m_RepeatDelay; // 0x8C
	private bool m_ForceModuleActive; // 0x90

	// Methods
	protected void .ctor(); // 0x100754E84
	public InputMode get_inputMode(); // 0x100754F14
	public bool get_allowActivationOnMobileDevice(); // 0x100754F1C
	public void set_allowActivationOnMobileDevice(bool value); // 0x100754F24
	public bool get_forceModuleActive(); // 0x100754F2C
	public void set_forceModuleActive(bool value); // 0x100754F34
	public float get_inputActionsPerSecond(); // 0x100754F3C
	public void set_inputActionsPerSecond(float value); // 0x100754F44
	public float get_repeatDelay(); // 0x100754F4C
	public void set_repeatDelay(float value); // 0x100754F54
	public string get_horizontalAxis(); // 0x100754F5C
	public void set_horizontalAxis(string value); // 0x100754F64
	public string get_verticalAxis(); // 0x100754F6C
	public void set_verticalAxis(string value); // 0x100754F74
	public string get_submitButton(); // 0x100754F7C
	public void set_submitButton(string value); // 0x100754F84
	public string get_cancelButton(); // 0x100754F8C
	public void set_cancelButton(string value); // 0x100754F94
	public override void UpdateModule(); // 0x100754F9C
	public override bool IsModuleSupported(); // 0x100755024
	public override bool ShouldActivateModule(); // 0x1007550CC
	public override void ActivateModule(); // 0x10075526C
	public override void DeactivateModule(); // 0x10075539C
	public override void Process(); // 0x1007553A0
	private bool ProcessTouchEvents(); // 0x100755A9C
	private void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x100755C74
	protected bool SendSubmitEventToSelectedObject(); // 0x100755890
	private Vector2 GetRawMoveVector(); // 0x100756228
	protected bool SendMoveEventToSelectedObject(); // 0x1007555C0
	protected void ProcessMouseEvent(); // 0x100755C6C
	protected void ProcessMouseEvent(int id); // 0x100756358
	protected bool SendUpdateEventToSelectedObject(); // 0x10075546C
	protected void ProcessMousePress(MouseButtonEventData data); // 0x1007565F8
}

// Namespace: 
public sealed class InputMode : Enum // TypeDefIndex: 2951
{
	// Fields
	public int value__; // 0x10
	public const InputMode Mouse = 0; // 0x0
	public const InputMode Buttons = 1; // 0x0

}

// Namespace: UnityEngine.EventSystems
public class TouchInputModule : PointerInputModule // TypeDefIndex: 2952
{
	// Fields
	private Vector2 m_LastMousePosition; // 0x48
	private Vector2 m_MousePosition; // 0x50
	private bool m_ForceModuleActive; // 0x58

	// Methods
	protected void .ctor(); // 0x100756B2C
	public bool get_allowActivationOnStandalone(); // 0x100756B30
	public void set_allowActivationOnStandalone(bool value); // 0x100756B38
	public bool get_forceModuleActive(); // 0x100756B40
	public void set_forceModuleActive(bool value); // 0x100756B48
	public override void UpdateModule(); // 0x100756B50
	public override bool IsModuleSupported(); // 0x100756BD8
	public override bool ShouldActivateModule(); // 0x100756C58
	private bool UseFakeInput(); // 0x100756D64
	public override void Process(); // 0x100756DD0
	private void FakeTouches(); // 0x100756E08
	private void ProcessTouchEvents(); // 0x100756F9C
	private void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released); // 0x100757144
	public override void DeactivateModule(); // 0x1007576F8
	public override string ToString(); // 0x1007576FC
}

// Namespace: UnityEngine.EventSystems
public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2953
{
	// Methods
	protected void .ctor(); // 0x10074DC2C
	public abstract void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList); // 0
	public abstract Camera get_eventCamera(); // 0
	public virtual int get_priority(); // 0x10074DC34
	public virtual int get_sortOrderPriority(); // 0x10074DC3C
	public virtual int get_renderOrderPriority(); // 0x10074DC44
	public override string ToString(); // 0x10074DC4C
	protected override void OnEnable(); // 0x10074DFAC
	protected override void OnDisable(); // 0x10074E0E0
}

// Namespace: UnityEngine.EventSystems
public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2954
{
	// Methods
	protected void .ctor(); // 0x100751AF0
	public override void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList); // 0x100751B60
}

// Namespace: UnityEngine.EventSystems
public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2955
{
	// Fields
	protected const int kNoEventMaskSet = -1; // 0x0
	protected Camera m_EventCamera; // 0x18
	protected LayerMask m_EventMask; // 0x20
	private static Comparison`1<RaycastHit> <>f__am$cache2; // 0x0

	// Methods
	protected void .ctor(); // 0x100751B28
	public override Camera get_eventCamera(); // 0x100752188
	public virtual int get_depth(); // 0x10075223C
	public int get_finalEventMask(); // 0x10075208C
	public LayerMask get_eventMask(); // 0x100752324
	public void set_eventMask(LayerMask value); // 0x10075232C
	public override void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList); // 0x100752334
	private static int <Raycast>m__1(RaycastHit r1, RaycastHit r2); // 0x100752760
}

// Namespace: UnityEngine.UI.CoroutineTween
internal interface ITweenValue // TypeDefIndex: 2956
{
	// Methods
	public abstract void TweenValue(float floatPercentage); // 0
	public abstract bool get_ignoreTimeScale(); // 0
	public abstract float get_duration(); // 0
	public abstract bool ValidTarget(); // 0
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct ColorTween : ITweenValue // TypeDefIndex: 2957
{
	// Fields
	private ColorTweenCallback m_Target; // 0x10
	private Color m_StartColor; // 0x18
	private Color m_TargetColor; // 0x28
	private ColorTweenMode m_TweenMode; // 0x38
	private float m_Duration; // 0x3C
	private bool m_IgnoreTimeScale; // 0x40

	// Methods
	public Color get_startColor(); // 0x10075C06C
	public void set_startColor(Color value); // 0x10075C078
	public Color get_targetColor(); // 0x10075C08C
	public void set_targetColor(Color value); // 0x10075C098
	public ColorTweenMode get_tweenMode(); // 0x10075C0AC
	public void set_tweenMode(ColorTweenMode value); // 0x10075C0B4
	public float get_duration(); // 0x10075C0C4
	public void set_duration(float value); // 0x10075C0CC
	public bool get_ignoreTimeScale(); // 0x10075C0DC
	public void set_ignoreTimeScale(bool value); // 0x10075C0E4
	public void TweenValue(float floatPercentage); // 0x10075C1C8
	public void AddOnChangedCallback(UnityAction`1<Color> callback); // 0x10075C2AC
	public bool GetIgnoreTimescale(); // 0x10075C2B4
	public float GetDuration(); // 0x10075C2BC
	public bool ValidTarget(); // 0x10075C2C4
}

// Namespace: 
public sealed class ColorTweenMode : Enum // TypeDefIndex: 2958
{
	// Fields
	public int value__; // 0x10
	public const ColorTweenMode All = 0; // 0x0
	public const ColorTweenMode RGB = 1; // 0x0
	public const ColorTweenMode Alpha = 2; // 0x0

}

// Namespace: 
public class ColorTweenCallback : UnityEvent`1<Color> // TypeDefIndex: 2959
{
	// Methods
	public void .ctor(); // 0x10075C25C
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct FloatTween : ITweenValue // TypeDefIndex: 2960
{
	// Fields
	private FloatTweenCallback m_Target; // 0x10
	private float m_StartValue; // 0x18
	private float m_TargetValue; // 0x1C
	private float m_Duration; // 0x20
	private bool m_IgnoreTimeScale; // 0x24

	// Methods
	public float get_startValue(); // 0x10075C308
	public void set_startValue(float value); // 0x10075C310
	public float get_targetValue(); // 0x10075C318
	public void set_targetValue(float value); // 0x10075C320
	public float get_duration(); // 0x10075C330
	public void set_duration(float value); // 0x10075C338
	public bool get_ignoreTimeScale(); // 0x10075C348
	public void set_ignoreTimeScale(bool value); // 0x10075C350
	public void TweenValue(float floatPercentage); // 0x10075C42C
	public void AddOnChangedCallback(UnityAction`1<float> callback); // 0x10075C510
	public bool GetIgnoreTimescale(); // 0x10075C518
	public float GetDuration(); // 0x10075C520
	public bool ValidTarget(); // 0x10075C528
}

// Namespace: 
public class FloatTweenCallback : UnityEvent`1<float> // TypeDefIndex: 2961
{
	// Methods
	public void .ctor(); // 0x10075C4C0
}

// Namespace: UnityEngine.UI.CoroutineTween
internal class TweenRunner`1 // TypeDefIndex: 2962
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0x0
	protected IEnumerator m_Tween; // 0x0

	// Methods
	public void .ctor(); // 0
	private static IEnumerator Start(T tweenInfo); // 0
	public void Init(MonoBehaviour coroutineContainer); // 0
	public void StartTween(T info); // 0
	public void StopTween(); // 0
}

// Namespace: 
private sealed class <Start>c__Iterator0 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 2963
{
	// Fields
	internal T tweenInfo; // 0x0
	internal float <elapsedTime>__0; // 0x0
	internal float <percentage>__1; // 0x0
	internal int $PC; // 0x0
	internal object $current; // 0x0
	internal T <$>tweenInfo; // 0x0

	// Methods
	public void .ctor(); // 0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0
	private object System.Collections.IEnumerator.get_Current(); // 0
	public bool MoveNext(); // 0
	public void Dispose(); // 0
	public void Reset(); // 0
}

// Namespace: UnityEngine.UI
public class AnimationTriggers // TypeDefIndex: 2964
{
	// Fields
	private const string kDefaultNormalAnimName = "Normal"; // 0x0
	private const string kDefaultSelectedAnimName = "Highlighted"; // 0x0
	private const string kDefaultPressedAnimName = "Pressed"; // 0x0
	private const string kDefaultDisabledAnimName = "Disabled"; // 0x0
	private string m_NormalTrigger; // 0x10
	private string m_HighlightedTrigger; // 0x18
	private string m_PressedTrigger; // 0x20
	private string m_DisabledTrigger; // 0x28

	// Methods
	public void .ctor(); // 0x100757A44
	public string get_normalTrigger(); // 0x100757ACC
	public string get_highlightedTrigger(); // 0x100757AD4
	public string get_pressedTrigger(); // 0x100757ADC
	public string get_disabledTrigger(); // 0x100757AE4
}

// Namespace: UnityEngine.UI
public class Button : Selectable, IEventSystemHandler, IPointerClickHandler, ISubmitHandler // TypeDefIndex: 2965
{
	// Fields
	private ButtonClickedEvent m_OnClick; // 0xD8

	// Methods
	protected void .ctor(); // 0x1007588B8
	public ButtonClickedEvent get_onClick(); // 0x100758948
	public void set_onClick(ButtonClickedEvent value); // 0x100758950
	private void Press(); // 0x100758958
	public virtual void OnPointerClick(PointerEventData eventData); // 0x1007589EC
	public virtual void OnSubmit(BaseEventData eventData); // 0x100758A0C
	private IEnumerator OnFinishSubmit(); // 0x100758AD4
}

// Namespace: 
public class ButtonClickedEvent : UnityEvent // TypeDefIndex: 2966
{
	// Methods
	public void .ctor(); // 0x100758940
}

// Namespace: 
private sealed class <OnFinishSubmit>c__Iterator1 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 2967
{
	// Fields
	internal float <fadeTime>__0; // 0x10
	internal float <elapsedTime>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal Button <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100758B40
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100758B48
	private object System.Collections.IEnumerator.get_Current(); // 0x100758B50
	public bool MoveNext(); // 0x100758B58
	public void Dispose(); // 0x100758C84
	public void Reset(); // 0x100758C90
}

// Namespace: UnityEngine.UI
public sealed class CanvasUpdate : Enum // TypeDefIndex: 2968
{
	// Fields
	public int value__; // 0x10
	public const CanvasUpdate Prelayout = 0; // 0x0
	public const CanvasUpdate Layout = 1; // 0x0
	public const CanvasUpdate PostLayout = 2; // 0x0
	public const CanvasUpdate PreRender = 3; // 0x0
	public const CanvasUpdate LatePreRender = 4; // 0x0
	public const CanvasUpdate MaxUpdateValue = 5; // 0x0

}

// Namespace: UnityEngine.UI
public interface ICanvasElement // TypeDefIndex: 2969
{
	// Methods
	public abstract void Rebuild(CanvasUpdate executing); // 0
	public abstract Transform get_transform(); // 0
	public abstract void LayoutComplete(); // 0
	public abstract void GraphicUpdateComplete(); // 0
	public abstract bool IsDestroyed(); // 0
}

// Namespace: UnityEngine.UI
public class CanvasUpdateRegistry // TypeDefIndex: 2970
{
	// Fields
	private static CanvasUpdateRegistry s_Instance; // 0x0
	private bool m_PerformingLayoutUpdate; // 0x10
	private bool m_PerformingGraphicUpdate; // 0x11
	private readonly IndexedSet`1<ICanvasElement> m_LayoutRebuildQueue; // 0x18
	private readonly IndexedSet`1<ICanvasElement> m_GraphicRebuildQueue; // 0x20
	private static readonly Comparison`1<ICanvasElement> s_SortLayoutFunction; // 0x8

	// Methods
	protected void .ctor(); // 0x1007595B8
	private static void .cctor(); // 0x100759688
	public static CanvasUpdateRegistry get_instance(); // 0x100759710
	private bool ObjectValidForUpdate(ICanvasElement element); // 0x1007597D0
	private void CleanInvalidItems(); // 0x1007598B4
	private void PerformUpdate(); // 0x100759C34
	private static int ParentCount(Transform child); // 0x10075A650
	private static int SortLayoutList(ICanvasElement x, ICanvasElement y); // 0x10075A744
	public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x10075A8F8
	public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x10075AA04
	private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x10075A968
	public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x10075AA74
	private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x10075AAE4
	public static void UnRegisterCanvasElementForRebuild(ICanvasElement element); // 0x10075ABD8
	private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element); // 0x10075AC58
	private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element); // 0x10075AE10
	public static bool IsRebuildingLayout(); // 0x10075AFC8
	public static bool IsRebuildingGraphics(); // 0x10075B034
}

// Namespace: UnityEngine.UI
public struct ColorBlock : IEquatable`1<ColorBlock> // TypeDefIndex: 2971
{
	// Fields
	private Color m_NormalColor; // 0x10
	private Color m_HighlightedColor; // 0x20
	private Color m_PressedColor; // 0x30
	private Color m_DisabledColor; // 0x40
	private float m_ColorMultiplier; // 0x50
	private float m_FadeDuration; // 0x54

	// Methods
	public Color get_normalColor(); // 0x10075B6A4
	public Color get_highlightedColor(); // 0x10075B6BC
	public Color get_pressedColor(); // 0x10075B6D4
	public Color get_disabledColor(); // 0x10075B6EC
	public float get_colorMultiplier(); // 0x10075B700
	public void set_colorMultiplier(float value); // 0x10075B708
	public float get_fadeDuration(); // 0x10075B710
	public void set_fadeDuration(float value); // 0x10075B718
	public static ColorBlock get_defaultColorBlock(); // 0x10075B720
	public override bool Equals(object obj); // 0x10075BA64
	public bool Equals(ColorBlock other); // 0x10075BA6C
	public override int GetHashCode(); // 0x10075BB24
}

// Namespace: UnityEngine.UI
public class Dropdown : Selectable, IEventSystemHandler, IPointerClickHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2972
{
	// Fields
	private RectTransform m_Template; // 0xD8
	private Text m_CaptionText; // 0xE0
	private Image m_CaptionImage; // 0xE8
	private Text m_ItemText; // 0xF0
	private Image m_ItemImage; // 0xF8
	private int m_Value; // 0x100
	private OptionDataList m_Options; // 0x108
	private DropdownEvent m_OnValueChanged; // 0x110
	private GameObject m_Dropdown; // 0x118
	private GameObject m_Blocker; // 0x120
	private List`1<DropdownItem> m_Items; // 0x128
	private TweenRunner`1<FloatTween> m_AlphaTweenRunner; // 0x130
	private bool validTemplate; // 0x138
	private static OptionData s_NoOptionData; // 0x0

	// Methods
	protected void .ctor(); // 0x10075C56C
	private static void .cctor(); // 0x10075C6F8
	public RectTransform get_template(); // 0x10075C76C
	public void set_template(RectTransform value); // 0x10075C774
	public Text get_captionText(); // 0x10075CA28
	public void set_captionText(Text value); // 0x10075CA30
	public Image get_captionImage(); // 0x10075CA38
	public void set_captionImage(Image value); // 0x10075CA40
	public Text get_itemText(); // 0x10075CA48
	public void set_itemText(Text value); // 0x10075CA50
	public Image get_itemImage(); // 0x10075CA58
	public void set_itemImage(Image value); // 0x10075CA60
	public List`1<OptionData> get_options(); // 0x10075CA68
	public void set_options(List`1<OptionData> value); // 0x10075CA8C
	public DropdownEvent get_onValueChanged(); // 0x10075CAB0
	public void set_onValueChanged(DropdownEvent value); // 0x10075CAB8
	public int get_value(); // 0x10075CAC0
	public void set_value(int value); // 0x10075CAC8
	protected override void Awake(); // 0x10075CBEC
	public void RefreshShownValue(); // 0x10075C77C
	public void AddOptions(List`1<OptionData> options); // 0x10075CE20
	public void AddOptions(List`1<string> options); // 0x10075CE98
	public void AddOptions(List`1<Sprite> options); // 0x10075CFD0
	public void ClearOptions(); // 0x10075D108
	private void SetupTemplate(); // 0x10075D170
	private static T GetOrAddComponent(GameObject go); // 0
	public virtual void OnPointerClick(PointerEventData eventData); // 0x10075D6C0
	public virtual void OnSubmit(BaseEventData eventData); // 0x10075E324
	public virtual void OnCancel(BaseEventData eventData); // 0x10075E328
	public void Show(); // 0x10075D6C4
	protected virtual GameObject CreateBlocker(Canvas rootCanvas); // 0x10075E990
	protected virtual void DestroyBlocker(GameObject blocker); // 0x10075EC2C
	protected virtual GameObject CreateDropdownList(GameObject template); // 0x10075EC98
	protected virtual void DestroyDropdownList(GameObject dropdownList); // 0x10075ED0C
	protected virtual DropdownItem CreateItem(DropdownItem itemTemplate); // 0x10075ED78
	protected virtual void DestroyItem(DropdownItem item); // 0x10075EDEC
	private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List`1<DropdownItem> items); // 0x10075E4C0
	private void AlphaFadeList(float duration, float alpha); // 0x10075EE00
	private void AlphaFadeList(float duration, float start, float end); // 0x10075E83C
	private void SetAlpha(float alpha); // 0x10075EE88
	public void Hide(); // 0x10075E32C
	private IEnumerator DelayedDestroyDropdownList(float delay); // 0x10075EF44
	private void OnSelectItem(Toggle toggle); // 0x10075EFCC
}

// Namespace: 
protected internal class DropdownItem : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, ICancelHandler // TypeDefIndex: 2973
{
	// Fields
	private Text m_Text; // 0x18
	private Image m_Image; // 0x20
	private RectTransform m_RectTransform; // 0x28
	private Toggle m_Toggle; // 0x30

	// Methods
	public void .ctor(); // 0x10075F424
	public Text get_text(); // 0x10075EDF0
	public void set_text(Text value); // 0x10075D6A0
	public Image get_image(); // 0x10075EDF8
	public void set_image(Image value); // 0x10075D6A8
	public RectTransform get_rectTransform(); // 0x10075E4B0
	public void set_rectTransform(RectTransform value); // 0x10075D6B8
	public Toggle get_toggle(); // 0x10075E834
	public void set_toggle(Toggle value); // 0x10075D6B0
	public virtual void OnPointerEnter(PointerEventData eventData); // 0x10075F42C
	public virtual void OnCancel(BaseEventData eventData); // 0x10075F4C0
}

// Namespace: 
public class OptionData // TypeDefIndex: 2974
{
	// Fields
	private string m_Text; // 0x10
	private Sprite m_Image; // 0x18

	// Methods
	public void .ctor(); // 0x10075C764
	public void .ctor(string text); // 0x10075CFA4
	public void .ctor(Sprite image); // 0x10075D0DC
	public string get_text(); // 0x10075CD60
	public void set_text(string value); // 0x10075F564
	public Sprite get_image(); // 0x10075CD68
	public void set_image(Sprite value); // 0x10075F56C
}

// Namespace: 
public class OptionDataList // TypeDefIndex: 2975
{
	// Fields
	private List`1<OptionData> m_Options; // 0x10

	// Methods
	public void .ctor(); // 0x10075C634
	public List`1<OptionData> get_options(); // 0x10075CA84
	public void set_options(List`1<OptionData> value); // 0x10075CAA8
}

// Namespace: 
public class DropdownEvent : UnityEvent`1<int> // TypeDefIndex: 2976
{
	// Methods
	public void .ctor(); // 0x10075C6A8
}

// Namespace: 
private sealed class <DelayedDestroyDropdownList>c__Iterator2 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 2977
{
	// Fields
	internal float delay; // 0x10
	internal int <i>__0; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal float <$>delay; // 0x28
	internal Dropdown <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x10075EFC4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10075F11C
	private object System.Collections.IEnumerator.get_Current(); // 0x10075F124
	public bool MoveNext(); // 0x10075F12C
	public void Dispose(); // 0x10075F39C
	public void Reset(); // 0x10075F3A8
}

// Namespace: 
private sealed class <Show>c__AnonStorey6 // TypeDefIndex: 2978
{
	// Fields
	internal DropdownItem item; // 0x10
	internal Dropdown <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10075E4B8
	internal void <>m__2(bool x); // 0x10075F3FC
}

// Namespace: UnityEngine.UI
public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2979
{
	// Fields
	private Font m_Font; // 0x10
	private int m_FontSize; // 0x18
	private FontStyle m_FontStyle; // 0x1C
	private bool m_BestFit; // 0x20
	private int m_MinSize; // 0x24
	private int m_MaxSize; // 0x28
	private TextAnchor m_Alignment; // 0x2C
	private bool m_AlignByGeometry; // 0x30
	private bool m_RichText; // 0x31
	private HorizontalWrapMode m_HorizontalOverflow; // 0x34
	private VerticalWrapMode m_VerticalOverflow; // 0x38
	private float m_LineSpacing; // 0x3C

	// Methods
	public void .ctor(); // 0x10075F574
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize(); // 0x10075F57C
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize(); // 0x10075F580
	public static FontData get_defaultFontData(); // 0x10075F63C
	public Font get_font(); // 0x10075F6D4
	public void set_font(Font value); // 0x10075F6DC
	public int get_fontSize(); // 0x10075F6E4
	public void set_fontSize(int value); // 0x10075F6EC
	public FontStyle get_fontStyle(); // 0x10075F6F4
	public void set_fontStyle(FontStyle value); // 0x10075F6FC
	public bool get_bestFit(); // 0x10075F704
	public void set_bestFit(bool value); // 0x10075F70C
	public int get_minSize(); // 0x10075F714
	public void set_minSize(int value); // 0x10075F71C
	public int get_maxSize(); // 0x10075F724
	public void set_maxSize(int value); // 0x10075F72C
	public TextAnchor get_alignment(); // 0x10075F734
	public void set_alignment(TextAnchor value); // 0x10075F73C
	public bool get_alignByGeometry(); // 0x10075F744
	public void set_alignByGeometry(bool value); // 0x10075F74C
	public bool get_richText(); // 0x10075F754
	public void set_richText(bool value); // 0x10075F75C
	public HorizontalWrapMode get_horizontalOverflow(); // 0x10075F764
	public void set_horizontalOverflow(HorizontalWrapMode value); // 0x10075F76C
	public VerticalWrapMode get_verticalOverflow(); // 0x10075F774
	public void set_verticalOverflow(VerticalWrapMode value); // 0x10075F77C
	public float get_lineSpacing(); // 0x10075F784
	public void set_lineSpacing(float value); // 0x10075F78C
}

// Namespace: UnityEngine.UI
public static class FontUpdateTracker // TypeDefIndex: 2980
{
	// Fields
	private static Dictionary`2<Font, List`1<Text>> m_Tracked; // 0x0

	// Methods
	private static void .cctor(); // 0x10075F794
	public static void TrackText(Text t); // 0x10075F808
	private static void RebuildForFont(Font f); // 0x10075FA44
	public static void UntrackText(Text t); // 0x10075FB3C
}

// Namespace: UnityEngine.UI
public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2981
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x8
	protected Material m_Material; // 0x18
	private Color m_Color; // 0x20
	private bool m_RaycastTarget; // 0x30
	private RectTransform m_RectTransform; // 0x38
	private CanvasRenderer m_CanvasRender; // 0x40
	private Canvas m_Canvas; // 0x48
	private bool m_VertsDirty; // 0x50
	private bool m_MaterialDirty; // 0x51
	protected UnityAction m_OnDirtyLayoutCallback; // 0x58
	protected UnityAction m_OnDirtyVertsCallback; // 0x60
	protected UnityAction m_OnDirtyMaterialCallback; // 0x68
	protected static Mesh s_Mesh; // 0x10
	private static readonly VertexHelper s_VertexHelper; // 0x18
	private readonly TweenRunner`1<ColorTween> m_ColorTweenRunner; // 0x70
	private bool <useLegacyMeshGeneration>k__BackingField; // 0x78

	// Methods
	protected void .ctor(); // 0x10075FD28
	private static void .cctor(); // 0x10075FDFC
	public static Material get_defaultGraphicMaterial(); // 0x10075FE80
	public virtual Color get_color(); // 0x10075FF78
	public virtual void set_color(Color value); // 0x10075FF84
	public virtual bool get_raycastTarget(); // 0x10075FFF4
	public virtual void set_raycastTarget(bool value); // 0x10075FFFC
	protected bool get_useLegacyMeshGeneration(); // 0x100760004
	protected void set_useLegacyMeshGeneration(bool value); // 0x10075FDF4
	public virtual void SetAllDirty(); // 0x10076000C
	public virtual void SetLayoutDirty(); // 0x1007600A8
	public virtual void SetVerticesDirty(); // 0x1007601C8
	public virtual void SetMaterialDirty(); // 0x100760284
	protected override void OnRectTransformDimensionsChange(); // 0x100760340
	protected override void OnBeforeTransformParentChanged(); // 0x10076043C
	protected override void OnTransformParentChanged(); // 0x100760668
	public int get_depth(); // 0x100760A58
	public RectTransform get_rectTransform(); // 0x100760168
	public Canvas get_canvas(); // 0x1007604E4
	private void CacheCanvas(); // 0x100760760
	public CanvasRenderer get_canvasRenderer(); // 0x100760A78
	public virtual Material get_defaultMaterial(); // 0x100760B14
	public virtual Material get_material(); // 0x100760B70
	public virtual void set_material(Material value); // 0x100760C30
	public virtual Material get_materialForRendering(); // 0x100760D00
	public virtual Texture get_mainTexture(); // 0x100760F5C
	protected override void OnEnable(); // 0x100760FC4
	protected override void OnDisable(); // 0x100761114
	protected override void OnCanvasHierarchyChanged(); // 0x100761240
	public virtual void Rebuild(CanvasUpdate update); // 0x100761348
	public virtual void LayoutComplete(); // 0x1007613FC
	public virtual void GraphicUpdateComplete(); // 0x100761400
	protected virtual void UpdateMaterial(); // 0x100761404
	protected virtual void UpdateGeometry(); // 0x10076150C
	private void DoMeshGeneration(); // 0x1007619B0
	private void DoLegacyMeshGeneration(); // 0x10076151C
	protected static Mesh get_workerMesh(); // 0x100761E88
	protected virtual void OnFillVBO(List`1<UIVertex> vbo); // 0x100761FC8
	protected virtual void OnPopulateMesh(Mesh m); // 0x100761FCC
	protected virtual void OnPopulateMesh(VertexHelper vh); // 0x100762094
	protected override void OnDidApplyAnimationProperties(); // 0x100762418
	public virtual void SetNativeSize(); // 0x100762464
	public virtual bool Raycast(Vector2 sp, Camera eventCamera); // 0x100762468
	public Vector2 PixelAdjustPoint(Vector2 point); // 0x100762958
	public Rect GetPixelAdjustedRect(); // 0x100762318
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha); // 0x100762A6C
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB); // 0x100762B18
	private static Color CreateColorFromAlpha(float alpha); // 0x100762DC0
	public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale); // 0x100762DEC
	public void RegisterDirtyLayoutCallback(UnityAction action); // 0x100762EE4
	public void UnregisterDirtyLayoutCallback(UnityAction action); // 0x100762FC4
	public void RegisterDirtyVerticesCallback(UnityAction action); // 0x1007630A4
	public void UnregisterDirtyVerticesCallback(UnityAction action); // 0x100763184
	public void RegisterDirtyMaterialCallback(UnityAction action); // 0x100763264
	public void UnregisterDirtyMaterialCallback(UnityAction action); // 0x100763344
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x100763424
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x100763428
}

// Namespace: UnityEngine.UI
public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2982
{
	// Fields
	protected const int kNoEventMaskSet = -1; // 0x0
	private bool m_IgnoreReversedGraphics; // 0x18
	private BlockingObjects m_BlockingObjects; // 0x1C
	protected LayerMask m_BlockingMask; // 0x20
	private Canvas m_Canvas; // 0x28
	private List`1<Graphic> m_RaycastResults; // 0x30
	private static readonly List`1<Graphic> s_SortedGraphics; // 0x0
	private static Comparison`1<Graphic> <>f__am$cache6; // 0x8

	// Methods
	protected void .ctor(); // 0x100763430
	private static void .cctor(); // 0x1007634BC
	public override int get_sortOrderPriority(); // 0x100763530
	public override int get_renderOrderPriority(); // 0x100763620
	public bool get_ignoreReversedGraphics(); // 0x100763674
	public void set_ignoreReversedGraphics(bool value); // 0x10076367C
	public BlockingObjects get_blockingObjects(); // 0x100763684
	public void set_blockingObjects(BlockingObjects value); // 0x10076368C
	private Canvas get_canvas(); // 0x100763584
	public override void Raycast(PointerEventData eventData, List`1<RaycastResult> resultAppendList); // 0x100763694
	public override Camera get_eventCamera(); // 0x100764648
	private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, List`1<Graphic> results); // 0x1007641E0
	private static int <Raycast>m__3(Graphic g1, Graphic g2); // 0x10076485C
}

// Namespace: 
public sealed class BlockingObjects : Enum // TypeDefIndex: 2983
{
	// Fields
	public int value__; // 0x10
	public const BlockingObjects None = 0; // 0x0
	public const BlockingObjects TwoD = 1; // 0x0
	public const BlockingObjects ThreeD = 2; // 0x0
	public const BlockingObjects All = 3; // 0x0

}

// Namespace: UnityEngine.UI
public class GraphicRegistry // TypeDefIndex: 2984
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary`2<Canvas, IndexedSet`1<Graphic>> m_Graphics; // 0x10
	private static readonly List`1<Graphic> s_EmptyList; // 0x8

	// Methods
	protected void .ctor(); // 0x1007648B4
	private static void .cctor(); // 0x100764924
	public static GraphicRegistry get_instance(); // 0x100764998
	public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x1007608D8
	public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic); // 0x10076056C
	public static IList`1<Graphic> GetGraphicsForCanvas(Canvas canvas); // 0x100764794
}

// Namespace: UnityEngine.UI
public class Image : MaskableGraphic, ICanvasRaycastFilter, ISerializationCallbackReceiver, ILayoutElement // TypeDefIndex: 2985
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	private Sprite m_Sprite; // 0xB0
	private Sprite m_OverrideSprite; // 0xB8
	private Type m_Type; // 0xC0
	private bool m_PreserveAspect; // 0xC4
	private bool m_FillCenter; // 0xC5
	private FillMethod m_FillMethod; // 0xC8
	private float m_FillAmount; // 0xCC
	private bool m_FillClockwise; // 0xD0
	private int m_FillOrigin; // 0xD4
	private float m_AlphaHitTestMinimumThreshold; // 0xD8
	private static readonly Vector2[] s_VertScratch; // 0x8
	private static readonly Vector2[] s_UVScratch; // 0x10
	private static readonly Vector3[] s_Xy; // 0x18
	private static readonly Vector3[] s_Uv; // 0x20

	// Methods
	protected void .ctor(); // 0x1007669B0
	private static void .cctor(); // 0x100766AA8
	public Sprite get_sprite(); // 0x10075CD58
	public void set_sprite(Sprite value); // 0x10075CD70
	public Sprite get_overrideSprite(); // 0x100766BA0
	public void set_overrideSprite(Sprite value); // 0x100766C38
	private Sprite get_activeSprite(); // 0x100766BA4
	public Type get_type(); // 0x100766CE8
	public void set_type(Type value); // 0x100766CF0
	public bool get_preserveAspect(); // 0x100766DA0
	public void set_preserveAspect(bool value); // 0x100766DA8
	public bool get_fillCenter(); // 0x100766E58
	public void set_fillCenter(bool value); // 0x100766E60
	public FillMethod get_fillMethod(); // 0x100766F10
	public void set_fillMethod(FillMethod value); // 0x100766F18
	public float get_fillAmount(); // 0x100766FAC
	public void set_fillAmount(float value); // 0x100766FB4
	public bool get_fillClockwise(); // 0x100767094
	public void set_fillClockwise(bool value); // 0x10076709C
	public int get_fillOrigin(); // 0x10076714C
	public void set_fillOrigin(int value); // 0x100767154
	public float get_eventAlphaThreshold(); // 0x100767204
	public void set_eventAlphaThreshold(float value); // 0x10076721C
	public float get_alphaHitTestMinimumThreshold(); // 0x100767214
	public void set_alphaHitTestMinimumThreshold(float value); // 0x10076722C
	public static Material get_defaultETC1GraphicMaterial(); // 0x100767234
	public override Texture get_mainTexture(); // 0x10076732C
	public bool get_hasBorder(); // 0x1007674F8
	public float get_pixelsPerUnit(); // 0x1007675BC
	public override Material get_material(); // 0x1007676CC
	public override void set_material(Material value); // 0x100767850
	public virtual void OnBeforeSerialize(); // 0x100767854
	public virtual void OnAfterDeserialize(); // 0x100767858
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect); // 0x100767918
	public override void SetNativeSize(); // 0x100767D70
	protected override void OnPopulateMesh(VertexHelper toFill); // 0x100767F24
	protected override void UpdateMaterial(); // 0x10076AE9C
	private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect); // 0x100768078
	private void GenerateSlicedSprite(VertexHelper toFill); // 0x1007683CC
	private void GenerateTiledSprite(VertexHelper toFill); // 0x100768C60
	private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs); // 0x10076B2DC
	private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax); // 0x10076B0CC
	private Vector4 GetAdjustedBorders(Vector4 border, Rect rect); // 0x10076AFB4
	private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect); // 0x100769BA8
	private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner); // 0x10076B3F8
	private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner); // 0x10076B55C
	public virtual void CalculateLayoutInputHorizontal(); // 0x10076BC34
	public virtual void CalculateLayoutInputVertical(); // 0x10076BC38
	public virtual float get_minWidth(); // 0x10076BC3C
	public virtual float get_preferredWidth(); // 0x10076BC44
	public virtual float get_flexibleWidth(); // 0x10076BD48
	public virtual float get_minHeight(); // 0x10076BD50
	public virtual float get_preferredHeight(); // 0x10076BD58
	public virtual float get_flexibleHeight(); // 0x10076BE5C
	public virtual int get_layoutPriority(); // 0x10076BE64
	public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera); // 0x10076BE6C
	private Vector2 MapCoordinate(Vector2 local, Rect rect); // 0x10076C320
}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 2986
{
	// Fields
	public int value__; // 0x10
	public const Type Simple = 0; // 0x0
	public const Type Sliced = 1; // 0x0
	public const Type Tiled = 2; // 0x0
	public const Type Filled = 3; // 0x0

}

// Namespace: 
public sealed class FillMethod : Enum // TypeDefIndex: 2987
{
	// Fields
	public int value__; // 0x10
	public const FillMethod Horizontal = 0; // 0x0
	public const FillMethod Vertical = 1; // 0x0
	public const FillMethod Radial90 = 2; // 0x0
	public const FillMethod Radial180 = 3; // 0x0
	public const FillMethod Radial360 = 4; // 0x0

}

// Namespace: UnityEngine.UI
public interface IMaskable // TypeDefIndex: 2988
{
	// Methods
	public abstract void RecalculateMasking(); // 0
}

// Namespace: UnityEngine.UI
public class InputField : Selectable, IEventSystemHandler, IPointerClickHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IUpdateSelectedHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 2989
{
	// Fields
	private const float kHScrollSpeed = 0.05; // 0x0
	private const float kVScrollSpeed = 0.1; // 0x0
	private const string kEmailSpecialCharacters = "!#$%&'*+-/=?^_`{|}~"; // 0x0
	protected TouchScreenKeyboard m_Keyboard; // 0xD8
	private static readonly char[] kSeparators; // 0x0
	protected Text m_TextComponent; // 0xE0
	protected Graphic m_Placeholder; // 0xE8
	private ContentType m_ContentType; // 0xF0
	private InputType m_InputType; // 0xF4
	private char m_AsteriskChar; // 0xF8
	private TouchScreenKeyboardType m_KeyboardType; // 0xFC
	private LineType m_LineType; // 0x100
	private bool m_HideMobileInput; // 0x104
	private CharacterValidation m_CharacterValidation; // 0x108
	private int m_CharacterLimit; // 0x10C
	private SubmitEvent m_OnEndEdit; // 0x110
	private OnChangeEvent m_OnValueChanged; // 0x118
	private OnValidateInput m_OnValidateInput; // 0x120
	private Color m_CaretColor; // 0x128
	private bool m_CustomCaretColor; // 0x138
	private Color m_SelectionColor; // 0x13C
	protected string m_Text; // 0x150
	private float m_CaretBlinkRate; // 0x158
	private int m_CaretWidth; // 0x15C
	private bool m_ReadOnly; // 0x160
	protected int m_CaretPosition; // 0x164
	protected int m_CaretSelectPosition; // 0x168
	private RectTransform caretRectTrans; // 0x170
	protected UIVertex[] m_CursorVerts; // 0x178
	private TextGenerator m_InputTextCache; // 0x180
	private CanvasRenderer m_CachedInputRenderer; // 0x188
	private bool m_PreventFontCallback; // 0x190
	protected Mesh m_Mesh; // 0x198
	private bool m_AllowInput; // 0x1A0
	private bool m_ShouldActivateNextUpdate; // 0x1A1
	private bool m_UpdateDrag; // 0x1A2
	private bool m_DragPositionOutOfBounds; // 0x1A3
	protected bool m_CaretVisible; // 0x1A4
	private Coroutine m_BlinkCoroutine; // 0x1A8
	private float m_BlinkStartTime; // 0x1B0
	protected int m_DrawStart; // 0x1B4
	protected int m_DrawEnd; // 0x1B8
	private Coroutine m_DragCoroutine; // 0x1C0
	private string m_OriginalText; // 0x1C8
	private bool m_WasCanceled; // 0x1D0
	private bool m_HasDoneFocusTransition; // 0x1D1
	private Event m_ProcessingEvent; // 0x1D8
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x8

	// Methods
	protected void .ctor(); // 0x10076C7FC
	private static void .cctor(); // 0x10076CA30
	protected Mesh get_mesh(); // 0x10076CAC0
	protected TextGenerator get_cachedInputTextGenerator(); // 0x10076CB68
	public void set_shouldHideMobileInput(bool value); // 0x10076CBD4
	public bool get_shouldHideMobileInput(); // 0x10076CC38
	public string get_text(); // 0x10076CCB4
	public void set_text(string value); // 0x10076CCBC
	public bool get_isFocused(); // 0x10076D158
	public float get_caretBlinkRate(); // 0x10076D160
	public void set_caretBlinkRate(float value); // 0x10076D168
	public int get_caretWidth(); // 0x10076D250
	public void set_caretWidth(int value); // 0x10076D258
	public Text get_textComponent(); // 0x10076D33C
	public void set_textComponent(Text value); // 0x10076D344
	public Graphic get_placeholder(); // 0x10076D3A8
	public void set_placeholder(Graphic value); // 0x10076D3B0
	public Color get_caretColor(); // 0x10076D414
	public void set_caretColor(Color value); // 0x10076D488
	public bool get_customCaretColor(); // 0x10076D480
	public void set_customCaretColor(bool value); // 0x10076D4C8
	public Color get_selectionColor(); // 0x10076D4EC
	public void set_selectionColor(Color value); // 0x10076D500
	public SubmitEvent get_onEndEdit(); // 0x10076D540
	public void set_onEndEdit(SubmitEvent value); // 0x10076D548
	public OnChangeEvent get_onValueChange(); // 0x10076D5AC
	public void set_onValueChange(OnChangeEvent value); // 0x10076D5BC
	public OnChangeEvent get_onValueChanged(); // 0x10076D5B4
	public void set_onValueChanged(OnChangeEvent value); // 0x10076D5C0
	public OnValidateInput get_onValidateInput(); // 0x10076D038
	public void set_onValidateInput(OnValidateInput value); // 0x10076D624
	public int get_characterLimit(); // 0x10076D058
	public void set_characterLimit(int value); // 0x10076D688
	public ContentType get_contentType(); // 0x10076DB94
	public void set_contentType(ContentType value); // 0x10076DB9C
	public LineType get_lineType(); // 0x10076DD24
	public void set_lineType(LineType value); // 0x10076DD2C
	public InputType get_inputType(); // 0x10076DE9C
	public void set_inputType(InputType value); // 0x10076DEA4
	public TouchScreenKeyboardType get_keyboardType(); // 0x10076DF4C
	public void set_keyboardType(TouchScreenKeyboardType value); // 0x10076DF54
	public CharacterValidation get_characterValidation(); // 0x10076D040
	public void set_characterValidation(CharacterValidation value); // 0x10076DFE4
	public bool get_readOnly(); // 0x10076E074
	public void set_readOnly(bool value); // 0x10076E07C
	public bool get_multiLine(); // 0x10076E084
	public char get_asteriskChar(); // 0x10076E098
	public void set_asteriskChar(char value); // 0x10076E0A0
	public bool get_wasCanceled(); // 0x10076E120
	protected void ClampPos(int pos); // 0x10076E128
	protected int get_caretPositionInternal(); // 0x10076E18C
	protected void set_caretPositionInternal(int value); // 0x10076E210
	protected int get_caretSelectPositionInternal(); // 0x10076E220
	protected void set_caretSelectPositionInternal(int value); // 0x10076E2A4
	private bool get_hasSelection(); // 0x10076E2B4
	public int get_caretPosition(); // 0x10076E2E8
	public void set_caretPosition(int value); // 0x10076E36C
	public int get_selectionAnchorPosition(); // 0x10076E4E8
	public void set_selectionAnchorPosition(int value); // 0x10076E398
	public int get_selectionFocusPosition(); // 0x10076E56C
	public void set_selectionFocusPosition(int value); // 0x10076E440
	protected override void OnEnable(); // 0x10076E5F0
	protected override void OnDisable(); // 0x10076E7FC
	private IEnumerator CaretBlink(); // 0x10076EBB0
	private void SetCaretVisible(); // 0x10076EC24
	private void SetCaretActive(); // 0x10076D1F0
	protected void OnFocus(); // 0x10076EC70
	protected void SelectAll(); // 0x10076EC74
	public void MoveTextEnd(bool shift); // 0x10076ECC0
	public void MoveTextStart(bool shift); // 0x10076ED24
	private static string get_clipboard(); // 0x10076ED7C
	private static void set_clipboard(string value); // 0x10076EDE0
	private bool InPlaceEditing(); // 0x10076EE4C
	protected virtual void LateUpdate(); // 0x10076EE6C
	public Vector2 ScreenToLocal(Vector2 screen); // 0x100770004
	private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator); // 0x1007702A0
	protected int GetCharacterIndexFromPosition(Vector2 pos); // 0x100770520
	private bool MayDrag(PointerEventData eventData); // 0x100770A38
	public virtual void OnBeginDrag(PointerEventData eventData); // 0x100770B34
	public virtual void OnDrag(PointerEventData eventData); // 0x100770B60
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData); // 0x100770CF4
	public virtual void OnEndDrag(PointerEventData eventData); // 0x100770D78
	public override void OnPointerDown(PointerEventData eventData); // 0x100770DA0
	protected EditState KeyPressed(Event evt); // 0x100770F90
	private bool IsValidChar(char c); // 0x100771B00
	public void ProcessEvent(Event e); // 0x100771B6C
	public virtual void OnUpdateSelected(BaseEventData eventData); // 0x100771B70
	private string GetSelectedString(); // 0x1007715CC
	private int FindtNextWordBegin(); // 0x100771DBC
	private void MoveRight(bool shift, bool ctrl); // 0x1007719D4
	private int FindtPrevWordBegin(); // 0x100771EB4
	private void MoveLeft(bool shift, bool ctrl); // 0x1007718B8
	private int DetermineCharacterLine(int charPos, TextGenerator generator); // 0x100771F70
	private int LineUpCharacterPosition(int originalPos, bool goToFirstChar); // 0x1007720D0
	private int LineDownCharacterPosition(int originalPos, bool goToLastChar); // 0x1007724C8
	private void MoveDown(bool shift); // 0x100771AF8
	private void MoveDown(bool shift, bool goToLastChar); // 0x100772818
	private void MoveUp(bool shift); // 0x100771AF0
	private void MoveUp(bool shift, bool goToFirstChar); // 0x100772978
	private void Delete(); // 0x10077169C
	private void ForwardSpace(); // 0x100771518
	private void Backspace(); // 0x10077144C
	private void Insert(char c); // 0x100772AB8
	private void SendOnValueChangedAndUpdateLabel(); // 0x10076D134
	private void SendOnValueChanged(); // 0x100772B9C
	protected void SendOnSubmit(); // 0x100772C00
	protected virtual void Append(string input); // 0x100772C64
	protected virtual void Append(char input); // 0x100772D50
	protected void UpdateLabel(); // 0x10076D720
	private bool IsSelectionVisible(); // 0x100773890
	private static int GetLineStartPosition(TextGenerator gen, int line); // 0x100773900
	private static int GetLineEndPosition(TextGenerator gen, int line); // 0x100770834
	private void SetDrawRangeToContainCaretPosition(int caretPos); // 0x100772E08
	public void ForceLabelUpdate(); // 0x100773AE0
	private void MarkGeometryAsDirty(); // 0x10076D2D8
	public virtual void Rebuild(CanvasUpdate update); // 0x100773AE4
	public virtual void LayoutComplete(); // 0x100773E18
	public virtual void GraphicUpdateComplete(); // 0x100773E1C
	private void UpdateGeometry(); // 0x100773AF4
	private void AssignPositioningIfNeeded(); // 0x10076F550
	private void OnFillVBO(Mesh vbo); // 0x100773E20
	private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset); // 0x10077421C
	private void CreateCursorVerts(); // 0x10077522C
	private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset); // 0x1007748D0
	protected char Validate(string text, int pos, char ch); // 0x10076FA40
	public void ActivateInputField(); // 0x100775350
	private void ActivateInputFieldInternal(); // 0x10076F2C4
	public override void OnSelect(BaseEventData eventData); // 0x1007754B8
	public virtual void OnPointerClick(PointerEventData eventData); // 0x1007754E0
	public void DeactivateInputField(); // 0x10076E9F0
	public override void OnDeselect(BaseEventData eventData); // 0x100775500
	public virtual void OnSubmit(BaseEventData eventData); // 0x100775530
	private void EnforceContentType(); // 0x10076DC1C
	private void SetToCustomIfContentTypeIsNot(ContentType[] allowedContentTypes); // 0x10076DDF8
	private void SetToCustom(); // 0x10076DF34
	protected override void DoStateTransition(SelectionState state, bool instant); // 0x1007755B4
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x1007755E0
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x1007755E4
}

// Namespace: 
public sealed class ContentType : Enum // TypeDefIndex: 2990
{
	// Fields
	public int value__; // 0x10
	public const ContentType Standard = 0; // 0x0
	public const ContentType Autocorrected = 1; // 0x0
	public const ContentType IntegerNumber = 2; // 0x0
	public const ContentType DecimalNumber = 3; // 0x0
	public const ContentType Alphanumeric = 4; // 0x0
	public const ContentType Name = 5; // 0x0
	public const ContentType EmailAddress = 6; // 0x0
	public const ContentType Password = 7; // 0x0
	public const ContentType Pin = 8; // 0x0
	public const ContentType Custom = 9; // 0x0

}

// Namespace: 
public sealed class InputType : Enum // TypeDefIndex: 2991
{
	// Fields
	public int value__; // 0x10
	public const InputType Standard = 0; // 0x0
	public const InputType AutoCorrect = 1; // 0x0
	public const InputType Password = 2; // 0x0

}

// Namespace: 
public sealed class CharacterValidation : Enum // TypeDefIndex: 2992
{
	// Fields
	public int value__; // 0x10
	public const CharacterValidation None = 0; // 0x0
	public const CharacterValidation Integer = 1; // 0x0
	public const CharacterValidation Decimal = 2; // 0x0
	public const CharacterValidation Alphanumeric = 3; // 0x0
	public const CharacterValidation Name = 4; // 0x0
	public const CharacterValidation EmailAddress = 5; // 0x0

}

// Namespace: 
public sealed class LineType : Enum // TypeDefIndex: 2993
{
	// Fields
	public int value__; // 0x10
	public const LineType SingleLine = 0; // 0x0
	public const LineType MultiLineSubmit = 1; // 0x0
	public const LineType MultiLineNewline = 2; // 0x0

}

// Namespace: 
public class SubmitEvent : UnityEvent`1<string> // TypeDefIndex: 2994
{
	// Methods
	public void .ctor(); // 0x10076C990
}

// Namespace: 
public class OnChangeEvent : UnityEvent`1<string> // TypeDefIndex: 2995
{
	// Methods
	public void .ctor(); // 0x10076C9E0
}

// Namespace: 
protected sealed class EditState : Enum // TypeDefIndex: 2996
{
	// Fields
	public int value__; // 0x10
	public const EditState Continue = 0; // 0x0
	public const EditState Finish = 1; // 0x0

}

// Namespace: 
public sealed class OnValidateInput : MulticastDelegate // TypeDefIndex: 2997
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10076D048
	public virtual char Invoke(string text, int charIndex, char addedChar); // 0x10076D060
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object); // 0x100775AD8
	public virtual char EndInvoke(IAsyncResult result); // 0x100775BBC
}

// Namespace: 
private sealed class <CaretBlink>c__Iterator3 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 2998
{
	// Fields
	internal float <blinkPeriod>__0; // 0x10
	internal bool <blinkState>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal InputField <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x10076EC1C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1007755EC
	private object System.Collections.IEnumerator.get_Current(); // 0x1007755F4
	public bool MoveNext(); // 0x1007755FC
	public void Dispose(); // 0x100775744
	public void Reset(); // 0x100775750
}

// Namespace: 
private sealed class <MouseDragOutsideRect>c__Iterator4 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 2999
{
	// Fields
	internal PointerEventData eventData; // 0x10
	internal Vector2 <localMousePos>__0; // 0x18
	internal Rect <rect>__1; // 0x20
	internal float <delay>__2; // 0x30
	internal int $PC; // 0x34
	internal object $current; // 0x38
	internal PointerEventData <$>eventData; // 0x40
	internal InputField <>f__this; // 0x48

	// Methods
	public void .ctor(); // 0x100770D70
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1007757A4
	private object System.Collections.IEnumerator.get_Current(); // 0x1007757AC
	public bool MoveNext(); // 0x1007757B4
	public void Dispose(); // 0x100775A20
	public void Reset(); // 0x100775A2C
}

// Namespace: UnityEngine.UI
public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 3000
{
	// Fields
	private RectTransform m_RectTransform; // 0x18
	private bool m_ShowMaskGraphic; // 0x20
	private Graphic m_Graphic; // 0x28
	private Material m_MaskMaterial; // 0x30
	private Material m_UnmaskMaterial; // 0x38

	// Methods
	protected void .ctor(); // 0x100778CB4
	public RectTransform get_rectTransform(); // 0x100778CC4
	public bool get_showMaskGraphic(); // 0x100778D24
	public void set_showMaskGraphic(bool value); // 0x100778D2C
	public Graphic get_graphic(); // 0x100778E30
	public virtual bool MaskEnabled(); // 0x100778E90
	public virtual void OnSiblingGraphicEnabledDisabled(); // 0x100778F4C
	protected override void OnEnable(); // 0x100778F50
	protected override void OnDisable(); // 0x1007792D0
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x100779424
	public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x1007794EC
}

// Namespace: UnityEngine.UI
public abstract class MaskableGraphic : Graphic, IMaskable, IClippable, IMaterialModifier // TypeDefIndex: 3001
{
	// Fields
	protected bool m_ShouldRecalculateStencil; // 0x79
	protected Material m_MaskMaterial; // 0x80
	private RectMask2D m_ParentMask; // 0x88
	private bool m_Maskable; // 0x90
	protected bool m_IncludeForMasking; // 0x91
	private CullStateChangedEvent m_OnCullStateChanged; // 0x98
	protected bool m_ShouldRecalculate; // 0xA0
	protected int m_StencilValue; // 0xA4
	private readonly Vector3[] m_Corners; // 0xA8

	// Methods
	protected void .ctor(); // 0x1007669EC
	public CullStateChangedEvent get_onCullStateChanged(); // 0x100779CF0
	public void set_onCullStateChanged(CullStateChangedEvent value); // 0x100779CF8
	public bool get_maskable(); // 0x100779D00
	public void set_maskable(bool value); // 0x100779D08
	public virtual Material GetModifiedMaterial(Material baseMaterial); // 0x100779D88
	public virtual void Cull(Rect clipRect, bool validRect); // 0x100779F08
	private void UpdateCull(bool cull); // 0x10077A1E8
	public virtual void SetClipRect(Rect clipRect, bool validRect); // 0x10077A2D4
	protected override void OnEnable(); // 0x10077A34C
	protected override void OnDisable(); // 0x10077A5F8
	protected override void OnTransformParentChanged(); // 0x10077A718
	public virtual void ParentMaskStateChanged(); // 0x10077A798
	protected override void OnCanvasHierarchyChanged(); // 0x10077A79C
	private Rect get_rootCanvasRect(); // 0x100779F80
	private void UpdateClipParent(); // 0x10077A434
	public virtual void RecalculateClipping(); // 0x10077ACC0
	public virtual void RecalculateMasking(); // 0x10077ACC4
	virtual GameObject UnityEngine.UI.IClippable.get_gameObject(); // 0x10077AD18
	virtual RectTransform UnityEngine.UI.IClippable.get_rectTransform(); // 0x10077AD20
}

// Namespace: 
public class CullStateChangedEvent : UnityEvent`1<bool> // TypeDefIndex: 3002
{
	// Methods
	public void .ctor(); // 0x100779CA0
}

// Namespace: UnityEngine.UI
public class MaskUtilities // TypeDefIndex: 3003
{
	// Methods
	public static void Notify2DMaskStateChanged(Component mask); // 0x10077AD24
	public static void NotifyStencilStateChanged(Component mask); // 0x100779038
	public static Transform FindRootSortOverrideCanvas(Transform start); // 0x100779808
	public static int GetStencilDepth(Transform transform, Transform stopAfter); // 0x1007799B4
	public static bool IsDescendantOrSelf(Transform father, Transform child); // 0x10077AFC0
	public static RectMask2D GetRectMaskForClippable(IClippable clippable); // 0x10077A81C
	public static void GetRectMasksForClip(RectMask2D clipper, List`1<RectMask2D> masks); // 0x10077B14C
}

// Namespace: UnityEngine.UI
internal static class Misc // TypeDefIndex: 3004
{
	// Methods
	public static void DestroyImmediate(Object obj); // 0x10077B45C
}

// Namespace: UnityEngine.UI
public struct Navigation : IEquatable`1<Navigation> // TypeDefIndex: 3005
{
	// Fields
	private Mode m_Mode; // 0x10
	private Selectable m_SelectOnUp; // 0x18
	private Selectable m_SelectOnDown; // 0x20
	private Selectable m_SelectOnLeft; // 0x28
	private Selectable m_SelectOnRight; // 0x30

	// Methods
	public Mode get_mode(); // 0x10077B548
	public void set_mode(Mode value); // 0x10077B550
	public Selectable get_selectOnUp(); // 0x10077B560
	public void set_selectOnUp(Selectable value); // 0x10077B568
	public Selectable get_selectOnDown(); // 0x10077B578
	public void set_selectOnDown(Selectable value); // 0x10077B580
	public Selectable get_selectOnLeft(); // 0x10077B590
	public void set_selectOnLeft(Selectable value); // 0x10077B598
	public Selectable get_selectOnRight(); // 0x10077B5A8
	public void set_selectOnRight(Selectable value); // 0x10077B5B0
	public static Navigation get_defaultNavigation(); // 0x10077B5B8
	public bool Equals(Navigation other); // 0x10077B7B0
}

// Namespace: 
public sealed class Mode : Enum // TypeDefIndex: 3006
{
	// Fields
	public int value__; // 0x10
	public const Mode None = 0; // 0x0
	public const Mode Horizontal = 1; // 0x0
	public const Mode Vertical = 2; // 0x0
	public const Mode Automatic = 3; // 0x0
	public const Mode Explicit = 4; // 0x0

}

// Namespace: UnityEngine.UI
public class RawImage : MaskableGraphic // TypeDefIndex: 3007
{
	// Fields
	private Texture m_Texture; // 0xB0
	private Rect m_UVRect; // 0xB8

	// Methods
	protected void .ctor(); // 0x10077BCD8
	public override Texture get_mainTexture(); // 0x10077BD30
	public Texture get_texture(); // 0x10077BEE4
	public void set_texture(Texture value); // 0x10077BEEC
	public Rect get_uvRect(); // 0x10077BFE0
	public void set_uvRect(Rect value); // 0x10077BFEC
	public override void SetNativeSize(); // 0x10077C0A8
	protected override void OnPopulateMesh(VertexHelper vh); // 0x10077C2B0
}

// Namespace: UnityEngine.UI
public class RectMask2D : UIBehaviour, ICanvasRaycastFilter, IClipper // TypeDefIndex: 3008
{
	// Fields
	private readonly RectangularVertexClipper m_VertexClipper; // 0x18
	private RectTransform m_RectTransform; // 0x20
	private HashSet`1<IClippable> m_ClipTargets; // 0x28
	private bool m_ShouldRecalculateClipRects; // 0x30
	private List`1<RectMask2D> m_Clippers; // 0x38
	private Rect m_LastClipRectCanvasSpace; // 0x40
	private bool m_LastValidClipRect; // 0x50
	private bool m_ForceClip; // 0x51

	// Methods
	protected void .ctor(); // 0x10077CA64
	public Rect get_canvasRect(); // 0x10077CB18
	public RectTransform get_rectTransform(); // 0x10077CC60
	protected override void OnEnable(); // 0x10077CCC0
	protected override void OnDisable(); // 0x10077CD08
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera); // 0x10077CDA4
	public virtual void PerformClipping(); // 0x10077CE6C
	public void AddClippable(IClippable clippable); // 0x10077D3EC
	public void RemoveClippable(IClippable clippable); // 0x10077D48C
	protected override void OnTransformParentChanged(); // 0x10077D60C
	protected override void OnCanvasHierarchyChanged(); // 0x10077D638
}

// Namespace: UnityEngine.UI
public class Scrollbar : Selectable, IEventSystemHandler, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, ICanvasElement // TypeDefIndex: 3009
{
	// Fields
	private RectTransform m_HandleRect; // 0xD8
	private Direction m_Direction; // 0xE0
	private float m_Value; // 0xE4
	private float m_Size; // 0xE8
	private int m_NumberOfSteps; // 0xEC
	private ScrollEvent m_OnValueChanged; // 0xF0
	private RectTransform m_ContainerRect; // 0xF8
	private Vector2 m_Offset; // 0x100
	private DrivenRectTransformTracker m_Tracker; // 0x108
	private Coroutine m_PointerDownRepeat; // 0x110
	private bool isPointerDownAndNotDragging; // 0x118

	// Methods
	protected void .ctor(); // 0x10077D664
	public RectTransform get_handleRect(); // 0x10077D850
	public void set_handleRect(RectTransform value); // 0x10077D858
	public Direction get_direction(); // 0x10077DB70
	public void set_direction(Direction value); // 0x10077DB78
	public float get_value(); // 0x10077DBF8
	public void set_value(float value); // 0x10077DD14
	public float get_size(); // 0x10077DD24
	public void set_size(float value); // 0x10077DD2C
	public int get_numberOfSteps(); // 0x10077DDDC
	public void set_numberOfSteps(int value); // 0x10077DDE4
	public ScrollEvent get_onValueChanged(); // 0x10077DE74
	public void set_onValueChanged(ScrollEvent value); // 0x10077DE7C
	private float get_stepSize(); // 0x10077DE84
	public virtual void Rebuild(CanvasUpdate executing); // 0x10077DEB0
	public virtual void LayoutComplete(); // 0x10077DEB4
	public virtual void GraphicUpdateComplete(); // 0x10077DEB8
	protected override void OnEnable(); // 0x10077DEBC
	protected override void OnDisable(); // 0x10077E080
	private void UpdateCachedReferences(); // 0x10077D8E0
	private void Set(float input); // 0x10077DD1C
	private void Set(float input, bool sendCallback); // 0x10077DF9C
	protected override void OnRectTransformDimensionsChange(); // 0x10077E168
	private Axis get_axis(); // 0x10077E1D0
	private bool get_reverseValue(); // 0x10077E1EC
	private void UpdateVisuals(); // 0x10077D9D8
	private void UpdateDrag(PointerEventData eventData); // 0x10077E200
	private bool MayDrag(PointerEventData eventData); // 0x10077E4FC
	public virtual void OnBeginDrag(PointerEventData eventData); // 0x10077E590
	public virtual void OnDrag(PointerEventData eventData); // 0x10077E780
	public override void OnPointerDown(PointerEventData eventData); // 0x10077E830
	protected IEnumerator ClickRepeat(PointerEventData eventData); // 0x10077EA1C
	public override void OnPointerUp(PointerEventData eventData); // 0x10077EAA0
	public override void OnMove(AxisEventData eventData); // 0x10077EB14
	public override Selectable FindSelectableOnLeft(); // 0x10077EED0
	public override Selectable FindSelectableOnRight(); // 0x10077F044
	public override Selectable FindSelectableOnUp(); // 0x10077F19C
	public override Selectable FindSelectableOnDown(); // 0x10077F2F4
	public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x10077F44C
	public void SetDirection(Direction direction, bool includeRectLayouts); // 0x10077F46C
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x10077F5FC
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x10077F604
}

// Namespace: 
public sealed class Direction : Enum // TypeDefIndex: 3010
{
	// Fields
	public int value__; // 0x10
	public const Direction LeftToRight = 0; // 0x0
	public const Direction RightToLeft = 1; // 0x0
	public const Direction BottomToTop = 2; // 0x0
	public const Direction TopToBottom = 3; // 0x0

}

// Namespace: 
public class ScrollEvent : UnityEvent`1<float> // TypeDefIndex: 3011
{
	// Methods
	public void .ctor(); // 0x10077D704
}

// Namespace: 
private sealed class Axis : Enum // TypeDefIndex: 3012
{
	// Fields
	public int value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

}

// Namespace: 
private sealed class <ClickRepeat>c__Iterator5 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 3013
{
	// Fields
	internal PointerEventData eventData; // 0x10
	internal Vector2 <localMousePos>__0; // 0x18
	internal float <axisCoordinate>__1; // 0x20
	internal int $PC; // 0x24
	internal object $current; // 0x28
	internal PointerEventData <$>eventData; // 0x30
	internal Scrollbar <>f__this; // 0x38

	// Methods
	public void .ctor(); // 0x10077EA98
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10077F60C
	private object System.Collections.IEnumerator.get_Current(); // 0x10077F614
	public bool MoveNext(); // 0x10077F61C
	public void Dispose(); // 0x10077F830
	public void Reset(); // 0x10077F83C
}

// Namespace: UnityEngine.UI
public class ScrollRect : UIBehaviour, IEventSystemHandler, IBeginDragHandler, IInitializePotentialDragHandler, IDragHandler, IEndDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutController, ILayoutGroup // TypeDefIndex: 3014
{
	// Fields
	private RectTransform m_Content; // 0x18
	private bool m_Horizontal; // 0x20
	private bool m_Vertical; // 0x21
	private MovementType m_MovementType; // 0x24
	private float m_Elasticity; // 0x28
	private bool m_Inertia; // 0x2C
	private float m_DecelerationRate; // 0x30
	private float m_ScrollSensitivity; // 0x34
	private RectTransform m_Viewport; // 0x38
	private Scrollbar m_HorizontalScrollbar; // 0x40
	private Scrollbar m_VerticalScrollbar; // 0x48
	private ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x50
	private ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x54
	private float m_HorizontalScrollbarSpacing; // 0x58
	private float m_VerticalScrollbarSpacing; // 0x5C
	private ScrollRectEvent m_OnValueChanged; // 0x60
	private Vector2 m_PointerStartLocalCursor; // 0x68
	private Vector2 m_ContentStartPosition; // 0x70
	private RectTransform m_ViewRect; // 0x78
	private Bounds m_ContentBounds; // 0x80
	private Bounds m_ViewBounds; // 0x98
	private Vector2 m_Velocity; // 0xB0
	private bool m_Dragging; // 0xB8
	private Vector2 m_PrevPosition; // 0xBC
	private Bounds m_PrevContentBounds; // 0xC4
	private Bounds m_PrevViewBounds; // 0xDC
	private bool m_HasRebuiltLayout; // 0xF4
	private bool m_HSliderExpand; // 0xF5
	private bool m_VSliderExpand; // 0xF6
	private float m_HSliderHeight; // 0xF8
	private float m_VSliderWidth; // 0xFC
	private RectTransform m_Rect; // 0x100
	private RectTransform m_HorizontalScrollbarRect; // 0x108
	private RectTransform m_VerticalScrollbarRect; // 0x110
	private DrivenRectTransformTracker m_Tracker; // 0x118
	private readonly Vector3[] m_Corners; // 0x120

	// Methods
	protected void .ctor(); // 0x10077F890
	public RectTransform get_content(); // 0x10077F9CC
	public void set_content(RectTransform value); // 0x10077F9D4
	public bool get_horizontal(); // 0x10077F9DC
	public void set_horizontal(bool value); // 0x10077F9E4
	public bool get_vertical(); // 0x10077F9EC
	public void set_vertical(bool value); // 0x10077F9F4
	public MovementType get_movementType(); // 0x10077F9FC
	public void set_movementType(MovementType value); // 0x10077FA04
	public float get_elasticity(); // 0x10077FA0C
	public void set_elasticity(float value); // 0x10077FA14
	public bool get_inertia(); // 0x10077FA1C
	public void set_inertia(bool value); // 0x10077FA24
	public float get_decelerationRate(); // 0x10077FA2C
	public void set_decelerationRate(float value); // 0x10077FA34
	public float get_scrollSensitivity(); // 0x10077FA3C
	public void set_scrollSensitivity(float value); // 0x10077FA44
	public RectTransform get_viewport(); // 0x10077FA4C
	public void set_viewport(RectTransform value); // 0x10077FA54
	public Scrollbar get_horizontalScrollbar(); // 0x10077FB44
	public void set_horizontalScrollbar(Scrollbar value); // 0x10077FB4C
	public Scrollbar get_verticalScrollbar(); // 0x10077FCD0
	public void set_verticalScrollbar(Scrollbar value); // 0x10077FCD8
	public ScrollbarVisibility get_horizontalScrollbarVisibility(); // 0x10077FE5C
	public void set_horizontalScrollbarVisibility(ScrollbarVisibility value); // 0x10077FE64
	public ScrollbarVisibility get_verticalScrollbarVisibility(); // 0x10077FE6C
	public void set_verticalScrollbarVisibility(ScrollbarVisibility value); // 0x10077FE74
	public float get_horizontalScrollbarSpacing(); // 0x10077FE7C
	public void set_horizontalScrollbarSpacing(float value); // 0x10077FE84
	public float get_verticalScrollbarSpacing(); // 0x10077FF44
	public void set_verticalScrollbarSpacing(float value); // 0x10077FF4C
	public ScrollRectEvent get_onValueChanged(); // 0x10077FF54
	public void set_onValueChanged(ScrollRectEvent value); // 0x10077FF5C
	protected RectTransform get_viewRect(); // 0x10077FF64
	public Vector2 get_velocity(); // 0x1007800BC
	public void set_velocity(Vector2 value); // 0x1007800C4
	private RectTransform get_rectTransform(); // 0x1007800D0
	public virtual void Rebuild(CanvasUpdate executing); // 0x10078016C
	public virtual void LayoutComplete(); // 0x100780B5C
	public virtual void GraphicUpdateComplete(); // 0x100780B60
	private void UpdateCachedData(); // 0x1007801D0
	protected override void OnEnable(); // 0x100780B64
	protected override void OnDisable(); // 0x100780D18
	public override bool IsActive(); // 0x100780F28
	private void EnsureLayoutHasRebuilt(); // 0x100780FB8
	public virtual void StopMovement(); // 0x100781044
	public virtual void OnScroll(PointerEventData data); // 0x100781074
	public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x100781434
	public virtual void OnBeginDrag(PointerEventData eventData); // 0x100781478
	public virtual void OnEndDrag(PointerEventData eventData); // 0x1007815B4
	public virtual void OnDrag(PointerEventData eventData); // 0x1007815EC
	protected virtual void SetContentAnchoredPosition(Vector2 position); // 0x1007818D4
	protected virtual void LateUpdate(); // 0x100781998
	private void UpdatePrevData(); // 0x100780A94
	private void UpdateScrollbars(Vector2 offset); // 0x10078086C
	public Vector2 get_normalizedPosition(); // 0x1007820E8
	public void set_normalizedPosition(Vector2 value); // 0x1007822B8
	public float get_horizontalNormalizedPosition(); // 0x100782140
	public void set_horizontalNormalizedPosition(float value); // 0x100782520
	public float get_verticalNormalizedPosition(); // 0x1007821FC
	public void set_verticalNormalizedPosition(float value); // 0x100782528
	private void SetHorizontalNormalizedPosition(float value); // 0x100782530
	private void SetVerticalNormalizedPosition(float value); // 0x100782538
	private void SetNormalizedPosition(float value, int axis); // 0x1007822F4
	private static float RubberDelta(float overStretching, float viewSize); // 0x100781824
	protected override void OnRectTransformDimensionsChange(); // 0x100782540
	private bool get_hScrollingNeeded(); // 0x100782544
	private bool get_vScrollingNeeded(); // 0x1007825B0
	public virtual void CalculateLayoutInputHorizontal(); // 0x10078261C
	public virtual void CalculateLayoutInputVertical(); // 0x100782620
	public virtual float get_minWidth(); // 0x100782624
	public virtual float get_preferredWidth(); // 0x10078262C
	public virtual float get_flexibleWidth(); // 0x100782634
	public virtual float get_minHeight(); // 0x10078263C
	public virtual float get_preferredHeight(); // 0x100782644
	public virtual float get_flexibleHeight(); // 0x10078264C
	public virtual int get_layoutPriority(); // 0x100782654
	public virtual void SetLayoutHorizontal(); // 0x10078265C
	public virtual void SetLayoutVertical(); // 0x100782E90
	private void UpdateScrollbarVisibility(); // 0x100781F50
	private void UpdateScrollbarLayout(); // 0x100782FA0
	private void UpdateBounds(); // 0x1007805E4
	private Bounds GetBounds(); // 0x100782BFC
	private Vector2 CalculateOffset(Vector2 delta); // 0x1007812C8
	protected void SetDirty(); // 0x10077FE8C
	protected void SetDirtyCaching(); // 0x10077FA5C
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x1007832D0
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x1007832D8
}

// Namespace: 
public sealed class MovementType : Enum // TypeDefIndex: 3015
{
	// Fields
	public int value__; // 0x10
	public const MovementType Unrestricted = 0; // 0x0
	public const MovementType Elastic = 1; // 0x0
	public const MovementType Clamped = 2; // 0x0

}

// Namespace: 
public sealed class ScrollbarVisibility : Enum // TypeDefIndex: 3016
{
	// Fields
	public int value__; // 0x10
	public const ScrollbarVisibility Permanent = 0; // 0x0
	public const ScrollbarVisibility AutoHide = 1; // 0x0
	public const ScrollbarVisibility AutoHideAndExpandViewport = 2; // 0x0

}

// Namespace: 
public class ScrollRectEvent : UnityEvent`1<Vector2> // TypeDefIndex: 3017
{
	// Methods
	public void .ctor(); // 0x10077F97C
}

// Namespace: UnityEngine.UI
public class Selectable : UIBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, ISelectHandler, IDeselectHandler, IMoveHandler // TypeDefIndex: 3018
{
	// Fields
	private static List`1<Selectable> s_List; // 0x0
	private Navigation m_Navigation; // 0x18
	private Transition m_Transition; // 0x40
	private ColorBlock m_Colors; // 0x44
	private SpriteState m_SpriteState; // 0x90
	private AnimationTriggers m_AnimationTriggers; // 0xA8
	private bool m_Interactable; // 0xB0
	private Graphic m_TargetGraphic; // 0xB8
	private bool m_GroupsAllowInteraction; // 0xC0
	private SelectionState m_CurrentSelectionState; // 0xC4
	private readonly List`1<CanvasGroup> m_CanvasGroupCache; // 0xC8
	private bool <isPointerInside>k__BackingField; // 0xD0
	private bool <isPointerDown>k__BackingField; // 0xD1
	private bool <hasSelection>k__BackingField; // 0xD2

	// Methods
	protected void .ctor(); // 0x10077D754
	private static void .cctor(); // 0x1007832E0
	public static List`1<Selectable> get_allSelectables(); // 0x100783354
	public Navigation get_navigation(); // 0x10077EF3C
	public void set_navigation(Navigation value); // 0x1007833BC
	public Transition get_transition(); // 0x10078345C
	public void set_transition(Transition value); // 0x100783464
	public ColorBlock get_colors(); // 0x1007834E8
	public void set_colors(ColorBlock value); // 0x1007834F8
	public SpriteState get_spriteState(); // 0x10078358C
	public void set_spriteState(SpriteState value); // 0x1007835A0
	public AnimationTriggers get_animationTriggers(); // 0x100783630
	public void set_animationTriggers(AnimationTriggers value); // 0x100783638
	public Graphic get_targetGraphic(); // 0x1007836BC
	public void set_targetGraphic(Graphic value); // 0x1007836C4
	public bool get_interactable(); // 0x100783748
	public void set_interactable(bool value); // 0x100783750
	private bool get_isPointerInside(); // 0x100783900
	private void set_isPointerInside(bool value); // 0x100783908
	private bool get_isPointerDown(); // 0x100783910
	private void set_isPointerDown(bool value); // 0x100783918
	private bool get_hasSelection(); // 0x100783920
	private void set_hasSelection(bool value); // 0x100783928
	public Image get_image(); // 0x100783930
	public void set_image(Image value); // 0x1007839B4
	public Animator get_animator(); // 0x1007839BC
	protected override void Awake(); // 0x100783A0C
	protected override void OnCanvasGroupChanged(); // 0x100783AA0
	public virtual bool IsInteractable(); // 0x100783C58
	protected override void OnDidApplyAnimationProperties(); // 0x100783C78
	protected override void OnEnable(); // 0x10077DEF8
	private void OnSetProperty(); // 0x100783454
	protected override void OnDisable(); // 0x10077E0AC
	protected SelectionState get_currentSelectionState(); // 0x100783D44
	protected virtual void InstantClearState(); // 0x100783D4C
	protected virtual void DoStateTransition(SelectionState state, bool instant); // 0x100784200
	public Selectable FindSelectable(Vector3 dir); // 0x1007844A8
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir); // 0x1007848E8
	private void Navigate(AxisEventData eventData, Selectable sel); // 0x100784AD4
	public virtual Selectable FindSelectableOnLeft(); // 0x10077EF58
	public virtual Selectable FindSelectableOnRight(); // 0x10077F0B0
	public virtual Selectable FindSelectableOnUp(); // 0x10077F208
	public virtual Selectable FindSelectableOnDown(); // 0x10077F360
	public virtual void OnMove(AxisEventData eventData); // 0x10077EDDC
	private void StartColorTween(Color targetColor, bool instant); // 0x100783DF8
	private void DoSpriteSwap(Sprite newSprite); // 0x100783F3C
	private void TriggerAnimation(string triggername); // 0x100783FF4
	protected bool IsHighlighted(BaseEventData eventData); // 0x100784BB4
	protected bool IsPressed(BaseEventData eventData); // 0x100784E54
	protected bool IsPressed(); // 0x100784DEC
	protected void UpdateSelectionState(BaseEventData eventData); // 0x100784E58
	private void EvaluateAndTransitionToSelectionState(BaseEventData eventData); // 0x100784EAC
	private void InternalEvaluateAndTransitionToSelectionState(bool instant); // 0x100783C80
	public virtual void OnPointerDown(PointerEventData eventData); // 0x10077E88C
	public virtual void OnPointerUp(PointerEventData eventData); // 0x10077EAC4
	public virtual void OnPointerEnter(PointerEventData eventData); // 0x100784F20
	public virtual void OnPointerExit(PointerEventData eventData); // 0x100784F2C
	public virtual void OnSelect(BaseEventData eventData); // 0x100784F34
	public virtual void OnDeselect(BaseEventData eventData); // 0x100784F40
	public virtual void Select(); // 0x100784F48
}

// Namespace: 
public sealed class Transition : Enum // TypeDefIndex: 3019
{
	// Fields
	public int value__; // 0x10
	public const Transition None = 0; // 0x0
	public const Transition ColorTint = 1; // 0x0
	public const Transition SpriteSwap = 2; // 0x0
	public const Transition Animation = 3; // 0x0

}

// Namespace: 
protected sealed class SelectionState : Enum // TypeDefIndex: 3020
{
	// Fields
	public int value__; // 0x10
	public const SelectionState Normal = 0; // 0x0
	public const SelectionState Highlighted = 1; // 0x0
	public const SelectionState Pressed = 2; // 0x0
	public const SelectionState Disabled = 3; // 0x0

}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 3021
{
	// Methods
	public static bool SetColor(Color currentValue, Color newValue); // 0x100785084
	public static bool SetEquatableStruct(T currentValue, T newValue); // 0
	public static bool SetStruct(T currentValue, T newValue); // 0
	public static bool SetClass(T currentValue, T newValue); // 0
}

// Namespace: UnityEngine.UI
public class Slider : Selectable, IEventSystemHandler, IInitializePotentialDragHandler, IDragHandler, ICanvasElement // TypeDefIndex: 3022
{
	// Fields
	private RectTransform m_FillRect; // 0xD8
	private RectTransform m_HandleRect; // 0xE0
	private Direction m_Direction; // 0xE8
	private float m_MinValue; // 0xEC
	private float m_MaxValue; // 0xF0
	private bool m_WholeNumbers; // 0xF4
	protected float m_Value; // 0xF8
	private SliderEvent m_OnValueChanged; // 0x100
	private Image m_FillImage; // 0x108
	private Transform m_FillTransform; // 0x110
	private RectTransform m_FillContainerRect; // 0x118
	private Transform m_HandleTransform; // 0x120
	private RectTransform m_HandleContainerRect; // 0x128
	private Vector2 m_Offset; // 0x130
	private DrivenRectTransformTracker m_Tracker; // 0x138

	// Methods
	protected void .ctor(); // 0x1007859B4
	public RectTransform get_fillRect(); // 0x100785AA0
	public void set_fillRect(RectTransform value); // 0x100785AA8
	public RectTransform get_handleRect(); // 0x100785FC0
	public void set_handleRect(RectTransform value); // 0x100785FC8
	public Direction get_direction(); // 0x100786050
	public void set_direction(Direction value); // 0x100786058
	public float get_minValue(); // 0x1007860D8
	public void set_minValue(float value); // 0x1007860E0
	public float get_maxValue(); // 0x1007861D0
	public void set_maxValue(float value); // 0x1007861D8
	public bool get_wholeNumbers(); // 0x100786264
	public void set_wholeNumbers(bool value); // 0x10078626C
	public virtual float get_value(); // 0x1007862F8
	public virtual void set_value(float value); // 0x1007863F4
	public float get_normalizedValue(); // 0x1007863F8
	public void set_normalizedValue(float value); // 0x100786504
	public SliderEvent get_onValueChanged(); // 0x1007865D0
	public void set_onValueChanged(SliderEvent value); // 0x1007865D8
	private float get_stepSize(); // 0x1007865E0
	public virtual void Rebuild(CanvasUpdate executing); // 0x100786608
	public virtual void LayoutComplete(); // 0x10078660C
	public virtual void GraphicUpdateComplete(); // 0x100786610
	protected override void OnEnable(); // 0x100786614
	protected override void OnDisable(); // 0x100786684
	protected override void OnDidApplyAnimationProperties(); // 0x1007866B0
	private void UpdateCachedReferences(); // 0x100785B30
	private float ClampValue(float input); // 0x1007868F4
	private void Set(float input); // 0x10078616C
	protected virtual void Set(float input, bool sendCallback); // 0x100786A60
	protected override void OnRectTransformDimensionsChange(); // 0x100786B14
	private Axis get_axis(); // 0x100786A44
	private bool get_reverseValue(); // 0x100786A30
	private void UpdateVisuals(); // 0x100785D10
	private void UpdateDrag(PointerEventData eventData, Camera cam); // 0x100786B7C
	private bool MayDrag(PointerEventData eventData); // 0x100786DE8
	public override void OnPointerDown(PointerEventData eventData); // 0x100786E7C
	public virtual void OnDrag(PointerEventData eventData); // 0x100787050
	public override void OnMove(AxisEventData eventData); // 0x1007870A4
	public override Selectable FindSelectableOnLeft(); // 0x1007873A0
	public override Selectable FindSelectableOnRight(); // 0x10078740C
	public override Selectable FindSelectableOnUp(); // 0x100787478
	public override Selectable FindSelectableOnDown(); // 0x1007874E4
	public virtual void OnInitializePotentialDrag(PointerEventData eventData); // 0x100787550
	public void SetDirection(Direction direction, bool includeRectLayouts); // 0x100787570
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x100787700
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x100787708
}

// Namespace: 
public sealed class Direction : Enum // TypeDefIndex: 3023
{
	// Fields
	public int value__; // 0x10
	public const Direction LeftToRight = 0; // 0x0
	public const Direction RightToLeft = 1; // 0x0
	public const Direction BottomToTop = 2; // 0x0
	public const Direction TopToBottom = 3; // 0x0

}

// Namespace: 
public class SliderEvent : UnityEvent`1<float> // TypeDefIndex: 3024
{
	// Methods
	public void .ctor(); // 0x100785A50
}

// Namespace: 
private sealed class Axis : Enum // TypeDefIndex: 3025
{
	// Fields
	public int value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

}

// Namespace: UnityEngine.UI
public struct SpriteState : IEquatable`1<SpriteState> // TypeDefIndex: 3026
{
	// Fields
	private Sprite m_HighlightedSprite; // 0x10
	private Sprite m_PressedSprite; // 0x18
	private Sprite m_DisabledSprite; // 0x20

	// Methods
	public Sprite get_highlightedSprite(); // 0x100787710
	public Sprite get_pressedSprite(); // 0x100787718
	public Sprite get_disabledSprite(); // 0x100787720
	public bool Equals(SpriteState other); // 0x10078783C
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 3027
{
	// Fields
	private static List`1<MatEntry> m_List; // 0x0

	// Methods
	private static void .cctor(); // 0x1007878A4
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask); // 0x100787918
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask); // 0x1007879C0
	public static void Remove(Material customMat); // 0x100788390
}

// Namespace: 
private class MatEntry // TypeDefIndex: 3028
{
	// Fields
	public Material baseMat; // 0x10
	public Material customMat; // 0x18
	public int count; // 0x20
	public int stencilId; // 0x24
	public StencilOp operation; // 0x28
	public CompareFunction compareFunction; // 0x2C
	public int readMask; // 0x30
	public int writeMask; // 0x34
	public bool useAlphaClip; // 0x38
	public ColorWriteMask colorMask; // 0x3C

	// Methods
	public void .ctor(); // 0x100788380
}

// Namespace: UnityEngine.UI
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 3029
{
	// Fields
	private FontData m_FontData; // 0xB0
	protected string m_Text; // 0xB8
	private TextGenerator m_TextCache; // 0xC0
	private TextGenerator m_TextCacheForLayout; // 0xC8
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0xD0
	private readonly UIVertex[] m_TempVerts; // 0xD8

	// Methods
	protected void .ctor(); // 0x100788568
	private static void .cctor(); // 0x100788624
	public TextGenerator get_cachedTextGenerator(); // 0x100788628
	public TextGenerator get_cachedTextGeneratorForLayout(); // 0x1007886EC
	public override Texture get_mainTexture(); // 0x100788758
	public void FontTextureChanged(); // 0x100788914
	public Font get_font(); // 0x1007888F8
	public void set_font(Font value); // 0x100788ACC
	public virtual string get_text(); // 0x100788C00
	public virtual void set_text(string value); // 0x100788C08
	public bool get_supportRichText(); // 0x100788D8C
	public void set_supportRichText(bool value); // 0x100788DA8
	public bool get_resizeTextForBestFit(); // 0x100788E6C
	public void set_resizeTextForBestFit(bool value); // 0x100788E88
	public int get_resizeTextMinSize(); // 0x100788F4C
	public void set_resizeTextMinSize(int value); // 0x100788F68
	public int get_resizeTextMaxSize(); // 0x100789028
	public void set_resizeTextMaxSize(int value); // 0x100789044
	public TextAnchor get_alignment(); // 0x100789104
	public void set_alignment(TextAnchor value); // 0x100789120
	public bool get_alignByGeometry(); // 0x1007891E0
	public void set_alignByGeometry(bool value); // 0x1007891FC
	public int get_fontSize(); // 0x100789290
	public void set_fontSize(int value); // 0x1007892AC
	public HorizontalWrapMode get_horizontalOverflow(); // 0x10078936C
	public void set_horizontalOverflow(HorizontalWrapMode value); // 0x100789388
	public VerticalWrapMode get_verticalOverflow(); // 0x100789448
	public void set_verticalOverflow(VerticalWrapMode value); // 0x100789464
	public float get_lineSpacing(); // 0x100789524
	public void set_lineSpacing(float value); // 0x100789540
	public FontStyle get_fontStyle(); // 0x10078960C
	public void set_fontStyle(FontStyle value); // 0x100789628
	public float get_pixelsPerUnit(); // 0x1007896E8
	protected override void OnEnable(); // 0x100789860
	protected override void OnDisable(); // 0x1007898F0
	protected override void UpdateGeometry(); // 0x100789968
	internal void AssignDefaultFont(); // 0x100789A00
	public TextGenerationSettings GetGenerationSettings(Vector2 extents); // 0x100789A68
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor); // 0x100789CBC
	protected override void OnPopulateMesh(VertexHelper toFill); // 0x100789DE0
	public virtual void CalculateLayoutInputHorizontal(); // 0x10078A604
	public virtual void CalculateLayoutInputVertical(); // 0x10078A608
	public virtual float get_minWidth(); // 0x10078A60C
	public virtual float get_preferredWidth(); // 0x10078A614
	public virtual float get_flexibleWidth(); // 0x10078A6CC
	public virtual float get_minHeight(); // 0x10078A6D4
	public virtual float get_preferredHeight(); // 0x10078A6DC
	public virtual float get_flexibleHeight(); // 0x10078A7D0
	public virtual int get_layoutPriority(); // 0x10078A7D8
}

// Namespace: UnityEngine.UI
public class Toggle : Selectable, IEventSystemHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 3030
{
	// Fields
	public ToggleTransition toggleTransition; // 0xD4
	public Graphic graphic; // 0xD8
	private ToggleGroup m_Group; // 0xE0
	public ToggleEvent onValueChanged; // 0xE8
	private bool m_IsOn; // 0xF0

	// Methods
	protected void .ctor(); // 0x10078A7E0
	public ToggleGroup get_group(); // 0x10078A8B8
	public void set_group(ToggleGroup value); // 0x10078A8C0
	public virtual void Rebuild(CanvasUpdate executing); // 0x10078ABD0
	public virtual void LayoutComplete(); // 0x10078ABD4
	public virtual void GraphicUpdateComplete(); // 0x10078ABD8
	protected override void OnEnable(); // 0x10078ABDC
	protected override void OnDisable(); // 0x10078AC14
	protected override void OnDidApplyAnimationProperties(); // 0x10078AC40
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue); // 0x10078A8F0
	public bool get_isOn(); // 0x10078AE80
	public void set_isOn(bool value); // 0x10078AFA0
	private void Set(bool value); // 0x10078AD54
	private void Set(bool value, bool sendCallback); // 0x10078AFA8
	private void PlayEffect(bool instant); // 0x10078AAB8
	protected override void Start(); // 0x10078B214
	private void InternalToggle(); // 0x10078B21C
	public virtual void OnPointerClick(PointerEventData eventData); // 0x10078B2B4
	public virtual void OnSubmit(BaseEventData eventData); // 0x10078B2F8
	virtual bool UnityEngine.UI.ICanvasElement.IsDestroyed(); // 0x10078B2FC
	virtual Transform UnityEngine.UI.ICanvasElement.get_transform(); // 0x10078B304
}

// Namespace: 
public sealed class ToggleTransition : Enum // TypeDefIndex: 3031
{
	// Fields
	public int value__; // 0x10
	public const ToggleTransition None = 0; // 0x0
	public const ToggleTransition Fade = 1; // 0x0

}

// Namespace: 
public class ToggleEvent : UnityEvent`1<bool> // TypeDefIndex: 3032
{
	// Methods
	public void .ctor(); // 0x10078A868
}

// Namespace: UnityEngine.UI
public class ToggleGroup : UIBehaviour // TypeDefIndex: 3033
{
	// Fields
	private bool m_AllowSwitchOff; // 0x18
	private List`1<Toggle> m_Toggles; // 0x20
	private static Predicate`1<Toggle> <>f__am$cache2; // 0x0
	private static Func`2<Toggle, bool> <>f__am$cache3; // 0x8

	// Methods
	protected void .ctor(); // 0x10078B30C
	public bool get_allowSwitchOff(); // 0x10078B20C
	public void set_allowSwitchOff(bool value); // 0x10078B37C
	private void ValidateToggleIsInGroup(Toggle toggle); // 0x10078B384
	public void NotifyToggleOn(Toggle toggle); // 0x10078AE88
	public void UnregisterToggle(Toggle toggle); // 0x10078AD5C
	public void RegisterToggle(Toggle toggle); // 0x10078ADE8
	public bool AnyTogglesOn(); // 0x10078B108
	public IEnumerable`1<Toggle> ActiveToggles(); // 0x10078B528
	public void SetAllTogglesOff(); // 0x10078B5E8
	private static bool <AnyTogglesOn>m__4(Toggle x); // 0x10078B6A8
	private static bool <ActiveToggles>m__5(Toggle x); // 0x10078B6C0
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 3034
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet`1<IClipper> m_Clippers; // 0x10

	// Methods
	protected void .ctor(); // 0x10075B0A0
	public static ClipperRegistry get_instance(); // 0x10075A488
	public void Cull(); // 0x10075A504
	public static void Register(IClipper c); // 0x10075B110
	public static void Unregister(IClipper c); // 0x10075B17C
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 3035
{
	// Methods
	public static Rect FindCullAndClipWorldRect(List`1<RectMask2D> rectMaskParents, out bool validRect); // 0x10075B1E0
	private static Rect RectIntersect(Rect a, Rect b); // 0x10075B4A4
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 3036
{
	// Methods
	public abstract void PerformClipping(); // 0
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 3037
{
	// Methods
	public abstract GameObject get_gameObject(); // 0
	public abstract void RecalculateClipping(); // 0
	public abstract RectTransform get_rectTransform(); // 0
	public abstract void Cull(Rect clipRect, bool validRect); // 0
	public abstract void SetClipRect(Rect value, bool validRect); // 0
}

// Namespace: UnityEngine.UI
internal class RectangularVertexClipper // TypeDefIndex: 3038
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x10
	private readonly Vector3[] m_CanvasCorners; // 0x18

	// Methods
	public void .ctor(); // 0x10077C750
	public Rect GetCanvasRect(RectTransform t, Canvas c); // 0x10077C7E0
}

// Namespace: UnityEngine.UI
public class AspectRatioFitter : UIBehaviour, ILayoutController, ILayoutSelfController // TypeDefIndex: 3039
{
	// Fields
	private AspectMode m_AspectMode; // 0x18
	private float m_AspectRatio; // 0x1C
	private RectTransform m_Rect; // 0x20
	private DrivenRectTransformTracker m_Tracker; // 0x28

	// Methods
	protected void .ctor(); // 0x100757AEC
	public AspectMode get_aspectMode(); // 0x100757AFC
	public void set_aspectMode(AspectMode value); // 0x100757B04
	public float get_aspectRatio(); // 0x100757BE4
	public void set_aspectRatio(float value); // 0x100757BEC
	private RectTransform get_rectTransform(); // 0x100757C6C
	protected override void OnEnable(); // 0x100757D08
	protected override void OnDisable(); // 0x100757D0C
	protected override void OnRectTransformDimensionsChange(); // 0x100757F7C
	private void UpdateRect(); // 0x100757F80
	private float GetSizeDeltaToProduceSize(float size, int axis); // 0x100758324
	private Vector2 GetParentSize(); // 0x100758234
	public virtual void SetLayoutHorizontal(); // 0x1007583E4
	public virtual void SetLayoutVertical(); // 0x1007583E8
	protected void SetDirty(); // 0x100757B84
}

// Namespace: 
public sealed class AspectMode : Enum // TypeDefIndex: 3040
{
	// Fields
	public int value__; // 0x10
	public const AspectMode None = 0; // 0x0
	public const AspectMode WidthControlsHeight = 1; // 0x0
	public const AspectMode HeightControlsWidth = 2; // 0x0
	public const AspectMode FitInParent = 3; // 0x0
	public const AspectMode EnvelopeParent = 4; // 0x0

}

// Namespace: UnityEngine.UI
public class CanvasScaler : UIBehaviour // TypeDefIndex: 3041
{
	// Fields
	private const float kLogBase = 2; // 0x0
	private ScaleMode m_UiScaleMode; // 0x18
	protected float m_ReferencePixelsPerUnit; // 0x1C
	protected float m_ScaleFactor; // 0x20
	protected Vector2 m_ReferenceResolution; // 0x24
	protected ScreenMatchMode m_ScreenMatchMode; // 0x2C
	protected float m_MatchWidthOrHeight; // 0x30
	protected Unit m_PhysicalUnit; // 0x34
	protected float m_FallbackScreenDPI; // 0x38
	protected float m_DefaultSpriteDPI; // 0x3C
	protected float m_DynamicPixelsPerUnit; // 0x40
	private Canvas m_Canvas; // 0x48
	private float m_PrevScaleFactor; // 0x50
	private float m_PrevReferencePixelsPerUnit; // 0x54

	// Methods
	protected void .ctor(); // 0x100758CE4
	public ScaleMode get_uiScaleMode(); // 0x100758D70
	public void set_uiScaleMode(ScaleMode value); // 0x100758D78
	public float get_referencePixelsPerUnit(); // 0x100758D80
	public void set_referencePixelsPerUnit(float value); // 0x100758D88
	public float get_scaleFactor(); // 0x100758D90
	public void set_scaleFactor(float value); // 0x100758D98
	public Vector2 get_referenceResolution(); // 0x100758E20
	public void set_referenceResolution(Vector2 value); // 0x100758E28
	public ScreenMatchMode get_screenMatchMode(); // 0x100758F30
	public void set_screenMatchMode(ScreenMatchMode value); // 0x100758F38
	public float get_matchWidthOrHeight(); // 0x100758F40
	public void set_matchWidthOrHeight(float value); // 0x100758F48
	public Unit get_physicalUnit(); // 0x100758F50
	public void set_physicalUnit(Unit value); // 0x100758F58
	public float get_fallbackScreenDPI(); // 0x100758F60
	public void set_fallbackScreenDPI(float value); // 0x100758F68
	public float get_defaultSpriteDPI(); // 0x100758F70
	public void set_defaultSpriteDPI(float value); // 0x100758F78
	public float get_dynamicPixelsPerUnit(); // 0x100758F80
	public void set_dynamicPixelsPerUnit(float value); // 0x100758F88
	protected override void OnEnable(); // 0x100758F90
	protected override void OnDisable(); // 0x100759018
	protected virtual void Update(); // 0x1007590E8
	protected virtual void Handle(); // 0x100759134
	protected virtual void HandleWorldCanvas(); // 0x100759288
	protected virtual void HandleConstantPixelSize(); // 0x1007592B4
	protected virtual void HandleScaleWithScreenSize(); // 0x1007592E0
	protected virtual void HandleConstantPhysicalSize(); // 0x1007594C8
	protected void SetScaleFactor(float scaleFactor); // 0x100759048
	protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit); // 0x100759098
}

// Namespace: 
public sealed class ScaleMode : Enum // TypeDefIndex: 3042
{
	// Fields
	public int value__; // 0x10
	public const ScaleMode ConstantPixelSize = 0; // 0x0
	public const ScaleMode ScaleWithScreenSize = 1; // 0x0
	public const ScaleMode ConstantPhysicalSize = 2; // 0x0

}

// Namespace: 
public sealed class ScreenMatchMode : Enum // TypeDefIndex: 3043
{
	// Fields
	public int value__; // 0x10
	public const ScreenMatchMode MatchWidthOrHeight = 0; // 0x0
	public const ScreenMatchMode Expand = 1; // 0x0
	public const ScreenMatchMode Shrink = 2; // 0x0

}

// Namespace: 
public sealed class Unit : Enum // TypeDefIndex: 3044
{
	// Fields
	public int value__; // 0x10
	public const Unit Centimeters = 0; // 0x0
	public const Unit Millimeters = 1; // 0x0
	public const Unit Inches = 2; // 0x0
	public const Unit Points = 3; // 0x0
	public const Unit Picas = 4; // 0x0

}

// Namespace: UnityEngine.UI
public class ContentSizeFitter : UIBehaviour, ILayoutController, ILayoutSelfController // TypeDefIndex: 3045
{
	// Fields
	protected FitMode m_HorizontalFit; // 0x18
	protected FitMode m_VerticalFit; // 0x1C
	private RectTransform m_Rect; // 0x20
	private DrivenRectTransformTracker m_Tracker; // 0x28

	// Methods
	protected void .ctor(); // 0x10075BC68
	public FitMode get_horizontalFit(); // 0x10075BC70
	public void set_horizontalFit(FitMode value); // 0x10075BC78
	public FitMode get_verticalFit(); // 0x10075BDA8
	public void set_verticalFit(FitMode value); // 0x10075BDB0
	private RectTransform get_rectTransform(); // 0x10075BE30
	protected override void OnEnable(); // 0x10075BECC
	protected override void OnDisable(); // 0x10075BED0
	protected override void OnRectTransformDimensionsChange(); // 0x10075BF4C
	private void HandleSelfFittingAlongAxis(int axis); // 0x10075BF50
	public virtual void SetLayoutHorizontal(); // 0x10075C034
	public virtual void SetLayoutVertical(); // 0x10075C064
	protected void SetDirty(); // 0x10075BCF8
}

// Namespace: 
public sealed class FitMode : Enum // TypeDefIndex: 3046
{
	// Fields
	public int value__; // 0x10
	public const FitMode Unconstrained = 0; // 0x0
	public const FitMode MinSize = 1; // 0x0
	public const FitMode PreferredSize = 2; // 0x0

}

// Namespace: UnityEngine.UI
public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 3047
{
	// Fields
	protected Corner m_StartCorner; // 0x58
	protected Axis m_StartAxis; // 0x5C
	protected Vector2 m_CellSize; // 0x60
	protected Vector2 m_Spacing; // 0x68
	protected Constraint m_Constraint; // 0x70
	protected int m_ConstraintCount; // 0x74

	// Methods
	protected void .ctor(); // 0x100764A58
	public Corner get_startCorner(); // 0x100764BB8
	public void set_startCorner(Corner value); // 0x100764BC0
	public Axis get_startAxis(); // 0x100764C24
	public void set_startAxis(Axis value); // 0x100764C2C
	public Vector2 get_cellSize(); // 0x100764C90
	public void set_cellSize(Vector2 value); // 0x100764C98
	public Vector2 get_spacing(); // 0x100764D04
	public void set_spacing(Vector2 value); // 0x100764D0C
	public Constraint get_constraint(); // 0x100764D78
	public void set_constraint(Constraint value); // 0x100764D80
	public int get_constraintCount(); // 0x100764DE4
	public void set_constraintCount(int value); // 0x100764DEC
	public override void CalculateLayoutInputHorizontal(); // 0x100764E88
	public override void CalculateLayoutInputVertical(); // 0x100765458
	public override void SetLayoutHorizontal(); // 0x1007656F8
	public override void SetLayoutVertical(); // 0x100765E20
	private void SetCellsAlongAxis(int axis); // 0x100765700
}

// Namespace: 
public sealed class Corner : Enum // TypeDefIndex: 3048
{
	// Fields
	public int value__; // 0x10
	public const Corner UpperLeft = 0; // 0x0
	public const Corner UpperRight = 1; // 0x0
	public const Corner LowerLeft = 2; // 0x0
	public const Corner LowerRight = 3; // 0x0

}

// Namespace: 
public sealed class Axis : Enum // TypeDefIndex: 3049
{
	// Fields
	public int value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

}

// Namespace: 
public sealed class Constraint : Enum // TypeDefIndex: 3050
{
	// Fields
	public int value__; // 0x10
	public const Constraint Flexible = 0; // 0x0
	public const Constraint FixedColumnCount = 1; // 0x0
	public const Constraint FixedRowCount = 2; // 0x0

}

// Namespace: UnityEngine.UI
public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 3051
{
	// Methods
	protected void .ctor(); // 0x100766028
	public override void CalculateLayoutInputHorizontal(); // 0x100766040
	public override void CalculateLayoutInputVertical(); // 0x1007662F0
	public override void SetLayoutHorizontal(); // 0x1007662FC
	public override void SetLayoutVertical(); // 0x100766830
}

// Namespace: UnityEngine.UI
public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 3052
{
	// Fields
	protected float m_Spacing; // 0x58
	protected bool m_ChildForceExpandWidth; // 0x5C
	protected bool m_ChildForceExpandHeight; // 0x5D

	// Methods
	protected void .ctor(); // 0x100766034
	public float get_spacing(); // 0x10076683C
	public void set_spacing(float value); // 0x100766844
	public bool get_childForceExpandWidth(); // 0x1007668A8
	public void set_childForceExpandWidth(bool value); // 0x1007668B0
	public bool get_childForceExpandHeight(); // 0x100766914
	public void set_childForceExpandHeight(bool value); // 0x10076691C
	protected void CalcAlongAxis(int axis, bool isVertical); // 0x10076606C
	protected void SetChildrenAlongAxis(int axis, bool isVertical); // 0x100766308
}

// Namespace: UnityEngine.UI
public interface ILayoutElement // TypeDefIndex: 3053
{
	// Methods
	public abstract void CalculateLayoutInputHorizontal(); // 0
	public abstract void CalculateLayoutInputVertical(); // 0
	public abstract float get_minWidth(); // 0
	public abstract float get_preferredWidth(); // 0
	public abstract float get_flexibleWidth(); // 0
	public abstract float get_minHeight(); // 0
	public abstract float get_preferredHeight(); // 0
	public abstract float get_flexibleHeight(); // 0
	public abstract int get_layoutPriority(); // 0
}

// Namespace: UnityEngine.UI
public interface ILayoutController // TypeDefIndex: 3054
{
	// Methods
	public abstract void SetLayoutHorizontal(); // 0
	public abstract void SetLayoutVertical(); // 0
}

// Namespace: UnityEngine.UI
public interface ILayoutGroup : ILayoutController // TypeDefIndex: 3055
{
}

// Namespace: UnityEngine.UI
public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 3056
{
}

// Namespace: UnityEngine.UI
public interface ILayoutIgnorer // TypeDefIndex: 3057
{
	// Methods
	public abstract bool get_ignoreLayout(); // 0
}

// Namespace: UnityEngine.UI
public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 3058
{
	// Fields
	private bool m_IgnoreLayout; // 0x18
	private float m_MinWidth; // 0x1C
	private float m_MinHeight; // 0x20
	private float m_PreferredWidth; // 0x24
	private float m_PreferredHeight; // 0x28
	private float m_FlexibleWidth; // 0x2C
	private float m_FlexibleHeight; // 0x30

	// Methods
	protected void .ctor(); // 0x100775BE8
	public virtual bool get_ignoreLayout(); // 0x100775C00
	public virtual void set_ignoreLayout(bool value); // 0x100775C08
	public virtual void CalculateLayoutInputHorizontal(); // 0x100775D5C
	public virtual void CalculateLayoutInputVertical(); // 0x100775D60
	public virtual float get_minWidth(); // 0x100775D64
	public virtual void set_minWidth(float value); // 0x100775D6C
	public virtual float get_minHeight(); // 0x100775DEC
	public virtual void set_minHeight(float value); // 0x100775DF4
	public virtual float get_preferredWidth(); // 0x100775E74
	public virtual void set_preferredWidth(float value); // 0x100775E7C
	public virtual float get_preferredHeight(); // 0x100775EFC
	public virtual void set_preferredHeight(float value); // 0x100775F04
	public virtual float get_flexibleWidth(); // 0x100775F84
	public virtual void set_flexibleWidth(float value); // 0x100775F8C
	public virtual float get_flexibleHeight(); // 0x10077600C
	public virtual void set_flexibleHeight(float value); // 0x100776014
	public virtual int get_layoutPriority(); // 0x100776094
	protected override void OnEnable(); // 0x10077609C
	protected override void OnTransformParentChanged(); // 0x1007760A0
	protected override void OnDisable(); // 0x1007760A4
	protected override void OnDidApplyAnimationProperties(); // 0x1007760A8
	protected override void OnBeforeTransformParentChanged(); // 0x1007760AC
	protected void SetDirty(); // 0x100775C88
}

// Namespace: UnityEngine.UI
public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutController, ILayoutGroup // TypeDefIndex: 3059
{
	// Fields
	protected RectOffset m_Padding; // 0x18
	protected TextAnchor m_ChildAlignment; // 0x20
	private RectTransform m_Rect; // 0x28
	protected DrivenRectTransformTracker m_Tracker; // 0x30
	private Vector2 m_TotalMinSize; // 0x34
	private Vector2 m_TotalPreferredSize; // 0x3C
	private Vector2 m_TotalFlexibleSize; // 0x44
	private List`1<RectTransform> m_RectChildren; // 0x50

	// Methods
	protected void .ctor(); // 0x100764AC0
	public RectOffset get_padding(); // 0x1007653F0
	public void set_padding(RectOffset value); // 0x1007760B0
	public TextAnchor get_childAlignment(); // 0x100776114
	public void set_childAlignment(TextAnchor value); // 0x10077611C
	protected RectTransform get_rectTransform(); // 0x10076565C
	protected List`1<RectTransform> get_rectChildren(); // 0x1007653E8
	public virtual void CalculateLayoutInputHorizontal(); // 0x100765020
	public abstract void CalculateLayoutInputVertical(); // 0
	public virtual float get_minWidth(); // 0x100776180
	public virtual float get_preferredWidth(); // 0x100776190
	public virtual float get_flexibleWidth(); // 0x1007761A0
	public virtual float get_minHeight(); // 0x1007761B0
	public virtual float get_preferredHeight(); // 0x1007761C0
	public virtual float get_flexibleHeight(); // 0x1007761D0
	public virtual int get_layoutPriority(); // 0x1007761E0
	public abstract void SetLayoutHorizontal(); // 0
	public abstract void SetLayoutVertical(); // 0
	protected override void OnEnable(); // 0x1007761E8
	protected override void OnDisable(); // 0x10077629C
	protected override void OnDidApplyAnimationProperties(); // 0x100776318
	protected float GetTotalMinSize(int axis); // 0x1007669A4
	protected float GetTotalPreferredSize(int axis); // 0x100766998
	protected float GetTotalFlexibleSize(int axis); // 0x10076698C
	protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding); // 0x100765E28
	protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis); // 0x1007653F8
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size); // 0x100765F40
	private bool get_isRootLayoutGroup(); // 0x10077631C
	protected override void OnRectTransformDimensionsChange(); // 0x100776464
	protected virtual void OnTransformChildrenChanged(); // 0x100776498
	protected void SetProperty(T currentValue, T newValue); // 0
	protected void SetDirty(); // 0x1007761EC
}

// Namespace: UnityEngine.UI
public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 3060
{
	// Fields
	private RectTransform m_ToRebuild; // 0x10
	private int m_CachedHashFromTransform; // 0x18
	private static ObjectPool`1<LayoutRebuilder> s_Rebuilders; // 0x0
	private static UnityAction`1<LayoutRebuilder> <>f__am$cache3; // 0x8
	private static Predicate`1<Component> <>f__am$cache4; // 0x10
	private static UnityAction`1<Component> <>f__am$cache5; // 0x18
	private static UnityAction`1<Component> <>f__am$cache6; // 0x20
	private static UnityAction`1<Component> <>f__am$cache7; // 0x28
	private static UnityAction`1<Component> <>f__am$cache8; // 0x30

	// Methods
	public void .ctor(); // 0x10077649C
	private static void .cctor(); // 0x1007764A4
	private void Initialize(RectTransform controller); // 0x1007765BC
	private void Clear(); // 0x100776618
	private static void ReapplyDrivenProperties(RectTransform driven); // 0x100776624
	public Transform get_transform(); // 0x100776688
	public bool IsDestroyed(); // 0x100776690
	private static void StripDisabledBehavioursFromList(List`1<Component> components); // 0x100776704
	public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot); // 0x100776810
	public void Rebuild(CanvasUpdate executing); // 0x1007768DC
	private void PerformLayoutControl(RectTransform rect, UnityAction`1<Component> action); // 0x100776E64
	private void PerformLayoutCalculation(RectTransform rect, UnityAction`1<Component> action); // 0x100776BE0
	public static void MarkLayoutForRebuild(RectTransform rect); // 0x100757D88
	private static bool ValidLayoutGroup(RectTransform parent, List`1<Component> comps); // 0x1007771A0
	private static bool ValidController(RectTransform layoutRoot, List`1<Component> comps); // 0x1007772C8
	private static void MarkLayoutRootForRebuild(RectTransform controller); // 0x1007773F0
	public void LayoutComplete(); // 0x10077753C
	public void GraphicUpdateComplete(); // 0x1007775C0
	public override int GetHashCode(); // 0x1007775C4
	public override bool Equals(object obj); // 0x1007775CC
	public override string ToString(); // 0x100777650
	private static void <s_Rebuilders>m__6(LayoutRebuilder x); // 0x1007776CC
	private static bool <StripDisabledBehavioursFromList>m__7(Component e); // 0x1007776E8
	private static void <Rebuild>m__8(Component e); // 0x100777790
	private static void <Rebuild>m__9(Component e); // 0x100777898
	private static void <Rebuild>m__A(Component e); // 0x1007779A0
	private static void <Rebuild>m__B(Component e); // 0x100777AAC
}

// Namespace: UnityEngine.UI
public static class LayoutUtility // TypeDefIndex: 3061
{
	// Fields
	private static Func`2<ILayoutElement, float> <>f__am$cache0; // 0x0
	private static Func`2<ILayoutElement, float> <>f__am$cache1; // 0x8
	private static Func`2<ILayoutElement, float> <>f__am$cache2; // 0x10
	private static Func`2<ILayoutElement, float> <>f__am$cache3; // 0x18
	private static Func`2<ILayoutElement, float> <>f__am$cache4; // 0x20
	private static Func`2<ILayoutElement, float> <>f__am$cache5; // 0x28
	private static Func`2<ILayoutElement, float> <>f__am$cache6; // 0x30
	private static Func`2<ILayoutElement, float> <>f__am$cache7; // 0x38

	// Methods
	public static float GetMinSize(RectTransform rect, int axis); // 0x10075C01C
	public static float GetPreferredSize(RectTransform rect, int axis); // 0x10075C028
	public static float GetFlexibleSize(RectTransform rect, int axis); // 0x100766980
	public static float GetMinWidth(RectTransform rect); // 0x100777BB8
	public static float GetPreferredWidth(RectTransform rect); // 0x100777D48
	public static float GetFlexibleWidth(RectTransform rect); // 0x100778028
	public static float GetMinHeight(RectTransform rect); // 0x100777C84
	public static float GetPreferredHeight(RectTransform rect); // 0x100777EB8
	public static float GetFlexibleHeight(RectTransform rect); // 0x1007780EC
	public static float GetLayoutProperty(RectTransform rect, Func`2<ILayoutElement, float> property, float defaultValue); // 0x1007781B0
	public static float GetLayoutProperty(RectTransform rect, Func`2<ILayoutElement, float> property, float defaultValue, out ILayoutElement source); // 0x1007781D4
	private static float <GetMinWidth>m__C(ILayoutElement e); // 0x100778534
	private static float <GetPreferredWidth>m__D(ILayoutElement e); // 0x100778624
	private static float <GetPreferredWidth>m__E(ILayoutElement e); // 0x100778714
	private static float <GetFlexibleWidth>m__F(ILayoutElement e); // 0x100778804
	private static float <GetMinHeight>m__10(ILayoutElement e); // 0x1007788F4
	private static float <GetPreferredHeight>m__11(ILayoutElement e); // 0x1007789E4
	private static float <GetPreferredHeight>m__12(ILayoutElement e); // 0x100778AD4
	private static float <GetFlexibleHeight>m__13(ILayoutElement e); // 0x100778BC4
}

// Namespace: UnityEngine.UI
public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 3062
{
	// Methods
	protected void .ctor(); // 0x10078C4B4
	public override void CalculateLayoutInputHorizontal(); // 0x10078C4BC
	public override void CalculateLayoutInputVertical(); // 0x10078C4F0
	public override void SetLayoutHorizontal(); // 0x10078C500
	public override void SetLayoutVertical(); // 0x10078C510
}

// Namespace: UnityEngine.UI
public interface IMaterialModifier // TypeDefIndex: 3063
{
	// Methods
	public abstract Material GetModifiedMaterial(Material baseMaterial); // 0
}

// Namespace: UnityEngine.UI.Collections
internal class IndexedSet`1 : IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 3064
{
	// Fields
	private readonly List`1<T> m_List; // 0x0
	private Dictionary`2<T, int> m_Dictionary; // 0x0

	// Methods
	public void .ctor(); // 0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0
	public void Add(T item); // 0
	public bool AddUnique(T item); // 0
	public bool Remove(T item); // 0
	public IEnumerator`1<T> GetEnumerator(); // 0
	public void Clear(); // 0
	public bool Contains(T item); // 0
	public void CopyTo(T[] array, int arrayIndex); // 0
	public int get_Count(); // 0
	public bool get_IsReadOnly(); // 0
	public int IndexOf(T item); // 0
	public void Insert(int index, T item); // 0
	public void RemoveAt(int index); // 0
	public T get_Item(int index); // 0
	public void set_Item(int index, T value); // 0
	public void Sort(Comparison`1<T> sortLayoutFunction); // 0
}

// Namespace: UnityEngine.UI
internal static class ListPool`1 // TypeDefIndex: 3065
{
	// Fields
	private static readonly ObjectPool`1<List`1<T>> s_ListPool; // 0x0
	private static UnityAction`1<List`1<T>> <>f__am$cache1; // 0x0

	// Methods
	private static void .cctor(); // 0
	public static List`1<T> Get(); // 0
	public static void Release(List`1<T> toRelease); // 0
	private static void <s_ListPool>m__14(List`1<T> l); // 0
}

// Namespace: UnityEngine.UI
internal class ObjectPool`1 // TypeDefIndex: 3066
{
	// Fields
	private readonly Stack`1<T> m_Stack; // 0x0
	private readonly UnityAction`1<T> m_ActionOnGet; // 0x0
	private readonly UnityAction`1<T> m_ActionOnRelease; // 0x0
	private int <countAll>k__BackingField; // 0x0

	// Methods
	public void .ctor(UnityAction`1<T> actionOnGet, UnityAction`1<T> actionOnRelease); // 0
	public int get_countAll(); // 0
	private void set_countAll(int value); // 0
	public T Get(); // 0
	public void Release(T element); // 0
}

// Namespace: UnityEngine.UI
public class VertexHelper : IDisposable // TypeDefIndex: 3067
{
	// Fields
	private List`1<Vector3> m_Positions; // 0x10
	private List`1<Color32> m_Colors; // 0x18
	private List`1<Vector2> m_Uv0S; // 0x20
	private List`1<Vector2> m_Uv1S; // 0x28
	private List`1<Vector3> m_Normals; // 0x30
	private List`1<Vector4> m_Tangents; // 0x38
	private List`1<int> m_Indices; // 0x40
	private static readonly Vector4 s_DefaultTangent; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x10

	// Methods
	public void .ctor(); // 0x10078B6D8
	public void .ctor(Mesh m); // 0x10078B860
	private static void .cctor(); // 0x10078BB24
	public void Clear(); // 0x10078589C
	public int get_currentVertCount(); // 0x10078BBBC
	public void PopulateUIVertex(UIVertex vertex, int i); // 0x10078BC14
	public void SetUIVertex(UIVertex vertex, int i); // 0x10078BD40
	public void FillMesh(Mesh mesh); // 0x10078BE54
	public void Dispose(); // 0x10078BF8C
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent); // 0x10078C13C
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0); // 0x10078C2AC
	public void AddVert(UIVertex v); // 0x10078C3B8
	public void AddTriangle(int idx0, int idx1, int idx2); // 0x10078C414
	public void AddUIVertexQuad(UIVertex[] verts); // 0x10078A470
	public void AddUIVertexTriangleStream(List`1<UIVertex> verts); // 0x10078597C
	public void GetUIVertexStream(List`1<UIVertex> stream); // 0x100785864
}

// Namespace: UnityEngine.UI
public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 3068
{
	// Fields
	private Graphic m_Graphic; // 0x18

	// Methods
	protected void .ctor(); // 0x1007583EC
	protected Graphic get_graphic(); // 0x1007583F4
	protected override void OnEnable(); // 0x100758490
	protected override void OnDisable(); // 0x100758568
	protected override void OnDidApplyAnimationProperties(); // 0x100758640
	public virtual void ModifyMesh(Mesh mesh); // 0x100758718
	public abstract void ModifyMesh(VertexHelper vh); // 0
}

// Namespace: UnityEngine.UI
public interface IMeshModifier // TypeDefIndex: 3069
{
	// Methods
	public abstract void ModifyMesh(Mesh mesh); // 0
	public abstract void ModifyMesh(VertexHelper verts); // 0
}

// Namespace: UnityEngine.UI
public class Outline : Shadow // TypeDefIndex: 3070
{
	// Methods
	protected void .ctor(); // 0x10077B820
	public override void ModifyMesh(VertexHelper vh); // 0x10077B828
}

// Namespace: UnityEngine.UI
public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 3071
{
	// Methods
	protected void .ctor(); // 0x10077BBA8
	public override void ModifyMesh(VertexHelper vh); // 0x10077BBB0
}

// Namespace: UnityEngine.UI
public class Shadow : BaseMeshEffect // TypeDefIndex: 3072
{
	// Fields
	private const float kMaxEffectDistance = 600; // 0x0
	private Color m_EffectColor; // 0x20
	private Vector2 m_EffectDistance; // 0x30
	private bool m_UseGraphicAlpha; // 0x38

	// Methods
	protected void .ctor(); // 0x1007850CC
	public Color get_effectColor(); // 0x10078514C
	public void set_effectColor(Color value); // 0x100785158
	public Vector2 get_effectDistance(); // 0x100785268
	public void set_effectDistance(Vector2 value); // 0x100785270
	public bool get_useGraphicAlpha(); // 0x1007853AC
	public void set_useGraphicAlpha(bool value); // 0x1007853B4
	protected void ApplyShadowZeroAlloc(List`1<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x1007854A8
	protected void ApplyShadow(List`1<UIVertex> verts, Color32 color, int start, int end, float x, float y); // 0x100785718
	public override void ModifyMesh(VertexHelper vh); // 0x100785720
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 3073
{
	// Fields
	internal static $ArrayType$12 $$field-0; // 0x0

}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 3074
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3075
{
}

// Namespace: UnityScript.Lang
public static class Extensions // TypeDefIndex: 3076
{
	// Methods
	public static int get_length(Array a); // 0x1007EEF30
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3077
{
}

// Namespace: Facebook.Unity.Android
public class AndroidWrapper // TypeDefIndex: 3078
{
	// Methods
	public void .ctor(); // 0x10035F9A8
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3079
{
}

// Namespace: Facebook.Unity.IOS
internal class IOSWrapper : IIOSWrapper // TypeDefIndex: 3080
{
	// Methods
	public void .ctor(); // 0x10035F9B0
	public void Init(string appId, bool frictionlessRequests, string urlSuffix, string unityUserAgentSuffix); // 0x10035F9B8
	public void LogInWithReadPermissions(int requestId, string scope); // 0x10035FA34
	public void LogInWithPublishPermissions(int requestId, string scope); // 0x10035FAA4
	public void LogOut(); // 0x10035FB14
	public void SetShareDialogMode(int mode); // 0x10035FB1C
	public void ShareLink(int requestId, string contentURL, string contentTitle, string contentDescription, string photoURL); // 0x10035FB2C
	public void FeedShare(int requestId, string toId, string link, string linkName, string linkCaption, string linkDescription, string picture, string mediaSource); // 0x10035FBCC
	public void AppRequest(int requestId, string message, string actionType, string objectId, optional string[] to, optional int toLength, optional string filters, optional string[] excludeIds, optional int excludeIdsLength, optional bool hasMaxRecipients, optional int maxRecipients, optional string data, optional string title); // 0x10035FCD0
	public void AppInvite(int requestId, string appLinkUrl, string previewImageUrl); // 0x10035FEA0
	public void CreateGameGroup(int requestId, string name, string description, string privacy); // 0x10035FF00
	public void JoinGameGroup(int requestId, string groupId); // 0x10035FF7C
	public void FBSettingsActivateApp(string appId); // 0x10035FFEC
	public void LogAppEvent(string logEvent, double valueToSum, int numParams, string[] paramKeys, string[] paramVals); // 0x100360044
	public void LogPurchaseAppEvent(double logPurchase, string currency, int numParams, string[] paramKeys, string[] paramVals); // 0x10036014C
	public void FBAppEventsSetLimitEventUsage(bool limitEventUsage); // 0x100360254
	public void GetAppLink(int requestId); // 0x100360264
	public string FBSdkVersion(); // 0x100360274
	public void FetchDeferredAppLink(int requestId); // 0x1003602DC
	public void RefreshCurrentAccessToken(int requestId); // 0x1003602EC
	private static extern void IOSFBInit(string appId, bool frictionlessRequests, string urlSuffix, string unityUserAgentSuffix); // 0x10035F9BC
	private static extern void IOSFBLogInWithReadPermissions(int requestId, string scope); // 0x10035FA6C
	private static extern void IOSFBLogInWithPublishPermissions(int requestId, string scope); // 0x10035FADC
	private static extern void IOSFBLogOut(); // 0x10035FB18
	private static extern void IOSFBSetShareDialogMode(int mode); // 0x10035FB24
	private static extern void IOSFBShareLink(int requestId, string contentURL, string contentTitle, string contentDescription, string photoURL); // 0x10035FB30
	private static extern void IOSFBFeedShare(int requestId, string toId, string link, string linkName, string linkCaption, string linkDescription, string picture, string mediaSource); // 0x10035FBD8
	private static extern void IOSFBAppRequest(int requestId, string message, string actionType, string objectId, optional string[] to, optional int toLength, optional string filters, optional string[] excludeIds, optional int excludeIdsLength, optional bool hasMaxRecipients, optional int maxRecipients, optional string data, optional string title); // 0x10035FCFC
	private static extern void IOSFBAppInvite(int requestId, string appLinkUrl, string previewImageUrl); // 0x10035FEA4
	private static extern void IOSFBCreateGameGroup(int requestId, string name, string description, string privacy); // 0x10035FF04
	private static extern void IOSFBJoinGameGroup(int requestId, string groupId); // 0x10035FFB4
	private static extern void IOSFBSettingsActivateApp(string appId); // 0x100360018
	private static extern void IOSFBAppEventsLogEvent(string logEvent, double valueToSum, int numParams, string[] paramKeys, string[] paramVals); // 0x100360048
	private static extern void IOSFBAppEventsLogPurchase(double logPurchase, string currency, int numParams, string[] paramKeys, string[] paramVals); // 0x100360150
	private static extern void IOSFBAppEventsSetLimitEventUsage(bool limitEventUsage); // 0x10036025C
	private static extern void IOSFBGetAppLink(int requestID); // 0x10036026C
	private static extern string IOSFBSdkVersion(); // 0x1003602A8
	private static extern void IOSFBFetchDeferredAppLink(int requestID); // 0x1003602E4
	private static extern void IOSFBRefreshCurrentAccessToken(int requestID); // 0x1003602F4
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3081
{
}

// Namespace: com.amazon.device.iap.cpt.log
public class AmazonLogging // TypeDefIndex: 3082
{
	// Fields
	private const string errorMessage = "{0} error: {1}"; // 0x0
	private const string warningMessage = "{0} warning: {1}"; // 0x0
	private const string logMessage = "{0}: {1}"; // 0x0

	// Methods
	public void .ctor(); // 0x10002A07C
	public static void LogError(AmazonLoggingLevel reportLevel, string service, string message); // 0x10002A084
	public static void LogWarning(AmazonLoggingLevel reportLevel, string service, string message); // 0x10002A1B0
	public static void Log(AmazonLoggingLevel reportLevel, string service, string message); // 0x100024094
	public static SDKLoggingLevel pluginToSDKLoggingLevel(AmazonLoggingLevel pluginLoggingLevel); // 0x10002A2A4
}

// Namespace: 
public sealed class AmazonLoggingLevel : Enum // TypeDefIndex: 3083
{
	// Fields
	public int value__; // 0x10
	public const AmazonLoggingLevel Silent = 0; // 0x0
	public const AmazonLoggingLevel Critical = 1; // 0x0
	public const AmazonLoggingLevel ErrorsAsExceptions = 2; // 0x0
	public const AmazonLoggingLevel Errors = 3; // 0x0
	public const AmazonLoggingLevel Warnings = 4; // 0x0
	public const AmazonLoggingLevel Verbose = 5; // 0x0

}

// Namespace: 
public sealed class SDKLoggingLevel : Enum // TypeDefIndex: 3084
{
	// Fields
	public int value__; // 0x10
	public const SDKLoggingLevel LogOff = 0; // 0x0
	public const SDKLoggingLevel LogCritical = 1; // 0x0
	public const SDKLoggingLevel LogError = 2; // 0x0
	public const SDKLoggingLevel LogWarning = 3; // 0x0

}

// Namespace: com.amazon.device.iap.cpt.json
public static class Json // TypeDefIndex: 3085
{
	// Methods
	public static object Deserialize(string json); // 0x100021454
	public static string Serialize(object obj); // 0x1000243F4
}

// Namespace: 
private sealed class Parser : IDisposable // TypeDefIndex: 3086
{
	// Fields
	private const string WORD_BREAK = "{}[],:""; // 0x0
	private StringReader json; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x0

	// Methods
	private void .ctor(string jsonString); // 0x100028164
	public static bool IsWordBreak(char c); // 0x1000281E0
	public static object Parse(string jsonString); // 0x100027F7C
	public void Dispose(); // 0x1000282AC
	private Dictionary`2<string, object> ParseObject(); // 0x1000282E0
	private List`1<object> ParseArray(); // 0x100028AE4
	private object ParseValue(); // 0x100028284
	private object ParseByToken(TOKEN token); // 0x100028BF8
	private string ParseString(); // 0x1000287AC
	private object ParseNumber(); // 0x100028D2C
	private void EatWhitespace(); // 0x100028F84
	private char get_PeekChar(); // 0x100029070
	private char get_NextChar(); // 0x100028DFC
	private string get_NextWord(); // 0x100028EA4
	private TOKEN get_NextToken(); // 0x10002844C
}

// Namespace: 
private sealed class TOKEN : Enum // TypeDefIndex: 3087
{
	// Fields
	public int value__; // 0x10
	public const TOKEN NONE = 0; // 0x0
	public const TOKEN CURLY_OPEN = 1; // 0x0
	public const TOKEN CURLY_CLOSE = 2; // 0x0
	public const TOKEN SQUARED_OPEN = 3; // 0x0
	public const TOKEN SQUARED_CLOSE = 4; // 0x0
	public const TOKEN COLON = 5; // 0x0
	public const TOKEN COMMA = 6; // 0x0
	public const TOKEN STRING = 7; // 0x0
	public const TOKEN NUMBER = 8; // 0x0
	public const TOKEN TRUE = 9; // 0x0
	public const TOKEN FALSE = 10; // 0x0
	public const TOKEN NULL = 11; // 0x0

}

// Namespace: 
private sealed class Serializer // TypeDefIndex: 3088
{
	// Fields
	private StringBuilder builder; // 0x10

	// Methods
	private void .ctor(); // 0x100029118
	public static string Serialize(object obj); // 0x1000280EC
	private void SerializeValue(object value); // 0x100029184
	private void SerializeObject(IDictionary obj); // 0x10002994C
	private void SerializeArray(IList anArray); // 0x1000295D0
	private void SerializeString(string str); // 0x10002932C
	private void SerializeOther(object value); // 0x100029E4C
}

// Namespace: com.amazon.device.iap.cpt
public abstract class Jsonable // TypeDefIndex: 3089
{
	// Methods
	protected void .ctor(); // 0x10002417C
	public static Dictionary`2<string, object> unrollObjectIntoMap(Dictionary`2<string, T> obj); // 0
	public static List`1<object> unrollObjectIntoList(List`1<T> obj); // 0
	public abstract Dictionary`2<string, object> GetObjectDictionary(); // 0
	public static void CheckForErrors(Dictionary`2<string, object> jsonMap); // 0x100021464
}

// Namespace: com.amazon.device.iap.cpt
public class AmazonException : ApplicationException // TypeDefIndex: 3090
{
	// Methods
	public void .ctor(); // 0x10001FB68
	public void .ctor(string message); // 0x10001FB70
	public void .ctor(string message, Exception inner); // 0x10001FB78
	protected void .ctor(SerializationInfo info, StreamingContext context); // 0x10001FB80
}

// Namespace: com.amazon.device.iap.cpt
public abstract class AmazonIapV2Base : AmazonIapV2Impl // TypeDefIndex: 3091
{
	// Fields
	private static readonly object startLock; // 0x0
	private static bool startCalled; // 0x8

	// Methods
	public void .ctor(); // 0x10001FB88
	private static void .cctor(); // 0x10001FC9C
	protected void Start(); // 0x10001FD18
	protected abstract void Init(); // 0
	protected abstract void RegisterCallback(); // 0
	protected abstract void RegisterEventListener(); // 0
	public override void UnityFireEvent(string jsonMessage); // 0x10001FF08
	public override RequestOutput GetUserData(); // 0x100020628
	private string GetUserDataJson(string jsonMessage); // 0x100020688
	protected abstract string NativeGetUserDataJson(string jsonMessage); // 0
	public override RequestOutput Purchase(SkuInput skuInput); // 0x10002094C
	private string PurchaseJson(string jsonMessage); // 0x100020A80
	protected abstract string NativePurchaseJson(string jsonMessage); // 0
	public override RequestOutput GetProductData(SkusInput skusInput); // 0x100020BF0
	private string GetProductDataJson(string jsonMessage); // 0x100020D24
	protected abstract string NativeGetProductDataJson(string jsonMessage); // 0
	public override RequestOutput GetPurchaseUpdates(ResetInput resetInput); // 0x100020E94
	private string GetPurchaseUpdatesJson(string jsonMessage); // 0x100020FC8
	protected abstract string NativeGetPurchaseUpdatesJson(string jsonMessage); // 0
	public override void NotifyFulfillment(NotifyFulfillmentInput notifyFulfillmentInput); // 0x100021138
	private string NotifyFulfillmentJson(string jsonMessage); // 0x1000212E4
	protected abstract string NativeNotifyFulfillmentJson(string jsonMessage); // 0
	public override void AddGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0x100021520
	public override void RemoveGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0x1000217F4
	public override void AddPurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0x100021C3C
	public override void RemovePurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0x100021F10
	public override void AddGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0x100022358
	public override void RemoveGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0x10002262C
	public override void AddGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0x100022A74
	public override void RemoveGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0x100022D48
}

// Namespace: com.amazon.device.iap.cpt
public abstract class AmazonIapV2Impl : MonoBehaviour, IAmazonIapV2 // TypeDefIndex: 3092
{
	// Fields
	public static AmazonLogger logger; // 0x0
	public static readonly Dictionary`2<string, IDelegator> callbackDictionary; // 0x8
	public static readonly object callbackLock; // 0x10
	public static readonly Dictionary`2<string, List`1<IDelegator>> eventListeners; // 0x18
	public static readonly object eventLock; // 0x20

	// Methods
	public void .ctor(); // 0x10001FC68
	private static void .cctor(); // 0x100023190
	public static void callback(string jsonMessage); // 0x100023284
	private static void callbackCaller(Dictionary`2<string, object> response, string callerId); // 0x1000235E8
	public static void FireEvent(string jsonMessage); // 0x10001FF6C
	public abstract RequestOutput GetUserData(); // 0
	public abstract RequestOutput Purchase(SkuInput skuInput); // 0
	public abstract RequestOutput GetProductData(SkusInput skusInput); // 0
	public abstract RequestOutput GetPurchaseUpdates(ResetInput resetInput); // 0
	public abstract void NotifyFulfillment(NotifyFulfillmentInput notifyFulfillmentInput); // 0
	public abstract void UnityFireEvent(string jsonMessage); // 0
	public abstract void AddGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0
	public abstract void AddPurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0
	public abstract void RemovePurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0
	public abstract void AddGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0
	public abstract void AddGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0
}

// Namespace: 
protected sealed class CallbackDelegate : MulticastDelegate // TypeDefIndex: 3093
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100023A94
	public virtual void Invoke(string jsonMessage); // 0x100023AA4
	public virtual IAsyncResult BeginInvoke(string jsonMessage, AsyncCallback callback, object object); // 0x100023B74
	public virtual void EndInvoke(IAsyncResult result); // 0x100023BC4
}

// Namespace: com.amazon.device.iap.cpt
public class AmazonIapV2UnityAndroid : AmazonIapV2Base // TypeDefIndex: 3094
{
	// Fields
	private static AmazonIapV2UnityAndroid _instance; // 0x0

	// Methods
	public void .ctor(); // 0x100023BD0
	private static string nativeRegisterCallbackGameObject(string name); // 0x100023C34
	private static string nativeInit(); // 0x100023C9C
	private static string nativeGetUserDataJson(string jsonMessage); // 0x100023D04
	private static string nativePurchaseJson(string jsonMessage); // 0x100023D6C
	private static string nativeGetProductDataJson(string jsonMessage); // 0x100023DD4
	private static string nativeGetPurchaseUpdatesJson(string jsonMessage); // 0x100023E3C
	private static string nativeNotifyFulfillmentJson(string jsonMessage); // 0x100023EA4
	public static AmazonIapV2UnityAndroid get_Instance(); // 0x100023F0C
	protected override void Init(); // 0x10002402C
	protected override void RegisterCallback(); // 0x100024030
	protected override void RegisterEventListener(); // 0x100024058
	protected override string NativeGetUserDataJson(string jsonMessage); // 0x100024080
	protected override string NativePurchaseJson(string jsonMessage); // 0x100024084
	protected override string NativeGetProductDataJson(string jsonMessage); // 0x100024088
	protected override string NativeGetPurchaseUpdatesJson(string jsonMessage); // 0x10002408C
	protected override string NativeNotifyFulfillmentJson(string jsonMessage); // 0x100024090
}

// Namespace: com.amazon.device.iap.cpt
public class AmazonLogger // TypeDefIndex: 3095
{
	// Fields
	private readonly string tag; // 0x10

	// Methods
	public void .ctor(string tag); // 0x10001FC70
	public void Debug(string msg); // 0x100020938
	public string getTag(); // 0x10002416C
}

// Namespace: com.amazon.device.iap.cpt
public sealed class AmazonUserData : Jsonable // TypeDefIndex: 3096
{
	// Fields
	private string <UserId>k__BackingField; // 0x10
	private string <Marketplace>k__BackingField; // 0x18

	// Methods
	public void .ctor(); // 0x100024174
	public string get_UserId(); // 0x100024184
	public void set_UserId(string value); // 0x10002418C
	public string get_Marketplace(); // 0x100024194
	public void set_Marketplace(string value); // 0x10002419C
	public string ToJson(); // 0x1000241A4
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x100024294
	public static AmazonUserData CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x1000243F8
	public static AmazonUserData CreateFromJson(string jsonMessage); // 0x100024698
	public static Dictionary`2<string, AmazonUserData> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x1000247D8
	public static List`1<AmazonUserData> ListFromJson(List`1<object> array); // 0x100024A84
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetProductDataResponse : Jsonable // TypeDefIndex: 3097
{
	// Fields
	private string <RequestId>k__BackingField; // 0x10
	private Dictionary`2<string, ProductData> <ProductDataMap>k__BackingField; // 0x18
	private List`1<string> <UnavailableSkus>k__BackingField; // 0x20
	private string <Status>k__BackingField; // 0x28
	private static Func`2<object, string> <>f__am$cache4; // 0x0

	// Methods
	public void .ctor(); // 0x100024CE4
	public string get_RequestId(); // 0x100024CEC
	public void set_RequestId(string value); // 0x100024CF4
	public Dictionary`2<string, ProductData> get_ProductDataMap(); // 0x100024CFC
	public void set_ProductDataMap(Dictionary`2<string, ProductData> value); // 0x100024D04
	public List`1<string> get_UnavailableSkus(); // 0x100024D0C
	public void set_UnavailableSkus(List`1<string> value); // 0x100024D14
	public string get_Status(); // 0x100024D1C
	public void set_Status(string value); // 0x100024D24
	public string ToJson(); // 0x100024D2C
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x100024E1C
	public static GetProductDataResponse CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x100024FE8
	public static GetProductDataResponse CreateFromJson(string jsonMessage); // 0x100025794
	public static Dictionary`2<string, GetProductDataResponse> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x1000258D4
	public static List`1<GetProductDataResponse> ListFromJson(List`1<object> array); // 0x100025B80
	private static string <CreateFromDictionary>m__0(object element); // 0x100025DE0
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetProductDataResponseDelegator : IDelegator // TypeDefIndex: 3098
{
	// Fields
	public readonly GetProductDataResponseDelegate responseDelegate; // 0x10

	// Methods
	public void .ctor(GetProductDataResponseDelegate responseDelegate); // 0x100022600
	public void ExecuteSuccess(); // 0x100025FA8
	public void ExecuteSuccess(Dictionary`2<string, object> objectDictionary); // 0x100025FAC
	public void ExecuteError(AmazonException e); // 0x100025FE0
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetPurchaseUpdatesResponse : Jsonable // TypeDefIndex: 3099
{
	// Fields
	private string <RequestId>k__BackingField; // 0x10
	private AmazonUserData <AmazonUserData>k__BackingField; // 0x18
	private List`1<PurchaseReceipt> <Receipts>k__BackingField; // 0x20
	private string <Status>k__BackingField; // 0x28
	private bool <HasMore>k__BackingField; // 0x30

	// Methods
	public void .ctor(); // 0x100025FE4
	public string get_RequestId(); // 0x100025FEC
	public void set_RequestId(string value); // 0x100025FF4
	public AmazonUserData get_AmazonUserData(); // 0x100025FFC
	public void set_AmazonUserData(AmazonUserData value); // 0x100026004
	public List`1<PurchaseReceipt> get_Receipts(); // 0x10002600C
	public void set_Receipts(List`1<PurchaseReceipt> value); // 0x100026014
	public string get_Status(); // 0x10002601C
	public void set_Status(string value); // 0x100026024
	public bool get_HasMore(); // 0x10002602C
	public void set_HasMore(bool value); // 0x100026034
	public string ToJson(); // 0x10002603C
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002612C
	public static GetPurchaseUpdatesResponse CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x100026354
	public static GetPurchaseUpdatesResponse CreateFromJson(string jsonMessage); // 0x100026A68
	public static Dictionary`2<string, GetPurchaseUpdatesResponse> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x100026BA8
	public static List`1<GetPurchaseUpdatesResponse> ListFromJson(List`1<object> array); // 0x100026E54
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetPurchaseUpdatesResponseDelegator : IDelegator // TypeDefIndex: 3100
{
	// Fields
	public readonly GetPurchaseUpdatesResponseDelegate responseDelegate; // 0x10

	// Methods
	public void .ctor(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0x100022D1C
	public void ExecuteSuccess(); // 0x1000271BC
	public void ExecuteSuccess(Dictionary`2<string, object> objectDictionary); // 0x1000271C0
	public void ExecuteError(AmazonException e); // 0x1000271F4
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetUserDataResponse : Jsonable // TypeDefIndex: 3101
{
	// Fields
	private string <RequestId>k__BackingField; // 0x10
	private AmazonUserData <AmazonUserData>k__BackingField; // 0x18
	private string <Status>k__BackingField; // 0x20

	// Methods
	public void .ctor(); // 0x1000271F8
	public string get_RequestId(); // 0x100027200
	public void set_RequestId(string value); // 0x100027208
	public AmazonUserData get_AmazonUserData(); // 0x100027210
	public void set_AmazonUserData(AmazonUserData value); // 0x100027218
	public string get_Status(); // 0x100027220
	public void set_Status(string value); // 0x100027228
	public string ToJson(); // 0x100027230
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x100027320
	public static GetUserDataResponse CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x1000274BC
	public static GetUserDataResponse CreateFromJson(string jsonMessage); // 0x1000277EC
	public static Dictionary`2<string, GetUserDataResponse> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002792C
	public static List`1<GetUserDataResponse> ListFromJson(List`1<object> array); // 0x100027BD8
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetUserDataResponseDelegator : IDelegator // TypeDefIndex: 3102
{
	// Fields
	public readonly GetUserDataResponseDelegate responseDelegate; // 0x10

	// Methods
	public void .ctor(GetUserDataResponseDelegate responseDelegate); // 0x1000217C8
	public void ExecuteSuccess(); // 0x100027F40
	public void ExecuteSuccess(Dictionary`2<string, object> objectDictionary); // 0x100027F44
	public void ExecuteError(AmazonException e); // 0x100027F78
}

// Namespace: com.amazon.device.iap.cpt
public interface IAmazonIapV2 // TypeDefIndex: 3103
{
	// Methods
	public abstract RequestOutput GetUserData(); // 0
	public abstract RequestOutput Purchase(SkuInput skuInput); // 0
	public abstract RequestOutput GetProductData(SkusInput skusInput); // 0
	public abstract RequestOutput GetPurchaseUpdates(ResetInput resetInput); // 0
	public abstract void NotifyFulfillment(NotifyFulfillmentInput notifyFulfillmentInput); // 0
	public abstract void UnityFireEvent(string jsonMessage); // 0
	public abstract void AddGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetUserDataResponseListener(GetUserDataResponseDelegate responseDelegate); // 0
	public abstract void AddPurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0
	public abstract void RemovePurchaseResponseListener(PurchaseResponseDelegate responseDelegate); // 0
	public abstract void AddGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetProductDataResponseListener(GetProductDataResponseDelegate responseDelegate); // 0
	public abstract void AddGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0
	public abstract void RemoveGetPurchaseUpdatesResponseListener(GetPurchaseUpdatesResponseDelegate responseDelegate); // 0
}

// Namespace: com.amazon.device.iap.cpt
public interface IDelegator // TypeDefIndex: 3104
{
	// Methods
	public abstract void ExecuteSuccess(); // 0
	public abstract void ExecuteSuccess(Dictionary`2<string, object> objDict); // 0
	public abstract void ExecuteError(AmazonException e); // 0
}

// Namespace: com.amazon.device.iap.cpt
public sealed class NotifyFulfillmentInput : Jsonable // TypeDefIndex: 3105
{
	// Fields
	private string <ReceiptId>k__BackingField; // 0x10
	private string <FulfillmentResult>k__BackingField; // 0x18

	// Methods
	public void .ctor(); // 0x10002A2DC
	public string get_ReceiptId(); // 0x10002A2E4
	public void set_ReceiptId(string value); // 0x10002A2EC
	public string get_FulfillmentResult(); // 0x10002A2F4
	public void set_FulfillmentResult(string value); // 0x10002A2FC
	public string ToJson(); // 0x1000211F4
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002A304
	public static NotifyFulfillmentInput CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002A464
	public static NotifyFulfillmentInput CreateFromJson(string jsonMessage); // 0x10002A704
	public static Dictionary`2<string, NotifyFulfillmentInput> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002A844
	public static List`1<NotifyFulfillmentInput> ListFromJson(List`1<object> array); // 0x10002AAF0
}

// Namespace: com.amazon.device.iap.cpt
public sealed class ProductData : Jsonable // TypeDefIndex: 3106
{
	// Fields
	private string <Sku>k__BackingField; // 0x10
	private string <ProductType>k__BackingField; // 0x18
	private string <Price>k__BackingField; // 0x20
	private string <Title>k__BackingField; // 0x28
	private string <Description>k__BackingField; // 0x30
	private string <SmallIconUrl>k__BackingField; // 0x38

	// Methods
	public void .ctor(); // 0x10002AD50
	public string get_Sku(); // 0x10002AD58
	public void set_Sku(string value); // 0x10002AD60
	public string get_ProductType(); // 0x10002AD68
	public void set_ProductType(string value); // 0x10002AD70
	public string get_Price(); // 0x10002AD78
	public void set_Price(string value); // 0x10002AD80
	public string get_Title(); // 0x10002AD88
	public void set_Title(string value); // 0x10002AD90
	public string get_Description(); // 0x10002AD98
	public void set_Description(string value); // 0x10002ADA0
	public string get_SmallIconUrl(); // 0x10002ADA8
	public void set_SmallIconUrl(string value); // 0x10002ADB0
	public string ToJson(); // 0x10002ADB8
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002AEA8
	public static ProductData CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002B088
	public static ProductData CreateFromJson(string jsonMessage); // 0x10002B618
	public static Dictionary`2<string, ProductData> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x100025444
	public static List`1<ProductData> ListFromJson(List`1<object> array); // 0x10002B758
}

// Namespace: com.amazon.device.iap.cpt
public sealed class PurchaseReceipt : Jsonable // TypeDefIndex: 3107
{
	// Fields
	private string <ReceiptId>k__BackingField; // 0x10
	private long <CancelDate>k__BackingField; // 0x18
	private long <PurchaseDate>k__BackingField; // 0x20
	private string <Sku>k__BackingField; // 0x28
	private string <ProductType>k__BackingField; // 0x30

	// Methods
	public void .ctor(); // 0x10002B9B8
	public string get_ReceiptId(); // 0x10002B9C0
	public void set_ReceiptId(string value); // 0x10002B9C8
	public long get_CancelDate(); // 0x10002B9D0
	public void set_CancelDate(long value); // 0x10002B9D8
	public long get_PurchaseDate(); // 0x10002B9E0
	public void set_PurchaseDate(long value); // 0x10002B9E8
	public string get_Sku(); // 0x10002B9F0
	public void set_Sku(string value); // 0x10002B9F8
	public string get_ProductType(); // 0x10002BA00
	public void set_ProductType(string value); // 0x10002BA08
	public string ToJson(); // 0x10002BA10
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002BB00
	public static PurchaseReceipt CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002BCF8
	public static PurchaseReceipt CreateFromJson(string jsonMessage); // 0x10002C10C
	public static Dictionary`2<string, PurchaseReceipt> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002C24C
	public static List`1<PurchaseReceipt> ListFromJson(List`1<object> array); // 0x100026770
}

// Namespace: com.amazon.device.iap.cpt
public sealed class PurchaseResponse : Jsonable // TypeDefIndex: 3108
{
	// Fields
	private string <RequestId>k__BackingField; // 0x10
	private AmazonUserData <AmazonUserData>k__BackingField; // 0x18
	private PurchaseReceipt <PurchaseReceipt>k__BackingField; // 0x20
	private string <Status>k__BackingField; // 0x28

	// Methods
	public void .ctor(); // 0x10002C4F8
	public string get_RequestId(); // 0x10002C500
	public void set_RequestId(string value); // 0x10002C508
	public AmazonUserData get_AmazonUserData(); // 0x10002C510
	public void set_AmazonUserData(AmazonUserData value); // 0x10002C518
	public PurchaseReceipt get_PurchaseReceipt(); // 0x10002C520
	public void set_PurchaseReceipt(PurchaseReceipt value); // 0x10002C528
	public string get_Status(); // 0x10002C530
	public void set_Status(string value); // 0x10002C538
	public string ToJson(); // 0x10002C540
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002C630
	public static PurchaseResponse CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002C804
	public static PurchaseResponse CreateFromJson(string jsonMessage); // 0x10002CBC4
	public static Dictionary`2<string, PurchaseResponse> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002CD04
	public static List`1<PurchaseResponse> ListFromJson(List`1<object> array); // 0x10002CFB0
}

// Namespace: com.amazon.device.iap.cpt
public sealed class PurchaseResponseDelegator : IDelegator // TypeDefIndex: 3109
{
	// Fields
	public readonly PurchaseResponseDelegate responseDelegate; // 0x10

	// Methods
	public void .ctor(PurchaseResponseDelegate responseDelegate); // 0x100021EE4
	public void ExecuteSuccess(); // 0x10002D318
	public void ExecuteSuccess(Dictionary`2<string, object> objectDictionary); // 0x10002D31C
	public void ExecuteError(AmazonException e); // 0x10002D350
}

// Namespace: com.amazon.device.iap.cpt
public sealed class RequestOutput : Jsonable // TypeDefIndex: 3110
{
	// Fields
	private string <RequestId>k__BackingField; // 0x10

	// Methods
	public void .ctor(); // 0x10002D354
	public string get_RequestId(); // 0x10002D35C
	public void set_RequestId(string value); // 0x10002D364
	public string ToJson(); // 0x10002D36C
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002D45C
	public static RequestOutput CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002D594
	public static RequestOutput CreateFromJson(string jsonMessage); // 0x1000207F8
	public static Dictionary`2<string, RequestOutput> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002D778
	public static List`1<RequestOutput> ListFromJson(List`1<object> array); // 0x10002DA24
}

// Namespace: com.amazon.device.iap.cpt
public sealed class ResetInput : Jsonable // TypeDefIndex: 3111
{
	// Fields
	private bool <Reset>k__BackingField; // 0x10

	// Methods
	public void .ctor(); // 0x10002DC84
	public bool get_Reset(); // 0x10002DC8C
	public void set_Reset(bool value); // 0x10002DC94
	public string ToJson(); // 0x100020ED8
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002DC9C
	public static ResetInput CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002DDF8
	public static ResetInput CreateFromJson(string jsonMessage); // 0x10002DF70
	public static Dictionary`2<string, ResetInput> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002E0B0
	public static List`1<ResetInput> ListFromJson(List`1<object> array); // 0x10002E35C
}

// Namespace: com.amazon.device.iap.cpt
public sealed class SkuInput : Jsonable // TypeDefIndex: 3112
{
	// Fields
	private string <Sku>k__BackingField; // 0x10

	// Methods
	public void .ctor(); // 0x10002E5BC
	public string get_Sku(); // 0x10002E5C4
	public void set_Sku(string value); // 0x10002E5CC
	public string ToJson(); // 0x100020990
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002E5D4
	public static SkuInput CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002E70C
	public static SkuInput CreateFromJson(string jsonMessage); // 0x10002E8F0
	public static Dictionary`2<string, SkuInput> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002EA30
	public static List`1<SkuInput> ListFromJson(List`1<object> array); // 0x10002ECDC
}

// Namespace: com.amazon.device.iap.cpt
public sealed class SkusInput : Jsonable // TypeDefIndex: 3113
{
	// Fields
	private List`1<string> <Skus>k__BackingField; // 0x10
	private static Func`2<object, string> <>f__am$cache1; // 0x0

	// Methods
	public void .ctor(); // 0x10002EF3C
	public List`1<string> get_Skus(); // 0x10002EF44
	public void set_Skus(List`1<string> value); // 0x10002EF4C
	public string ToJson(); // 0x100020C34
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002EF54
	public static SkusInput CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002F08C
	public static SkusInput CreateFromJson(string jsonMessage); // 0x10002F2CC
	public static Dictionary`2<string, SkusInput> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002F40C
	public static List`1<SkusInput> ListFromJson(List`1<object> array); // 0x10002F6B8
	private static string <CreateFromDictionary>m__1(object element); // 0x10002F918
}

// Namespace: com.amazon.device.iap.cpt
public sealed class SubscriptionExpiredEvent : Jsonable // TypeDefIndex: 3114
{
	// Fields
	private string <Sku>k__BackingField; // 0x10

	// Methods
	public void .ctor(); // 0x10002F9D8
	public string get_Sku(); // 0x10002F9E0
	public void set_Sku(string value); // 0x10002F9E8
	public string ToJson(); // 0x10002F9F0
	public override Dictionary`2<string, object> GetObjectDictionary(); // 0x10002FAE0
	public static SubscriptionExpiredEvent CreateFromDictionary(Dictionary`2<string, object> jsonMap); // 0x10002FC18
	public static SubscriptionExpiredEvent CreateFromJson(string jsonMessage); // 0x10002FDFC
	public static Dictionary`2<string, SubscriptionExpiredEvent> MapFromJson(Dictionary`2<string, object> jsonMap); // 0x10002FF3C
	public static List`1<SubscriptionExpiredEvent> ListFromJson(List`1<object> array); // 0x1000301E8
}

// Namespace: Analytics
public static class FlurryIOS // TypeDefIndex: 3115
{
	// Methods
	private static extern void StartSessionImpl(string apiKey); // 0x10001F0F4
	private static extern bool ActiveSessionExistsImpl(); // 0x10001F120
	private static extern void PauseBackgroundSessionImpl(); // 0x10001F13C
	private static extern void AddOriginImplA(string originName, string originVersion); // 0x10001F140
	private static extern void AddOriginImplB(string originName, string originVersion, string keys, string values); // 0x10001F18C
	private static extern void SetAppVersionImpl(string version); // 0x10001F218
	private static extern string GetFlurryAgentVersionImpl(); // 0x10001F244
	private static extern void SetShowErrorInLogEnabledImpl(bool value); // 0x10001F278
	private static extern void SetDebugLogEnabledImpl(bool value); // 0x10001F280
	private static extern void SetLogLevelImpl(int level); // 0x10001F288
	private static extern void SetSessionContinueSecondsImpl(int seconds); // 0x10001F290
	private static extern void SetCrashReportingEnabledImpl(bool value); // 0x10001F298
	private static extern int LogEventImplA(string eventName); // 0x10001F2A0
	private static extern int LogEventImplB(string eventName, string keys, string values); // 0x10001F2D8
	private static extern void LogErrorImpl(string errorID, string message, string exceptionName, string exceptionReason); // 0x10001F354
	private static extern int LogEventImplC(string eventName, bool timed); // 0x10001F3E0
	private static extern int LogEventImplD(string eventName, string keys, string values, bool timed); // 0x10001F420
	private static extern void EndTimedEventImpl(string eventName, string keys, string values); // 0x10001F4A4
	private static extern void LogPageViewImpl(); // 0x10001F514
	private static extern void SetUserIdImpl(string userID); // 0x10001F518
	private static extern void SetAgeImpl(int age); // 0x10001F544
	private static extern void SetGenderImpl(string gender); // 0x10001F54C
	private static extern void SetLatitudeImpl(double latitude, double longitude, float horizontalAccuracy, float verticalAccuracy); // 0x10001F578
	private static extern void SetSessionReportsOnCloseEnabledImpl(bool sendSessionReportsOnClose); // 0x10001F57C
	private static extern void SetSessionReportsOnPauseEnabledImpl(bool setSessionReportsOnPauseEnabled); // 0x10001F584
	private static extern void SetBackgroundSessionEnabledImpl(bool setBackgroundSessionEnabled); // 0x10001F58C
	private static extern void SetEventLoggingEnabledImpl(bool value); // 0x10001F594
	public static void StartSession(string apiKey); // 0x10001F59C
	public static bool ActiveSessionExists(); // 0x10001F5C8
	public static void PauseBackgroundSession(); // 0x10001F5E4
	public static void AddOrigin(string originName, string originVersion); // 0x10001F5E8
	public static void AddOrigin(string originName, string originVersion, Dictionary`2<string, string> parameters); // 0x10001F5EC
	public static void SetAppVersion(string version); // 0x10001F670
	public static string GetFlurryAgentVersion(); // 0x10001F69C
	public static void SetShowErrorInLogEnabled(bool value); // 0x10001F6D0
	public static void SetDebugLogEnabled(bool value); // 0x10001F6D8
	public static void SetSessionContinueSeconds(int seconds); // 0x10001F6E0
	public static void SetCrashReportingEnabled(bool value); // 0x10001F6E8
	public static void LogEvent(string eventName); // 0x10001F6F0
	public static void LogEvent(string eventName, Dictionary`2<string, string> parameters); // 0x10001F71C
	public static void LogAllPageViewsForTarget(IntPtr target); // 0x10001FA1C
	public static void StopLogPageViewsForTarget(IntPtr target); // 0x10001FA78
	public static void LogPageView(); // 0x10001FACC
	public static void SetUserId(string userID); // 0x10001FAD0
	public static void SetAge(int age); // 0x10001FAFC
	public static void SetGender(string gender); // 0x10001FB04
	public static void SetLatitude(double latitude, double longitude, float horizontalAccuracy, float verticalAccuracy); // 0x10001FB30
	public static void SetSessionReportsOnCloseEnabled(bool sendSessionReportsOnClose); // 0x10001FB34
	public static void SetSessionReportsOnPauseEnabled(bool setSessionReportsOnPauseEnabled); // 0x10001FB3C
	public static void SetBackgroundSessionEnabled(bool setBackgroundSessionEnabled); // 0x10001FB44
	public static void SetEventLoggingEnabled(bool value); // 0x10001FB4C
	private static void ToKeyValue(Dictionary`2<string, string> dictionary, out string keys, out string values); // 0x10001F764
}

// Namespace: OnePF
public class OpenIAB_Android // TypeDefIndex: 3116
{
	// Fields
	public static readonly string STORE_GOOGLE; // 0x0
	public static readonly string STORE_AMAZON; // 0x8
	public static readonly string STORE_SAMSUNG; // 0x10
	public static readonly string STORE_NOKIA; // 0x18
	public static readonly string STORE_SKUBIT; // 0x20
	public static readonly string STORE_SKUBIT_TEST; // 0x28
	public static readonly string STORE_YANDEX; // 0x30
	public static readonly string STORE_APPLAND; // 0x38
	public static readonly string STORE_SLIDEME; // 0x40
	public static readonly string STORE_APTOIDE; // 0x48

	// Methods
	public void .ctor(); // 0x10003702C
	private static void .cctor(); // 0x100037034
}

// Namespace: OnePF
public interface IOpenIAB // TypeDefIndex: 3117
{
	// Methods
	public abstract void init(Options options); // 0
	public abstract void mapSku(string sku, string storeName, string storeSku); // 0
	public abstract void unbindService(); // 0
	public abstract bool areSubscriptionsSupported(); // 0
	public abstract void queryInventory(); // 0
	public abstract void queryInventory(string[] inAppSkus); // 0
	public abstract void purchaseProduct(string sku, optional string developerPayload); // 0
	public abstract void purchaseSubscription(string sku, optional string developerPayload); // 0
	public abstract void consumeProduct(Purchase purchase); // 0
	public abstract void restoreTransactions(); // 0
	public abstract bool isDebugLog(); // 0
	public abstract void enableDebugLogging(bool enabled); // 0
	public abstract void enableDebugLogging(bool enabled, string tag); // 0
}

// Namespace: OnePF
public class Inventory // TypeDefIndex: 3118
{
	// Fields
	private Dictionary`2<string, SkuDetails> _skuMap; // 0x10
	private Dictionary`2<string, Purchase> _purchaseMap; // 0x18

	// Methods
	public void .ctor(string json); // 0x100030ED8
	public void .ctor(); // 0x100031970
	public override string ToString(); // 0x100031A08
	public SkuDetails GetSkuDetails(string sku); // 0x100032298
	public Purchase GetPurchase(string sku); // 0x10003232C
	public bool HasPurchase(string sku); // 0x1000323C0
	public bool HasDetails(string sku); // 0x100032428
	public void ErasePurchase(string sku); // 0x100032490
	public List`1<string> GetAllOwnedSkus(); // 0x10003251C
	public List`1<string> GetAllOwnedSkus(string itemType); // 0x10003258C
	public List`1<Purchase> GetAllPurchases(); // 0x10003282C
	public List`1<SkuDetails> GetAllAvailableSkus(); // 0x10003289C
	public void AddSkuDetails(SkuDetails d); // 0x10003290C
	public void AddPurchase(Purchase p); // 0x100032984
}

// Namespace: OnePF
public class JSON // TypeDefIndex: 3119
{
	// Fields
	public Dictionary`2<string, object> fields; // 0x10

	// Methods
	public void .ctor(); // 0x1000329F4
	public void .ctor(string jsonString); // 0x100031554
	public object get_Item(string fieldName); // 0x100032A94
	public void set_Item(string fieldName, object value); // 0x100032B30
	public string ToString(string fieldName); // 0x100032BE8
	public int ToInt(string fieldName); // 0x100032CE0
	public long ToLong(string fieldName); // 0x100032DAC
	public float ToFloat(string fieldName); // 0x100032E7C
	public bool ToBoolean(string fieldName); // 0x100032F4C
	public string get_serialized(); // 0x100033018
	public void set_serialized(string value); // 0x100032A64
	public JSON ToJSON(string fieldName); // 0x100033034
	public T[] ToArray(string fieldName); // 0
	public static Vector2 op_Implicit(JSON value); // 0x1000330F8
	public static JSON op_Explicit(Vector2 value); // 0x1000331F0
	public static Vector3 op_Implicit(JSON value); // 0x1000332C0
	public static JSON op_Explicit(Vector3 value); // 0x1000333D8
	public static Quaternion op_Implicit(JSON value); // 0x1000334DC
	public static JSON op_Explicit(Quaternion value); // 0x100033624
	public static Color op_Implicit(JSON value); // 0x100033754
	public static JSON op_Explicit(Color value); // 0x10003389C
	public static Color32 op_Implicit(JSON value); // 0x1000339CC
	public static JSON op_Explicit(Color32 value); // 0x100033B08
	public static Rect op_Implicit(JSON value); // 0x100033C38
	public static JSON op_Explicit(Rect value); // 0x100033D78
}

// Namespace: 
private sealed class _JSON // TypeDefIndex: 3120
{
	// Methods
	public void .ctor(); // 0x100033EC0
	public static JSON Deserialize(string json); // 0x100033024
	public static string Serialize(JSON obj); // 0x100033020
}

// Namespace: 
private sealed class Parser : IDisposable // TypeDefIndex: 3121
{
	// Fields
	private const string WHITE_SPACE = " 	
"; // 0x0
	private const string WORD_BREAK = " 	
{}[],:""; // 0x0
	private StringReader json; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x0

	// Methods
	private void .ctor(string jsonString); // 0x1000340F0
	public static JSON Parse(string jsonString); // 0x100033EC8
	public void Dispose(); // 0x100034194
	private JSON ParseObject(); // 0x1000341C8
	private List`1<object> ParseArray(); // 0x1000349C4
	private object ParseValue(); // 0x10003416C
	private object ParseByToken(TOKEN token); // 0x100034AD8
	private string ParseString(); // 0x1000346B4
	private object ParseNumber(); // 0x100034C0C
	private void EatWhitespace(); // 0x100034E7C
	private char get_PeekChar(); // 0x100034F54
	private char get_NextChar(); // 0x100034CDC
	private string get_NextWord(); // 0x100034D84
	private TOKEN get_NextToken(); // 0x100034354
}

// Namespace: 
private sealed class TOKEN : Enum // TypeDefIndex: 3122
{
	// Fields
	public int value__; // 0x10
	public const TOKEN NONE = 0; // 0x0
	public const TOKEN CURLY_OPEN = 1; // 0x0
	public const TOKEN CURLY_CLOSE = 2; // 0x0
	public const TOKEN SQUARED_OPEN = 3; // 0x0
	public const TOKEN SQUARED_CLOSE = 4; // 0x0
	public const TOKEN COLON = 5; // 0x0
	public const TOKEN COMMA = 6; // 0x0
	public const TOKEN STRING = 7; // 0x0
	public const TOKEN NUMBER = 8; // 0x0
	public const TOKEN TRUE = 9; // 0x0
	public const TOKEN FALSE = 10; // 0x0
	public const TOKEN NULL = 11; // 0x0

}

// Namespace: 
private sealed class Serializer // TypeDefIndex: 3123
{
	// Fields
	private StringBuilder builder; // 0x10

	// Methods
	private void .ctor(); // 0x100034FFC
	public static string Serialize(JSON obj); // 0x100034078
	private void SerializeValue(object value); // 0x100035068
	private void SerializeObject(JSON obj); // 0x1000355A4
	private void SerializeDictionary(IDictionary obj); // 0x1000355BC
	private void SerializeArray(IList anArray); // 0x100035ABC
	private void SerializeString(string str); // 0x100035274
	private void SerializeOther(object value); // 0x100035E38
}

// Namespace: OnePF
public class OpenIAB // TypeDefIndex: 3124
{
	// Fields
	private static IOpenIAB _billing; // 0x0

	// Methods
	public void .ctor(); // 0x100035FE0
	private static void .cctor(); // 0x100035FE8
	public static GameObject get_EventManager(); // 0x100036090
	public static void mapSku(string sku, string storeName, string storeSku); // 0x100036148
	public static void init(Options options); // 0x100036288
	public static void unbindService(); // 0x1000363AC
	public static bool areSubscriptionsSupported(); // 0x1000364C4
	public static void queryInventory(); // 0x1000365DC
	public static void queryInventory(string[] skus); // 0x1000366F4
	public static void purchaseProduct(string sku, optional string developerPayload); // 0x10003681C
	public static void purchaseSubscription(string sku, optional string developerPayload); // 0x10003694C
	public static void consumeProduct(Purchase purchase); // 0x100036A7C
	public static void restoreTransactions(); // 0x100036BA4
	public static bool isDebugLog(); // 0x100036CBC
	public static void enableDebugLogging(bool enabled); // 0x100036DD4
	public static void enableDebugLogging(bool enabled, string tag); // 0x100036EFC
}

// Namespace: 
public class OpenIABEventManager : MonoBehaviour // TypeDefIndex: 3125
{
	// Fields
	private static Action billingSupportedEvent; // 0x0
	private static Action`1<string> billingNotSupportedEvent; // 0x8
	private static Action`1<Inventory> queryInventorySucceededEvent; // 0x10
	private static Action`1<string> queryInventoryFailedEvent; // 0x18
	private static Action`1<Purchase> purchaseSucceededEvent; // 0x20
	private static Action`2<int, string> purchaseFailedEvent; // 0x28
	private static Action`1<Purchase> consumePurchaseSucceededEvent; // 0x30
	private static Action`1<string> consumePurchaseFailedEvent; // 0x38
	private static Action`1<string> transactionRestoredEvent; // 0x40
	private static Action`1<string> restoreFailedEvent; // 0x48
	private static Action restoreSucceededEvent; // 0x50

	// Methods
	public void .ctor(); // 0x100038840
	public static void add_billingSupportedEvent(Action value); // 0x100038848
	public static void remove_billingSupportedEvent(Action value); // 0x100038934
	public static void add_billingNotSupportedEvent(Action`1<string> value); // 0x100038A20
	public static void remove_billingNotSupportedEvent(Action`1<string> value); // 0x100038B0C
	public static void add_queryInventorySucceededEvent(Action`1<Inventory> value); // 0x100038BF8
	public static void remove_queryInventorySucceededEvent(Action`1<Inventory> value); // 0x100038CE4
	public static void add_queryInventoryFailedEvent(Action`1<string> value); // 0x100038DD0
	public static void remove_queryInventoryFailedEvent(Action`1<string> value); // 0x100038EBC
	public static void add_purchaseSucceededEvent(Action`1<Purchase> value); // 0x100038FA8
	public static void remove_purchaseSucceededEvent(Action`1<Purchase> value); // 0x100039094
	public static void add_purchaseFailedEvent(Action`2<int, string> value); // 0x100039180
	public static void remove_purchaseFailedEvent(Action`2<int, string> value); // 0x10003926C
	public static void add_consumePurchaseSucceededEvent(Action`1<Purchase> value); // 0x100039358
	public static void remove_consumePurchaseSucceededEvent(Action`1<Purchase> value); // 0x100039444
	public static void add_consumePurchaseFailedEvent(Action`1<string> value); // 0x100039530
	public static void remove_consumePurchaseFailedEvent(Action`1<string> value); // 0x10003961C
	public static void add_transactionRestoredEvent(Action`1<string> value); // 0x100039708
	public static void remove_transactionRestoredEvent(Action`1<string> value); // 0x1000397F4
	public static void add_restoreFailedEvent(Action`1<string> value); // 0x1000398E0
	public static void remove_restoreFailedEvent(Action`1<string> value); // 0x1000399CC
	public static void add_restoreSucceededEvent(Action value); // 0x100039AB8
	public static void remove_restoreSucceededEvent(Action value); // 0x100039BA4
	private void Awake(); // 0x100039C90
	private void OnBillingSupported(string empty); // 0x100039D7C
	private void OnBillingNotSupported(string error); // 0x100039DE0
	private void OnQueryInventorySucceeded(string json); // 0x100039E54
	private void OnQueryInventoryFailed(string error); // 0x100039F04
	private void OnPurchaseSucceeded(string json); // 0x100039F78
	private void OnPurchaseFailed(string error); // 0x10003A018
	private void OnConsumePurchaseSucceeded(string json); // 0x10003A090
	private void OnConsumePurchaseFailed(string error); // 0x10003A130
	public void OnPurchaseRestored(string sku); // 0x10003A1A4
	public void OnRestoreFailed(string error); // 0x10003A218
	public void OnRestoreFinished(string message); // 0x10003A28C
}

// Namespace: OnePF
public class Options // TypeDefIndex: 3126
{
	// Fields
	public const int DISCOVER_TIMEOUT_MS = 5000; // 0x0
	public const int INVENTORY_CHECK_TIMEOUT_MS = 10000; // 0x0
	public int discoveryTimeoutMs; // 0x10
	public bool checkInventory; // 0x14
	public int checkInventoryTimeoutMs; // 0x18
	public OptionsVerifyMode verifyMode; // 0x1C
	public SearchStrategy storeSearchStrategy; // 0x20
	public Dictionary`2<string, string> storeKeys; // 0x28
	public string[] prefferedStoreNames; // 0x30
	public string[] availableStoreNames; // 0x38
	public int samsungCertificationRequestCode; // 0x40

	// Methods
	public void .ctor(); // 0x100037CAC
}

// Namespace: OnePF
public sealed class OptionsVerifyMode : Enum // TypeDefIndex: 3127
{
	// Fields
	public int value__; // 0x10
	public const OptionsVerifyMode VERIFY_EVERYTHING = 0; // 0x0
	public const OptionsVerifyMode VERIFY_SKIP = 1; // 0x0
	public const OptionsVerifyMode VERIFY_ONLY_KNOWN = 2; // 0x0

}

// Namespace: OnePF
public class Purchase // TypeDefIndex: 3128
{
	// Fields
	private string <ItemType>k__BackingField; // 0x10
	private string <OrderId>k__BackingField; // 0x18
	private string <PackageName>k__BackingField; // 0x20
	private string <Sku>k__BackingField; // 0x28
	private long <PurchaseTime>k__BackingField; // 0x30
	private int <PurchaseState>k__BackingField; // 0x38
	private string <DeveloperPayload>k__BackingField; // 0x40
	private string <Token>k__BackingField; // 0x48
	private string <OriginalJson>k__BackingField; // 0x50
	private string <Signature>k__BackingField; // 0x58
	private string <AppstoreName>k__BackingField; // 0x60
	private string <Receipt>k__BackingField; // 0x68

	// Methods
	public void .ctor(); // 0x100037D7C
	public void .ctor(string jsonString); // 0x100037D84
	public void .ctor(JSON json); // 0x100031670
	public string get_ItemType(); // 0x10003281C
	public void set_ItemType(string value); // 0x100037F20
	public string get_OrderId(); // 0x100037F80
	public void set_OrderId(string value); // 0x100037F28
	public string get_PackageName(); // 0x100037F88
	public void set_PackageName(string value); // 0x100037F30
	public string get_Sku(); // 0x100032824
	public void set_Sku(string value); // 0x100037F38
	public long get_PurchaseTime(); // 0x100037F90
	public void set_PurchaseTime(long value); // 0x100037F40
	public int get_PurchaseState(); // 0x100037F98
	public void set_PurchaseState(int value); // 0x100037F48
	public string get_DeveloperPayload(); // 0x100037FA0
	public void set_DeveloperPayload(string value); // 0x100037F50
	public string get_Token(); // 0x100037FA8
	public void set_Token(string value); // 0x100037F58
	public string get_OriginalJson(); // 0x100037FB0
	public void set_OriginalJson(string value); // 0x100037F60
	public string get_Signature(); // 0x100037FB8
	public void set_Signature(string value); // 0x100037F68
	public string get_AppstoreName(); // 0x100037FC0
	public void set_AppstoreName(string value); // 0x100037F70
	public string get_Receipt(); // 0x100037FC8
	public void set_Receipt(string value); // 0x100037F78
	public static Purchase CreateFromSku(string sku); // 0x100037FD0
	public static Purchase CreateFromSku(string sku, string developerPayload); // 0x100038040
	public override string ToString(); // 0x100038218
	private static void AddIOSHack(Purchase p); // 0x1000380C4
	public string Serialize(); // 0x100037990
}

// Namespace: OnePF
public sealed class SearchStrategy : Enum // TypeDefIndex: 3129
{
	// Fields
	public int value__; // 0x10
	public const SearchStrategy INSTALLER = 0; // 0x0
	public const SearchStrategy BEST_FIT = 1; // 0x0
	public const SearchStrategy INSTALLER_THEN_BEST_FIT = 2; // 0x0

}

// Namespace: OnePF
public class SkuDetails // TypeDefIndex: 3130
{
	// Fields
	private string <ItemType>k__BackingField; // 0x10
	private string <Sku>k__BackingField; // 0x18
	private string <Type>k__BackingField; // 0x20
	private string <Price>k__BackingField; // 0x28
	private string <Title>k__BackingField; // 0x30
	private string <Description>k__BackingField; // 0x38
	private string <Json>k__BackingField; // 0x40
	private string <CurrencyCode>k__BackingField; // 0x48
	private string <PriceValue>k__BackingField; // 0x50

	// Methods
	public void .ctor(); // 0x1000382A8
	public void .ctor(string jsonString); // 0x1000382B0
	public void .ctor(JSON json); // 0x100031808
	public string get_ItemType(); // 0x1000385B4
	public void set_ItemType(string value); // 0x100038408
	public string get_Sku(); // 0x10003297C
	public void set_Sku(string value); // 0x100038410
	public string get_Type(); // 0x1000385BC
	public void set_Type(string value); // 0x100038418
	public string get_Price(); // 0x1000385C4
	public void set_Price(string value); // 0x100038420
	public string get_Title(); // 0x1000385CC
	public void set_Title(string value); // 0x100038428
	public string get_Description(); // 0x1000385D4
	public void set_Description(string value); // 0x100038430
	public string get_Json(); // 0x1000385DC
	public void set_Json(string value); // 0x100038438
	public string get_CurrencyCode(); // 0x1000385E4
	public void set_CurrencyCode(string value); // 0x100038440
	public string get_PriceValue(); // 0x1000385EC
	public void set_PriceValue(string value); // 0x100038448
	private void ParseFromJson(); // 0x100038450
	public override string ToString(); // 0x1000385F4
}

// Namespace: OnePF
public class OpenIAB_WP8 // TypeDefIndex: 3131
{
	// Fields
	public static readonly string STORE; // 0x0

	// Methods
	public void .ctor(); // 0x100037C48
	private static void .cctor(); // 0x100037C50
}

// Namespace: OnePF
public class OpenIAB_iOS : IOpenIAB // TypeDefIndex: 3132
{
	// Fields
	public static readonly string STORE; // 0x0
	private static Dictionary`2<string, string> _sku2storeSkuMappings; // 0x8
	private static Dictionary`2<string, string> _storeSku2skuMappings; // 0x10

	// Methods
	public void .ctor(); // 0x100036088
	private static void .cctor(); // 0x1000370D8
	private static extern void AppStore_requestProducts(string[] skus, int skusNumber); // 0x10003718C
	private static extern void AppStore_startPurchase(string sku); // 0x100037208
	private static extern void AppStore_restorePurchases(); // 0x100037234
	private static extern bool Inventory_hasPurchase(string sku); // 0x100037238
	private static extern void Inventory_query(); // 0x100037274
	private static extern void Inventory_removePurchase(string sku); // 0x100037278
	private bool IsDevice(); // 0x1000372A4
	public void init(Options options); // 0x1000372C8
	public void init(optional Dictionary`2<string, string> storeKeys); // 0x10003730C
	public void mapSku(string sku, string storeName, string storeSku); // 0x1000374F0
	public void unbindService(); // 0x100037620
	public bool areSubscriptionsSupported(); // 0x100037624
	public void queryInventory(); // 0x10003762C
	public void queryInventory(string[] skus); // 0x1000376A8
	public void purchaseProduct(string sku, optional string developerPayload); // 0x1000376AC
	public void purchaseSubscription(string sku, optional string developerPayload); // 0x1000377C0
	public void consumeProduct(Purchase purchase); // 0x1000377C4
	public void restoreTransactions(); // 0x100037BDC
	public bool isDebugLog(); // 0x100037C38
	public void enableDebugLogging(bool enabled); // 0x100037C40
	public void enableDebugLogging(bool enabled, string tag); // 0x100037C44
	public static string StoreSku2Sku(string storeSku); // 0x1000315EC
	public static string Sku2StoreSku(string sku); // 0x100037B58
}

// Namespace: SimpleJSON
public sealed class JSONBinaryTag : Enum // TypeDefIndex: 3133
{
	// Fields
	public int value__; // 0x10
	public const JSONBinaryTag Array = 1; // 0x0
	public const JSONBinaryTag Class = 2; // 0x0
	public const JSONBinaryTag Value = 3; // 0x0
	public const JSONBinaryTag IntValue = 4; // 0x0
	public const JSONBinaryTag DoubleValue = 5; // 0x0
	public const JSONBinaryTag BoolValue = 6; // 0x0
	public const JSONBinaryTag FloatValue = 7; // 0x0

}

// Namespace: SimpleJSON
public class JSONNode // TypeDefIndex: 3134
{
	// Methods
	public void .ctor(); // 0x10003AE5C
	public virtual void Add(string aKey, JSONNode aItem); // 0x10003F974
	public virtual JSONNode get_Item(int aIndex); // 0x10003F978
	public virtual void set_Item(int aIndex, JSONNode value); // 0x10003F980
	public virtual JSONNode get_Item(string aKey); // 0x10003F984
	public virtual void set_Item(string aKey, JSONNode value); // 0x10003F98C
	public virtual string get_Value(); // 0x10003F990
	public virtual void set_Value(string value); // 0x10003F9F8
	public virtual int get_Count(); // 0x10003F9FC
	public virtual void Add(JSONNode aItem); // 0x10003FA04
	public virtual JSONNode Remove(string aKey); // 0x10003FAB4
	public virtual JSONNode Remove(int aIndex); // 0x10003FABC
	public virtual JSONNode Remove(JSONNode aNode); // 0x10003FAC4
	public virtual IEnumerable`1<JSONNode> get_Childs(); // 0x10003FACC
	public IEnumerable`1<JSONNode> get_DeepChilds(); // 0x10003FB40
	public override string ToString(); // 0x10003FBBC
	public virtual string ToString(string aPrefix); // 0x10003FC04
	public virtual int get_AsInt(); // 0x10003FC4C
	public virtual void set_AsInt(int value); // 0x10003FCC0
	public virtual float get_AsFloat(); // 0x10003FD28
	public virtual void set_AsFloat(float value); // 0x10003FDA0
	public virtual double get_AsDouble(); // 0x10003FE08
	public virtual void set_AsDouble(double value); // 0x10003FE80
	public virtual bool get_AsBool(); // 0x10003FEE8
	public virtual void set_AsBool(bool value); // 0x100040008
	public virtual JSONArray get_AsArray(); // 0x1000400AC
	public virtual JSONClass get_AsObject(); // 0x10004012C
	public override bool Equals(object obj); // 0x1000401AC
	public override int GetHashCode(); // 0x10003F418
	internal static string Escape(string aText); // 0x10003D26C
	public static JSONNode Parse(string aJSON); // 0x10003A2F4
	public virtual void Serialize(BinaryWriter aWriter); // 0x100040244
	public void SaveToStream(Stream aData); // 0x100040248
	public void SaveToCompressedStream(Stream aData); // 0x1000402E8
	public void SaveToCompressedFile(string aFileName); // 0x100040348
	public string SaveToCompressedBase64(); // 0x1000403A8
	public void SaveToFile(string aFileName); // 0x100040408
	public string SaveToBase64(); // 0x1000405D8
	public static JSONNode Deserialize(BinaryReader aReader); // 0x1000407CC
	public static JSONNode LoadFromCompressedFile(string aFileName); // 0x100040BF8
	public static JSONNode LoadFromCompressedStream(Stream aData); // 0x100040C58
	public static JSONNode LoadFromCompressedBase64(string aBase64); // 0x100040CB8
	public static JSONNode LoadFromStream(Stream aData); // 0x100040D18
	public static JSONNode LoadFromFile(string aFileName); // 0x100040E78
	public static JSONNode LoadFromBase64(string aBase64); // 0x100040FCC
	public static JSONNode op_Implicit(string s); // 0x1000401E0
	public static string op_Implicit(JSONNode d); // 0x10004109C
	public static bool op_Equality(JSONNode a, object b); // 0x10003E6F8
	public static bool op_Inequality(JSONNode a, object b); // 0x1000401C8
}

// Namespace: 
private sealed class <>c__Iterator0 : IDisposable, IEnumerator, IEnumerable, IEnumerable`1<JSONNode>, IEnumerator`1<JSONNode> // TypeDefIndex: 3135
{
	// Fields
	internal int $PC; // 0x10
	internal JSONNode $current; // 0x18

	// Methods
	public void .ctor(); // 0x10003FB38
	private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.get_Current(); // 0x100041110
	private object System.Collections.IEnumerator.get_Current(); // 0x100041118
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100041120
	private IEnumerator`1<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator(); // 0x100041124
	public bool MoveNext(); // 0x1000411A4
	public void Dispose(); // 0x1000411B4
	public void Reset(); // 0x1000411C0
}

// Namespace: 
private sealed class <>c__Iterator1 : IDisposable, IEnumerator, IEnumerable, IEnumerable`1<JSONNode>, IEnumerator`1<JSONNode> // TypeDefIndex: 3136
{
	// Fields
	internal IEnumerator`1<JSONNode> <$s_61>__0; // 0x10
	internal JSONNode <C>__1; // 0x18
	internal IEnumerator`1<JSONNode> <$s_62>__2; // 0x20
	internal JSONNode <D>__3; // 0x28
	internal int $PC; // 0x30
	internal JSONNode $current; // 0x38
	internal JSONNode <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x10003FBB4
	private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.get_Current(); // 0x100041214
	private object System.Collections.IEnumerator.get_Current(); // 0x10004121C
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x100041224
	private IEnumerator`1<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator(); // 0x100041228
	public bool MoveNext(); // 0x1000412BC
	public void Dispose(); // 0x1000419C8
	public void Reset(); // 0x100041BB8
}

// Namespace: SimpleJSON
public class JSONArray : JSONNode, IEnumerable // TypeDefIndex: 3137
{
	// Fields
	private List`1<JSONNode> m_List; // 0x10

	// Methods
	public void .ctor(); // 0x10003ADEC
	public override JSONNode get_Item(int aIndex); // 0x10003AE64
	public override void set_Item(int aIndex, JSONNode value); // 0x10003AF50
	public override JSONNode get_Item(string aKey); // 0x10003B00C
	public override void set_Item(string aKey, JSONNode value); // 0x10003B070
	public override int get_Count(); // 0x10003B0D8
	public override void Add(string aKey, JSONNode aItem); // 0x10003B130
	public override JSONNode Remove(int aIndex); // 0x10003B198
	public override JSONNode Remove(JSONNode aNode); // 0x10003B254
	public override IEnumerable`1<JSONNode> get_Childs(); // 0x10003B2C4
	public IEnumerator GetEnumerator(); // 0x10003B340
	public override string ToString(); // 0x10003B3B4
	public override string ToString(string aPrefix); // 0x10003B6B8
	public override void Serialize(BinaryWriter aWriter); // 0x10003BA38
}

// Namespace: 
private sealed class <>c__Iterator2 : IDisposable, IEnumerator, IEnumerable, IEnumerable`1<JSONNode>, IEnumerator`1<JSONNode> // TypeDefIndex: 3138
{
	// Fields
	internal Enumerator<JSONNode> <$s_65>__0; // 0x10
	internal JSONNode <N>__1; // 0x28
	internal int $PC; // 0x30
	internal JSONNode $current; // 0x38
	internal JSONArray <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x10003B338
	private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.get_Current(); // 0x10003BB7C
	private object System.Collections.IEnumerator.get_Current(); // 0x10003BB84
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10003BB8C
	private IEnumerator`1<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator(); // 0x10003BB90
	public bool MoveNext(); // 0x10003BC24
	public void Dispose(); // 0x10003BE4C
	public void Reset(); // 0x10003BF78
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator3 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 3139
{
	// Fields
	internal Enumerator<JSONNode> <$s_66>__0; // 0x10
	internal JSONNode <N>__1; // 0x28
	internal int $PC; // 0x30
	internal object $current; // 0x38
	internal JSONArray <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x10003B3AC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10003BFCC
	private object System.Collections.IEnumerator.get_Current(); // 0x10003BFD4
	public bool MoveNext(); // 0x10003BFDC
	public void Dispose(); // 0x10003C204
	public void Reset(); // 0x10003C330
}

// Namespace: SimpleJSON
public class JSONClass : JSONNode, IEnumerable // TypeDefIndex: 3140
{
	// Fields
	private Dictionary`2<string, JSONNode> m_Dict; // 0x10

	// Methods
	public void .ctor(); // 0x10003C384
	public override JSONNode get_Item(string aKey); // 0x10003C3F4
	public override void set_Item(string aKey, JSONNode value); // 0x10003C4E8
	public override JSONNode get_Item(int aIndex); // 0x10003C5A0
	public override void set_Item(int aIndex, JSONNode value); // 0x10003C65C
	public override int get_Count(); // 0x10003C734
	public override void Add(string aKey, JSONNode aItem); // 0x10003C78C
	public override JSONNode Remove(string aKey); // 0x10003C8DC
	public override JSONNode Remove(int aIndex); // 0x10003C994
	public override JSONNode Remove(JSONNode aNode); // 0x10003CA84
	public override IEnumerable`1<JSONNode> get_Childs(); // 0x10003CC48
	public IEnumerator GetEnumerator(); // 0x10003CCC4
	public override string ToString(); // 0x10003CD38
	public override string ToString(string aPrefix); // 0x10003D56C
	public override void Serialize(BinaryWriter aWriter); // 0x10003DB60
}

// Namespace: 
private sealed class <>c__Iterator4 : IDisposable, IEnumerator, IEnumerable, IEnumerable`1<JSONNode>, IEnumerator`1<JSONNode> // TypeDefIndex: 3141
{
	// Fields
	internal Enumerator<string, JSONNode> <$s_69>__0; // 0x10
	internal KeyValuePair`2<string, JSONNode> <N>__1; // 0x30
	internal int $PC; // 0x40
	internal JSONNode $current; // 0x48
	internal JSONClass <>f__this; // 0x50

	// Methods
	public void .ctor(); // 0x10003CCBC
	private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.get_Current(); // 0x10003DE50
	private object System.Collections.IEnumerator.get_Current(); // 0x10003DE58
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10003DE60
	private IEnumerator`1<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator(); // 0x10003DE64
	public bool MoveNext(); // 0x10003DEF8
	public void Dispose(); // 0x10003E13C
	public void Reset(); // 0x10003E268
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator5 : IDisposable, IEnumerator, IEnumerator`1<object> // TypeDefIndex: 3142
{
	// Fields
	internal Enumerator<string, JSONNode> <$s_70>__0; // 0x10
	internal KeyValuePair`2<string, JSONNode> <N>__1; // 0x30
	internal int $PC; // 0x40
	internal object $current; // 0x48
	internal JSONClass <>f__this; // 0x50

	// Methods
	public void .ctor(); // 0x10003CD30
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10003E2BC
	private object System.Collections.IEnumerator.get_Current(); // 0x10003E2C4
	public bool MoveNext(); // 0x10003E2CC
	public void Dispose(); // 0x10003E50C
	public void Reset(); // 0x10003E638
}

// Namespace: 
private sealed class <Remove>c__AnonStorey6 // TypeDefIndex: 3143
{
	// Fields
	internal JSONNode aNode; // 0x10

	// Methods
	public void .ctor(); // 0x10003CC40
	internal bool <>m__2(KeyValuePair`2<string, JSONNode> k); // 0x10003E68C
}

// Namespace: SimpleJSON
public class JSONData : JSONNode // TypeDefIndex: 3144
{
	// Fields
	private string m_Data; // 0x10

	// Methods
	public void .ctor(string aData); // 0x10003E7A4
	public void .ctor(float aData); // 0x10003E7D0
	public void .ctor(double aData); // 0x10003E834
	public void .ctor(bool aData); // 0x10003E898
	public void .ctor(int aData); // 0x10003E8FC
	public override string get_Value(); // 0x10003E960
	public override void set_Value(string value); // 0x10003E968
	public override string ToString(); // 0x10003E970
	public override string ToString(string aPrefix); // 0x10003E9F8
	public override void Serialize(BinaryWriter aWriter); // 0x10003EA80
}

// Namespace: SimpleJSON
internal class JSONLazyCreator : JSONNode // TypeDefIndex: 3145
{
	// Fields
	private JSONNode m_Node; // 0x10
	private string m_Key; // 0x18

	// Methods
	public void .ctor(JSONNode aNode); // 0x10003AF24
	public void .ctor(JSONNode aNode, string aKey); // 0x10003C4B0
	private void Set(JSONNode aVal); // 0x10003EFD4
	public override JSONNode get_Item(int aIndex); // 0x10003F074
	public override void set_Item(int aIndex, JSONNode value); // 0x10003F0D8
	public override JSONNode get_Item(string aKey); // 0x10003F17C
	public override void set_Item(string aKey, JSONNode value); // 0x10003F1EC
	public override void Add(JSONNode aItem); // 0x10003F298
	public override void Add(string aKey, JSONNode aItem); // 0x10003F33C
	public override bool Equals(object obj); // 0x10003F3E8
	public override int GetHashCode(); // 0x10003F410
	public override string ToString(); // 0x10003F420
	public override string ToString(string aPrefix); // 0x10003F488
	public override int get_AsInt(); // 0x10003F4F0
	public override void set_AsInt(int value); // 0x10003F55C
	public override float get_AsFloat(); // 0x10003F5CC
	public override void set_AsFloat(float value); // 0x10003F638
	public override double get_AsDouble(); // 0x10003F6A8
	public override void set_AsDouble(double value); // 0x10003F714
	public override bool get_AsBool(); // 0x10003F784
	public override void set_AsBool(bool value); // 0x10003F7F0
	public override JSONArray get_AsArray(); // 0x10003F860
	public override JSONClass get_AsObject(); // 0x10003F8C8
	public static bool op_Equality(JSONLazyCreator a, object b); // 0x10003F930
	public static bool op_Inequality(JSONLazyCreator a, object b); // 0x10003F948
}

// Namespace: SimpleJSON
public static class JSON // TypeDefIndex: 3146
{
	// Methods
	public static JSONNode Parse(string aJSON); // 0x10003A2F0
}

// Namespace: com.nikaent.vk
public sealed class Scopes : Enum // TypeDefIndex: 3147
{
	// Fields
	public int value__; // 0x10
	public const Scopes notify = 0; // 0x0
	public const Scopes friends = 1; // 0x0
	public const Scopes photos = 2; // 0x0
	public const Scopes audio = 3; // 0x0
	public const Scopes video = 4; // 0x0
	public const Scopes docs = 5; // 0x0
	public const Scopes notes = 6; // 0x0
	public const Scopes pages = 7; // 0x0
	public const Scopes status = 8; // 0x0
	public const Scopes offers = 9; // 0x0
	public const Scopes questions = 10; // 0x0
	public const Scopes wall = 11; // 0x0
	public const Scopes groups = 12; // 0x0
	public const Scopes messages = 13; // 0x0
	public const Scopes notifications = 14; // 0x0
	public const Scopes stats = 15; // 0x0
	public const Scopes ads = 16; // 0x0
	public const Scopes offline = 17; // 0x0
	public const Scopes nohttps = 18; // 0x0
	public const Scopes email = 19; // 0x0

}

// Namespace: com.nikaent.vk
public class Scope // TypeDefIndex: 3148
{
	// Fields
	public const string NOTIFY = "notify"; // 0x0
	public const string FRIENDS = "friends"; // 0x0
	public const string PHOTOS = "photos"; // 0x0
	public const string AUDIO = "audio"; // 0x0
	public const string VIDEO = "video"; // 0x0
	public const string DOCS = "docs"; // 0x0
	public const string NOTES = "notes"; // 0x0
	public const string PAGES = "pages"; // 0x0
	public const string STATUS = "status"; // 0x0
	public const string OFFERS = "offers"; // 0x0
	public const string QUESTIONS = "questions"; // 0x0
	public const string WALL = "wall"; // 0x0
	public const string GROUPS = "groups"; // 0x0
	public const string MESSAGES = "messages"; // 0x0
	public const string NOTIFICATIONS = "notifications"; // 0x0
	public const string STATS = "stats"; // 0x0
	public const string ADS = "ads"; // 0x0
	public const string OFFLINE = "offline"; // 0x0
	public const string NOHTTPS = "nohttps"; // 0x0
	public const string EMAIL = "email"; // 0x0

	// Methods
	public void .ctor(); // 0x100030448
	public static string listToStringJson(List`1<Scopes> listScopes); // 0x100030450
}

// Namespace: com.nikaent.vk
public class VKontakte : MonoBehaviour // TypeDefIndex: 3149
{
	// Fields
	public static Action`1<string> OnLogin; // 0x0
	private static Dictionary`2<string, CallBack> mapFunction; // 0x8
	private static VKontakte _inst; // 0x10
	public string APP_ID; // 0x18
	public List`1<Scopes> listScopes; // 0x20

	// Methods
	public void .ctor(); // 0x10003045C
	private static void .cctor(); // 0x100030564
	private static extern void _vk_init(string idVkApp); // 0x1000305D8
	private static extern void _login(string scopes); // 0x100030604
	private static extern void _logout(); // 0x100030630
	private static extern string _apiCall(string method, string param); // 0x100030634
	private static extern bool _isLoggedIn(); // 0x1000306A4
	private static extern void _testCaptcha(); // 0x1000306C0
	private static void _log(string str); // 0x1000306C4
	public static void log(string str); // 0x100030730
	public static void login(); // 0x100030794
	public static void logout(); // 0x100030824
	public static bool isLoggedIn(); // 0x100030880
	public static void testCaptcha(); // 0x1000308E8
	public static void Api(string method, Dictionary`2<string, object> data, CallBack onResponse); // 0x100030944
	private void Start(); // 0x1000309FC
	public void trace(string str); // 0x100030A7C
	public void call(string data); // 0x100030B28
	private void AUTH_SUCCESSFUL(string result); // 0x100030DAC
	private void FAILED(string result); // 0x100030E68
}

// Namespace: 
public sealed class CallBack : MulticastDelegate // TypeDefIndex: 3150
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100030E6C
	public virtual void Invoke(object obj); // 0x100030D10
	public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object); // 0x100030E7C
	public virtual void EndInvoke(IAsyncResult result); // 0x100030ECC
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetUserDataResponseDelegate : MulticastDelegate // TypeDefIndex: 3151
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100027E38
	public virtual void Invoke(GetUserDataResponse eventName); // 0x100027E48
	public virtual IAsyncResult BeginInvoke(GetUserDataResponse eventName, AsyncCallback callback, object object); // 0x100027EE4
	public virtual void EndInvoke(IAsyncResult result); // 0x100027F34
}

// Namespace: com.amazon.device.iap.cpt
public sealed class PurchaseResponseDelegate : MulticastDelegate // TypeDefIndex: 3152
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10002D210
	public virtual void Invoke(PurchaseResponse eventName); // 0x10002D220
	public virtual IAsyncResult BeginInvoke(PurchaseResponse eventName, AsyncCallback callback, object object); // 0x10002D2BC
	public virtual void EndInvoke(IAsyncResult result); // 0x10002D30C
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetProductDataResponseDelegate : MulticastDelegate // TypeDefIndex: 3153
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100025EA0
	public virtual void Invoke(GetProductDataResponse eventName); // 0x100025EB0
	public virtual IAsyncResult BeginInvoke(GetProductDataResponse eventName, AsyncCallback callback, object object); // 0x100025F4C
	public virtual void EndInvoke(IAsyncResult result); // 0x100025F9C
}

// Namespace: com.amazon.device.iap.cpt
public sealed class GetPurchaseUpdatesResponseDelegate : MulticastDelegate // TypeDefIndex: 3154
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000270B4
	public virtual void Invoke(GetPurchaseUpdatesResponse eventName); // 0x1000270C4
	public virtual IAsyncResult BeginInvoke(GetPurchaseUpdatesResponse eventName, AsyncCallback callback, object object); // 0x100027160
	public virtual void EndInvoke(IAsyncResult result); // 0x1000271B0
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3155
{
}

// Namespace: 
public class Blur : PostEffectsBase // TypeDefIndex: 3156
{
	// Fields
	public int downsample; // 0x1C
	public float blurSize; // 0x20
	public int blurIterations; // 0x24
	public BlurType blurType; // 0x28
	public Shader blurShader; // 0x30
	private Material blurMaterial; // 0x38

	// Methods
	public void .ctor(); // 0x100348DF0
	public override bool CheckResources(); // 0x100348E64
	public override void OnDisable(); // 0x100348F2C
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100348FE4
	public override void Main(); // 0x10034933C
}

// Namespace: 
public sealed class BlurType : Enum // TypeDefIndex: 3157
{
	// Fields
	public int value__; // 0x10
	public const BlurType StandardGauss = 0; // 0x0
	public const BlurType SgxGauss = 1; // 0x0

}

// Namespace: 
public class FastBloom : PostEffectsBase // TypeDefIndex: 3158
{
	// Fields
	public float threshhold; // 0x1C
	public float intensity; // 0x20
	public float blurSize; // 0x24
	public Resolution resolution; // 0x28
	public int blurIterations; // 0x2C
	public BlurType blurType; // 0x30
	public Shader fastBloomShader; // 0x38
	private Material fastBloomMaterial; // 0x40

	// Methods
	public void .ctor(); // 0x100349340
	public override bool CheckResources(); // 0x100349394
	public override void OnDisable(); // 0x10034945C
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100349514
	public override void Main(); // 0x10034988C
}

// Namespace: 
public sealed class Resolution : Enum // TypeDefIndex: 3159
{
	// Fields
	public int value__; // 0x10
	public const Resolution Low = 0; // 0x0
	public const Resolution High = 1; // 0x0

}

// Namespace: 
public sealed class BlurType : Enum // TypeDefIndex: 3160
{
	// Fields
	public int value__; // 0x10
	public const BlurType Standard = 0; // 0x0
	public const BlurType Sgx = 1; // 0x0

}

// Namespace: 
public class PostEffectsBase : MonoBehaviour // TypeDefIndex: 3161
{
	// Fields
	protected bool supportHDRTextures; // 0x18
	protected bool supportDX11; // 0x19
	protected bool isSupported; // 0x1A

	// Methods
	public void .ctor(); // 0x100348E34
	public override Material CheckShaderAndCreateMaterial(Shader s, Material m2Create); // 0x100349890
	public override Material CreateMaterial(Shader s, Material m2Create); // 0x100349C00
	public override void OnEnable(); // 0x100349E34
	public override bool CheckSupport(); // 0x100349E40
	public override bool CheckResources(); // 0x100349E90
	public override void Start(); // 0x100349F90
	public override bool CheckSupport(bool needDepth); // 0x100349FDC
	public override bool CheckSupport(bool needDepth, bool needHdr); // 0x10034A124
	public override bool Dx11Support(); // 0x10034A1C4
	public override void ReportAutoDisable(); // 0x10034A1CC
	public override bool CheckShader(Shader s); // 0x10034A2C4
	public override void NotSupported(); // 0x10034A464
	public override void DrawBorder(RenderTexture dest, Material material); // 0x10034A490
	public override void Main(); // 0x10034A8B4
}

// Namespace: 
public sealed class SunShaftsResolution : Enum // TypeDefIndex: 3162
{
	// Fields
	public int value__; // 0x10
	public const SunShaftsResolution Low = 0; // 0x0
	public const SunShaftsResolution Normal = 1; // 0x0
	public const SunShaftsResolution High = 2; // 0x0

}

// Namespace: 
public sealed class ShaftsScreenBlendMode : Enum // TypeDefIndex: 3163
{
	// Fields
	public int value__; // 0x10
	public const ShaftsScreenBlendMode Screen = 0; // 0x0
	public const ShaftsScreenBlendMode Add = 1; // 0x0

}

// Namespace: 
public class SunShafts : PostEffectsBase // TypeDefIndex: 3164
{
	// Fields
	public SunShaftsResolution resolution; // 0x1C
	public ShaftsScreenBlendMode screenBlendMode; // 0x20
	public Transform sunTransform; // 0x28
	public int radialBlurIterations; // 0x30
	public Color sunColor; // 0x34
	public float sunShaftBlurRadius; // 0x44
	public float sunShaftIntensity; // 0x48
	public float useSkyBoxAlpha; // 0x4C
	public float maxRadius; // 0x50
	public bool useDepthTexture; // 0x54
	public Shader sunShaftsShader; // 0x58
	private Material sunShaftsMaterial; // 0x60
	public Shader simpleClearShader; // 0x68
	private Material simpleClearMaterial; // 0x70

	// Methods
	public void .ctor(); // 0x10034A8B8
	public override bool CheckResources(); // 0x10034A928
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034AA2C
	public override void Main(); // 0x10034B170
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3165
{
}

// Namespace: AssetBundles
public abstract class AssetBundleLoadOperation : IEnumerator // TypeDefIndex: 3166
{
	// Methods
	protected void .ctor(); // 0x100061ADC
	public object get_Current(); // 0x1000623E0
	public bool MoveNext(); // 0x1000623E8
	public void Reset(); // 0x100062434
	public abstract bool Update(); // 0
	public abstract bool IsDone(); // 0
}

// Namespace: AssetBundles
public abstract class AssetBundleDownloadOperation : AssetBundleLoadOperation // TypeDefIndex: 3167
{
	// Fields
	private bool done; // 0x10
	private string <assetBundleName>k__BackingField; // 0x18
	private LoadedAssetBundle <assetBundle>k__BackingField; // 0x20
	private string <error>k__BackingField; // 0x28
	private float <progress>k__BackingField; // 0x30

	// Methods
	public void .ctor(string assetBundleName); // 0x10006145C
	public string get_assetBundleName(); // 0x10006151C
	private void set_assetBundleName(string value); // 0x100061E3C
	public LoadedAssetBundle get_assetBundle(); // 0x100061758
	protected void set_assetBundle(LoadedAssetBundle value); // 0x100061750
	public string get_error(); // 0x10006170C
	protected void set_error(string value); // 0x100061704
	public virtual float get_progress(); // 0x100061E44
	protected virtual void set_progress(float value); // 0x100061E4C
	protected abstract bool get_downloadIsDone(); // 0
	protected abstract void FinishDownload(); // 0
	public override bool Update(); // 0x100061E54
	public override bool IsDone(); // 0x100061EF0
	public abstract string GetSourceURL(); // 0
}

// Namespace: AssetBundles
public class AssetBundleDownloadFromODROperation : AssetBundleDownloadOperation // TypeDefIndex: 3168
{
	// Fields
	private OnDemandResourcesRequest request; // 0x38

	// Methods
	public void .ctor(string assetBundleName); // 0x100061370
	protected override bool get_downloadIsDone(); // 0x100061488
	public override string GetSourceURL(); // 0x1000614A0
	protected override void FinishDownload(); // 0x100061524
}

// Namespace: 
private sealed class <FinishDownload>c__AnonStoreyA3 // TypeDefIndex: 3169
{
	// Fields
	internal OnDemandResourcesRequest localRequest; // 0x10

	// Methods
	public void .ctor(); // 0x100061714
	internal void <>m__0(); // 0x100061840
}

// Namespace: AssetBundles
public class AssetBundleOpenFromAssetCatalogOperation : AssetBundleDownloadOperation // TypeDefIndex: 3170
{
	// Methods
	public void .ctor(string assetBundleName); // 0x1000643B4
	protected override bool get_downloadIsDone(); // 0x100065064
	protected override void FinishDownload(); // 0x10006506C
	public override string GetSourceURL(); // 0x100065070
}

// Namespace: AssetBundles
public class AssetBundleDownloadFromWebOperation : AssetBundleDownloadOperation // TypeDefIndex: 3171
{
	// Fields
	private WWW m_WWW; // 0x38
	private string m_Url; // 0x40

	// Methods
	public void .ctor(string assetBundleName, WWW www); // 0x10006185C
	public override float get_progress(); // 0x100061900
	protected override bool get_downloadIsDone(); // 0x100061918
	protected override void FinishDownload(); // 0x100061930
	public override string GetSourceURL(); // 0x100061AA8
}

// Namespace: AssetBundles
public class AssetBundleLoadLevelOperation : AssetBundleLoadOperation // TypeDefIndex: 3172
{
	// Fields
	protected string m_AssetBundleName; // 0x10
	protected string m_LevelName; // 0x18
	protected bool m_IsAdditive; // 0x20
	protected string m_DownloadingError; // 0x28
	protected AsyncOperation m_Request; // 0x30

	// Methods
	public void .ctor(string assetbundleName, string levelName, bool isAdditive); // 0x1000620D8
	public override bool Update(); // 0x100062118
	public override bool IsDone(); // 0x1000621D8
}

// Namespace: AssetBundles
public abstract class AssetBundleLoadAssetOperation : AssetBundleLoadOperation // TypeDefIndex: 3173
{
	// Methods
	protected void .ctor(); // 0x100061EF8
	public abstract T GetAsset(); // 0
}

// Namespace: AssetBundles
public class AssetBundleLoadAssetOperationSimulation : AssetBundleLoadAssetOperation // TypeDefIndex: 3174
{
	// Fields
	private Object m_SimulatedObject; // 0x10

	// Methods
	public void .ctor(Object simulatedObject); // 0x10006209C
	public override T GetAsset(); // 0
	public override bool Update(); // 0x1000620C8
	public override bool IsDone(); // 0x1000620D0
}

// Namespace: AssetBundles
public class AssetBundleLoadAssetOperationFull : AssetBundleLoadAssetOperation // TypeDefIndex: 3175
{
	// Fields
	protected string m_AssetBundleName; // 0x10
	protected string m_AssetName; // 0x18
	protected string m_DownloadingError; // 0x20
	protected Type m_Type; // 0x28
	protected AssetBundleRequest m_Request; // 0x30

	// Methods
	public void .ctor(string bundleName, string assetName, Type type); // 0x100061F00
	public override T GetAsset(); // 0
	public override bool Update(); // 0x100061F40
	public override bool IsDone(); // 0x100062000
}

// Namespace: AssetBundles
public class AssetBundleLoadManifestOperation : AssetBundleLoadAssetOperationFull // TypeDefIndex: 3176
{
	// Methods
	public void .ctor(string bundleName, string assetName, Type type); // 0x100062274
	public override bool Update(); // 0x1000622B4
}

// Namespace: AssetBundles
public class AssetBundleDownloadLevelDoneOperation : AssetBundleLoadOperation // TypeDefIndex: 3177
{
	// Fields
	protected string m_AssetBundleName; // 0x10
	protected string m_DownloadingError; // 0x18

	// Methods
	public void .ctor(string assetbundleName); // 0x100061AB0
	public override bool Update(); // 0x100061AE4
	public override bool IsDone(); // 0x100061D78
}

// Namespace: AssetBundles
public class LoadedAssetBundle // TypeDefIndex: 3178
{
	// Fields
	public AssetBundle m_AssetBundle; // 0x10
	public int m_ReferencedCount; // 0x18
	private Action unload; // 0x20

	// Methods
	public void .ctor(AssetBundle assetBundle); // 0x10006171C
	internal void add_unload(Action value); // 0x100061760
	internal void remove_unload(Action value); // 0x1000650EC
	internal void OnUnload(); // 0x100064764
}

// Namespace: AssetBundles
public class AssetBundleManager : MonoBehaviour // TypeDefIndex: 3179
{
	// Fields
	private static LogMode m_LogMode; // 0x0
	private static string m_BaseDownloadingURL; // 0x8
	private static string[] m_ActiveVariants; // 0x10
	private static AssetBundleManifest m_AssetBundleManifest; // 0x18
	private static Dictionary`2<string, LoadedAssetBundle> m_LoadedAssetBundles; // 0x20
	private static Dictionary`2<string, string> m_DownloadingErrors; // 0x28
	private static List`1<string> m_DownloadingBundles; // 0x30
	private static List`1<AssetBundleLoadOperation> m_InProgressOperations; // 0x38
	private static Dictionary`2<string, string[]> m_Dependencies; // 0x40
	private static OverrideBaseDownloadingURLDelegate overrideBaseDownloadingURL; // 0x48

	// Methods
	public void .ctor(); // 0x100062438
	private static void .cctor(); // 0x100062440
	public static void add_overrideBaseDownloadingURL(OverrideBaseDownloadingURLDelegate value); // 0x1000625F0
	public static void remove_overrideBaseDownloadingURL(OverrideBaseDownloadingURLDelegate value); // 0x1000626F4
	public static LogMode get_logMode(); // 0x1000627F8
	public static void set_logMode(LogMode value); // 0x100062860
	public static string get_BaseDownloadingURL(); // 0x1000628CC
	public static void set_BaseDownloadingURL(string value); // 0x100062934
	public static string[] get_ActiveVariants(); // 0x1000629A0
	public static void set_ActiveVariants(string[] value); // 0x100062A08
	public static void set_AssetBundleManifestObject(AssetBundleManifest value); // 0x100062374
	private static void Log(LogType logType, string text); // 0x100062A74
	private static string GetStreamingAssetsPath(); // 0x100062C98
	public static void SetSourceAssetBundleDirectory(string relativePath); // 0x100062D98
	public static void SetSourceAssetBundleURL(string absolutePath); // 0x100062E38
	public static void SetDevelopmentAssetBundleServer(); // 0x100062F74
	public static LoadedAssetBundle GetLoadedAssetBundle(string assetBundleName, out string error); // 0x100061B60
	public static bool IsAssetBundleDownloaded(string assetBundleName); // 0x1000630D8
	public static AssetBundleLoadManifestOperation Initialize(); // 0x10006315C
	public static AssetBundleLoadManifestOperation Initialize(string manifestAssetBundleName); // 0x1000631D4
	protected static void LoadAssetBundle(string assetBundleName, Nullable`1<int> version); // 0x1000635E4
	protected static void LoadAssetBundle(string assetBundleName, bool isLoadingAssetBundleManifest, Nullable`1<int> version); // 0x100063400
	public static string GetAssetBundleBaseDownloadingURL(string bundleName); // 0x100063D3C
	protected static bool UsesExternalBundleVariantResolutionMechanism(string baseAssetBundleName); // 0x100063F80
	protected static string RemapVariantName(string assetBundleName); // 0x10006404C
	protected static bool LoadAssetBundleInternal(string assetBundleName, bool isLoadingAssetBundleManifest, Nullable`1<int> version); // 0x10006365C
	protected static void LoadDependencies(string assetBundleName); // 0x100063A9C
	public static void UnloadAssetBundle(string assetBundleName); // 0x100061298
	protected static void UnloadDependencies(string assetBundleName); // 0x10006461C
	protected static void UnloadAssetBundleInternal(string assetBundleName); // 0x100064504
	private void Update(); // 0x1000647B0
	private void ProcessFinishedOperation(AssetBundleLoadOperation operation); // 0x100064910
	public static AssetBundleLoadAssetOperation LoadAssetAsync(string assetBundleName, string assetName, Type type); // 0x100060FD0
	public static AssetBundleLoadOperation LoadLevelAsync(string assetBundleName, string levelName, bool isAdditive); // 0x100064AE4
	public static AssetBundleLoadOperation DownloadLevelAsync(string assetBundleName, Nullable`1<int> version); // 0x100064DAC
	public static AssetBundleLoadOperation GetFirst(); // 0x100064ED4
}

// Namespace: 
public sealed class LogMode : Enum // TypeDefIndex: 3180
{
	// Fields
	public int value__; // 0x10
	public const LogMode All = 0; // 0x0
	public const LogMode JustErrors = 1; // 0x0

}

// Namespace: 
public sealed class LogType : Enum // TypeDefIndex: 3181
{
	// Fields
	public int value__; // 0x10
	public const LogType Info = 0; // 0x0
	public const LogType Warning = 1; // 0x0
	public const LogType Error = 2; // 0x0

}

// Namespace: 
public sealed class OverrideBaseDownloadingURLDelegate : MulticastDelegate // TypeDefIndex: 3182
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100064FA0
	public virtual string Invoke(string bundleName); // 0x100063EE4
	public virtual IAsyncResult BeginInvoke(string bundleName, AsyncCallback callback, object object); // 0x100065008
	public virtual string EndInvoke(IAsyncResult result); // 0x100065058
}

// Namespace: AssetBundles
public class Utility // TypeDefIndex: 3183
{
	// Fields
	public const string AssetBundlesOutputPath = "AssetBundles"; // 0x0

	// Methods
	public void .ctor(); // 0x1000651CC
	public static string GetPlatformName(); // 0x100062F54
	private static string GetPlatformForAssetBundles(RuntimePlatform platform); // 0x1000651D4
}

// Namespace: 
public static class Bezier // TypeDefIndex: 3184
{
	// Methods
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t); // 0x1000691A4
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t); // 0x100069328
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t); // 0x100069448
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t); // 0x100069640
}

// Namespace: 
public sealed class BezierControlPointMode : Enum // TypeDefIndex: 3185
{
	// Fields
	public int value__; // 0x10
	public const BezierControlPointMode Free = 0; // 0x0
	public const BezierControlPointMode Aligned = 1; // 0x0
	public const BezierControlPointMode Mirrored = 2; // 0x0

}

// Namespace: 
public class BezierCurve : MonoBehaviour // TypeDefIndex: 3186
{
	// Fields
	public Vector3[] points; // 0x18

	// Methods
	public void .ctor(); // 0x100069884
	public Vector3 GetPoint(float t); // 0x10006988C
	public Vector3 GetVelocity(float t); // 0x1000699A0
	public Vector3 GetDirection(float t); // 0x100069B04
	public void Reset(); // 0x100069B34
}

// Namespace: 
public class BezierSpline : MonoBehaviour // TypeDefIndex: 3187
{
	// Fields
	private Vector3[] points; // 0x18
	private BezierControlPointMode[] modes; // 0x20
	private bool loop; // 0x28

	// Methods
	public void .ctor(); // 0x100069CB8
	public bool get_Loop(); // 0x100069CC0
	public void set_Loop(bool value); // 0x100069CC8
	public int get_ControlPointCount(); // 0x10006A0B0
	public Vector3 GetControlPoint(int index); // 0x10006A0CC
	public void SetControlPoint(int index, Vector3 point); // 0x100069D70
	public BezierControlPointMode GetControlPointMode(int index); // 0x10006A3C0
	public void SetControlPointMode(int index, BezierControlPointMode mode); // 0x10006A41C
	private void EnforceMode(int index); // 0x10006A118
	public int get_CurveCount(); // 0x10006A4FC
	public Vector3 GetPoint(float t); // 0x10006A534
	public Vector3 GetVelocity(float t); // 0x10006A730
	public Vector3 GetDirection(float t); // 0x10006A97C
	public void AddCurve(); // 0x10006A9AC
	public void Reset(); // 0x10006AC4C
}

// Namespace: 
public class CoinCounter : MonoBehaviour // TypeDefIndex: 3188
{
	// Fields
	public tk2dTextMesh value; // 0x18

	// Methods
	public void .ctor(); // 0x1001FD1C4
	private void Start(); // 0x1001FD1CC
	private void Update(); // 0x1001FD2B0
}

// Namespace: 
public class CoinManager : MonoBehaviour // TypeDefIndex: 3189
{
	// Fields
	public FlyingCoin[] clover_coins; // 0x18
	public float startInterval; // 0x20
	public TimeManagment[] timeManagment; // 0x28

	// Methods
	public void .ctor(); // 0x1001FD320
	public void StartCoinGame(bool restart); // 0x1001FD328
	private IEnumerator LaunchCoins(); // 0x1001FD4E8
}

// Namespace: 
public class TimeManagment // TypeDefIndex: 3190
{
	// Fields
	public float startInterval; // 0x10
	public float duration; // 0x14
	public float roundInterval; // 0x18

	// Methods
	public void .ctor(); // 0x1001FD86C
}

// Namespace: 
private sealed class <LaunchCoins>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3191
{
	// Fields
	internal int <i>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal CoinManager <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1001FD554
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001FD55C
	private object System.Collections.IEnumerator.get_Current(); // 0x1001FD564
	public bool MoveNext(); // 0x1001FD56C
	public void Dispose(); // 0x1001FD80C
	public void Reset(); // 0x1001FD818
}

// Namespace: 
public static class Coins // TypeDefIndex: 3192
{
	// Fields
	public static int clover_coins_count; // 0x0
	public static int clover_coins_total; // 0x4

}

// Namespace: 
public class FlyingCoin : MonoBehaviour // TypeDefIndex: 3193
{
	// Fields
	public BezierSpline spline; // 0x18
	public Renderer coin; // 0x20
	private ParticleSystem m_DestroyEffect; // 0x28
	public float duration; // 0x30
	public float roundInterval; // 0x34
	public bool lookForward; // 0x38
	public SplineWalkerMode mode; // 0x3C
	public bool switchMaterials; // 0x40
	public Material in_light; // 0x48
	public Material in_dark; // 0x50
	public bool fly; // 0x58
	private bool state; // 0x59
	public bool hit_check; // 0x5A
	private float progress; // 0x5C
	private bool goingForward; // 0x60
	private static Vector3 DESTROY_EFFECT_OFFSET; // 0x0

	// Methods
	public void .ctor(); // 0x10022FF6C
	private static void .cctor(); // 0x10022FF7C
	private void Start(); // 0x100230000
	private void Hit(GameObject go); // 0x1002301A0
	private void PlayDestroyEffect(); // 0x10023048C
	public void Reset(); // 0x1002306B8
	public void RestartRound(); // 0x10023097C
	private IEnumerator CountDown(); // 0x1002309EC
	private void Update(); // 0x100230A60
	private void OnDestroy(); // 0x100230CD8
}

// Namespace: 
private sealed class <CountDown>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3194
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal FlyingCoin <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100230A58
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100230E48
	private object System.Collections.IEnumerator.get_Current(); // 0x100230E50
	public bool MoveNext(); // 0x100230E58
	public void Dispose(); // 0x100230F34
	public void Reset(); // 0x100230F40
}

// Namespace: 
public class Line : MonoBehaviour // TypeDefIndex: 3195
{
	// Fields
	public Vector3 p0; // 0x18
	public Vector3 p1; // 0x24

	// Methods
	public void .ctor(); // 0x10028F534
}

// Namespace: 
public class SplineDecorator : MonoBehaviour // TypeDefIndex: 3196
{
	// Fields
	public BezierSpline spline; // 0x18
	public int frequency; // 0x20
	public bool lookForward; // 0x24
	public Transform[] items; // 0x28

	// Methods
	public void .ctor(); // 0x100140110
	private void Awake(); // 0x100140118
}

// Namespace: 
public class SplineWalker : MonoBehaviour // TypeDefIndex: 3197
{
	// Fields
	public BezierSpline spline; // 0x18
	public float duration; // 0x20
	public bool lookForward; // 0x24
	public SplineWalkerMode mode; // 0x28
	private float progress; // 0x2C
	private bool goingForward; // 0x30

	// Methods
	public void .ctor(); // 0x10014037C
	private void Update(); // 0x10014038C
}

// Namespace: 
public sealed class SplineWalkerMode : Enum // TypeDefIndex: 3198
{
	// Fields
	public int value__; // 0x10
	public const SplineWalkerMode Once = 0; // 0x0
	public const SplineWalkerMode Loop = 1; // 0x0
	public const SplineWalkerMode PingPong = 2; // 0x0

}

// Namespace: 
public class ChartboostExample : MonoBehaviour // TypeDefIndex: 3199
{
	// Fields
	public GameObject inPlayIcon; // 0x18
	public GameObject inPlayText; // 0x20
	public Texture2D logo; // 0x28
	private CBInPlay inPlayAd; // 0x30
	public Vector2 scrollPosition; // 0x38
	private List`1<string> delegateHistory; // 0x40
	private bool hasInterstitial; // 0x48
	private bool hasMoreApps; // 0x49
	private bool hasRewardedVideo; // 0x4A
	private bool hasInPlay; // 0x4B
	private int frameCount; // 0x4C
	private bool ageGate; // 0x50
	private bool autocache; // 0x51
	private bool activeAgeGate; // 0x52
	private bool showInterstitial; // 0x53
	private bool showMoreApps; // 0x54
	private bool showRewardedVideo; // 0x55
	private int BANNER_HEIGHT; // 0x58
	private int REQUIRED_HEIGHT; // 0x5C
	private int ELEMENT_WIDTH; // 0x60
	private Rect scrollRect; // 0x64
	private Rect scrollArea; // 0x74
	private Vector3 guiScale; // 0x84
	private float scale; // 0x90
	private CBStatusBarBehavior statusBar; // 0x94
	private Vector2 beginFinger; // 0x98
	private float deltaFingerY; // 0xA0
	private Vector2 beginPanel; // 0xA4
	private Vector2 latestPanel; // 0xAC

	// Methods
	public void .ctor(); // 0x1001DDE80
	private void OnEnable(); // 0x1001DDEDC
	private void Start(); // 0x1001DE534
	private void SetupDelegates(); // 0x1001DDEE0
	private void Update(); // 0x1001E060C
	private void UpdateScrolling(); // 0x1001E0708
	private void AddLog(string text); // 0x1001DE768
	private void OnGUI(); // 0x1001E09EC
	private void LayoutHeader(); // 0x1001E0D68
	private void LayoutToggles(); // 0x1001E1EA0
	private void LayoutButtons(); // 0x1001E1154
	private void LayoutAgeGate(int windowID); // 0x1001E2838
	private void OnDisable(); // 0x1001E2AE8
	private void didInitialize(bool status); // 0x1001E4EB0
	private void didFailToLoadInterstitial(CBLocation location, CBImpressionError error); // 0x1001E4F68
	private void didDismissInterstitial(CBLocation location); // 0x1001E5028
	private void didCloseInterstitial(CBLocation location); // 0x1001E50B8
	private void didClickInterstitial(CBLocation location); // 0x1001E5148
	private void didCacheInterstitial(CBLocation location); // 0x1001E51D8
	private bool shouldDisplayInterstitial(CBLocation location); // 0x1001E5268
	private void didDisplayInterstitial(CBLocation location); // 0x1001E5444
	private void didFailToLoadMoreApps(CBLocation location, CBImpressionError error); // 0x1001E54D4
	private void didDismissMoreApps(CBLocation location); // 0x1001E5594
	private void didCloseMoreApps(CBLocation location); // 0x1001E5624
	private void didClickMoreApps(CBLocation location); // 0x1001E56B4
	private void didCacheMoreApps(CBLocation location); // 0x1001E5744
	private bool shouldDisplayMoreApps(CBLocation location); // 0x1001E57D4
	private void didDisplayMoreApps(CBLocation location); // 0x1001E5898
	private void didFailToRecordClick(CBLocation location, CBClickError error); // 0x1001E5928
	private void didFailToLoadRewardedVideo(CBLocation location, CBImpressionError error); // 0x1001E59E8
	private void didDismissRewardedVideo(CBLocation location); // 0x1001E5AA8
	private void didCloseRewardedVideo(CBLocation location); // 0x1001E5B38
	private void didClickRewardedVideo(CBLocation location); // 0x1001E5BC8
	private void didCacheRewardedVideo(CBLocation location); // 0x1001E5C58
	private bool shouldDisplayRewardedVideo(CBLocation location); // 0x1001E5CE8
	private void didCompleteRewardedVideo(CBLocation location, int reward); // 0x1001E5EC4
	private void didDisplayRewardedVideo(CBLocation location); // 0x1001E5F84
	private void didCacheInPlay(CBLocation location); // 0x1001E6014
	private void didFailToLoadInPlay(CBLocation location, CBImpressionError error); // 0x1001E60A4
	private void didPauseClickForConfirmation(); // 0x1001E6164
	private void willDisplayVideo(CBLocation location); // 0x1001E61C0
	private void didCompleteAppStoreSheetFlow(); // 0x1001E6250
	private void TrackIAP(); // 0x1001E2790
}

// Namespace: ChartboostSDK
public class CBExternal // TypeDefIndex: 3200
{
	// Fields
	private static bool initialized; // 0x0
	private static string _logTag; // 0x8
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x10

	// Methods
	public void .ctor(); // 0x1001E78D8
	private static void .cctor(); // 0x1001E78E0
	public static void Log(string message); // 0x1001E793C
	public static bool isInitialized(); // 0x1001E7AEC
	private static bool checkInitialized(); // 0x1001E7B54
	private static extern void _chartBoostInit(string appId, string appSignature, string unityVersion); // 0x1001E7C04
	private static extern bool _chartBoostIsAnyViewVisible(); // 0x1001E7C74
	private static extern void _chartBoostCacheInterstitial(string location); // 0x1001E7C90
	private static extern bool _chartBoostHasInterstitial(string location); // 0x1001E7CBC
	private static extern void _chartBoostShowInterstitial(string location); // 0x1001E7CF8
	private static extern void _chartBoostCacheRewardedVideo(string location); // 0x1001E7D24
	private static extern bool _chartBoostHasRewardedVideo(string location); // 0x1001E7D50
	private static extern void _chartBoostShowRewardedVideo(string location); // 0x1001E7D8C
	private static extern void _chartBoostCacheMoreApps(string location); // 0x1001E7DB8
	private static extern bool _chartBoostHasMoreApps(string location); // 0x1001E7DE4
	private static extern void _chartBoostShowMoreApps(string location); // 0x1001E7E20
	private static extern void _chartBoostCacheInPlay(string location); // 0x1001E7E4C
	private static extern bool _chartBoostHasInPlay(string location); // 0x1001E7E78
	private static extern IntPtr _chartBoostGetInPlay(string location); // 0x1001E7EB4
	private static extern void _chartBoostSetCustomId(string id); // 0x1001E7EEC
	private static extern void _chartBoostDidPassAgeGate(bool pass); // 0x1001E7F18
	private static extern string _chartBoostGetCustomId(); // 0x1001E7F20
	private static extern void _chartBoostHandleOpenURL(string url, string sourceApp); // 0x1001E7F54
	private static extern void _chartBoostSetShouldPauseClickForConfirmation(bool pause); // 0x1001E7FA0
	private static extern void _chartBoostSetShouldRequestInterstitialsInFirstSession(bool request); // 0x1001E7FA8
	private static extern void _chartBoostShouldDisplayInterstitialCallbackResult(bool result); // 0x1001E7FB0
	private static extern void _chartBoostShouldDisplayRewardedVideoCallbackResult(bool result); // 0x1001E7FB8
	private static extern void _chartBoostShouldDisplayMoreAppsCallbackResult(bool result); // 0x1001E7FC0
	private static extern bool _chartBoostGetAutoCacheAds(); // 0x1001E7FC8
	private static extern void _chartBoostSetAutoCacheAds(bool autoCacheAds); // 0x1001E7FE4
	private static extern void _chartBoostSetShouldDisplayLoadingViewForMoreApps(bool shouldDisplay); // 0x1001E7FEC
	private static extern void _chartBoostSetShouldPrefetchVideoContent(bool shouldDisplay); // 0x1001E7FF4
	private static extern void _chartBoostTrackInAppPurchaseEvent(string receipt, string productTitle, string productDescription, string productPrice, string productCurrency, string productIdentifier); // 0x1001E7FFC
	private static extern void _chartBoostSetGameObjectName(string name); // 0x1001E80C8
	private static extern void _chartBoostSetStatusBarBehavior(CBStatusBarBehavior statusBarBehavior); // 0x1001E80F4
	private static extern void _chartBoostTrackLevelInfo(string eventLabel, int levelType, int mainLevel, int subLevel, string description); // 0x1001E80FC
	private static extern void _chartBoostSetMediation(int mediator, string version); // 0x1001E8170
	public static void init(); // 0x1001E81A8
	public static void initWithAppId(string appId, string appSignature); // 0x1001E8584
	public static void destroy(); // 0x1001E86CC
	public static bool isAnyViewVisible(); // 0x1001E8734
	public static void cacheInterstitial(CBLocation location); // 0x1001E8830
	public static bool hasInterstitial(CBLocation location); // 0x1001E8978
	public static void showInterstitial(CBLocation location); // 0x1001E8AB4
	public static void cacheMoreApps(CBLocation location); // 0x1001E8BF4
	public static bool hasMoreApps(CBLocation location); // 0x1001E8D34
	public static void showMoreApps(CBLocation location); // 0x1001E8E70
	public static void cacheInPlay(CBLocation location); // 0x1001E8FB0
	public static bool hasInPlay(CBLocation location); // 0x1001E90F0
	public static CBInPlay getInPlay(CBLocation location); // 0x1001E922C
	public static void cacheRewardedVideo(CBLocation location); // 0x1001E9420
	public static bool hasRewardedVideo(CBLocation location); // 0x1001E9560
	public static void showRewardedVideo(CBLocation location); // 0x1001E969C
	public static void chartBoostShouldDisplayInterstitialCallbackResult(bool result); // 0x1001E97DC
	public static void chartBoostShouldDisplayRewardedVideoCallbackResult(bool result); // 0x1001E987C
	public static void chartBoostShouldDisplayMoreAppsCallbackResult(bool result); // 0x1001E991C
	public static void setCustomId(string id); // 0x1001E99BC
	public static string getCustomId(); // 0x1001E9AA0
	public static void didPassAgeGate(bool pass); // 0x1001E9B50
	public static void handleOpenURL(string url, string sourceApp); // 0x1001E9C40
	public static void setShouldPauseClickForConfirmation(bool pause); // 0x1001E9D38
	public static void setShouldRequestInterstitialsInFirstSession(bool request); // 0x1001E9E28
	public static void setGameObjectName(string name); // 0x1001E9F18
	public static bool getAutoCacheAds(); // 0x1001E9FD0
	public static void setAutoCacheAds(bool autoCacheAds); // 0x1001EA048
	public static void setStatusBarBehavior(CBStatusBarBehavior statusBarBehavior); // 0x1001EA118
	public static void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay); // 0x1001EA1E8
	public static void setShouldPrefetchVideoContent(bool shouldPrefetch); // 0x1001EA2B8
	public static void trackLevelInfo(string eventLabel, CBLevelType type, int mainLevel, int subLevel, string description); // 0x1001EA388
	public static void trackLevelInfo(string eventLabel, CBLevelType type, int mainLevel, string description); // 0x1001EA5F0
	public static void trackInAppAppleStorePurchaseEvent(string receipt, string productTitle, string productDescription, string productPrice, string productCurrency, string productIdentifier); // 0x1001EA808
	public static void setMediation(CBMediation mediator, string version); // 0x1001EA8BC
}

// Namespace: ChartboostSDK
public class CBInPlay // TypeDefIndex: 3201
{
	// Fields
	public Texture2D appIcon; // 0x10
	public string appName; // 0x18
	private IntPtr inPlayUniqueId; // 0x20

	// Methods
	public void .ctor(IntPtr uniqueId); // 0x1001E93C8
	private static extern void _chartBoostInPlayClick(IntPtr uniqueID); // 0x1001EACA8
	private static extern void _chartBoostInPlayShow(IntPtr uniqueID); // 0x1001EACB0
	private static extern IntPtr _chartBoostInPlayGetAppIcon(IntPtr uniqueID); // 0x1001EACB8
	private static extern int _chartBoostInPlayGetAppIconSize(IntPtr uniqueID); // 0x1001EACC0
	private static extern string _chartBoostInPlayGetAppName(IntPtr uniqueID); // 0x1001EACC8
	private static extern void _chartBoostFreeInPlayObject(IntPtr uniqueID); // 0x1001EAD00
	private void setAppName(); // 0x1001EAB68
	private void setAppIcon(); // 0x1001EABAC
	public void show(); // 0x1001E2660
	public void click(); // 0x1001E2668
	protected override void Finalize(); // 0x1001EAD08
}

// Namespace: ChartboostSDK
public static class CBJSON // TypeDefIndex: 3202
{
	// Methods
	public static object Deserialize(string json); // 0x1001EAD78
	public static string Serialize(object obj); // 0x1001EAEF8
}

// Namespace: 
private sealed class Parser : IDisposable // TypeDefIndex: 3203
{
	// Fields
	private const string WORD_BREAK = "{}[],:""; // 0x0
	private StringReader json; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x0

	// Methods
	private void .ctor(string jsonString); // 0x1001EAF74
	public static bool IsWordBreak(char c); // 0x1001EAFF0
	public static object Parse(string jsonString); // 0x1001EAD88
	public void Dispose(); // 0x1001EB0BC
	private Hashtable ParseObject(); // 0x1001EB0F0
	private ArrayList ParseArray(); // 0x1001EB8F8
	private object ParseValue(); // 0x1001EB094
	private object ParseByToken(TOKEN token); // 0x1001EBA18
	private string ParseString(); // 0x1001EB5C0
	private object ParseNumber(); // 0x1001EBB4C
	private void EatWhitespace(); // 0x1001EBDA4
	private char get_PeekChar(); // 0x1001EBE90
	private char get_NextChar(); // 0x1001EBC1C
	private string get_NextWord(); // 0x1001EBCC4
	private TOKEN get_NextToken(); // 0x1001EB260
}

// Namespace: 
private sealed class TOKEN : Enum // TypeDefIndex: 3204
{
	// Fields
	public int value__; // 0x10
	public const TOKEN NONE = 0; // 0x0
	public const TOKEN CURLY_OPEN = 1; // 0x0
	public const TOKEN CURLY_CLOSE = 2; // 0x0
	public const TOKEN SQUARED_OPEN = 3; // 0x0
	public const TOKEN SQUARED_CLOSE = 4; // 0x0
	public const TOKEN COLON = 5; // 0x0
	public const TOKEN COMMA = 6; // 0x0
	public const TOKEN STRING = 7; // 0x0
	public const TOKEN NUMBER = 8; // 0x0
	public const TOKEN TRUE = 9; // 0x0
	public const TOKEN FALSE = 10; // 0x0
	public const TOKEN NULL = 11; // 0x0

}

// Namespace: 
private sealed class Serializer // TypeDefIndex: 3205
{
	// Fields
	private StringBuilder builder; // 0x10

	// Methods
	private void .ctor(); // 0x1001EBF38
	public static string Serialize(object obj); // 0x1001EAEFC
	private void SerializeValue(object val); // 0x1001EBFA4
	private void SerializeObject(Hashtable obj); // 0x1001EC4FC
	private void SerializeArray(ArrayList anArray); // 0x1001EC410
	private void SerializeString(string str); // 0x1001EC16C
	private void SerializeOther(object val); // 0x1001EC8D4
}

// Namespace: ChartboostSDK
public class CBSettings : ScriptableObject // TypeDefIndex: 3206
{
	// Fields
	private const string cbSettingsAssetName = "ChartboostSettings"; // 0x0
	private const string cbSettingsPath = "Chartboost/Resources"; // 0x0
	private const string cbSettingsAssetExtension = ".asset"; // 0x0
	private const string iOSExampleAppIDLabel = "CB_IOS_APP_ID"; // 0x0
	private const string iOSExampleAppSignatureLabel = "CB_IOS_APP_SIGNATURE"; // 0x0
	private const string iOSExampleAppID = "4f21c409cd1cb2fb7000001b"; // 0x0
	private const string iOSExampleAppSignature = "92e2de2fd7070327bdeb54c15a5295309c6fcd2d"; // 0x0
	private const string androidExampleAppIDLabel = "CB_ANDROID_APP_ID"; // 0x0
	private const string androidExampleAppSignatureLabel = "CB_ANDROID_APP_SIGNATURE"; // 0x0
	private const string androidExampleAppID = "4f7b433509b6025804000002"; // 0x0
	private const string androidExampleAppSignature = "dd2d41b69ac01b80f443f5b6cf06096d457f82bd"; // 0x0
	private const string amazonExampleAppIDLabel = "CB_AMAZON_APP_ID"; // 0x0
	private const string amazonExampleAppSignatureLabel = "CB_AMAZON_APP_SIGNATURE"; // 0x0
	private const string amazonExampleAppID = "542ca35d1873da32dbc90488"; // 0x0
	private const string amazonExampleAppSignature = "90654a340386c9fb8de33315e4210d7c09989c43"; // 0x0
	private const string credentialsWarningDefaultFormat = "CHARTBOOST: You are using the Chartboost {0} example {1}! Go to the Chartboost dashboard and replace these with an App ID & App Signature from your account! If you need help, email us: support@chartboost.com"; // 0x0
	private const string credentialsWarningEmptyFormat = "CHARTBOOST: You are using an empty string for the {0} {1}! Go to the Chartboost dashboard and replace these with an App ID & App Signature from your account! If you need help, email us: support@chartboost.com"; // 0x0
	private const string credentialsWarningIOS = "IOS"; // 0x0
	private const string credentialsWarningAndroid = "Android"; // 0x0
	private const string credentialsWarningAmazon = "Amazon"; // 0x0
	private const string credentialsWarningAppID = "App ID"; // 0x0
	private const string credentialsWarningAppSignature = "App Signature"; // 0x0
	private static bool credentialsWarning; // 0x0
	private static CBSettings instance; // 0x8
	public string iOSAppId; // 0x18
	public string iOSAppSecret; // 0x20
	public string androidAppId; // 0x28
	public string androidAppSecret; // 0x30
	public string amazonAppId; // 0x38
	public string amazonAppSecret; // 0x40
	public bool isLoggingEnabled; // 0x48
	public string[] androidPlatformLabels; // 0x50
	public int selectedAndroidPlatformIndex; // 0x58

	// Methods
	public void .ctor(); // 0x1001ED1B0
	private static void .cctor(); // 0x1001ED31C
	private static CBSettings get_Instance(); // 0x1001ED320
	public static void setAppId(string appId, string appSignature); // 0x1001ED4CC
	public void SetAndroidPlatformIndex(int index); // 0x1001ED718
	public int get_SelectedAndroidPlatformIndex(); // 0x1001ED7A4
	public string[] get_AndroidPlatformLabels(); // 0x1001ED7AC
	public void set_AndroidPlatformLabels(string[] value); // 0x1001ED7B4
	public void SetIOSAppId(string id); // 0x1001ED5C8
	public static string getIOSAppId(); // 0x1001E823C
	public void SetIOSAppSecret(string secret); // 0x1001ED670
	public static string getIOSAppSecret(); // 0x1001E83E0
	public void SetAndroidAppId(string id); // 0x1001ED990
	public static string getAndroidAppId(); // 0x1001EDA38
	public void SetAndroidAppSecret(string secret); // 0x1001EDBDC
	public static string getAndroidAppSecret(); // 0x1001EDC84
	public void SetAmazonAppId(string id); // 0x1001EDE28
	public static string getAmazonAppId(); // 0x1001EDED0
	public void SetAmazonAppSecret(string secret); // 0x1001EE074
	public static string getAmazonAppSecret(); // 0x1001EE11C
	public static string getSelectAndroidAppId(); // 0x1001EE2C0
	public static string getSelectAndroidAppSecret(); // 0x1001EE364
	public static void enableLogging(bool enabled); // 0x1001EE408
	public static bool isLogging(); // 0x1001E7A80
	private static void DirtyEditor(); // 0x1001ED7A0
	private static void CredentialsWarning(string warning, string platform, string field); // 0x1001ED874
	public static void resetSettings(); // 0x1001EE478
}

// Namespace: ChartboostSDK
public sealed class CBStatusBarBehavior : Enum // TypeDefIndex: 3207
{
	// Fields
	public int value__; // 0x10
	public const CBStatusBarBehavior Ignore = 0; // 0x0
	public const CBStatusBarBehavior RespectButtons = 1; // 0x0
	public const CBStatusBarBehavior Respect = 2; // 0x0

}

// Namespace: ChartboostSDK
public sealed class CBImpressionError : Enum // TypeDefIndex: 3208
{
	// Fields
	public int value__; // 0x10
	public const CBImpressionError Internal = 0; // 0x0
	public const CBImpressionError InternetUnavailable = 1; // 0x0
	public const CBImpressionError TooManyConnections = 2; // 0x0
	public const CBImpressionError WrongOrientation = 3; // 0x0
	public const CBImpressionError FirstSessionInterstitialsDisabled = 4; // 0x0
	public const CBImpressionError NetworkFailure = 5; // 0x0
	public const CBImpressionError NoAdFound = 6; // 0x0
	public const CBImpressionError SessionNotStarted = 7; // 0x0
	public const CBImpressionError ImpressionAlreadyVisible = 8; // 0x0
	public const CBImpressionError NoHostActivity = 9; // 0x0
	public const CBImpressionError UserCancellation = 10; // 0x0
	public const CBImpressionError InvalidLocation = 11; // 0x0
	public const CBImpressionError VideoUnAvailable = 12; // 0x0
	public const CBImpressionError VideoIdMissing = 13; // 0x0
	public const CBImpressionError ErrorPlayingVideo = 14; // 0x0
	public const CBImpressionError InvalidResponse = 15; // 0x0
	public const CBImpressionError AssetsDownloadFailure = 16; // 0x0
	public const CBImpressionError ErrorCreatingView = 17; // 0x0
	public const CBImpressionError ErrorDisplayingView = 18; // 0x0
	public const CBImpressionError PrefetchingIncomplete = 19; // 0x0

}

// Namespace: ChartboostSDK
public sealed class CBClickError : Enum // TypeDefIndex: 3209
{
	// Fields
	public int value__; // 0x10
	public const CBClickError UriInvalid = 0; // 0x0
	public const CBClickError UriUnrecognized = 1; // 0x0
	public const CBClickError AgeGateFailure = 2; // 0x0
	public const CBClickError Internal = 3; // 0x0

}

// Namespace: ChartboostSDK
public sealed class CBLevelType : Enum // TypeDefIndex: 3210
{
	// Fields
	public int value__; // 0x10
	public const CBLevelType HIGHEST_LEVEL_REACHED = 1; // 0x0
	public const CBLevelType CURRENT_AREA = 2; // 0x0
	public const CBLevelType CHARACTER_LEVEL = 3; // 0x0
	public const CBLevelType OTHER_SEQUENTIAL = 4; // 0x0
	public const CBLevelType OTHER_NONSEQUENTIAL = 5; // 0x0

}

// Namespace: ChartboostSDK
public sealed class CBLocation // TypeDefIndex: 3211
{
	// Fields
	private readonly string name; // 0x10
	private static Hashtable map; // 0x0
	public static readonly CBLocation Default; // 0x8
	public static readonly CBLocation Startup; // 0x10
	public static readonly CBLocation HomeScreen; // 0x18
	public static readonly CBLocation MainMenu; // 0x20
	public static readonly CBLocation GameScreen; // 0x28
	public static readonly CBLocation Achievements; // 0x30
	public static readonly CBLocation Quests; // 0x38
	public static readonly CBLocation Pause; // 0x40
	public static readonly CBLocation LevelStart; // 0x48
	public static readonly CBLocation LevelComplete; // 0x50
	public static readonly CBLocation TurnComplete; // 0x58
	public static readonly CBLocation IAPStore; // 0x60
	public static readonly CBLocation ItemStore; // 0x68
	public static readonly CBLocation GameOver; // 0x70
	public static readonly CBLocation LeaderBoard; // 0x78
	public static readonly CBLocation Settings; // 0x80
	public static readonly CBLocation Quit; // 0x88

	// Methods
	private void .ctor(string name); // 0x1001ECB04
	private static void .cctor(); // 0x1001ECBCC
	public override string ToString(); // 0x1001E8970
	public static CBLocation locationFromName(string name); // 0x1001ECEA0
}

// Namespace: ChartboostSDK
public sealed class CBMediation // TypeDefIndex: 3212
{
	// Fields
	public static readonly CBMediation AdMarvel; // 0x0
	public static readonly CBMediation Fuse; // 0x8
	public static readonly CBMediation Fyber; // 0x10
	public static readonly CBMediation HeyZap; // 0x18
	public static readonly CBMediation MoPub; // 0x20
	public static readonly CBMediation Supersonic; // 0x28
	public static readonly CBMediation Other; // 0x30
	private readonly string name; // 0x10

	// Methods
	private void .ctor(string name); // 0x1001ECFFC
	private static void .cctor(); // 0x1001ED028
	public override string ToString(); // 0x1001EAB60
}

// Namespace: ChartboostSDK
public class Chartboost : MonoBehaviour // TypeDefIndex: 3213
{
	// Fields
	private static bool showingAgeGate; // 0x0
	private static Chartboost instance; // 0x8
	private static bool isPaused; // 0x10
	private static bool shouldPause; // 0x11
	private static float lastTimeScale; // 0x14
	private static EventSystem kEventSystem; // 0x18
	private static Action`1<bool> didInitialize; // 0x20
	private static Func`2<CBLocation, bool> shouldDisplayInterstitial; // 0x28
	private static Action`1<CBLocation> didDisplayInterstitial; // 0x30
	private static Action`1<CBLocation> didCacheInterstitial; // 0x38
	private static Action`1<CBLocation> didClickInterstitial; // 0x40
	private static Action`1<CBLocation> didCloseInterstitial; // 0x48
	private static Action`1<CBLocation> didDismissInterstitial; // 0x50
	private static Action`2<CBLocation, CBImpressionError> didFailToLoadInterstitial; // 0x58
	private static Action`2<CBLocation, CBClickError> didFailToRecordClick; // 0x60
	private static Func`2<CBLocation, bool> shouldDisplayMoreApps; // 0x68
	private static Action`1<CBLocation> didDisplayMoreApps; // 0x70
	private static Action`1<CBLocation> didCacheMoreApps; // 0x78
	private static Action`1<CBLocation> didClickMoreApps; // 0x80
	private static Action`1<CBLocation> didCloseMoreApps; // 0x88
	private static Action`1<CBLocation> didDismissMoreApps; // 0x90
	private static Action`2<CBLocation, CBImpressionError> didFailToLoadMoreApps; // 0x98
	private static Func`2<CBLocation, bool> shouldDisplayRewardedVideo; // 0xA0
	private static Action`1<CBLocation> didDisplayRewardedVideo; // 0xA8
	private static Action`1<CBLocation> didCacheRewardedVideo; // 0xB0
	private static Action`1<CBLocation> didClickRewardedVideo; // 0xB8
	private static Action`1<CBLocation> didCloseRewardedVideo; // 0xC0
	private static Action`1<CBLocation> didDismissRewardedVideo; // 0xC8
	private static Action`2<CBLocation, int> didCompleteRewardedVideo; // 0xD0
	private static Action`2<CBLocation, CBImpressionError> didFailToLoadRewardedVideo; // 0xD8
	private static Action`1<CBLocation> didCacheInPlay; // 0xE0
	private static Action`2<CBLocation, CBImpressionError> didFailToLoadInPlay; // 0xE8
	private static Action`1<CBLocation> willDisplayVideo; // 0xF0
	private static Action didPauseClickForConfirmation; // 0xF8
	private static Action didCompleteAppStoreSheetFlow; // 0x100

	// Methods
	public void .ctor(); // 0x1001EE768
	private static void .cctor(); // 0x1001EE770
	public static void add_didInitialize(Action`1<bool> value); // 0x1001DE898
	public static void remove_didInitialize(Action`1<bool> value); // 0x1001E313C
	public static void add_shouldDisplayInterstitial(Func`2<CBLocation, bool> value); // 0x1001DEEB0
	public static void remove_shouldDisplayInterstitial(Func`2<CBLocation, bool> value); // 0x1001E3754
	public static void add_didDisplayInterstitial(Action`1<CBLocation> value); // 0x1001DEFB4
	public static void remove_didDisplayInterstitial(Action`1<CBLocation> value); // 0x1001E3858
	public static void add_didCacheInterstitial(Action`1<CBLocation> value); // 0x1001DEDAC
	public static void remove_didCacheInterstitial(Action`1<CBLocation> value); // 0x1001E3650
	public static void add_didClickInterstitial(Action`1<CBLocation> value); // 0x1001DECA8
	public static void remove_didClickInterstitial(Action`1<CBLocation> value); // 0x1001E354C
	public static void add_didCloseInterstitial(Action`1<CBLocation> value); // 0x1001DEBA4
	public static void remove_didCloseInterstitial(Action`1<CBLocation> value); // 0x1001E3448
	public static void add_didDismissInterstitial(Action`1<CBLocation> value); // 0x1001DEAA0
	public static void remove_didDismissInterstitial(Action`1<CBLocation> value); // 0x1001E3344
	public static void add_didFailToLoadInterstitial(Action`2<CBLocation, CBImpressionError> value); // 0x1001DE99C
	public static void remove_didFailToLoadInterstitial(Action`2<CBLocation, CBImpressionError> value); // 0x1001E3240
	public static void add_didFailToRecordClick(Action`2<CBLocation, CBClickError> value); // 0x1001DF7D4
	public static void remove_didFailToRecordClick(Action`2<CBLocation, CBClickError> value); // 0x1001E4078
	public static void add_shouldDisplayMoreApps(Func`2<CBLocation, bool> value); // 0x1001DF5CC
	public static void remove_shouldDisplayMoreApps(Func`2<CBLocation, bool> value); // 0x1001E3E70
	public static void add_didDisplayMoreApps(Action`1<CBLocation> value); // 0x1001DF6D0
	public static void remove_didDisplayMoreApps(Action`1<CBLocation> value); // 0x1001E3F74
	public static void add_didCacheMoreApps(Action`1<CBLocation> value); // 0x1001DF4C8
	public static void remove_didCacheMoreApps(Action`1<CBLocation> value); // 0x1001E3D6C
	public static void add_didClickMoreApps(Action`1<CBLocation> value); // 0x1001DF3C4
	public static void remove_didClickMoreApps(Action`1<CBLocation> value); // 0x1001E3C68
	public static void add_didCloseMoreApps(Action`1<CBLocation> value); // 0x1001DF2C0
	public static void remove_didCloseMoreApps(Action`1<CBLocation> value); // 0x1001E3B64
	public static void add_didDismissMoreApps(Action`1<CBLocation> value); // 0x1001DF1BC
	public static void remove_didDismissMoreApps(Action`1<CBLocation> value); // 0x1001E3A60
	public static void add_didFailToLoadMoreApps(Action`2<CBLocation, CBImpressionError> value); // 0x1001DF0B8
	public static void remove_didFailToLoadMoreApps(Action`2<CBLocation, CBImpressionError> value); // 0x1001E395C
	public static void add_shouldDisplayRewardedVideo(Func`2<CBLocation, bool> value); // 0x1001DFDEC
	public static void remove_shouldDisplayRewardedVideo(Func`2<CBLocation, bool> value); // 0x1001E4690
	public static void add_didDisplayRewardedVideo(Action`1<CBLocation> value); // 0x1001DFFF4
	public static void remove_didDisplayRewardedVideo(Action`1<CBLocation> value); // 0x1001E4898
	public static void add_didCacheRewardedVideo(Action`1<CBLocation> value); // 0x1001DFCE8
	public static void remove_didCacheRewardedVideo(Action`1<CBLocation> value); // 0x1001E458C
	public static void add_didClickRewardedVideo(Action`1<CBLocation> value); // 0x1001DFBE4
	public static void remove_didClickRewardedVideo(Action`1<CBLocation> value); // 0x1001E4488
	public static void add_didCloseRewardedVideo(Action`1<CBLocation> value); // 0x1001DFAE0
	public static void remove_didCloseRewardedVideo(Action`1<CBLocation> value); // 0x1001E4384
	public static void add_didDismissRewardedVideo(Action`1<CBLocation> value); // 0x1001DF9DC
	public static void remove_didDismissRewardedVideo(Action`1<CBLocation> value); // 0x1001E4280
	public static void add_didCompleteRewardedVideo(Action`2<CBLocation, int> value); // 0x1001DFEF0
	public static void remove_didCompleteRewardedVideo(Action`2<CBLocation, int> value); // 0x1001E4794
	public static void add_didFailToLoadRewardedVideo(Action`2<CBLocation, CBImpressionError> value); // 0x1001DF8D8
	public static void remove_didFailToLoadRewardedVideo(Action`2<CBLocation, CBImpressionError> value); // 0x1001E417C
	public static void add_didCacheInPlay(Action`1<CBLocation> value); // 0x1001E00F8
	public static void remove_didCacheInPlay(Action`1<CBLocation> value); // 0x1001E499C
	public static void add_didFailToLoadInPlay(Action`2<CBLocation, CBImpressionError> value); // 0x1001E01FC
	public static void remove_didFailToLoadInPlay(Action`2<CBLocation, CBImpressionError> value); // 0x1001E4AA0
	public static void add_willDisplayVideo(Action`1<CBLocation> value); // 0x1001E0404
	public static void remove_willDisplayVideo(Action`1<CBLocation> value); // 0x1001E4CA8
	public static void add_didPauseClickForConfirmation(Action value); // 0x1001E0300
	public static void remove_didPauseClickForConfirmation(Action value); // 0x1001E4BA4
	public static void add_didCompleteAppStoreSheetFlow(Action value); // 0x1001E0508
	public static void remove_didCompleteAppStoreSheetFlow(Action value); // 0x1001E4DAC
	public static bool isInitialized(); // 0x1001DE70C
	public static bool isAnyViewVisible(); // 0x1001EE774
	public static void cacheInterstitial(CBLocation location); // 0x1001E2340
	public static bool hasInterstitial(CBLocation location); // 0x1001E085C
	public static void showInterstitial(CBLocation location); // 0x1001E23A4
	public static void cacheMoreApps(CBLocation location); // 0x1001E2408
	public static bool hasMoreApps(CBLocation location); // 0x1001E08C0
	public static void showMoreApps(CBLocation location); // 0x1001E246C
	public static void cacheRewardedVideo(CBLocation location); // 0x1001E24D0
	public static bool hasRewardedVideo(CBLocation location); // 0x1001E0924
	public static void showRewardedVideo(CBLocation location); // 0x1001E2534
	public static void cacheInPlay(CBLocation location); // 0x1001E2598
	public static bool hasInPlay(CBLocation location); // 0x1001E0988
	public static CBInPlay getInPlay(CBLocation location); // 0x1001E25FC
	public static void didPassAgeGate(bool pass); // 0x1001E2A2C
	public static void setShouldPauseClickForConfirmation(bool shouldPause); // 0x1001DE644
	public static string getCustomId(); // 0x1001EE884
	public static void setCustomId(string customId); // 0x1001EE8E0
	public static bool getAutoCacheAds(); // 0x1001EE944
	public static void setAutoCacheAds(bool autoCacheAds); // 0x1001DE6A8
	public static void setShouldRequestInterstitialsInFirstSession(bool shouldRequest); // 0x1001EE9A0
	public static void setShouldDisplayLoadingViewForMoreApps(bool shouldDisplay); // 0x1001EEA04
	public static void setShouldPrefetchVideoContent(bool shouldPrefetch); // 0x1001EEA68
	public static void trackLevelInfo(string eventLabel, CBLevelType type, int mainLevel, int subLevel, string description); // 0x1001E26FC
	public static void trackLevelInfo(string eventLabel, CBLevelType type, int mainLevel, string description); // 0x1001E2670
	public static void trackInAppAppleStorePurchaseEvent(string receipt, string productTitle, string productDescription, string productPrice, string productCurrency, string productIdentifier); // 0x1001E62A0
	public static void setStatusBarBehavior(CBStatusBarBehavior statusBarBehavior); // 0x1001E22DC
	public static void setMediation(CBMediation mediator, string version); // 0x1001EEACC
	public static Chartboost Create(); // 0x1001EEB40
	public static Chartboost CreateWithAppId(string appId, string appSignature); // 0x1001E66A8
	private void Awake(); // 0x1001EECAC
	private void OnDestroy(); // 0x1001EEE4C
	private void Update(); // 0x1001EEF4C
	private void BlockerWindow(int windowID); // 0x1001EEF50
	private void OnApplicationPause(bool paused); // 0x1001EEF54
	private void OnDisable(); // 0x1001EEF58
	private static CBImpressionError impressionErrorFromInt(object errorObj); // 0x1001EEF5C
	private static CBClickError clickErrorFromInt(object errorObj); // 0x1001EF098
	private void didInitializeEvent(string data); // 0x1001EF198
	private void didFailToLoadInterstitialEvent(string dataString); // 0x1001EF28C
	private void didDismissInterstitialEvent(string location); // 0x1001EF450
	private void didClickInterstitialEvent(string location); // 0x1001EF6BC
	private void didCloseInterstitialEvent(string location); // 0x1001EF7A8
	private void didCacheInterstitialEvent(string location); // 0x1001EF894
	private void shouldDisplayInterstitialEvent(string location); // 0x1001EF980
	public void didDisplayInterstitialEvent(string location); // 0x1001EFAF0
	private void didFailToLoadMoreAppsEvent(string dataString); // 0x1001EFBE8
	private void didDismissMoreAppsEvent(string location); // 0x1001EFDAC
	private void didClickMoreAppsEvent(string location); // 0x1001EFEA4
	private void didCloseMoreAppsEvent(string location); // 0x1001EFF90
	private void didCacheMoreAppsEvent(string location); // 0x1001F007C
	private void shouldDisplayMoreAppsEvent(string location); // 0x1001F0168
	private void didDisplayMoreAppsEvent(string location); // 0x1001F02D8
	private void didFailToRecordClickEvent(string dataString); // 0x1001F03D0
	private void didFailToLoadRewardedVideoEvent(string dataString); // 0x1001F0594
	private void didDismissRewardedVideoEvent(string location); // 0x1001F0758
	private void didClickRewardedVideoEvent(string location); // 0x1001F0850
	private void didCloseRewardedVideoEvent(string location); // 0x1001F093C
	private void didCacheRewardedVideoEvent(string location); // 0x1001F0A28
	private void shouldDisplayRewardedVideoEvent(string location); // 0x1001F0B14
	private void didCompleteRewardedVideoEvent(string dataString); // 0x1001F0C84
	private void didDisplayRewardedVideoEvent(string location); // 0x1001F0EF4
	private void didCacheInPlayEvent(string location); // 0x1001F0FEC
	private void didFailToLoadInPlayEvent(string dataString); // 0x1001F10D8
	private void didPauseClickForConfirmationEvent(); // 0x1001F129C
	private void willDisplayVideoEvent(string location); // 0x1001F134C
	private void didCompleteAppStoreSheetFlowEvent(string empty); // 0x1001F1438
	private static void doUnityPause(bool pause, bool setShouldPause); // 0x1001EF548
	private static void doShowAgeGate(bool visible); // 0x1001EE7D0
	private static void disableUI(bool pause); // 0x1001F14E0
	public static bool isImpressionVisible(); // 0x1001F16D4
}

// Namespace: 
public class AnimateMoveShader : MonoBehaviour // TypeDefIndex: 3214
{
	// Fields
	private Vector2 _speed; // 0x18
	private Vector2 _offset; // 0x20
	private bool _NormalOffsetAnim; // 0x28
	private MeshRenderer _meshRenderer; // 0x30
	private SkinnedMeshRenderer _SkinMeshRenderer; // 0x38

	// Methods
	public void .ctor(); // 0x10005EEE0
	private void Start(); // 0x10005EF2C
	private void Update(); // 0x10005EFB8
}

// Namespace: 
public class HideRuntimeDEBUG : MonoBehaviour // TypeDefIndex: 3215
{
	// Fields
	public bool b_Active; // 0x18
	public bool b_Render; // 0x19

	// Methods
	public void .ctor(); // 0x100283D64
	private void Start(); // 0x100283D6C
}

// Namespace: 
public class FX_ActivateObject : MonoBehaviour // TypeDefIndex: 3216
{
	// Fields
	public GameObject FX_Elements; // 0x18
	private MenuNavigator m_MenuNavigator; // 0x20

	// Methods
	public void .ctor(); // 0x1002330DC
	private void OnDestroy(); // 0x1002330E4
	public void ShowFX(bool show); // 0x1002332DC
	private void Start(); // 0x100233388
	private void OnMenuShowed(MenuElements element); // 0x1002335C0
	private void OnMenuHide(MenuElements element); // 0x100233864
}

// Namespace: GooglePlayGames.BasicApi
public sealed class DataSource : Enum // TypeDefIndex: 3217
{
	// Fields
	public int value__; // 0x10
	public const DataSource ReadCacheOrNetwork = 0; // 0x0
	public const DataSource ReadNetworkOnly = 1; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class ResponseStatus : Enum // TypeDefIndex: 3218
{
	// Fields
	public int value__; // 0x10
	public const ResponseStatus Success = 1; // 0x0
	public const ResponseStatus SuccessWithStale = 2; // 0x0
	public const ResponseStatus LicenseCheckFailed = -1; // 0x0
	public const ResponseStatus InternalError = -2; // 0x0
	public const ResponseStatus NotAuthorized = -3; // 0x0
	public const ResponseStatus VersionUpdateRequired = -4; // 0x0
	public const ResponseStatus Timeout = -5; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class UIStatus : Enum // TypeDefIndex: 3219
{
	// Fields
	public int value__; // 0x10
	public const UIStatus Valid = 1; // 0x0
	public const UIStatus InternalError = -2; // 0x0
	public const UIStatus NotAuthorized = -3; // 0x0
	public const UIStatus VersionUpdateRequired = -4; // 0x0
	public const UIStatus Timeout = -5; // 0x0
	public const UIStatus UserClosedUI = -6; // 0x0
	public const UIStatus UiBusy = -12; // 0x0
	public const UIStatus LeftRoom = -18; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class LeaderboardStart : Enum // TypeDefIndex: 3220
{
	// Fields
	public int value__; // 0x10
	public const LeaderboardStart TopScores = 1; // 0x0
	public const LeaderboardStart PlayerCentered = 2; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class LeaderboardTimeSpan : Enum // TypeDefIndex: 3221
{
	// Fields
	public int value__; // 0x10
	public const LeaderboardTimeSpan Daily = 1; // 0x0
	public const LeaderboardTimeSpan Weekly = 2; // 0x0
	public const LeaderboardTimeSpan AllTime = 3; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class LeaderboardCollection : Enum // TypeDefIndex: 3222
{
	// Fields
	public int value__; // 0x10
	public const LeaderboardCollection Public = 1; // 0x0
	public const LeaderboardCollection Social = 2; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class VideoCaptureMode : Enum // TypeDefIndex: 3223
{
	// Fields
	public int value__; // 0x10
	public const VideoCaptureMode Unknown = -1; // 0x0
	public const VideoCaptureMode File = 0; // 0x0
	public const VideoCaptureMode Stream = 1; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class VideoQualityLevel : Enum // TypeDefIndex: 3224
{
	// Fields
	public int value__; // 0x10
	public const VideoQualityLevel Unknown = -1; // 0x0
	public const VideoQualityLevel SD = 0; // 0x0
	public const VideoQualityLevel HD = 1; // 0x0
	public const VideoQualityLevel XHD = 2; // 0x0
	public const VideoQualityLevel FullHD = 3; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class VideoCaptureOverlayState : Enum // TypeDefIndex: 3225
{
	// Fields
	public int value__; // 0x10
	public const VideoCaptureOverlayState Unknown = -1; // 0x0
	public const VideoCaptureOverlayState Shown = 1; // 0x0
	public const VideoCaptureOverlayState Started = 2; // 0x0
	public const VideoCaptureOverlayState Stopped = 3; // 0x0
	public const VideoCaptureOverlayState Dismissed = 4; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public sealed class Gravity : Enum // TypeDefIndex: 3226
{
	// Fields
	public int value__; // 0x10
	public const Gravity TOP = 48; // 0x0
	public const Gravity BOTTOM = 80; // 0x0
	public const Gravity LEFT = 3; // 0x0
	public const Gravity RIGHT = 5; // 0x0
	public const Gravity CENTER_HORIZONTAL = 1; // 0x0

}

// Namespace: GooglePlayGames.BasicApi
public class CommonTypesUtil // TypeDefIndex: 3227
{
	// Methods
	public void .ctor(); // 0x100269DDC
	public static bool StatusIsSuccess(ResponseStatus status); // 0x100269DE4
}

// Namespace: GooglePlayGames.BasicApi.Events
public sealed class EventVisibility : Enum // TypeDefIndex: 3228
{
	// Fields
	public int value__; // 0x10
	public const EventVisibility Hidden = 1; // 0x0
	public const EventVisibility Revealed = 2; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Events
public interface IEvent // TypeDefIndex: 3229
{
	// Methods
	public abstract string get_Id(); // 0
	public abstract string get_Name(); // 0
	public abstract string get_Description(); // 0
	public abstract string get_ImageUrl(); // 0
	public abstract ulong get_CurrentCount(); // 0
	public abstract EventVisibility get_Visibility(); // 0
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public struct AdvertisingResult // TypeDefIndex: 3230
{
	// Fields
	private readonly ResponseStatus mStatus; // 0x10
	private readonly string mLocalEndpointName; // 0x18

	// Methods
	public void .ctor(ResponseStatus status, string localEndpointName); // 0x100269E60
	public bool get_Succeeded(); // 0x100269E68
	public ResponseStatus get_Status(); // 0x100269E78
	public string get_LocalEndpointName(); // 0x100269E80
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public struct ConnectionRequest // TypeDefIndex: 3231
{
	// Fields
	private readonly EndpointDetails mRemoteEndpoint; // 0x10
	private readonly byte[] mPayload; // 0x30

	// Methods
	public void .ctor(string remoteEndpointId, string remoteDeviceId, string remoteEndpointName, string serviceId, byte[] payload); // 0x10026A1BC
	public EndpointDetails get_RemoteEndpoint(); // 0x10026A1C4
	public byte[] get_Payload(); // 0x10026A1D8
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public struct ConnectionResponse // TypeDefIndex: 3232
{
	// Fields
	private static readonly byte[] EmptyPayload; // 0x0
	private readonly long mLocalClientId; // 0x10
	private readonly string mRemoteEndpointId; // 0x18
	private readonly Status mResponseStatus; // 0x20
	private readonly byte[] mPayload; // 0x28

	// Methods
	private void .ctor(long localClientId, string remoteEndpointId, Status code, byte[] payload); // 0x10026A454
	private static void .cctor(); // 0x10026A45C
	public long get_LocalClientId(); // 0x10026A4CC
	public string get_RemoteEndpointId(); // 0x10026A4D4
	public Status get_ResponseStatus(); // 0x10026A4DC
	public byte[] get_Payload(); // 0x10026A4E4
	public static ConnectionResponse Rejected(long localClientId, string remoteEndpointId); // 0x10026A4EC
	public static ConnectionResponse NetworkNotConnected(long localClientId, string remoteEndpointId); // 0x10026A580
	public static ConnectionResponse InternalError(long localClientId, string remoteEndpointId); // 0x10026A614
	public static ConnectionResponse EndpointNotConnected(long localClientId, string remoteEndpointId); // 0x10026A6A8
	public static ConnectionResponse Accepted(long localClientId, string remoteEndpointId, byte[] payload); // 0x10026A73C
	public static ConnectionResponse AlreadyConnected(long localClientId, string remoteEndpointId); // 0x10026A758
}

// Namespace: 
public sealed class Status : Enum // TypeDefIndex: 3233
{
	// Fields
	public int value__; // 0x10
	public const Status Accepted = 0; // 0x0
	public const Status Rejected = 1; // 0x0
	public const Status ErrorInternal = 2; // 0x0
	public const Status ErrorNetworkNotConnected = 3; // 0x0
	public const Status ErrorEndpointNotConnected = 4; // 0x0
	public const Status ErrorAlreadyConnected = 5; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Nearby
public struct EndpointDetails // TypeDefIndex: 3234
{
	// Fields
	private readonly string mEndpointId; // 0x10
	private readonly string mDeviceId; // 0x18
	private readonly string mName; // 0x20
	private readonly string mServiceId; // 0x28

	// Methods
	public void .ctor(string endpointId, string deviceId, string name, string serviceId); // 0x10026A8E4
	public string get_EndpointId(); // 0x10026A8EC
	public string get_DeviceId(); // 0x10026A8F4
	public string get_Name(); // 0x10026A8FC
	public string get_ServiceId(); // 0x10026A904
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public interface IMessageListener // TypeDefIndex: 3235
{
	// Methods
	public abstract void OnMessageReceived(string remoteEndpointId, byte[] data, bool isReliableMessage); // 0
	public abstract void OnRemoteEndpointDisconnected(string remoteEndpointId); // 0
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public interface IDiscoveryListener // TypeDefIndex: 3236
{
	// Methods
	public abstract void OnEndpointFound(EndpointDetails discoveredEndpoint); // 0
	public abstract void OnEndpointLost(string lostEndpointId); // 0
}

// Namespace: GooglePlayGames.BasicApi.Nearby
public sealed class InitializationStatus : Enum // TypeDefIndex: 3237
{
	// Fields
	public int value__; // 0x10
	public const InitializationStatus Success = 0; // 0x0
	public const InitializationStatus VersionUpdateRequired = 1; // 0x0
	public const InitializationStatus InternalError = 2; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Nearby
public struct NearbyConnectionConfiguration // TypeDefIndex: 3238
{
	// Fields
	public const int MaxUnreliableMessagePayloadLength = 1168; // 0x0
	public const int MaxReliableMessagePayloadLength = 4096; // 0x0
	private readonly Action`1<InitializationStatus> mInitializationCallback; // 0x10
	private readonly long mLocalClientId; // 0x18

	// Methods
	public void .ctor(Action`1<InitializationStatus> callback, long localClientId); // 0x10026A978
	public long get_LocalClientId(); // 0x10026A980
	public Action`1<InitializationStatus> get_InitializationCallback(); // 0x10026A988
}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class QuestState : Enum // TypeDefIndex: 3239
{
	// Fields
	public int value__; // 0x10
	public const QuestState Upcoming = 1; // 0x0
	public const QuestState Open = 2; // 0x0
	public const QuestState Accepted = 3; // 0x0
	public const QuestState Completed = 4; // 0x0
	public const QuestState Expired = 5; // 0x0
	public const QuestState Failed = 6; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public interface IQuest // TypeDefIndex: 3240
{
	// Methods
	public abstract string get_Id(); // 0
	public abstract string get_Name(); // 0
	public abstract string get_Description(); // 0
	public abstract string get_BannerUrl(); // 0
	public abstract string get_IconUrl(); // 0
	public abstract DateTime get_StartTime(); // 0
	public abstract DateTime get_ExpirationTime(); // 0
	public abstract Nullable`1<DateTime> get_AcceptedTime(); // 0
	public abstract IQuestMilestone get_Milestone(); // 0
	public abstract QuestState get_State(); // 0
}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class MilestoneState : Enum // TypeDefIndex: 3241
{
	// Fields
	public int value__; // 0x10
	public const MilestoneState NotStarted = 1; // 0x0
	public const MilestoneState NotCompleted = 2; // 0x0
	public const MilestoneState CompletedNotClaimed = 3; // 0x0
	public const MilestoneState Claimed = 4; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public interface IQuestMilestone // TypeDefIndex: 3242
{
	// Methods
	public abstract string get_Id(); // 0
	public abstract string get_EventId(); // 0
	public abstract string get_QuestId(); // 0
	public abstract ulong get_CurrentCount(); // 0
	public abstract ulong get_TargetCount(); // 0
	public abstract byte[] get_CompletionRewardData(); // 0
	public abstract MilestoneState get_State(); // 0
}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class QuestFetchFlags : Enum // TypeDefIndex: 3243
{
	// Fields
	public int value__; // 0x10
	public const QuestFetchFlags Upcoming = 1; // 0x0
	public const QuestFetchFlags Open = 2; // 0x0
	public const QuestFetchFlags Accepted = 4; // 0x0
	public const QuestFetchFlags Completed = 8; // 0x0
	public const QuestFetchFlags CompletedNotClaimed = 16; // 0x0
	public const QuestFetchFlags Expired = 32; // 0x0
	public const QuestFetchFlags EndingSoon = 64; // 0x0
	public const QuestFetchFlags Failed = 128; // 0x0
	public const QuestFetchFlags All = -1; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class QuestAcceptStatus : Enum // TypeDefIndex: 3244
{
	// Fields
	public int value__; // 0x10
	public const QuestAcceptStatus Success = 0; // 0x0
	public const QuestAcceptStatus BadInput = 1; // 0x0
	public const QuestAcceptStatus InternalError = 2; // 0x0
	public const QuestAcceptStatus NotAuthorized = 3; // 0x0
	public const QuestAcceptStatus Timeout = 4; // 0x0
	public const QuestAcceptStatus QuestNoLongerAvailable = 5; // 0x0
	public const QuestAcceptStatus QuestNotStarted = 6; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class QuestClaimMilestoneStatus : Enum // TypeDefIndex: 3245
{
	// Fields
	public int value__; // 0x10
	public const QuestClaimMilestoneStatus Success = 0; // 0x0
	public const QuestClaimMilestoneStatus BadInput = 1; // 0x0
	public const QuestClaimMilestoneStatus InternalError = 2; // 0x0
	public const QuestClaimMilestoneStatus NotAuthorized = 3; // 0x0
	public const QuestClaimMilestoneStatus Timeout = 4; // 0x0
	public const QuestClaimMilestoneStatus MilestoneAlreadyClaimed = 5; // 0x0
	public const QuestClaimMilestoneStatus MilestoneClaimFailed = 6; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public sealed class QuestUiResult : Enum // TypeDefIndex: 3246
{
	// Fields
	public int value__; // 0x10
	public const QuestUiResult UserRequestsQuestAcceptance = 0; // 0x0
	public const QuestUiResult UserRequestsMilestoneClaiming = 1; // 0x0
	public const QuestUiResult BadInput = 2; // 0x0
	public const QuestUiResult InternalError = 3; // 0x0
	public const QuestUiResult UserCanceled = 4; // 0x0
	public const QuestUiResult NotAuthorized = 5; // 0x0
	public const QuestUiResult VersionUpdateRequired = 6; // 0x0
	public const QuestUiResult Timeout = 7; // 0x0
	public const QuestUiResult UiBusy = 8; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.Quests
public interface IQuestsClient // TypeDefIndex: 3247
{
	// Methods
	public abstract void Fetch(DataSource source, string questId, Action`2<ResponseStatus, IQuest> callback); // 0
	public abstract void FetchMatchingState(DataSource source, QuestFetchFlags flags, Action`2<ResponseStatus, List`1<IQuest>> callback); // 0
	public abstract void ShowAllQuestsUI(Action`3<QuestUiResult, IQuest, IQuestMilestone> callback); // 0
	public abstract void ShowSpecificQuestUI(IQuest quest, Action`3<QuestUiResult, IQuest, IQuestMilestone> callback); // 0
	public abstract void Accept(IQuest quest, Action`2<QuestAcceptStatus, IQuest> callback); // 0
	public abstract void ClaimMilestone(IQuestMilestone milestone, Action`3<QuestClaimMilestoneStatus, IQuest, IQuestMilestone> callback); // 0
}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public sealed class ConflictResolutionStrategy : Enum // TypeDefIndex: 3248
{
	// Fields
	public int value__; // 0x10
	public const ConflictResolutionStrategy UseLongestPlaytime = 0; // 0x0
	public const ConflictResolutionStrategy UseOriginal = 1; // 0x0
	public const ConflictResolutionStrategy UseUnmerged = 2; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public sealed class SavedGameRequestStatus : Enum // TypeDefIndex: 3249
{
	// Fields
	public int value__; // 0x10
	public const SavedGameRequestStatus Success = 1; // 0x0
	public const SavedGameRequestStatus TimeoutError = -1; // 0x0
	public const SavedGameRequestStatus InternalError = -2; // 0x0
	public const SavedGameRequestStatus AuthenticationError = -3; // 0x0
	public const SavedGameRequestStatus BadInputError = -4; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public sealed class SelectUIStatus : Enum // TypeDefIndex: 3250
{
	// Fields
	public int value__; // 0x10
	public const SelectUIStatus SavedGameSelected = 1; // 0x0
	public const SelectUIStatus UserClosedUI = 2; // 0x0
	public const SelectUIStatus InternalError = -1; // 0x0
	public const SelectUIStatus TimeoutError = -2; // 0x0
	public const SelectUIStatus AuthenticationError = -3; // 0x0
	public const SelectUIStatus BadInputError = -4; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public interface ISavedGameClient // TypeDefIndex: 3251
{
	// Methods
	public abstract void OpenWithAutomaticConflictResolution(string filename, DataSource source, ConflictResolutionStrategy resolutionStrategy, Action`2<SavedGameRequestStatus, ISavedGameMetadata> callback); // 0
	public abstract void OpenWithManualConflictResolution(string filename, DataSource source, bool prefetchDataOnConflict, ConflictCallback conflictCallback, Action`2<SavedGameRequestStatus, ISavedGameMetadata> completedCallback); // 0
	public abstract void ReadBinaryData(ISavedGameMetadata metadata, Action`2<SavedGameRequestStatus, byte[]> completedCallback); // 0
	public abstract void ShowSelectSavedGameUI(string uiTitle, uint maxDisplayedSavedGames, bool showCreateSaveUI, bool showDeleteSaveUI, Action`2<SelectUIStatus, ISavedGameMetadata> callback); // 0
	public abstract void CommitUpdate(ISavedGameMetadata metadata, SavedGameMetadataUpdate updateForMetadata, byte[] updatedBinaryData, Action`2<SavedGameRequestStatus, ISavedGameMetadata> callback); // 0
	public abstract void FetchAllSavedGames(DataSource source, Action`2<SavedGameRequestStatus, List`1<ISavedGameMetadata>> callback); // 0
	public abstract void Delete(ISavedGameMetadata metadata); // 0
}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public interface IConflictResolver // TypeDefIndex: 3252
{
	// Methods
	public abstract void ChooseMetadata(ISavedGameMetadata chosenMetadata); // 0
}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public interface ISavedGameMetadata // TypeDefIndex: 3253
{
	// Methods
	public abstract bool get_IsOpen(); // 0
	public abstract string get_Filename(); // 0
	public abstract string get_Description(); // 0
	public abstract string get_CoverImageURL(); // 0
	public abstract TimeSpan get_TotalTimePlayed(); // 0
	public abstract DateTime get_LastModifiedTimestamp(); // 0
}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public struct SavedGameMetadataUpdate // TypeDefIndex: 3254
{
	// Fields
	private readonly bool mDescriptionUpdated; // 0x10
	private readonly string mNewDescription; // 0x18
	private readonly bool mCoverImageUpdated; // 0x20
	private readonly byte[] mNewPngCoverImage; // 0x28
	private readonly Nullable`1<TimeSpan> mNewPlayedTime; // 0x30

	// Methods
	private void .ctor(Builder builder); // 0x10026ABBC
	public bool get_IsDescriptionUpdated(); // 0x10026ABE8
	public string get_UpdatedDescription(); // 0x10026ABF0
	public bool get_IsCoverImageUpdated(); // 0x10026ABF8
	public byte[] get_UpdatedPngCoverImage(); // 0x10026AC00
	public bool get_IsPlayedTimeUpdated(); // 0x10026AC6C
	public Nullable`1<TimeSpan> get_UpdatedPlayedTime(); // 0x10026AC74
}

// Namespace: 
public struct Builder // TypeDefIndex: 3255
{
	// Fields
	internal bool mDescriptionUpdated; // 0x10
	internal string mNewDescription; // 0x18
	internal bool mCoverImageUpdated; // 0x20
	internal byte[] mNewPngCoverImage; // 0x28
	internal Nullable`1<TimeSpan> mNewPlayedTime; // 0x30

	// Methods
	public Builder WithUpdatedDescription(string description); // 0x10026AD40
	public Builder WithUpdatedPngCoverImage(byte[] newPngCoverImage); // 0x10026AD48
	public Builder WithUpdatedPlayedTime(TimeSpan newPlayedTime); // 0x10026AE50
	public SavedGameMetadataUpdate Build(); // 0x10026AE58
}

// Namespace: GooglePlayGames.BasicApi.Video
public interface CaptureOverlayStateListener // TypeDefIndex: 3256
{
	// Methods
	public abstract void OnCaptureOverlayStateChanged(VideoCaptureOverlayState overlayState); // 0
}

// Namespace: GooglePlayGames.BasicApi.Video
public class VideoCapabilities // TypeDefIndex: 3257
{
	// Fields
	private bool mIsCameraSupported; // 0x10
	private bool mIsMicSupported; // 0x11
	private bool mIsWriteStorageSupported; // 0x12
	private bool[] mCaptureModesSupported; // 0x18
	private bool[] mQualityLevelsSupported; // 0x20
	private static Func`2<bool, string> <>f__am$cache5; // 0x0
	private static Func`2<bool, string> <>f__am$cache6; // 0x8

	// Methods
	internal void .ctor(bool isCameraSupported, bool isMicSupported, bool isWriteStorageSupported, bool[] captureModesSupported, bool[] qualityLevelsSupported); // 0x10026AEC0
	public bool get_IsCameraSupported(); // 0x10026AF18
	public bool get_IsMicSupported(); // 0x10026AF20
	public bool get_IsWriteStorageSupported(); // 0x10026AF28
	public bool SupportsCaptureMode(VideoCaptureMode captureMode); // 0x10026AF30
	public bool SupportsQualityLevel(VideoQualityLevel qualityLevel); // 0x10026B0F0
	public override string ToString(); // 0x10026B1AC
	private static string <ToString>m__1(bool p); // 0x10026B56C
	private static string <ToString>m__2(bool p); // 0x10026B594
}

// Namespace: GooglePlayGames.BasicApi.Video
public class VideoCaptureState // TypeDefIndex: 3258
{
	// Fields
	private bool mIsCapturing; // 0x10
	private VideoCaptureMode mCaptureMode; // 0x14
	private VideoQualityLevel mQualityLevel; // 0x18
	private bool mIsOverlayVisible; // 0x1C
	private bool mIsPaused; // 0x1D

	// Methods
	internal void .ctor(bool isCapturing, VideoCaptureMode captureMode, VideoQualityLevel qualityLevel, bool isOverlayVisible, bool isPaused); // 0x10026B5BC
	public bool get_IsCapturing(); // 0x10026B614
	public VideoCaptureMode get_CaptureMode(); // 0x10026B61C
	public VideoQualityLevel get_QualityLevel(); // 0x10026B624
	public bool get_IsOverlayVisible(); // 0x10026B62C
	public bool get_IsPaused(); // 0x10026B634
	public override string ToString(); // 0x10026B63C
}

// Namespace: GooglePlayGames.BasicApi.Video
public interface IVideoClient // TypeDefIndex: 3259
{
	// Methods
	public abstract void GetCaptureCapabilities(Action`2<ResponseStatus, VideoCapabilities> callback); // 0
	public abstract void ShowCaptureOverlay(); // 0
	public abstract void GetCaptureState(Action`2<ResponseStatus, VideoCaptureState> callback); // 0
	public abstract void IsCaptureAvailable(VideoCaptureMode captureMode, Action`2<ResponseStatus, bool> callback); // 0
	public abstract bool IsCaptureSupported(); // 0
	public abstract void RegisterCaptureOverlayStateChangedListener(CaptureOverlayStateListener listener); // 0
	public abstract void UnregisterCaptureOverlayStateChangedListener(); // 0
}

// Namespace: GooglePlayGames.OurUtils
public class Logger // TypeDefIndex: 3260
{
	// Fields
	private static bool debugLogEnabled; // 0x0
	private static bool warningLogEnabled; // 0x1

	// Methods
	public void .ctor(); // 0x10026B8F8
	private static void .cctor(); // 0x10026B900
	public static bool get_DebugLogEnabled(); // 0x10026B954
	public static void set_DebugLogEnabled(bool value); // 0x10026B9BC
	public static bool get_WarningLogEnabled(); // 0x10026BA28
	public static void set_WarningLogEnabled(bool value); // 0x10026BA90
	public static void d(string msg); // 0x10026A000
	public static void w(string msg); // 0x10026AFEC
	public static void e(string msg); // 0x10026BCA4
	public static string describe(byte[] b); // 0x10026BDB0
	private static string ToLogMessage(string prefix, string logType, string msg); // 0x10026BE74
}

// Namespace: 
private sealed class <d>c__AnonStoreyA4 // TypeDefIndex: 3261
{
	// Fields
	internal string msg; // 0x10

	// Methods
	public void .ctor(); // 0x10026BAFC
	internal void <>m__3(); // 0x10026C060
}

// Namespace: 
private sealed class <w>c__AnonStoreyA5 // TypeDefIndex: 3262
{
	// Fields
	internal string msg; // 0x10

	// Methods
	public void .ctor(); // 0x10026BC9C
	internal void <>m__4(); // 0x10026C1EC
}

// Namespace: 
private sealed class <e>c__AnonStoreyA6 // TypeDefIndex: 3263
{
	// Fields
	internal string msg; // 0x10

	// Methods
	public void .ctor(); // 0x10026BDA8
	internal void <>m__5(); // 0x10026C138
}

// Namespace: GooglePlayGames.OurUtils
public static class Misc // TypeDefIndex: 3264
{
	// Methods
	public static bool BuffersAreIdentical(byte[] a, byte[] b); // 0x10026C2A0
	public static byte[] GetSubsetBytes(byte[] array, int offset, int length); // 0x10026C358
	public static T CheckNotNull(T value); // 0
	public static T CheckNotNull(T value, string paramName); // 0
}

// Namespace: GooglePlayGames.OurUtils
public class PlayGamesHelperObject : MonoBehaviour // TypeDefIndex: 3265
{
	// Fields
	private static PlayGamesHelperObject instance; // 0x0
	private static bool sIsDummy; // 0x8
	private static List`1<Action> sQueue; // 0x10
	private List`1<Action> localQueue; // 0x18
	private static bool sQueueEmpty; // 0x18
	private static List`1<Action`1<bool>> sPauseCallbackList; // 0x20
	private static List`1<Action`1<bool>> sFocusCallbackList; // 0x28

	// Methods
	public void .ctor(); // 0x10026C4A4
	private static void .cctor(); // 0x10026C514
	public static void CreateObject(); // 0x10026C60C
	public void Awake(); // 0x10026C7A0
	public void OnDisable(); // 0x10026C81C
	public static void RunCoroutine(IEnumerator action); // 0x10026C8EC
	public static void RunOnGameThread(Action action); // 0x10026BB04
	public void Update(); // 0x10026CA24
	public void OnApplicationFocus(bool focused); // 0x10026CC48
	public void OnApplicationPause(bool paused); // 0x10026CFD4
	public static void AddFocusCallback(Action`1<bool> callback); // 0x10026D360
	public static bool RemoveFocusCallback(Action`1<bool> callback); // 0x10026D430
	public static void AddPauseCallback(Action`1<bool> callback); // 0x10026D4B4
	public static bool RemovePauseCallback(Action`1<bool> callback); // 0x10026D584
}

// Namespace: 
private sealed class <RunCoroutine>c__AnonStoreyA7 // TypeDefIndex: 3266
{
	// Fields
	internal IEnumerator action; // 0x10

	// Methods
	public void .ctor(); // 0x10026CA1C
	internal void <>m__6(); // 0x10026D608
}

// Namespace: GooglePlayGames
public class PluginVersion // TypeDefIndex: 3267
{
	// Fields
	public const string VersionKeyCPP = "00911"; // 0x0
	public const string VersionKeyU5 = "00915"; // 0x0
	public const string VersionKey27Patch = "00927a"; // 0x0
	public const string VersionKeyJarResolver = "00928"; // 0x0
	public const string VersionKeyNativeCRM = "00930"; // 0x0
	public const string VersionKeyJNIStats = "00934"; // 0x0
	public const string VersionKeyJarResolverDLL = "00935"; // 0x0
	public const int VersionInt = 2368; // 0x0
	public const string VersionString = "0.9.40"; // 0x0
	public const string VersionKey = "00940"; // 0x0
	public const int MinGmsCoreVersionCode = 10200000; // 0x0
	public const string PlayServicesVersionConstraint = "10.2.0"; // 0x0

	// Methods
	public void .ctor(); // 0x10026D684
}

// Namespace: 
public class GameControllerExample : MonoBehaviour // TypeDefIndex: 3268
{
	// Fields
	private static string extraMessage; // 0x0
	private static IdsAvailableCallback <>f__am$cache1; // 0x8
	private static IdsAvailableCallback <>f__am$cache2; // 0x10
	private static OnPostNotificationSuccess <>f__am$cache3; // 0x18
	private static OnPostNotificationFailure <>f__am$cache4; // 0x20

	// Methods
	public void .ctor(); // 0x10024AB30
	private void Start(); // 0x10024AB38
	private void OneSignal_subscriptionObserver(OSSubscriptionStateChanges stateChanges); // 0x10024ADFC
	private void OneSignal_permissionObserver(OSPermissionStateChanges stateChanges); // 0x10024AF40
	private static void HandleNotificationReceived(OSNotification notification); // 0x10024B028
	public static void HandleNotificationOpened(OSNotificationOpenedResult result); // 0x10024B214
	private void OnGUI(); // 0x10024B410
	private static void <OnGUI>m__7(string userId, string pushToken); // 0x10024B964
	private static void <OnGUI>m__8(string userId, string pushToken); // 0x10024BA10
	private static void <OnGUI>m__9(Dictionary`2<string, object> responseSuccess); // 0x10024BD10
	private static void <OnGUI>m__A(Dictionary`2<string, object> responseFailure); // 0x10024BDB4
}

// Namespace: OneSignalPush.MiniJSON
public static class Json // TypeDefIndex: 3269
{
	// Methods
	public static object Deserialize(string json); // 0x100086030
	public static string Serialize(object obj); // 0x100087A38
}

// Namespace: 
private sealed class Parser : IDisposable // TypeDefIndex: 3270
{
	// Fields
	private const string WORD_BREAK = "{}[],:""; // 0x0
	private StringReader json; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map2; // 0x0

	// Methods
	private void .ctor(string jsonString); // 0x100089274
	public static bool IsWordBreak(char c); // 0x1000892F0
	public static object Parse(string jsonString); // 0x10008908C
	public void Dispose(); // 0x1000893BC
	private Dictionary`2<string, object> ParseObject(); // 0x1000893F0
	private List`1<object> ParseArray(); // 0x100089BF4
	private object ParseValue(); // 0x100089394
	private object ParseByToken(TOKEN token); // 0x100089D08
	private string ParseString(); // 0x1000898BC
	private object ParseNumber(); // 0x100089E3C
	private void EatWhitespace(); // 0x10008A094
	private char get_PeekChar(); // 0x10008A180
	private char get_NextChar(); // 0x100089F0C
	private string get_NextWord(); // 0x100089FB4
	private TOKEN get_NextToken(); // 0x10008955C
}

// Namespace: 
private sealed class TOKEN : Enum // TypeDefIndex: 3271
{
	// Fields
	public int value__; // 0x10
	public const TOKEN NONE = 0; // 0x0
	public const TOKEN CURLY_OPEN = 1; // 0x0
	public const TOKEN CURLY_CLOSE = 2; // 0x0
	public const TOKEN SQUARED_OPEN = 3; // 0x0
	public const TOKEN SQUARED_CLOSE = 4; // 0x0
	public const TOKEN COLON = 5; // 0x0
	public const TOKEN COMMA = 6; // 0x0
	public const TOKEN STRING = 7; // 0x0
	public const TOKEN NUMBER = 8; // 0x0
	public const TOKEN TRUE = 9; // 0x0
	public const TOKEN FALSE = 10; // 0x0
	public const TOKEN NULL = 11; // 0x0

}

// Namespace: 
private sealed class Serializer // TypeDefIndex: 3272
{
	// Fields
	private StringBuilder builder; // 0x10

	// Methods
	private void .ctor(); // 0x10008A228
	public static string Serialize(object obj); // 0x1000891FC
	private void SerializeValue(object value); // 0x10008A294
	private void SerializeObject(IDictionary obj); // 0x10008AA5C
	private void SerializeArray(IList anArray); // 0x10008A6E0
	private void SerializeString(string str); // 0x10008A43C
	private void SerializeOther(object value); // 0x10008AF5C
}

// Namespace: 
public class OSNotificationPayload // TypeDefIndex: 3273
{
	// Fields
	public string notificationID; // 0x10
	public string sound; // 0x18
	public string title; // 0x20
	public string body; // 0x28
	public string subtitle; // 0x30
	public string launchURL; // 0x38
	public Dictionary`2<string, object> additionalData; // 0x40
	public Dictionary`2<string, object> actionButtons; // 0x48
	public bool contentAvailable; // 0x50
	public int badge; // 0x54
	public string smallIcon; // 0x58
	public string largeIcon; // 0x60
	public string bigPicture; // 0x68
	public string smallIconAccentColor; // 0x70
	public string ledColor; // 0x78
	public int lockScreenVisibility; // 0x80
	public string groupKey; // 0x88
	public string groupMessage; // 0x90
	public string fromProjectNumber; // 0x98

	// Methods
	public void .ctor(); // 0x100086020
}

// Namespace: 
public class OSNotification // TypeDefIndex: 3274
{
	// Fields
	public bool isAppInFocus; // 0x10
	public bool shown; // 0x11
	public bool silentNotification; // 0x12
	public int androidNotificationId; // 0x14
	public DisplayType displayType; // 0x18
	public OSNotificationPayload payload; // 0x20

	// Methods
	public void .ctor(); // 0x100086018
}

// Namespace: 
public sealed class DisplayType : Enum // TypeDefIndex: 3275
{
	// Fields
	public int value__; // 0x10
	public const DisplayType Notification = 0; // 0x0
	public const DisplayType InAppAlert = 1; // 0x0
	public const DisplayType None = 2; // 0x0

}

// Namespace: 
public class OSNotificationAction // TypeDefIndex: 3276
{
	// Fields
	public string actionID; // 0x10
	public ActionType type; // 0x18

	// Methods
	public void .ctor(); // 0x1000864D8
}

// Namespace: 
public sealed class ActionType : Enum // TypeDefIndex: 3277
{
	// Fields
	public int value__; // 0x10
	public const ActionType Opened = 0; // 0x0
	public const ActionType ActionTaken = 1; // 0x0

}

// Namespace: 
public class OSNotificationOpenedResult // TypeDefIndex: 3278
{
	// Fields
	public OSNotificationAction action; // 0x10
	public OSNotification notification; // 0x18

	// Methods
	public void .ctor(); // 0x1000864E0
}

// Namespace: 
public sealed class OSNotificationPermission : Enum // TypeDefIndex: 3279
{
	// Fields
	public int value__; // 0x10
	public const OSNotificationPermission NotDetermined = 0; // 0x0
	public const OSNotificationPermission Authorized = 1; // 0x0
	public const OSNotificationPermission Denied = 2; // 0x0

}

// Namespace: 
public class OSPermissionState // TypeDefIndex: 3280
{
	// Fields
	public bool hasPrompted; // 0x10
	public OSNotificationPermission status; // 0x14

	// Methods
	public void .ctor(); // 0x100088378
}

// Namespace: 
public class OSPermissionStateChanges // TypeDefIndex: 3281
{
	// Fields
	public OSPermissionState to; // 0x10
	public OSPermissionState from; // 0x18

	// Methods
	public void .ctor(); // 0x100088550
}

// Namespace: 
public class OSSubscriptionState // TypeDefIndex: 3282
{
	// Fields
	public bool userSubscriptionSetting; // 0x10
	public string userId; // 0x18
	public string pushToken; // 0x20
	public bool subscribed; // 0x28

	// Methods
	public void .ctor(); // 0x100088538
}

// Namespace: 
public class OSSubscriptionStateChanges // TypeDefIndex: 3283
{
	// Fields
	public OSSubscriptionState to; // 0x10
	public OSSubscriptionState from; // 0x18

	// Methods
	public void .ctor(); // 0x100088558
}

// Namespace: 
public class OSPermissionSubscriptionState // TypeDefIndex: 3284
{
	// Fields
	public OSPermissionState permissionStatus; // 0x10
	public OSSubscriptionState subscriptionStatus; // 0x18

	// Methods
	public void .ctor(); // 0x100088548
}

// Namespace: 
public class OneSignal : MonoBehaviour // TypeDefIndex: 3285
{
	// Fields
	public const string kOSSettingsAutoPrompt = "kOSSettingsAutoPrompt"; // 0x0
	public const string kOSSettingsInAppLaunchURL = "kOSSettingsInAppLaunchURL"; // 0x0
	private const string gameObjectName = "OneSignalRuntimeObject_KEEP"; // 0x0
	public static IdsAvailableCallback idsAvailableDelegate; // 0x0
	public static TagsReceived tagsReceivedDelegate; // 0x8
	private static PromptForPushNotificationsUserResponse notificationUserResponseDelegate; // 0x10
	private static PermissionObservable internalPermissionObserver; // 0x18
	private static bool addedPermissionObserver; // 0x20
	private static SubscriptionObservable internalSubscriptionObserver; // 0x28
	private static bool addedSubscriptionObserver; // 0x30
	internal static UnityBuilder builder; // 0x38
	private static OneSignalPlatform oneSignalPlatform; // 0x40
	private static LOG_LEVEL logLevel; // 0x48
	private static LOG_LEVEL visualLogLevel; // 0x4C
	internal static OnPostNotificationSuccess postNotificationSuccessDelegate; // 0x50
	internal static OnPostNotificationFailure postNotificationFailureDelegate; // 0x58
	private static OSInFocusDisplayOption _inFocusDisplayType; // 0x60

	// Methods
	public void .ctor(); // 0x100083174
	private static void .cctor(); // 0x10008317C
	public static void add_permissionObserver(PermissionObservable value); // 0x1000831D8
	public static void remove_permissionObserver(PermissionObservable value); // 0x1000834C0
	public static void add_subscriptionObserver(SubscriptionObservable value); // 0x100083710
	public static void remove_subscriptionObserver(SubscriptionObservable value); // 0x1000839F8
	private static void addPermissionObserver(); // 0x100083304
	private static void addSubscriptionObserver(); // 0x10008383C
	public static UnityBuilder StartInit(string appID, optional string googleProjectNumber); // 0x100083C44
	private static void Init(); // 0x100083D34
	private static void initOneSignalPlatform(); // 0x100083D90
	private static void initIOS(); // 0x100083EBC
	private static void initUnityEditor(); // 0x100084210
	public static OSInFocusDisplayOption get_inFocusDisplayType(); // 0x100084138
	public static void set_inFocusDisplayType(OSInFocusDisplayOption value); // 0x100084260
	public static void SetLogLevel(LOG_LEVEL inLogLevel, LOG_LEVEL inVisualLevel); // 0x1000843C8
	public static void SendTag(string tagName, string tagValue); // 0x100084440
	public static void SendTags(Dictionary`2<string, string> tags); // 0x100084570
	public static void GetTags(TagsReceived inTagsReceivedDelegate); // 0x100084698
	public static void GetTags(); // 0x1000847B8
	public static void DeleteTag(string key); // 0x1000848D0
	public static void DeleteTags(IList`1<string> keys); // 0x1000849F8
	public static void RegisterForPushNotifications(); // 0x100084B20
	public static void PromptForPushNotificationsWithUserResponse(PromptForPushNotificationsUserResponse inDelegate); // 0x100084C38
	public static void IdsAvailable(IdsAvailableCallback inIdsAvailableDelegate); // 0x100084D58
	public static void IdsAvailable(); // 0x100084E80
	public static void EnableVibrate(bool enable); // 0x100084F98
	public static void EnableSound(bool enable); // 0x100084F9C
	public static void ClearOneSignalNotifications(); // 0x100084FA0
	public static void SetSubscription(bool enable); // 0x100084FA4
	public static void PostNotification(Dictionary`2<string, object> data); // 0x1000850CC
	public static void PostNotification(Dictionary`2<string, object> data, OnPostNotificationSuccess inOnPostNotificationSuccess, OnPostNotificationFailure inOnPostNotificationFailure); // 0x100085138
	public static void SyncHashedEmail(string email); // 0x10008526C
	public static void PromptLocation(); // 0x100085394
	public static OSPermissionSubscriptionState GetPermissionSubscriptionState(); // 0x1000854AC
	private OSNotification DictionaryToNotification(Dictionary`2<string, object> jsonObject); // 0x1000855C4
	private void onPushNotificationReceived(string jsonString); // 0x100086040
	private void onPushNotificationOpened(string jsonString); // 0x1000861F4
	private void onIdsAvailable(string jsonString); // 0x100086584
	private void onTagsReceived(string jsonString); // 0x10008685C
	private void onPostNotificationSuccess(string response); // 0x100086A08
	private void onPostNotificationFailed(string response); // 0x100086BB8
	private void onOSPermissionChanged(string stateChangesJSONString); // 0x100086D68
	private void onOSSubscriptionChanged(string stateChangesJSONString); // 0x100086F44
	private void onPromptForPushNotificationsWithUserResponse(string accepted); // 0x100087120
}

// Namespace: 
public sealed class LOG_LEVEL : Enum // TypeDefIndex: 3286
{
	// Fields
	public int value__; // 0x10
	public const LOG_LEVEL NONE = 0; // 0x0
	public const LOG_LEVEL FATAL = 1; // 0x0
	public const LOG_LEVEL ERROR = 2; // 0x0
	public const LOG_LEVEL WARN = 3; // 0x0
	public const LOG_LEVEL INFO = 4; // 0x0
	public const LOG_LEVEL DEBUG = 5; // 0x0
	public const LOG_LEVEL VERBOSE = 6; // 0x0

}

// Namespace: 
public sealed class OSInFocusDisplayOption : Enum // TypeDefIndex: 3287
{
	// Fields
	public int value__; // 0x10
	public const OSInFocusDisplayOption None = 0; // 0x0
	public const OSInFocusDisplayOption InAppAlert = 1; // 0x0
	public const OSInFocusDisplayOption Notification = 2; // 0x0

}

// Namespace: 
public class UnityBuilder // TypeDefIndex: 3288
{
	// Fields
	public string appID; // 0x10
	public string googleProjectNumber; // 0x18
	public Dictionary`2<string, bool> iOSSettings; // 0x20
	public NotificationReceived notificationReceivedDelegate; // 0x28
	public NotificationOpened notificationOpenedDelegate; // 0x30

	// Methods
	public void .ctor(); // 0x100083D2C
	public UnityBuilder HandleNotificationReceived(NotificationReceived inNotificationReceivedDelegate); // 0x1000876F0
	public UnityBuilder HandleNotificationOpened(NotificationOpened inNotificationOpenedDelegate); // 0x1000876F8
	public UnityBuilder InFocusDisplaying(OSInFocusDisplayOption display); // 0x100087700
	public UnityBuilder Settings(Dictionary`2<string, bool> settings); // 0x100087778
	public void EndInit(); // 0x100087780
}

// Namespace: 
public sealed class NotificationReceived : MulticastDelegate // TypeDefIndex: 3289
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087384
	public virtual void Invoke(OSNotification notification); // 0x100086158
	public virtual IAsyncResult BeginInvoke(OSNotification notification, AsyncCallback callback, object object); // 0x100087394
	public virtual void EndInvoke(IAsyncResult result); // 0x1000873E4
}

// Namespace: 
public sealed class NotificationOpened : MulticastDelegate // TypeDefIndex: 3290
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087318
	public virtual void Invoke(OSNotificationOpenedResult result); // 0x1000864E8
	public virtual IAsyncResult BeginInvoke(OSNotificationOpenedResult result, AsyncCallback callback, object object); // 0x100087328
	public virtual void EndInvoke(IAsyncResult result); // 0x100087378
}

// Namespace: 
public sealed class IdsAvailableCallback : MulticastDelegate // TypeDefIndex: 3291
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087244
	public virtual void Invoke(string playerID, string pushToken); // 0x10008679C
	public virtual IAsyncResult BeginInvoke(string playerID, string pushToken, AsyncCallback callback, object object); // 0x1000872B0
	public virtual void EndInvoke(IAsyncResult result); // 0x10008730C
}

// Namespace: 
public sealed class TagsReceived : MulticastDelegate // TypeDefIndex: 3292
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087684
	public virtual void Invoke(Dictionary`2<string, object> tags); // 0x10008696C
	public virtual IAsyncResult BeginInvoke(Dictionary`2<string, object> tags, AsyncCallback callback, object object); // 0x100087694
	public virtual void EndInvoke(IAsyncResult result); // 0x1000876E4
}

// Namespace: 
public sealed class PromptForPushNotificationsUserResponse : MulticastDelegate // TypeDefIndex: 3293
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087534
	public virtual void Invoke(bool accepted); // 0x1000871D0
	public virtual IAsyncResult BeginInvoke(bool accepted, AsyncCallback callback, object object); // 0x100087554
	public virtual void EndInvoke(IAsyncResult result); // 0x10008760C
}

// Namespace: 
public sealed class OnPostNotificationSuccess : MulticastDelegate // TypeDefIndex: 3294
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10008745C
	public virtual void Invoke(Dictionary`2<string, object> response); // 0x100086B1C
	public virtual IAsyncResult BeginInvoke(Dictionary`2<string, object> response, AsyncCallback callback, object object); // 0x10008746C
	public virtual void EndInvoke(IAsyncResult result); // 0x1000874BC
}

// Namespace: 
public sealed class OnPostNotificationFailure : MulticastDelegate // TypeDefIndex: 3295
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000873F0
	public virtual void Invoke(Dictionary`2<string, object> response); // 0x100086CCC
	public virtual IAsyncResult BeginInvoke(Dictionary`2<string, object> response, AsyncCallback callback, object object); // 0x100087400
	public virtual void EndInvoke(IAsyncResult result); // 0x100087450
}

// Namespace: 
public sealed class PermissionObservable : MulticastDelegate // TypeDefIndex: 3296
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000874C8
	public virtual void Invoke(OSPermissionStateChanges stateChanges); // 0x100086EA8
	public virtual IAsyncResult BeginInvoke(OSPermissionStateChanges stateChanges, AsyncCallback callback, object object); // 0x1000874D8
	public virtual void EndInvoke(IAsyncResult result); // 0x100087528
}

// Namespace: 
public sealed class SubscriptionObservable : MulticastDelegate // TypeDefIndex: 3297
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100087618
	public virtual void Invoke(OSSubscriptionStateChanges stateChanges); // 0x100087084
	public virtual IAsyncResult BeginInvoke(OSSubscriptionStateChanges stateChanges, AsyncCallback callback, object object); // 0x100087628
	public virtual void EndInvoke(IAsyncResult result); // 0x100087678
}

// Namespace: 
public class OneSignalIOS : OneSignalPlatform // TypeDefIndex: 3298
{
	// Methods
	public void .ctor(string gameObjectName, string appId, bool autoPrompt, bool inAppLaunchURLs, OSInFocusDisplayOption displayOption, LOG_LEVEL logLevel, LOG_LEVEL visualLevel); // 0x1000841A0
	public static extern void _init(string listenerName, string appId, bool autoPrompt, bool inAppLaunchURLs, int displayOption, int logLevel, int visualLogLevel); // 0x1000877DC
	public static extern void _registerForPushNotifications(); // 0x100087868
	public static extern void _sendTag(string tagName, string tagValue); // 0x10008786C
	public static extern void _sendTags(string tags); // 0x1000878B8
	public static extern void _getTags(); // 0x1000878E4
	public static extern void _deleteTag(string key); // 0x1000878E8
	public static extern void _deleteTags(string keys); // 0x100087914
	public static extern void _idsAvailable(); // 0x100087940
	public static extern void _setSubscription(bool enable); // 0x100087944
	public static extern void _postNotification(string json); // 0x10008794C
	public static extern void _syncHashedEmail(string email); // 0x100087978
	public static extern void _promptLocation(); // 0x1000879A4
	public static extern void _setInFocusDisplayType(int type); // 0x1000879A8
	public static extern void _promptForPushNotificationsWithUserResponse(); // 0x1000879B0
	public static extern void _addPermissionObserver(); // 0x1000879B4
	public static extern void _removePermissionObserver(); // 0x1000879B8
	public static extern void _addSubscriptionObserver(); // 0x1000879BC
	public static extern void _removeSubscriptionObserver(); // 0x1000879C0
	public static extern string _getPermissionSubscriptionState(); // 0x1000879C4
	public static extern void _setOneSignalLogLevel(int logLevel, int visualLogLevel); // 0x1000879F8
	public void RegisterForPushNotifications(); // 0x100087A04
	public void SendTag(string tagName, string tagValue); // 0x100087A08
	public void SendTags(IDictionary`2<string, string> tags); // 0x100087A0C
	public void GetTags(); // 0x100087A3C
	public void DeleteTag(string key); // 0x100087A40
	public void DeleteTags(IList`1<string> keys); // 0x100087A6C
	public void IdsAvailable(); // 0x100087A98
	public void SetSubscription(bool enable); // 0x100087A9C
	public void PostNotification(Dictionary`2<string, object> data); // 0x100087AA4
	public void SyncHashedEmail(string email); // 0x100087AD0
	public void PromptLocation(); // 0x100087AFC
	public void SetLogLevel(LOG_LEVEL logLevel, LOG_LEVEL visualLevel); // 0x100087B00
	public void SetInFocusDisplaying(OSInFocusDisplayOption display); // 0x100087B0C
	public void promptForPushNotificationsWithUserResponse(); // 0x100087B14
	public void addPermissionObserver(); // 0x100087B18
	public void removePermissionObserver(); // 0x100087B1C
	public void addSubscriptionObserver(); // 0x100087B20
	public void removeSubscriptionObserver(); // 0x100087B24
	public OSPermissionSubscriptionState getPermissionSubscriptionState(); // 0x100087B28
	public OSPermissionStateChanges parseOSPermissionStateChanges(string jsonStat); // 0x100087DA8
	public OSSubscriptionStateChanges parseOSSubscriptionStateChanges(string jsonStat); // 0x100087FF4
	public OSPermissionState parseOSPermissionState(object stateDict); // 0x100088240
	public OSSubscriptionState parseOSSubscriptionState(object stateDict); // 0x100088380
}

// Namespace: 
public interface OneSignalPlatform // TypeDefIndex: 3299
{
	// Methods
	public abstract void SetLogLevel(LOG_LEVEL logLevel, LOG_LEVEL visualLevel); // 0
	public abstract void RegisterForPushNotifications(); // 0
	public abstract void promptForPushNotificationsWithUserResponse(); // 0
	public abstract void SendTag(string tagName, string tagValue); // 0
	public abstract void SendTags(IDictionary`2<string, string> tags); // 0
	public abstract void GetTags(); // 0
	public abstract void DeleteTag(string key); // 0
	public abstract void DeleteTags(IList`1<string> keys); // 0
	public abstract void IdsAvailable(); // 0
	public abstract void SetSubscription(bool enable); // 0
	public abstract void PostNotification(Dictionary`2<string, object> data); // 0
	public abstract void SyncHashedEmail(string email); // 0
	public abstract void PromptLocation(); // 0
	public abstract void SetInFocusDisplaying(OSInFocusDisplayOption display); // 0
	public abstract void addPermissionObserver(); // 0
	public abstract void removePermissionObserver(); // 0
	public abstract void addSubscriptionObserver(); // 0
	public abstract void removeSubscriptionObserver(); // 0
	public abstract OSPermissionSubscriptionState getPermissionSubscriptionState(); // 0
	public abstract OSPermissionState parseOSPermissionState(object stateDict); // 0
	public abstract OSSubscriptionState parseOSSubscriptionState(object stateDict); // 0
	public abstract OSPermissionStateChanges parseOSPermissionStateChanges(string stateChangesJSONString); // 0
	public abstract OSSubscriptionStateChanges parseOSSubscriptionStateChanges(string stateChangesJSONString); // 0
}

// Namespace: 
internal class OneSignalPlatformHelper // TypeDefIndex: 3300
{
	// Methods
	public void .ctor(); // 0x100088540
	internal static OSPermissionSubscriptionState parsePermissionSubscriptionState(OneSignalPlatform platform, string jsonStr); // 0x100087B6C
	internal static OSPermissionStateChanges parseOSPermissionStateChanges(OneSignalPlatform platform, string stateChangesJSONString); // 0x100087DB8
	internal static OSSubscriptionStateChanges parseOSSubscriptionStateChanges(OneSignalPlatform platform, string stateChangesJSONString); // 0x100088004
}

// Namespace: 
public class OpenIABTest : MonoBehaviour // TypeDefIndex: 3301
{
	// Fields
	private const string SKU = "sku"; // 0x0
	private const float X_OFFSET = 10; // 0x0
	private const float Y_OFFSET = 10; // 0x0
	private const int SMALL_SCREEN_SIZE = 800; // 0x0
	private const int LARGE_FONT_SIZE = 34; // 0x0
	private const int SMALL_FONT_SIZE = 24; // 0x0
	private const int LARGE_WIDTH = 380; // 0x0
	private const int SMALL_WIDTH = 160; // 0x0
	private const int LARGE_HEIGHT = 100; // 0x0
	private const int SMALL_HEIGHT = 40; // 0x0
	private string _label; // 0x18
	private bool _isInitialized; // 0x20
	private Inventory _inventory; // 0x28
	private int _column; // 0x30
	private int _row; // 0x34

	// Methods
	public void .ctor(); // 0x10008B18C
	private void OnEnable(); // 0x10008B204
	private void OnDisable(); // 0x10008B460
	private void Start(); // 0x10008B6BC
	private bool Button(string text); // 0x10008B838
	private void OnGUI(); // 0x10008B994
	private void billingSupportedEvent(); // 0x10008BEAC
	private void billingNotSupportedEvent(string error); // 0x10008BF28
	private void queryInventorySucceededEvent(Inventory inventory); // 0x10008BFD4
	private void queryInventoryFailedEvent(string error); // 0x10008C0C0
	private void purchaseSucceededEvent(Purchase purchase); // 0x10008C180
	private void purchaseFailedEvent(int errorCode, string errorMessage); // 0x10008C288
	private void consumePurchaseSucceededEvent(Purchase purchase); // 0x10008C364
	private void consumePurchaseFailedEvent(string error); // 0x10008C46C
}

// Namespace: 
public class AchivementChecker : MonoBehaviour // TypeDefIndex: 3302
{
	// Fields
	public Sections currentSection; // 0x18
	protected tk2dSprite m_Sprite; // 0x20
	protected Color m_Color; // 0x28

	// Methods
	public void .ctor(); // 0x100046794
	private void Awake(); // 0x10004679C
	private void OnEnable(); // 0x1000467D4
	protected virtual void Init(); // 0x100046820
	protected virtual void UnSubscribe(); // 0x100046C3C
	private void OnDisable(); // 0x100046D8C
	protected void ShowLabel(bool enable); // 0x10004695C
	protected void CheckAchievements(); // 0x100046998
}

// Namespace: 
public class AchivementItemRow : MonoBehaviour // TypeDefIndex: 3303
{
	// Fields
	public tk2dSprite achivIcon; // 0x18
	public tk2dTextMesh achivName; // 0x20
	public Transform rewardGroup; // 0x28
	public Transform progressGroup; // 0x30
	public tk2dUIProgressBar progressBar; // 0x38
	public tk2dTextMesh progressLabel; // 0x40
	public tk2dUIItem getRewardBtn; // 0x48
	public string nameA; // 0x50
	public string descA; // 0x58
	public Color32 inProgressColor1; // 0x60
	public Color32 inProgressColor2; // 0x64
	public Color32 getRewardColor1; // 0x68
	public Color32 getRewardColor2; // 0x6C
	public Color32 completedColor1; // 0x70
	public Color32 completedColor2; // 0x74
	private Stage _currentStage; // 0x78
	private AchievementStages thisAchievementStages; // 0x80
	public static bool request_pending; // 0x0
	private static Action <>f__am$cache12; // 0x8

	// Methods
	public void .ctor(); // 0x100046DD8
	private Stage get_currentStage(); // 0x100046EF8
	private void set_currentStage(Stage value); // 0x100046F00
	private void Start(); // 0x1000473F8
	private void OnGetRewardClick(); // 0x100047488
	private void OnAchievementReward(int id); // 0x10004785C
	public void UpdateVisualValue(); // 0x100047A08
	public void Init(AchievementStages aStage); // 0x100047F44
	private void UpdateAchivInfo(); // 0x100047A0C
	private void OnMultiline(); // 0x100048070
	public void RemoveSeparator(); // 0x1000483F0
	private static void <OnGetRewardClick>m__B(); // 0x1000484D8
}

// Namespace: 
public class AchivementsMenuBase : MonoBehaviour // TypeDefIndex: 3304
{
	// Fields
	public MenuTabsControl tabs; // 0x18
	public Sections currentSection; // 0x20
	public Section[] sections; // 0x28

	// Methods
	public void .ctor(); // 0x100048500
	public void SetTab(Sections section); // 0x100048508
	private void OnEnable(); // 0x1000485F4
	private void OnDisable(); // 0x100048670
	private void Start(); // 0x1000486F8
	private void OnTabSelect(int index); // 0x1000488BC
	private void ShowSection(Sections section); // 0x1000488D8
	private void OnMaskCover(int index); // 0x1000488F4
	private void ShowCurrentSection(); // 0x100048548
	private void HideAllSections(); // 0x1000488FC
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 3305
{
	// Fields
	public int value__; // 0x10
	public const Sections vip = 0; // 0x0
	public const Sections achivements = 1; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 3306
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x100048984
}

// Namespace: 
public class AchivementsTab : MonoBehaviour // TypeDefIndex: 3307
{
	// Fields
	public static Sections tabWhenAchivementsOpen; // 0x0

	// Methods
	public void .ctor(); // 0x10004898C
}

// Namespace: 
public class AchivementsTabSetButton : MonoBehaviour // TypeDefIndex: 3308
{
	// Fields
	public bool vip; // 0x18
	private tk2dUIItem button; // 0x20

	// Methods
	public void .ctor(); // 0x100048994
	private void Start(); // 0x10004899C
	private void OnClick(); // 0x100048A44
}

// Namespace: adsystem
public sealed class EExecuteCallbacks : Enum // TypeDefIndex: 3309
{
	// Fields
	public int value__; // 0x10
	public const EExecuteCallbacks EXECUTE_CALLBACK_ALL = -1; // 0x0
	public const EExecuteCallbacks EXECUTE_CALLBACK_NONE = 0; // 0x0

}

// Namespace: adsystem
public sealed class EGravity : Enum // TypeDefIndex: 3310
{
	// Fields
	public int value__; // 0x10
	public const EGravity AdSystemGravityLeft = 0; // 0x0
	public const EGravity AdSystemGravityHorizontalCenter = 1; // 0x0
	public const EGravity AdSystemGravityRight = 2; // 0x0
	public const EGravity AdSystemGravityTop = 0; // 0x0
	public const EGravity AdSystemGravityVerticalCenter = 4; // 0x0
	public const EGravity AdSystemGravityBottom = 8; // 0x0

}

// Namespace: adsystem
public static class AdSystem // TypeDefIndex: 3311
{
	// Fields
	internal const string DLL_FILE_NAME = "__Internal"; // 0x0

	// Methods
	private static extern void AdSystem_AdSystem(string teamId, int callbacksCount); // 0x100048AA4
	private static extern int AdSystem_ExecuteCallbacks(); // 0x100048AD8
	private static extern void AdSystem_SetBannersField(float x, float y, float wd, float ht, int g); // 0x100048ADC
	private static extern void AdSystem_OnApplicationPause(bool pauseStatus); // 0x100048AE4
	private static extern void AdSystem_OnApplicationQuit(); // 0x100048AEC
	public static void Assert(bool cond); // 0x100048AF0
	public static void Assert(bool cond, string message); // 0x100048AF4
	private static void Fail(string message); // 0x100048AF8
	public static void CreateAdSystemInstance(string teamId, int callbacksCount); // 0x100048EC4
	public static int ExecuteCallbacks(); // 0x100048EF8
	public static void SetRectForBanners(Vector2 pos, Vector2 dim, int gravity); // 0x100048EFC
	public static void OnApplicationPause(bool pauseStatus); // 0x100048F04
	public static void OnApplicationQuit(); // 0x100048F0C
}

// Namespace: adsystem
public class Advertisers // TypeDefIndex: 3312
{
	// Fields
	private IntPtr nativeRef; // 0x10

	// Methods
	public void .ctor(Communicator communicator, Parameters parameters); // 0x100048F10
	private static extern IntPtr Advertisers_Advertisers(IntPtr communicator, IntPtr parameters); // 0x10004904C
	private static extern void Advertisers_Release(IntPtr instance); // 0x100049058
	public void Release(); // 0x100049060
	private bool CheckNativePointer(); // 0x1000490C8
}

// Namespace: adsystem
public interface IBanners // TypeDefIndex: 3313
{
	// Methods
	public abstract void OnBannersOpen(EProviders provider); // 0
	public abstract void OnBannersClose(EProviders provider); // 0
	public abstract void OnBannersLoaded(EProviders provider); // 0
	public abstract void OnBannersLoadFailed(EProviders provider); // 0
}

// Namespace: adsystem
public class Banners // TypeDefIndex: 3314
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IBanners listener, Parameters parameters); // 0x100049128
	private static void .cctor(); // 0x1000492EC
	private static void AdSystemOnBannersOpen(IntPtr listener, int provider); // 0x100049494
	private static void AdSystemOnBannersClose(IntPtr listener, int provider); // 0x10004964C
	private static void AdSystemOnBannersLoaded(IntPtr listener, int provider); // 0x100049808
	private static void AdSystemOnBannersLoadFailed(IntPtr listener, int provider); // 0x1000499C4
	private static extern void Banners_Callbacks(AdSystemOnBannersOpen c1, AdSystemOnBannersClose c2, AdSystemOnBannersLoaded c3, AdSystemOnBannersLoadFailed c4); // 0x10004942C
	private static extern IntPtr Banners_Banners(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x1000492DC
	private static extern void Banners_Release(IntPtr instance); // 0x100049B80
	private static extern void Banners_Show(IntPtr instance); // 0x100049B88
	private static extern bool Banners_Hide(IntPtr instance); // 0x100049B90
	private static extern bool Banners_AllowedToShow(IntPtr instance); // 0x100049BB0
	public void Release(); // 0x100049BD0
	public void Show(); // 0x100049D44
	public void Hide(); // 0x100049DB4
	public bool AllowedToShow(); // 0x100049E24
	private bool CheckNativePointer(); // 0x100049CE4
}

// Namespace: adsystem
public interface ICommunicator // TypeDefIndex: 3315
{
	// Methods
	public abstract void OnCommunicatorResponseReceived(); // 0
	public abstract void OnCommunicatorResponseReceiveFailed(); // 0
	public abstract void OnCommunicatorDeviceIdLoaded(); // 0
}

// Namespace: adsystem
public class Communicator // TypeDefIndex: 3316
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(ICommunicator listener, Parameters parameters); // 0x100049EA0
	private static void .cctor(); // 0x10004A040
	private static void AdSystemOnCommunicatorResponseReceived(IntPtr listener); // 0x10004A194
	private static void AdSystemOnCommunicatorResponseReceiveFailed(IntPtr listener); // 0x10004A33C
	private static void AdSystemOnCommunicatorDeviceIdLoaded(IntPtr listener); // 0x10004A4E8
	private static extern void Communicator_Callbacks(AdSystemOnCommunicatorResponseReceived c1, AdSystemOnCommunicatorResponseReceiveFailed c2, AdSystemOnCommunicatorDeviceIdLoaded c3); // 0x10004A140
	private static extern IntPtr Communicator_Communicator(IntPtr listener, IntPtr parameters); // 0x10004A034
	private static extern void Communicator_Release(IntPtr instance); // 0x10004A694
	private static extern void Communicator_Start(IntPtr instance); // 0x10004A69C
	private static extern bool Communicator_IsTestMode(IntPtr instance); // 0x10004A6A4
	private static extern long Communicator_GetTimeStamp(IntPtr instance); // 0x10004A6C4
	private static extern long Communicator_GetServerTime(IntPtr instance); // 0x10004A6CC
	private static extern string Communicator_GetDeviceID(IntPtr instance); // 0x10004A6D4
	private static extern void Communicator_SetLanguage(IntPtr instance, string language); // 0x10004A70C
	private static extern void Communicator_ReportError(IntPtr instance, string error, bool block); // 0x10004A744
	public void Release(); // 0x10004A78C
	public void Start(); // 0x10004A900
	public bool IsTestMode(); // 0x10004A970
	public long GetTimeStamp(); // 0x10004A9EC
	public long GetServerTime(); // 0x10004AA5C
	public string GetDeviceID(); // 0x10004AACC
	public void SetLanguage(string lang); // 0x10004AB58
	public void ReportError(string message, bool block); // 0x10004ABEC
	internal IntPtr GetRef(); // 0x100048FB4
	private bool CheckNativePointer(); // 0x10004A8A0
}

// Namespace: adsystem
public sealed class EDLCError : Enum // TypeDefIndex: 3317
{
	// Fields
	public int value__; // 0x10
	public const EDLCError DLC_ERROR_UNKNOWN = 0; // 0x0
	public const EDLCError DLC_ERROR_NO_INTERNET_CONNECTION = 1; // 0x0
	public const EDLCError DLC_ERROR_INSUFFICIENT_STORAGE_AVAILABLE = 2; // 0x0

}

// Namespace: adsystem
public interface IDLC // TypeDefIndex: 3318
{
	// Methods
	public abstract void OnDlcListUpdated(); // 0
	public abstract void OnDlcListLoadedFromCache(); // 0
	public abstract void OnDlcFileUpdateStart(int id, long size); // 0
	public abstract void OnDlcFileUpdateProgress(int id, long current, long total); // 0
	public abstract void OnDlcFileUpdateComplete(int id, string path); // 0
	public abstract void OnDlcFileUpdateCanceled(int id); // 0
	public abstract void OnDlcFileUpdateFailed(int id, EDLCError error); // 0
	public abstract void OnDlcFileUpdateUpToDate(int id); // 0
	public abstract void OnDlcIsFileUpToDate(int id, bool upToDate); // 0
}

// Namespace: adsystem
public class DLC // TypeDefIndex: 3319
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IDLC listener, Parameters parameters); // 0x10004AD40
	private static void .cctor(); // 0x10004AF04
	private static void AdSystemOnDlcListUpdated(IntPtr listener); // 0x10004B284
	private static void AdSystemOnDlcListLoadedFromCache(IntPtr listener); // 0x10004B42C
	private static void AdSystemOnDlcFileUpdateStart(IntPtr listener, int id, long size); // 0x10004B5D8
	private static void AdSystemOnDlcFileUpdateProgress(IntPtr listener, int id, long current, long total); // 0x10004B7B4
	private static void AdSystemOnDlcFileUpdateComplete(IntPtr listener, int id, string path); // 0x10004B9A0
	private static void AdSystemOnDlcFileUpdateCanceled(IntPtr listener, int id); // 0x10004BB84
	private static void AdSystemOnDlcFileUpdateFailed(IntPtr listener, int id, int error); // 0x10004BD40
	private static void AdSystemOnDlcFileUpdateUpToDate(IntPtr listener, int id); // 0x10004BF1C
	private static void AdSystemOnDlcIsFileUpToDate(IntPtr listener, int id, bool upToDate); // 0x10004C0D8
	private static extern void DLC_Callbacks(AdSystemOnDlcListUpdated c1, AdSystemOnDlcListLoadedFromCache c2, AdSystemOnDlcFileUpdateStart c3, AdSystemOnDlcFileUpdateProgress c4, AdSystemOnDlcFileUpdateComplete c5, AdSystemOnDlcFileUpdateCanceled c6, AdSystemOnDlcFileUpdateFailed c7, AdSystemOnDlcFileUpdateUpToDate c8, AdSystemOnDlcIsFileUpToDate c9); // 0x10004B1A4
	private static extern IntPtr DLC_DLC(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x10004AEF4
	private static extern void DLC_Release(IntPtr instance); // 0x10004C2B8
	private static extern int DLC_UpdateDlcFile(IntPtr instance, string originalName, string customName, bool forceUpdate); // 0x10004C2C0
	private static extern void DLC_CancelDlcUpdate(IntPtr instance, int id); // 0x10004C330
	private static extern bool DLC_DlcFileExists(IntPtr instance, string name); // 0x10004C33C
	private static extern int DLC_DlcFileUpToDate(IntPtr instance, string originalName, string customName); // 0x10004C384
	private static extern int DLC_DlcFileSize(IntPtr instance, string name); // 0x10004C3EC
	private static extern string DLC_GetPathToDlcFolder(IntPtr instance); // 0x10004C430
	public void Release(); // 0x10004C468
	public int UpdateDlcFile(string name, bool forceUpdate); // 0x10004C5DC
	public int UpdateDlcFile(string originalName, string customName, bool forceUpdate); // 0x10004C5EC
	public void CancelDlcUpdate(int id); // 0x10004C684
	public bool DlcFileExists(string name); // 0x10004C704
	public int DlcFileUpToDate(string name); // 0x10004C7A8
	public int DlcFileUpToDate(string originalName, string customName); // 0x10004C7B0
	public int DlcFileSize(string name); // 0x10004C838
	public string GetPathToDlcFolder(); // 0x10004C8D8
	private bool CheckNativePointer(); // 0x10004C57C
}

// Namespace: adsystem
internal class Dictionary // TypeDefIndex: 3320
{
	// Methods
	public void .ctor(); // 0x10004AC88
	protected static extern IntPtr Dictionary_Dictionary(); // 0x10004AC90
	protected static extern void Dictionary_Release(IntPtr instance); // 0x10004AC94
	protected static extern void Dictionary_Add_String(IntPtr instance, string key, string value); // 0x10004AC9C
	protected static extern void Dictionary_Add_Integer(IntPtr instance, string key, int value); // 0x10004ACF8
}

// Namespace: adsystem
internal class Dictionary`1 : Dictionary // TypeDefIndex: 3321
{
	// Fields
	private IntPtr nativeRef; // 0x0

	// Methods
	public void .ctor(); // 0
	public void Release(); // 0
	public void Add(string key, T value); // 0
	public IntPtr GetRef(); // 0
	private bool CheckNativePointer(); // 0
}

// Namespace: 
private sealed class <Add>c__AnonStoreyA8 // TypeDefIndex: 3322
{
	// Fields
	internal string key; // 0x0
	internal T value; // 0x0
	internal Dictionary`1<T> <>f__this; // 0x0

	// Methods
	public void .ctor(); // 0
	internal void <>m__C(); // 0
	internal void <>m__D(); // 0
}

// Namespace: adsystem
public class Events // TypeDefIndex: 3323
{
	// Fields
	private IntPtr nativeRef; // 0x10

	// Methods
	public void .ctor(Communicator communicator, Parameters parameters); // 0x10004C964
	private static extern IntPtr Events_Events(IntPtr communicator, IntPtr parameters); // 0x10004CA08
	private static extern void Events_Release(IntPtr instance); // 0x10004CA14
	private static extern void Events_SendEventString(IntPtr instance, string ev); // 0x10004CA1C
	private static extern void Events_SendEventDictionary(IntPtr instance, string ev, IntPtr parameters); // 0x10004CA54
	private static extern void Events_SendEventInteger(IntPtr instance, int ev, int count); // 0x10004CA9C
	private static extern void Events_SetStoreLocale(IntPtr instance, string locale); // 0x10004CAAC
	public void Release(); // 0x10004CAE4
	public void SendEvent(string ev); // 0x10004CBAC
	public void SendEvent(string ev, IDictionary`2<string, string> parameters); // 0x10004CC20
	public void SendEvent(int ev, int count); // 0x10004D03C
	public void SetStoreLocale(string locale); // 0x10004D0A0
	private bool CheckNativePointer(); // 0x10004CB4C
}

// Namespace: adsystem
public sealed class EFacebookInviteStatus : Enum // TypeDefIndex: 3324
{
	// Fields
	public int value__; // 0x10
	public const EFacebookInviteStatus STATUS_OK = 0; // 0x0
	public const EFacebookInviteStatus STATUS_ALREADY_INVITED = 1; // 0x0
	public const EFacebookInviteStatus STATUS_SELF = 2; // 0x0
	public const EFacebookInviteStatus STATUS_DUPLICATE = 3; // 0x0
	public const EFacebookInviteStatus STATUS_UNKNOWN_ERROR = 4; // 0x0

}

// Namespace: adsystem
public interface IFriends // TypeDefIndex: 3325
{
	// Methods
	public abstract void OnFriendsInviteFailed(int index); // 0
	public abstract void OnFriendsInviteResponseReceived(int index, IDictionary`2<string, EFacebookInviteStatus> data); // 0
	public abstract void OnFriendsProgressFailed(int index); // 0
	public abstract void OnFriendsProgressReceived(int index, IDictionary`2<string, byte[]> progress); // 0
	public abstract void OnFriendsChallengersFailed(int index); // 0
	public abstract void OnFriendsChallengersReceived(int index, string[] challengers); // 0
}

// Namespace: adsystem
public class Friends // TypeDefIndex: 3326
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IFriends listener); // 0x10004D114
	private static void .cctor(); // 0x10004D2B0
	private static void AdSystemOnFriendsInviteFailed(IntPtr listener, int index); // 0x10004D844
	private static void AdSystemOnFriendsProgressFailed(IntPtr listener, int index); // 0x10004D9FC
	private static void AdSystemOnFriendsInviteResponseReceived(IntPtr listener, int index, IntPtr data); // 0x10004DBB8
	private static void AdSystemOnFriendsProgressReceived(IntPtr listener, int index, IntPtr data); // 0x10004DDD8
	private static void AdSystemOnFriendsChallengersFailed(IntPtr listener, int index); // 0x10004DFF8
	private static void AdSystemOnFriendsChallengersReceived(IntPtr listener, int index, IntPtr challengers); // 0x10004E1B4
	private static IntPtr AdSystemEnumDict(); // 0x10004E3D4
	private static void AdSystemEnumDictAdd(IntPtr instance, string key, int value); // 0x10004E4A0
	private static IntPtr AdSystemByteArrayDict(); // 0x10004E5DC
	private static void AdSystemDictRelease(IntPtr instance); // 0x10004E6A8
	private static void AdSystemByteArrayDictAdd(IntPtr instance, string key, IntPtr value); // 0x10004E744
	private static IntPtr AdSystemStringArray(int size); // 0x10004E8BC
	private static void AdSystemStringArraySet(IntPtr instance, int index, string value); // 0x10004E990
	private static void AdSystemStringArrayRelease(IntPtr instance); // 0x10004EAF4
	private static IntPtr AdSystemCreateByteArray(IntPtr data, int size); // 0x10004EB90
	private static void AdSystemDestroyByteArray(IntPtr instance); // 0x10004ECB8
	private static extern void Friends_Callbacks(AdSystemOnFriendsInviteFailed c1, AdSystemOnFriendsProgressFailed c2, AdSystemOnFriendsInviteResponseReceived c3, AdSystemOnFriendsProgressReceived c4, AdSystemOnFriendsChallengersFailed c5, AdSystemOnFriendsChallengersReceived c6, AdSystemEnumDict b1, AdSystemEnumDictAdd b2, AdSystemByteArrayDict b3, AdSystemByteArrayDictAdd b4, AdSystemDictRelease b5, AdSystemCreateByteArray h1, AdSystemDestroyByteArray h2, AdSystemStringArray s1, AdSystemStringArraySet s2, AdSystemStringArrayRelease s3); // 0x10004D6D8
	private static extern IntPtr Friends_Friends(IntPtr communicator, IntPtr listener); // 0x10004D2A4
	private static extern void Friends_Release(IntPtr instance); // 0x10004ED54
	private static extern void Friends_SetId(IntPtr instance, int type, string id); // 0x10004ED5C
	private static extern void Friends_UnsetId(IntPtr instance, int type); // 0x10004EDA4
	private static extern int Friends_InviteFriends(IntPtr instance, int type, string[] ids, int size, int pointsType); // 0x10004EDB0
	private static extern void Friends_SetProgress(IntPtr instance, IntPtr progress, int size); // 0x10004EE68
	private static extern int Friends_RequestFriendsProgress(IntPtr instance, string[] friendIds, int size); // 0x10004EE78
	private static extern int Friends_GetChallengers(IntPtr instance); // 0x10004EF0C
	public void Release(); // 0x10004EF14
	public void SetId(int type, string id); // 0x10004F088
	public void UnsetId(int type); // 0x10004F124
	public int InviteFriends(int type, string[] ids, int pointsType); // 0x10004F1A4
	public void SetProgress(byte[] data); // 0x10004F248
	public int RequestFriendsProgress(string[] friendIds); // 0x10004F334
	public int GetChallengers(); // 0x10004F3C0
	private bool CheckNativePointer(); // 0x10004F028
}

// Namespace: adsystem
public interface IInterstitials // TypeDefIndex: 3327
{
	// Methods
	public abstract void OnInterstitialsLoadStarted(EProviders provider); // 0
	public abstract void OnInterstitialsLoadCompleted(EProviders provider); // 0
	public abstract void OnInterstitialsLoadFailed(EProviders provider); // 0
	public abstract void OnInterstitialsShow(EProviders provider); // 0
	public abstract void OnInterstitialsHide(EProviders provider); // 0
}

// Namespace: adsystem
public class Interstitials // TypeDefIndex: 3328
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IInterstitials listener, Parameters parameters); // 0x10004F430
	private static void .cctor(); // 0x10004F5F4
	private static void AdSystemOnInterstitialsLoadStarted(IntPtr listener, int provider); // 0x10004F800
	private static void AdSystemOnInterstitialsLoadCompleted(IntPtr listener, int provider); // 0x10004F9B8
	private static void AdSystemOnInterstitialsLoadFailed(IntPtr listener, int provider); // 0x10004FB74
	private static void AdSystemOnInterstitialsShow(IntPtr listener, int provider); // 0x10004FD30
	private static void AdSystemOnInterstitialsHide(IntPtr listener, int provider); // 0x10004FEEC
	private static extern void Interstitials_Callbacks(AdSystemOnInterstitialsLoadStarted c1, AdSystemOnInterstitialsLoadCompleted c2, AdSystemOnInterstitialsLoadFailed c3, AdSystemOnInterstitialsShow c4, AdSystemOnInterstitialsHide c5); // 0x10004F77C
	private static extern IntPtr Interstitials_Interstitials(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x10004F5E4
	private static extern void Interstitials_Release(IntPtr instance); // 0x1000500A8
	private static extern bool Interstitials_Show(IntPtr instance); // 0x1000500B0
	public void Release(); // 0x1000500D0
	public bool Show(); // 0x100050244
	private bool CheckNativePointer(); // 0x1000501E4
}

// Namespace: adsystem
public sealed class ENordcurrentInterstitialError : Enum // TypeDefIndex: 3329
{
	// Fields
	public int value__; // 0x10
	public const ENordcurrentInterstitialError ERROR_NONE = -1; // 0x0
	public const ENordcurrentInterstitialError ERROR_NO_INTERNET_CONNECTION = 0; // 0x0

}

// Namespace: adsystem
public sealed class ENordcurrentInterstitialButton : Enum // TypeDefIndex: 3330
{
	// Fields
	public int value__; // 0x10
	public const ENordcurrentInterstitialButton BUTTON_NONE = -1; // 0x0
	public const ENordcurrentInterstitialButton BUTTON_INSTALL = 0; // 0x0
	public const ENordcurrentInterstitialButton BUTTON_CLOSE = 1; // 0x0
	public const ENordcurrentInterstitialButton BUTTON_LINK = 2; // 0x0

}

// Namespace: adsystem
public sealed class ENordcurrentInterstitialRemoveReason : Enum // TypeDefIndex: 3331
{
	// Fields
	public int value__; // 0x10
	public const ENordcurrentInterstitialRemoveReason REASON_UNKNOWN = 0; // 0x0
	public const ENordcurrentInterstitialRemoveReason REASON_USED = 1; // 0x0
	public const ENordcurrentInterstitialRemoveReason REASON_EXPIRED = 2; // 0x0
	public const ENordcurrentInterstitialRemoveReason REASON_LOAD_FAILED = 3; // 0x0
	public const ENordcurrentInterstitialRemoveReason REASON_LANGUAGE_CHANGED = 4; // 0x0

}

// Namespace: adsystem
public interface INordcurrentInterstitial // TypeDefIndex: 3332
{
	// Methods
	public abstract void OnNordcurrentInterstitialShow(); // 0
	public abstract void OnNordcurrentInterstitialClose(ENordcurrentInterstitialButton button); // 0
	public abstract void OnNordcurrentInterstitialButtonWithError(ENordcurrentInterstitialButton button, ENordcurrentInterstitialError error); // 0
	public abstract void OnNordcurrentInterstitialReloaded(); // 0
	public abstract void OnNordcurrentInterstitialRemoved(ENordcurrentInterstitialRemoveReason reason); // 0
	public abstract void OnNordcurrentInterstitialCustomShow(); // 0
	public abstract void OnNordcurrentInterstitialCustomClose(ENordcurrentInterstitialButton button); // 0
	public abstract void OnNordcurrentInterstitialCustomButtonWithError(ENordcurrentInterstitialButton button, ENordcurrentInterstitialError error); // 0
	public abstract void OnNordcurrentInterstitialCustomReloaded(); // 0
	public abstract void OnNordcurrentInterstitialCustomRemoved(ENordcurrentInterstitialRemoveReason reason); // 0
}

// Namespace: adsystem
public class NordcurrentInterstitial // TypeDefIndex: 3333
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, INordcurrentInterstitial listener, Parameters parameters); // 0x1000502C0
	private static void .cctor(); // 0x100050484
	private static void AdSystemOnNordcurrentInterstitialShow(IntPtr listener); // 0x100050848
	private static void AdSystemOnNordcurrentInterstitialClose(IntPtr listener, int button); // 0x1000509F0
	private static void AdSystemOnNordcurrentInterstitialButtonWithError(IntPtr listener, int button, int error); // 0x100050BAC
	private static void AdSystemOnNordcurrentInterstitialReloaded(IntPtr listener); // 0x100050D88
	private static void AdSystemOnNordcurrentInterstitialRemoved(IntPtr listener, int reason); // 0x100050F34
	private static void AdSystemOnNordcurrentInterstitialCustomShow(IntPtr listener); // 0x1000510F0
	private static void AdSystemOnNordcurrentInterstitialCustomClose(IntPtr listener, int button); // 0x10005129C
	private static void AdSystemOnNordcurrentInterstitialCustomButtonWithError(IntPtr listener, int button, int error); // 0x100051458
	private static void AdSystemOnNordcurrentInterstitialCustomReloaded(IntPtr listener); // 0x100051634
	private static void AdSystemOnNordcurrentInterstitialCustomRemoved(IntPtr listener, int reason); // 0x1000517E0
	private static extern void NordcurrentInterstitial_Callbacks(AdSystemOnNordcurrentInterstitialShow c1, AdSystemOnNordcurrentInterstitialClose c2, AdSystemOnNordcurrentInterstitialButtonWithError c3, AdSystemOnNordcurrentInterstitialReloaded c4, AdSystemOnNordcurrentInterstitialRemoved c5, AdSystemOnNordcurrentInterstitialCustomShow c6, AdSystemOnNordcurrentInterstitialCustomClose c7, AdSystemOnNordcurrentInterstitialCustomButtonWithError c8, AdSystemOnNordcurrentInterstitialCustomReloaded c9, AdSystemOnNordcurrentInterstitialCustomRemoved c10); // 0x100050758
	private static extern IntPtr NordcurrentInterstitial_NordcurrentInterstitial(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x100050474
	private static extern void NordcurrentInterstitial_Release(IntPtr instance); // 0x10005199C
	private static extern bool NordcurrentInterstitial_Show(IntPtr instance); // 0x1000519A4
	private static extern void NordcurrentInterstitial_Hide(IntPtr instance); // 0x1000519C4
	private static extern bool NordcurrentInterstitial_ShowCustom(IntPtr instance); // 0x1000519CC
	private static extern void NordcurrentInterstitial_HideCustom(IntPtr instance); // 0x1000519EC
	private static extern void NordcurrentInterstitial_SetButtonTexts(IntPtr instance, string install, string noThanks); // 0x1000519F4
	public void Release(); // 0x100051A50
	public bool Show(); // 0x100051BC4
	public void Hide(); // 0x100051C40
	public bool ShowCustom(); // 0x100051CB0
	public void HideCustom(); // 0x100051D2C
	public void SetButtonTexts(string install, string noThanks); // 0x100051D9C
	private bool CheckNativePointer(); // 0x100051B64
}

// Namespace: adsystem
public sealed class ETextureTypes : Enum // TypeDefIndex: 3334
{
	// Fields
	public int value__; // 0x10
	public const ETextureTypes UNKNOWN = 0; // 0x0
	public const ETextureTypes JPEG = 1; // 0x0
	public const ETextureTypes PNG = 2; // 0x0

}

// Namespace: adsystem
public sealed class NordcurrentOfferwallAd // TypeDefIndex: 3335
{
	// Fields
	internal string gameTitle; // 0x10
	internal string gameDescription; // 0x18
	internal string texturePath; // 0x20
	internal ETextureTypes textureType; // 0x28
	internal Uri link; // 0x30

	// Methods
	public void .ctor(); // 0x100052598
	public string GetTitle(); // 0x100052ABC
	public string GetDescription(); // 0x100052AC4
	public string GetPath(); // 0x100052ACC
	public ETextureTypes GetTextureType(); // 0x100052AD4
	public Uri GetLink(); // 0x100052ADC
}

// Namespace: adsystem
public interface INordcurrentOfferwall // TypeDefIndex: 3336
{
	// Methods
	public abstract void OnNordcurrentOfferwallLoaded(int adCount); // 0
	public abstract void OnNordcurrentOfferwallLoadFailed(); // 0
}

// Namespace: adsystem
public class NordcurrentOfferwall // TypeDefIndex: 3337
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, INordcurrentOfferwall listener, Parameters parameters); // 0x100051E24
	private static void .cctor(); // 0x100051FE8
	private static void AdSystemOnNordcurrentOfferwallLoaded(IntPtr listener, int count); // 0x1000520E0
	private static void AdSystemOnNordcurrentOfferwallLoadFailed(IntPtr listener); // 0x100052298
	private static IntPtr AdSystemNordcurrentOfferwallAdBuild(int textureType, string texturePath, string link, string gameTitle, string gameDescription); // 0x100052444
	private static extern void NordcurrentOfferwall_Callbacks(AdSystemOnNordcurrentOfferwallLoaded c1, AdSystemOnNordcurrentOfferwallLoadFailed c2); // 0x1000520A8
	private static extern IntPtr NordcurrentOfferwall_NordcurrentOfferwall(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x100051FD8
	private static extern void NordcurrentOfferwall_Release(IntPtr instance); // 0x100052664
	private static extern int NordcurrentOfferwall_GetAdCount(IntPtr instance); // 0x10005266C
	private static extern void NordcurrentOfferwall_RefreshAdsList(IntPtr instance); // 0x100052674
	private static extern IntPtr NordcurrentOfferwall_GetAdByIndex(IntPtr instance, int index, AdSystemNordcurrentOfferwallAdBuild builder); // 0x10005267C
	public void Release(); // 0x1000526B0
	public NordcurrentOfferwallAd GetAdByIndex(int index); // 0x100052824
	public int GetAdCount(); // 0x1000529DC
	public void RefreshAdsList(); // 0x100052A4C
	private bool CheckNativePointer(); // 0x1000527C4
}

// Namespace: adsystem
public sealed class EOfferTypes : Enum // TypeDefIndex: 3338
{
	// Fields
	public int value__; // 0x10
	public const EOfferTypes OFFER_HALf_OF_GAME_COST = 1; // 0x0
	public const EOfferTypes OFFER_RESERVED = 2; // 0x0
	public const EOfferTypes OFFER_BUY_FOR_HALF_PRICE = 3; // 0x0
	public const EOfferTypes OFFER_SPECIAL_GAME = 4; // 0x0
	public const EOfferTypes OFFER_AMAZON_FULL_GAME_SALE = 5; // 0x0
	public const EOfferTypes OFFER_AMAZON_POINTS_FOR_FREE = 6; // 0x0
	public const EOfferTypes OFFER_AMAZON_CE_UPGRADE_FOR_FREE = 7; // 0x0

}

// Namespace: adsystem
public interface IOffers // TypeDefIndex: 3339
{
	// Methods
	public abstract void OnOffersUpdate(int id, int type, int timeLeft, string data); // 0
	public abstract void OnOffersUpdateNext(int type, int timeUntilStart); // 0
	public abstract void OnOffersExpired(); // 0
}

// Namespace: adsystem
public class Offers // TypeDefIndex: 3340
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IOffers listener); // 0x100052AE4
	private static void .cctor(); // 0x100052C80
	private static void AdSystemOnOffersUpdate(IntPtr listener, int id, int type, int timeLeft, string data); // 0x100052DB4
	private static void AdSystemOnOffersUpdateNext(IntPtr listener, int type, int timeUntilStart); // 0x100052FC4
	private static void AdSystemOnOffersExpired(IntPtr listener); // 0x1000531A0
	private static extern void Offers_Callbacks(AdSystemOnOffersUpdate c1, AdSystemOnOffersUpdateNext c2, AdSystemOnOffersExpired c3); // 0x100052D60
	private static extern IntPtr Offers_Offers(IntPtr communicator, IntPtr listener); // 0x100052C74
	private static extern void Offers_Release(IntPtr instance); // 0x10005334C
	public void Release(); // 0x100053354
	private bool CheckNativePointer(); // 0x100053468
}

// Namespace: adsystem
public interface IOfferwalls // TypeDefIndex: 3341
{
	// Methods
	public abstract void OnOfferwallPointsReceived(int points, EProviders provider); // 0
	public abstract void OnOfferwallShow(EProviders provider); // 0
	public abstract void OnOfferwallHide(EProviders provider); // 0
}

// Namespace: adsystem
public class Offerwalls // TypeDefIndex: 3342
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IOfferwalls listener, Parameters parameters); // 0x1000534C8
	private static void .cctor(); // 0x10005368C
	private static void AdSystemOnOfferwallPointsReceived(IntPtr listener, int points, int provider); // 0x1000537C0
	private static void AdSystemOnOfferwallShow(IntPtr listener, int provider); // 0x100053998
	private static void AdSystemOnOfferwallHide(IntPtr listener, int provider); // 0x100053B54
	private static extern void Offerwalls_Callbacks(AdSystemOnOfferwallPointsReceived c1, AdSystemOnOfferwallShow c2, AdSystemOnOfferwallHide c3); // 0x10005376C
	private static extern IntPtr Offerwalls_Offerwalls(IntPtr communicator, IntPtr listener, IntPtr parameters); // 0x10005367C
	private static extern void Offerwalls_Release(IntPtr instance); // 0x100053D10
	private static extern bool Offerwalls_Show(IntPtr instance); // 0x100053D18
	public void Release(); // 0x100053D38
	public bool Show(); // 0x100053EAC
	private bool CheckNativePointer(); // 0x100053E4C
}

// Namespace: adsystem
public sealed class EProviders : Enum // TypeDefIndex: 3343
{
	// Fields
	public int value__; // 0x10
	public const EProviders UNKNOWN = 0; // 0x0
	public const EProviders ADCOLONY = 1; // 0x0
	public const EProviders ADDUPLEX = 2; // 0x0
	public const EProviders ADMOB = 3; // 0x0
	public const EProviders ADWORDS = 4; // 0x0
	public const EProviders AMAZON = 5; // 0x0
	public const EProviders CHARTBOOST = 6; // 0x0
	public const EProviders FLURRY = 7; // 0x0
	public const EProviders IAD = 8; // 0x0
	public const EProviders INMOBI = 9; // 0x0
	public const EProviders MILLENNIAL = 10; // 0x0
	public const EProviders NORDCURRENT = 11; // 0x0
	public const EProviders SPONSORPAY = 12; // 0x0
	public const EProviders TAPJOY = 13; // 0x0
	public const EProviders TUNE = 14; // 0x0

}

// Namespace: adsystem
public class Parameters // TypeDefIndex: 3344
{
	// Fields
	private IntPtr nativeRef; // 0x10

	// Methods
	public void .ctor(); // 0x100053F28
	private static extern IntPtr Parameters_Parameters(); // 0x100053F94
	private static extern void Parameters_Release(IntPtr instance); // 0x100053F98
	private static extern void Parameters_SetInt(IntPtr instance, int key, int value); // 0x100053FA0
	private static extern void Parameters_SetString(IntPtr instance, int key, string value); // 0x100053FB0
	public void Release(); // 0x100053FF8
	public void Set(EKey key, int value); // 0x1000540C0
	public void Set(EKey key, string value); // 0x100054124
	internal IntPtr GetRef(); // 0x100049000
	private bool CheckNativePointer(); // 0x100054060
}

// Namespace: 
public sealed class EModule : Enum // TypeDefIndex: 3345
{
	// Fields
	public int value__; // 0x10
	public const EModule ANY = -1; // 0x0
	public const EModule NONE = 0; // 0x0
	public const EModule ADVERTISERS = 1; // 0x0
	public const EModule BANNERS = 2; // 0x0
	public const EModule COMMUNICATOR = 4; // 0x0
	public const EModule DLC = 8; // 0x0
	public const EModule EVENTS = 16; // 0x0
	public const EModule FRIENDS = 32; // 0x0
	public const EModule INTERSTITIALS = 64; // 0x0
	public const EModule NORDCURRENT_INTERSTITIAL = 128; // 0x0
	public const EModule NORDCURRENT_OFFERWALL = 256; // 0x0
	public const EModule OFFERS = 512; // 0x0
	public const EModule OFFERWALLS = 1024; // 0x0
	public const EModule POINTS = 2048; // 0x0
	public const EModule SAVES = 4096; // 0x0
	public const EModule VIDEO = 8192; // 0x0

}

// Namespace: 
public sealed class EKey : Enum // TypeDefIndex: 3346
{
	// Fields
	public int value__; // 0x10
	public const EKey ADCOLONY_APP_ID = 257; // 0x0
	public const EKey ADCOLONY_VIDEO_ZONE_ID = 258; // 0x0
	public const EKey ADCOLONY_FLAGS = 256; // 0x0
	public const EKey ADDUPLEX_APP_ID = 513; // 0x0
	public const EKey ADDUPLEX_FLAGS = 512; // 0x0
	public const EKey ADMOB_AD_UNIT_ID = 769; // 0x0
	public const EKey ADMOB_FLAGS = 768; // 0x0
	public const EKey ADWORDS_CONVERSION_ID = 1025; // 0x0
	public const EKey ADWORDS_LABEL = 1026; // 0x0
	public const EKey ADWORDS_VALUE = 1027; // 0x0
	public const EKey ADWORDS_FLAGS = 1024; // 0x0
	public const EKey AMAZON_APP_KEY = 1281; // 0x0
	public const EKey AMAZON_FLAGS = 1280; // 0x0
	public const EKey CHARTBOOST_ID = 1537; // 0x0
	public const EKey CHARTBOOST_SIGNATURE = 1538; // 0x0
	public const EKey CHARTBOOST_FLAGS = 1536; // 0x0
	public const EKey FLURRY_APP_ID = 1793; // 0x0
	public const EKey FLURRY_API_KEY = 1794; // 0x0
	public const EKey FLURRY_AD_SPACE = 1795; // 0x0
	public const EKey FLURRY_FLAGS = 1792; // 0x0
	public const EKey IAD_FLAGS = 2048; // 0x0
	public const EKey INMOBI_APP_ID = 2305; // 0x0
	public const EKey INMOBI_PLACEMENT_ID = 2306; // 0x0
	public const EKey INMOBI_FLAGS = 2304; // 0x0
	public const EKey MILLENNIAL_APP_ID = 2561; // 0x0
	public const EKey MILLENNIAL_FLAGS = 2560; // 0x0
	public const EKey NORDCURRENT_FLAGS = 2816; // 0x0
	public const EKey SPONSORPAY_APP_ID = 3073; // 0x0
	public const EKey SPONSORPAY_FLAGS = 3072; // 0x0
	public const EKey TAPJOY_SDK_KEY = 3329; // 0x0
	public const EKey TAPJOY_INTERSTITIAL_NAME = 3330; // 0x0
	public const EKey TAPJOY_OFFERWALL_NAME = 3331; // 0x0
	public const EKey TAPJOY_FLAGS = 3328; // 0x0
	public const EKey TUNE_ADVERTISER_ID = 3585; // 0x0
	public const EKey TUNE_CONVERSATION_KEY = 3586; // 0x0
	public const EKey TUNE_PACKAGE_NAME = 3587; // 0x0
	public const EKey TUNE_FLAGS = 3584; // 0x0
	public const EKey COMMUNICATOR_APP_ID = 66048; // 0x0
	public const EKey COMMUNICATOR_SECRET_KEY = 66049; // 0x0
	public const EKey COMMUNICATOR_LANGUAGE = 66050; // 0x0
	public const EKey DLC_MIN_VERSION = 66304; // 0x0
	public const EKey DLC_MAX_VERSION = 66305; // 0x0
	public const EKey DLC_FILES_PATH = 66306; // 0x0
	public const EKey NORDCURRENTINTERSTITIALS_LANGUAGES = 67328; // 0x0
	public const EKey NORDCURRENTOFFERWALL_MARKET_ID = 67584; // 0x0

}

// Namespace: adsystem
public sealed class EPointsTypes : Enum // TypeDefIndex: 3347
{
	// Fields
	public int value__; // 0x10
	public const EPointsTypes POINTS_DEFAULT = 0; // 0x0
	public const EPointsTypes POINTS_PREMIUM = 1; // 0x0

}

// Namespace: adsystem
public interface IPoints // TypeDefIndex: 3348
{
	// Methods
	public abstract bool OnPointsReceived(string name, int count, int type); // 0
}

// Namespace: adsystem
public class Points // TypeDefIndex: 3349
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, IPoints listener); // 0x1000541A0
	private static void .cctor(); // 0x10005433C
	private static bool AdSystemOnPointsReceived(IntPtr listener, string name, int count, int type); // 0x1000543C8
	private static extern void Points_Callbacks(AdSystemOnPointsReceived c1); // 0x1000543B0
	private static extern IntPtr Points_Points(IntPtr communicator, IntPtr listener); // 0x100054330
	private static extern void Points_Release(IntPtr instance); // 0x1000545CC
	public void Release(); // 0x1000545D4
	public void Check(); // 0x100054748
	private bool CheckNativePointer(); // 0x1000546E8
}

// Namespace: adsystem
public sealed class ESaveState : Enum // TypeDefIndex: 3350
{
	// Fields
	public int value__; // 0x10
	public const ESaveState SAVE_STATE_IDLE = 0; // 0x0
	public const ESaveState SAVE_STATE_DISCONNECTED = 1; // 0x0
	public const ESaveState SAVE_STATE_CONNECTING = 2; // 0x0
	public const ESaveState SAVE_STATE_WRITE_PENDING = 3; // 0x0
	public const ESaveState SAVE_STATE_WRITING = 4; // 0x0
	public const ESaveState SAVE_STATE_CONFLICT = 5; // 0x0

}

// Namespace: adsystem
public interface ISaves // TypeDefIndex: 3351
{
	// Methods
	public abstract void OnSavesModuleReady(); // 0
	public abstract void OnPlayerConnect(string playerId); // 0
	public abstract void OnPlayerDisconnect(); // 0
	public abstract void OnPlayerConnectionError(); // 0
	public abstract void OnSavesConnectionError(); // 0
	public abstract void OnSavesConflict(int conflictId, byte[] conflictData, int conflictTimestamp, string conflictDeviceId); // 0
	public abstract void OnSavesStateChange(ESaveState state); // 0
}

// Namespace: adsystem
public class Saves // TypeDefIndex: 3352
{
	// Fields
	private IntPtr nativeRef; // 0x10
	private Nullable`1<GCHandle> listenerRef; // 0x18

	// Methods
	public void .ctor(Communicator communicator, ISaves listener); // 0x10005478C
	private static void .cctor(); // 0x100054928
	private static IntPtr AdSystemSavesCreateByteArray(IntPtr data, int size); // 0x100054BA8
	private static void AdSystemOnSavesModuleReady(IntPtr listener); // 0x100054CD0
	private static void AdSystemOnPlayerConnect(IntPtr listener, string playerId); // 0x100054E78
	private static void AdSystemOnPlayerDisconnect(IntPtr listener); // 0x10005503C
	private static void AdSystemOnPlayerConnectionError(IntPtr listener); // 0x1000551E8
	private static void AdSystemOnSavesConnectionError(IntPtr listener); // 0x100055394
	private static void AdSystemOnSavesConflict(IntPtr listener, int conflictId, IntPtr conflictData, int cdsize, int conflictTimestamp, string conflictDeviceId); // 0x100055540
	private static void AdSystemOnSavesStateChange(IntPtr listener, int state); // 0x1000557C0
	private static extern void Saves_Callbacks(AdSystemOnSavesModuleReady c1, AdSystemOnPlayerConnect c2, AdSystemOnPlayerDisconnect c3, AdSystemOnPlayerConnectionError c4, AdSystemOnSavesConnectionError c5, AdSystemOnSavesConflict c6, AdSystemOnSavesStateChange c7); // 0x100054AF4
	private static extern IntPtr Saves_Saves(IntPtr communicator, IntPtr listener); // 0x10005491C
	private static extern void Saves_Release(IntPtr instance); // 0x10005597C
	private static extern bool Saves_IsPlayerSet(IntPtr instance); // 0x100055984
	private static extern bool Saves_IsConflictPending(IntPtr instance); // 0x1000559A4
	private static extern bool Saves_IsSavePending(IntPtr instance); // 0x1000559C4
	private static extern void Saves_SetPlayerId(IntPtr instance, string newPid); // 0x1000559E4
	private static extern void Saves_UnsetPlayerId(IntPtr instance); // 0x100055A1C
	private static extern string Saves_GetDeviceId(IntPtr instance); // 0x100055A24
	private static extern long Saves_GetTimestamp(IntPtr instance); // 0x100055A5C
	private static extern IntPtr Saves_Read(IntPtr instance, AdSystemSavesCreateByteArray builder); // 0x100055A64
	private static extern void Saves_Write(IntPtr instance, IntPtr data, int size); // 0x100055A90
	private static extern void Saves_ResolveConflict(IntPtr instance, int conflictId, IntPtr resolvedData, int size, bool local, bool conflictPreserve); // 0x100055AA0
	private static extern void Saves_Flush(IntPtr instance); // 0x100055ABC
	public void Release(); // 0x100055AC4
	public bool IsPlayerSet(); // 0x100055C38
	public bool IsConflictPending(); // 0x100055CB4
	public bool IsSavePending(); // 0x100055D30
	public void SetPlayerId(string newPid); // 0x100055DAC
	public void UnsetPlayerId(); // 0x100055E40
	public string GetDeviceId(); // 0x100055EB0
	public long GetTimestamp(); // 0x100055F3C
	public byte[] Read(); // 0x100055FAC
	public void Write(byte[] saveData); // 0x1000560FC
	public void ResolveConflict(int conflictId, byte[] resolvedData, bool local, bool conflictPreserve); // 0x1000561E8
	public void Flush(); // 0x1000562F4
	private bool CheckNativePointer(); // 0x100055BD8
}

// Namespace: 
public class AimUpdater : MonoBehaviour // TypeDefIndex: 3353
{
	// Fields
	public static bool valueChanged; // 0x0

	// Methods
	public void .ctor(); // 0x10005D0E8
	private static void .cctor(); // 0x10005D0F0
	private void OnEnable(); // 0x10005D0F4
	private void OnDisable(); // 0x10005D274
	private void UpdateRemote(); // 0x10005D0F8
}

// Namespace: 
public class AlphaSaver : MonoBehaviour // TypeDefIndex: 3354
{
	// Fields
	public List`1<tk2dBaseSprite> allSprites; // 0x18
	public List`1<float> allAlphaSprites; // 0x20
	public List`1<tk2dTextMesh> allText; // 0x28
	public List`1<Color> allColorText; // 0x30
	public List`1<float> allAlphaText; // 0x38
	public bool firstTimePersonal; // 0x40
	public bool firstTimeSquad; // 0x41
	public float defaultAlpha; // 0x44
	public Color changeColor; // 0x48
	public List`1<ProfileMenuInitialization> profButtons; // 0x58
	public List`1<SquadMenuInitialization> profButtonsSquad; // 0x60

	// Methods
	public void .ctor(); // 0x10005E2A8
	private void Awake(); // 0x10005E2B0
	public void SaverPersonal(); // 0x10005E2BC
	public void SaverSquad(); // 0x10005E7BC
	public void ChangeAlpha(float b); // 0x10005E50C
	public void ChangeColorText(bool one); // 0x10005EA0C
}

// Namespace: 
public class AreaMarkerLabel : MonoBehaviour // TypeDefIndex: 3355
{
	// Fields
	public tk2dTextMesh text; // 0x18
	private Color orange; // 0x20
	private Color green; // 0x30
	private float velo; // 0x40
	private int zone; // 0x44
	private bool power; // 0x48
	private float time; // 0x4C

	// Methods
	public void .ctor(); // 0x10005FB0C
	private void Start(); // 0x10005FBB0
	private void Update(); // 0x10005FC24
	public IEnumerator FadeTextToFullAlpha(float t, tk2dTextMesh i); // 0x10005FD50
	public void UpdateAreaMarkerMesh(int index); // 0x10005FDE8
}

// Namespace: 
private sealed class <FadeTextToFullAlpha>c__Iterator2 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3356
{
	// Fields
	internal Color <color>__0; // 0x10
	internal float t; // 0x20
	internal tk2dTextMesh i; // 0x28
	internal Color <color>__1; // 0x30
	internal int $PC; // 0x40
	internal object $current; // 0x48
	internal float <$>t; // 0x50
	internal tk2dTextMesh <$>i; // 0x58
	internal AreaMarkerLabel <>f__this; // 0x60

	// Methods
	public void .ctor(); // 0x10005FDE0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10005FE90
	private object System.Collections.IEnumerator.get_Current(); // 0x10005FE98
	public bool MoveNext(); // 0x10005FEA0
	public void Dispose(); // 0x10006028C
	public void Reset(); // 0x100060298
}

// Namespace: 
public class ArmoryIconControl : MonoBehaviour // TypeDefIndex: 3357
{
	// Fields
	private tk2dSprite sprt; // 0x18
	private Items oldItem; // 0x20

	// Methods
	public void .ctor(); // 0x1000602EC
	private void Start(); // 0x1000602F4
	private void Update(); // 0x10006042C
	private void UpdateIcon(); // 0x100060380
}

// Namespace: 
public class ArrowGlow : MonoBehaviour // TypeDefIndex: 3358
{
	// Fields
	public tk2dSprite glow1; // 0x18
	public tk2dSprite glow2; // 0x20
	public tk2dSprite glow3; // 0x28
	public tk2dSprite glow4; // 0x30
	public tk2dBaseSprite spriteglow; // 0x38
	public float speed; // 0x40
	public float timeOffset; // 0x44
	public float intervalMin; // 0x48
	public float intervalMax; // 0x4C
	public bool animate; // 0x50
	public float minglow; // 0x54
	public float maxglow; // 0x58
	private float[] velo; // 0x60
	private tk2dUIItem button; // 0x68
	public int valum; // 0x70
	private States state; // 0x74
	private Color glowColor; // 0x78
	private float oldTime; // 0x88
	private float eventInterval; // 0x8C

	// Methods
	public void .ctor(); // 0x1000604D4
	private void Start(); // 0x100060554
	private void SetEventInterval(); // 0x100060714
	private void Reset(); // 0x100060744
	private void OnDown(); // 0x100060788
	private void OnUp(); // 0x1000607F4
	private void Update(); // 0x100060860
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3359
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States animateIn = 1; // 0x0
	public const States animateOut = 2; // 0x0

}

// Namespace: 
public class AssetBundleImage : MonoBehaviour // TypeDefIndex: 3360
{
	// Fields
	public string bundle; // 0x18
	public string asset; // 0x20

	// Methods
	public void .ctor(); // 0x100060BF4
	private IEnumerator Start(); // 0x100060BFC
	private void OnEnable(); // 0x100060C70
}

// Namespace: 
private sealed class <Start>c__Iterator3 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3361
{
	// Fields
	internal AssetBundleLoadAssetOperation <request>__0; // 0x10
	internal Texture2D <texture>__1; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal AssetBundleImage <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100060C68
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100060D10
	private object System.Collections.IEnumerator.get_Current(); // 0x100060D18
	public bool MoveNext(); // 0x100060D20
	public void Dispose(); // 0x100061310
	public void Reset(); // 0x10006131C
}

// Namespace: 
public class AvatarProfileOptionsElement : MonoBehaviour // TypeDefIndex: 3362
{
	// Fields
	public int avatarId; // 0x18
	public ProfileOptionsMenuBase profileOptionsMenuBase; // 0x20
	public bool avatarEnable; // 0x28
	public GameObject locked; // 0x30

	// Methods
	public void .ctor(); // 0x100065570
	public void OnEnable(); // 0x100065578
	public void Init(int id); // 0x100065580
}

// Namespace: 
public class AvatarsScroll : DynamicTableView // TypeDefIndex: 3363
{
	// Fields
	public GameObject cell; // 0x30
	public List`1<int> avatars; // 0x38

	// Methods
	public void .ctor(); // 0x1000658D4
	protected override int OnCount(); // 0x100065948
	protected override GameObject OnCell(int i); // 0x1000659A0
	public void OnLeft(); // 0x100065A7C
	public void OnRight(); // 0x100065AAC
}

// Namespace: 
public class BS_HeaderSingle : MonoBehaviour // TypeDefIndex: 3364
{
	// Fields
	public tk2dTextMesh titleMesh; // 0x18
	public GameObject youwinmeshes; // 0x20
	public tk2dUIMask winmask; // 0x28

	// Methods
	public void .ctor(); // 0x100075AEC
}

// Namespace: 
public class BS_HeaderTeam : MonoBehaviour // TypeDefIndex: 3365
{
	// Fields
	public tk2dTextMesh teamName; // 0x18
	public tk2dTextMesh teamRankpoints; // 0x20
	public tk2dSlicedSprite background; // 0x28
	public GameObject youwinmeshes; // 0x30
	public LocalizationTextMesh title; // 0x38

	// Methods
	public void .ctor(); // 0x100075AF4
	public void set_size(Vector2 value); // 0x100075AFC
	public Vector2 get_size(); // 0x100075B18
}

// Namespace: 
public class BS_Row : MonoBehaviour // TypeDefIndex: 3366
{
	// Fields
	public string username; // 0x18
	public string nickname; // 0x20
	public tk2dTextMesh nicknameMesh; // 0x28
	public int flag; // 0x30
	public tk2dSprite flagSprite; // 0x38
	public int rankpointscurrent; // 0x40
	public tk2dTextMesh rankpointsMesh; // 0x48
	public long rankpointsall; // 0x50
	public tk2dSprite rankpointsSprite; // 0x58
	public int kills; // 0x60
	public tk2dTextMesh killsMesh; // 0x68
	public int deaths; // 0x70
	public tk2dTextMesh deathsMesh; // 0x78
	public tk2dTextMesh weaponMesh; // 0x80
	public tk2dTextMesh helmetMesh; // 0x88
	public tk2dSlicedSprite border1; // 0x90
	public tk2dSlicedSprite border2; // 0x98
	public Transform content; // 0xA0
	public tk2dSlicedSprite Bg; // 0xA8
	public tk2dSlicedSprite killerBg; // 0xB0
	public GameObject killerIcon; // 0xB8
	public GameObject acceptIcon; // 0xC0
	public bool myself; // 0xC8
	public GameObject info1Container; // 0xD0
	public GameObject info2Container; // 0xD8
	public string weaponname; // 0xE0
	public string helmetname; // 0xE8
	public int[] cups; // 0xF0
	public tk2dSprite cupIcon; // 0xF8
	public int avatar_id; // 0x100
	public tk2dSprite avatarIcon; // 0x108
	public string squad_name; // 0x110
	public int weapon_camo; // 0x118
	public int weapon_handling; // 0x11C
	public int helmet_camo; // 0x120
	public int helmet_aero; // 0x124
	public int last_booster_time; // 0x128
	public RemoteSpriteRender weapon_camo_Icon; // 0x130
	public RemoteSpriteRender weapon_handling_Icon; // 0x138
	public RemoteSpriteRender helmet_camo_Icon; // 0x140
	public RemoteSpriteRender helmet_aero_Icon; // 0x148
	public int team; // 0x150

	// Methods
	public void .ctor(); // 0x100075B34
	public void set_size(Vector2 value); // 0x100075B3C
	public Vector2 get_size(); // 0x100075B58
}

// Namespace: 
public class BackButtonPosition : MonoBehaviour // TypeDefIndex: 3367
{
	// Fields
	private float velo; // 0x18
	private float speed; // 0x1C

	// Methods
	public void .ctor(); // 0x100065ADC
	private void Start(); // 0x100065AF0
	private IEnumerator RePos(int pos); // 0x100065CF8
	private void <Start>m__F(MenuElements element); // 0x100065D80
}

// Namespace: 
private sealed class <RePos>c__Iterator4 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3368
{
	// Fields
	internal float <time>__0; // 0x10
	internal int pos; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal int <$>pos; // 0x28
	internal BackButtonPosition <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100065D78
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100065E60
	private object System.Collections.IEnumerator.get_Current(); // 0x100065E68
	public bool MoveNext(); // 0x100065E70
	public void Dispose(); // 0x10006605C
	public void Reset(); // 0x100066068
}

// Namespace: 
public class Backgrounds : MonoBehaviour // TypeDefIndex: 3369
{
	// Fields
	private static Backgrounds _instance; // 0x0
	public Dictionary`2<string, Transform> backgrounds; // 0x18

	// Methods
	public void .ctor(); // 0x1000660BC
	public static Backgrounds get_Instance(); // 0x10006612C
	public void Add(Transform transform); // 0x10006621C
	public Transform Get(string name); // 0x10006629C
	private void OnDestroy(); // 0x10006631C
}

// Namespace: 
public class AdSystemPlugin : MonoBehaviour, ICommunicator // TypeDefIndex: 3370
{
	// Fields
	private static AdSystemPlugin _instance; // 0x0

	// Methods
	public void .ctor(); // 0x10005C35C
	public static AdSystemPlugin Instance(); // 0x10005C364
	private void Init(); // 0x10005C498
	public void OnCommunicatorResponseReceived(); // 0x10005C6E8
	public void OnCommunicatorResponseReceiveFailed(); // 0x10005C6EC
	public void OnCommunicatorDeviceIdLoaded(); // 0x10005C6F0
	private void OnApplicationPause(bool pause); // 0x10005C6F4
	private void OnDestroy(); // 0x10005C780
}

// Namespace: 
public class AppsFlyerTrackerCallbacks : MonoBehaviour // TypeDefIndex: 3371
{
	// Methods
	public void .ctor(); // 0x10005F6A8
	private void Start(); // 0x10005F6B0
	private void Update(); // 0x10005F700
	public void didReceiveConversionData(string conversionData); // 0x10005F704
	public void didReceiveConversionDataWithError(string error); // 0x10005F78C
	public void didFinishValidateReceipt(string validateResult); // 0x10005F814
	public void didFinishValidateReceiptWithError(string error); // 0x10005F89C
	public void onAppOpenAttribution(string validateResult); // 0x10005F924
	public void onAppOpenAttributionFailure(string error); // 0x10005F9AC
	public void onInAppBillingSuccess(); // 0x10005FA34
	public void onInAppBillingFailure(string error); // 0x10005FA84
}

// Namespace: 
public class BigBrother : MonoBehaviour // TypeDefIndex: 3372
{
	// Fields
	private static MonoBehaviour Current; // 0x0

	// Methods
	public void .ctor(); // 0x10006ADF4
	private void AwakeInternal(); // 0x10006ADFC
	public static void ClearCache(); // 0x10006AF90
	private void Awake(); // 0x10006AF9C
}

// Namespace: 
public class ChartBoostPlugin : MonoBehaviour // TypeDefIndex: 3373
{
	// Fields
	public GameObject inPlayIcon; // 0x18
	public GameObject inPlayText; // 0x20
	public Texture2D logo; // 0x28
	private CBInPlay inPlayAd; // 0x30
	public Vector2 scrollPosition; // 0x38
	private List`1<string> delegateHistory; // 0x40
	private bool hasInterstitial; // 0x48
	private bool hasMoreApps; // 0x49
	private bool hasRewardedVideo; // 0x4A
	private bool hasInPlay; // 0x4B
	private int frameCount; // 0x4C
	private bool ageGate; // 0x50
	private bool autocache; // 0x51
	private bool activeAgeGate; // 0x52
	private bool showInterstitial; // 0x53
	private bool showMoreApps; // 0x54
	private bool showRewardedVideo; // 0x55
	private int BANNER_HEIGHT; // 0x58
	private int REQUIRED_HEIGHT; // 0x5C
	private int ELEMENT_WIDTH; // 0x60
	private Rect scrollRect; // 0x64
	private Rect scrollArea; // 0x74
	private Vector3 guiScale; // 0x84
	private float scale; // 0x90
	private CBStatusBarBehavior statusBar; // 0x94
	private static ChartBoostPlugin _instance; // 0x0

	// Methods
	public void .ctor(); // 0x1001E6344
	public static ChartBoostPlugin get_Instance(); // 0x1001E63A0
	public void Init(); // 0x1001E64C0
	private void Update(); // 0x1001E6740
	private void UpdateScrolling(); // 0x1001E6744
	private void AddLog(string text); // 0x1001E6748
	private void OnGUI(); // 0x1001E674C
	private void LayoutHeader(); // 0x1001E6750
	private void LayoutToggles(); // 0x1001E6754
	private void LayoutButtons(); // 0x1001E6758
	private void LayoutAgeGate(int windowID); // 0x1001E675C
	private void OnDisable(); // 0x1001E6760
	private void didInitialize(bool status); // 0x1001E6764
	private void didFailToLoadInterstitial(CBLocation location, CBImpressionError error); // 0x1001E6804
	private void didDismissInterstitial(CBLocation location); // 0x1001E68B4
	private void didCloseInterstitial(CBLocation location); // 0x1001E692C
	private void didClickInterstitial(CBLocation location); // 0x1001E69A4
	private void didCacheInterstitial(CBLocation location); // 0x1001E6A1C
	private bool shouldDisplayInterstitial(CBLocation location); // 0x1001E6A94
	private void didDisplayInterstitial(CBLocation location); // 0x1001E6C64
	private void didFailToLoadMoreApps(CBLocation location, CBImpressionError error); // 0x1001E6CDC
	private void didDismissMoreApps(CBLocation location); // 0x1001E6D8C
	private void didCloseMoreApps(CBLocation location); // 0x1001E6E04
	private void didClickMoreApps(CBLocation location); // 0x1001E6E7C
	private void didCacheMoreApps(CBLocation location); // 0x1001E6EF4
	private bool shouldDisplayMoreApps(CBLocation location); // 0x1001E6F6C
	private void didDisplayMoreApps(CBLocation location); // 0x1001E7024
	private void didFailToRecordClick(CBLocation location, CBClickError error); // 0x1001E709C
	private void didFailToLoadRewardedVideo(CBLocation location, CBImpressionError error); // 0x1001E714C
	private void didDismissRewardedVideo(CBLocation location); // 0x1001E71FC
	private void didCloseRewardedVideo(CBLocation location); // 0x1001E7274
	private void didClickRewardedVideo(CBLocation location); // 0x1001E72EC
	private void didCacheRewardedVideo(CBLocation location); // 0x1001E7364
	private bool shouldDisplayRewardedVideo(CBLocation location); // 0x1001E73DC
	private void didCompleteRewardedVideo(CBLocation location, int reward); // 0x1001E75AC
	private void didDisplayRewardedVideo(CBLocation location); // 0x1001E7678
	private void didCacheInPlay(CBLocation location); // 0x1001E76F0
	private void didFailToLoadInPlay(CBLocation location, CBImpressionError error); // 0x1001E7768
	private void didPauseClickForConfirmation(); // 0x1001E7818
	private void willDisplayVideo(CBLocation location); // 0x1001E7860
}

// Namespace: 
public class CheatCodes : MonoBehaviour // TypeDefIndex: 3374
{
	// Fields
	private static MonoBehaviour Current; // 0x0
	public string cheatcode; // 0x18
	public List`1<string> history; // 0x20
	private int index; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map3; // 0x8

	// Methods
	public void .ctor(); // 0x1001FABC8
	private void AwakeInternal(); // 0x1001FAC38
	private void Awake(); // 0x1001FADCC
	private void Update(); // 0x1001FADD0
}

// Namespace: 
public class DependencyLauncher : MonoBehaviour // TypeDefIndex: 3375
{
	// Fields
	public static DependencyLauncher Current; // 0x0

	// Methods
	public void .ctor(); // 0x1002237CC
	public void Awake(); // 0x1002237D4
}

// Namespace: 
public class DroneDownloader : MonoBehaviour // TypeDefIndex: 3376
{
	// Fields
	private LoadingBundle loadingBindle; // 0x18
	public GameObject[] models; // 0x20
	private static DroneDownloader m_Instance; // 0x0
	private bool is_loading; // 0x28
	private Action DownloadComplete; // 0x30

	// Methods
	public void .ctor(); // 0x100229080
	public void add_DownloadComplete(Action value); // 0x1002282CC
	public void remove_DownloadComplete(Action value); // 0x100229088
	public static DroneDownloader get_Instance(); // 0x100227AB4
	public float get_Progress(); // 0x100228EE8
	public bool IsLoading(); // 0x100227BF8
	public void StopDownload(); // 0x100227C1C
	public void DownloadDrone(int type); // 0x1002283AC
}

// Namespace: 
private sealed class <DownloadDrone>c__AnonStoreyA9 // TypeDefIndex: 3377
{
	// Fields
	internal Drone h; // 0x10
	internal DroneDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100229168
	internal void <>m__10(List`1<GameObject> objs); // 0x100229170
	internal void <>m__11(); // 0x100229250
}

// Namespace: 
public class FlurryPlugin : MonoBehaviour // TypeDefIndex: 3378
{
	// Fields
	private string key_ios; // 0x18
	private string key_android; // 0x20
	private static FlurryPlugin _instance; // 0x0

	// Methods
	public void .ctor(); // 0x10022FD58
	public void Init(); // 0x10022FDC0
	public static FlurryPlugin get_Instance(); // 0x10022FE48
	private void OnDestroy(); // 0x10022FF68
}

// Namespace: 
public class FontDownloader : MonoBehaviour // TypeDefIndex: 3379
{
	// Fields
	private LoadingBundle m_fontLoadingBindle; // 0x18
	private static FontDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x100230F94
	public void add_DownloadComplete(Action value); // 0x100230F9C
	public void remove_DownloadComplete(Action value); // 0x10023107C
	public static FontDownloader get_Instance(); // 0x10023115C
	public float get_Progress(); // 0x1002312A0
	public bool IsLoading(); // 0x10023133C
	public void StopDownload(); // 0x100231344
	public void DownloadFont(); // 0x1002313F4
	private void <DownloadFont>m__12(List`1<GameObject> objs); // 0x100231760
	private void <DownloadFont>m__13(); // 0x100231850
}

// Namespace: 
public class GA : MonoBehaviour // TypeDefIndex: 3380
{
	// Methods
	public void .ctor(); // 0x10023386C
	public static void LogScreen(string name); // 0x100233874
}

// Namespace: 
public class HelmetAeroDownloader : MonoBehaviour // TypeDefIndex: 3381
{
	// Fields
	private LoadingBundle m_aeroLoadingBindle; // 0x18
	private static HelmetAeroDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x1002765A8
	public void add_DownloadComplete(Action value); // 0x1002765B0
	public void remove_DownloadComplete(Action value); // 0x100276690
	public static HelmetAeroDownloader get_Instance(); // 0x100276770
	public float get_Progress(); // 0x1002768B4
	public bool IsLoading(); // 0x100276970
	public void StopDownload(); // 0x100276978
	public void DownloadAero(int type, int aero_type); // 0x100276BF0
}

// Namespace: 
private sealed class <DownloadAero>c__AnonStoreyAA // TypeDefIndex: 3382
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal HelmetAeroDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100277194
	internal void <>m__14(List`1<Texture2D> objs); // 0x1002771B4
	internal void <>m__15(); // 0x100277278
}

// Namespace: 
public class HelmetCamoDownloader : MonoBehaviour // TypeDefIndex: 3383
{
	// Fields
	private LoadingBundle m_camoLoadingBindle; // 0x18
	private static HelmetCamoDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x1002774E4
	public void add_DownloadComplete(Action value); // 0x1002774EC
	public void remove_DownloadComplete(Action value); // 0x1002775CC
	public static HelmetCamoDownloader get_Instance(); // 0x1002776AC
	public float get_Progress(); // 0x1002777F0
	public bool IsLoading(); // 0x100277894
	public void StopDownload(); // 0x10027789C
	public void DownloadCamo(int type, int camo_type); // 0x100277948
}

// Namespace: 
private sealed class <DownloadCamo>c__AnonStoreyAB // TypeDefIndex: 3384
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal HelmetCamoDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100277EEC
	internal void <>m__16(List`1<Texture2D> objs); // 0x100277EF4
	internal void <>m__17(); // 0x100277FB8
}

// Namespace: 
public class HelmetDownloader : MonoBehaviour // TypeDefIndex: 3385
{
	// Fields
	private LoadingBundle m_helmetLoadingBindle; // 0x18
	private static HelmetDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x10027B8AC
	public void add_DownloadComplete(Action value); // 0x100278C14
	public void remove_DownloadComplete(Action value); // 0x10027B8B4
	public static HelmetDownloader get_Instance(); // 0x1002782F0
	public float get_Progress(); // 0x10027B548
	public bool IsLoading(); // 0x100278434
	public void StopDownload(); // 0x100278470
	public void DownloadHelmet(int type); // 0x100278CF4
}

// Namespace: 
private sealed class <DownloadHelmet>c__AnonStoreyAC // TypeDefIndex: 3386
{
	// Fields
	internal Helmet h; // 0x10
	internal HelmetDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10027B994
	internal void <>m__18(List`1<GameObject> objs); // 0x10027B9AC
	internal void <>m__19(); // 0x10027BA94
}

// Namespace: 
public class LocalizationDownloader : MonoBehaviour // TypeDefIndex: 3387
{
	// Fields
	private LocalizationBundle m_textLoadingBindle; // 0x18
	private static LocalizationDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x100294A50
	public void add_DownloadComplete(Action value); // 0x100294A58
	public void remove_DownloadComplete(Action value); // 0x100294B38
	public static LocalizationDownloader get_Instance(); // 0x100294C18
	public float get_Progress(); // 0x100294D5C
	public bool IsLoading(); // 0x100294DF8
	public void StopDownload(); // 0x100294E00
	public void Download(); // 0x100294EB0
	private void <Download>m__1A(TextAsset t); // 0x100295394
	private void <Download>m__1B(); // 0x100295460
}

// Namespace: 
public class ManifestDownloader : MonoBehaviour // TypeDefIndex: 3388
{
	// Fields
	private static ManifestDownloader _instance; // 0x0
	private AssetBundleManifest manifest; // 0x18
	private Action DownloadComplete; // 0x20

	// Methods
	public void .ctor(); // 0x10029838C
	public static ManifestDownloader get_Instance(); // 0x10029513C
	public void Download(Action _DownloadComplete); // 0x100298394
	public IEnumerator DoDownload(); // 0x1002983F8
	public Hash128 GetHash(string name); // 0x10029525C
	public Hash128 GetHash2(string name); // 0x10029846C
}

// Namespace: 
private sealed class <DoDownload>c__Iterator5 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3389
{
	// Fields
	internal WWW <www>__0; // 0x10
	internal AssetBundleManager <old>__1; // 0x18
	internal GameObject <go>__2; // 0x20
	internal int $PC; // 0x28
	internal object $current; // 0x30
	internal ManifestDownloader <>f__this; // 0x38
	private static OverrideBaseDownloadingURLDelegate <>f__am$cache6; // 0x0

	// Methods
	public void .ctor(); // 0x100298464
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100298488
	private object System.Collections.IEnumerator.get_Current(); // 0x100298490
	public bool MoveNext(); // 0x100298498
	public void Dispose(); // 0x100298A54
	public void Reset(); // 0x100298A60
	private static string <>m__1C(string bundleName); // 0x100298AB4
}

// Namespace: 
public class MapIconDownloader : MonoBehaviour // TypeDefIndex: 3390
{
	// Fields
	private LoadingBundle loadingBindle; // 0x18
	private static MapIconDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x10029B5D0
	public void add_DownloadComplete(Action value); // 0x10029B5D8
	public void remove_DownloadComplete(Action value); // 0x10029B6B8
	public static MapIconDownloader get_Instance(); // 0x10029B798
	public float get_Progress(); // 0x10029B904
	public bool IsLoading(); // 0x10029B9A0
	public void StopDownload(); // 0x10029B9A8
	public void Download(string map); // 0x10029BA58
}

// Namespace: 
private sealed class <Download>c__AnonStoreyAD // TypeDefIndex: 3391
{
	// Fields
	internal string map; // 0x10
	internal MapIconDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10029BD98
	internal void <>m__1D(List`1<Texture2D> objs); // 0x10029BDA0
	internal void <>m__1E(); // 0x10029BEC4
}

// Namespace: 
public class MenuLightsDownloader : MonoBehaviour // TypeDefIndex: 3392
{
	// Fields
	private LoadingBundle loadingBindle; // 0x18
	private static MenuLightsDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x1002D8D50
	public void add_DownloadComplete(Action value); // 0x1002D89D4
	public void remove_DownloadComplete(Action value); // 0x1002D88F4
	public static MenuLightsDownloader get_Instance(); // 0x1002D8788
	public float get_Progress(); // 0x1002D8D58
	public bool IsLoading(); // 0x1002D8DF4
	public void StopDownload(); // 0x1002D8DFC
	public void Download(); // 0x1002D8AB4
	private void <Download>m__1F(List`1<GameObject> objs); // 0x1002D8EAC
	private void <Download>m__20(); // 0x1002D8F5C
}

// Namespace: 
public class StateChecker`1 // TypeDefIndex: 3393
{
	// Fields
	private T value; // 0x0

	// Methods
	public void .ctor(T initial); // 0
	public bool IsChanged(T current); // 0
}

// Namespace: 
public class TapjoyPlugin : MonoBehaviour // TypeDefIndex: 3394
{
	// Fields
	private static TapjoyPlugin _instance; // 0x0

	// Methods
	public void .ctor(); // 0x10014E0C0
	public static TapjoyPlugin get_Instance(); // 0x10014E0C8
	public void Init(); // 0x10014E1E8
}

// Namespace: 
public class TerritoryIconDownloader : MonoBehaviour // TypeDefIndex: 3395
{
	// Fields
	private LoadingBundle loadingBindle; // 0x18
	private static TerritoryIconDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x10014E9EC
	public void add_DownloadComplete(Action value); // 0x10014E9F4
	public void remove_DownloadComplete(Action value); // 0x10014EAD4
	public static TerritoryIconDownloader get_Instance(); // 0x10014EBB4
	public float get_Progress(); // 0x10014ED20
	public bool IsLoading(); // 0x10014EDBC
	public void StopDownload(); // 0x10014EDC4
	public void Download(WarTerritory t); // 0x10014EE74
}

// Namespace: 
private sealed class <Download>c__AnonStoreyAE // TypeDefIndex: 3396
{
	// Fields
	internal WarTerritory t; // 0x10
	internal TerritoryIconDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10014F20C
	internal void <>m__21(List`1<Texture2D> objs); // 0x10014F214
	internal void <>m__22(); // 0x10014F2F4
}

// Namespace: 
public class ToolkitPlatform : MonoBehaviour // TypeDefIndex: 3397
{
	// Fields
	private PlatformList platforms; // 0x18

	// Methods
	public void .ctor(); // 0x10019D264
	private void Awake(); // 0x10019D26C
	private void Start(); // 0x10019D3A4
	private IEnumerator NextScene(); // 0x10019D3D0
}

// Namespace: 
public sealed class PlatformList : Enum // TypeDefIndex: 3398
{
	// Fields
	public int value__; // 0x10
	public const PlatformList x1 = 0; // 0x0
	public const PlatformList x2 = 1; // 0x0
	public const PlatformList x4 = 2; // 0x0

}

// Namespace: 
private sealed class <NextScene>c__Iterator6 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3399
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x10019D42C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10019D434
	private object System.Collections.IEnumerator.get_Current(); // 0x10019D43C
	public bool MoveNext(); // 0x10019D444
	public void Dispose(); // 0x10019D50C
	public void Reset(); // 0x10019D518
}

// Namespace: 
public class TunePlugin : MonoBehaviour // TypeDefIndex: 3400
{
	// Fields
	private static TunePlugin _instance; // 0x0

	// Methods
	public void .ctor(); // 0x1001A1C24
	public static TunePlugin get_Instance(); // 0x1001A1C2C
	public void Init(); // 0x1001A1D4C
	private void OnApplicationPause(bool pause); // 0x1001A1F58
}

// Namespace: 
public class WeaponCamoDownloader : MonoBehaviour // TypeDefIndex: 3401
{
	// Fields
	private LoadingBundle m_camoLoadingBindle; // 0x18
	private static WeaponCamoDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x1001C92A4
	public void add_DownloadComplete(Action value); // 0x1001C92AC
	public void remove_DownloadComplete(Action value); // 0x1001C938C
	public static WeaponCamoDownloader get_Instance(); // 0x1001C946C
	public float get_Progress(); // 0x1001C95B0
	public bool IsLoading(); // 0x1001C964C
	public void StopDownload(); // 0x1001C9654
	public void DownloadCamo(int type, int camo_type); // 0x1001C9704
}

// Namespace: 
private sealed class <DownloadCamo>c__AnonStoreyAF // TypeDefIndex: 3402
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal WeaponCamoDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1001C9CC0
	internal void <>m__23(List`1<Texture2D> objs); // 0x1001C9CC8
	internal void <>m__24(); // 0x1001C9D8C
}

// Namespace: 
public class WeaponDownloader : MonoBehaviour // TypeDefIndex: 3403
{
	// Fields
	private LoadingBundle m_weaponLoadingBindle; // 0x18
	private static WeaponDownloader m_Instance; // 0x0
	private bool is_loading; // 0x20
	private Action DownloadComplete; // 0x28

	// Methods
	public void .ctor(); // 0x1001C9E78
	public void add_DownloadComplete(Action value); // 0x1001C9E80
	public void remove_DownloadComplete(Action value); // 0x1001C9F60
	public static WeaponDownloader get_Instance(); // 0x1001CA040
	public float get_Progress(); // 0x1001CA184
	public bool IsLoading(); // 0x1001CA220
	public void StopDownload(); // 0x1001CA228
	public void DownloadWeapon(int type); // 0x1001CA2D8
}

// Namespace: 
private sealed class <DownloadWeapon>c__AnonStoreyB0 // TypeDefIndex: 3404
{
	// Fields
	internal Weapon w; // 0x10
	internal WeaponDownloader <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1001CA714
	internal void <>m__25(List`1<GameObject> objs); // 0x1001CA71C
	internal void <>m__26(); // 0x1001CA804
}

// Namespace: 
public class BattleHistoryElement : MonoBehaviour // TypeDefIndex: 3405
{
	// Fields
	public tk2dSlicedSprite border; // 0x18
	public GameObject[] element; // 0x20
	public tk2dTextMesh date; // 0x28
	public tk2dTextMesh type; // 0x30
	public tk2dTextMesh location; // 0x38
	public tk2dTextMesh status; // 0x40
	public tk2dTextMesh val; // 0x48
	public tk2dTextMesh kills; // 0x50
	public tk2dTextMesh death; // 0x58
	public float Multiplier; // 0x60
	private Color32 wonColor; // 0x64
	private Color32 lostColor; // 0x68

	// Methods
	public void .ctor(); // 0x100066374
	public void Init(int battle); // 0x100066400
}

// Namespace: 
public class BillingSupportChecker : MonoBehaviour // TypeDefIndex: 3406
{
	// Fields
	public GameObject element; // 0x18
	public GameObject spinner; // 0x20

	// Methods
	public void .ctor(); // 0x10006B334
	private void Check(); // 0x10006B33C
	private void OnEnable(); // 0x10006B414
	private void OnDisable(); // 0x10006B544
}

// Namespace: 
public class BlackScreen : MonoBehaviour // TypeDefIndex: 3407
{
	// Fields
	public OnEventDgt OnHided; // 0x18
	public OnEventDgt OnShowed; // 0x20
	public tk2dSlicedSprite fillTop; // 0x28
	public tk2dSlicedSprite fillBottom; // 0x30
	public float showhideSpeed; // 0x38
	public bool hideFlag; // 0x3C
	public bool showFlag; // 0x3D
	public States state; // 0x40
	private tk2dCamera guicamera; // 0x48
	private bool isPlaying; // 0x50

	// Methods
	public void .ctor(); // 0x10006B66C
	private void OnEnable(); // 0x10006B674
	private void Awake(); // 0x10006B67C
	private void Start(); // 0x10006B854
	private void Update(); // 0x10006B974
	private IEnumerator ShowHide(bool isShowing); // 0x10006BD98
	private void OnDestroy(); // 0x10006BE20
	public static string GSH(); // 0x10006BE88
	public static string ComputeHash(string s); // 0x10006BEF0
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3408
{
	// Fields
	public int value__; // 0x10
	public const States showed = 0; // 0x0
	public const States showing = 1; // 0x0
	public const States hiding = 2; // 0x0
	public const States hided = 3; // 0x0

}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 3409
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10006C808
	public virtual void Invoke(); // 0x10006C718
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10006C824
	public virtual void EndInvoke(IAsyncResult result); // 0x10006C884
}

// Namespace: 
private sealed class <ShowHide>c__Iterator7 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3410
{
	// Fields
	internal float <Top>__0; // 0x10
	internal float <Bottom>__1; // 0x14
	internal float <t>__2; // 0x18
	internal bool isShowing; // 0x1C
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal bool <$>isShowing; // 0x30
	internal BlackScreen <>f__this; // 0x38

	// Methods
	public void .ctor(); // 0x10006BE18
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10006C054
	private object System.Collections.IEnumerator.get_Current(); // 0x10006C05C
	public bool MoveNext(); // 0x10006C064
	public void Dispose(); // 0x10006C7A8
	public void Reset(); // 0x10006C7B4
}

// Namespace: 
public class BloodSplatter : MonoBehaviour // TypeDefIndex: 3411
{
	// Fields
	public tk2dCamera guicamera; // 0x18
	public Bloods bloods; // 0x20
	public bool allowChange; // 0x28
	public bool ImpactHigh; // 0x29
	public bool ImpactMedium; // 0x2A
	public bool ImpactLow; // 0x2B
	public float hideSpeed; // 0x2C
	public float impactLeftUp; // 0x30
	public float impactLeftCenter; // 0x34
	public float impactLeftDown; // 0x38
	public float impactUpCenter; // 0x3C
	public float impactUpRight; // 0x40
	public float impactRightCenter; // 0x44
	public float impactRightDown; // 0x48
	public float impactDownCenter; // 0x4C
	private float[] velo; // 0x50

	// Methods
	public void .ctor(); // 0x10006C890
	private void Start(); // 0x10006C904
	private void Update(); // 0x10006CF0C
}

// Namespace: 
public class Bloods // TypeDefIndex: 3412
{
	// Fields
	public tk2dSprite LeftUp; // 0x10
	public tk2dSprite LeftCenter; // 0x18
	public tk2dSprite LeftDown; // 0x20
	public tk2dSprite UpCenter; // 0x28
	public tk2dSprite UpRight; // 0x30
	public tk2dSprite RightCenter; // 0x38
	public tk2dSprite RightDown; // 0x40
	public tk2dSprite DownCenter; // 0x48

	// Methods
	public void .ctor(); // 0x10006D840
}

// Namespace: 
public class BonusDialog : DialogBasic // TypeDefIndex: 3413
{
	// Fields
	public GameObject smart; // 0x98
	public tk2dSprite smartIcon; // 0xA0
	public tk2dTextMesh smartText; // 0xA8
	public GameObject hw; // 0xB0
	public tk2dSprite hwIcon; // 0xB8
	public tk2dTextMesh hwText; // 0xC0
	public GameObject tuning; // 0xC8
	public RemoteSpriteRender tuningIcon; // 0xD0
	public tk2dTextMesh tuningText; // 0xD8
	public tk2dTextMesh tuningValue; // 0xE0
	public GameObject tuningMask; // 0xE8
	public GameObject avatar; // 0xF0
	public tk2dSprite avatarIcon; // 0xF8
	public LocalizationTextMesh avatarText; // 0x100
	public GameObject flag; // 0x108
	public tk2dSprite flagIcon; // 0x110
	public LocalizationTextMesh flagText; // 0x118
	public GameObject dollars; // 0x120
	public tk2dTextMesh dollarsValue; // 0x128
	public GameObject crystals; // 0x130
	public tk2dTextMesh crystalsValue; // 0x138
	public GameObject rankPoints; // 0x140
	public tk2dTextMesh rankPointsValue; // 0x148
	public GameObject experience; // 0x150
	public tk2dTextMesh experienceValue; // 0x158
	public GameObject Boosters; // 0x160
	public tk2dTextMesh BoosterBullet; // 0x168
	public tk2dTextMesh BoosterHealth; // 0x170
	public tk2dTextMesh BoosterLocation; // 0x178
	public GameObject cup; // 0x180
	public tk2dSprite cupIcon; // 0x188
	public tk2dTextMesh cupText; // 0x190
	public tk2dTextMesh cupValue; // 0x198
	public tk2dTextMesh header; // 0x1A0
	public tk2dTextMesh subheader; // 0x1A8
	public tk2dUIItem getButton; // 0x1B0
	public tk2dTextMesh getButtonLabel; // 0x1B8
	public tk2dUIItem facebookButton; // 0x1C0
	public tk2dTextMesh facebookButtonLabel; // 0x1C8
	private bool setShowed; // 0x1D0

	// Methods
	public void .ctor(); // 0x10006E018
	private void Awake(); // 0x10006E080
	public void SetHeader(string text); // 0x10006E164
	public void SetSubHeader(string text); // 0x10006E1D8
	public void SetGetButtonText(string text); // 0x10006E24C
	public void SetFacebookButtonText(string text); // 0x10006E2C0
	public void SetTuning(TuningGroups tuningGroup, int tuningType, int amount); // 0x10006E334
	public void SetWeapon(int id); // 0x10006E660
	public void SetSmartWeapon(int id); // 0x10006EB60
	public void SetHelmet(int id); // 0x10006ED60
	public void SetSmartHelmet(int id); // 0x10006EEA8
	public void SetCup(int c, int amount); // 0x10006F058
	public void SetGift(int sender_avatar, int sender_flag, string sender_squad_name, string sender_name); // 0x10006F248
	public void SetFlag(int id); // 0x10006F374
	public void SetAvatar(int id); // 0x10006F4B0
	public void SetReward(Reward reward); // 0x10006F5D4
	public void SetBonusValue(MoneyTypes type, int value); // 0x10006FD24
	public void SetBoosterValue(int b1, int b2, int b3); // 0x10006F900
	public void SetBonusValueNoZero(BonusValueType type, int value); // 0x10006FE6C
	public void SetBonusValue(BonusValueType type, int value); // 0x10006F690
	public override void SetShowed(); // 0x10006FE7C
	private void RePos(GameObject item, float offset, float h); // 0x10006FF8C
	public override void Show(); // 0x10007006C
}

// Namespace: 
public sealed class BonusValueType : Enum // TypeDefIndex: 3414
{
	// Fields
	public int value__; // 0x10
	public const BonusValueType Dollars = 0; // 0x0
	public const BonusValueType Crystals = 1; // 0x0
	public const BonusValueType Rankpoints = 2; // 0x0
	public const BonusValueType Experience = 3; // 0x0

}

// Namespace: 
public class BottomItemsController : MonoBehaviour // TypeDefIndex: 3415
{
	// Methods
	public void .ctor(); // 0x1000704E4
	public virtual Transform[] GetElements(); // 0x1000704EC
}

// Namespace: 
public class BottomScroll : MonoBehaviour // TypeDefIndex: 3416
{
	// Fields
	public OnPoseChangeDelegate OnPoseChange; // 0x18
	public float offset; // 0x20
	public int visibleCells; // 0x24
	public bool useSelector; // 0x28
	public GameObject separator; // 0x30
	public tk2dSlicedSprite border; // 0x38
	public GameObject selector; // 0x40
	public float switchSpeed; // 0x48
	public string selectorSound; // 0x50
	private tk2dCamera guicamera; // 0x58
	private float sectorWidth; // 0x60
	private GameObject[] separators; // 0x68
	public Transform[] elements; // 0x70
	public Transform[] original; // 0x78
	private float oldoffset; // 0x80
	private Animator selectorAnimator; // 0x88
	private int scrollFingerId; // 0x90
	private tk2dUITouch scrollTouch; // 0x94
	private Touch scrollTouchUnity; // 0xB0
	private int pose; // 0xF4
	private int oldPose; // 0xF8
	private States state; // 0xFC
	private float[] velo; // 0x100
	private int elemetnsLength; // 0x108
	private Vector3 clickPosition; // 0x10C
	private float changePose; // 0x118
	private bool goToElementFlag; // 0x11C
	private bool isInited; // 0x11D
	private bool m_SearchElementsInHierarchy; // 0x11E
	private Vector2 positionTouchOnScreen; // 0x120
	private Vector2 screenSize; // 0x128
	private Vector2 minScreenSize; // 0x130
	private Vector2 maxScreenSize; // 0x138
	public Vector2 addSensitivityViaScreen; // 0x140
	public Vector2 addSensitivity; // 0x148
	private Vector2 addToAddSensitivityViaScreen; // 0x150
	public Vector2 sensitivity; // 0x158
	private Vector2 deltaPosition; // 0x160
	public float leftOffset; // 0x168

	// Methods
	public void .ctor(); // 0x100070544
	public void LockScroll(); // 0x100070638
	public void UnLockScroll(); // 0x1000706B4
	private void Awake(); // 0x100070730
	private void OnSelectorDown(tk2dUIItem btn); // 0x1000708A8
	private void OnSelectorUp(tk2dUIItem btn); // 0x100070914
	private void OnSelectorClick(tk2dUIItem btn); // 0x100070A60
	private IEnumerator ChangePose(int value, bool mode); // 0x100070FA4
	private void Start(); // 0x100071038
	private void Reload(); // 0x1000719C4
	public void Init(optional bool reload); // 0x100071040
	private void OnEnable(); // 0x100073CD4
	private void OnDisable(); // 0x100073D84
	private IEnumerator StopAnimator(); // 0x100073D18
	public Transform GetSelectedElement(); // 0x100073EBC
	public void GoToElement(Transform ele); // 0x100073F00
	public void GoToElement(int index); // 0x100073F7C
	public void GoToWeaponElement(int weaponType); // 0x100073FC8
	public void GoToCamoElement(int weaponCamoType); // 0x100074100
	public void GoToHelmetElement(int helmetType); // 0x100074238
	public void SetAddSensetivityViaScreen(); // 0x1000743E4
	private void Update(); // 0x100074454
	public void FindNewItemAndGo(); // 0x100074E08
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3417
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States touching = 1; // 0x0
	public const States gotopose = 2; // 0x0
	public const States setpose = 3; // 0x0

}

// Namespace: 
public sealed class OnPoseChangeDelegate : MulticastDelegate // TypeDefIndex: 3418
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100075A80
	public virtual void Invoke(Transform element); // 0x100074D6C
	public virtual IAsyncResult BeginInvoke(Transform element, AsyncCallback callback, object object); // 0x100075A90
	public virtual void EndInvoke(IAsyncResult result); // 0x100075AE0
}

// Namespace: 
private sealed class <ChangePose>c__Iterator9 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3419
{
	// Fields
	internal int <i>__0; // 0x10
	internal int value; // 0x14
	internal bool mode; // 0x18
	internal int $PC; // 0x1C
	internal object $current; // 0x20
	internal int <$>value; // 0x28
	internal bool <$>mode; // 0x2C
	internal BottomScroll <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100071030
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100074EEC
	private object System.Collections.IEnumerator.get_Current(); // 0x100074EF4
	public bool MoveNext(); // 0x100074EFC
	public void Dispose(); // 0x100075004
	public void Reset(); // 0x100075010
}

// Namespace: 
private sealed class <StopAnimator>c__IteratorA : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3420
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal BottomScroll <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100073EB4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100075884
	private object System.Collections.IEnumerator.get_Current(); // 0x10007588C
	public bool MoveNext(); // 0x100075894
	public void Dispose(); // 0x100075A20
	public void Reset(); // 0x100075A2C
}

// Namespace: 
private sealed class <Reload>c__AnonStoreyB1 // TypeDefIndex: 3421
{
	// Fields
	internal Transform empty; // 0x10

	// Methods
	public void .ctor(); // 0x100073CCC
	internal bool <>m__27(Transform t); // 0x100075064
}

// Namespace: 
public class BulletBoosterButton : MonoBehaviour // TypeDefIndex: 3422
{
	// Fields
	public static int NoShootTime; // 0x0
	public static int LastMoveTime; // 0x4
	public GameObject glow; // 0x18
	private static Action <>f__am$cache3; // 0x8

	// Methods
	public void .ctor(); // 0x100075B74
	private void Start(); // 0x100075B7C
	private void Update(); // 0x100075C7C
	private static void <Start>m__28(); // 0x100075D8C
}

// Namespace: 
public class BulletSpawn : MonoBehaviour // TypeDefIndex: 3423
{
	// Methods
	public void .ctor(); // 0x1001DBFC4
	private void Start(); // 0x1001DBFCC
}

// Namespace: SA
public class Button : MonoBehaviour // TypeDefIndex: 3424
{
	// Fields
	private const float MAX_DELTA_MOVEMENT = 20; // 0x0
	private const float MAX_TIME = 1.5; // 0x0
	public string cameraName; // 0x18
	public LayerMask raycastLayerMask; // 0x20
	public LayerMask raycastBlockLayerMask; // 0x24
	public Action OnPressed; // 0x28
	public GameObject Highlight; // 0x30
	private bool _pressed; // 0x38
	private int fingerID; // 0x3C
	private Vector2 previousPosition; // 0x40
	private float previousTime; // 0x48

	// Methods
	public void .ctor(); // 0x1000D2C08
	private bool get_pressed(); // 0x1000D2C54
	private void set_pressed(bool value); // 0x1000D2C5C
	private void Start(); // 0x1000D2D08
	private void Update(); // 0x1000D2D90
}

// Namespace: 
public class Button2 : MonoBehaviour // TypeDefIndex: 3425
{
	// Fields
	public GameObject Highlight; // 0x18
	private bool _pressed; // 0x20

	// Methods
	public void .ctor(); // 0x1001DC064
	private bool get_pressed(); // 0x1001DC06C
	private void set_pressed(bool value); // 0x1001DC074
	private void Start(); // 0x1001DC120
	private void <Start>m__29(); // 0x1001DC218
	private void <Start>m__2A(); // 0x1001DC220
}

// Namespace: 
public class CameraAnchor : MonoBehaviour // TypeDefIndex: 3426
{
	// Methods
	public void .ctor(); // 0x1001DC228
	private void Start(); // 0x1001DC230
}

// Namespace: 
public class CamoShaderControl : MonoBehaviour // TypeDefIndex: 3427
{
	// Fields
	public CamoProperty[] camoProperties; // 0x18

	// Methods
	public void .ctor(); // 0x1001DC2D4
	public float GetCamoOpacity(int camo_type); // 0x1001DC2DC
	public bool CamoDisabled(int camo_type); // 0x1001DC370
}

// Namespace: 
public class CamoProperty // TypeDefIndex: 3428
{
	// Fields
	public int camoType; // 0x10
	public bool disable; // 0x14
	public float opacity; // 0x18

	// Methods
	public void .ctor(); // 0x1001DC400
}

// Namespace: 
public class CartBillingGameObjectControl : MonoBehaviour // TypeDefIndex: 3429
{
	// Methods
	public void .ctor(); // 0x1001DC408
	private void Start(); // 0x1001DC410
	private void HandleOnClick(); // 0x1001DC4B4
}

// Namespace: 
public class CartBtn : MonoBehaviour // TypeDefIndex: 3430
{
	// Fields
	public GameObject action; // 0x18

	// Methods
	public void .ctor(); // 0x1001DC4DC
	private void Start(); // 0x1001DC4E4
}

// Namespace: 
public class CartHide : MonoBehaviour // TypeDefIndex: 3431
{
	// Fields
	public GameObject cartButton; // 0x18

	// Methods
	public void .ctor(); // 0x1001DC56C
	private void OnEnable(); // 0x1001DC574
}

// Namespace: 
public class CaseController : MonoBehaviour // TypeDefIndex: 3432
{
	// Methods
	public void .ctor(); // 0x1001DC624
	private void Start(); // 0x1001DC62C
	private IEnumerator Lifetime(); // 0x1001DC77C
}

// Namespace: 
private sealed class <Lifetime>c__IteratorB : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3433
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal CaseController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1001DC7E8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001DC7F0
	private object System.Collections.IEnumerator.get_Current(); // 0x1001DC7F8
	public bool MoveNext(); // 0x1001DC800
	public void Dispose(); // 0x1001DC8FC
	public void Reset(); // 0x1001DC908
}

// Namespace: 
public class Chat : MonoBehaviour // TypeDefIndex: 3434
{
	// Fields
	public Controls controls; // 0x18
	public GameObject wordobj; // 0x20
	public GameObject messageobj; // 0x28
	public SelectStates selectstate; // 0x30
	public float messagelifetime; // 0x34
	public bool testmessage; // 0x38
	private List`1<Message> messages; // 0x40
	private float messageoffset; // 0x48
	private static int[] counter; // 0x0
	private static Action`1<GameObject> <>f__am$cache9; // 0x8

	// Methods
	public void .ctor(); // 0x1001F173C
	private static void .cctor(); // 0x1001F17BC
	public void Reset(); // 0x1001F182C
	private void Start(); // 0x1001F1D14
	private void OnSelectDown(); // 0x1001F2700
	private void OnSelectUp(); // 0x1001F2730
	public void OnSelectClick(); // 0x1001F1C64
	private void Update(); // 0x1001F2760
	public void AddMessage(string playername, int word_id); // 0x1001F2B20
	public void AddBoosterMessage(string playername, int type); // 0x1001F2BFC
	private static void <Reset>m__2B(GameObject child); // 0x1001F2D98
}

// Namespace: 
private class Message // TypeDefIndex: 3435
{
	// Fields
	public string playername; // 0x10
	public Word word; // 0x18
	public float lifetime; // 0x20
	public bool showed; // 0x24
	public GameObject obj; // 0x28
	public ChatMessage mescomp; // 0x30

	// Methods
	public void .ctor(); // 0x1001F2BF4
}

// Namespace: 
public class Controls // TypeDefIndex: 3436
{
	// Fields
	public tk2dUIItem sh_btn; // 0x10
	public Color downcolor; // 0x18
	public Color upcolor; // 0x28
	public tk2dSlicedSprite sh_btnbg; // 0x38
	public GameObject chatlog; // 0x40
	public GameObject chatwords; // 0x48
	public tk2dSlicedSprite bgfill; // 0x50
	public tk2dSlicedSprite bgborder; // 0x58

	// Methods
	public void .ctor(); // 0x1001F2E04
}

// Namespace: 
public sealed class SelectStates : Enum // TypeDefIndex: 3437
{
	// Fields
	public int value__; // 0x10
	public const SelectStates normal = 0; // 0x0
	public const SelectStates select = 1; // 0x0

}

// Namespace: 
public class ChatButtonChecker : MonoBehaviour // TypeDefIndex: 3438
{
	// Methods
	public void .ctor(); // 0x1001F2E0C
	private void Start(); // 0x1001F2E14
	private void Update(); // 0x1001F2EB0
}

// Namespace: 
public class ChatClaimButton : MonoBehaviour // TypeDefIndex: 3439
{
	// Fields
	public int chat_id; // 0x18
	public string nick; // 0x20
	public string message; // 0x28

	// Methods
	public void .ctor(); // 0x1001F2EB4
	private void Start(); // 0x1001F2EBC
	private void <Start>m__2C(); // 0x1001F2F60
}

// Namespace: 
private sealed class <Start>c__AnonStoreyB3 // TypeDefIndex: 3440
{
	// Fields
	internal ConfirmDialog claimDialog; // 0x10
	internal ChatClaimButton <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1001F30D4
	internal void <>m__2D(); // 0x1001F30DC
	internal void <>m__2E(); // 0x1001F3478
}

// Namespace: 
private sealed class <Start>c__AnonStoreyB2 // TypeDefIndex: 3441
{
	// Fields
	internal YesNoDialog yesno; // 0x10
	internal <Start>c__AnonStoreyB3 <>f__ref$179; // 0x18

	// Methods
	public void .ctor(); // 0x1001F3470
	internal void <>m__2F(); // 0x1001F365C
}

// Namespace: 
private sealed class <Start>c__AnonStoreyB4 // TypeDefIndex: 3442
{
	// Fields
	internal YesNoDialog yesno; // 0x10
	internal <Start>c__AnonStoreyB3 <>f__ref$179; // 0x18

	// Methods
	public void .ctor(); // 0x1001F3654
	internal void <>m__30(); // 0x1001F384C
}

// Namespace: 
public class ChatElement : MonoBehaviour // TypeDefIndex: 3443
{
	// Fields
	public tk2dSprite rankicon; // 0x18
	public tk2dSprite flagicon; // 0x20
	public tk2dSprite avatar; // 0x28
	public tk2dTextMesh name; // 0x30
	public tk2dTextMesh message; // 0x38
	public tk2dTextMesh time_message; // 0x40
	public Button ProfileButton; // 0x48
	public int user_id; // 0x50
	public int chat_id; // 0x54
	public string nick; // 0x58

	// Methods
	public void .ctor(); // 0x1001F397C
	private void OnEnable(); // 0x1001F3984
	private void OnProfileButton(); // 0x1001F3AF4
	private void OnDestroy(); // 0x1001F3D90
}

// Namespace: 
public class ChatElements : MonoBehaviour // TypeDefIndex: 3444
{
	// Fields
	private const float ROW_SIZE = 110; // 0x0
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject chatprefab; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	private bool inprocess; // 0x38
	private long updateTime; // 0x40
	public BoxCollider boxColliderFix; // 0x48
	public tk2dSlicedSprite LineTop; // 0x50
	public tk2dSlicedSprite LineBottom; // 0x58
	public TextInput textMessage; // 0x60
	public tk2dUIItem sendButton; // 0x68
	public tk2dUIItem sendCashButton; // 0x70
	public tk2dTextMesh free_message; // 0x78
	public tk2dTextMesh InChatCountTextMesh; // 0x80
	public tk2dTextMesh cost_message; // 0x88
	public GameObject noSquadChatText; // 0x90
	public tk2dUIItem unbanButton; // 0x98
	public GameObject unbanMask; // 0xA0
	private int unbanCost; // 0xA8
	private int old_chat_messages; // 0xAC
	private int old_user_count; // 0xB0
	private int chat_room; // 0xB4
	public Sections currentSection; // 0xB8
	private static Action`1<GameObject> <>f__am$cache17; // 0x0

	// Methods
	public void .ctor(); // 0x1001F3EE8
	private void Awake(); // 0x1001F3EF8
	private void UpdateBan(); // 0x1001F40D0
	private void OnBuyUnban(); // 0x1001F4E68
	private void UnbanRequest(); // 0x1001F5084
	private void UpdateFreeMessages(); // 0x1001F46C0
	private void OnEnable(); // 0x1001F5180
	private void FixCollider(); // 0x1001F5608
	public void On(); // 0x1001F55D0
	public void ClearContent(); // 0x1001F5748
	public void Reset(); // 0x1001F5588
	private void OnDisable(); // 0x1001F5AF8
	private void OnApplicationPause(bool pauseStatus); // 0x1001F5F10
	private bool IsEmptyMessage(); // 0x1001F5FF4
	private void OnSendCash(); // 0x1001F608C
	private void OnSend(); // 0x1001F6174
	private IEnumerator GetItems(); // 0x1001F56DC
	private void EnterChat(); // 0x1001F6288
	private void OnNewMessage(); // 0x1001F63E0
	private void AddMessage(int i); // 0x1001F679C
	private void OnDestroy(); // 0x1001F71B0
	private void OnGetItems(); // 0x1001F7384
	private void Update(); // 0x1001F7694
	private void <OnBuyUnban>m__31(); // 0x1001F7784
	private static void <ClearContent>m__32(GameObject child); // 0x1001F7788
}

// Namespace: 
private sealed class <GetItems>c__IteratorC : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3445
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ChatElements <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1001F6280
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001F77F4
	private object System.Collections.IEnumerator.get_Current(); // 0x1001F77FC
	public bool MoveNext(); // 0x1001F7804
	public void Dispose(); // 0x1001F78C8
	public void Reset(); // 0x1001F78D4
}

// Namespace: 
public class ChatMenuElements : MonoBehaviour // TypeDefIndex: 3446
{
	// Fields
	public GameObject cartButton; // 0x18
	public MenuTabsControl tabs; // 0x20
	public bool platoon; // 0x28
	public Sections currentSection; // 0x2C
	public static bool canPress; // 0x0
	public static Sections oldSection; // 0x4
	public Section[] sections; // 0x30

	// Methods
	public void .ctor(); // 0x1001F7928
	public void SetTab(Sections section); // 0x1001F7930
	private void OnEnable(); // 0x1001F7B38
	private void Start(); // 0x1001F7D14
	private Sections GetSection(int index); // 0x1001F7ED8
	private int FindTab(Sections sec); // 0x1001F79C0
	private void OnTabSelect(int index); // 0x1001F7F70
	private void ShowSection(Sections section); // 0x1001F7FA0
	private void OnMaskCover(int index); // 0x1001F7FBC
	private void ShowCurrentSection(); // 0x1001F7A8C
	private void HideAllSections(); // 0x1001F8034
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 3447
{
	// Fields
	public int value__; // 0x10
	public const Sections region = 0; // 0x0
	public const Sections squad = 1; // 0x0
	public const Sections alliance = 2; // 0x0
	public const Sections platoons = 3; // 0x0
	public const Sections platoon2x2 = 4; // 0x0
	public const Sections platoon3x3 = 5; // 0x0
	public const Sections platoon4x4 = 6; // 0x0
	public const Sections platoon5x5 = 7; // 0x0
	public const Sections platoon6x6 = 8; // 0x0
	public const Sections unknown = 9; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 3448
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x1001F80BC
}

// Namespace: 
public class ChatMessage : MonoBehaviour // TypeDefIndex: 3449
{
	// Fields
	public tk2dTextMesh namemesh; // 0x18
	public tk2dTextMesh messagemesh; // 0x20
	public float alpha; // 0x28
	private float oldalpha; // 0x2C

	// Methods
	public void .ctor(); // 0x1001F8120
	private void Update(); // 0x1001F8130
}

// Namespace: 
public class ChatRegionElement : MonoBehaviour // TypeDefIndex: 3450
{
	// Fields
	public Button button; // 0x18
	public ChatRegion chatRegion; // 0x20
	public Action`1<ChatRegion> OnSelect; // 0x28

	// Methods
	public void .ctor(); // 0x1001F84B4
	private void Start(); // 0x1001F84BC
	private void OnButton(); // 0x1001F8614
	private void OnDestroy(); // 0x1001F8678
}

// Namespace: 
public class ChatUnBlockButton : MonoBehaviour // TypeDefIndex: 3451
{
	// Fields
	private static Action <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x1001FA85C
	private void Start(); // 0x1001FA864
	private static void <Start>m__33(); // 0x1001FA934
}

// Namespace: 
public class ChatWord : MonoBehaviour // TypeDefIndex: 3452
{
	// Fields
	public int word_id; // 0x18
	public tk2dTextMesh mesh; // 0x20
	public tk2dSlicedSprite border; // 0x28
	public tk2dSlicedSprite fill; // 0x30
	public float width; // 0x38

	// Methods
	public void .ctor(); // 0x1001FA9E8
	private void Start(); // 0x1001FA9F0
	private void OnClick(); // 0x1001FAA94
	public void Setup(Word word); // 0x1001F266C
	private void Update(); // 0x1001FAB18
}

// Namespace: 
public class ChatMenuTab : MonoBehaviour // TypeDefIndex: 3453
{
	// Fields
	public Sections section; // 0x18
	public static Sections tabWhenChatOpen; // 0x0
	public static Sections platoonTabWhenChatOpen; // 0x4
	public static Sections currentSection; // 0x8

	// Methods
	public void .ctor(); // 0x1001F80C4
	private static void .cctor(); // 0x1001F80CC
}

// Namespace: 
public class CheckBox : MonoBehaviour // TypeDefIndex: 3454
{
	// Fields
	public Action`1<bool> OnChange; // 0x18
	public GameObject CheckImage; // 0x20
	private bool check; // 0x28
	private bool enable; // 0x29

	// Methods
	public void .ctor(); // 0x1001FC908
	public bool get_IsChecked(); // 0x1001FC918
	public void SetCheck(bool _check); // 0x1001FC920
	public void SetEnabled(bool _enable); // 0x1001FC9D0
	private void Start(); // 0x1001FC9D8
	private void Update(); // 0x1001FCA90
	private void <Start>m__34(); // 0x1001FCA94
}

// Namespace: 
public class ColorStates : UIStates // TypeDefIndex: 3455
{
	// Fields
	public Color normal; // 0x18
	public Color disabled; // 0x28

	// Methods
	public void .ctor(); // 0x1001FD918
	private void SetState(Color st); // 0x1001FD9C8
	public override void SetNormal(); // 0x1001FDA58
	public override void SetDisabled(); // 0x1001FDA64
}

// Namespace: 
public class ConfirmDialog : DialogBasic // TypeDefIndex: 3456
{
	// Fields
	public tk2dUIItem yesbutton; // 0x98
	public tk2dUIItem yesbutton2; // 0xA0
	public tk2dUIItem yesbutton3; // 0xA8
	public tk2dUIItem nobutton; // 0xB0
	public tk2dTextMesh header; // 0xB8
	public tk2dTextMesh message; // 0xC0
	private Action OnUpdate; // 0xC8

	// Methods
	public void .ctor(); // 0x1001FDA70
	public void add_OnUpdate(Action value); // 0x1001FDAD8
	public void remove_OnUpdate(Action value); // 0x1001FDBB8
	public override void Start(); // 0x1001FDC98
	private void OnNoClick(); // 0x1001FDD34
	public void SetHeader(string text); // 0x1001FDDEC
	public void SetMessage(string text); // 0x1001FDE50
	protected override void Update(); // 0x1001FDEB4
	public static ConfirmDialog CreateConfirmDialog(string header, string message, GameObject confirmDialogPrefab); // 0x1001FDEF0
}

// Namespace: 
public class CreditsElement : MonoBehaviour // TypeDefIndex: 3457
{
	// Fields
	public tk2dTextMesh role; // 0x18
	public tk2dTextMesh peoplename; // 0x20

	// Methods
	public void .ctor(); // 0x10020DFD0
}

// Namespace: 
public class CreditsMenu : MonoBehaviour // TypeDefIndex: 3458
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	public float step; // 0x28
	public float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x10020DFD8
	private void Start(); // 0x10020DFF4
	private void OnScroll(tk2dUIScrollableArea area); // 0x10020F72C
	private void Update(); // 0x10020F760
	private void OnDownScroll(); // 0x10020F7DC
	private void OnUpScroll(); // 0x10020F7E4
}

// Namespace: 
public class Worker // TypeDefIndex: 3459
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x10020F6F4
}

// Namespace: 
public class CupSelectController : GUISelectorBase`1<string> // TypeDefIndex: 3460
{
	// Fields
	public GameObject row; // 0x60
	public Cup[] cups; // 0x68
	public Action`1<int> OnSelect; // 0x70
	private int last; // 0x78

	// Methods
	public void .ctor(); // 0x10020FA18
	protected override void OnStart(); // 0x10020FB60
	private void OnEnable(); // 0x10020FCFC
	protected override int OnCount(); // 0x10020FD10
	protected override float OnHeight(int i); // 0x10020FD2C
	protected override GameObject OnCell(int i); // 0x10020FD98
	public void SetCurrentCup(int c); // 0x10020FC1C
	private void setCurrent(int index); // 0x10021006C
	private void OnSelectItem(object element); // 0x10021016C
}

// Namespace: 
public class Cup // TypeDefIndex: 3461
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string image; // 0x20
	public int value; // 0x28

	// Methods
	public void .ctor(int id, string name, string image); // 0x10020FB1C
}

// Namespace: 
private sealed class <SetCurrentCup>c__AnonStoreyB5 // TypeDefIndex: 3462
{
	// Fields
	internal int c; // 0x10

	// Methods
	public void .ctor(); // 0x100210064
	internal bool <>m__35(Cup cup); // 0x100210268
}

// Namespace: 
public class CupUpdater : MonoBehaviour // TypeDefIndex: 3463
{
	// Fields
	private int cup; // 0x18
	public CupSelectController cc; // 0x20
	private static Func`2<Cup, bool> <>f__am$cache2; // 0x0

	// Methods
	public void .ctor(); // 0x10021028C
	private void OnEnable(); // 0x100210304
	public void OnSelect(int c); // 0x1002110F0
	private void OnDisable(); // 0x1002110F8
	public bool IsChanged(); // 0x10021121C
	public void UpdateRemote(); // 0x100211294
	private static bool <OnEnable>m__36(Cup c); // 0x100211364
}

// Namespace: 
public class CupUpdaterSquad : MonoBehaviour // TypeDefIndex: 3464
{
	// Fields
	private int cup; // 0x18
	private Squad squad; // 0x20
	public CupSelectController cc; // 0x28

	// Methods
	public void .ctor(); // 0x100211458
	private void OnEnable(); // 0x100211460
	public void SetData(Squad squad); // 0x100211584
	public void OnSelect(int c); // 0x100212048
	private void OnDisable(); // 0x100212050
	public bool IsChanged(); // 0x100212174
	public void UpdateRemote(); // 0x100212198
}

// Namespace: 
private sealed class <SetData>c__AnonStoreyB6 // TypeDefIndex: 3465
{
	// Fields
	internal Squad squad; // 0x10

	// Methods
	public void .ctor(); // 0x100212040
	internal bool <>m__37(Cup c); // 0x10021223C
}

// Namespace: 
public class DailyQuests : MonoBehaviour // TypeDefIndex: 3466
{
	// Fields
	public tk2dTextMesh questDescription; // 0x18
	public Transform questRewardGroup; // 0x20
	public tk2dTextMesh questProgress; // 0x28
	public tk2dTextMesh questHeader; // 0x30
	private static Func`2<KeyValuePair`2<string, MapInfo>, bool> <>f__am$cache4; // 0x0

	// Methods
	public void .ctor(); // 0x1002135C4
	public void SetDailyQuests(string map, BattleMode battleMode); // 0x1002135CC
	public void SetInGameDailyQuest(DailyQuestSimple q); // 0x100213BA0
	private static bool <SetDailyQuests>m__38(KeyValuePair`2<string, MapInfo> arg); // 0x100213E84
}

// Namespace: 
public class BundleOptions // TypeDefIndex: 3467
{
	// Fields
	public int version; // 0x10
	public GameObject model; // 0x18

	// Methods
	public void .ctor(); // 0x1001DC054
}

// Namespace: 
public class WeaponBundleOptions : BundleOptions // TypeDefIndex: 3468
{
	// Fields
	public int caseversion; // 0x20
	public List`1<GameObject> gameModel; // 0x28
	public GameObject caseModel; // 0x30
	public Vector3 modelDefaultPos; // 0x38
	public Quaternion modelDefaultRot; // 0x44

	// Methods
	public void .ctor(); // 0x1001C9294
}

// Namespace: 
public class PurchasingOptions // TypeDefIndex: 3469
{
	// Fields
	public int cost; // 0x10
	public MoneyTypes costType; // 0x14
	public int deliveryCost; // 0x18
	public int deliveryTime; // 0x1C
	public int purchaseTimeUTC; // 0x20
	public bool active; // 0x24
	public bool owned; // 0x25
	public bool delivered; // 0x26

	// Methods
	public void .ctor(); // 0x1000C82F8
	public int get_DeliveryTimeLeft(); // 0x1000C8300
	public bool Delivered(int purchaseTime); // 0x1000C8384
	public int get_DeliveryCost(); // 0x1000C8420
}

// Namespace: 
public class DbIdPrinter : MonoBehaviour // TypeDefIndex: 3470
{
	// Fields
	private tk2dTextMesh mesh; // 0x18

	// Methods
	public void .ctor(); // 0x10021C0A0
	private void Start(); // 0x10021C0A8
}

// Namespace: 
public class DialogBasic : MonoBehaviour // TypeDefIndex: 3471
{
	// Fields
	public int priority; // 0x18
	public static int priorityNormal; // 0x0
	public static int priorityHigh; // 0x4
	public static int priorityCritical; // 0x8
	public static int priorityNicknameDialog; // 0xC
	public static int priorityAgreementDialog; // 0x10
	public States state; // 0x1C
	public Transform dialog; // 0x20
	public tk2dSlicedSprite dialogBorder; // 0x28
	public tk2dSlicedSprite wall; // 0x30
	public float speed; // 0x38
	private bool m_ScaleBackToScreen; // 0x3C
	protected DialogCamera dialogCamera; // 0x40
	private Color wallShowColor; // 0x48
	private Color dialogBorderShowColor; // 0x58
	private float[] velo; // 0x68
	private Vector3 velo3; // 0x70
	private float velo4; // 0x7C
	private BoxCollider wallBoxCollider; // 0x80
	private float hide_time; // 0x88
	private Action OnDialogOpened; // 0x90

	// Methods
	public void .ctor(); // 0x100223930
	private static void .cctor(); // 0x100223A3C
	public void add_OnDialogOpened(Action value); // 0x100223AA4
	public void remove_OnDialogOpened(Action value); // 0x100223B84
	public virtual void Start(); // 0x100223C64
	protected virtual void Update(); // 0x100224220
	public virtual void SetHided(); // 0x100224B38
	public virtual void Close(); // 0x100224B84
	public virtual void SetShowed(); // 0x100224FD8
	public void PrepareToShow(); // 0x100224098
	public virtual void Show(); // 0x100225130
	public virtual void Hide(); // 0x1002252E4
	public bool isVisible(); // 0x1002252F0
	private void ResetVelos(); // 0x100224A48
	public void SetPositionForKeyboard(bool isOn); // 0x100225388
	private IEnumerator WaitForInitDialog(); // 0x1002250C4
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3472
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States show = 1; // 0x0
	public const States showing = 2; // 0x0
	public const States hide = 3; // 0x0
	public const States hiding = 4; // 0x0

}

// Namespace: 
private sealed class <WaitForInitDialog>c__Iterator8 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3473
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal DialogBasic <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002254DC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002254E4
	private object System.Collections.IEnumerator.get_Current(); // 0x1002254EC
	public bool MoveNext(); // 0x1002254F4
	public void Dispose(); // 0x1002255C0
	public void Reset(); // 0x1002255CC
}

// Namespace: 
public class DialogCamera : MonoBehaviour // TypeDefIndex: 3474
{
	// Fields
	private const string DIALOG_PREFABS_PATH = "Prefabs/GUI/"; // 0x0
	public tk2dCamera guicamera; // 0x18
	public Transform centerPosition; // 0x20
	public List`1<GameObject> dialogs; // 0x28
	private static DialogCamera Current; // 0x0
	private static Predicate`1<GameObject> <>f__am$cache4; // 0x8
	private static Action`1<GameObject> <>f__am$cache5; // 0x10

	// Methods
	public void .ctor(); // 0x100225620
	private void AwakeInternal(); // 0x100225690
	public static DialogCamera get_Instance(); // 0x10021907C
	private void Awake(); // 0x100225824
	private void OnDestroy(); // 0x100225828
	private bool FindDialog(GameObject obj); // 0x100225878
	public void TryAddDialog(GameObject obj); // 0x100223EFC
	public bool TryShowDialog(GameObject obj); // 0x1002251CC
	private GameObject GetLast(); // 0x1002258F4
	private void HideAllDialogs(GameObject obj); // 0x100225948
	public void CloseAllWarningDialogs(); // 0x100225B7C
	public void CloseAllSpinerDialogs(); // 0x100225E08
	public void CloseDialog(GameObject obj); // 0x100224CD8
	public void SetGuicamera(); // 0x100225EE0
	public void SetGuicamera(tk2dCamera camera); // 0x100225F54
	public T CreateDailog(); // 0
	public T CreateDailog(string name); // 0
	public void DestroyAllDialogs(); // 0x100225F5C
	public bool AnyVisibleDialogs(); // 0x100226040
	private static bool <CloseAllSpinerDialogs>m__3A(GameObject dialog); // 0x10022627C
	private static void <DestroyAllDialogs>m__3B(GameObject dialog); // 0x100226348
}

// Namespace: 
private sealed class <TryAddDialog>c__AnonStoreyB7 // TypeDefIndex: 3475
{
	// Fields
	internal DialogBasic current; // 0x10

	// Methods
	public void .ctor(); // 0x1002258EC
	internal bool <>m__39(GameObject o); // 0x1002263B4
}

// Namespace: 
public class DialogCameraSetup : MonoBehaviour // TypeDefIndex: 3476
{
	// Methods
	public void .ctor(); // 0x100226438
	private void Awake(); // 0x100226440
}

// Namespace: 
public class DroneController : MonoBehaviour // TypeDefIndex: 3477
{
	// Fields
	private const string LOADER_PATH = "Prefabs/GUI/LoaderOffset"; // 0x0
	public GameObject currentDrone; // 0x18
	public int currentType; // 0x20
	private MenuLoader m_Loader; // 0x28
	public Action OnSwitched; // 0x30

	// Methods
	public void .ctor(); // 0x1002279C4
	private void Start(); // 0x1002279CC
	public bool IsLoading(); // 0x100227A94
	public void StopDownload(); // 0x100227C00
	private tk2dCameraAnchor GetMiddleCenter(); // 0x100227CCC
	private void Setup(int newDrone); // 0x100227DF4
	public void Reset(); // 0x1002287D0
	public void Switch(int newItem); // 0x100228AEC
	private void Show(); // 0x100228728
	private void ShowLoader(bool show); // 0x100228AF0
	private void FixedUpdate(); // 0x100228DF0
}

// Namespace: 
private sealed class <Setup>c__AnonStoreyB8 // TypeDefIndex: 3478
{
	// Fields
	internal Drone h; // 0x10
	internal int newDrone; // 0x18
	internal DroneController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002282C4
	internal void <>m__3C(); // 0x100228F84
}

// Namespace: 
public class DronePart : SAItemPart`3<DronePartType, SADroneStage, SADroneAttributes> // TypeDefIndex: 3479
{
	// Methods
	public void .ctor(); // 0x100229308
}

// Namespace: 
public sealed class DronePartType : Enum // TypeDefIndex: 3480
{
	// Fields
	public int value__; // 0x10
	public const DronePartType damage = 1; // 0x0
	public const DronePartType armor = 2; // 0x0
	public const DronePartType speed = 3; // 0x0
	public const DronePartType battery = 4; // 0x0
	public const DronePartType computer = 5; // 0x0

}

// Namespace: 
public abstract class SAAttributes`1 // TypeDefIndex: 3481
{
	// Methods
	protected void .ctor(); // 0
	public abstract void Add(T attr); // 0
}

// Namespace: 
public class SABaseDrone : SABaseItem`4<DronePart, SADroneAttributes, DronePartType, SADroneStage> // TypeDefIndex: 3482
{
	// Fields
	public int id; // 0x70
	public int parts_stages_sum; // 0x74
	public static List`1<SABaseDrone> drones; // 0x0
	public float energy; // 0x78
	public int energy_time; // 0x7C

	// Methods
	public void .ctor(JSONNode drone); // 0x1000D92F8
	public static void Setup(string[] jsondata); // 0x1000DA6C4
	protected override string get_DeliveryKey(); // 0x1000DA8E4
	protected override string get_DeliveryKey1(); // 0x1000DA92C
	protected override string get_DeliveryKey2(); // 0x1000DA974
	protected override string get_PartKey(); // 0x1000DA9BC
	protected override string get_NamePrefix(); // 0x1000DAA04
	public static void SetUserData(ISFSArray o); // 0x1000DAA4C
	public void SetUserData(ISFSObject o); // 0x1000DAF84
}

// Namespace: 
private sealed class <SetUserData>c__AnonStoreyB9 // TypeDefIndex: 3483
{
	// Fields
	internal int id; // 0x10

	// Methods
	public void .ctor(); // 0x1000DAF7C
	internal bool <>m__3D(SABaseDrone drone); // 0x1000DB4A8
}

// Namespace: 
public abstract class SABaseItem`4 // TypeDefIndex: 3484
{
	// Fields
	private const int MODULE = 5; // 0x0
	private const string KEY_SPLIT = "_"; // 0x0
	public string name; // 0x0
	public PurchasingOptions purchasingOptions; // 0x0
	public SortedList`2<int, T> parts; // 0x0
	public SAAttributes`1<T> attributesBase; // 0x0
	public SAAttributes`1<T> attributesMax; // 0x0
	public SAAttributes`1<T> attributes; // 0x0
	public long rankpoints_required; // 0x0
	public int cup_required; // 0x0
	public int rankpoints_bonus; // 0x0
	public int[] part_max; // 0x0
	public int[] part_active; // 0x0
	public int purchase_time; // 0x0
	public int purchased_part; // 0x0
	public int purchased_stage; // 0x0
	public int purchased_stage_time; // 0x0

	// Methods
	protected void .ctor(); // 0
	public T GetAttributes(); // 0
	public T GetAttributesMax(); // 0
	public virtual string get_DefaultName(); // 0
	protected abstract string get_DeliveryKey(); // 0
	protected abstract string get_DeliveryKey1(); // 0
	protected abstract string get_DeliveryKey2(); // 0
	protected abstract string get_PartKey(); // 0
	protected virtual string get_NamePrefix(); // 0
	public void CaculateMaxAttributes(); // 0
	public virtual void RecaculateAttributes(); // 0
	private bool IsDelivered(int part); // 0
	private bool IsDelivering(int part); // 0
	public bool IsDelivered(int part, int stage); // 0
	public bool IsDelivering(int part, int stage); // 0
	public bool Active(int part, int stage); // 0
	public bool Owned(int part, int stage); // 0
	public bool CanInstall(int part, int stage); // 0
	public bool CanBuy(int part, int stage); // 0
	public int GetStageInPartForInstall(int part); // 0
	public int GetStageInPartForDelivery(int part); // 0
	public int GetStageInPartForBuy(int part); // 0
	public int GetActiveStageInPart(int part); // 0
	public T GetLastStageInPart(int part); // 0
	public T GetStage(int part, int stage); // 0
}

// Namespace: 
public class SADroneAttributes : SAAttributes`1<SADroneAttributes> // TypeDefIndex: 3485
{
	// Fields
	public int damage; // 0x10
	public int hit_chance; // 0x14
	public int ondamage_hit_chance; // 0x18
	public int shot_speed; // 0x1C
	public int armor; // 0x20
	public int armor_tech; // 0x24
	public int fly_speed; // 0x28
	public int battery; // 0x2C
	public int computer; // 0x30
	public int enemy_detect; // 0x34
	public int ondamage_enemy_detect; // 0x38
	public int player_detect; // 0x3C
	public int ondamage_player_detect; // 0x40
	public int leader_detect; // 0x44
	public int revenge_detect; // 0x48
	public int drones_detect; // 0x4C
	public int special_shot_speed; // 0x50
	public int special_hit_chance; // 0x54

	// Methods
	public void .ctor(JSONNode node); // 0x1000D9AD8
	public override void Add(SADroneAttributes a); // 0x1000DB4CC
	public void Sub(SADroneAttributes a); // 0x1000DB560
}

// Namespace: 
public class SADroneStage : SAItemPartStage`1<SADroneAttributes> // TypeDefIndex: 3486
{
	// Methods
	public void .ctor(JSONNode node); // 0x1000DA250
}

// Namespace: 
public abstract class SAItemPart`3 // TypeDefIndex: 3487
{
	// Fields
	public T part; // 0x0
	public SortedList`2<int, T> stages; // 0x0

	// Methods
	protected void .ctor(); // 0
}

// Namespace: 
public class SAItemPartStage`1 // TypeDefIndex: 3488
{
	// Fields
	public int stage; // 0x0
	public T attributes; // 0x0
	public PurchasingOptions purchasingOptions; // 0x0
	public int cup_required; // 0x0

	// Methods
	public void .ctor(); // 0
}

// Namespace: 
public class Element3D : MonoBehaviour // TypeDefIndex: 3489
{
	// Methods
	public void .ctor(); // 0x10022A1B0
}

// Namespace: 
public class EmblemElement : MonoBehaviour // TypeDefIndex: 3490
{
	// Fields
	public int id; // 0x18
	public bool enable; // 0x1C
	public GameObject locked; // 0x20

	// Methods
	public void .ctor(); // 0x10022A468
	public void OnEnable(); // 0x10022A470
	public void Init(int id, bool enable); // 0x10022A47C
}

// Namespace: 
public class EmblemsScroll : DynamicTableView // TypeDefIndex: 3491
{
	// Fields
	public GameObject cell; // 0x30
	public List`1<int> items; // 0x38
	public Action`2<GameObject, int> OnCellUpdate; // 0x40

	// Methods
	public void .ctor(); // 0x10022A5FC
	protected override int OnCount(); // 0x10022A678
	protected override GameObject OnCell(int i); // 0x10022A6D0
	public void OnLeft(); // 0x10022A7A4
	public void OnRight(); // 0x10022A7CC
}

// Namespace: 
public class EnemyAnimationControl : MonoBehaviour // TypeDefIndex: 3492
{
	// Fields
	public GameObject EnemyStandPrefab; // 0x18
	public GameObject EnemySitPrefab; // 0x20
	public GameObject EnemyLyingPrefab; // 0x28
	public Pose pose; // 0x30
	public Anim anim; // 0x34
	public float idleAnimationSpeed; // 0x38
	public float newRotationValue; // 0x3C
	private float currentRotationValue; // 0x40
	private GameObject Enemy; // 0x48
	private Animator EnemyAnimator; // 0x50
	private Rigidbody[] ragdollRigidbody; // 0x58
	private Collider[] ragdollCollider; // 0x60
	private EnemyDamageCollider[] DamageCollider; // 0x68
	private bool speedCorrectionNeeded; // 0x70

	// Methods
	public void .ctor(); // 0x10022A88C
	private void Awake(); // 0x10022A8A4
	private void Start(); // 0x10022ABA8
	private void LoadEnemy(Pose loadPose); // 0x10022ABB0
	private void LateUpdate(); // 0x10022B05C
	public void SetRotation(optional float rotateTo); // 0x10022B198
	public void PlayAnimation(Anim animationToPlay, optional float animationSpeed); // 0x10022B29C
	private IEnumerator Correction(); // 0x10022B8A4
	private void Die(); // 0x10022B534
}

// Namespace: 
public sealed class Pose : Enum // TypeDefIndex: 3493
{
	// Fields
	public int value__; // 0x10
	public const Pose STAND = 0; // 0x0
	public const Pose SIT = 1; // 0x0
	public const Pose LYING = 2; // 0x0

}

// Namespace: 
public sealed class Anim : Enum // TypeDefIndex: 3494
{
	// Fields
	public int value__; // 0x10
	public const Anim IDLE = 0; // 0x0
	public const Anim SHOOT = 1; // 0x0
	public const Anim RELOAD = 2; // 0x0
	public const Anim DAMAGE = 3; // 0x0
	public const Anim DIE = 4; // 0x0

}

// Namespace: 
private sealed class <Correction>c__IteratorD : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3495
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal EnemyAnimationControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10022B910
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10022B918
	private object System.Collections.IEnumerator.get_Current(); // 0x10022B920
	public bool MoveNext(); // 0x10022B928
	public void Dispose(); // 0x10022B9F4
	public void Reset(); // 0x10022BA00
}

// Namespace: 
private sealed class <LoadEnemy>c__AnonStoreyBA // TypeDefIndex: 3496
{
	// Fields
	internal GameEnemy ge; // 0x10

	// Methods
	public void .ctor(); // 0x10022B054
	internal void <>m__3E(GameObject go); // 0x10022BA54
}

// Namespace: 
public class EnemyDamageCollider : MonoBehaviour // TypeDefIndex: 3497
{
	// Methods
	public void .ctor(); // 0x10022BC1C
}

// Namespace: 
public class EnemyLookAtPoint : MonoBehaviour // TypeDefIndex: 3498
{
	// Fields
	public float movingSpeed; // 0x18
	public float maxDist; // 0x1C
	private Vector3 startPos; // 0x20
	private Vector3 startPosGlobal; // 0x2C
	private Vector3 leftPos; // 0x38
	private Vector3 rightPos; // 0x44
	private Vector3 targetPose; // 0x50

	// Methods
	public void .ctor(); // 0x10022BE20
	private void Start(); // 0x10022BE34
	private void Update(); // 0x10022BEE8
}

// Namespace: 
public class EnemyMarker : MonoBehaviour // TypeDefIndex: 3499
{
	// Fields
	public GameSpawnPoints spawnPoints; // 0x18
	public Camera mainCamera; // 0x20
	public tk2dCamera guicamera; // 0x28
	public GameObject directionMarkerPrefab; // 0x30
	private List`1<GameObject> markers; // 0x38
	private bool visible; // 0x40

	// Methods
	public void .ctor(); // 0x10022C030
	private void Start(); // 0x10022C0A0
	private void LateUpdate(); // 0x10022C30C
	private void UpdateMarker(GameObject marker, Vector3 target); // 0x10022C5F4
	private Vector2 WorldToScreenPointProjected(Camera camera, Vector3 worldPos); // 0x10022C9D4
	public void Visible(bool value); // 0x10022CD80
}

// Namespace: 
public class EnemyParts : MonoBehaviour // TypeDefIndex: 3500
{
	// Fields
	public const string head = "EnemyHead"; // 0x0
	public const string body = "EnemyBody"; // 0x0
	public const string arms = "EnemyArms"; // 0x0
	public const string legs = "EnemyLegs"; // 0x0

	// Methods
	public void .ctor(); // 0x10022CD88
}

// Namespace: 
public class EnemyRagdollCollider : MonoBehaviour // TypeDefIndex: 3501
{
	// Methods
	public void .ctor(); // 0x10022CD90
}

// Namespace: 
public class EnergyDialog : DialogBasic // TypeDefIndex: 3502
{
	// Fields
	public tk2dUIItem donateBtn; // 0x98
	public tk2dUIItem facebookBtn; // 0xA0
	public tk2dUIItem waitBtn; // 0xA8
	public tk2dUIItem closeBtn; // 0xB0
	public tk2dTextMesh waitbtnLabel; // 0xB8
	public GameObject refuel; // 0xC0
	public GameObject success; // 0xC8
	public tk2dTextMesh donateValueText; // 0xD0

	// Methods
	public void .ctor(); // 0x10022CD98
	private void Awake(); // 0x10022CDFC
	private void OnClickDonateBtn(); // 0x10022CF54
	private void OnClickFacebookBtn(); // 0x10022D080
	private IEnumerator DestroySound(string clipName, float waitTime); // 0x10022CFFC
	private void OnClickWaitBtn(); // 0x10022D150
	private void OnClickCloseBtn(); // 0x10022D1D0
	public override void Show(); // 0x10022D250
	private IEnumerator Waittimer(); // 0x10022D3E8
	public void SuccessRestored(); // 0x10022D45C
	public override void Close(); // 0x10022D4B8
	public override void SetShowed(); // 0x10022D514
}

// Namespace: 
private sealed class <DestroySound>c__IteratorE : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3503
{
	// Fields
	internal float waitTime; // 0x10
	internal string clipName; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal float <$>waitTime; // 0x30
	internal string <$>clipName; // 0x38

	// Methods
	public void .ctor(); // 0x10022D148
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10022D570
	private object System.Collections.IEnumerator.get_Current(); // 0x10022D578
	public bool MoveNext(); // 0x10022D580
	public void Dispose(); // 0x10022D680
	public void Reset(); // 0x10022D68C
}

// Namespace: 
private sealed class <Waittimer>c__IteratorF : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3504
{
	// Fields
	internal DateTime <dateTime>__0; // 0x10
	internal double <seconds>__1; // 0x20
	internal ConnectionControl <cc>__2; // 0x28
	internal string <text>__3; // 0x30
	internal int $PC; // 0x38
	internal object $current; // 0x40
	internal EnergyDialog <>f__this; // 0x48

	// Methods
	public void .ctor(); // 0x10022D454
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10022D6E0
	private object System.Collections.IEnumerator.get_Current(); // 0x10022D6E8
	public bool MoveNext(); // 0x10022D6F0
	public void Dispose(); // 0x10022DC04
	public void Reset(); // 0x10022DC10
}

// Namespace: 
public interface ISFSTranform // TypeDefIndex: 3505
{
	// Methods
	public abstract void Setup(ISFSObject o); // 0
}

// Namespace: 
public static class ISFSObjectExtensions // TypeDefIndex: 3506
{
	// Methods
	public static long GetLongOrInt(ISFSObject obj, string longKey, string intKey); // 0x10028CDC4
	public static IList`1<T> GetList(ISFSArray obj); // 0
	public static List`1<T> ToList(ISFSArray obj); // 0
	public static T[] GetArray(ISFSArray obj); // 0
}

// Namespace: 
public static class MonoBehaviourTimer // TypeDefIndex: 3507
{
	// Methods
	public static void StartTimer(MonoBehaviour monoObject, float time, Action OnTimer, optional uint repeatCount); // 0x100077474
	private static IEnumerator CreateTimer(MonoBehaviour monoObject, float time, Action OnTimer, optional uint repeatCount); // 0x1000774A8
}

// Namespace: 
private sealed class <CreateTimer>c__Iterator10 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3508
{
	// Fields
	internal float time; // 0x10
	internal Action OnTimer; // 0x18
	internal uint repeatCount; // 0x20
	internal MonoBehaviour monoObject; // 0x28
	internal int $PC; // 0x30
	internal object $current; // 0x38
	internal float <$>time; // 0x40
	internal Action <$>OnTimer; // 0x48
	internal uint <$>repeatCount; // 0x50
	internal MonoBehaviour <$>monoObject; // 0x58

	// Methods
	public void .ctor(); // 0x10007754C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100077554
	private object System.Collections.IEnumerator.get_Current(); // 0x10007755C
	public bool MoveNext(); // 0x100077564
	public void Dispose(); // 0x100077670
	public void Reset(); // 0x10007767C
}

// Namespace: 
public class FacebookBattleShare : MonoBehaviour // TypeDefIndex: 3509
{
	// Methods
	public void .ctor(); // 0x10022E24C
	private void Start(); // 0x10022E254
	private void OnFacebookClick(); // 0x10022E2F8
}

// Namespace: 
public class FacebookLevelUpShare : MonoBehaviour // TypeDefIndex: 3510
{
	// Methods
	public void .ctor(); // 0x10022E344
	private void Start(); // 0x10022E34C
	private void OnFacebookClick(); // 0x10022E3F0
}

// Namespace: 
public class FacebookLikeButton : MonoBehaviour // TypeDefIndex: 3511
{
	// Fields
	public GameObject crystals; // 0x18
	public LocalizationTextMesh text; // 0x20
	public tk2dTextMesh reward; // 0x28

	// Methods
	public void .ctor(); // 0x10022E43C
	private void Start(); // 0x10022E444
	private void Update(); // 0x10022E64C
	private void OnClick(); // 0x10022E6C4
}

// Namespace: 
public class FacebookLogInOutButton : MonoBehaviour // TypeDefIndex: 3512
{
	// Fields
	public LocalizationTextMesh text; // 0x18
	public GameObject confirmDialogPrefab; // 0x20

	// Methods
	public void .ctor(); // 0x10022EA68
	private void Start(); // 0x10022EA70
	private void Update(); // 0x10022EB14
	private void OnClick(); // 0x10022EBA0
	private void OnFacebookLogoutClick(); // 0x10022ED7C
	private void OnDestroy(); // 0x10022EF68
}

// Namespace: 
public class FacebookLoginButton : MonoBehaviour // TypeDefIndex: 3513
{
	// Fields
	public GameObject crystals; // 0x18
	public LocalizationTextMesh text; // 0x20
	public tk2dTextMesh reward; // 0x28

	// Methods
	public void .ctor(); // 0x10022E74C
	private void Start(); // 0x10022E754
	private void Update(); // 0x10022E984
	private void CheckRewarded(); // 0x10022E928
	private void OnClick(); // 0x10022EA00
}

// Namespace: 
public class FacebookQuestCompleteShare : MonoBehaviour // TypeDefIndex: 3514
{
	// Fields
	public string description; // 0x18

	// Methods
	public void .ctor(); // 0x10022EF6C
	private void Start(); // 0x10022EF74
	private void OnFacebookClick(); // 0x10022F018
}

// Namespace: 
public class FacebookRankUpShare : MonoBehaviour // TypeDefIndex: 3515
{
	// Methods
	public void .ctor(); // 0x10022F078
	private void Start(); // 0x10022F080
	private void OnFacebookClick(); // 0x10022F124
}

// Namespace: 
public class FacebookShareButton : MonoBehaviour // TypeDefIndex: 3516
{
	// Methods
	public void .ctor(); // 0x10022F170
	private void OnEnable(); // 0x10022F178
}

// Namespace: 
public class FastBloomControl : MonoBehaviour // TypeDefIndex: 3517
{
	// Fields
	public FastBloom fastBloom; // 0x18
	public float threshhold; // 0x20
	public float intensity; // 0x24
	public float blurSize; // 0x28

	// Methods
	public void .ctor(); // 0x10022F1D8
	private void Awake(); // 0x10022F1F4
	private void SetBloomPropertes(); // 0x10022F21C
	private void Update(); // 0x10022F244
}

// Namespace: 
public class FindSquadInfoLabel : MonoBehaviour // TypeDefIndex: 3518
{
	// Methods
	public void .ctor(); // 0x10022F26C
	private void OnEnable(); // 0x10022F274
}

// Namespace: 
public class FingerZoomValue : MonoBehaviour // TypeDefIndex: 3519
{
	// Fields
	private static Action`1<bool> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x10022F31C
	private void Start(); // 0x10022F324
	private static void <Start>m__3F(bool value); // 0x10022F4C8
}

// Namespace: 
public class FitCollider : MonoBehaviour // TypeDefIndex: 3520
{
	// Fields
	public tk2dTextMesh text; // 0x18
	private string last_text; // 0x20
	public bool x; // 0x28
	public bool y; // 0x29
	public Vector3 size; // 0x2C

	// Methods
	public void .ctor(); // 0x10022F564
	private void Start(); // 0x10022F5DC
	private void Update(); // 0x10022F880
	private void Recalculate(); // 0x10022F5E0
}

// Namespace: 
public class FlagButton : MonoBehaviour // TypeDefIndex: 3521
{
	// Fields
	public int flag; // 0x18

	// Methods
	public void .ctor(); // 0x10022F88C
}

// Namespace: 
public class FlagElement : MonoBehaviour // TypeDefIndex: 3522
{
	// Fields
	public tk2dSprite flagSprite; // 0x18
	public tk2dTextMesh flagText; // 0x20
	public Button btn2; // 0x28
	public tk2dUIItem btn; // 0x30
	public ProfileOptionsMenuFlagController flagcontroll; // 0x38
	public int flagId; // 0x40
	public string cameraName; // 0x48

	// Methods
	public void .ctor(); // 0x10022F894
	private void Start(); // 0x10022F89C
	public void Init(int flag); // 0x10022F8BC
	public void Click(); // 0x10022FA8C
}

// Namespace: 
public class FlagRegionElement : MonoBehaviour // TypeDefIndex: 3523
{
	// Fields
	public tk2dTextMesh flagText; // 0x18
	public int region; // 0x20
	public ProfileOptionsMenuFlagController flagcontr; // 0x28
	public Button btn; // 0x30
	public string cameraName; // 0x38

	// Methods
	public void .ctor(); // 0x10022FAB0
	private void Start(); // 0x10022FAB8
	public void Init(string text, int reg); // 0x10022FBE4
	private void Check(); // 0x10022FD30
}

// Namespace: 
public class ForceMenuNavigator : MonoBehaviour // TypeDefIndex: 3524
{
	// Fields
	public MenuElements betweenMenu; // 0x18
	private MenuNavigator navigator; // 0x20

	// Methods
	public void .ctor(); // 0x1002318E4
	private void Start(); // 0x1002318EC
	private void OnMenuShowed(MenuElements menu); // 0x100231D18
}

// Namespace: 
public class FpsTextmesh : MonoBehaviour // TypeDefIndex: 3525
{
	// Fields
	private float accum; // 0x18
	private int frames; // 0x1C
	private float timeleft; // 0x20
	public float fps; // 0x24
	public tk2dTextMesh textMesh; // 0x28
	private float oldTime; // 0x30

	// Methods
	public void .ctor(); // 0x100232254
	private void Update(); // 0x10023225C
}

// Namespace: 
public class FrameRateSetup : MonoBehaviour // TypeDefIndex: 3526
{
	// Methods
	public void .ctor(); // 0x1002323D0
	private void Start(); // 0x1002323D8
	private void Update(); // 0x1002323E8
}

// Namespace: 
public class FriendDeleteButton : MonoBehaviour // TypeDefIndex: 3527
{
	// Fields
	private tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x100232614
	private void Start(); // 0x10023261C
	private void HandleOnClick(); // 0x1002326C4
	private void FriendRemove(); // 0x100232834
	private void Update(); // 0x1002328E8
	private void <HandleOnClick>m__40(); // 0x1002328EC
}

// Namespace: 
public class FriendInviteButton : MonoBehaviour // TypeDefIndex: 3528
{
	// Fields
	private tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x1002328F0
	private void Start(); // 0x1002328F8
	private void HandleOnClick(); // 0x1002329A0
	private void Update(); // 0x100232A54
}

// Namespace: 
public static class GPGSIds // TypeDefIndex: 3529
{
	// Fields
	public const string achievement_achievement_05 = "CgkIsO-Ln-cWEAIQBQ"; // 0x0
	public const string achievement_achievement_01 = "CgkIsO-Ln-cWEAIQAQ"; // 0x0
	public const string achievement_achievement_02 = "CgkIsO-Ln-cWEAIQAg"; // 0x0
	public const string achievement_achievement_03 = "CgkIsO-Ln-cWEAIQAw"; // 0x0
	public const string achievement_achievement_04 = "CgkIsO-Ln-cWEAIQBA"; // 0x0

}

// Namespace: 
public class AchievementDialogChecker : MonoBehaviour // TypeDefIndex: 3530
{
	// Fields
	private GameObject bonusDialogPrefab; // 0x18
	public float seconds; // 0x20

	// Methods
	public void .ctor(); // 0x100042580
	private void OnEnable(); // 0x100042590
	protected virtual void Init(); // 0x1000425DC
	protected virtual void UnSubscribe(); // 0x1000427A0
	private void OnDisable(); // 0x1000428F0
	protected void CheckAchievements(); // 0x10004270C
	private IEnumerator AchievementDialog(); // 0x10004293C
	private BonusDialog CreateBonusDialog(string header, string subheader, string getbuttonText, string facebookButtonText); // 0x1000429B0
}

// Namespace: 
private sealed class <AchievementDialog>c__Iterator11 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3531
{
	// Fields
	internal AchievementStages <achievementStages>__0; // 0x10
	internal Enumerator<AchievementStages> <$s_104>__1; // 0x18
	internal AchievementStages <a>__2; // 0x30
	internal Enumerator<AchievementStages> <$s_105>__3; // 0x38
	internal AchievementStages <a>__4; // 0x50
	internal YesNoDialog <dialog>__5; // 0x58
	internal int $PC; // 0x60
	internal object $current; // 0x68
	internal AchievementDialogChecker <>f__this; // 0x70

	// Methods
	public void .ctor(); // 0x1000429A8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100042B38
	private object System.Collections.IEnumerator.get_Current(); // 0x100042B40
	public bool MoveNext(); // 0x100042B48
	public void Dispose(); // 0x100043248
	public void Reset(); // 0x100043254
	internal void <>m__41(); // 0x1000432A8
}

// Namespace: 
public class AchievementLabel : MonoBehaviour // TypeDefIndex: 3532
{
	// Fields
	protected tk2dSprite m_Sprite; // 0x18
	protected Color m_Color; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map4; // 0x0

	// Methods
	public void .ctor(); // 0x100043360
	private void Awake(); // 0x100043368
	private void OnEnable(); // 0x1000433A0
	protected virtual void Init(); // 0x1000433EC
	protected virtual void UnSubscribe(); // 0x100043794
	private void OnDisable(); // 0x1000438E4
	protected void ShowLabel(bool enable); // 0x100043528
	protected void CheckAchievements(); // 0x100043564
	private MoneyTypes RewardTypeToMoneyType(string reward); // 0x100043930
}

// Namespace: 
public class ChatRoomCount : MonoBehaviour // TypeDefIndex: 3533
{
	// Fields
	public Rooms roomToCount; // 0x18
	private int top; // 0x1C
	private int oldValueOne; // 0x20
	private int oldValueTwo; // 0x24
	private int oldValue3; // 0x28
	private int oldValue4; // 0x2C
	private int oldValue5; // 0x30
	private int oldValue6; // 0x34
	private int oldValue7; // 0x38
	private tk2dTextMesh textMesh; // 0x40
	private MeshRenderer[] getRenderers; // 0x48

	// Methods
	public void .ctor(); // 0x1001F9BA4
	private void Awake(); // 0x1001F9BB4
	private void Update(); // 0x1001FA3E0
	private void SetValue(); // 0x1001F9DE8
}

// Namespace: 
public sealed class Rooms : Enum // TypeDefIndex: 3534
{
	// Fields
	public int value__; // 0x10
	public const Rooms all = 0; // 0x0
	public const Rooms squad = 1; // 0x0
	public const Rooms alliance = 2; // 0x0
	public const Rooms all_platoon = 3; // 0x0
	public const Rooms platoon2x2 = 4; // 0x0
	public const Rooms platoon3x3 = 5; // 0x0
	public const Rooms platoon4x4 = 6; // 0x0
	public const Rooms platoon5x5 = 7; // 0x0
	public const Rooms platoon6x6 = 8; // 0x0

}

// Namespace: 
public class DailyBonus : DialogBasic // TypeDefIndex: 3535
{
	// Fields
	private DayBonusElement[] m_Days; // 0x98

	// Methods
	public void .ctor(); // 0x1002122C0
	private void OnGetBonusClick(); // 0x100212328
}

// Namespace: 
public class DailyRewardDialog : DialogBasic // TypeDefIndex: 3536
{
	// Fields
	public DailyRewardItem loginReward; // 0x98
	public DailyRewardItem playReward; // 0xA0
	public DailyRewardItem winReward; // 0xA8
	public tk2dUIItem allButton; // 0xB0
	public GameObject prefab; // 0xB8
	public tk2dUIItem backButton; // 0xC0
	public tk2dCameraAnchor anchor; // 0xC8
	public tk2dTextMesh bottomText; // 0xD0
	private GameObject allRewardsView; // 0xD8
	private int activeDay; // 0xE0
	private int getCounter; // 0xE4
	private List`1<DailyReward> activeRewards; // 0xE8
	private static Predicate`1<DailyReward> <>f__am$cacheC; // 0x0
	private static Predicate`1<DailyReward> <>f__am$cacheD; // 0x8
	private static Predicate`1<DailyReward> <>f__am$cacheE; // 0x10
	private static Predicate`1<DailyReward> <>f__am$cacheF; // 0x18
	private static Predicate`1<DailyReward> <>f__am$cache10; // 0x20
	private static Predicate`1<DailyReward> <>f__am$cache11; // 0x28
	private static Predicate`1<DailyReward> <>f__am$cache12; // 0x30

	// Methods
	public void .ctor(); // 0x100214F44
	private DailyRewardItem ItemByType(int type); // 0x100214FAC
	public void setRewards(List`1<DailyReward> _rewards, List`1<DailyReward> activeRewards); // 0x100214FF4
	private bool allRewardsReceived(List`1<DailyReward> rewards); // 0x10021550C
	public void onGet(); // 0x1002155D4
	private void Awake(); // 0x100215640
	protected override void Update(); // 0x100215644
	private void OnBack(); // 0x100215768
	private void OnBackFromList(); // 0x1002157B4
	public override void Start(); // 0x100215938
	public void ShowAllRewards(); // 0x100215A98
	private static bool <setRewards>m__43(DailyReward reward); // 0x100215BA4
	private static bool <setRewards>m__44(DailyReward reward); // 0x100215BC4
	private static bool <setRewards>m__45(DailyReward reward); // 0x100215BE4
	private static bool <setRewards>m__46(DailyReward reward); // 0x100215C04
	private static bool <setRewards>m__47(DailyReward reward); // 0x100215C24
	private static bool <setRewards>m__48(DailyReward reward); // 0x100215C44
	private static bool <allRewardsReceived>m__4B(DailyReward reward); // 0x100215C64
	private void <Start>m__4C(tk2dUIItem item); // 0x100215C84
}

// Namespace: 
private sealed class <setRewards>c__AnonStoreyBB // TypeDefIndex: 3537
{
	// Fields
	internal List`1<DailyReward> rewards; // 0x10
	internal DailyRewardDialog <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100215504
	internal void <>m__42(DailyReward reward); // 0x100215E84
	internal void <>m__49(DailyReward reward); // 0x100215F0C
	internal void <>m__4A(DailyReward reward); // 0x10021625C
}

// Namespace: 
public class DailyRewardItem : MonoBehaviour // TypeDefIndex: 3538
{
	// Fields
	private const string DIALOG_PREFABS_PATH = "Prefabs/GUI/"; // 0x0
	public Transform container; // 0x18
	public tk2dUIItem getButton; // 0x20
	public tk2dTextMesh title; // 0x28
	public GameObject recieved; // 0x30
	private DailyReward reward; // 0x38
	public EventType eventType; // 0x40

	// Methods
	public void .ctor(); // 0x10021638C
	private void onGet(tk2dUIItem item); // 0x100216394
	public void prepare(DailyReward reward); // 0x100215F9C
	public bool getEnabled(); // 0x100215704
	public void setEnabled(bool enabled); // 0x1002162C8
	private void Start(); // 0x100216408
	public T LoadPrefab(string name); // 0
}

// Namespace: 
public class DailyRewardsBlock : MonoBehaviour // TypeDefIndex: 3539
{
	// Fields
	public Transform money; // 0x18
	public tk2dTextMesh money_count; // 0x20
	public Transform crystal; // 0x28
	public tk2dTextMesh crystal_count; // 0x30
	public Transform boost; // 0x38
	public tk2dTextMesh boost_count; // 0x40
	public Transform tuning; // 0x48
	public tk2dTextMesh tuning_count; // 0x50
	public tk2dSprite cup; // 0x58
	public tk2dSprite cup3; // 0x60
	public Transform crystalSingle; // 0x68
	public Transform moneySingle; // 0x70

	// Methods
	public void .ctor(); // 0x100217F58
	public void setVertical(DailyReward reward); // 0x100216488
	public void setHorisontal(DailyReward reward); // 0x100217F60
}

// Namespace: 
public class DailyRewardsController : MonoBehaviour // TypeDefIndex: 3540
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public tk2dUIScrollableArea scroll; // 0x28
	public float angle; // 0x30
	public Transform spiner; // 0x38
	public GameObject rowprefab; // 0x40
	private bool inprocess; // 0x48
	public int activeDay; // 0x4C
	public Color completeColor; // 0x50
	private static Action`1<GameObject> <>f__am$cache9; // 0x0
	private static Func`2<DailyReward, int> <>f__am$cacheA; // 0x8
	private static Func`2<DailyReward, DailyReward> <>f__am$cacheB; // 0x10

	// Methods
	public void .ctor(); // 0x100219158
	public void Reset(); // 0x100219160
	private void OnGetItems(); // 0x100219538
	private void OnEnable(); // 0x10021A83C
	public void On(); // 0x10021A870
	private void OnDisable(); // 0x10021A908
	private IEnumerator GetItems(); // 0x10021A89C
	private void Update(); // 0x10021A96C
	private static void <Reset>m__4D(GameObject child); // 0x10021A9E4
	private static int <OnGetItems>m__4E(DailyReward reward); // 0x10021AA50
	private static DailyReward <OnGetItems>m__4F(DailyReward reward); // 0x10021AA68
}

// Namespace: 
private sealed class <GetItems>c__Iterator12 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3541
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal DailyRewardsController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10021A964
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10021AA70
	private object System.Collections.IEnumerator.get_Current(); // 0x10021AA78
	public bool MoveNext(); // 0x10021AA80
	public void Dispose(); // 0x10021AB8C
	public void Reset(); // 0x10021AB98
}

// Namespace: 
public class DailyRewardsIconBlock : MonoBehaviour // TypeDefIndex: 3542
{
	// Fields
	public tk2dSprite[] icons; // 0x18
	public tk2dTextMesh[] texts; // 0x20
	public tk2dTextMesh text; // 0x28
	public float width; // 0x30

	// Methods
	public void .ctor(); // 0x10021ABEC
	private void Start(); // 0x10021ABF4
	public Bounds getBounds(); // 0x10021ABF8
	private void Update(); // 0x10021B148
}

// Namespace: 
public class DailyRewardsRow : MonoBehaviour // TypeDefIndex: 3543
{
	// Fields
	public DailyRewardsBlock[] rewards; // 0x18
	public tk2dTextMesh day; // 0x20
	public Color playerRankColor; // 0x28
	public GameObject highlight; // 0x38
	public GameObject complete; // 0x40

	// Methods
	public void .ctor(); // 0x10021B14C
	public void setRewards(DailyReward[] items); // 0x10021A658
	public void RemoveSeparator(); // 0x10021A754
}

// Namespace: 
public class DailyRewardsTitle : LocalizationTextMesh // TypeDefIndex: 3544
{
	// Fields
	private int old; // 0x30

	// Methods
	public void .ctor(); // 0x10021B18C
	protected override void SetWord(); // 0x10021B194
	private void Update(); // 0x10021B53C
}

// Namespace: 
public class DailyRewardsTuningBlock : MonoBehaviour // TypeDefIndex: 3545
{
	// Fields
	public RemoteSpriteRender weapon_camo; // 0x18
	public RemoteSpriteRender weapon_handling; // 0x20
	public RemoteSpriteRender helmet_camo; // 0x28
	public RemoteSpriteRender helmet_aero; // 0x30
	public tk2dTextMesh text; // 0x38
	public float width; // 0x40
	private Vector3 positon; // 0x44
	private Bounds bounds; // 0x50

	// Methods
	public void .ctor(); // 0x10021B5D4
	private void Start(); // 0x10021B5DC
	public Bounds getBounds(DailyReward reward); // 0x10021B5E0
	private void prepare(RemoteSpriteRender sprite, int id, string prefix); // 0x10021B8B0
	private void Update(); // 0x10021BBF4
}

// Namespace: 
public class DailyRewardsBtn : MonoBehaviour // TypeDefIndex: 3546
{
	// Fields
	public tk2dTextMesh dailyRewardsTime2; // 0x18
	private static Action <>f__am$cache1; // 0x0
	private static Action <>f__am$cache2; // 0x8
	private static Predicate`1<DailyReward> <>f__am$cache3; // 0x10

	// Methods
	public void .ctor(); // 0x100218C20
	private void Start(); // 0x100218C28
	private void Update(); // 0x100218D7C
	private static void <Start>m__50(); // 0x100218ECC
	private static void <Start>m__51(); // 0x1002190CC
	private static bool <Start>m__52(DailyReward a); // 0x1002190D8
}

// Namespace: 
public class DayBonusElement : MonoBehaviour // TypeDefIndex: 3547
{
	// Fields
	private tk2dTextMesh m_Reward; // 0x18
	private tk2dSprite m_RewardIcon; // 0x20

	// Methods
	public void .ctor(); // 0x10021C054
	public void SetData(string text, string sprite); // 0x10021C05C
}

// Namespace: 
public class DeliveryArmoryLabel : DeliveryLabel // TypeDefIndex: 3548
{
	// Methods
	public void .ctor(); // 0x10021C454
	protected override void CheckWeapon(); // 0x10021C464
	protected override void CheckHelmet(); // 0x10021C81C
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyBC // TypeDefIndex: 3549
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryArmoryLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021C814
	internal void <>m__53(WeaponPart part, WeaponPartStage stage); // 0x10021CCF0
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyBD // TypeDefIndex: 3550
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryArmoryLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021CAF0
	internal void <>m__54(HelmetPart part, HelmetPartStage stage); // 0x10021CAF8
}

// Namespace: 
public class DeliveryInArmoryLabel : DeliveryLabel // TypeDefIndex: 3551
{
	// Fields
	private MenuArmoryWeaponButton m_WeaponButton; // 0x30
	private MenuArmoryHelmetsButton m_HelmetButton; // 0x38

	// Methods
	public void .ctor(); // 0x10021CDE4
	protected override void Init(); // 0x10021CDEC
	protected override void UnSubscribe(); // 0x10021CFB0
	protected override void CheckWeapon(); // 0x10021D0BC
	protected override void CheckHelmet(); // 0x10021D480
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyBE // TypeDefIndex: 3552
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryInArmoryLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021D478
	internal void <>m__55(WeaponPart part, WeaponPartStage stage); // 0x10021D958
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyBF // TypeDefIndex: 3553
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryInArmoryLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021D83C
	internal void <>m__56(HelmetPart part, HelmetPartStage stage); // 0x10021D844
}

// Namespace: 
public class DeliveryInUpgradesLabel : DeliveryLabel // TypeDefIndex: 3554
{
	// Fields
	private MenuUpdWeaponButton m_WeaponButton; // 0x30
	private MenuUpdHelmetButton m_HelmetButton; // 0x38

	// Methods
	public void .ctor(); // 0x10021DA6C
	protected override void Init(); // 0x10021DA74
	protected override void UnSubscribe(); // 0x10021DE08
	private void OnWeaponPartDelivered(int weapontypeint, int weaponpartint, int stage); // 0x10021E150
	private void OnHelmetPartDelivered(int helmettypeint, int helmetpartint, int stage); // 0x10021E2C4
	private void OnWeaponPartInstalled(int weapontype, int weaponpartint, int stage); // 0x10021E438
	private void OnHelmetPartInstalled(int helmettype, int helmetpartint, int stage); // 0x10021E6B4
	protected void CheckWeapon(int weapontypeint, int weaponpartint); // 0x10021E154
	protected void CheckHelmet(int helmettype, int helmetpartint); // 0x10021E2C8
	protected override void CheckWeapon(); // 0x10021E940
	protected override void CheckHelmet(); // 0x10021EC24
	private void HideLabel(Weapon weapon, WeaponPartType partType); // 0x10021E4C4
	private void HideLabel(Helmet helmet, HelmetPartType partType); // 0x10021E740
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyC0 // TypeDefIndex: 3555
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021E930
	internal void <>m__57(WeaponPart part, WeaponPartStage stage); // 0x10021F300
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyC1 // TypeDefIndex: 3556
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021E938
	internal void <>m__58(HelmetPart part, HelmetPartStage stage); // 0x10021EF18
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyC2 // TypeDefIndex: 3557
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021EC1C
	internal void <>m__59(WeaponPart part, WeaponPartStage stage); // 0x10021F4F4
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyC3 // TypeDefIndex: 3558
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021EF00
	internal void <>m__5A(HelmetPart part, HelmetPartStage stage); // 0x10021F10C
}

// Namespace: 
private sealed class <HideLabel>c__AnonStoreyC4 // TypeDefIndex: 3559
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021EF08
	internal void <>m__5B(WeaponPart part, WeaponPartStage stage); // 0x10021F6E8
}

// Namespace: 
private sealed class <HideLabel>c__AnonStoreyC5 // TypeDefIndex: 3560
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryInUpgradesLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10021EF10
	internal void <>m__5C(HelmetPart part, HelmetPartStage stage); // 0x10021F7C4
}

// Namespace: 
public abstract class DeliveryLabel : MonoBehaviour // TypeDefIndex: 3561
{
	// Fields
	protected const string ICON_KEY = "ICON_"; // 0x0
	protected const int ICON_SHOWED = 1; // 0x0
	protected tk2dSprite m_Sprite; // 0x18
	protected Color m_Color; // 0x20

	// Methods
	protected void .ctor(); // 0x10021C45C
	private void Awake(); // 0x10021F8A0
	private void OnEnable(); // 0x10021F8D8
	protected virtual void Init(); // 0x10021CE94
	protected virtual void UnSubscribe(); // 0x10021CFB4
	private void OnDisable(); // 0x10021FDD0
	protected void ShowLabel(bool enable); // 0x10021CCB4
	protected void CheckDelivery(Items item); // 0x10021FBB8
	protected abstract void CheckWeapon(); // 0
	protected abstract void CheckHelmet(); // 0
	protected virtual void CheckDrone(); // 0x10021FE1C
}

// Namespace: 
public class DeliveryMainMenuLabel : DeliveryLabel // TypeDefIndex: 3562
{
	// Methods
	public void .ctor(); // 0x10021FE20
	protected override void CheckWeapon(); // 0x10021FE28
	protected override void CheckHelmet(); // 0x1002200D0
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyC6 // TypeDefIndex: 3563
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryMainMenuLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002200C8
	internal void <>m__5D(WeaponPart part, WeaponPartStage stage); // 0x10022046C
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyC7 // TypeDefIndex: 3564
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryMainMenuLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100220370
	internal void <>m__5E(HelmetPart part, HelmetPartStage stage); // 0x100220378
}

// Namespace: 
public class DeliveryOnScrollLabel : DeliveryLabel // TypeDefIndex: 3565
{
	// Fields
	private Items m_Item; // 0x30

	// Methods
	public void .ctor(); // 0x1002226C8
	protected override void CheckWeapon(); // 0x1002226D0
	protected override void CheckDrone(); // 0x1002229B0
	protected override void CheckHelmet(); // 0x100222C90
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyC8 // TypeDefIndex: 3566
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryOnScrollLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002229A8
	internal void <>m__5F(HelmetPart part, HelmetPartStage stage); // 0x100222D88
}

// Namespace: 
private sealed class <CheckDrone>c__AnonStoreyC9 // TypeDefIndex: 3567
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryOnScrollLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100222C88
	internal void <>m__60(WeaponPart part, WeaponPartStage stage); // 0x100222C94
}

// Namespace: 
public class DeliveryUpgradeLabel : DeliveryLabel // TypeDefIndex: 3568
{
	// Fields
	private MenuNavigateRequestWithItem m_Button; // 0x30

	// Methods
	public void .ctor(); // 0x100222E7C
	protected override void Init(); // 0x100222E84
	protected override void UnSubscribe(); // 0x100222E88
	protected override void CheckWeapon(); // 0x100222F04
	protected override void CheckHelmet(); // 0x1002231AC
}

// Namespace: 
private sealed class <CheckWeapon>c__AnonStoreyCA // TypeDefIndex: 3569
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryUpgradeLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002231A4
	internal void <>m__61(WeaponPart part, WeaponPartStage stage); // 0x100223610
}

// Namespace: 
private sealed class <CheckHelmet>c__AnonStoreyCB // TypeDefIndex: 3570
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryUpgradeLabel <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10022344C
	internal void <>m__62(HelmetPart part, HelmetPartStage stage); // 0x100223454
}

// Namespace: 
public class NewOpenArmoryLabel : DeliveryLabel // TypeDefIndex: 3571
{
	// Methods
	public void .ctor(); // 0x10007C39C
	protected override void CheckWeapon(); // 0x10007C3A4
	protected override void CheckHelmet(); // 0x10007C678
}

// Namespace: 
public class NewOpenArmoryPartLabel : DeliveryLabel // TypeDefIndex: 3572
{
	// Methods
	public void .ctor(); // 0x10007C950
	protected override void CheckWeapon(); // 0x10007C958
	protected override void CheckHelmet(); // 0x10007CC2C
}

// Namespace: 
public class NewOpenInArmoryLabel : NewOpenItemLabel // TypeDefIndex: 3573
{
	// Fields
	private MenuArmoryWeaponButton m_WeaponButton; // 0x40
	private MenuArmoryHelmetsButton m_HelmetButton; // 0x48

	// Methods
	public void .ctor(); // 0x10007CF04
	protected override void Init(); // 0x10007CF14
	private void CheckAndShowWeapon(); // 0x10007D098
	private void CheckAndShowHelmet(); // 0x10007D1F8
	private void CheckAndShow(); // 0x10007CFDC
	public override bool CheckAndGo(); // 0x10007D358
	private bool CheckAndGoWeapon(); // 0x10007D438
	private bool CheckAndGoHelmet(); // 0x10007D528
}

// Namespace: 
public abstract class NewOpenItemLabel : DeliveryLabel // TypeDefIndex: 3574
{
	// Fields
	public GameObject lockIcon; // 0x30
	private bool lastState; // 0x38

	// Methods
	protected void .ctor(); // 0x10007CF0C
	protected override void Init(); // 0x10007D000
	private void Update(); // 0x10007D678
	protected override void CheckWeapon(); // 0x10007D758
	protected override void CheckHelmet(); // 0x10007D75C
	public abstract bool CheckAndGo(); // 0
	protected IEnumerator DelayedHide(); // 0x10007D60C
}

// Namespace: 
private sealed class <DelayedHide>c__Iterator13 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3575
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal NewOpenItemLabel <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10007D760
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10007D768
	private object System.Collections.IEnumerator.get_Current(); // 0x10007D770
	public bool MoveNext(); // 0x10007D778
	public void Dispose(); // 0x10007D844
	public void Reset(); // 0x10007D850
}

// Namespace: 
public class NewOpenOnScrollLabel : DeliveryLabel // TypeDefIndex: 3576
{
	// Fields
	private Items m_Item; // 0x30

	// Methods
	public void .ctor(); // 0x10007D8A4
	protected override void CheckWeapon(); // 0x10007D8AC
	protected override void CheckDrone(); // 0x10007DCEC
	protected override void CheckHelmet(); // 0x10007E0F8
}

// Namespace: 
public class NewOpenTuningCamoLabel : NewOpenItemLabel // TypeDefIndex: 3577
{
	// Fields
	private MenuTuningBtn btn; // 0x40
	public TuningGroups tuningGroup; // 0x48

	// Methods
	public void .ctor(); // 0x10007E0FC
	protected override void Init(); // 0x10007E104
	private void CheckAndShow(); // 0x10007E1A0
	public override bool CheckAndGo(); // 0x10007E268
}

// Namespace: 
public class NewOpenTuningHandleLabel : NewOpenItemLabel // TypeDefIndex: 3578
{
	// Fields
	private MenuTuningBtn btn; // 0x40

	// Methods
	public void .ctor(); // 0x10007E368
	protected override void Init(); // 0x10007E370
	private void CheckAndShow(); // 0x10007E40C
	public override bool CheckAndGo(); // 0x10007E4C4
}

// Namespace: 
public class NewOpenTuningLabel : DeliveryLabel // TypeDefIndex: 3579
{
	// Fields
	public TuningGroups tuningGroupWeapon; // 0x30
	public TuningGroups tuningGroupHelmet; // 0x34

	// Methods
	public void .ctor(); // 0x10007E5B8
	protected override void CheckWeapon(); // 0x10007E5C0
	protected override void CheckHelmet(); // 0x10007E82C
}

// Namespace: 
public class DialogShowButton : MonoBehaviour // TypeDefIndex: 3580
{
	// Fields
	public string setHeaderKey; // 0x18
	public string setMessageKey; // 0x20
	private tk2dUIItem button; // 0x28

	// Methods
	public void .ctor(); // 0x100226588
	private void Start(); // 0x100226590
	private void OnClick(); // 0x100226638
	private void DescriptionRequest(); // 0x10022663C
}

// Namespace: 
public class AgreementDialogController : MonoBehaviour // TypeDefIndex: 3581
{
	// Fields
	public tk2dTextMesh message; // 0x18
	public tk2dUIItem agreementButton; // 0x20
	public tk2dUIItem okButton; // 0x28
	public tk2dUIItem closeButton; // 0x30
	public GameObject dialog; // 0x38
	public GameObject dialogInfo; // 0x40
	private static Action <>f__am$cache6; // 0x0

	// Methods
	public void .ctor(); // 0x10005CE74
	private void Start(); // 0x10005CE7C
	private void Update(); // 0x10005CFD4
	private void <Start>m__63(); // 0x10005CFD8
	private static void <Start>m__64(); // 0x10005D01C
	private void <Start>m__65(); // 0x10005D0A4
}

// Namespace: 
public class ChangeNicknameDialog : NicknameDialog // TypeDefIndex: 3582
{
	// Fields
	private tk2dTextMesh m_CrystallsCount; // 0xE0
	private tk2dUIItem m_BackButton; // 0xE8
	private tk2dCameraAnchor m_Anchor; // 0xF0
	private tk2dSlicedSprite m_buttonBack; // 0xF8

	// Methods
	public void .ctor(); // 0x1001DC95C
	private void Awake(); // 0x1001DC964
	public override void Start(); // 0x1001DC9F4
	public void SetCrystallsCount(int count); // 0x1001DCA70
	public override void Show(); // 0x1001DCABC
	public override void SetShowed(); // 0x1001DCB04
	private void EnableButton(bool enabled); // 0x1001DCB4C
	private void FixedUpdate(); // 0x1001DCBDC
	private void <Awake>m__66(); // 0x1001DCD08
}

// Namespace: 
public class ChangePlatoonDialog : DialogBasic // TypeDefIndex: 3583
{
	// Fields
	public DropSelectController statusSelector; // 0x98
	private tk2dTextMesh m_CrystallsCount; // 0xA0
	private tk2dUIItem m_BackButton; // 0xA8
	private tk2dSlicedSprite m_buttonBack; // 0xB0
	private MeshRenderer m_glow; // 0xB8
	public tk2dTextMesh header; // 0xC0
	public tk2dUIItem button; // 0xC8
	public tk2dTextMesh buttonLabel; // 0xD0
	public tk2dUITextInput nameinput; // 0xD8
	public int maxNicknameLength; // 0xE0
	public tk2dTextMesh errormesh; // 0xE8
	public Vector3 focusPosition; // 0xF0
	private Vector3 startPosition; // 0xFC
	public GameObject SaveButton; // 0x108
	public GameObject InactiveSaveButton; // 0x110
	public GameObject PayAndSaveButton; // 0x118
	public bool editMode; // 0x120
	private string defaultName; // 0x128
	private int currentStatus; // 0x130
	private static Func`2<object, GameObject> <>f__am$cache13; // 0x0
	private static Action`2<GameObject, object> <>f__am$cache14; // 0x8

	// Methods
	public void .ctor(); // 0x1001DCD70
	public void SetDefaultName(string name); // 0x1001DCDF4
	public void SetDisplayName(string name); // 0x1001DCE28
	public void SetDefaultStatus(int status); // 0x1001DCE68
	public override void Start(); // 0x1001DCE70
	public void SetError(string textkey); // 0x1001DD448
	public void OffError(); // 0x1001DD388
	public bool CheckEnteredName(); // 0x1001DD524
	private void Awake(); // 0x1001DD618
	public void SetCrystallsCount(int count); // 0x1001DD7E8
	public override void Show(); // 0x1001DD834
	public override void SetShowed(); // 0x1001DD900
	private void EnableButton(bool enabled); // 0x1001DD730
	private void BtnUpdate(); // 0x1001DD908
	protected override void Update(); // 0x1001DDB5C
	private static GameObject <Start>m__67(object arg); // 0x1001DDC48
	private void <Start>m__68(object obj); // 0x1001DDD5C
	private static void <Start>m__69(GameObject arg1, object arg2); // 0x1001DDD78
	private void <Awake>m__6A(); // 0x1001DDE34
}

// Namespace: 
public class DownloadDialog : MonoBehaviour // TypeDefIndex: 3584
{
	// Fields
	public tk2dUIProgressBar currentProgressBar; // 0x18
	public tk2dUIProgressBar totalProgressBar; // 0x20
	public float max; // 0x28
	public float current; // 0x2C

	// Methods
	public void .ctor(); // 0x1002270F8
	private void Start(); // 0x100227100
	private void Update(); // 0x100227104
}

// Namespace: 
public class DropSelectController : GUISelectorBase`1<object> // TypeDefIndex: 3585
{
	// Fields
	public object[] accounts; // 0x60
	public Func`2<object, GameObject> OnGetCell; // 0x68
	public Action`1<object> OnSelect; // 0x70
	public Action`2<GameObject, object> OnGetCurrent; // 0x78
	private object selected; // 0x80

	// Methods
	public void .ctor(); // 0x100229358
	protected override void OnStart(); // 0x1002293A8
	private void OnEnable(); // 0x100229508
	protected override int OnCount(); // 0x100229584
	protected override float OnHeight(int i); // 0x1002295A0
	protected override GameObject OnCell(int i); // 0x100229634
	public object GetCurrent(); // 0x1002297E0
	public void SetCurrent(object element); // 0x100229488
}

// Namespace: 
public class FriendsSearchDialog : DialogBasic // TypeDefIndex: 3586
{
	// Fields
	private tk2dUIItem m_BackButton; // 0x98
	private tk2dCameraAnchor m_Anchor; // 0xA0
	public tk2dUIItem button; // 0xA8
	public tk2dUITextInput UserInput; // 0xB0
	public int maxNicknameLength; // 0xB8
	public tk2dTextMesh errormesh; // 0xC0
	public Vector3 focusPosition; // 0xC8
	private Vector3 startPosition; // 0xD4

	// Methods
	public void .ctor(); // 0x100232A58
	protected override void Update(); // 0x100232AC8
	public override void Start(); // 0x100232BBC
	public void SetError(string textkey); // 0x100232C6C
	public void OffError(); // 0x100232D48
	private void Awake(); // 0x100232E08
	public override void Show(); // 0x100232E98
	public override void SetShowed(); // 0x100232EE0
	private void EnableButton(bool enabled); // 0x100232F28
	private void FixedUpdate(); // 0x100232F2C
	public bool CheckEnteredNumber(); // 0x100232FA8
	private void <Awake>m__6B(); // 0x100233074
}

// Namespace: 
public class GASelectController : GUISelectorBase`1<string> // TypeDefIndex: 3587
{
	// Fields
	public string[] accounts; // 0x60
	public Action`1<string> OnSelect; // 0x68
	private string last; // 0x70

	// Methods
	public void .ctor(); // 0x100267898
	protected override void OnStart(); // 0x100267918
	private void OnEnable(); // 0x100267AD4
	protected override int OnCount(); // 0x100267BB8
	protected override float OnHeight(int i); // 0x100267BD4
	protected override GameObject OnCell(int i); // 0x100267C8C
	private void setCurrent(string account); // 0x100267A60
	private void OnSelectItem(object element); // 0x100267F40
}

// Namespace: 
public class GASelectDialog : DialogBasic // TypeDefIndex: 3588
{
	// Fields
	public tk2dCameraAnchor anchor; // 0x98
	public tk2dUIItem backButton; // 0xA0
	private GASelectController controller; // 0xA8

	// Methods
	public void .ctor(); // 0x100268000
	public static DialogBasic Instantiate(string[] accounts, Action`1<string> OnSelect); // 0x100268068
	public override void Start(); // 0x1002681B4
}

// Namespace: 
public class GameAgreement : MonoBehaviour // TypeDefIndex: 3589
{
	// Methods
	public void .ctor(); // 0x100244104
	private void Start(); // 0x10024410C
	private void Update(); // 0x100244268
}

// Namespace: 
public class MercHireDialog : DialogBasic // TypeDefIndex: 3590
{
	// Fields
	private tk2dUIItem m_BackButton; // 0x98
	private tk2dCameraAnchor m_Anchor; // 0xA0
	public tk2dTextMesh header; // 0xA8
	public tk2dUIItem button; // 0xB0
	public GameObject buttonInactive; // 0xB8
	public tk2dTextMesh buttonText; // 0xC0
	public tk2dTextMesh pointsText; // 0xC8
	public tk2dTextMesh costText; // 0xD0
	public tk2dUIToggleButton cupOptionTrigger; // 0xD8
	public tk2dTextMesh commissionText; // 0xE0
	public GameObject contentGO; // 0xE8
	public GameObject loadingGO; // 0xF0
	public tk2dTextMesh timeoutText; // 0xF8
	public tk2dTextMesh noSquadText; // 0x100
	public int contract_id; // 0x108
	public int contract_merc_id; // 0x10C
	private bool is_cup_enabled; // 0x110
	private int points; // 0x114
	private int total_cost; // 0x118
	private Action onProlongOk; // 0x120
	private NumberFormatInfo numberFormatInfo; // 0x128

	// Methods
	public void .ctor(); // 0x100345A6C
	private void Awake(); // 0x100345AD4
	private void OnToggle(tk2dUIToggleButton obj); // 0x100345CFC
	private void OnDestroy(); // 0x100346184
	private void OnGetMyMercs(ReadOnlyCollection`1<Contract> contracts); // 0x1003463C0
	private void GetMyMercs(); // 0x100346944
	public void SetProlongContract(int contractID, int mercID, bool squadCupOpt, Action prolongHandler); // 0x100346A88
	private void OnPlayerProfileReceived(); // 0x100346CB4
	private void SetHireContract(); // 0x10034722C
	public override void Start(); // 0x100347468
	private void MercIsOut(); // 0x100347138
	private void MaxContractsCheck(); // 0x100346780
	private void MinTimeCheck(int league_index); // 0x100346DB8
	public void OnCalcTotalPrice(); // 0x100345D60
	private void OnHireMerc(); // 0x10034763C
	protected override void Update(); // 0x1003479AC
	public override void Show(); // 0x1003479B4
	public override void SetShowed(); // 0x1003479BC
	private void <Awake>m__6C(); // 0x100347A04
}

// Namespace: 
public class ServerSelectDailog : DialogBasic // TypeDefIndex: 3591
{
	// Fields
	public tk2dCameraAnchor anchor; // 0x98
	public tk2dUIItem backButton; // 0xA0
	private ServerSelectController controller; // 0xA8

	// Methods
	public void .ctor(); // 0x1000F60F8
	public static DialogBasic Instantiate(Dictionary`2<int, ServerConnectionData> servers, Action`1<ServerConnectionData> OnSelect); // 0x1000F53C0
	public override void Start(); // 0x1000F6160
}

// Namespace: 
public class TerritoryBidDialog : DialogBasic // TypeDefIndex: 3592
{
	// Fields
	private tk2dUIItem m_BackButton; // 0x98
	private tk2dCameraAnchor m_Anchor; // 0xA0
	public tk2dUIItem button; // 0xA8
	public tk2dUITextInput crystalsInput; // 0xB0
	public tk2dTextMesh crystalsText; // 0xB8
	public tk2dTextMesh crystalsMinText; // 0xC0
	public int crystalsMin; // 0xC8
	public int maxNicknameLength; // 0xCC
	public tk2dTextMesh errormesh; // 0xD0
	public Vector3 focusPosition; // 0xD8
	private Vector3 startPosition; // 0xE4

	// Methods
	public void .ctor(); // 0x10014E360
	protected override void Update(); // 0x10014E3D0
	public override void Start(); // 0x10014E4C4
	public void SetError(string textkey); // 0x10014E574
	public void OffError(); // 0x10014E650
	private void Awake(); // 0x10014E710
	public override void Show(); // 0x10014E7C0
	public override void SetShowed(); // 0x10014E7C8
	public int CheckEnteredNumber(); // 0x10014E810
	private void <Awake>m__6D(); // 0x10014E984
}

// Namespace: 
public class TransferGiftDialog : DialogBasic // TypeDefIndex: 3593
{
	// Fields
	private tk2dUIItem m_BackButton; // 0x98
	private tk2dCameraAnchor m_Anchor; // 0xA0
	public tk2dUIItem button; // 0xA8
	public tk2dUIItem shopGift; // 0xB0
	public tk2dUITextInput dollarsInput; // 0xB8
	public tk2dUITextInput crystalsInput; // 0xC0
	public tk2dTextMesh dollarsText; // 0xC8
	public tk2dTextMesh crystalsText; // 0xD0
	public int maxNicknameLength; // 0xD8
	public tk2dTextMesh errormesh; // 0xE0
	public Vector3 focusPosition; // 0xE8
	private Vector3 startPosition; // 0xF4
	public GameObject resourceBlock; // 0x100
	public GameObject noResourceBlock; // 0x108
	private static Func`2<SASku2, bool> <>f__am$cacheE; // 0x0

	// Methods
	public void .ctor(); // 0x1001A0F08
	protected override void Update(); // 0x1001A0F78
	public override void Start(); // 0x1001A107C
	public void SetError(string textkey); // 0x1001A152C
	public void OffError(); // 0x1001A1600
	private void Awake(); // 0x1001A16B8
	public override void Show(); // 0x1001A1764
	public override void SetShowed(); // 0x1001A176C
	private void EnableButton(bool enabled); // 0x1001A17B4
	private void FixedUpdate(); // 0x1001A17B8
	public bool CheckEnteredNumber(); // 0x1001A0CA0
	private static bool <Start>m__6E(SASku2 sku); // 0x1001A1864
	private void <Awake>m__6F(); // 0x1001A1870
}

// Namespace: 
public class WhatsNew : MonoBehaviour // TypeDefIndex: 3594
{
	// Methods
	public void .ctor(); // 0x1001D58B4
	public static string get_LocalizationPrefix(); // 0x1001D58BC
	private void Start(); // 0x1001D5BD0
}

// Namespace: 
public class WhatsNewController : MonoBehaviour // TypeDefIndex: 3595
{
	// Fields
	public tk2dTextMesh message; // 0x18
	public tk2dUIItem agreementButton; // 0x20
	public tk2dUIItem okButton; // 0x28
	public tk2dUIItem closeButton; // 0x30
	public GameObject dialog; // 0x38
	public GameObject dialogInfo; // 0x40

	// Methods
	public void .ctor(); // 0x1001D5EF0
	private void Start(); // 0x1001D5EF8
	private void <Start>m__70(); // 0x1001D5FE4
	private void <Start>m__71(); // 0x1001D6028
}

// Namespace: 
public abstract class DynamicTableView : MonoBehaviour // TypeDefIndex: 3596
{
	// Fields
	public float offset; // 0x18
	public float cellHeight; // 0x1C
	public tk2dUIScrollableArea scroll; // 0x20
	private GameObject root; // 0x28

	// Methods
	protected void .ctor(); // 0x1002297E8
	protected virtual void OnStart(); // 0x1002297F8
	protected abstract int OnCount(); // 0
	protected abstract GameObject OnCell(int i); // 0
	private void Start(); // 0x1002297FC
	public void ReloadContent(); // 0x1002298E0
	protected virtual float OnHeight(int i); // 0x100229DB8
	public int get_Middle(); // 0x100229DC0
	public int get_CurrentMiddle(); // 0x100229E54
	public void set_CurrentMiddle(int value); // 0x100229FEC
	public int get_Current(); // 0x100229EC4
	public void set_Current(int value); // 0x10022A018
	private void <Start>m__E(tk2dUIScrollableArea obj); // 0x10022A0C0
}

// Namespace: 
public class GUIAlign : MonoBehaviour // TypeDefIndex: 3597
{
	// Fields
	private tk2dBaseSprite m_Parent; // 0x18
	private Transform m_Transform; // 0x20
	private Renderer m_Renderer; // 0x28

	// Methods
	public void .ctor(); // 0x10026DAA0
	private void Start(); // 0x10026DAA8
	private void Update(); // 0x10026DB18
}

// Namespace: 
public class GUIAlignToParent : MonoBehaviour // TypeDefIndex: 3598
{
	// Fields
	private tk2dBaseSprite m_Parent; // 0x18
	private Vector2 m_Offset; // 0x20
	private Transform m_Transform; // 0x28
	private Renderer m_Renderer; // 0x30
	private Vector3 m_StartPosition; // 0x38

	// Methods
	public void .ctor(); // 0x10026DD40
	private void Start(); // 0x10026DD90
	private void LateUpdate(); // 0x10026DE1C
}

// Namespace: 
public class GUIAlignWithAnchor : MonoBehaviour // TypeDefIndex: 3599
{
	// Fields
	public GameObject owner; // 0x18
	public Vector2 ownerAnchor; // 0x20
	public Vector3 localPosition; // 0x28
	private Transform m_Transform; // 0x38
	private Renderer m_Renderer; // 0x40

	// Methods
	public void .ctor(); // 0x10026DF8C
	private void Start(); // 0x10026DFDC
	private void Update(); // 0x10026E17C
}

// Namespace: 
public class GUIAlignWithAnchor2 : MonoBehaviour // TypeDefIndex: 3600
{
	// Fields
	public GameObject owner; // 0x18
	public Vector2 ownerAnchor; // 0x20
	public Vector3 localPosition; // 0x28
	private Transform m_Transform; // 0x38
	private Renderer m_Renderer; // 0x40

	// Methods
	public void .ctor(); // 0x10026E2DC
	private void Start(); // 0x10026E32C
	private void Update(); // 0x10026E3E4
}

// Namespace: 
public class GUIAlignWithAnchor3 : MonoBehaviour // TypeDefIndex: 3601
{
	// Fields
	public GameObject owner; // 0x18
	public Vector2 ownerAnchor; // 0x20
	public Vector3 localPosition; // 0x28
	public bool leftRange; // 0x34
	public float left; // 0x38
	private Transform m_Transform; // 0x40
	private Renderer m_Renderer; // 0x48
	public bool ignoreY; // 0x50
	public bool ignoreX; // 0x51

	// Methods
	public void .ctor(); // 0x10026E594
	public void setX(float x); // 0x1002646E8
	private void Start(); // 0x10026E5E4
	private void OnEnable(); // 0x10026E69C
	private void Update(); // 0x10026E744
}

// Namespace: 
public class GrayButton : MonoBehaviour // TypeDefIndex: 3602
{
	// Fields
	public tk2dBaseSprite sprite; // 0x18
	private bool mGrayed; // 0x20

	// Methods
	public void .ctor(); // 0x10026D68C
	private void Start(); // 0x10026D694
	public void set_grayed(bool value); // 0x10026D698
	public bool get_grayed(); // 0x10026D728
}

// Namespace: 
public class ImageWithText : MonoBehaviour // TypeDefIndex: 3603
{
	// Fields
	public tk2dSprite image; // 0x18
	public tk2dTextMesh text; // 0x20

	// Methods
	public void .ctor(); // 0x1002865F4
	private void Start(); // 0x1002865FC
	private void Update(); // 0x100286600
}

// Namespace: 
public class InfoMenu : MonoBehaviour // TypeDefIndex: 3604
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	public tk2dTextMesh header; // 0x28
	private float step; // 0x30
	public float speed; // 0x34
	private bool allowautoscroll; // 0x38
	private float scrollpose; // 0x3C
	public float autoscroll_delay; // 0x40
	public string LocalizationPrefix; // 0x48
	public string headerIndex; // 0x50
	private bool measure; // 0x58

	// Methods
	public void .ctor(); // 0x100286E14
	protected virtual void OnPrepareCell(CreditsElement newelement, int i); // 0x100286E30
	private void Start(); // 0x1002870C8
	private IEnumerator wait(); // 0x10028780C
	private void OnScroll(tk2dUIScrollableArea area); // 0x100287880
	private void Update(); // 0x1002878B4
	private void OnDownScroll(); // 0x10028799C
	private void OnUpScroll(); // 0x1002879A4
}

// Namespace: 
public class Worker // TypeDefIndex: 3605
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x1002877D4
}

// Namespace: 
private sealed class <wait>c__Iterator14 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3606
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal InfoMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100287878
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002879B0
	private object System.Collections.IEnumerator.get_Current(); // 0x1002879B8
	public bool MoveNext(); // 0x1002879C0
	public void Dispose(); // 0x100287A9C
	public void Reset(); // 0x100287AA8
}

// Namespace: 
public class IphoneX : MonoBehaviour // TypeDefIndex: 3607
{
	// Fields
	public float offset; // 0x18

	// Methods
	public void .ctor(); // 0x10028CCF8
	private void Start(); // 0x10028CD00
}

// Namespace: 
public class MatchSize : MonoBehaviour // TypeDefIndex: 3608
{
	// Fields
	public tk2dTextMesh text; // 0x18
	public Renderer render; // 0x20
	public bool x; // 0x28
	public bool y; // 0x29
	public Vector2 size; // 0x2C
	public Vector2 minSize; // 0x34
	private Vector3 current_bounds; // 0x3C

	// Methods
	public void .ctor(); // 0x1002A72C8
	private void Start(); // 0x1002A7300
	private void Update(); // 0x1002A7680
	private void RecalculatePosition(); // 0x1002A7304
}

// Namespace: 
public class MenuUpgradeStatsHelp : DialogShowButton // TypeDefIndex: 3609
{
	// Methods
	public void .ctor(); // 0x100330258
}

// Namespace: 
public class MenuUpgradeBaseButton : MonoBehaviour // TypeDefIndex: 3610
{
	// Fields
	private BottomScroll m_Scroll; // 0x18

	// Methods
	public void .ctor(); // 0x100323E40
	private void Awake(); // 0x1003299A0
	public void GoToThisButton(); // 0x100329A68
}

// Namespace: 
public class MercFishingTimer : MonoBehaviour // TypeDefIndex: 3611
{
	// Fields
	private tk2dTextMesh timer; // 0x18
	private bool _timeToFish; // 0x20

	// Methods
	public void .ctor(); // 0x10034565C
	public bool get_timeToFish(); // 0x100344988
	private void Start(); // 0x100345664
	private void Update(); // 0x1003456BC
}

// Namespace: 
public class NavigatorBackButton : MonoBehaviour // TypeDefIndex: 3612
{
	// Methods
	public void .ctor(); // 0x10007C058
	private void Start(); // 0x10007C060
	private void OnClick(); // 0x10007C104
}

// Namespace: 
public class ServerSelectController : GUISelectorBase`1<ServerConnectionData> // TypeDefIndex: 3613
{
	// Fields
	public Dictionary`2<int, ServerConnectionData> servers; // 0x60
	public Action`1<ServerConnectionData> OnSelect; // 0x68
	private Dictionary`2<int, ServerConnectionData> serversFilter; // 0x70

	// Methods
	public void .ctor(); // 0x1000F581C
	protected override void OnStart(); // 0x1000F586C
	private void OnEnable(); // 0x1000F5AFC
	protected override int OnCount(); // 0x1000F5BE8
	protected override float OnHeight(int i); // 0x1000F5C40
	protected override GameObject OnCell(int i); // 0x1000F5D08
	private void setCurrent(ServerConnectionData data); // 0x1000F59DC
	private void OnSelectItem(object element); // 0x1000F6008
}

// Namespace: 
public class SpinnerAnimation : MonoBehaviour // TypeDefIndex: 3614
{
	// Fields
	public float angle; // 0x18

	// Methods
	public void .ctor(); // 0x100140078
	public void Start(); // 0x100140088
	private void Update(); // 0x10014008C
}

// Namespace: 
public class SquadRoyalText : MonoBehaviour // TypeDefIndex: 3615
{
	// Fields
	public string wordIndex; // 0x18
	private tk2dTextMesh textMesh; // 0x20
	private double value; // 0x28
	private NumberFormatInfo numberFormatInfo; // 0x30

	// Methods
	public void .ctor(); // 0x1001494E8
	private void Start(); // 0x100149540
	private void SetEliteText(); // 0x1001496F0
}

// Namespace: 
public class TextFollow : MonoBehaviour // TypeDefIndex: 3616
{
	// Fields
	public tk2dTextMesh moneyText; // 0x18
	public float offset; // 0x20
	public float smoothTime; // 0x24
	public bool inverted; // 0x28
	public bool devideBy2; // 0x29
	private Vector3 tempPos; // 0x2C
	private float velo; // 0x38
	private float target; // 0x3C
	private float boundX; // 0x40

	// Methods
	public void .ctor(); // 0x10014F504
	private void Start(); // 0x10014F50C
	private void Update(); // 0x10014F75C
	private void RecalculatePosition(bool smooth); // 0x10014F514
}

// Namespace: 
public struct EdgeInsets // TypeDefIndex: 3617
{
	// Fields
	public float Top; // 0x10
	public float Left; // 0x14
	public float Bottom; // 0x18
	public float Right; // 0x1C

	// Methods
	public void .ctor(float top, float left, float bottom, float right); // 0x10022A170
}

// Namespace: 
public class UnitySafeArea // TypeDefIndex: 3618
{
	// Methods
	public void .ctor(); // 0x1001B489C
	public static Rect get_safeArea(); // 0x1001B48A4
	public static EdgeInsets get_safeAreaInsets(); // 0x1001B4A58
}

// Namespace: 
public class GUI2TextPosCorrection : MonoBehaviour // TypeDefIndex: 3619
{
	// Fields
	public tk2dTextMesh moneyText; // 0x18
	public tk2dTextMesh criText; // 0x20
	public float offset; // 0x28
	public float smoothTime; // 0x2C
	private Vector3 tempPos; // 0x30
	private float velo; // 0x3C
	private float target; // 0x40
	private float max; // 0x44

	// Methods
	public void .ctor(); // 0x10026D7FC
	private void Start(); // 0x10026D804
	private void Update(); // 0x10026DA98
	private void RecalculatePosition(bool smooth); // 0x10026D850
}

// Namespace: 
public sealed class AlignPoint : Enum // TypeDefIndex: 3620
{
	// Fields
	public int value__; // 0x10
	public const AlignPoint None = 0; // 0x0
	public const AlignPoint Left = 1; // 0x0
	public const AlignPoint Right = 2; // 0x0

}

// Namespace: 
public class GUIAlignPoint : MonoBehaviour // TypeDefIndex: 3621
{
	// Fields
	public static GUIAlignPoint Left; // 0x0
	public static GUIAlignPoint Right; // 0x8
	private AlignPoint align; // 0x18

	// Methods
	public void .ctor(); // 0x10026DCAC
	private void Awake(); // 0x10026DCB4
	public Vector3 get_position(); // 0x10026DD1C
}

// Namespace: 
public class GUIAnchorAlign : MonoBehaviour // TypeDefIndex: 3622
{
	// Fields
	protected Transform anchor; // 0x18
	protected AlignType align; // 0x20
	public Vector3 offset; // 0x24

	// Methods
	public void .ctor(); // 0x10026EA14
	protected virtual void Update(); // 0x10026EA74
}

// Namespace: 
protected sealed class AlignType : Enum // TypeDefIndex: 3623
{
	// Fields
	public int value__; // 0x10
	public const AlignType XAlign = 0; // 0x0
	public const AlignType YAlign = 1; // 0x0
	public const AlignType XYAlign = 2; // 0x0

}

// Namespace: 
public class GUIAnchorAlign2 : MonoBehaviour // TypeDefIndex: 3624
{
	// Fields
	protected Transform anchor; // 0x18
	protected AlignType align; // 0x20
	protected Vector3 offset; // 0x24

	// Methods
	public void .ctor(); // 0x10026EC44
	protected virtual void Update(); // 0x10026ECA4
}

// Namespace: 
protected sealed class AlignType : Enum // TypeDefIndex: 3625
{
	// Fields
	public int value__; // 0x10
	public const AlignType XAlign = 0; // 0x0
	public const AlignType YAlign = 1; // 0x0
	public const AlignType XYAlign = 2; // 0x0

}

// Namespace: 
public class GUIAnchorAlignPoint : GUIAnchorAlign // TypeDefIndex: 3626
{
	// Fields
	private AlignPoint alignPoint; // 0x30

	// Methods
	public void .ctor(); // 0x10026EE74
	private void Start(); // 0x10026EE78
}

// Namespace: 
public class GUIArrayPosCorrection : MonoBehaviour // TypeDefIndex: 3627
{
	// Fields
	public tk2dTextMesh[] textMeshes; // 0x18
	public float offset; // 0x20
	public float smoothTime; // 0x24
	private Vector3 tempPos; // 0x28
	private float velo; // 0x34
	private float target; // 0x38
	private float summ; // 0x3C
	public bool inverted; // 0x40

	// Methods
	public void .ctor(); // 0x10026EF3C
	private void Start(); // 0x10026EF44
	private void Update(); // 0x10026F21C
	private void RecalculatePosition(bool smooth); // 0x10026EFA8
}

// Namespace: 
public class GUIButtonByBackspace : MonoBehaviour // TypeDefIndex: 3628
{
	// Fields
	private tk2dUIItem btn; // 0x18

	// Methods
	public void .ctor(); // 0x10026F224
	private void Start(); // 0x10026F22C
	private void Update(); // 0x10026F284
}

// Namespace: 
public class GUIButtonSimulate : MonoBehaviour // TypeDefIndex: 3629
{
	// Fields
	public tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x10026F368
	private void Start(); // 0x10026F370
	private void OnClick(); // 0x10026F414
}

// Namespace: 
public class GUICellElement : MonoBehaviour // TypeDefIndex: 3630
{
	// Fields
	public tk2dUIItem button; // 0x18
	public object objectValue; // 0x20
	public Action`1<object> OnSelect; // 0x28

	// Methods
	public void .ctor(); // 0x10026F430
	private void Start(); // 0x10026F438
	private void OnClick(); // 0x10026F514
	private void OnDestroy(); // 0x10026F578
}

// Namespace: 
public class GUIColliderScale : MonoBehaviour // TypeDefIndex: 3631
{
	// Fields
	public float Multiplier; // 0x18
	public bool RecenterCollider; // 0x1C
	public float delta; // 0x20
	public bool deltaBool; // 0x24

	// Methods
	public void .ctor(); // 0x10026F654
	private void Start(); // 0x10026F664
}

// Namespace: 
public class GUIFullscreenSlicedSprite : MonoBehaviour // TypeDefIndex: 3632
{
	// Methods
	public void .ctor(); // 0x10026F7A0
	private void Start(); // 0x10026F7A8
}

// Namespace: 
public class GUILineCorection : MonoBehaviour // TypeDefIndex: 3633
{
	// Fields
	public bool invert; // 0x18
	public float Multiplier; // 0x1C

	// Methods
	public void .ctor(); // 0x10026FACC
	private void Start(); // 0x10026FAD4
}

// Namespace: 
public class GUIMaskSizeControl : MonoBehaviour // TypeDefIndex: 3634
{
	// Fields
	public Vector2 size; // 0x18
	private tk2dUIMask mask; // 0x20

	// Methods
	public void .ctor(); // 0x10026FD28
	private void Awake(); // 0x10026FD30
	private void Update(); // 0x10026FDA4
}

// Namespace: 
public class GUINumberAnimator : MonoBehaviour // TypeDefIndex: 3635
{
	// Fields
	public float value; // 0x18
	private float oldvalue; // 0x1C
	public bool isNumberFormat; // 0x20
	public string addword; // 0x28
	public string pref; // 0x30
	private tk2dTextMesh textMesh; // 0x38

	// Methods
	public void .ctor(); // 0x10026FDD4
	private void Start(); // 0x10026FDE4
	private void Update(); // 0x10026FE3C
}

// Namespace: 
public class GUIPosCorection : MonoBehaviour // TypeDefIndex: 3636
{
	// Fields
	public Vector2 pos; // 0x18

	// Methods
	public void .ctor(); // 0x10026FFC0
	private void Start(); // 0x10026FFC8
}

// Namespace: 
public class GUISSSizer : MonoBehaviour // TypeDefIndex: 3637
{
	// Fields
	public tk2dTextMesh textMesh; // 0x18
	public float spacing; // 0x20
	private tk2dSlicedSprite sprite; // 0x28

	// Methods
	public void .ctor(); // 0x100273278
	private void Start(); // 0x100273288
}

// Namespace: 
public class GUIScreenSnap : MonoBehaviour // TypeDefIndex: 3638
{
	// Fields
	public Sides side; // 0x18
	public float offset; // 0x1C

	// Methods
	public void .ctor(); // 0x100270168
	private void Update(); // 0x100270170
}

// Namespace: 
public sealed class Sides : Enum // TypeDefIndex: 3639
{
	// Fields
	public int value__; // 0x10
	public const Sides left = 0; // 0x0
	public const Sides top = 1; // 0x0
	public const Sides right = 2; // 0x0
	public const Sides down = 3; // 0x0

}

// Namespace: 
public class GUIScroll : MonoBehaviour // TypeDefIndex: 3640
{
	// Fields
	public Axies axis; // 0x18
	public tk2dUIItem scrollarea; // 0x20
	public Transform content; // 0x28
	public Vector2 sensitivity; // 0x30
	public Vector2 input; // 0x38
	public float fadeoutspeed; // 0x40
	public Vector2 minLocalPositions; // 0x44
	public Vector2 maxLocalPositions; // 0x4C
	private Vector2 deltaPosition; // 0x54
	private int scrollFingerId; // 0x5C
	private tk2dUITouch scrollTouch; // 0x60
	private Touch scrollTouchUnity; // 0x7C
	private Vector2 velo; // 0xC0
	private Vector2 positionTouchOnScreen; // 0xC8
	private Vector2 screenSize; // 0xD0
	private Vector2 minScreenSize; // 0xD8
	private Vector2 maxScreenSize; // 0xE0
	private Vector2 addSensitivityViaScreen; // 0xE8
	private Vector2 addSensitivity; // 0xF0
	private Vector2 addToAddSensitivityViaScreen; // 0xF8
	private Vector2 velospd; // 0x100
	private Vector2 velospdtonormal; // 0x108

	// Methods
	public void .ctor(); // 0x1002702A4
	private void Start(); // 0x100270384
	private void OnScrollAreaDown(tk2dUIItem item); // 0x10027052C
	private void OnScrollAreaUp(); // 0x1002705A4
	private void Update(); // 0x1002705B0
	public void SetAddSensetivityViaScreen(); // 0x100270E24
}

// Namespace: 
public sealed class Axies : Enum // TypeDefIndex: 3641
{
	// Fields
	public int value__; // 0x10
	public const Axies horizontal = 0; // 0x0
	public const Axies vertical = 1; // 0x0

}

// Namespace: 
public class GUISelector : MonoBehaviour // TypeDefIndex: 3642
{
	// Fields
	public OnSelectDgt OnSelect; // 0x18
	public States state; // 0x20
	public float contentheight; // 0x24
	public tk2dSlicedSprite background; // 0x28
	public List`1<GUISelectorElement> elements; // 0x30
	public tk2dUIItem dropButton; // 0x38
	private GUISelectorElement firstelement; // 0x40
	private bool inited; // 0x48

	// Methods
	public void .ctor(); // 0x1002711D8
	private void Start(); // 0x1002711E8
	private void Init(); // 0x1002711EC
	public void OnDrop(); // 0x100271750
	private void Close(); // 0x100271A74
	public void OnElementClick(tk2dUIItem item); // 0x100271DC0
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3643
{
	// Fields
	public int value__; // 0x10
	public const States closed = 0; // 0x0
	public const States opened = 1; // 0x0

}

// Namespace: 
public sealed class OnSelectDgt : MulticastDelegate // TypeDefIndex: 3644
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100271FE4
	public virtual void Invoke(int intV, float floatV, string stringV, GameObject gameobjV, Object objV); // 0x100271F0C
	public virtual IAsyncResult BeginInvoke(int intV, float floatV, string stringV, GameObject gameobjV, Object objV, AsyncCallback callback, object object); // 0x100271FF4
	public virtual void EndInvoke(IAsyncResult result); // 0x1002720E8
}

// Namespace: 
public abstract class GUISelectorBase`1 : MonoBehaviour // TypeDefIndex: 3645
{
	// Fields
	public States<T> state; // 0x0
	public float contentheight; // 0x0
	public float cellHeight; // 0x0
	public tk2dSlicedSprite background; // 0x0
	public tk2dUIItem dropButton; // 0x0
	public Transform Arrow; // 0x0
	public tk2dUIMask mask; // 0x0
	public tk2dUIScrollableArea scroll; // 0x0
	public GameObject current; // 0x0
	private GameObject root; // 0x0

	// Methods
	protected void .ctor(); // 0
	protected virtual void OnStart(); // 0
	public virtual void SetCurrent(int index); // 0
	protected abstract int OnCount(); // 0
	protected abstract GameObject OnCell(int i); // 0
	private void Start(); // 0
	private void ReloadContent(); // 0
	protected virtual float OnHeight(int i); // 0
	public virtual void OnDrop(); // 0
	public void Close(); // 0
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3646
{
	// Fields
	public int value__; // 0x0
	public const States<T> closed = 0; // 0x0
	public const States<T> opened = 1; // 0x0

}

// Namespace: 
public class GUISelectorElement : MonoBehaviour // TypeDefIndex: 3647
{
	// Fields
	public int intValue; // 0x18
	public float floatValue; // 0x1C
	public string stringValue; // 0x20
	public GameObject gameObjectValue; // 0x28
	public Object objectValue; // 0x30

	// Methods
	public void .ctor(); // 0x1002720F4
}

// Namespace: 
public class GUISelectorWithScroll : GUISelectorBase`1<ChatRegion> // TypeDefIndex: 3648
{
	// Fields
	public LanguageSelectController language_selector; // 0x60

	// Methods
	public void .ctor(); // 0x1002720FC
	protected override void OnStart(); // 0x10027214C
	protected override int OnCount(); // 0x1002723D0
	public override void OnDrop(); // 0x10027244C
	protected override GameObject OnCell(int i); // 0x1002724B8
	private void OnSelectItem(ChatRegion chatRegion); // 0x100272740
	private string GetLocalizedString(string chat_region); // 0x100272818
	private void setCurrent(int val); // 0x100272200
}

// Namespace: 
private sealed class <setCurrent>c__AnonStoreyCC // TypeDefIndex: 3649
{
	// Fields
	internal int val; // 0x10

	// Methods
	public void .ctor(); // 0x1002728E4
	internal bool <>m__72(ChatRegion r); // 0x1002728EC
}

// Namespace: 
public class GUISlicedSpriteCopyDimension : MonoBehaviour // TypeDefIndex: 3650
{
	// Fields
	public tk2dSlicedSprite example; // 0x18
	private tk2dSlicedSprite current; // 0x20

	// Methods
	public void .ctor(); // 0x100272910
	private void Start(); // 0x100272918
	private void Update(); // 0x100272970
}

// Namespace: 
public class GUISlicedSpritePosCorrection : MonoBehaviour // TypeDefIndex: 3651
{
	// Fields
	public tk2dSlicedSprite sprite; // 0x18
	public float offset; // 0x20
	public bool inverted; // 0x24

	// Methods
	public void .ctor(); // 0x100272A10
	private void Start(); // 0x100272A18
	private void Update(); // 0x100272B1C
	private void RecalculatePosition(); // 0x100272A1C
}

// Namespace: 
public class GUISlicedSpritePosCorrectionY : MonoBehaviour // TypeDefIndex: 3652
{
	// Fields
	public tk2dSlicedSprite sprite; // 0x18

	// Methods
	public void .ctor(); // 0x100272B20
	private void Start(); // 0x100272B28
	private void Update(); // 0x100272BF4
	private void RecalculatePosition(); // 0x100272B2C
}

// Namespace: 
public class GUISlicedSpriteScale : MonoBehaviour // TypeDefIndex: 3653
{
	// Fields
	public float Multiplier; // 0x18
	public bool RecenterCollider; // 0x1C
	public float delta; // 0x20
	public bool deltaBool; // 0x24

	// Methods
	public void .ctor(); // 0x100272BF8
	private void Start(); // 0x100272C08
}

// Namespace: 
public class GUISlicesSpritePosCorrection : MonoBehaviour // TypeDefIndex: 3654
{
	// Fields
	public tk2dSlicedSprite sprite; // 0x18
	public float offset; // 0x20
	public bool inverted; // 0x24

	// Methods
	public void .ctor(); // 0x100272F04
	private void Start(); // 0x100272F0C
	private void Update(); // 0x100272FF0
	private void RecalculatePosition(); // 0x100272F10
}

// Namespace: 
public class GUISsScreenOverride : MonoBehaviour // TypeDefIndex: 3655
{
	// Fields
	public bool notallowapply; // 0x18
	private tk2dSlicedSprite sprite; // 0x20
	public SsOption optionForUse; // 0x28
	public bool ignoreBorderLeft; // 0x30
	public bool ignoreBorderRight; // 0x31
	public bool ignoreBorderTop; // 0x32
	public bool ignoreBorderBottom; // 0x33
	public SsOption[] overrides; // 0x38

	// Methods
	public void .ctor(); // 0x100272FF4
	private void Awake(); // 0x100272FFC
	private void SetCorrections(SsOption option); // 0x1002730D8
}

// Namespace: 
public class Allows // TypeDefIndex: 3656
{
	// Fields
	public bool dimensions; // 0x10
	public bool borders; // 0x11
	public bool localposition; // 0x12

	// Methods
	public void .ctor(); // 0x100273268
}

// Namespace: 
public class SsOption // TypeDefIndex: 3657
{
	// Fields
	public ScreenResolutionEnum resolution; // 0x10
	public Allows allows; // 0x18
	public Vector2 dimensions; // 0x20
	public float borderLeft; // 0x28
	public float borderRight; // 0x2C
	public float borderTop; // 0x30
	public float borderBottom; // 0x34
	public Vector3 localposition; // 0x38

	// Methods
	public void .ctor(); // 0x100273270
}

// Namespace: 
public class GUITextMeshDublicator : MonoBehaviour // TypeDefIndex: 3658
{
	// Fields
	public Vector3 offset; // 0x18
	public Color dublicatedColor; // 0x24
	private tk2dTextMesh currentMesh; // 0x38
	private tk2dTextMesh dublicatedMesh; // 0x40
	public bool waitframe; // 0x48

	// Methods
	public void .ctor(); // 0x100273448
	private IEnumerator Start(); // 0x1002734E8
	private void Update(); // 0x10027355C
	private void OnTextChange(); // 0x100273608
	private void OnColorChange(); // 0x10027365C
	private void OnDestroy(); // 0x100273724
}

// Namespace: 
private sealed class <Start>c__Iterator15 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3659
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal GUITextMeshDublicator <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100273554
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10027387C
	private object System.Collections.IEnumerator.get_Current(); // 0x100273884
	public bool MoveNext(); // 0x10027388C
	public void Dispose(); // 0x100273DB4
	public void Reset(); // 0x100273DC0
}

// Namespace: 
public class GUITextPosCorrection : MonoBehaviour // TypeDefIndex: 3660
{
	// Fields
	public tk2dTextMesh moneyText; // 0x18
	public float offset; // 0x20
	public float smoothTime; // 0x24
	public bool inverted; // 0x28
	public bool devideBy2; // 0x29
	private Vector3 tempPos; // 0x2C
	private float velo; // 0x38
	private float target; // 0x3C
	private float boundX; // 0x40

	// Methods
	public void .ctor(); // 0x100273E14
	private void Start(); // 0x100273E1C
	private void LateUpdate(); // 0x100274058
	public void RecalculatePosition(bool smooth); // 0x100273E68
}

// Namespace: 
public class GUITweenGlowButton : MonoBehaviour // TypeDefIndex: 3661
{
	// Fields
	public Vector3 tween; // 0x18
	private tk2dUIItem button; // 0x28

	// Methods
	public void .ctor(); // 0x1002740FC
	private void Start(); // 0x100274104
	private void OnDown(); // 0x1002741F4
	private void OnUp(); // 0x10027424C
}

// Namespace: 
public class GUIUpDownFillButton : MonoBehaviour // TypeDefIndex: 3662
{
	// Fields
	public GameObject fill; // 0x18
	private tk2dUIItem btn; // 0x20

	// Methods
	public void .ctor(); // 0x1002742A4
	private void Start(); // 0x1002742AC
	private void OnUp(); // 0x10027439C
	private void OnDown(); // 0x100274404
}

// Namespace: 
public class GUIUpDownSpriteColorButton : MonoBehaviour // TypeDefIndex: 3663
{
	// Fields
	public tk2dBaseSprite sprite; // 0x18
	public Color upColor; // 0x20
	public Color downColor; // 0x30

	// Methods
	public void .ctor(); // 0x10027446C
	private void Start(); // 0x100274474
	private void OnDown(); // 0x100274584
	private void OnUp(); // 0x1002745AC
}

// Namespace: 
public class GUItk2dSpriteColor : MonoBehaviour // TypeDefIndex: 3664
{
	// Fields
	private tk2dSprite sprt; // 0x18
	public Color color; // 0x20

	// Methods
	public void .ctor(); // 0x100274060
	private void Awake(); // 0x100274068
	private void Update(); // 0x1002740D4
}

// Namespace: 
public class Game : MonoBehaviour // TypeDefIndex: 3665
{
	// Fields
	private static Game _instance; // 0x0
	public GameSpawnPoints spawnPoints; // 0x18
	public WeaponAnimationControl weaponAnimationControl; // 0x20
	public GameEnemyFinder enemyFinder; // 0x28
	public GameShoot gameShoot; // 0x30
	public GameDamage gameDamage; // 0x38
	public GameStatisticBattle battleStatistic; // 0x40
	public GhostSniper ghostSniper; // 0x48
	public HitDirectionMarker directionMarker; // 0x50
	public GameScopeControl scopeControl; // 0x58
	public GameLooking gameLooking; // 0x60
	public BlackScreen blackScreen; // 0x68
	public SerialMessages serialMessages; // 0x70
	public GameSpecialDevice specialDevice; // 0x78
	public GameBattleLog battleLog; // 0x80
	public Chat chat; // 0x88
	public List`1<int> myTeamSpawnIDs; // 0x90
	public CoinManager coinManager; // 0x98
	public GameTimer gameTimer; // 0xA0
	private Vector3 lookingButtonSaveLocPos; // 0xA8
	private bool isInited; // 0xB4
	public int kills; // 0xB8
	public int deaths; // 0xBC
	public int playedgames; // 0xC0
	public bool isStarted; // 0xC4
	private int sound_combo; // 0xC8
	private bool sound_CanPlaySound; // 0xCC
	private bool sound_FirstBlood; // 0xCD
	private bool sound_OneHitKill; // 0xCE
	private bool sound_HeadShoot; // 0xCF
	private bool sound_RevengeKill; // 0xD0
	private bool sound_ComboKill; // 0xD1
	private bool isLeaving; // 0xD2
	private bool destroyflag; // 0xD3
	public bool tutorial; // 0xD4
	private GameDrones gameDrones; // 0xD8
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x8

	// Methods
	public void .ctor(); // 0x100233878
	public static Game get_instance(); // 0x10023074C
	private void Awake(); // 0x1002338F0
	private IEnumerator GamePong(); // 0x100233984
	private void SetMyTeamSpawnIDs(); // 0x1002339F8
	private void Start(); // 0x100233A78
	private void Init(); // 0x100234344
	private IEnumerator GameClientLoaded(); // 0x1002361E4
	private void Update(); // 0x100236248
	private void OnRestartGame(); // 0x100236278
	private void SetupDelegates(); // 0x100234428
	private void OnQuestProgress(int progress, int amount, string name); // 0x100236944
	private void OnKill(ISFSObject data); // 0x100236CC0
	private void OnAddStatisticPlayer(ISFSObject data); // 0x10023805C
	private void OnRemoveStatisticPlayer(ISFSObject data); // 0x100239754
	private void OnMyselfLookAtEnemy(GameEnemy enemy); // 0x100239888
	private void OnFire(int enemyType, string targetName, string targetPart); // 0x10023998C
	private void OnCheckHit(string enemyName, double bulletmovingtime); // 0x100239A48
	private void OnReloadEnd(); // 0x100239AA8
	private void OnReloadError(); // 0x100239AE0
	private void OnGameplayEnd(); // 0x100239B18
	private void OnVoteTimerTick(int timer); // 0x100239BEC
	private void OnReplayClickEvent(); // 0x100239CD8
	private void OnVotedReplay(string playername); // 0x100239D00
	private void OnVoteTimerEnd(); // 0x100239D3C
	private void OnVoteTimerEndBlackScreenShowed(); // 0x100239F1C
	private void OnGameLoaded(string playername, int spawnid, ISFSObject adddata); // 0x100239F38
	private void OnUpdateStatistic(ISFSArray playersstatistic); // 0x10023A364
	private void OnGameTimerTick(int time, List`1<GameDrone> drones); // 0x10023A7E8
	private void OnPlayerExitRoom(string playername); // 0x10023ABB4
	private void OnEnemyExitRoom(string playername); // 0x10023AC98
	private void OnEnemyLookAtTarget(string playersource, string playertarget); // 0x10023AD74
	private void OnEnemyFire(ISFSObject response); // 0x10023AF24
	public void OnBoosterOn(int type, string name); // 0x10023BFC0
	public void OnBoosterOff(int type, string name); // 0x10023C2B0
	private void OnTakeDamage(string shooter, string target, double targetHealth, double shooter_health); // 0x10023C2B4
	private void OnRespawnTimerEnd(); // 0x10023C8C0
	private void OnGameEnd(); // 0x10023C8E8
	private void OnGameEndBlackScreenShowed(); // 0x10023CA48
	private void SetupBlackScreenOnTop(); // 0x100239E68
	private void OnForceLeaveResponse(); // 0x10023F690
	private void OnLeaveBlackScreenShowed(); // 0x10023F804
	private void OnMapPlayers(ISFSArray players); // 0x10023FA50
	private void OnRespawn(string playername, int spawnid, ISFSObject adddata); // 0x100240594
	public void OnForceLeaveRequest(); // 0x100240F30
	private IEnumerator ForceLeaveTimeOut(); // 0x100241124
	private void OnGameChat(ISFSObject response); // 0x100241198
	private void OnBonusHited(ISFSObject response); // 0x100241340
	private void OnBonusSpawned(ISFSObject response); // 0x100241D3C
	private void OnKillEnemy(string shooter, string target, int rp); // 0x100237B18
	private void OnFirstBlood(string shooter, string target, int rp); // 0x100241E60
	private void OnHeadshoot(string shooter, string target, int rp); // 0x100242150
	private void OnOneHitKill(string shooter, string target, int rp); // 0x100242458
	private void OnComboKill(string shooter, string target, int combo, int rp); // 0x100242748
	private void OnFastKill(string shooter, string target, int rp); // 0x100242A40
	private void OnAssistKill(string shooter, string target, int rp); // 0x100242D28
	private void OnRevengeKill(string shooter, string target, int rp); // 0x100243010
	private IEnumerator PlaySounds(); // 0x100243320
	private IEnumerator DestroySound(GameObject sound, float waitTime); // 0x100243394
	private void PrepareForDestroy(); // 0x10023CBE8
	private void OnDestroy(); // 0x100243420
	private void <SetupDelegates>m__73(); // 0x10024348C
	private void <SetupDelegates>m__74(); // 0x1002435E0
}

// Namespace: 
private sealed class <GamePong>c__Iterator16 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3666
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal Game <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002339F0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100243ABC
	private object System.Collections.IEnumerator.get_Current(); // 0x100243AC4
	public bool MoveNext(); // 0x100243ACC
	public void Dispose(); // 0x100243C10
	public void Reset(); // 0x100243C1C
}

// Namespace: 
private sealed class <GameClientLoaded>c__Iterator17 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3667
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x100236240
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002438F4
	private object System.Collections.IEnumerator.get_Current(); // 0x1002438FC
	public bool MoveNext(); // 0x100243904
	public void Dispose(); // 0x100243A5C
	public void Reset(); // 0x100243A68
}

// Namespace: 
private sealed class <ForceLeaveTimeOut>c__Iterator18 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3668
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal Game <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100241190
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100243788
	private object System.Collections.IEnumerator.get_Current(); // 0x100243790
	public bool MoveNext(); // 0x100243798
	public void Dispose(); // 0x100243894
	public void Reset(); // 0x1002438A0
}

// Namespace: 
private sealed class <PlaySounds>c__Iterator19 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3669
{
	// Fields
	internal float <waitTime>__0; // 0x10
	internal GameObject <soundFirstBloodGO>__1; // 0x18
	internal GameObject <soundComboKillGO>__2; // 0x20
	internal GameObject <soundRevengeKillGO>__3; // 0x28
	internal int $PC; // 0x30
	internal object $current; // 0x38
	internal Game <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x10024338C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100243C70
	private object System.Collections.IEnumerator.get_Current(); // 0x100243C78
	public bool MoveNext(); // 0x100243C80
	public void Dispose(); // 0x10024409C
	public void Reset(); // 0x1002440A8
}

// Namespace: 
private sealed class <DestroySound>c__Iterator1A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3670
{
	// Fields
	internal float waitTime; // 0x10
	internal GameObject sound; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal float <$>waitTime; // 0x30
	internal GameObject <$>sound; // 0x38

	// Methods
	public void .ctor(); // 0x100243418
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100243614
	private object System.Collections.IEnumerator.get_Current(); // 0x10024361C
	public bool MoveNext(); // 0x100243624
	public void Dispose(); // 0x100243728
	public void Reset(); // 0x100243734
}

// Namespace: 
public class DroneButton : MonoBehaviour // TypeDefIndex: 3671
{
	// Fields
	private static Predicate`1<SABaseDrone> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x1002277E4
	private void Awake(); // 0x1002277EC
	private void OnLaunch(); // 0x100227928
	private static bool <Awake>m__75(SABaseDrone obj); // 0x1002279A0
}

// Namespace: 
public class GameDrone : ISFSTranform // TypeDefIndex: 3672
{
	// Fields
	public State state; // 0x10
	public int timer; // 0x14
	public string tg; // 0x18
	public Vector3 src; // 0x20
	public Vector3 dest; // 0x2C
	public int drone_id; // 0x38
	public int user_id; // 0x3C

	// Methods
	public void .ctor(); // 0x10024C6C0
	public void Setup(ISFSObject o); // 0x10024C6C8
	public bool get_active(); // 0x10024CEA8
}

// Namespace: 
public sealed class State : Enum // TypeDefIndex: 3673
{
	// Fields
	public int value__; // 0x10
	public const State Ready = 0; // 0x0
	public const State Recharge = 1; // 0x0
	public const State Waiting_other_drone = 2; // 0x0
	public const State Idle = 3; // 0x0
	public const State Flying = 4; // 0x0
	public const State Shooting = 5; // 0x0
	public const State Deactivated = 6; // 0x0

}

// Namespace: 
public class EnemyDrone : GameEnemy // TypeDefIndex: 3674
{
	// Fields
	public GameDrone drone; // 0xB0
	private Vector3 srcPos; // 0xB8
	private Vector3 startPos; // 0xC4

	// Methods
	public void .ctor(); // 0x10022BC24
	private void Start(); // 0x10022BC2C
	private void Update(); // 0x10022BC68
}

// Namespace: 
public class GameDrones : MonoBehaviour // TypeDefIndex: 3675
{
	// Fields
	public Dictionary`2<int, Dictionary`2<int, GameDrone>> drones; // 0x18
	public List`1<GameObject> enemyDrones; // 0x20
	private static Action`1<GameObject> <>f__am$cache2; // 0x0

	// Methods
	public void .ctor(); // 0x10024CEBC
	public void Reset(); // 0x100236790
	public void Refresh(List`1<GameDrone> drones); // 0x10023A814
	private void CreateDrone(GameDrone dn); // 0x10024CF54
	private static void <Reset>m__77(GameObject obj); // 0x10024D108
}

// Namespace: 
public class GameActionButtons : MonoBehaviour // TypeDefIndex: 3676
{
	// Fields
	public tk2dUIItem shootButton; // 0x18
	public tk2dUIItem hideButton; // 0x20
	public tk2dUIItem scopeButton; // 0x28

	// Methods
	public void .ctor(); // 0x1002440FC
}

// Namespace: 
public class GameBattleLog : MonoBehaviour // TypeDefIndex: 3677
{
	// Fields
	public States state; // 0x18
	public float speed; // 0x1C
	public float waitfornext; // 0x20
	public float hidetime; // 0x24
	public ElementsStruct objectposes; // 0x28
	public Transform cube; // 0x30
	public GameObject killElementPrefab; // 0x38
	public GameObject bonusElementPrefab; // 0x40
	public GameObject questElementPrefab; // 0x48
	public tk2dSprite background; // 0x50
	public List`1<GameObject> elements; // 0x58
	private bool nextword; // 0x60
	private int switches; // 0x64
	private Vector3 rotation; // 0x68
	public bool testelement; // 0x74

	// Methods
	public void .ctor(); // 0x10024426C
	public void AddKill(int shooter_flag, string shooter_nickname, int target_flag, string target_nickname); // 0x100237E18
	public void AddBonus(int shooter_flag, string shooter_nickname, MapBonusType bonustype, int reward); // 0x10023079C
	public void AddQuestProgress(int progress, int amount, string name); // 0x1002369F8
	private void OnEnable(); // 0x1002442F0
	private void Start(); // 0x10024435C
	private void Update(); // 0x1002445C0
	private IEnumerator ShowBackground(); // 0x100245E6C
	private IEnumerator HideBackground(); // 0x100245F78
	private IEnumerator WaitForNextWord(); // 0x100245F04
	private IEnumerator HideOldWord(); // 0x100245FF4
	private void SortWordMeshes(); // 0x100245ED8
}

// Namespace: 
public sealed class ElementTypes : Enum // TypeDefIndex: 3678
{
	// Fields
	public int value__; // 0x10
	public const ElementTypes killelement = 0; // 0x0
	public const ElementTypes bonuselement = 1; // 0x0
	public const ElementTypes joinelement = 2; // 0x0

}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3679
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States switching = 1; // 0x0
	public const States waitfornext = 2; // 0x0

}

// Namespace: 
public class ElementsStruct // TypeDefIndex: 3680
{
	// Fields
	public GameObject front; // 0x10
	public GameObject top; // 0x18
	public GameObject back; // 0x20
	public GameObject bottom; // 0x28

	// Methods
	public void .ctor(); // 0x100246FE4
}

// Namespace: 
private sealed class <ShowBackground>c__Iterator1D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3681
{
	// Fields
	internal float <t>__0; // 0x10
	internal float <alpha>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal GameBattleLog <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100245F70
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002467BC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002467C4
	public bool MoveNext(); // 0x1002467CC
	public void Dispose(); // 0x100246A3C
	public void Reset(); // 0x100246A48
}

// Namespace: 
private sealed class <HideBackground>c__Iterator1E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3682
{
	// Fields
	internal float <t>__0; // 0x10
	internal float <alpha>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal GameBattleLog <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100245FE4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100246068
	private object System.Collections.IEnumerator.get_Current(); // 0x100246070
	public bool MoveNext(); // 0x100246078
	public void Dispose(); // 0x1002462F8
	public void Reset(); // 0x100246304
}

// Namespace: 
private sealed class <WaitForNextWord>c__Iterator1F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3683
{
	// Fields
	internal float <t>__0; // 0x10
	internal float <alpha>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal GameBattleLog <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100245FEC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100246A9C
	private object System.Collections.IEnumerator.get_Current(); // 0x100246AA4
	public bool MoveNext(); // 0x100246AAC
	public void Dispose(); // 0x100246DC8
	public void Reset(); // 0x100246DD4
	internal void <>m__78(GameObject go); // 0x100246E28
}

// Namespace: 
private sealed class <HideOldWord>c__Iterator20 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3684
{
	// Fields
	internal float <t>__0; // 0x10
	internal float <alpha>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal GameBattleLog <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100246060
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100246358
	private object System.Collections.IEnumerator.get_Current(); // 0x100246360
	public bool MoveNext(); // 0x100246368
	public void Dispose(); // 0x1002465A0
	public void Reset(); // 0x1002465AC
	internal void <>m__79(GameObject go); // 0x100246600
}

// Namespace: 
public class GameBattleLogKillElement : MonoBehaviour // TypeDefIndex: 3685
{
	// Fields
	public ElementTypes elementType; // 0x18
	public tk2dTextMesh shooterText; // 0x20
	public tk2dTextMesh targetText; // 0x28
	public tk2dTextMesh actionText; // 0x30
	public tk2dSprite shooterFlagSprt; // 0x38
	public tk2dSprite targetFlagSprt; // 0x40
	public float flagoffset; // 0x48
	public float actionoffset; // 0x4C
	public float afteractionoffset; // 0x50
	public float leftaddoffset; // 0x54
	public float leftaddoncharacteroffset; // 0x58

	// Methods
	public void .ctor(); // 0x100247010
	public void SetupPosition(); // 0x100244FB4
}

// Namespace: 
public class GameBooster : MonoBehaviour // TypeDefIndex: 3686
{
	// Fields
	public GameObject onState; // 0x18
	public GameObject offState; // 0x20
	public GameObject timeState; // 0x28
	public tk2dTextMesh costMesh; // 0x30
	public tk2dTextMesh valueMesh; // 0x38
	public tk2dTextMesh timeValueMesh; // 0x40
	public int cost; // 0x48
	public tk2dSprite scope; // 0x50
	protected BoosterTypes type; // 0x58
	private static Colors standart; // 0x0
	private static Colors custom; // 0x8
	private static Colors customV; // 0x10
	protected bool booster_on; // 0x5C

	// Methods
	public void .ctor(); // 0x100247034
	private static void .cctor(); // 0x10024703C
	public static Colors GetColors(); // 0x10024736C
	private void Start(); // 0x100247488
	private void SetColor(Color c); // 0x100247878
	private void Update(); // 0x100247A60
	private void OnBoosterOnDelayed(); // 0x100247D9C
	private void OnBoosterOffDelayed(); // 0x100247F0C
	private void OnDestroy(); // 0x100248034
}

// Namespace: 
public class Colors // TypeDefIndex: 3687
{
	// Fields
	public Color gray; // 0x10
	public Color orange; // 0x20
	public Color red; // 0x30
	public Color white; // 0x40

	// Methods
	public void .ctor(); // 0x100247364
}

// Namespace: 
public class GameBoosters : MonoBehaviour // TypeDefIndex: 3688
{
	// Fields
	public BoosterTypes type; // 0x18
	public float animspeed; // 0x1C
	public tk2dUIItem buybutton; // 0x20
	public tk2dUIMask mask; // 0x28
	public GameObject confirm; // 0x30
	private bool showconfirm; // 0x38
	private Vector2 maskclosescale; // 0x3C
	private float velo; // 0x44
	private BoosterTypes currenttype; // 0x48
	private ShopItem buyItem; // 0x50
	private tk2dUIItem btn; // 0x58
	private Triger triger; // 0x60

	// Methods
	public void .ctor(); // 0x100248038
	private void Start(); // 0x100248048
	private void OnBuyBooster(); // 0x100248450
	public void OnAnyPress(); // 0x1002485F0
	private void OnClick(); // 0x10024889C
	private void Update(); // 0x100248FC4
	public void Off(); // 0x10024857C
	private void OnDestroy(); // 0x1002491DC
}

// Namespace: 
public struct Triger // TypeDefIndex: 3689
{
	// Fields
	private float counter; // 0x10

	// Methods
	public void Reset(); // 0x1002492EC
	public void Iterate(); // 0x1002492F4
	public bool IsDone(); // 0x100249330
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyCD // TypeDefIndex: 3690
{
	// Fields
	internal MessageGirl01Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x100248FBC
	internal void <>m__7A(); // 0x100249298
}

// Namespace: 
public class GameBullet : MonoBehaviour // TypeDefIndex: 3691
{
	// Fields
	public GameObject target; // 0x18
	public GameShoot parentScript; // 0x20
	public GameObject bloodPrefab; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x0

	// Methods
	public void .ctor(); // 0x100249360
	public void OnTarget(optional GameObject hit_point); // 0x100249368
}

// Namespace: 
public class GameDamage : MonoBehaviour // TypeDefIndex: 3692
{
	// Fields
	public GameHealthEnergy heenComp; // 0x18
	public GameObject playerEyes; // 0x20
	public GameObject gunCamera; // 0x28
	public GameObject[] guiToHide; // 0x30
	public GameStatisticBattle battleStatistic; // 0x38
	public GameSpecialDevice specialDevice; // 0x40
	public BloodSplatter bloodSplatter; // 0x48
	public float armor; // 0x50
	public GameObject scopeGO; // 0x58
	private TransformData startEyeTransform; // 0x60
	private TransformData startGunCameraTransform; // 0xB0
	private TransformData startMyTransform; // 0x100
	private GameScopeControl scopeControl; // 0x150
	private Blur eyeBlur; // 0x158
	private GameLooking looking; // 0x160
	private GameShoot gameShoot; // 0x168
	private bool isDying; // 0x170

	// Methods
	public void .ctor(); // 0x10024BE58
	private void Start(); // 0x10024BE60
	public void TakeDamage(double h); // 0x10023C6AC
	public void TakeDamageNoSplatter(double h); // 0x10023C80C
	public void Die(); // 0x1002375DC
	public void Respawn(); // 0x100240BF8
	public void Heal(); // 0x10023C28C
	private IEnumerator FreezeEyes(); // 0x10024C328
	public void HitMarker(); // 0x10023C7E8
}

// Namespace: 
private sealed class <FreezeEyes>c__Iterator21 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3693
{
	// Fields
	internal float <seconds>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal GameDamage <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10024C394
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10024C3F8
	private object System.Collections.IEnumerator.get_Current(); // 0x10024C400
	public bool MoveNext(); // 0x10024C408
	public void Dispose(); // 0x10024C660
	public void Reset(); // 0x10024C66C
}

// Namespace: 
public class GameEnemy : MonoBehaviour // TypeDefIndex: 3694
{
	// Fields
	public float rotateSpeed; // 0x18
	public Transform lookAtDummy; // 0x20
	public Transform forwardTarget; // 0x28
	public Transform bulletSpawn; // 0x30
	public Transform hitTransform; // 0x38
	public GameObject bulletPrefab; // 0x40
	public int team; // 0x48
	public string nameEnemy; // 0x50
	public int spawnPoint; // 0x58
	public double health; // 0x60
	public string lookAt; // 0x68
	public int kills; // 0x70
	public int deaths; // 0x74
	public double camouflage; // 0x78
	public GameObject targetSniper; // 0x80
	private GameObject gamePlayer; // 0x88
	private GameObject ghostSniper; // 0x90
	private EnemyAnimationControl animationControl; // 0x98
	private List`1<GameObject> bullets; // 0xA0
	private GameObject m_Child; // 0xA8
	private static Action`1<GameObject> <>f__am$cache14; // 0x0

	// Methods
	public void .ctor(); // 0x10024D174
	public float get_hideChance(); // 0x10024D1EC
	public bool get_IsBot(); // 0x10024D278
	public void ClearChild(); // 0x10024D2D4
	public void SetChild(GameObject child, Pose pose); // 0x10024D390
	public void SetGlintOffset(GameObject child, Pose pose); // 0x10024D58C
	private void Start(); // 0x10024D6FC
	public string GetName(); // 0x100239984
	public void TakeDamage(double h); // 0x10023C724
	public void Heal(); // 0x100241D30
	public void Die(GameSpawnPoints spawnPoints); // 0x100237A14
	private IEnumerator DeleteAfterTime(GameSpawnPoints spawnPoints); // 0x10024D870
	public void Shoot(ShootTypes shootType, float bulletSpeed); // 0x10023BC00
	private IEnumerator BulletMove(float bulletSpeed, GameObject target); // 0x10024D8F4
	private void Update(); // 0x10024D990
	private void OnDestroy(); // 0x10024DFA4
	private static void <OnDestroy>m__76(GameObject child); // 0x10024E070
}

// Namespace: 
public sealed class ShootTypes : Enum // TypeDefIndex: 3695
{
	// Fields
	public int value__; // 0x10
	public const ShootTypes ToFree = 0; // 0x0
	public const ShootTypes ToPlayer = 1; // 0x0
	public const ShootTypes ToGhost = 2; // 0x0

}

// Namespace: 
private sealed class <DeleteAfterTime>c__Iterator1B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3696
{
	// Fields
	internal GameSpawnPoints spawnPoints; // 0x10
	internal GameEnemy <enemy>__0; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal GameSpawnPoints <$>spawnPoints; // 0x30
	internal GameEnemy <>f__this; // 0x38

	// Methods
	public void .ctor(); // 0x10024D8EC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10024E640
	private object System.Collections.IEnumerator.get_Current(); // 0x10024E648
	public bool MoveNext(); // 0x10024E650
	public void Dispose(); // 0x10024E780
	public void Reset(); // 0x10024E78C
}

// Namespace: 
private sealed class <BulletMove>c__Iterator1C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3697
{
	// Fields
	internal GameObject target; // 0x10
	internal Vector3 <target_pos>__0; // 0x18
	internal GameObject <bullet>__1; // 0x28
	internal float bulletSpeed; // 0x30
	internal float <movingTime>__2; // 0x34
	internal GameObject <bulletSpawnTemp>__3; // 0x38
	internal float <t>__4; // 0x40
	internal int $PC; // 0x44
	internal object $current; // 0x48
	internal GameObject <$>target; // 0x50
	internal float <$>bulletSpeed; // 0x58
	internal GameEnemy <>f__this; // 0x60

	// Methods
	public void .ctor(); // 0x10024D988
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10024E0DC
	private object System.Collections.IEnumerator.get_Current(); // 0x10024E0E4
	public bool MoveNext(); // 0x10024E0EC
	public void Dispose(); // 0x10024E5E0
	public void Reset(); // 0x10024E5EC
}

// Namespace: 
public class GameEnemyFinder : MonoBehaviour // TypeDefIndex: 3698
{
	// Fields
	public OnEnemyLookAtDgt OnEnemyLookAt; // 0x18
	public Camera mainCamera; // 0x20
	public GameObject target; // 0x28
	public Vector3 targetPoint; // 0x30
	public float hideHealthAfterTime; // 0x3C
	public GameEnemy lookAtEnemy; // 0x40
	public GameStatisticBattle battleStatistic; // 0x48
	private RaycastHit hit; // 0x50
	private Ray ray; // 0x80
	private float time; // 0x98
	private GameScopeControl scopeControl; // 0xA0
	private bool scopeCheckForEvent; // 0xA8
	public bool is_target_locked; // 0xA9

	// Methods
	public void .ctor(); // 0x10024E7E0
	private void Start(); // 0x10024E7F0
	private void Update(); // 0x10024E87C
	private bool CheckForEnemyTarget(); // 0x10024EFB0
	private bool CheckForEnemyDroneTarget(); // 0x10024F248
}

// Namespace: 
public sealed class OnEnemyLookAtDgt : MulticastDelegate // TypeDefIndex: 3699
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002368A4
	public virtual void Invoke(GameEnemy enemy); // 0x10024F4B4
	public virtual IAsyncResult BeginInvoke(GameEnemy enemy, AsyncCallback callback, object object); // 0x10024F550
	public virtual void EndInvoke(IAsyncResult result); // 0x10024F5A0
}

// Namespace: 
public static class GameEnvironment // TypeDefIndex: 3700
{
	// Fields
	public static BundleOptions environmentGame; // 0x0
	public static BundleOptions environmentGame2; // 0x8
	public static BundleOptions environmentGame3; // 0x10
	public static BundleOptions environmentGame5; // 0x18

	// Methods
	private static void .cctor(); // 0x10024F5AC
}

// Namespace: 
public class BundleOptions // TypeDefIndex: 3701
{
	// Fields
	public int version; // 0x10
	public GameObject mapPrefab; // 0x18

	// Methods
	public void .ctor(); // 0x10024F694
}

// Namespace: 
public class GameEvents : MonoBehaviour // TypeDefIndex: 3702
{
	// Fields
	private static GameEvents _instance; // 0x0
	public OnEventDgt OnShowStatistic; // 0x18
	public OnEventDgt OnHideStatistic; // 0x20
	public OnEventDgt OnPlayerDie; // 0x28
	public OnEventDgt OnPlayerRespawn; // 0x30

	// Methods
	public void .ctor(); // 0x10024F6A4
	public static GameEvents get_instance(); // 0x1002368E4
	private void Awake(); // 0x10024F6AC
	private void OnDestroy(); // 0x10024F700
	private void Start(); // 0x10024F750
	private void Update(); // 0x10024F754
}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 3703
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100236934
	public virtual void Invoke(); // 0x10024C024
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10024F764
	public virtual void EndInvoke(IAsyncResult result); // 0x10024F7C4
}

// Namespace: 
public class GameHealthEnergy : MonoBehaviour // TypeDefIndex: 3704
{
	// Fields
	public float health; // 0x18
	public float animvaluespeed; // 0x1C
	public float animeffectspeed; // 0x20
	public GameObject cornierMask; // 0x28
	public tk2dSlicedSprite effectbg1; // 0x30
	public tk2dSlicedSprite effectbg2; // 0x38
	public tk2dUIProgressBar normalbar; // 0x40
	public tk2dUIProgressBar bonusbar; // 0x48
	public tk2dSlicedSprite borderhealth; // 0x50
	public GameObject glow; // 0x58
	public Color middlecolor; // 0x60
	public Color lowcolor; // 0x70
	public Color diecolor; // 0x80
	public bool bonuseffect; // 0x90
	public Vector3 hideeffectscale; // 0x94
	private float health_; // 0xA0
	private float healthnormal_; // 0xA4
	private float healthbonus_; // 0xA8
	private Color normalcolor; // 0xAC
	private float velo; // 0xBC
	private bool bonuseffect_; // 0xC0
	private Vector3 effectbg1scale_; // 0xC4
	private Vector3 effectbg2scale_; // 0xD0
	private Vector3[] velovector; // 0xE0

	// Methods
	public void .ctor(); // 0x10024F7D0
	public float get_healthnormal(); // 0x10024F844
	public void set_healthnormal(float value); // 0x10024F84C
	public float get_healthbonus(); // 0x10024F864
	public void set_healthbonus(float value); // 0x10024F86C
	private void Start(); // 0x10024F884
	private void SetNormalScaleEffect(); // 0x10024FA6C
	private void SetScaledScaleEffect(); // 0x10024FADC
	private void Update(); // 0x10024FB98
	private void SetHealths(); // 0x10024F974
}

// Namespace: 
public class GameLooking : MonoBehaviour // TypeDefIndex: 3705
{
	// Fields
	public tk2dUIItem GameLookingGUIButton; // 0x18
	public bool lockCursor; // 0x20
	public bool allowLooking; // 0x21
	public Vector2 sensitivity; // 0x24
	public LimitAngles limitAngles; // 0x30
	public Vector3 smoothMoving; // 0x38
	private static Vector2 axis; // 0x0
	public tk2dCamera guicamera; // 0x48
	private Quaternion defaultLocalRotation; // 0x50
	private Vector3 tempRotation; // 0x60
	private Vector2 tempRotationWithNoise; // 0x6C
	private Vector3 rotation; // 0x74
	private float[] velo; // 0x80
	private float stun; // 0x88
	private bool noise; // 0x8C
	private NoiseParams noiseParams; // 0x90
	private Vector2 screenSize; // 0x98
	private Vector2 minScreenSize; // 0xA0
	private Vector2 maxScreenSize; // 0xA8
	public Vector2 addSensitivityViaScreen; // 0xB0
	public Vector2 addSensitivity; // 0xB8
	private Vector2 addToAddSensitivityViaScreen; // 0xC0
	public float addToAddSensitivityViaZoom; // 0xC8
	public float addSensitivityViaZoom; // 0xCC
	private float inGameSensitivity; // 0xD0

	// Methods
	public void .ctor(); // 0x1002506A8
	public void ResetLook(); // 0x10024C0B4
	private void Start(); // 0x100250778
	private void Update(); // 0x100250B04
	public void SetAddSensetivityViaScreen(); // 0x10025115C
	public static Vector2 GetAxis(); // 0x1002511CC
	public void SetStun(float value); // 0x10025121C
	public float GetStun(); // 0x100251224
	public void SetNoise(bool flag); // 0x10025122C
	public void SetNoise(bool flag, NoiseParams nParams); // 0x1002512C4
	private void <Start>m__7B(UITouch touch, GestureState state, Gesture gesture); // 0x1002512D0
}

// Namespace: 
public class LimitAngles // TypeDefIndex: 3706
{
	// Fields
	public Vector3 min; // 0x10
	public Vector3 max; // 0x1C

	// Methods
	public void .ctor(); // 0x10025140C
}

// Namespace: 
public class NoiseParams // TypeDefIndex: 3707
{
	// Fields
	public Vector2 radius; // 0x10
	public float speed; // 0x18
	public float rotateSpeed; // 0x1C
	public float angle; // 0x20
	public float rotateAngle; // 0x24

	// Methods
	public void .ctor(); // 0x100250ACC
}

// Namespace: 
public class GameLookingGUIButton : MonoBehaviour // TypeDefIndex: 3708
{
	// Fields
	public GameObject shootButton; // 0x18
	public GameObject scopeButton; // 0x20

	// Methods
	public void .ctor(); // 0x100251414
	private void Start(); // 0x10025141C
}

// Namespace: 
public class GameLookingWeaponHands : MonoBehaviour // TypeDefIndex: 3709
{
	// Fields
	public Transform GunHandsParent; // 0x18
	public LimitAngles limitAngles; // 0x20
	public Vector2 smoothMoving; // 0x28
	private Quaternion defaultGunHandsParentRotation; // 0x30
	private Vector2 rotation; // 0x40
	private float[] velo; // 0x48

	// Methods
	public void .ctor(); // 0x1002516DC
	private void Start(); // 0x100251748
	private void Update(); // 0x100251780
}

// Namespace: 
public class LimitAngles // TypeDefIndex: 3710
{
	// Fields
	public Vector2 min; // 0x10
	public Vector2 max; // 0x18

	// Methods
	public void .ctor(); // 0x100251A2C
}

// Namespace: 
public class GameNetworkIndicator : MonoBehaviour // TypeDefIndex: 3711
{
	// Fields
	private const float indicator_show_time = 2; // 0x0
	private const string PREFABS_PATH = "Prefabs/GUI/"; // 0x0
	public Transform indicator; // 0x18
	private int bad_ping; // 0x20
	private long current; // 0x28
	private float delay; // 0x30
	private int timer; // 0x34

	// Methods
	public void .ctor(); // 0x100251A34
	private void Start(); // 0x100251AAC
	private void Update(); // 0x100251B44
	private void OnGameTimerTick(int timer, List`1<GameDrone> drones); // 0x100251C60
	private void OnEnable(); // 0x100251CE0
	private void OnDisable(); // 0x100251E30
	public static T LoadPrefab(string name); // 0
}

// Namespace: DankoKozar.Unity.Utils
public class GameObjectUtil // TypeDefIndex: 3712
{
	// Methods
	public void .ctor(); // 0x10021BBF8
	public static void IterateChildren(GameObject gameObject, ChildHandler childHandler, bool recursive); // 0x10021BC00
	private static void DoIterate(GameObject gameObject, ChildHandler childHandler, bool recursive); // 0x10021BC04
}

// Namespace: 
public sealed class ChildHandler : MulticastDelegate // TypeDefIndex: 3713
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10021BFE8
	public virtual void Invoke(GameObject child); // 0x10021BF4C
	public virtual IAsyncResult BeginInvoke(GameObject child, AsyncCallback callback, object object); // 0x10021BFF8
	public virtual void EndInvoke(IAsyncResult result); // 0x10021C048
}

// Namespace: 
public class GamePlayer : MonoBehaviour // TypeDefIndex: 3714
{
	// Methods
	public void .ctor(); // 0x100251F80
}

// Namespace: 
public class GameScope : MonoBehaviour // TypeDefIndex: 3715
{
	// Fields
	public GameObject content; // 0x18
	public ScopeShadow scopeShadow; // 0x20
	public GameObject freeScope; // 0x28
	public GameObject zoomScope; // 0x30
	public GameObject crosshair; // 0x38
	public GameObject enemyHealthObj; // 0x40
	public GameObject enemyObj; // 0x48
	public GameObject reloadIndicator; // 0x50
	public GameObject nextShootIndicator; // 0x58
	public tk2dSprite[] reloadParts; // 0x60
	public tk2dSprite[] nextShootParts; // 0x68
	public tk2dTextMesh reloadText; // 0x70
	public float reloadTime; // 0x78
	public float nextShootTime; // 0x7C
	public float enemyHealth; // 0x80
	public tk2dUIProgressBar healthProgressBar; // 0x88
	public GameObject revenge; // 0x90
	public tk2dTextMesh squadnameMesh; // 0x98
	public tk2dTextMesh nicknameMesh; // 0xA0
	public tk2dSprite flag; // 0xA8
	public tk2dSprite rankIcon; // 0xB0
	private tk2dCamera guicamera; // 0xB8
	private float[] velo; // 0xC0
	private Animator hitMarkerAnimator; // 0xC8
	public VisionColorControlWithHL[] vcc; // 0xD0
	public tk2dTextMesh bulletCountMesh; // 0xD8
	public tk2dTextMesh zoomValueMesh; // 0xE0
	public Transform zoomBar; // 0xE8
	public tk2dUIItem zoomButton; // 0xF0
	public ZoomType zoomType; // 0xF8
	public SerialMessages serialMessages; // 0x100
	public ZoomLimits zoomLimits; // 0x108
	private bool show_red_aim; // 0x110

	// Methods
	public void .ctor(); // 0x100251F88
	private void OnEnable(); // 0x100252018
	public void ShowReloadIndicator(); // 0x1002520C8
	public void ShowNextShootIndicator(); // 0x1002521A4
	private IEnumerator ShowShootIndicator(); // 0x1002521F8
	private IEnumerator StartReloadIndicator(); // 0x10025226C
	private IEnumerator StartNextShootIndicator(); // 0x1002522E0
	public void OffReloadIndicator(); // 0x10024C1B0
	public void OffNextShootIndicator(); // 0x10024C2AC
	private void Update(); // 0x100252354
	private void Start(); // 0x100252378
	public void ShowHitMarker(); // 0x10024C39C
	public void ResetHitMarker(); // 0x10024C2CC
	private void SetupScopeShadows(); // 0x1002524E8
	public void SetEnemyHealthVisiblity(bool flag); // 0x10024F3C8
}

// Namespace: 
public class ScopeShadow // TypeDefIndex: 3716
{
	// Fields
	public tk2dSlicedSprite UpLeft; // 0x10
	public tk2dSlicedSprite UpRight; // 0x18
	public tk2dSlicedSprite DownLeft; // 0x20
	public tk2dSlicedSprite DownRight; // 0x28

	// Methods
	public void .ctor(); // 0x10025331C
}

// Namespace: 
public class ZoomLimits // TypeDefIndex: 3717
{
	// Fields
	public float min; // 0x10
	public float max; // 0x14

	// Methods
	public void .ctor(); // 0x100253324
}

// Namespace: 
public sealed class ZoomType : Enum // TypeDefIndex: 3718
{
	// Fields
	public int value__; // 0x10
	public const ZoomType Radial = 0; // 0x0
	public const ZoomType Linear = 1; // 0x0

}

// Namespace: 
private sealed class <ShowShootIndicator>c__Iterator22 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3719
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal GameScope <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100252264
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002528D4
	private object System.Collections.IEnumerator.get_Current(); // 0x1002528DC
	public bool MoveNext(); // 0x1002528E4
	public void Dispose(); // 0x1002529F0
	public void Reset(); // 0x1002529FC
}

// Namespace: 
private sealed class <StartReloadIndicator>c__Iterator23 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3720
{
	// Fields
	internal float <reloadStepForPart>__0; // 0x10
	internal int <i>__1; // 0x14
	internal tk2dSprite[] <$s_166>__2; // 0x18
	internal int <$s_167>__3; // 0x20
	internal tk2dSprite <s>__4; // 0x28
	internal float <timeText>__5; // 0x30
	internal Color <c>__6; // 0x34
	internal float <t>__7; // 0x44
	internal int $PC; // 0x48
	internal object $current; // 0x50
	internal GameScope <>f__this; // 0x58

	// Methods
	public void .ctor(); // 0x1002522D8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100252E40
	private object System.Collections.IEnumerator.get_Current(); // 0x100252E48
	public bool MoveNext(); // 0x100252E50
	public void Dispose(); // 0x1002532BC
	public void Reset(); // 0x1002532C8
}

// Namespace: 
private sealed class <StartNextShootIndicator>c__Iterator24 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3721
{
	// Fields
	internal float <nextShootTime_>__0; // 0x10
	internal float <reloadStepForPart>__1; // 0x14
	internal int <i>__2; // 0x18
	internal tk2dSprite[] <$s_168>__3; // 0x20
	internal int <$s_169>__4; // 0x28
	internal tk2dSprite <s>__5; // 0x30
	internal Color <c>__6; // 0x38
	internal float <t>__7; // 0x48
	internal int $PC; // 0x4C
	internal object $current; // 0x50
	internal GameScope <>f__this; // 0x58

	// Methods
	public void .ctor(); // 0x10025234C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100252A50
	private object System.Collections.IEnumerator.get_Current(); // 0x100252A58
	public bool MoveNext(); // 0x100252A60
	public void Dispose(); // 0x100252DE0
	public void Reset(); // 0x100252DEC
}

// Namespace: 
public class GameScopeControl : MonoBehaviour // TypeDefIndex: 3722
{
	// Fields
	public OnScopeSwitchDgt OnScopeSwitch; // 0x18
	public GameScope scope; // 0x20
	public GameActionButtons actionButtons; // 0x28
	public Camera gunCamera; // 0x30
	public Camera mainCamera; // 0x38
	private tk2dCamera guiCamera; // 0x40
	public Vector2 crosshairSmoothPosition; // 0x48
	public CrosshairMoveLimits crosshairLimits; // 0x50
	public Transform zoomBar; // 0x58
	public tk2dUIItem zoomButton; // 0x60
	public tk2dTextMesh zoomValueMesh; // 0x68
	public ZoomLimits zoomAngleLimits; // 0x70
	public ZoomLimits zoomTextLimits; // 0x78
	public ZoomLimits zoomFOVLimits; // 0x80
	public float zoomSmooth; // 0x88
	public NoiseParams noiseParams; // 0x90
	public double FOVSpeed; // 0x98
	public int defalutZoomValue; // 0xA0
	private bool inScope; // 0xA4
	private Vector3 crosshairDefaultLocalPosition; // 0xA8
	private Vector3 crosshairAddLocalPosition; // 0xB4
	private float[] velo; // 0xC0
	private float crosshairMoveMultiplier; // 0xC8
	private ShootEffect shootEffect; // 0xD0
	private ShootEffectStates shootEffectZoomState; // 0xD8
	private ShootEffectStates shootEffectStunState; // 0xDC
	private float zoomValue; // 0xE0
	private float zoomValueTemp; // 0xE4
	private int zoomFingerId; // 0xE8
	private Vector2 axis; // 0xEC
	private float zoomContainerTempRotation; // 0xF4
	private float zoomContainerRotation; // 0xF8
	private UITouch zoomTouch; // 0xFC
	private GameLooking gameLooking; // 0x118
	private float defaultFov; // 0x120
	private Vector2 positionTouchOnScreen; // 0x124
	private Vector2 deltaPosition; // 0x12C
	private float zoomSoundTime; // 0x134
	private bool is_uploading; // 0x138
	private int s_num; // 0x13C
	private ZoomTouchControl zoomTouchControl; // 0x140
	private float zoomDist; // 0x148

	// Methods
	public void .ctor(); // 0x10025332C
	public bool InScope(); // 0x1002434E0
	public void SetZoom(float zoomValue); // 0x1002533B0
	private void Start(); // 0x10025347C
	public void OnScopeButtonDown(); // 0x10024C014
	private void OnZoomButtonDown(tk2dUIItem item); // 0x100253D70
	private void Update(); // 0x100253DD8
	private void SetAddSensetivityViaZoom(); // 0x1002541F0
	private void ZoomHandler(); // 0x1002545A4
	private void OnZoomChangeViaControl(); // 0x100254CBC
	private void MoveCrosshair(); // 0x100254320
	public void OnScope(); // 0x100253C34
	public void OffScope(); // 0x1002434E8
	public void DoShootEffect(ShootEffect shootEffectParams); // 0x100254E2C
	private void UpdateZoomMesh(); // 0x100253B10
	private void LateUpdate(); // 0x100254EF0
	private IEnumerator Upload(byte[] bytes); // 0x1002551C0
	private void <Start>m__7C(UITouch touch, GestureState state, float arg2); // 0x100255244
}

// Namespace: 
public class CrosshairMoveLimits // TypeDefIndex: 3723
{
	// Fields
	public Vector2 min; // 0x10
	public Vector2 max; // 0x18

	// Methods
	public void .ctor(); // 0x100255878
}

// Namespace: 
public class ZoomLimits // TypeDefIndex: 3724
{
	// Fields
	public float min; // 0x10
	public float max; // 0x14

	// Methods
	public void .ctor(); // 0x100255954
}

// Namespace: 
public class ShootEffect // TypeDefIndex: 3725
{
	// Fields
	public float cameraStartFov; // 0x10
	public float cameraForChangeFov; // 0x14
	public float stun; // 0x18
	public float power; // 0x1C
	public float fovOutSpeed; // 0x20
	public float fovInSpeed; // 0x24
	public float stunOutSpeed; // 0x28
	public float stunInSpeed; // 0x2C

	// Methods
	public void .ctor(); // 0x100253C1C
}

// Namespace: 
public sealed class ShootEffectStates : Enum // TypeDefIndex: 3726
{
	// Fields
	public int value__; // 0x10
	public const ShootEffectStates Idle = 0; // 0x0
	public const ShootEffectStates Out = 1; // 0x0
	public const ShootEffectStates In = 2; // 0x0

}

// Namespace: 
public class ZoomTouchControl : Gesture // TypeDefIndex: 3727
{
	// Fields
	public static bool ZoomGestureActive; // 0x0
	private float dist; // 0x70
	private List`1<UITouch> allTouches; // 0x78
	public Action`3<UITouch, GestureState, float> OnGesture; // 0x80

	// Methods
	public void .ctor(); // 0x10025595C
	private static void .cctor(); // 0x1002559CC
	private void UpdateTouches(); // 0x1002559D0
	private void Update(); // 0x1002560EC
	private void OnDestroy(); // 0x1002560F0
}

// Namespace: 
private sealed class <UpdateTouches>c__AnonStoreyCE // TypeDefIndex: 3728
{
	// Fields
	internal UITouch touch; // 0x10

	// Methods
	public void .ctor(); // 0x1002560E4
	internal bool <>m__7D(UITouch t); // 0x100256158
}

// Namespace: 
public sealed class OnScopeSwitchDgt : MulticastDelegate // TypeDefIndex: 3729
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100253C24
	public virtual void Invoke(bool isOn); // 0x100254DB8
	public virtual IAsyncResult BeginInvoke(bool isOn, AsyncCallback callback, object object); // 0x100255890
	public virtual void EndInvoke(IAsyncResult result); // 0x100255948
}

// Namespace: 
private sealed class <Upload>c__Iterator25 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3730
{
	// Fields
	internal long <t>__0; // 0x10
	internal WWWForm <postForm>__1; // 0x18
	internal string <uploadURL>__2; // 0x20
	internal string <filename>__3; // 0x28
	internal byte[] bytes; // 0x30
	internal WWW <upload>__4; // 0x38
	internal long <t1>__5; // 0x40
	internal int $PC; // 0x48
	internal object $current; // 0x50
	internal byte[] <$>bytes; // 0x58
	internal GameScopeControl <>f__this; // 0x60

	// Methods
	public void .ctor(); // 0x10025523C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100255314
	private object System.Collections.IEnumerator.get_Current(); // 0x10025531C
	public bool MoveNext(); // 0x100255324
	public void Dispose(); // 0x100255818
	public void Reset(); // 0x100255824
}

// Namespace: 
public class GameShoot : MonoBehaviour // TypeDefIndex: 3731
{
	// Fields
	public OnFireDgt OnFire; // 0x18
	public OnHitDgt OnCheckHit; // 0x20
	public OnReloadDgt OnReloadStart; // 0x28
	public OnReloadDgt OnReloadEnd; // 0x30
	public Game game; // 0x38
	public GameStatisticBattle battleStatistic; // 0x40
	public ShootStates shootState; // 0x48
	public WeaponAnimationControl weaponAnimation; // 0x50
	public ShootEffect shootEffect; // 0x58
	public float spreadOnFree; // 0x60
	public GameObject bulletPrefab; // 0x68
	public Transform bulletSpawn; // 0x70
	public float bulletSpeed; // 0x78
	public int bulletCage; // 0x7C
	public double damage; // 0x80
	public tk2dTextMesh bulletCountMesh; // 0x88
	public float fireSpeed; // 0x90
	public float reloadSpeed; // 0x94
	public float zoomInSpeed; // 0x98
	private static Action`1<GameObject> OnTargetHitHandler; // 0x0
	private GameScopeControl scopeControl; // 0xA0
	private List`1<GameObject> bullets; // 0xA8
	private int bulletCount; // 0xB0
	private bool autoScope; // 0xB4
	private bool smart; // 0xB5
	private bool fromZoom; // 0xB6
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x8

	// Methods
	public void .ctor(); // 0x100256198
	public static void add_OnTargetHit(Action`1<GameObject> value); // 0x1002300B4
	public static void remove_OnTargetHit(Action`1<GameObject> value); // 0x100230D5C
	public void ResetBulletsCount(); // 0x10024C15C
	private void OnScopeSwitch(bool isOn); // 0x1002562C0
	private void Start(); // 0x1002562F0
	private void OnMouseShoot(); // 0x10025666C
	private void Update(); // 0x100256A90
	private void ButtonZoom(); // 0x1002572A4
	private void Zoom(); // 0x100256DC8
	private void Shoot(); // 0x100256718
	private IEnumerator DestroySound(string clipName, float waitTime); // 0x1002572AC
	private IEnumerator DestroySoundShellDrop(string clipName, float waitTime); // 0x100257338
	private IEnumerator WaitForReload(); // 0x1002573C4
	private void Reload(); // 0x100256F30
	private IEnumerator WaitForZoom(float waitTime); // 0x1002574C8
	private IEnumerator WaitForShootState(float waitTime); // 0x100257550
	private void UpdateBulletsMesh(); // 0x100256210
	private bool CheckForEnemyTarget(GameObject t); // 0x1002575D8
	private bool CheckForBonusTarget(GameObject t); // 0x100257794
	private bool CheckForDroneTarget(GameObject t); // 0x100257870
	private string GetEnemyPart(GameObject t); // 0x100257944
	private IEnumerator MoveBullet(GameObject bullet); // 0x100257B6C
	public void DestroyBullet(GameObject bullet); // 0x1002496F4
	private void OnDestroy(); // 0x100257BF0
	private void <Start>m__7E(WeaponPart arg1, WeaponPartStage arg2); // 0x100257C40
}

// Namespace: 
public sealed class ShootStates : Enum // TypeDefIndex: 3732
{
	// Fields
	public int value__; // 0x10
	public const ShootStates idle = 0; // 0x0
	public const ShootStates shooting = 1; // 0x0
	public const ShootStates reloading = 2; // 0x0
	public const ShootStates zooming = 3; // 0x0

}

// Namespace: 
public sealed class ShootSpace : Enum // TypeDefIndex: 3733
{
	// Fields
	public int value__; // 0x10
	public const ShootSpace FreeShoot = 0; // 0x0
	public const ShootSpace EnemySniper = 1; // 0x0
	public const ShootSpace Bonus = 2; // 0x0
	public const ShootSpace Drone = 3; // 0x0
	public const ShootSpace FlyingCoin = 4; // 0x0

}

// Namespace: 
public sealed class OnFireDgt : MulticastDelegate // TypeDefIndex: 3734
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002368B4
	public virtual void Invoke(int enemyType, string enemyName, string enemyPart); // 0x100258CAC
	public virtual IAsyncResult BeginInvoke(int enemyType, string enemyName, string enemyPart, AsyncCallback callback, object object); // 0x100259804
	public virtual void EndInvoke(IAsyncResult result); // 0x1002598D0
}

// Namespace: 
public sealed class OnHitDgt : MulticastDelegate // TypeDefIndex: 3735
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002368C4
	public virtual void Invoke(string enemyName, double movingTime); // 0x100258D4C
	public virtual IAsyncResult BeginInvoke(string enemyName, double movingTime, AsyncCallback callback, object object); // 0x100259920
	public virtual void EndInvoke(IAsyncResult result); // 0x1002599E8
}

// Namespace: 
public sealed class OnReloadDgt : MulticastDelegate // TypeDefIndex: 3736
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002368D4
	public virtual void Invoke(); // 0x100257438
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100259A00
	public virtual void EndInvoke(IAsyncResult result); // 0x100259A60
}

// Namespace: 
private sealed class <DestroySound>c__Iterator26 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3737
{
	// Fields
	internal float waitTime; // 0x10
	internal string clipName; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal float <$>waitTime; // 0x30
	internal string <$>clipName; // 0x38

	// Methods
	public void .ctor(); // 0x100257330
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100257C68
	private object System.Collections.IEnumerator.get_Current(); // 0x100257C70
	public bool MoveNext(); // 0x100257C78
	public void Dispose(); // 0x100257D7C
	public void Reset(); // 0x100257D88
}

// Namespace: 
private sealed class <DestroySoundShellDrop>c__Iterator27 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3738
{
	// Fields
	internal float waitTime; // 0x10
	internal string clipName; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal float <$>waitTime; // 0x30
	internal string <$>clipName; // 0x38

	// Methods
	public void .ctor(); // 0x1002573BC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100257DDC
	private object System.Collections.IEnumerator.get_Current(); // 0x100257DE4
	public bool MoveNext(); // 0x100257DEC
	public void Dispose(); // 0x100257EEC
	public void Reset(); // 0x100257EF8
}

// Namespace: 
private sealed class <WaitForReload>c__Iterator28 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3739
{
	// Fields
	internal string[] <shell_drop_sound>__0; // 0x10
	internal int <i>__1; // 0x18
	internal int $PC; // 0x1C
	internal object $current; // 0x20
	internal GameShoot <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100257430
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100258E6C
	private object System.Collections.IEnumerator.get_Current(); // 0x100258E74
	public bool MoveNext(); // 0x100258E7C
	public void Dispose(); // 0x100259364
	public void Reset(); // 0x100259370
}

// Namespace: 
private sealed class <WaitForZoom>c__Iterator29 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3740
{
	// Fields
	internal float waitTime; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal float <$>waitTime; // 0x20
	internal GameShoot <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100257548
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100259660
	private object System.Collections.IEnumerator.get_Current(); // 0x100259668
	public bool MoveNext(); // 0x100259670
	public void Dispose(); // 0x100259740
	public void Reset(); // 0x10025974C
}

// Namespace: 
private sealed class <WaitForShootState>c__Iterator2A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3741
{
	// Fields
	internal float waitTime; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal float <$>waitTime; // 0x20
	internal GameShoot <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1002575D0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002593C4
	private object System.Collections.IEnumerator.get_Current(); // 0x1002593CC
	public bool MoveNext(); // 0x1002593D4
	public void Dispose(); // 0x100259600
	public void Reset(); // 0x10025960C
}

// Namespace: 
private sealed class <MoveBullet>c__Iterator2B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3742
{
	// Fields
	internal GameObject bullet; // 0x10
	internal GameBullet <gameBullet>__0; // 0x18
	internal Vector3 <shootPoint>__1; // 0x20
	internal Ray <targetRay>__2; // 0x2C
	internal Vector3 <target>__3; // 0x44
	internal ShootSpace <shootSpace>__4; // 0x50
	internal string <enemyPart>__5; // 0x58
	internal RaycastHit <hit>__6; // 0x60
	internal float <movingTime>__7; // 0x90
	internal string <enemyName>__8; // 0x98
	internal int <enemyType>__9; // 0xA0
	internal EnemyDrone <enemyDrone>__10; // 0xA8
	internal float <t>__11; // 0xB0
	internal EnemyDrone <enemyDrone>__12; // 0xB8
	internal int $PC; // 0xC0
	internal object $current; // 0xC8
	internal GameObject <$>bullet; // 0xD0
	internal GameShoot <>f__this; // 0xD8

	// Methods
	public void .ctor(); // 0x100257BE8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100257F4C
	private object System.Collections.IEnumerator.get_Current(); // 0x100257F54
	public bool MoveNext(); // 0x100257F5C
	public void Dispose(); // 0x100258E0C
	public void Reset(); // 0x100258E18
}

// Namespace: 
public class GameSpawnPoint : MonoBehaviour // TypeDefIndex: 3743
{
	// Fields
	public int id; // 0x18
	public Weights weight; // 0x1C
	public GameEnemy enemy; // 0x20
	public Pose pose; // 0x28

	// Methods
	public void .ctor(); // 0x100259A6C
	private void Start(); // 0x100259A74
	public void Reset(); // 0x100259C28
}

// Namespace: 
public sealed class Weights : Enum // TypeDefIndex: 3744
{
	// Fields
	public int value__; // 0x10
	public const Weights VeryEasy = 0; // 0x0
	public const Weights Easy = 1; // 0x0
	public const Weights Medium = 2; // 0x0
	public const Weights Hard = 3; // 0x0
	public const Weights VeryHard = 4; // 0x0

}

// Namespace: 
public class GameSpawnPoints : MonoBehaviour // TypeDefIndex: 3745
{
	// Fields
	public GameSpawnPoint[] spawnPoints; // 0x18
	public GameObject enemyPrefab; // 0x20
	public string lightProbeName; // 0x28
	private List`1<GameEnemy> gameEnemies; // 0x30
	private Object arrow; // 0x38
	private Object scopeGlint; // 0x40
	private bool booster_on; // 0x48

	// Methods
	public void .ctor(); // 0x100259F80
	private void Start(); // 0x10025A000
	public bool SpawnPointExist(int spawnid); // 0x10025A160
	public bool IsSpawnPointEngaged(int spawnid); // 0x10025A270
	public GameEnemy GetEnemyViaName(string nameEnemy); // 0x10025A31C
	public List`1<GameEnemy> GetEnemies(); // 0x10025A55C
	public void ResetAllEnemies(); // 0x10025A564
	public bool SpawnEnemy(string enemyName, int spawnid, ISFSObject adddata); // 0x10025A750
	public void RemoveEnemy(string nameEnemy); // 0x10025A604
	public GameSpawnPoint GetPointViaEnemyName(string nameEnemy); // 0x10025AED4
	public int GetFreePointsSize(); // 0x10025B000
	public GameSpawnPoint GetPointViaId(int spawnid); // 0x10025A1F4
	private void Update(); // 0x10025B0E4
	public void OnBoosterOn(); // 0x10025B1AC
	public void OnBoosterOff(); // 0x10025B4DC
	private void OnDestroy(); // 0x10025B6B4
}

// Namespace: 
public class LightmapsBehaviour : MonoBehaviour // TypeDefIndex: 3746
{
	// Fields
	private LightmapData[] lightmaps; // 0x18
	private LightProbes lightprobes; // 0x20

	// Methods
	public void .ctor(); // 0x10028F248
	private Texture2D getTexture(Color color); // 0x10028F250
	public void DisableLightmaps(Color color); // 0x10028F334
	public void EnableLightmaps(); // 0x10028F4FC
}

// Namespace: 
public class GameSpecialDevice : MonoBehaviour // TypeDefIndex: 3747
{
	// Fields
	public float worktime; // 0x18
	public float workedtime; // 0x1C
	public float proctime; // 0x20
	public States state; // 0x24
	public GameActionButtons actionButtons; // 0x28
	public tk2dCamera guicamera; // 0x30
	public BlackScreen blackScreen; // 0x38
	public float switchTime; // 0x40
	public GameObject gunLights; // 0x48
	public GameSpawnPoints spawnPoints; // 0x50
	public SpecialMaterials specialMaterials; // 0x58
	public tk2dTextMesh counterMesh; // 0x60
	public GameSpecialDeviceEffect noiseEffect; // 0x68
	public Color normalColor; // 0x70
	public Color normalEquatorColor; // 0x80
	public Color normalGroundColor; // 0x90
	public Color specialColor; // 0xA0
	public Renderer clouds; // 0xB0
	public Renderer cloudsAlpha; // 0xB8
	public Renderer mountains; // 0xC0
	public Renderer[] hideObjectList; // 0xC8
	public Action`1<bool> OnSwitchPower; // 0xD0
	public static bool power; // 0x0
	private bool fog; // 0xD8
	private Material skybox; // 0xE0
	private bool vision_finish; // 0xE8
	private Behaviour flareLayer; // 0xF0
	private SunShafts[] sunShafts; // 0xF8
	private SpecialButton specialButton; // 0x100
	public GameObject freeScope; // 0x108
	private bool xpowerMask; // 0x110
	private static long last_sent_time; // 0x8
	private static Action`1<bool> <>f__am$cache20; // 0x10

	// Methods
	public void .ctor(); // 0x10025B6B8
	private static void .cctor(); // 0x10025B6D8
	public void Reset(); // 0x10025B6DC
	private void CheckXPowerMask(); // 0x10025B824
	private void Awake(); // 0x10025B938
	private void Start(); // 0x10025BD98
	private void Update(); // 0x10025BFC4
	private bool IsAllowWorking(); // 0x10025C2CC
	private void OnSpecialButtonDown(); // 0x10025C2B0
	public void UpdateCounter(); // 0x10025BF30
	public void On(); // 0x10025C3F0
	public void Off(); // 0x10025C2E0
	private IEnumerator SwitchPower(bool isOn); // 0x10025C5F8
	private static void <Awake>m__7F(bool obj); // 0x10025C680
	private void <Awake>m__80(GameObject go); // 0x10025C6EC
}

// Namespace: 
public class SpecialMaterials // TypeDefIndex: 3748
{
	// Fields
	public Material defBodyMaterial; // 0x10
	public Material defHeadMaterial; // 0x18
	public Material detectedBodyMaterial; // 0x20
	public Material detectedBodyMaterialXPower; // 0x28
	public Material detectedHeadMaterial; // 0x30
	public Material detectedHeadMaterialXPower; // 0x38
	public Material defWeaponMaterial; // 0x40
	public Material hidedMaterial; // 0x48

	// Methods
	public void .ctor(); // 0x10025EADC
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3749
{
	// Fields
	public int value__; // 0x10
	public const States off = 0; // 0x0
	public const States poweron = 1; // 0x0
	public const States on = 2; // 0x0
	public const States poweroff = 3; // 0x0

}

// Namespace: 
private sealed class <SwitchPower>c__Iterator2C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3750
{
	// Fields
	internal bool isOn; // 0x10
	internal SunShafts[] <$s_188>__0; // 0x18
	internal int <$s_189>__1; // 0x20
	internal SunShafts <js>__2; // 0x28
	internal Renderer[] <$s_190>__3; // 0x30
	internal int <$s_191>__4; // 0x38
	internal Renderer <r>__5; // 0x40
	internal Exception <e>__6; // 0x48
	internal Enumerator<GameEnemy> <$s_192>__7; // 0x50
	internal GameEnemy <enemy>__8; // 0x68
	internal float <chance>__9; // 0x70
	internal bool <chanceOverride>__10; // 0x74
	internal SkinnedMeshRenderer[] <meshParts>__11; // 0x78
	internal SkinnedMeshRenderer[] <$s_193>__12; // 0x80
	internal int <$s_194>__13; // 0x88
	internal SkinnedMeshRenderer <mesh>__14; // 0x90
	internal MeshRenderer[] <meshWeaponParts>__15; // 0x98
	internal MeshRenderer[] <$s_195>__16; // 0xA0
	internal int <$s_196>__17; // 0xA8
	internal MeshRenderer <mesh>__18; // 0xB0
	internal SunShafts[] <$s_197>__19; // 0xB8
	internal int <$s_198>__20; // 0xC0
	internal SunShafts <js>__21; // 0xC8
	internal Renderer[] <$s_199>__22; // 0xD0
	internal int <$s_200>__23; // 0xD8
	internal Renderer <r>__24; // 0xE0
	internal Enumerator<GameEnemy> <$s_201>__25; // 0xE8
	internal GameEnemy <enemy>__26; // 0x100
	internal SkinnedMeshRenderer[] <meshParts>__27; // 0x108
	internal SkinnedMeshRenderer[] <$s_202>__28; // 0x110
	internal int <$s_203>__29; // 0x118
	internal SkinnedMeshRenderer <mesh>__30; // 0x120
	internal MeshRenderer[] <meshWeaponParts>__31; // 0x128
	internal MeshRenderer[] <$s_204>__32; // 0x130
	internal int <$s_205>__33; // 0x138
	internal MeshRenderer <mesh>__34; // 0x140
	internal int $PC; // 0x148
	internal object $current; // 0x150
	internal bool <$>isOn; // 0x158
	internal GameSpecialDevice <>f__this; // 0x160

	// Methods
	public void .ctor(); // 0x10025C678
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10025C9A8
	private object System.Collections.IEnumerator.get_Current(); // 0x10025C9B0
	public bool MoveNext(); // 0x10025C9B8
	public void Dispose(); // 0x10025EA7C
	public void Reset(); // 0x10025EA88
}

// Namespace: 
private sealed class <On>c__AnonStoreyCF // TypeDefIndex: 3751
{
	// Fields
	internal MessageGirl01Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x10025C5F0
	internal void <>m__81(); // 0x10025C954
}

// Namespace: 
public class GameSpecialDeviceEffect : MonoBehaviour // TypeDefIndex: 3752
{
	// Fields
	public Transform upperBgLine; // 0x18
	public Transform lowerBgLine; // 0x20
	public Transform background; // 0x28
	public Transform upperLine; // 0x30
	public Transform lowerLine; // 0x38
	public GameObject lines; // 0x40
	public float backgroundspeed; // 0x48
	public float speedtime; // 0x4C
	private tk2dCamera guicamera; // 0x50
	private bool isDownMove; // 0x58
	private bool isStart; // 0x59

	// Methods
	public void .ctor(); // 0x10025EAE4
	private void Start(); // 0x10025EB00
	public void On(); // 0x10025E728
	public void AnimateLines(); // 0x10025ECD0
	private IEnumerator LinesAnimation(); // 0x10025ECD4
	public void Off(); // 0x10025E750
	private void SetupBgLines(); // 0x10025EB90
	private void Update(); // 0x10025ED48
}

// Namespace: 
private sealed class <LinesAnimation>c__Iterator2D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3753
{
	// Fields
	internal float <t>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal GameSpecialDeviceEffect <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10025ED40
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10025EE58
	private object System.Collections.IEnumerator.get_Current(); // 0x10025EE60
	public bool MoveNext(); // 0x10025EE68
	public void Dispose(); // 0x10025F330
	public void Reset(); // 0x10025F33C
}

// Namespace: 
public class GameStatisticBattle : MonoBehaviour // TypeDefIndex: 3754
{
	// Fields
	public OnEventDgt OnExitButtonClick; // 0x18
	public OnEventDgt OnRespawnTimerEnd; // 0x20
	public OnEventDgt OnVoteTimerEnd; // 0x28
	public OnEventDgt OnReplayClickEvent; // 0x30
	public string namemyself; // 0x38
	public GameObject statisticMeshes; // 0x40
	public Color standarttextcolor; // 0x48
	public Color whitetextcolor; // 0x58
	public Color myselftextcolor; // 0x68
	private Color color_blue; // 0x78
	private Color color_red; // 0x88
	public GameObject replayMeshes; // 0x98
	public tk2dUIMask statisticmask; // 0xA0
	public float endguihidetime; // 0xA8
	public float endmaskhidetime; // 0xAC
	private float[] veloarrX; // 0xB0
	private float[] veloarrY; // 0xB8
	public tk2dCameraAnchor[] cameraanchorsforendgame; // 0xC0
	private float velomask; // 0xC8
	public GameScopeControl scopecontrol; // 0xD0
	private DailyQuestSimple quest; // 0xD8
	private Object bs_row; // 0xE0
	private BS_HeaderSingle bs_single_header; // 0xE8
	private GameObject[] bs_rows; // 0xF0
	private GameObject[] bs_team_headers; // 0xF8
	private GameObject bs_paints; // 0x100
	public GameObject respawnblock; // 0x108
	public int respawntimer; // 0x110
	public int respawntimer_; // 0x114
	public tk2dTextMesh respawntimerMesh; // 0x118
	public int votetimer; // 0x120
	public int votetimer_; // 0x124
	public tk2dTextMesh votetimerMesh; // 0x128
	public tk2dUIItem forcerespawnbutton; // 0x130
	public tk2dUIItem forcerespawnbuttonUnactive; // 0x138
	public tk2dUIItem showButton; // 0x140
	public tk2dUIItem exitButton; // 0x148
	public tk2dUIItem replayButton; // 0x150
	public tk2dUIItem facebookButton; // 0x158
	public tk2dUIItem menuButton; // 0x160
	public TransformTimerRotate replayRotate; // 0x168
	public GameObject[] hideitems; // 0x170
	public int respawncost; // 0x178
	public float winshowtime; // 0x17C
	private float winshowvelo; // 0x180
	public GameObject energyMeshes; // 0x188
	public float energyyoffset; // 0x190
	public float hidereplaytime; // 0x194
	private float hidereplayvelo; // 0x198
	private float energyposvelo; // 0x19C
	private float hidereplayvelo2; // 0x1A0
	public float selectedheight; // 0x1A4
	public float baseheight; // 0x1A8
	public tk2dTextMesh replayText; // 0x1B0
	public Color yellowColor; // 0x1B8
	private EnergyDialog energyDialog; // 0x1C8
	public GameObject energyDialogPrefab; // 0x1D0
	public GameObject confirmDialogPrefab; // 0x1D8
	public tk2dTextMesh respawnCostMesh; // 0x1E0
	public tk2dTextMesh respawnUnactiveCostMesh; // 0x1E8
	public DailyQuests dailyQuests; // 0x1F0
	private WeakReference confirmDialogRef; // 0x1F8
	private Color colorTransparency; // 0x200
	private int HEADER_HEIGHT; // 0x210
	private int ROW_HEIGHT; // 0x214
	private int ROW_WIDTH; // 0x218
	private int ROW_WIDTH_SINGLE; // 0x21C
	private int ROW_HEIGHT_KILLER; // 0x220
	private int bs_base_offset; // 0x224
	private int space; // 0x228
	private float updaterate; // 0x22C
	private float oldupdatetime; // 0x230

	// Methods
	public void .ctor(); // 0x10025F390
	public void set_CurrentQuest(DailyQuestSimple value); // 0x10025F58C
	private void Start(); // 0x10025F63C
	private void OnExitClick(); // 0x100260EF8
	private void OnConfirmExit(); // 0x1002610BC
	private void OnMenuClick(); // 0x1002612A0
	private void OnReplayClick(); // 0x100261334
	private void CreateEnergyDialog(); // 0x10026180C
	private void OnWaitClick(); // 0x100261998
	private void OnDonateClick(); // 0x1002619EC
	private void OnStaminaUpdate(float value, int lastusingtime, int facebooktime); // 0x100261CF0
	private void OnFacebookClick(); // 0x100261D84
	private void OnFacebookClickEnergy(); // 0x100261E44
	private void OnFacebookPostEnergy(); // 0x100261FE4
	public void ResetStatistic(); // 0x10026231C
	public void ReplayVote(int id); // 0x10026291C
	private IEnumerator AnimateAcceptReplay(); // 0x100262A5C
	private int SetPosition(GameObject tuning, int positionCount); // 0x100262AD0
	public void ForceUpdateStatistic(); // 0x100262AD8
	public void ShowEndGameStatistic(); // 0x100263278
	private IEnumerator AnimateEndGameStatistic(); // 0x100263544
	private void Update(); // 0x1002635B8
	private void UpdateKiller(PlayerBattleStats player, BS_Row row); // 0x1002638B4
	private void UpdateRow(PlayerBattleStats player, BS_Row row, bool isKiller); // 0x100263DD0
	public void UpdateMeshes(); // 0x100262B08
	private void OnShowClick(); // 0x100263790
	private void ForceRespawnClick(); // 0x100264868
	private int GetRespawnCost(); // 0x10026497C
	public void ShowStatistic(); // 0x100264734
	public void HideStatistic(); // 0x1002633AC
	public void StartRespawnTimer(); // 0x1002649E4
	public void StopRespawnTimer(); // 0x1002634D8
	private IEnumerator RespawnTimerCoroutine(); // 0x100264BEC
	private IEnumerator VoteTimerCoroutine(); // 0x100264C60
	private void OnDestroy(); // 0x100264CD4
}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 3755
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002668FC
	public virtual void Invoke(); // 0x100261210
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100266918
	public virtual void EndInvoke(IAsyncResult result); // 0x100266978
}

// Namespace: 
private sealed class <AnimateAcceptReplay>c__Iterator2E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3756
{
	// Fields
	internal SpritesAlphaControl <sacenergy>__0; // 0x10
	internal float <targetenergyY>__1; // 0x18
	internal float <targetenergyY2>__2; // 0x1C
	internal float <t>__3; // 0x20
	internal SpritesAlphaControl <saccircle>__4; // 0x28
	internal float <t>__5; // 0x30
	internal float <t>__6; // 0x34
	internal int $PC; // 0x38
	internal object $current; // 0x40
	internal GameStatisticBattle <>f__this; // 0x48

	// Methods
	public void .ctor(); // 0x100262AC8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100264F1C
	private object System.Collections.IEnumerator.get_Current(); // 0x100264F24
	public bool MoveNext(); // 0x100264F2C
	public void Dispose(); // 0x100265518
	public void Reset(); // 0x100265524
}

// Namespace: 
private sealed class <AnimateEndGameStatistic>c__Iterator2F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3757
{
	// Fields
	internal GameBoosters[] <boosters>__0; // 0x10
	internal GameBoosters[] <$s_208>__1; // 0x18
	internal int <$s_209>__2; // 0x20
	internal GameBoosters <gb>__3; // 0x28
	internal float <t>__4; // 0x30
	internal int <i>__5; // 0x34
	internal tk2dCameraAnchor <anchor>__6; // 0x38
	internal BS_HeaderTeam <h>__7; // 0x40
	internal float <t>__8; // 0x48
	internal float <t>__9; // 0x4C
	internal int $PC; // 0x50
	internal object $current; // 0x58
	internal GameStatisticBattle <>f__this; // 0x60

	// Methods
	public void .ctor(); // 0x1002635B0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100265578
	private object System.Collections.IEnumerator.get_Current(); // 0x100265580
	public bool MoveNext(); // 0x100265588
	public void Dispose(); // 0x100266308
	public void Reset(); // 0x100266314
}

// Namespace: 
private sealed class <RespawnTimerCoroutine>c__Iterator30 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3758
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal GameStatisticBattle <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100264C58
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100266368
	private object System.Collections.IEnumerator.get_Current(); // 0x100266370
	public bool MoveNext(); // 0x100266378
	public void Dispose(); // 0x1002665A0
	public void Reset(); // 0x1002665AC
}

// Namespace: 
private sealed class <VoteTimerCoroutine>c__Iterator31 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3759
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal GameStatisticBattle <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100264CCC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100266600
	private object System.Collections.IEnumerator.get_Current(); // 0x100266608
	public bool MoveNext(); // 0x100266610
	public void Dispose(); // 0x10026689C
	public void Reset(); // 0x1002668A8
}

// Namespace: 
public class GameTPARSwitch : MonoBehaviour // TypeDefIndex: 3760
{
	// Fields
	public GameObject onState; // 0x18
	public GameObject offState; // 0x20
	public GameObject timeState; // 0x28
	public GameObject background; // 0x30
	public tk2dTextMesh costMesh; // 0x38
	public tk2dTextMesh valueMesh; // 0x40
	public tk2dTextMesh timeValueMesh; // 0x48
	public int cost; // 0x50
	public tk2dSprite scope; // 0x58
	protected BoosterTypes type; // 0x60
	protected bool booster_on; // 0x64
	private static Action <>f__am$cacheB; // 0x0

	// Methods
	public void .ctor(); // 0x10026702C
	private void Start(); // 0x100267034
	private void SetColor(Color c); // 0x100267480
	private void Update(); // 0x1002675D0
	private void OnClick(); // 0x100267560
	private void OnDestroy(); // 0x100267698
	private static void <Start>m__82(); // 0x10026769C
}

// Namespace: 
private sealed class <Start>c__AnonStoreyD0 // TypeDefIndex: 3761
{
	// Fields
	internal MessageGirl01Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x10026783C
	internal void <>m__83(); // 0x100267844
}

// Namespace: 
public class GameTimer : MonoBehaviour // TypeDefIndex: 3762
{
	// Fields
	public int time; // 0x18
	public tk2dTextMesh timerMesh; // 0x20
	private DateTime dateTime; // 0x28
	private tk2dSlicedSprite sprite; // 0x38
	public Color gray; // 0x40
	public Color blue; // 0x50
	public Color red; // 0x60

	// Methods
	public void .ctor(); // 0x100266984
	private void Start(); // 0x100266AAC
	private void Update(); // 0x100266CC0
	public void StartTimer(); // 0x100266D80
	public void SetupDateTime(); // 0x100266C0C
	public void UpdateTimerMesh(); // 0x100266C88
	private IEnumerator TimerTick(); // 0x100266DD4
}

// Namespace: 
private sealed class <TimerTick>c__Iterator32 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3763
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal GameTimer <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100266E40
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100266E48
	private object System.Collections.IEnumerator.get_Current(); // 0x100266E50
	public bool MoveNext(); // 0x100266E58
	public void Dispose(); // 0x100266FCC
	public void Reset(); // 0x100266FD8
}

// Namespace: 
public class RemoteSpriteRender : MonoBehaviour // TypeDefIndex: 3764
{
	// Fields
	public ContentMode contentMode; // 0x18
	public Vector2 size; // 0x1C
	private string assetBundle; // 0x28
	private string assetName; // 0x30

	// Methods
	public void .ctor(); // 0x1000D1AEC
	private void Awake(); // 0x1000D1AF4
	private void OnDestroy(); // 0x1000D1B74
	public void SetSprite(string assetBundle, string assetName); // 0x1000D1BE4
	private void Start(); // 0x1000D1D9C
	private void OnEnable(); // 0x1000D1DC8
	private IEnumerator Load(); // 0x1000D1D30
	public static float CalculateResizeToFit(Vector2 imageSize, Vector2 boxSize, ContentMode contentMode); // 0x1000D1E90
}

// Namespace: 
public sealed class ContentMode : Enum // TypeDefIndex: 3765
{
	// Fields
	public int value__; // 0x10
	public const ContentMode ASPECT_FIT = 0; // 0x0
	public const ContentMode ASPECT_FILL = 1; // 0x0

}

// Namespace: 
private sealed class <Load>c__Iterator33 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3766
{
	// Fields
	internal AssetBundleLoadAssetOperation <request>__0; // 0x10
	internal SpriteRenderer <sr>__1; // 0x18
	internal float <scale>__2; // 0x20
	internal int $PC; // 0x24
	internal object $current; // 0x28
	internal RemoteSpriteRender <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000D1E88
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000D1F84
	private object System.Collections.IEnumerator.get_Current(); // 0x1000D1F8C
	public bool MoveNext(); // 0x1000D1F94
	public void Dispose(); // 0x1000D2290
	public void Reset(); // 0x1000D229C
}

// Namespace: 
public class ZoomArrowController : MonoBehaviour // TypeDefIndex: 3767
{
	// Fields
	public bool min; // 0x18
	private GameScope scope; // 0x20
	private Renderer renderer; // 0x28
	private float old; // 0x30

	// Methods
	public void .ctor(); // 0x1001DBE70
	private void Start(); // 0x1001DBE78
	private void Update(); // 0x1001DBEE8
}

// Namespace: 
public class GamebattleLogBonusElement : MonoBehaviour // TypeDefIndex: 3768
{
	// Fields
	public ElementTypes elementType; // 0x18
	public MapBonusType bonustype; // 0x1C
	public tk2dSprite bonusSprt; // 0x20
	public tk2dSprite shooterFlagSprt; // 0x28
	public string cryName; // 0x30
	public string dollarName; // 0x38
	public string staminaName; // 0x40
	public string healthName; // 0x48
	public string batteryName; // 0x50
	public string adrenalineName; // 0x58
	public string bulletName; // 0x60
	public string assistantName; // 0x68
	public string pumpkinName; // 0x70
	public Color HealthColor; // 0x78
	public Color dollarColor; // 0x88
	public Color staminaColor; // 0x98
	public Color cryColor; // 0xA8
	public Color batteryColor; // 0xB8
	public Color busterColor; // 0xC8
	public tk2dTextMesh valueText; // 0xD8
	public tk2dTextMesh shooterText; // 0xE0
	public tk2dTextMesh actionText; // 0xE8
	public float flagoffset; // 0xF0
	public float actionoffset; // 0xF4
	public float afteractionoffset; // 0xF8
	public float leftaddoffset; // 0xFC
	public float leftaddoncharacteroffset; // 0x100

	// Methods
	public void .ctor(); // 0x100246FEC
	public void Setup(); // 0x1002454DC
}

// Namespace: 
public class GhostSniper : MonoBehaviour // TypeDefIndex: 3769
{
	// Fields
	public float movingSpeed; // 0x18
	public Vector3 moveAdd; // 0x1C
	public GameObject bulletPrefab; // 0x28
	private float velo; // 0x30
	private Vector3 startPos; // 0x34
	private float time; // 0x40
	private bool substract; // 0x44

	// Methods
	public void .ctor(); // 0x1002683EC
	private void Start(); // 0x1002683FC
	public void Shoot(string enemystr, float bulletSpeed); // 0x100268440
	private IEnumerator MoveBullet(string targetstr, float bulletSpeed); // 0x10026846C
	private void Update(); // 0x100268508
}

// Namespace: 
private sealed class <MoveBullet>c__Iterator34 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3770
{
	// Fields
	internal GameObject <bullet>__0; // 0x10
	internal GameObject <target>__1; // 0x18
	internal string targetstr; // 0x20
	internal string[] <bonusdata>__2; // 0x28
	internal MapBonus[] <bonuses>__3; // 0x30
	internal MapBonus[] <$s_216>__4; // 0x38
	internal int <$s_217>__5; // 0x40
	internal MapBonus <bonus>__6; // 0x48
	internal GameSpawnPoints <spawnPoints>__7; // 0x50
	internal GameEnemy <enemy>__8; // 0x58
	internal Vector3 <bulletSpawnPos>__9; // 0x60
	internal float bulletSpeed; // 0x6C
	internal float <movingTime>__10; // 0x70
	internal Vector3 <targetpos>__11; // 0x74
	internal float <t>__12; // 0x80
	internal int $PC; // 0x84
	internal object $current; // 0x88
	internal string <$>targetstr; // 0x90
	internal float <$>bulletSpeed; // 0x98
	internal GhostSniper <>f__this; // 0xA0

	// Methods
	public void .ctor(); // 0x100268500
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002686B8
	private object System.Collections.IEnumerator.get_Current(); // 0x1002686C0
	public bool MoveNext(); // 0x1002686C8
	public void Dispose(); // 0x100268EE4
	public void Reset(); // 0x100268EF0
}

// Namespace: 
public class GoogleAccountSwitchButton : MonoBehaviour // TypeDefIndex: 3771
{
	// Methods
	public void .ctor(); // 0x100269A84
	private void Start(); // 0x100269A8C
}

// Namespace: 
private sealed class <Start>c__AnonStoreyD1 // TypeDefIndex: 3772
{
	// Fields
	internal string[] accounts; // 0x10

	// Methods
	public void .ctor(); // 0x100269BF0
	internal void <>m__84(); // 0x100269BF8
}

// Namespace: 
private sealed class <Start>c__AnonStoreyD2 // TypeDefIndex: 3773
{
	// Fields
	internal DialogBasic dialog; // 0x10
	internal <Start>c__AnonStoreyD1 <>f__ref$209; // 0x18

	// Methods
	public void .ctor(); // 0x100269CB4
	internal void <>m__85(string account); // 0x100269CBC
}

// Namespace: 
public class GuiScrollMaxValueViaScreen : MonoBehaviour // TypeDefIndex: 3774
{
	// Fields
	public bool minXValue; // 0x18
	public bool minXValueInverted; // 0x19
	public float minXValueOffset; // 0x1C

	// Methods
	public void .ctor(); // 0x100270F38
	private void Awake(); // 0x100270F40
	private void Update(); // 0x10027108C
}

// Namespace: 
public class GuilayoutBounds : MonoBehaviour // TypeDefIndex: 3775
{
	// Fields
	public tk2dCamera guiCamera; // 0x18
	private tk2dUILayout windowLayout; // 0x20

	// Methods
	public void .ctor(); // 0x10026F8D0
	private void Start(); // 0x10026F8D8
	private void Update(); // 0x10026FA4C
}

// Namespace: 
public class HelmetController : MonoBehaviour // TypeDefIndex: 3776
{
	// Fields
	private const string LOADER_PATH = "Prefabs/GUI/LoaderOffset"; // 0x0
	public GameObject[] HelmetStorage; // 0x18
	public GameObject currentHelmet; // 0x20
	public int currentHelmetMod; // 0x28
	public int currentHelmetMask; // 0x2C
	public int currentHelmetCamo; // 0x30
	public int currentHelmetType; // 0x34
	public MenuLoader m_Loader; // 0x38
	public MenuLoader m_LoaderHelmet; // 0x40
	public MenuLoader m_LoaderAero; // 0x48
	public Action OnHelmetSwitched; // 0x50

	// Methods
	public void .ctor(); // 0x100278084
	private void Start(); // 0x1002780F0
	public bool IsLoading(); // 0x1002782A0
	public void StopDownload(); // 0x10027843C
	private tk2dCameraAnchor GetMiddleCenter(); // 0x10027851C
	private void SetupHelmet(int newHelmet, int upgradeStage, int maskType, int camo_type); // 0x100278644
	public void Reset(); // 0x100279410
	public void SwitchHelmet(int newHelmet, int upgradeStage, int maskType, int camo_type); // 0x10027972C
	public void SwitchHelmetState(bool isUpgrade); // 0x100279734
	private void ShowHelmet(); // 0x100279A70
	private bool CamoDisabled(int camo_type); // 0x100279124
	private void SetupHelmetCamo(int newHelmet, int upgradeStage, int maskType, int camo_type); // 0x100279220
	private void SetupHelmetAero(int newHelmet, int upgradeStage, int maskType, int camo_type); // 0x10027A824
	private void ShowLoader(bool show); // 0x10027AA00
	private void ShowLoaderAero(bool show); // 0x10027AD00
	private void ShowLoaderHelmet(bool show); // 0x10027B000
	private void FixedUpdate(); // 0x10027B300
	private void SetupTexture(BundleOptions selectedcamobundle, Helmet helmet, int camo_type); // 0x100279C58
	private void SetupMask(BundleOptions selectedcamobundle, Helmet helmet, int camo_type); // 0x10027A390
}

// Namespace: 
private sealed class <SetupHelmet>c__AnonStoreyD3 // TypeDefIndex: 3777
{
	// Fields
	internal Helmet h; // 0x10
	internal int newHelmet; // 0x18
	internal int upgradeStage; // 0x1C
	internal int maskType; // 0x20
	internal int camo_type; // 0x24
	internal HelmetController <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100278C0C
	internal void <>m__86(); // 0x10027B5EC
}

// Namespace: 
private sealed class <SetupHelmetCamo>c__AnonStoreyD5 // TypeDefIndex: 3778
{
	// Fields
	internal int newHelmet; // 0x10
	internal int upgradeStage; // 0x14
	internal int maskType; // 0x18
	internal int camo_type; // 0x1C
	internal HelmetController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10027A814
}

// Namespace: 
private sealed class <SetupHelmetCamo>c__AnonStoreyD4 // TypeDefIndex: 3779
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal <SetupHelmetCamo>c__AnonStoreyD5 <>f__ref$213; // 0x18
	internal HelmetController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10027A81C
	internal void <>m__87(); // 0x10027B7D0
}

// Namespace: 
private sealed class <SetupHelmetAero>c__AnonStoreyD7 // TypeDefIndex: 3780
{
	// Fields
	internal int newHelmet; // 0x10
	internal int upgradeStage; // 0x14
	internal int maskType; // 0x18
	internal int camo_type; // 0x1C
	internal HelmetController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10027A9F0
}

// Namespace: 
private sealed class <SetupHelmetAero>c__AnonStoreyD6 // TypeDefIndex: 3781
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal <SetupHelmetAero>c__AnonStoreyD7 <>f__ref$215; // 0x18
	internal HelmetController <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10027A9F8
	internal void <>m__88(); // 0x10027B6F4
}

// Namespace: 
public class HelmetsControllerTester : MonoBehaviour // TypeDefIndex: 3782
{
	// Fields
	public HelmetController hc; // 0x18
	public int type; // 0x20
	public int upgrade; // 0x24
	public int mask; // 0x28
	public int camo_type; // 0x2C

	// Methods
	public void .ctor(); // 0x1002822C0
	private void Start(); // 0x1002822C8
	private void OnClick(); // 0x10028236C
}

// Namespace: 
public class HelpDialog : DialogBasic // TypeDefIndex: 3783
{
	// Fields
	public tk2dTextMesh header; // 0x98
	public tk2dTextMesh subheader; // 0xA0
	public tk2dUIItem getButton; // 0xA8
	public tk2dTextMesh getButtonLabel; // 0xB0
	public GameObject cup; // 0xB8
	public tk2dSprite cupIcon; // 0xC0
	public tk2dTextMesh cupText; // 0xC8
	public GameObject rank; // 0xD0
	public tk2dSprite rankIcon; // 0xD8
	public tk2dTextMesh rankText; // 0xE0
	public GameObject details; // 0xE8
	public GameObject hw; // 0xF0
	public tk2dSprite hwIcon; // 0xF8
	public tk2dTextMesh hwText; // 0x100
	public bool platoon; // 0x108
	public string platoon_weapon; // 0x110
	private static Func`2<int, string> <>f__am$cache10; // 0x0

	// Methods
	public void .ctor(); // 0x100282394
	private void Awake(); // 0x1002823FC
	public void SetHeader(string text); // 0x1002824F4
	public void SetSubHeader(string text); // 0x100282568
	public void SetGetButtonText(string text); // 0x1002825DC
	public void SetCup(int requiredCup); // 0x100282650
	public void SetRankpoints(long currentRankpoints, long requiredRankpoints); // 0x1002827D8
	public void SetWeapon(int[] weapons, optional int platoon_type); // 0x1002829C8
	private void RePos(GameObject item, float offset, float h); // 0x100282C80
	public override void Show(); // 0x100282D68
	private void <Awake>m__89(); // 0x100282F84
	private static string <SetWeapon>m__8A(int id); // 0x100283004
}

// Namespace: 
public class HelpDialogContent : MonoBehaviour // TypeDefIndex: 3784
{
	// Fields
	public tk2dTextMesh header; // 0x18
	public tk2dTextMesh subheader; // 0x20
	public tk2dUIItem getButton; // 0x28
	public tk2dTextMesh getButtonLabel; // 0x30
	public GameObject cup; // 0x38
	public tk2dSprite cupIcon; // 0x40
	public tk2dTextMesh cupText; // 0x48
	public GameObject rank; // 0x50
	public tk2dSprite rankIcon; // 0x58
	public tk2dTextMesh rankText; // 0x60
	public GameObject details; // 0x68
	public GameObject hw; // 0x70
	public tk2dSprite hwIcon; // 0x78
	public tk2dTextMesh hwText; // 0x80
	public bool platoon; // 0x88
	public tk2dSlicedSprite dialogBorder; // 0x90
	private Vector2 defaultSize; // 0x98
	private static Func`2<int, string> <>f__am$cache11; // 0x0

	// Methods
	public void .ctor(); // 0x1002830B0
	private void Awake(); // 0x1002830B8
	private void Hide(); // 0x1002831C8
	public void SetHeader(string text); // 0x1002831CC
	public void SetSubHeader(string text); // 0x100283240
	public void SetGetButtonText(string text); // 0x1002832B4
	public void SetCup(int requiredCup); // 0x100283328
	public void SetRankpoints(long currentRankpoints, long requiredRankpoints); // 0x1002834B0
	public void SetWeapon(int[] weapons, optional int platoon_type); // 0x1002836A0
	private void RePos(GameObject item, float offset, float h); // 0x100283958
	public void Show(); // 0x100283A40
	private void <Awake>m__8B(); // 0x100283C68
	private static string <SetWeapon>m__8C(int id); // 0x100283CB8
}

// Namespace: 
public class HitDirectionMarker : MonoBehaviour // TypeDefIndex: 3785
{
	// Fields
	public Camera mainCamera; // 0x18
	public tk2dCamera guicamera; // 0x20
	public GameObject directionMarkerPrefab; // 0x28
	public float hideTime; // 0x30
	private float velo; // 0x34
	private List`1<GameObject> markers; // 0x38

	// Methods
	public void .ctor(); // 0x100283E64
	public void ShowMarker(Vector3 target); // 0x100283EDC
	public void OnDisable(); // 0x100283F78
	private IEnumerator DoMarkerAnimation(Vector3 target); // 0x1002841C0
	private Vector2 WorldToScreenPointProjected(Camera camera, Vector3 worldPos); // 0x100284268
	private void Start(); // 0x100284480
}

// Namespace: 
private sealed class <DoMarkerAnimation>c__Iterator35 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3786
{
	// Fields
	internal GameObject <marker>__0; // 0x10
	internal Vector3 target; // 0x18
	internal Quaternion <rotate>__1; // 0x24
	internal tk2dSprite <markerSprite>__2; // 0x38
	internal Color <c>__3; // 0x40
	internal float <t>__4; // 0x50
	internal int $PC; // 0x54
	internal object $current; // 0x58
	internal Vector3 <$>target; // 0x60
	internal HitDirectionMarker <>f__this; // 0x70

	// Methods
	public void .ctor(); // 0x100284260
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100284484
	private object System.Collections.IEnumerator.get_Current(); // 0x10028448C
	public bool MoveNext(); // 0x100284494
	public void Dispose(); // 0x10028496C
	public void Reset(); // 0x100284978
}

// Namespace: 
public class HitMarkerPositionControl : MonoBehaviour // TypeDefIndex: 3787
{
	// Fields
	public Transform crosshair; // 0x18
	private Vector3 oldPos; // 0x20

	// Methods
	public void .ctor(); // 0x1002849CC
	private void Update(); // 0x1002849D4
}

// Namespace: 
public class HudBridge : MonoBehaviour // TypeDefIndex: 3788
{
	// Fields
	private static HudBridge _instance; // 0x0
	public GameObject areaMarkerNumber; // 0x18
	private tk2dTextMesh visionCountMesh; // 0x20
	private tk2dTextMesh bulletCountMeshCustom; // 0x28
	private tk2dTextMesh timerMesh; // 0x30
	private Animator timerAnimator; // 0x38
	public tk2dSlicedSprite timerBack; // 0x40
	private GameObject gameUI; // 0x48
	private GameObject warNodes; // 0x50
	public GameScope scope; // 0x58
	public GameObject hitMarker; // 0x60
	public bool scopeActive; // 0x68

	// Methods
	public void .ctor(); // 0x100284BE8
	public static HudBridge get_instance(); // 0x100284B98
	public static void AnchorsSaveArea(tk2dCameraAnchor[] anchors); // 0x100284BF0
	private void Awake(); // 0x100284DCC
	private void OnDestroy(); // 0x100284E74
	private void Start(); // 0x100284EC4
	private void LoadScope(string name); // 0x1002850D8
	private void Update(); // 0x10028523C
	public void UpdateTimerMesh(DateTime dateTime); // 0x100285240
	public void AnimateTimerMesh(string color); // 0x100285368
	public void StopAnimateTimerMesh(); // 0x1002855C8
	public void UpdateVisionMesh(int count); // 0x1002856C0
	public void UpdateBulletsMesh(int bulletCount); // 0x10028570C
	public void UpdateZoom(float value, float textValue); // 0x100285804
	public void OnScopeSwitch(bool isOn); // 0x100285A38
	public void HideGameUI(); // 0x100285A9C
	public void ShowGameUI(); // 0x100285B10
}

// Namespace: 
private sealed class <Start>c__AnonStoreyD8 // TypeDefIndex: 3789
{
	// Fields
	internal bool smart; // 0x10

	// Methods
	public void .ctor(); // 0x1002850D0
	internal void <>m__8D(WeaponPart arg1, WeaponPartStage arg2); // 0x100285B80
}

// Namespace: 
public class HudSkin : MonoBehaviour // TypeDefIndex: 3790
{
	// Fields
	public static Skin current; // 0x0
	public Skin skin; // 0x18

	// Methods
	public void .ctor(); // 0x100285BA8
	private static void .cctor(); // 0x100285BB0
	private void Awake(); // 0x100285BB4
	private void Start(); // 0x100285BB8
	private void Update(); // 0x100285BBC
}

// Namespace: 
public sealed class Skin : Enum // TypeDefIndex: 3791
{
	// Fields
	public int value__; // 0x10
	public const Skin standart = 0; // 0x0
	public const Skin custom = 1; // 0x0

}

// Namespace: 
public class HudSkinRender : HudSkin // TypeDefIndex: 3792
{
	// Methods
	public void .ctor(); // 0x100285CB8
	private void Start(); // 0x100285D20
	private void Update(); // 0x100285DC8
}

// Namespace: 
public class HudSkinText : MonoBehaviour // TypeDefIndex: 3793
{
	// Fields
	private StateChecker`1<Skin> checkerSkin; // 0x18

	// Methods
	public void .ctor(); // 0x100285DCC
	private void Start(); // 0x100285DD4
	private void Update(); // 0x100285F84
	private void SetColor(); // 0x100285E78
}

// Namespace: 
public class HudSkinTextVision : MonoBehaviour // TypeDefIndex: 3794
{
	// Methods
	public void .ctor(); // 0x100286030
	private void Update(); // 0x100286038
}

// Namespace: 
public class BlurEffect : MonoBehaviour // TypeDefIndex: 3795
{
	// Fields
	public int iterations; // 0x18
	public float blurSpread; // 0x1C
	public Shader blurShader; // 0x20
	private static Material m_Material; // 0x0

	// Methods
	public void .ctor(); // 0x10006D848
	private static void .cctor(); // 0x10006D860
	protected Material get_material(); // 0x10006D864
	protected void OnDisable(); // 0x10006D99C
	protected void Start(); // 0x10006DA98
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration); // 0x10006DB60
	private void DownSample4x(RenderTexture source, RenderTexture dest); // 0x10006DD04
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10006DE7C
}

// Namespace: 
public class ColorCorrectionEffect : ImageEffectBase // TypeDefIndex: 3796
{
	// Fields
	public Texture textureRamp; // 0x28

	// Methods
	public void .ctor(); // 0x1001FD874
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1001FD87C
}

// Namespace: 
public class ContrastStretchEffect : MonoBehaviour // TypeDefIndex: 3797
{
	// Fields
	public float adaptationSpeed; // 0x18
	public float limitMinimum; // 0x1C
	public float limitMaximum; // 0x20
	private RenderTexture[] adaptRenderTex; // 0x28
	private int curAdaptIndex; // 0x30
	public Shader shaderLum; // 0x38
	private Material m_materialLum; // 0x40
	public Shader shaderReduce; // 0x48
	private Material m_materialReduce; // 0x50
	public Shader shaderAdapt; // 0x58
	private Material m_materialAdapt; // 0x60
	public Shader shaderApply; // 0x68
	private Material m_materialApply; // 0x70

	// Methods
	public void .ctor(); // 0x10020D3BC
	protected Material get_materialLum(); // 0x10020D440
	protected Material get_materialReduce(); // 0x10020D508
	protected Material get_materialAdapt(); // 0x10020D5D0
	protected Material get_materialApply(); // 0x10020D698
	private void Start(); // 0x10020D760
	private void OnEnable(); // 0x10020D7F8
	private void OnDisable(); // 0x10020D954
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10020DBAC
	private void CalculateAdaptation(Texture curTexture); // 0x10020DDAC
}

// Namespace: 
public class GlowEffect : MonoBehaviour // TypeDefIndex: 3798
{
	// Fields
	public float glowIntensity; // 0x18
	public int blurIterations; // 0x1C
	public float blurSpread; // 0x20
	public Color glowTint; // 0x24
	public Shader compositeShader; // 0x38
	private Material m_CompositeMaterial; // 0x40
	public Shader blurShader; // 0x48
	private Material m_BlurMaterial; // 0x50
	public Shader downsampleShader; // 0x58
	private Material m_DownsampleMaterial; // 0x60

	// Methods
	public void .ctor(); // 0x100268F44
	protected Material get_compositeMaterial(); // 0x100268FB8
	protected Material get_blurMaterial(); // 0x100269080
	protected Material get_downsampleMaterial(); // 0x100269148
	protected void OnDisable(); // 0x100269210
	protected void Start(); // 0x100269380
	public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration); // 0x1002694F0
	private void DownSample4x(RenderTexture source, RenderTexture dest); // 0x100269694
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10026972C
	public void BlitGlow(RenderTexture source, RenderTexture dest); // 0x100269988
}

// Namespace: 
public class GrayscaleEffect : ImageEffectBase // TypeDefIndex: 3799
{
	// Fields
	public Texture textureRamp; // 0x28
	public float rampOffset; // 0x30

	// Methods
	public void .ctor(); // 0x10026D730
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10026D738
}

// Namespace: 
public class ImageEffectBase : MonoBehaviour // TypeDefIndex: 3800
{
	// Fields
	public Shader shader; // 0x18
	private Material m_Material; // 0x20

	// Methods
	public void .ctor(); // 0x1002860D8
	protected virtual void Start(); // 0x1002860E0
	protected Material get_material(); // 0x100286198
	protected virtual void OnDisable(); // 0x100286260
}

// Namespace: 
public class ImageEffects // TypeDefIndex: 3801
{
	// Methods
	public void .ctor(); // 0x100286318
	public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius); // 0x100286320
	public static void Blit(RenderTexture source, RenderTexture dest); // 0x100286544
	public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest); // 0x100286550
}

// Namespace: 
public class MotionBlur : ImageEffectBase // TypeDefIndex: 3802
{
	// Fields
	public float blurAmount; // 0x28
	public bool extraBlur; // 0x2C
	private RenderTexture accumTexture; // 0x30

	// Methods
	public void .ctor(); // 0x1000776D0
	protected override void Start(); // 0x1000776E4
	protected override void OnDisable(); // 0x100077730
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1000777AC
}

// Namespace: 
public class NoiseEffect : MonoBehaviour // TypeDefIndex: 3803
{
	// Fields
	public bool monochrome; // 0x18
	private bool rgbFallback; // 0x19
	public float grainIntensityMin; // 0x1C
	public float grainIntensityMax; // 0x20
	public float grainSize; // 0x24
	public Texture grainTexture; // 0x28
	public Shader shaderRGB; // 0x30
	public Shader shaderYUV; // 0x38
	private Material m_MaterialRGB; // 0x40
	private Material m_MaterialYUV; // 0x48

	// Methods
	public void .ctor(); // 0x10007FE48
	public bool isSupported(); // 0x10007FE6C
	protected void Start(); // 0x10007FE88
	protected Material get_material(); // 0x10007FFD8
	protected void OnDisable(); // 0x10008013C
	private void SanitizeParameters(); // 0x100080250
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10008031C
}

// Namespace: 
public class SSAOEffect : MonoBehaviour // TypeDefIndex: 3804
{
	// Fields
	public float m_Radius; // 0x18
	public SSAOSamples m_SampleCount; // 0x1C
	public float m_OcclusionIntensity; // 0x20
	public int m_Blur; // 0x24
	public int m_Downsampling; // 0x28
	public float m_OcclusionAttenuation; // 0x2C
	public float m_MinZ; // 0x30
	public Shader m_SSAOShader; // 0x38
	private Material m_SSAOMaterial; // 0x40
	public Texture2D m_RandomTexture; // 0x48
	private bool m_Supported; // 0x50

	// Methods
	public void .ctor(); // 0x10014A9F0
	private static Material CreateMaterial(Shader shader); // 0x10014AA24
	private static void DestroyMaterial(Material mat); // 0x10014AAD8
	private void OnDisable(); // 0x10014AB7C
	private void Start(); // 0x10014AB84
	private void OnEnable(); // 0x10014AD28
	private void CreateMaterials(); // 0x10014AC68
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10014ADA0
}

// Namespace: 
public sealed class SSAOSamples : Enum // TypeDefIndex: 3805
{
	// Fields
	public int value__; // 0x10
	public const SSAOSamples Low = 0; // 0x0
	public const SSAOSamples Medium = 1; // 0x0
	public const SSAOSamples High = 2; // 0x0

}

// Namespace: 
public class SepiaToneEffect : ImageEffectBase // TypeDefIndex: 3806
{
	// Methods
	public void .ctor(); // 0x1000E5404
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1000E540C
}

// Namespace: 
public class TwirlEffect : ImageEffectBase // TypeDefIndex: 3807
{
	// Fields
	public Vector2 radius; // 0x28
	public float angle; // 0x30
	public Vector2 center; // 0x34

	// Methods
	public void .ctor(); // 0x1001B3D90
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1001B3E0C
}

// Namespace: 
public class VortexEffect : ImageEffectBase // TypeDefIndex: 3808
{
	// Fields
	public Vector2 radius; // 0x28
	public float angle; // 0x30
	public Vector2 center; // 0x34

	// Methods
	public void .ctor(); // 0x1001B7474
	private void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1001B74F0
}

// Namespace: 
public class UIStates : MonoBehaviour // TypeDefIndex: 3809
{
	// Methods
	public void .ctor(); // 0x1001B3E60
	public virtual void SetNormal(); // 0x1001B3E68
	public virtual void SetDisabled(); // 0x1001B3E6C
}

// Namespace: 
public class ImageStates : UIStates // TypeDefIndex: 3810
{
	// Fields
	public string normal; // 0x18
	public string disabled; // 0x20

	// Methods
	public void .ctor(); // 0x10028656C
	private void SetState(string st); // 0x100286574
	public override void SetNormal(); // 0x1002865E4
	public override void SetDisabled(); // 0x1002865EC
}

// Namespace: 
public class InGameVoiceValue : MonoBehaviour // TypeDefIndex: 3811
{
	// Fields
	private static Action`1<bool> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x10028B9FC
	private void Start(); // 0x10028BA04
	private static void <Start>m__8E(bool value); // 0x10028BBB0
}

// Namespace: 
public class InGameWarNodeButton : MonoBehaviour // TypeDefIndex: 3812
{
	// Fields
	public GameObject menu; // 0x18
	public GameObject top_menu; // 0x20
	private GameObject top_menu_inst; // 0x28
	private GameObject menu_inst; // 0x30
	public GameObject on; // 0x38
	public GameObject off; // 0x40
	public GameObject content; // 0x48

	// Methods
	public void .ctor(); // 0x10028BC4C
	private void Start(); // 0x10028BC54
	private void OnDestroy(); // 0x10028C23C
	private void SetShow(); // 0x10028C5A4
	private void SetHide(); // 0x10028C5C4
	private void OnClick(); // 0x10028C5E4
	private void <OnClick>m__8F(); // 0x10028CBE0
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyD9 // TypeDefIndex: 3813
{
	// Fields
	internal MessageGirl01Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x10028CBD8
	internal void <>m__90(); // 0x10028CCA4
}

// Namespace: 
public class InfoAllianceMenu : MonoBehaviour // TypeDefIndex: 3814
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	private float step; // 0x28
	private float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x100286604
	private void Start(); // 0x100286620
	private void OnScroll(tk2dUIScrollableArea area); // 0x100286D50
	private void Update(); // 0x100286D84
	private void OnDownScroll(); // 0x100286E00
	private void OnUpScroll(); // 0x100286E08
}

// Namespace: 
public class Worker // TypeDefIndex: 3815
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x100286D18
}

// Namespace: 
public class InfoMenuNavigateRequest : MonoBehaviour // TypeDefIndex: 3816
{
	// Fields
	public GameObject menu; // 0x18
	public Transform background; // 0x20
	public string backgroundName; // 0x28
	public string LocalizationPrefix; // 0x30
	public string headerIndex; // 0x38
	public MenuNavigator navigator; // 0x40
	private MenuElements requestMenu; // 0x48
	private tk2dUIItem button; // 0x50

	// Methods
	public void .ctor(); // 0x100287AFC
	private void findNavigator(); // 0x100287B04
	private void Start(); // 0x100287C98
	private void OnClick(); // 0x100287E84
}

// Namespace: 
public class InfoSquadMenu : MonoBehaviour // TypeDefIndex: 3817
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	private float step; // 0x28
	private float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x100288788
	private void Start(); // 0x1002887A4
	private void OnScroll(tk2dUIScrollableArea area); // 0x100288ED4
	private void Update(); // 0x100288F08
	private void OnDownScroll(); // 0x100288F84
	private void OnUpScroll(); // 0x100288F8C
}

// Namespace: 
public class Worker // TypeDefIndex: 3818
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x100288E9C
}

// Namespace: 
public class InfoTournamentMenu : MonoBehaviour // TypeDefIndex: 3819
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	private float step; // 0x28
	private float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x100288F98
	private void Start(); // 0x100288FB4
	private void DisplayLocalSchedule(); // 0x1002897B8
	private void OnScroll(tk2dUIScrollableArea area); // 0x10028A918
	private void Update(); // 0x10028A94C
	private void OnDownScroll(); // 0x10028A9C8
	private void OnUpScroll(); // 0x10028A9D0
}

// Namespace: 
public class Worker // TypeDefIndex: 3820
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x100289780
}

// Namespace: 
public class InfoVipMenu : MonoBehaviour // TypeDefIndex: 3821
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	private float step; // 0x28
	private float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x10028A9DC
	private void Start(); // 0x10028A9F8
	private void OnScroll(tk2dUIScrollableArea area); // 0x10028B128
	private void Update(); // 0x10028B15C
	private void OnDownScroll(); // 0x10028B1D8
	private void OnUpScroll(); // 0x10028B1E0
}

// Namespace: 
public class Worker // TypeDefIndex: 3822
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x10028B0F0
}

// Namespace: 
public class InfoWarMenu : MonoBehaviour // TypeDefIndex: 3823
{
	// Fields
	public List`1<Worker> workers; // 0x18
	public tk2dUIScrollableArea scrollablearea; // 0x20
	private float step; // 0x28
	private float speed; // 0x2C
	private bool allowautoscroll; // 0x30
	private float scrollpose; // 0x34

	// Methods
	public void .ctor(); // 0x10028B1EC
	private void Start(); // 0x10028B208
	private void OnScroll(tk2dUIScrollableArea area); // 0x10028B938
	private void Update(); // 0x10028B96C
	private void OnDownScroll(); // 0x10028B9E8
	private void OnUpScroll(); // 0x10028B9F0
}

// Namespace: 
public class Worker // TypeDefIndex: 3824
{
	// Fields
	public string role; // 0x10
	public string name; // 0x18

	// Methods
	public void .ctor(string _role, string _name); // 0x10028B900
}

// Namespace: 
public class ItemTypes : MonoBehaviour // TypeDefIndex: 3825
{
	// Fields
	public Items item; // 0x18

	// Methods
	public void .ctor(); // 0x10028E730
}

// Namespace: 
public abstract class BattleItem`3 // TypeDefIndex: 3826
{
	// Fields
	private const int MODULE = 5; // 0x0
	private const string KEY_SPLIT = "_"; // 0x0
	public string name; // 0x0
	public PurchasingOptions purchasingOptions; // 0x0
	public List`1<T> parts; // 0x0
	public long rankpoints_required; // 0x0
	public int cup_required; // 0x0
	public int rankpoints_bonus; // 0x0
	public int upgradable; // 0x0

	// Methods
	protected void .ctor(); // 0
	public abstract string get_DefaultName(); // 0
	protected abstract string get_DeliveryKey(); // 0
	protected abstract string get_DeliveryKey1(); // 0
	protected abstract string get_DeliveryKey2(); // 0
	protected abstract string get_PartKey(); // 0
	public bool get_IsUpgradable(); // 0
	public bool get_IsUpgradableAndNotActive(); // 0
	public bool get_IsUpgradableAndActive(); // 0
	protected virtual string get_NamePrefix(); // 0
	public virtual string GetLocalizedName(); // 0
	public virtual int GetTotalStage(); // 0
	public void Buy(); // 0
	public void Delivery(); // 0
	public virtual void RecaculateAttributes(); // 0
	public void ScheduleDelivery(Action`2<T, T> ScheduleTask); // 0
	public bool DeliveryCheker(T stage); // 0
	public void CheckDelivery(Action`2<T, T> OnDelivery); // 0
	public void CheckDelivery(Action`2<T, T> OnDelivery, Predicate`1<T> checker); // 0
	public void CheckUpgradesDelivery(Action`2<T, T> OnDelivery); // 0
	public void CheckUpgradesDelivery(T part, Action`2<T, T> OnDelivery); // 0
	public void CheckInstall(Action`2<T, T> OnInstall); // 0
	public void CheckMainMenuDelivery(Action`2<T, T> OnDelivery); // 0
	public string GetKey(T part, int stage); // 0
	public string DeliveryMessage(T part, int stage); // 0
}

// Namespace: 
public abstract class BattleItemPart`2 // TypeDefIndex: 3827
{
	// Fields
	public T part; // 0x0
	public T[] stages; // 0x0
	private static Func`2<T, bool> <>f__am$cache2; // 0x0

	// Methods
	protected void .ctor(); // 0
	public void BuyStage(int stage); // 0
	public void DeliveryStage(int stage); // 0
	public void InstallStage(int stage); // 0
	public T GetActiveStageInPart(); // 0
	public T GetStageInPartForInstall(); // 0
	public T GetNonInstalledStage(); // 0
	public T GetStageInPartForDelivery(); // 0
	public T GetStageInPartForBuy(); // 0
	public T GetLastPurchasedStage(); // 0
	public T GetLastStageInPart(); // 0
	public T GetFirstStageInPart(); // 0
	public T GetStageInPart(int stage); // 0
	public T GetNewStageForPurchase(); // 0
	public T[] GetStagesForPart(); // 0
	public int GetStagesCount(); // 0
	private static bool <GetNonInstalledStage>m__92(T x); // 0
}

// Namespace: 
private sealed class <GetNonInstalledStage>c__AnonStoreyDA // TypeDefIndex: 3828
{
	// Fields
	internal T active; // 0x0

	// Methods
	public void .ctor(); // 0
	internal bool <>m__91(T x); // 0
}

// Namespace: 
public class BattleItemPartStage // TypeDefIndex: 3829
{
	// Fields
	public int stage; // 0x10
	public PurchasingOptions purchasingOptions; // 0x18
	public int cup_required; // 0x20

	// Methods
	public void .ctor(); // 0x100067150
}

// Namespace: 
public class Helmet : BattleItem`3<HelmetPart, HelmetPartType, HelmetPartStage> // TypeDefIndex: 3830
{
	// Fields
	public HelmetAttributes attributes; // 0x40
	public HelmetAttributes baseAttributes; // 0x88
	public HelmetAttributes attributesWithoutCamo; // 0xD0
	public HelmetAttributes attributesWithoutAero; // 0x118
	public HelmetAttributes attributesMax; // 0x160
	public BundleOptions bundleOptions; // 0x1A8
	public int type; // 0x1B0
	public string name; // 0x1B8
	public int camo_type; // 0x1C0
	public int camo_leftuses; // 0x1C4
	public int aero_type; // 0x1C8
	public int aero_leftuses; // 0x1CC
	public int parts_stages_sum; // 0x1D0
	public int def_camo; // 0x1D4
	public int def_camo_battles; // 0x1D8
	public int def_aero; // 0x1DC
	public int def_aero_battles; // 0x1E0
	public int helmet_required; // 0x1E4
	public int mod_required; // 0x1E8
	public int sh_settings; // 0x1EC
	public int scope_zoom; // 0x1F0
	public int adrenaline; // 0x1F4
	public string special; // 0x1F8

	// Methods
	public void .ctor(); // 0x100274658
	public string get_CamoName(); // 0x1002746A8
	public string get_AeroName(); // 0x10027473C
	public string get_DefCamoName(); // 0x1002747D0
	public string get_DefAeroName(); // 0x100274864
	public string Description(); // 0x1002748F8
	public bool IsMaxedOut(); // 0x100274C0C
	public override string get_DefaultName(); // 0x100274E58
	protected override string get_DeliveryKey(); // 0x100274F40
	protected override string get_DeliveryKey1(); // 0x100274F88
	protected override string get_DeliveryKey2(); // 0x100274FD0
	protected override string get_PartKey(); // 0x100275018
	protected override string get_NamePrefix(); // 0x100275060
	public override string GetLocalizedName(); // 0x1002750A8
	public string GetLocalizedNameMaxParam(); // 0x100275140
	public HelmetPart GetPart(HelmetPartType part); // 0x100275358
	public HelmetPartStage GetActiveStage(HelmetPartType part); // 0x100275588
	public bool PartExist(HelmetPartType part); // 0x1002757AC
	public void CaculateMaxAttributes(); // 0x1002759A4
	public override void RecaculateAttributes(); // 0x100275B74
	public bool IsRequirementsMet(); // 0x100275F5C
	public bool IsRequirementsMetAndNotOwned(); // 0x100276484
	public bool IsOwned(); // 0x100276468
	public void UseTunings(int amount); // 0x1002764C0
	public bool ContainsActiveTuning(Tuning tuning); // 0x10027650C
}

// Namespace: 
public struct HelmetAttributes // TypeDefIndex: 3831
{
	// Fields
	public double armor; // 0x10
	public double armorTech; // 0x18
	public double seekpower; // 0x20
	public double seekpowerTech; // 0x28
	public double camouflage; // 0x30
	public double camouflageTech; // 0x38
	public double battery; // 0x40
	public double frequency; // 0x48
	public double frequencyTech; // 0x50

	// Methods
	public void Add(HelmetAttributes a); // 0x100277344
	public void Sub(HelmetAttributes a); // 0x100277404
	public void ApplyTuning(Tuning camo); // 0x100277440
}

// Namespace: 
public class HelmetPart : BattleItemPart`2<HelmetPartType, HelmetPartStage> // TypeDefIndex: 3832
{
	// Methods
	public void .ctor(); // 0x10027BB54
}

// Namespace: 
public sealed class HelmetPartType : Enum // TypeDefIndex: 3833
{
	// Fields
	public int value__; // 0x10
	public const HelmetPartType armor = 0; // 0x0
	public const HelmetPartType battery = 1; // 0x0
	public const HelmetPartType special = 2; // 0x0
	public const HelmetPartType secretiveness = 3; // 0x0
	public const HelmetPartType smart = 4; // 0x0

}

// Namespace: 
public class HelmetPartStage : BattleItemPartStage // TypeDefIndex: 3834
{
	// Fields
	public HelmetAttributes attributes; // 0x28

	// Methods
	public void .ctor(); // 0x10027BBA4
}

// Namespace: 
public class Weapon : BattleItem`3<WeaponPart, WeaponPartType, WeaponPartStage> // TypeDefIndex: 3835
{
	// Fields
	public int type; // 0x3C
	public string name; // 0x40
	public WeaponAttributes attributes; // 0x48
	public WeaponAttributes baseAttributes; // 0x100
	public WeaponAttributes attributesWithoutCamo; // 0x1B8
	public WeaponAttributes attributesWithoutHandling; // 0x270
	public WeaponAttributes attributesMax; // 0x328
	public WeaponBundleOptions bundleOptions; // 0x3E0
	public int camo_type; // 0x3E8
	public int camo_leftuses; // 0x3EC
	public int handling_type; // 0x3F0
	public int handling_leftuses; // 0x3F4
	public int parts_stages_sum; // 0x3F8
	public int def_camo; // 0x3FC
	public int def_camo_battles; // 0x400
	public int def_handling; // 0x404
	public int def_handling_battles; // 0x408
	public int ir_bonus; // 0x40C
	public int stamina_bonus; // 0x410
	public int weapon_required; // 0x414
	public int mod_required; // 0x418
	public int dollars_mod; // 0x41C
	public string special; // 0x420
	public int smart_settings; // 0x428
	public Texture noCamoTexture; // 0x430

	// Methods
	public void .ctor(); // 0x1001C0E70
	public string get_CamoName(); // 0x1001C0EC0
	public string get_HandlingName(); // 0x1001C0F54
	public string get_DefCamoName(); // 0x1001C0FE8
	public string get_DefHandlingName(); // 0x1001C107C
	public string rankpointsBonus(); // 0x1001C1110
	private int totalStage(); // 0x1001C1E50
	public bool IsMaxedOut(); // 0x1001AE34C
	public string GetLocalizedNameMaxParam(); // 0x1001C208C
	protected override string get_NamePrefix(); // 0x1001C22A4
	public string DisplayName(int user_id); // 0x1001C22EC
	public override string get_DefaultName(); // 0x1001C2724
	protected override string get_DeliveryKey(); // 0x1001C2B84
	protected override string get_DeliveryKey1(); // 0x1001C2BCC
	protected override string get_DeliveryKey2(); // 0x1001C2C14
	protected override string get_PartKey(); // 0x1001C2C5C
	public WeaponPart GetPart(WeaponPartType part); // 0x1001C2CA4
	public WeaponPartStage GetActiveStage(WeaponPartType part); // 0x1001C2ED4
	public void CaculateMaxAttributes(); // 0x1001C30F8
	public override void RecaculateAttributes(); // 0x1001C33EC
	public void SetMaterialNoCamo(GameObject obj); // 0x1001C3C08
	public bool get_IsSmart(); // 0x1001C1E1C
	public bool IsRequirementsMet(); // 0x1001C3E34
	public bool IsRequirementsMetAndNotOwned(); // 0x1001C435C
	public bool IsOwned(); // 0x1001C4340
	public void UseTunings(int amount); // 0x1001C4398
	public bool ContainsActiveTuning(Tuning tuning); // 0x1001AE644
	private void <SetMaterialNoCamo>m__93(GameObject go); // 0x1001C43EC
}

// Namespace: 
public sealed class WeaponType : Enum // TypeDefIndex: 3836
{
	// Fields
	public int value__; // 0x10
	public const WeaponType PSG1 = 7; // 0x0
	public const WeaponType M21 = 5; // 0x0
	public const WeaponType ORSIS2 = 17; // 0x0
	public const WeaponType DSR502 = 18; // 0x0
	public const WeaponType TRAC300 = 13; // 0x0
	public const WeaponType TRAC3002 = 19; // 0x0
	public const WeaponType PGM2 = 16; // 0x0
	public const WeaponType PGM3 = 20; // 0x0
	public const WeaponType ORSISWE = 21; // 0x0
	public const WeaponType DSR50WE = 22; // 0x0
	public const WeaponType TRAC300WE = 23; // 0x0
	public const WeaponType ORSISWE2 = 24; // 0x0
	public const WeaponType DSR50WE2 = 25; // 0x0
	public const WeaponType PGM2WE = 26; // 0x0
	public const WeaponType PGM2WE2 = 27; // 0x0

}

// Namespace: 
public struct WeaponAttributes // TypeDefIndex: 3837
{
	// Fields
	public double damage; // 0x10
	public double speed; // 0x18
	public double zoom; // 0x20
	public double stability; // 0x28
	public double amount; // 0x30
	public double zoomFovMin; // 0x38
	public double zoomFovMax; // 0x40
	public double zoomNoiseRadiusX; // 0x48
	public double zoomNoiseRadiusY; // 0x50
	public double zoomNoiseSpeed; // 0x58
	public double zoomNoiseRotateSpeed; // 0x60
	public double shootStun; // 0x68
	public double shootStunOutSpeed; // 0x70
	public double shootStunInSpeed; // 0x78
	public double shootPower; // 0x80
	public double shootPowerOutSpeed; // 0x88
	public double shootPowerInSpeed; // 0x90
	public double bulletSpeed; // 0x98
	public double fireSpeed; // 0xA0
	public double reloadSpeed; // 0xA8
	public double zoomInSpeed; // 0xB0
	public double armor; // 0xB8
	public double FOVSpeed; // 0xC0

	// Methods
	public void Add(WeaponAttributes a); // 0x1001C8F50
	public void Sub(WeaponAttributes a); // 0x1001C90D4
	public void ApplyTuning(Tuning camo); // 0x1001C9110
}

// Namespace: 
public class WeaponPart : BattleItemPart`2<WeaponPartType, WeaponPartStage> // TypeDefIndex: 3838
{
	// Methods
	public void .ctor(); // 0x1001CA8C4
}

// Namespace: 
public sealed class WeaponPartType : Enum // TypeDefIndex: 3839
{
	// Fields
	public int value__; // 0x10
	public const WeaponPartType buttstock = 0; // 0x0
	public const WeaponPartType sight = 1; // 0x0
	public const WeaponPartType silencer = 2; // 0x0
	public const WeaponPartType barrel = 3; // 0x0
	public const WeaponPartType smart = 4; // 0x0
	public const WeaponPartType magazine = 5; // 0x0
	public const WeaponPartType bipod = 6; // 0x0
	public const WeaponPartType bullets = 7; // 0x0
	public const WeaponPartType trigger = 8; // 0x0

}

// Namespace: 
public class WeaponPartStage : BattleItemPartStage // TypeDefIndex: 3840
{
	// Fields
	public WeaponAttributes attributes; // 0x28

	// Methods
	public void .ctor(); // 0x1001CA914
}

// Namespace: 
public class LanguageElement : MonoBehaviour // TypeDefIndex: 3841
{
	// Fields
	public Button button; // 0x18
	public Language language; // 0x20
	public Action`1<Language> OnSelect; // 0x28

	// Methods
	public void .ctor(); // 0x10028E738
	private void Start(); // 0x10028E740
	private void OnButton(); // 0x10028E898
	private void OnDestroy(); // 0x10028E8FC
}

// Namespace: 
public class LanguageSelectController : GUISelectorBase`1<Language> // TypeDefIndex: 3842
{
	// Methods
	public void .ctor(); // 0x10028EA5C
	protected override void OnStart(); // 0x10028EAAC
	protected override int OnCount(); // 0x10028ECC0
	protected override GameObject OnCell(int i); // 0x10028ED3C
	private void OnSelectItem(Language lang); // 0x10028EFD0
	private void setCurrent(string val); // 0x10028EB20
}

// Namespace: 
private sealed class <setCurrent>c__AnonStoreyDB // TypeDefIndex: 3843
{
	// Fields
	internal string val; // 0x10

	// Methods
	public void .ctor(); // 0x10028F1B4
	internal bool <>m__94(Language r); // 0x10028F1BC
}

// Namespace: 
public class Languages : MonoBehaviour // TypeDefIndex: 3844
{
	// Fields
	public string language; // 0x18

	// Methods
	public void .ctor(); // 0x10028EA54
}

// Namespace: 
public class LoadGameButton : MonoBehaviour // TypeDefIndex: 3845
{
	// Fields
	public static string a; // 0x0
	public string map; // 0x18
	public BattleMode type; // 0x20
	public MenuStamina menuStamina; // 0x28
	private tk2dUIItem btn; // 0x30
	private bool loadstarted; // 0x38

	// Methods
	public void .ctor(); // 0x10028F53C
	private static void .cctor(); // 0x10028F544
	private void Start(); // 0x10028F5C0
	private void LoadLevel(); // 0x10028F6E8
	private IEnumerator load(); // 0x10028FC50
}

// Namespace: 
private sealed class <load>c__Iterator36 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3846
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal LoadGameButton <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10028FCBC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10028FCC4
	private object System.Collections.IEnumerator.get_Current(); // 0x10028FCCC
	public bool MoveNext(); // 0x10028FCD4
	public void Dispose(); // 0x10028FF38
	public void Reset(); // 0x10028FF44
}

// Namespace: 
public class LoadGameNodeButton : MonoBehaviour // TypeDefIndex: 3847
{
	// Fields
	public int stamina_cost; // 0x18
	public int node_id; // 0x1C
	public Action`1<int> OnNodeClick; // 0x20
	private tk2dUIItem btn; // 0x28
	public tk2dTextMesh timer; // 0x30
	public tk2dTextMesh PlayersBlue; // 0x38
	public tk2dTextMesh PlayersRed; // 0x40
	public tk2dSprite iconCircle; // 0x48
	public tk2dSprite iconPlay; // 0x50
	public tk2dSprite iconLock; // 0x58
	public tk2dSprite iconCooldown; // 0x60
	public tk2dSprite iconFlag; // 0x68
	public tk2dSlicedSprite lineTeamBlue; // 0x70
	public tk2dSlicedSprite lineTeamRed; // 0x78

	// Methods
	public void .ctor(); // 0x10028FF98
	private void Start(); // 0x10028FFA0
	private void OnClick(); // 0x100290048
}

// Namespace: 
public class LoadLevelButton : MonoBehaviour // TypeDefIndex: 3848
{
	// Fields
	public string levelName; // 0x18
	private tk2dUIItem btn; // 0x20

	// Methods
	public void .ctor(); // 0x1002925B8
	private void Start(); // 0x1002925C0
	private void LoadLevel(); // 0x100292668
}

// Namespace: 
public class LocalizationTextInput : MonoBehaviour // TypeDefIndex: 3849
{
	// Fields
	public string emptyWordIndex; // 0x18
	private tk2dUITextInput input; // 0x20

	// Methods
	public void .ctor(); // 0x1002954F0
	private void Awake(); // 0x100295568
	private void SetWord(); // 0x1002956AC
	private void OnRefresh(); // 0x1002957C4
	private void OnDestroy(); // 0x1002957C8
}

// Namespace: 
public class LocalizationTextMesh : MonoBehaviour // TypeDefIndex: 3850
{
	// Fields
	public string wordIndex; // 0x18
	public string languageOverride; // 0x20
	protected tk2dTextMesh textMesh; // 0x28

	// Methods
	public void .ctor(); // 0x100295904
	private void Start(); // 0x10029597C
	protected virtual void SetWord(); // 0x100295ADC
	public void OnRefresh(); // 0x100295C1C
	public void setWordIndex(string index); // 0x100295C68
	private void OnDestroy(); // 0x100295CB8
}

// Namespace: 
public class LocalizationTextMeshWithArgs : LocalizationTextMesh // TypeDefIndex: 3851
{
	// Fields
	private object[] m_args; // 0x30

	// Methods
	public void .ctor(); // 0x100295DF4
	public void set_args(object[] value); // 0x100295DF8
	public void SetWordIndex(string index, object[] args); // 0x100295E48
	protected override void SetWord(); // 0x100295E9C
}

// Namespace: 
public class LocalizationTextMeshWithCountry : LocalizationTextMesh // TypeDefIndex: 3852
{
	// Methods
	public void .ctor(); // 0x100295FC0
	protected override void SetWord(); // 0x100295FC4
}

// Namespace: 
public class LockBtnForHelmetNone : MonoBehaviour // TypeDefIndex: 3853
{
	// Fields
	public GameObject lockBtn; // 0x18
	public tk2dSprite icon; // 0x20
	public tk2dTextMesh label; // 0x28
	public tk2dSlicedSprite fill; // 0x30
	public bool isPaintBtn; // 0x38
	private MenuBottomLockBtn lockBtnComp; // 0x40

	// Methods
	public void .ctor(); // 0x100296208
	private void Update(); // 0x100296210
}

// Namespace: 
public class LogCallback : MonoBehaviour // TypeDefIndex: 3854
{
	// Fields
	public static LogCallback Instance; // 0x0
	private static string prev_st; // 0x8

	// Methods
	public void .ctor(); // 0x1002969B8
	private void Awake(); // 0x1002969C0
	private void Handler(string message, string stackTrace, LogType type); // 0x100296A88
	public void Trace(string message, string stack); // 0x100296D68
}

// Namespace: 
public class DeliveryNotificator : MonoBehaviour // TypeDefIndex: 3855
{
	// Fields
	public const int DELIVERY_SCHEDULED = 2; // 0x0
	public const int DELIVERY_SHOWED = 1; // 0x0
	private Dictionary`2<string, Timer> m_Timers; // 0x18
	private static DeliveryNotificator m_Instance; // 0x0
	private Action`1<Items> m_ItemDelivered; // 0x20
	public Action OnAchievementGetReward; // 0x28

	// Methods
	public void .ctor(); // 0x100220560
	public void add_OnItemDelivered(Action`1<Items> value); // 0x10021FA68
	public void remove_OnItemDelivered(Action`1<Items> value); // 0x10021FCF0
	public static DeliveryNotificator get_Instance(); // 0x10021F924
	private void OnAchievementReward(int id); // 0x100220568
	private void Start(); // 0x10022057C
	public void RefreshDeliveryLabels(); // 0x10022099C
	public void Check(); // 0x100220A30
	private void OnPostPartBuyed(int weapontypeint, int weaponpartint, int stage); // 0x100221450
	private void OnPartDelivered(int weapontypeint, int weaponpartint, int stage); // 0x100221454
	private void OnWeaponPartDelivered(int type, WeaponPart part, BattleItemPartStage stage); // 0x10022145C
	private void OnHelmetPartDelivered(int type, HelmetPart part, BattleItemPartStage stage); // 0x100221538
	private void ScheduleDelivery(); // 0x100220F6C
	private void CheckDelivery(bool showMessage); // 0x100220A58
	private void ShowDeliveryMessage(string key, string message, bool showMessage, Items item); // 0x10022163C
	public static bool IsInstantiated(); // 0x10021FC70
	private void OnDestroy(); // 0x1002217E0
}

// Namespace: 
private sealed class <ScheduleDelivery>c__AnonStoreyDC // TypeDefIndex: 3856
{
	// Fields
	internal Weapon w; // 0x10
	internal DeliveryNotificator <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100221614
	internal void <>m__95(WeaponPart part, WeaponPartStage stage); // 0x100222100
}

// Namespace: 
private sealed class <ScheduleDelivery>c__AnonStoreyDD // TypeDefIndex: 3857
{
	// Fields
	internal WeaponPart part; // 0x10
	internal WeaponPartStage stage; // 0x18
	internal <ScheduleDelivery>c__AnonStoreyDC <>f__ref$220; // 0x20

	// Methods
	public void .ctor(); // 0x1002222DC
	internal void <>m__99(); // 0x1002222E4
}

// Namespace: 
private sealed class <ScheduleDelivery>c__AnonStoreyDE // TypeDefIndex: 3858
{
	// Fields
	internal Helmet h; // 0x10
	internal DeliveryNotificator <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10022161C
	internal void <>m__96(HelmetPart part, HelmetPartStage stage); // 0x1002223E4
}

// Namespace: 
private sealed class <ScheduleDelivery>c__AnonStoreyDF // TypeDefIndex: 3859
{
	// Fields
	internal HelmetPart part; // 0x10
	internal HelmetPartStage stage; // 0x18
	internal <ScheduleDelivery>c__AnonStoreyDE <>f__ref$222; // 0x20

	// Methods
	public void .ctor(); // 0x1002225C0
	internal void <>m__9A(); // 0x1002225C8
}

// Namespace: 
private sealed class <CheckDelivery>c__AnonStoreyE1 // TypeDefIndex: 3860
{
	// Fields
	internal bool showMessage; // 0x10
	internal DeliveryNotificator <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100221624
}

// Namespace: 
private sealed class <CheckDelivery>c__AnonStoreyE0 // TypeDefIndex: 3861
{
	// Fields
	internal Weapon w; // 0x10
	internal <CheckDelivery>c__AnonStoreyE1 <>f__ref$225; // 0x18
	internal DeliveryNotificator <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10022162C
	internal void <>m__97(WeaponPart part, WeaponPartStage stage); // 0x100221E30
}

// Namespace: 
private sealed class <CheckDelivery>c__AnonStoreyE2 // TypeDefIndex: 3862
{
	// Fields
	internal Helmet h; // 0x10
	internal <CheckDelivery>c__AnonStoreyE1 <>f__ref$225; // 0x18
	internal DeliveryNotificator <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100221634
	internal void <>m__98(HelmetPart part, HelmetPartStage stage); // 0x100221F98
}

// Namespace: 
public class ItemOpenedNotificator : MonoBehaviour // TypeDefIndex: 3863
{
	// Fields
	private const string ITEM_OPEN_KEY = "ITEM_OPEN_"; // 0x0
	private long m_oldRankPointValue; // 0x18

	// Methods
	public void .ctor(); // 0x10028CFD4
	public static bool WeaponBeigeShow(Weapon weapon); // 0x10028CFDC
	public static void WeaponBeigeHide(Weapon weapon); // 0x10028D104
	public static bool HelmetBeigeShow(Helmet helmet); // 0x10028D1E0
	public static void HelmetBeigeHide(Helmet helmet); // 0x10028D308
	public static bool TuningBeigeShow(Tuning tuning); // 0x10028D3E4
	public static void TuningBeigeHide(Tuning tuning); // 0x10028D4EC
	public static void NewWeaponOpen(Weapon weapon); // 0x10028D5A8
	public static void NewHelmetOpen(Helmet helmet); // 0x10028D66C
	public static void NewTuningOpen(Tuning tuning); // 0x10028D730
	private void Start(); // 0x10028D7D4
	private void OnDestroy(); // 0x10028D92C
	private void OnRankpointsUp(Reward reward); // 0x10028DA84
	private bool HasFlag(OPEN_NEW_ITEM variable, OPEN_NEW_ITEM value); // 0x10028E724
	private void CheckWeapons(); // 0x10028DB0C
	private void CheckHelmets(); // 0x10028DF1C
	private void CheckCamo(); // 0x10028E32C
}

// Namespace: 
public sealed class OPEN_NEW_ITEM : Enum // TypeDefIndex: 3864
{
	// Fields
	public int value__; // 0x10
	public const OPEN_NEW_ITEM UNDEFINED = 0; // 0x0
	public const OPEN_NEW_ITEM NEW = 1; // 0x0
	public const OPEN_NEW_ITEM SHOWED_ALERT = 2; // 0x0
	public const OPEN_NEW_ITEM BEIGE_SHOWED = 4; // 0x0

}

// Namespace: 
public class SmartHelmet : MonoBehaviour // TypeDefIndex: 3865
{
	// Fields
	public CheckBox auto_ir; // 0x18
	public CheckBox auto_bullet; // 0x20
	public CheckBox auto_location; // 0x28
	public CheckBox auto_adrenaline; // 0x30
	public tk2dUIScrollbar bar; // 0x38
	public tk2dTextMesh zoomVal; // 0x40
	private RangeAttribute right; // 0x48

	// Methods
	public void .ctor(); // 0x100101F24
	public static Settings get_settings(); // 0x100101F98
	public static bool CanUse(Helmet helmet, int stage); // 0x100102138
	private float Normalize(float min, float max, float val); // 0x100102180
	private void UpdateZoom(); // 0x100102190
	private void Start(); // 0x1001023AC
	private void OnEnable(); // 0x10010244C
	private void OnDisable(); // 0x100102718
	private bool OnGoBack(MenuElements e); // 0x100102840
	private void OnSave(); // 0x100102870
	private void <Start>m__9B(tk2dUIScrollbar obj); // 0x100102B34
}

// Namespace: 
public class Settings // TypeDefIndex: 3866
{
	// Fields
	public int adrenaline; // 0x10
	public int scope_zoom; // 0x14
	public bool auto_ir; // 0x18
	public bool auto_bullet; // 0x19
	public bool auto_location; // 0x1A
	public bool auto_adrenaline; // 0x1B
	public static int SH_AUTO_IR; // 0x0
	public static int SH_AUTO_LOCATION; // 0x4
	public static int SH_AUTO_BULLET; // 0x8
	public static int SH_AUTO_ADRENALINE; // 0xC

	// Methods
	public void .ctor(Helmet helmet); // 0x100102024
	public void .ctor(); // 0x100102A40
	private static void .cctor(); // 0x100102C68
	public int GetSHSettings(); // 0x100102A48
	public ISFSObject Get(); // 0x100102CCC
}

// Namespace: 
public class Timer : MonoBehaviour // TypeDefIndex: 3867
{
	// Fields
	private static uint m_Index; // 0x0
	private float m_Time; // 0x18
	private Action OnTimer; // 0x20

	// Methods
	public void .ctor(); // 0x1001511A8
	public static Timer Create(float time, Action onTimer); // 0x1001511B0
	public void Start(); // 0x1001512D8
	public void Stop(); // 0x100151374
	public void Kill(); // 0x100151400
	private void <Start>m__9C(); // 0x1001514C0
}

// Namespace: 
public class LogoAnimation : MonoBehaviour // TypeDefIndex: 3868
{
	// Fields
	public OnReadyDeligate OnReady; // 0x18
	public MotionBlur motionBlur; // 0x20
	public Transform loading; // 0x28
	public Vector3 loadingLocalPosition; // 0x30
	public bool showLoading; // 0x3C
	public float showSpeed; // 0x40
	public tk2dSlicedSprite loadingBg; // 0x48
	public tk2dSlicedSprite loadingBar; // 0x50
	public tk2dTextMesh loadingLabel; // 0x58
	public GUItk2dSpriteColor[] bgColorComponents; // 0x60
	public Color bgColor; // 0x68
	public tk2dCameraAnchor anchor; // 0x78
	public bool twitch; // 0x80
	public float twitchTime; // 0x84
	public float twitchValue; // 0x88
	public float twitchDamping; // 0x8C
	private float twitchValue_; // 0x90
	private float time_; // 0x94
	private bool twitch_; // 0x98
	private bool showLoading_; // 0x99
	private Vector2 twitchVector; // 0x9C
	private float[] velo; // 0xA8
	private tk2dUIProgressBar progressBar; // 0xB0

	// Methods
	public void .ctor(); // 0x100296D70
	private void Awake(); // 0x100296DFC
	public void TwitchEvent(AnimationEvent evt); // 0x100296FA4
	public void AnimationEndEvent(AnimationEvent evt); // 0x100296FB0
	public void ShowLoadingBar(AnimationEvent evt); // 0x100296FD0
	private void SetBackgroundColors(); // 0x100296F30
	private void Update(); // 0x100296FDC
	private IEnumerator ProgressDegreesAnimation(); // 0x1002978FC
}

// Namespace: 
public sealed class OnReadyDeligate : MulticastDelegate // TypeDefIndex: 3869
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100297DD4
	public virtual void Invoke(); // 0x100297CE4
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100297DF0
	public virtual void EndInvoke(IAsyncResult result); // 0x100297E50
}

// Namespace: 
private sealed class <ProgressDegreesAnimation>c__Iterator37 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3870
{
	// Fields
	internal float <speed>__0; // 0x10
	internal float <t>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal LogoAnimation <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100297968
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100297970
	private object System.Collections.IEnumerator.get_Current(); // 0x100297978
	public bool MoveNext(); // 0x100297980
	public void Dispose(); // 0x100297D74
	public void Reset(); // 0x100297D80
}

// Namespace: 
public class LookAt : MonoBehaviour // TypeDefIndex: 3871
{
	// Fields
	public Transform target; // 0x18

	// Methods
	public void .ctor(); // 0x100297E5C
	private void Update(); // 0x100297E64
}

// Namespace: 
public class MainMenuElements : MonoBehaviour // TypeDefIndex: 3872
{
	// Fields
	private const float DELIVERY_CHECK_DELAY = 1; // 0x0
	private static Action <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x100297EAC
	private void OnEnable(); // 0x100297EB4
	private static void <OnEnable>m__9D(); // 0x100297F70
}

// Namespace: 
public class BonusData // TypeDefIndex: 3873
{
	// Fields
	private MapBonusType m_Type; // 0x10
	private int m_Count; // 0x14
	private float m_RewardAmount; // 0x18

	// Methods
	public void .ctor(MapBonusType type, int count, float rewardAmount); // 0x10006DFB0
	public MapBonusType get_BonusType(); // 0x10006DFF8
	private void set_BonusType(MapBonusType value); // 0x10006E000
	public int get_Count(); // 0x10006E008
	public float get_RewardAmount(); // 0x10006E010
}

// Namespace: 
public class MapBonus : MonoBehaviour // TypeDefIndex: 3874
{
	// Fields
	private static Vector3 DESTROY_EFFECT_OFFSET; // 0x0
	public int spawnid; // 0x18
	public Transform shootpoint; // 0x20
	private MapBonusType m_BonusType; // 0x28
	private ParticleSystem m_DestroyEffect; // 0x30
	private Action`1<GameObject> OnBonusHit; // 0x38
	private Action OnBonusDestroy; // 0x40

	// Methods
	public void .ctor(); // 0x100298B60
	private static void .cctor(); // 0x100298B68
	public void add_OnBonusHit(Action`1<GameObject> value); // 0x100298BEC
	public void remove_OnBonusHit(Action`1<GameObject> value); // 0x100298CCC
	public void add_OnBonusDestroy(Action value); // 0x100298DAC
	public void remove_OnBonusDestroy(Action value); // 0x100298E8C
	public MapBonusType get_BonusType(); // 0x100298F6C
	public void set_BonusType(MapBonusType value); // 0x100298F74
	public void Hit(GameObject go); // 0x100298F7C
	private void OnDestroy(); // 0x1002992E4
	public void PlayDestroyEffect(); // 0x1002990B8
}

// Namespace: 
public sealed class MapBonusType : Enum // TypeDefIndex: 3875
{
	// Fields
	public int value__; // 0x10
	public const MapBonusType Stamina = 0; // 0x0
	public const MapBonusType Dollars01 = 1; // 0x0
	public const MapBonusType Dollars02 = 2; // 0x0
	public const MapBonusType Crystals = 3; // 0x0
	public const MapBonusType Health = 4; // 0x0
	public const MapBonusType Battery = 5; // 0x0
	public const MapBonusType Adrenaline = 6; // 0x0
	public const MapBonusType Bullet = 7; // 0x0
	public const MapBonusType Assistant = 8; // 0x0
	public const MapBonusType Pumpkin = 9; // 0x0

}

// Namespace: 
public class MapBonusPumpkin : MonoBehaviour // TypeDefIndex: 3876
{
	// Fields
	private Nullable`1<long> timer; // 0x18
	private GameEnemy enemy; // 0x28

	// Methods
	public void .ctor(); // 0x100299AA0
	public void Reset(GameEnemy enemy); // 0x100299AA8
	private void Update(); // 0x100299CD8
}

// Namespace: 
public class MapBonusPlayerPumpkin : MonoBehaviour // TypeDefIndex: 3877
{
	// Fields
	public static bool active; // 0x0
	private Nullable`1<long> timer; // 0x18
	private static Action pumpkinHit; // 0x8

	// Methods
	public void .ctor(); // 0x100299314
	private static void .cctor(); // 0x10029931C
	public static void add_pumpkinHit(Action value); // 0x100299320
	public static void remove_pumpkinHit(Action value); // 0x100299424
	private void Awake(); // 0x100299528
	public void Reset(GameSpecialDevice specialDevice); // 0x100299590
	private void Update(); // 0x10029982C
	private void OnDestroy(); // 0x100299A38
}

// Namespace: 
public class MapBonusPumpkinBtn : MonoBehaviour // TypeDefIndex: 3878
{
	// Fields
	public GameObject button; // 0x18
	public tk2dTextMesh timer; // 0x20
	private int bonusTime; // 0x28
	private float oldtime; // 0x2C
	private float starttime; // 0x30

	// Methods
	public void .ctor(); // 0x10029A038
	private void Start(); // 0x10029A040
	public void UpdateTimerMesh(int time); // 0x10029A0DC
	private void Update(); // 0x10029A218
	private void <Start>m__9E(); // 0x10029A3D0
}

// Namespace: 
public class MapBonusSpawnPoint : MonoBehaviour // TypeDefIndex: 3879
{
	// Fields
	public int m_ID; // 0x18
	private GameObject m_Child; // 0x20

	// Methods
	public void .ctor(); // 0x10029B554
	public void SetChild(GameObject child); // 0x10029AEEC
	public bool IsFree(); // 0x10029B55C
}

// Namespace: 
public class MapBonusSpawner : MonoBehaviour // TypeDefIndex: 3880
{
	// Fields
	private MapBonus[] m_BonusPrefabs; // 0x18
	private MapBonusSpawnPoint[] m_SpawnPoints; // 0x20
	private List`1<MapBonus> m_GeneratedBonuses; // 0x28
	private static Action`1<MapBonus> <>f__am$cache3; // 0x0
	private static Action`1<GameObject> <>f__am$cache4; // 0x8

	// Methods
	public void .ctor(); // 0x10029A450
	private void Awake(); // 0x10029A458
	private void Start(); // 0x10029A4C0
	private void DetachBonusSpawnPoints(); // 0x10029A56C
	public void Reset(); // 0x10029A60C
	public void RemoveBonus(MapBonus bonus); // 0x10029A7B0
	public void OnBonusSpawn(ISFSObject response); // 0x10029A864
	private MapBonus CreateBonus(MapBonusType type, int spawnid, int reward); // 0x10029AC00
	private void GiveBonusReward(GameObject go); // 0x10029B008
	private static void <Reset>m__9F(MapBonus child); // 0x10029B3A0
	private static void <Reset>m__A0(GameObject child); // 0x10029B40C
}

// Namespace: 
private sealed class <OnBonusSpawn>c__AnonStoreyE3 // TypeDefIndex: 3881
{
	// Fields
	internal MapBonus bonus; // 0x10
	internal MapBonusSpawner <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10029ABF8
	internal void <>m__A1(); // 0x10029B49C
}

// Namespace: 
private sealed class <CreateBonus>c__AnonStoreyE4 // TypeDefIndex: 3882
{
	// Fields
	internal MapBonusType type; // 0x10

	// Methods
	public void .ctor(); // 0x10029AEE4
	internal bool <>m__A2(MapBonus prefab); // 0x10029B478
}

// Namespace: 
public class MapSantaDeer : MonoBehaviour // TypeDefIndex: 3883
{
	// Fields
	private static Vector3 DESTROY_EFFECT_OFFSET; // 0x0
	private ParticleSystem m_DestroyEffect; // 0x18

	// Methods
	public void .ctor(); // 0x10029BFF4
	private static void .cctor(); // 0x10029BFFC
	private void Start(); // 0x10029C080
	private void Hit(GameObject go); // 0x10029C10C
	private void PlayDestroyEffect(); // 0x10029C204
	private void OnDestroy(); // 0x10029C430
}

// Namespace: 
public class PumpkinHead : MonoBehaviour // TypeDefIndex: 3884
{
	// Methods
	public void .ctor(); // 0x1000C82E8
	private void Start(); // 0x1000C82F0
	private void Update(); // 0x1000C82F4
}

// Namespace: 
public class MapSelectMenu : MonoBehaviour // TypeDefIndex: 3885
{
	// Fields
	private const float DELIVEY_CHECK_DELAY = 1; // 0x0
	public OnSwitchDgt OnSwitch; // 0x18
	public OnSwitchDgt OnSwitchInstant; // 0x20
	public float switchSpeed; // 0x28
	public GameObject elementConners; // 0x30
	public GameObject elementMiddle; // 0x38
	public List`1<GameObject> allElements; // 0x40
	public MapSelectMenuSwitchControl switchBtns; // 0x48
	private States m_State; // 0x50
	private GameObject tempContainer; // 0x58
	private GameObject tempContainer2; // 0x60
	private GameObject destroyContainer; // 0x68
	private List`1<GameObject> elements; // 0x70
	private float offset; // 0x78
	private int pose; // 0x7C
	private float stepOffset; // 0x80
	private tk2dCamera guicamera; // 0x88
	private Vector2 blockSize; // 0x90
	private float btwoffset; // 0x98
	private float oldoffset; // 0x9C
	private Vector3 oldLocalPos; // 0xA0
	private bool elementCorrected; // 0xAC
	private float[] velo; // 0xB0
	private Vector2 headerDisablePos; // 0xB8
	private GameObject container; // 0xC0
	private bool isFirstInit; // 0xC8
	private int is_scrolled; // 0xCC
	private int current_battle_mode_tab; // 0xD0
	private int battle_mode_tab; // 0xD4
	private static Action <>f__am$cache1C; // 0x0

	// Methods
	public void .ctor(); // 0x10029C4BC
	private States get_state(); // 0x10029C540
	private void set_state(States value); // 0x10029C548
	private void OnDisable(); // 0x10029C560
	private void OnEnable(); // 0x10029C564
	private void OnChangeFocus(GameObject focusedobj); // 0x10029C688
	private void Start(); // 0x10029C728
	private void SetBlockFillPosition(Transform obj); // 0x10029D648
	private void SetBlockBordersPosition(Transform obj); // 0x10029D444
	private void Update(); // 0x10029E1C0
	private void TextUpdate(float switchSpeed); // 0x10029D74C
	private void MoveElements(); // 0x10029EDF4
	private bool CheckDestination(); // 0x10029F154
	public void Move(bool direction); // 0x10029E5B8
	public List`1<GameObject> GetElements(); // 0x10029F478
	private void UpdateDescriptions(); // 0x10029C55C
	public int GetCurrentBattleMode(); // 0x10029F480
	private void Awake(); // 0x10029F488
	private void OnDestroy(); // 0x10029F57C
	private static void <OnEnable>m__A3(); // 0x10029F5E0
	private void <Awake>m__A4(MenuElements element); // 0x10029F608
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3886
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States moveLeft = 1; // 0x0
	public const States movingLeft = 2; // 0x0
	public const States moveRight = 3; // 0x0
	public const States movingRight = 4; // 0x0

}

// Namespace: 
public sealed class OnSwitchDgt : MulticastDelegate // TypeDefIndex: 3887
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10029F66C
	public virtual void Invoke(GameObject obj); // 0x10029C68C
	public virtual IAsyncResult BeginInvoke(GameObject obj, AsyncCallback callback, object object); // 0x10029F67C
	public virtual void EndInvoke(IAsyncResult result); // 0x10029F6CC
}

// Namespace: 
public class MapSelectMenuBottom : MonoBehaviour // TypeDefIndex: 3888
{
	// Fields
	public GameObject dailyQuests; // 0x18
	public GameObject warBid; // 0x20
	public GameObject platoonBid; // 0x28
	public GameObject checkIn; // 0x30
	public GameObject noTeamDeathmatch; // 0x38
	public GameObject chatBtn; // 0x40
	public GameObject infoWarBtn; // 0x48
	public GameObject infoTournnamentBtn; // 0x50
	public GameObject infoPlatoonBtn; // 0x58

	// Methods
	public void .ctor(); // 0x10029F6D8
}

// Namespace: 
public class MapSelectMenuElement : MonoBehaviour // TypeDefIndex: 3889
{
	// Fields
	public Transform border; // 0x18
	public float borderX; // 0x20
	public GameObject leftPos; // 0x28
	public GameObject rigtPos; // 0x30
	private tk2dCamera guicamera; // 0x38
	public GameObject Content; // 0x40
	public GameObject HeaderName; // 0x48
	public Vector3 posCorrection; // 0x50
	private NumberFormatInfo numberFormatInfo; // 0x60

	// Methods
	public void .ctor(); // 0x10029F6E0
	private void Start(); // 0x10029F6E8
	private void OnEnable(); // 0x10029F7B8
	private void Update(); // 0x10029F7BC
}

// Namespace: 
public class MapSelectMenuSwitchControl : MonoBehaviour // TypeDefIndex: 3890
{
	// Fields
	public tk2dUIItem leftBtn; // 0x18
	public tk2dUIItem rightBtn; // 0x20
	public tk2dUIItem upBtn; // 0x28
	public tk2dUIItem downBtn; // 0x30
	public float fadeTime; // 0x38
	private MapSelectMenu previewMenuElements; // 0x40
	private tk2dSprite leftSprite; // 0x48
	private tk2dSprite rightSprite; // 0x50
	private tk2dSprite upSprite; // 0x58
	private tk2dSprite downSprite; // 0x60
	private Vector3[] startPositions; // 0x68
	private float[] velo; // 0x70
	private Vector3[] veloV3; // 0x78
	private List`1<GameObject> elements; // 0x80
	private bool allowPlay; // 0x88
	private bool Init; // 0x89

	// Methods
	public void .ctor(); // 0x10029F7C0
	private void Start(); // 0x10029F87C
	private void OnLeftBtnDown(); // 0x10029FAE0
	private void OnLeftBtnUp(); // 0x10029FB9C
	private void OnRightBtnDown(); // 0x10029FC30
	private void OnRightBtnUp(); // 0x10029FCEC
	private void OnUp(); // 0x10029FD80
	private void OnDown(); // 0x10029FDF0
	public void SetBtnsInvisible2(); // 0x10029FE60
	private void SetBtnsInvisible(); // 0x10029FF68
	public void Off(); // 0x10029F2B8
	public void On(); // 0x10029F1F0
	private IEnumerator Showing(); // 0x1002A0150
	private IEnumerator Showing2(); // 0x1002A01C4
}

// Namespace: 
private sealed class <Showing>c__Iterator38 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3891
{
	// Fields
	internal BattleMode <mode>__0; // 0x10
	internal Vector3 <offset>__1; // 0x14
	internal float <f>__2; // 0x20
	internal int $PC; // 0x24
	internal object $current; // 0x28
	internal MapSelectMenuSwitchControl <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1002A01BC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002A0238
	private object System.Collections.IEnumerator.get_Current(); // 0x1002A0240
	public bool MoveNext(); // 0x1002A0248
	public void Dispose(); // 0x1002A097C
	public void Reset(); // 0x1002A0988
}

// Namespace: 
private sealed class <Showing2>c__Iterator39 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3892
{
	// Fields
	internal BattleMode <mode>__0; // 0x10
	internal float <f>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal MapSelectMenuSwitchControl <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1002A0230
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002A09DC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002A09E4
	public bool MoveNext(); // 0x1002A09EC
	public void Dispose(); // 0x1002A0CB0
	public void Reset(); // 0x1002A0CBC
}

// Namespace: 
public class MapsLoadButton : MonoBehaviour // TypeDefIndex: 3893
{
	// Fields
	public GameObject confirmDialogPrefab; // 0x18
	private bool downloading; // 0x20

	// Methods
	public void .ctor(); // 0x1002A0D10
	private void Start(); // 0x1002A0D18
	private void OnClick(); // 0x1002A0E18
	private IEnumerator DownloadMaps(MessageDialog dialog); // 0x1002A0F84
}

// Namespace: 
private sealed class <DownloadMaps>c__Iterator3A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3894
{
	// Fields
	internal MessageDialog dialog; // 0x10
	internal DownloadDialog <dl>__0; // 0x18
	internal Dictionary`2<string, MapInfo> <mapInfoList>__1; // 0x20
	internal Enumerator<string, MapInfo> <$s_296>__2; // 0x28
	internal KeyValuePair`2<string, MapInfo> <pair>__3; // 0x48
	internal string <map_name>__4; // 0x58
	internal MapInfo <mapInfo>__5; // 0x60
	internal string <bundleName>__6; // 0x68
	internal bool <newVersion>__7; // 0x70
	internal AssetBundleLoadOperation <request>__8; // 0x78
	internal int $PC; // 0x80
	internal object $current; // 0x88
	internal MessageDialog <$>dialog; // 0x90
	internal MapsLoadButton <>f__this; // 0x98

	// Methods
	public void .ctor(); // 0x1002A1000
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002A1008
	private object System.Collections.IEnumerator.get_Current(); // 0x1002A1010
	public bool MoveNext(); // 0x1002A1018
	public void Dispose(); // 0x1002A1770
	public void Reset(); // 0x1002A18B8
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyE5 // TypeDefIndex: 3895
{
	// Fields
	internal ConfirmDialog confirmDialog; // 0x10
	internal MapsLoadButton <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002A0F7C
	internal void <>m__A5(); // 0x1002A190C
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyE6 // TypeDefIndex: 3896
{
	// Fields
	internal MessageDialog dialog; // 0x10
	internal <OnClick>c__AnonStoreyE5 <>f__ref$229; // 0x18

	// Methods
	public void .ctor(); // 0x1002A1AFC
	internal void <>m__A6(); // 0x1002A1B04
}

// Namespace: 
public class MapsMenu : MonoBehaviour // TypeDefIndex: 3897
{
	// Fields
	public bool dailyQuestsActive; // 0x18
	public bool warBidActive; // 0x19
	public bool checkInActive; // 0x1A
	public bool platoonActive; // 0x1B
	private int first_start; // 0x1C
	private BattleMode type; // 0x20
	private int last_update; // 0x24
	private int update_span; // 0x28

	// Methods
	public void .ctor(); // 0x1002A1B6C
	private void Start(); // 0x1002A1B7C
	private void OnEnable(); // 0x1002A1EB8
	private void OnDisable(); // 0x1002A1FC0
	private void InitMapSelect(); // 0x1002A1B80
	private IEnumerator Tick(); // 0x1002A2078
}

// Namespace: 
private sealed class <Tick>c__Iterator3B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3898
{
	// Fields
	internal int <now_sec>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal MapsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002A20E4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002A20EC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002A20F4
	public bool MoveNext(); // 0x1002A20FC
	public void Dispose(); // 0x1002A2310
	public void Reset(); // 0x1002A231C
}

// Namespace: 
public class MaskController : MonoBehaviour // TypeDefIndex: 3899
{
	// Fields
	public Texture2D[] helmet_mask_textures; // 0x18

	// Methods
	public void .ctor(); // 0x1002A2370
	public void SwitchMask(int maskType); // 0x1002A2378
}

// Namespace: 
public class MaskDublicator : MonoBehaviour // TypeDefIndex: 3900
{
	// Fields
	public tk2dUIMask example; // 0x18
	private tk2dUIMask selfmask; // 0x20

	// Methods
	public void .ctor(); // 0x1002A2504
	private void Start(); // 0x1002A250C
	private void Update(); // 0x1002A26A0
	private void UpdateParams(); // 0x1002A2648
	private void OnDestroy(); // 0x1002A26F4
}

// Namespace: 
public class Matchmaking : MonoBehaviour // TypeDefIndex: 3901
{
	// Fields
	private SocketServer ss; // 0x18
	private int tipIndex; // 0x20
	private string tipKey; // 0x28
	public tk2dTextMesh tipText; // 0x30
	public tk2dTextMesh loadingText; // 0x38
	public tk2dTextMesh stepText; // 0x40
	public tk2dUIProgressBar progressBar; // 0x48
	public LoadingBundle weaponsLoading; // 0x50
	public LoadingBundle handsLoading; // 0x58
	public LoadingBundle caseLoading; // 0x60
	public LoadingBundle enemyLoading; // 0x68
	public LoadingBundle environmentLoading; // 0x70
	public LoadingBundle gameSoundLoading; // 0x78
	public LoadingBundle weaponSoundLoading; // 0x80
	public LoadingBundle weaponCamoLoading; // 0x88
	public LoadingLevelBundle levelLoading; // 0x90
	private Weapon weapon; // 0x98
	private GameObject tipImageDefault; // 0xA0
	private TipImage tipImage; // 0xA8
	private static Action`2<WeaponPart, WeaponPartStage> <>f__am$cache13; // 0x0
	private static Dictionary`2<string, int> <>f__switch$map8; // 0x8

	// Methods
	public void .ctor(); // 0x1002A2810
	private void Awake(); // 0x1002A2818
	private void ClearWeaponCamo(BundleOptions bundle); // 0x1002A3338
	private void OnDownloadError(); // 0x1002A3554
	private void Start(); // 0x1002A357C
	private void ShowTipOfTheDay(); // 0x1002A447C
	private void FindGame(string map); // 0x1002A46E0
	private void OnGameFinded(bool isSuccess); // 0x1002A4848
	private void OnJoinedToGame(bool isSuccess); // 0x1002A498C
	private IEnumerator LoadLevel(); // 0x1002A4BF8
	private void DownloadWeaponCamo(); // 0x1002A4C6C
	private void DownloadDefaultCamo(); // 0x1002A4358
	private void DownloadWeapons(); // 0x1002A4DE4
	private void DownloadHands(); // 0x1002A5014
	private void DownloadCase(); // 0x1002A51BC
	private void DownloadEnemy(); // 0x1002A5364
	private void DownloadGameSound(); // 0x1002A54FC
	private void DownloadWeaponSound(); // 0x1002A56A4
	private void OnEnvironmentDownloaded(List`1<GameObject> gameobjects); // 0x1002A584C
	private void DownloadLevelBundle(); // 0x1002A5A84
	private void OnLevelDownloaded(); // 0x1002A5D68
	private void OnDownloadedWeaponSound(List`1<AudioClip> audioClips); // 0x1002A5DD8
	private void OnDownloadedGameSound(List`1<AudioClip> audioClips); // 0x1002A5E60
	private void OnEnemyDownloaded(List`1<GameObject> gameobjects); // 0x1002A5EE8
	private void OnCaseDownloaded(List`1<GameObject> gameobjects); // 0x1002A62F4
	private void OnHandsDownloaded(List`1<GameObject> gameobjects); // 0x1002A6420
	private bool CamoDisabled(int camo_type); // 0x1002A656C
	private void OnWeaponsDownloaded(List`1<GameObject> gameobjects); // 0x1002A6830
	private void SetupWeapon(); // 0x1002A6888
	private void OnWeaponCamoDownloaded(List`1<Texture2D> objects); // 0x1002A6AF8
	private void OnDestroy(); // 0x1002A6BA4
	private static void <Awake>m__A7(WeaponPart arg1, WeaponPartStage arg2); // 0x1002A6D9C
}

// Namespace: 
private sealed class <LoadLevel>c__Iterator3C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3902
{
	// Fields
	internal string <level>__0; // 0x10
	internal AsyncOperation <async>__1; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal Matchmaking <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1002A4C64
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002A6E20
	private object System.Collections.IEnumerator.get_Current(); // 0x1002A6E28
	public bool MoveNext(); // 0x1002A6E30
	public void Dispose(); // 0x1002A702C
	public void Reset(); // 0x1002A7038
}

// Namespace: 
public class MatchmakingTips : MonoBehaviour // TypeDefIndex: 3903
{
	// Fields
	private int max; // 0x18

	// Methods
	public void .ctor(); // 0x1002A708C
	public Bundle Current(); // 0x1002A34D8
	public void Next(); // 0x1002A4608
	private void Awake(); // 0x1002A71C4
	private void Start(); // 0x1002A72C0
	private void Update(); // 0x1002A72C4
}

// Namespace: 
public class Bundle // TypeDefIndex: 3904
{
	// Fields
	public string word; // 0x10
	public string assetBundle; // 0x18
	public string assetName; // 0x20

	// Methods
	public void .ctor(int tipIndex); // 0x1002A709C
}

// Namespace: 
public class Menu : MonoBehaviour // TypeDefIndex: 3905
{
	// Fields
	public GameObject bonusDialogPrefab; // 0x18
	public MenuRatingPersonal personalLeague; // 0x20
	public MenuRatingPersonal personalWeek; // 0x28
	public MenuRatingPersonal personalRoyal; // 0x30
	public MenuRatingPersonal squadWeek; // 0x38
	public MenuRatingPersonal squadRoyal; // 0x40
	public MenuRatingPersonal mercMyMercs; // 0x48
	public MenuRatingPersonal mercMyContracts; // 0x50
	private static Predicate`1<DailyReward> <>f__am$cache8; // 0x0

	// Methods
	public void .ctor(); // 0x1002A7684
	private void Awake(); // 0x1002A768C
	private void Start(); // 0x1002A769C
	private void GetContractRating(); // 0x1002A8880
	private void GetMyMercsRating(); // 0x1002A8974
	private void GetPersonalRatings(); // 0x1002A8A38
	private void GetSquadRatings(); // 0x1002A8C94
	private IEnumerator CheckConnection(); // 0x1002A8824
	private void OnRatingReward(MoneyTypes moneytype, int value); // 0x1002A8E38
	private void OnSquadReward(MoneyTypes moneytype, int value); // 0x1002A9198
	private void OnPlatoonReward(MoneyTypes moneytype, int value); // 0x1002A9370
	private void OnTournamentReward(MoneyTypes moneytype, int value); // 0x1002A9548
	private void OnAllianceReward(MoneyTypes moneytype, int value); // 0x1002A9720
	private void OnTerritoriesReward(MoneyTypes moneytype, int value); // 0x1002A98F8
	private void OnGiftRewardDollars(int moneytype, int value, string from); // 0x1002A9AEC
	private void OnGiftRewardCrystals(int moneytype, int value, string from); // 0x1002A9CFC
	private void OnMercHireError(int code); // 0x1002A9F0C
	private void OnMercHireOk(Contract contract); // 0x1002AA0CC
	private void OnMercReward(MoneyTypes moneytype, int value); // 0x1002AA230
	private void OnMercEmployerReward(); // 0x1002AA408
	private void OnMercEmployerRefund(MoneyTypes moneytype, int value); // 0x1002AA5A0
	private void OnChangeLeague(int league); // 0x1002AA778
	private void OnSquadChangeLeague(int league); // 0x1002AA8C8
	private void OnServerRestart(int t, int type); // 0x1002AAA40
	private void OnSpecialReward(MoneyTypes moneytype, long value); // 0x1002AB040
	private void OnWarBidReturned(MoneyTypes moneytype, int value); // 0x1002AB32C
	private void OnCommanderPromotion(); // 0x1002AB504
	private void OnVIPPromotion(); // 0x1002AB5FC
	public static void OnDailyReward(int event_type, int day); // 0x1002AB784
	public static void OnDailyRewards(List`1<DailyReward> rewards); // 0x1002ABBBC
	public static void OnDailyRewards(); // 0x1002AC24C
	private void BonusClick(tk2dUIItem item); // 0x1002AC414
	private void OnFacebookClick(tk2dUIItem item); // 0x1002AC528
	private BonusDialog CreateBonusDialog(string header, string subheader, string getbuttonText, string facebookButtonText); // 0x1002A9010
	private void OnSkuItemReceived(int id, int dollars, int crystals, int avatar, int flag, ISFSObject response); // 0x1002AC5A8
	private void OnDestroy(); // 0x1002ACDC4
	public void GoToSquadMenu(); // 0x1002ADDA0
	private IEnumerator GoToSquadMenuC(); // 0x1002ADDF4
	public void GoToMapMenu(); // 0x1002ADE58
	private IEnumerator GoToMapMenuC(); // 0x1002ADEAC
	private void OnError(string text, int code); // 0x1002ADF10
	private static bool <OnDailyRewards>m__AC(DailyReward a); // 0x1002AE08C
}

// Namespace: 
private sealed class <CheckConnection>c__Iterator3D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3906
{
	// Fields
	internal ConnectionControl <cc>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20

	// Methods
	public void .ctor(); // 0x1002A8E30
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002AE10C
	private object System.Collections.IEnumerator.get_Current(); // 0x1002AE114
	public bool MoveNext(); // 0x1002AE11C
	public void Dispose(); // 0x1002AE2CC
	public void Reset(); // 0x1002AE2D8
}

// Namespace: 
private sealed class <GoToSquadMenuC>c__Iterator3E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3907
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x1002ADE50
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002AE464
	private object System.Collections.IEnumerator.get_Current(); // 0x1002AE46C
	public bool MoveNext(); // 0x1002AE474
	public void Dispose(); // 0x1002AE5A4
	public void Reset(); // 0x1002AE5B0
}

// Namespace: 
private sealed class <GoToMapMenuC>c__Iterator3F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3908
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x1002ADF08
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002AE32C
	private object System.Collections.IEnumerator.get_Current(); // 0x1002AE334
	public bool MoveNext(); // 0x1002AE33C
	public void Dispose(); // 0x1002AE404
	public void Reset(); // 0x1002AE410
}

// Namespace: 
private sealed class <OnDailyReward>c__AnonStoreyE7 // TypeDefIndex: 3909
{
	// Fields
	internal int day; // 0x10
	internal int event_type; // 0x14

	// Methods
	public void .ctor(); // 0x1002ABBB4
	internal bool <>m__A8(DailyReward a); // 0x1002AE604
	internal bool <>m__A9(DailyReward a); // 0x1002AE640
}

// Namespace: 
private sealed class <OnDailyRewards>c__AnonStoreyE9 // TypeDefIndex: 3910
{
	// Fields
	internal List`1<DailyReward> validRewards; // 0x10

	// Methods
	public void .ctor(); // 0x1002AC23C
	internal bool <>m__AB(DailyReward a); // 0x1002AE6A0
}

// Namespace: 
private sealed class <OnDailyRewards>c__AnonStoreyE8 // TypeDefIndex: 3911
{
	// Fields
	internal int day; // 0x10
	internal int event_type; // 0x14

	// Methods
	public void .ctor(); // 0x1002AC244
	internal bool <>m__AA(DailyReward a); // 0x1002AE664
}

// Namespace: 
private sealed class <OnSkuItemReceived>c__AnonStoreyEA // TypeDefIndex: 3912
{
	// Fields
	internal int id; // 0x10

	// Methods
	public void .ctor(); // 0x1002ACDBC
	internal bool <>m__AD(SASkuData sd); // 0x1002AE724
}

// Namespace: 
public class Menu3DCameraBlurControl : MonoBehaviour // TypeDefIndex: 3913
{
	// Methods
	public void .ctor(); // 0x1002AE748
}

// Namespace: 
public class Menu3DElementInputRotate : MonoBehaviour // TypeDefIndex: 3914
{
	// Fields
	private const float ROTATION_SPEED = 20; // 0x0
	public Transform element; // 0x18
	public float resetTime; // 0x20
	public float speed; // 0x24
	public GameObject loader; // 0x28
	public bool allowScale; // 0x30
	public float limitY; // 0x34
	private tk2dUITouch touchTk; // 0x38
	private int fingerId; // 0x54
	private tk2dUIItem button; // 0x58
	private tk2dCamera guicamera; // 0x60
	private Vector2 deltaInput; // 0x68
	public float deltaScale; // 0x70
	public Quaternion toRotation; // 0x74
	private float lastTouchTime; // 0x84
	public Vector3 scaleVelo; // 0x88
	private float oldScaleTouchDistance; // 0x94
	public bool forZAxis; // 0x98
	public bool forHelmet; // 0x99
	private bool m_DeltaReset; // 0x9A

	// Methods
	public void .ctor(); // 0x1002AE750
	private void Start(); // 0x1002AE768
	private void OnDown(tk2dUIItem item); // 0x1002AE8EC
	private void OnUp(tk2dUIItem item); // 0x1002AE950
	public void ResetDeltaInput(); // 0x1002AE95C
	private void Update(); // 0x1002AE98C
}

// Namespace: 
public class MenuAchivements : MonoBehaviour // TypeDefIndex: 3915
{
	// Fields
	public static AchievementStages NavigateTo; // 0x0
	public Sections currentSection; // 0x18
	public GameObject achivementsTabs; // 0x20
	public GameObject achivementsHeader; // 0x28
	public GameObject loadinggo; // 0x30
	public GameObject contentgo; // 0x38
	public tk2dUIScrollableArea scroll; // 0x40
	public float angle; // 0x48
	public Transform spiner; // 0x50
	public tk2dTextMesh outOfLabel; // 0x58
	public tk2dTextMesh currentVIP; // 0x60
	public tk2dTextMesh nextVIP; // 0x68
	public tk2dUIProgressBar progressBarVIP; // 0x70
	public tk2dTextMesh progressLabel; // 0x78
	public GameObject achivementrowprefab; // 0x80
	public int maxCharValue; // 0x88
	private GameObject myrowinlistgo; // 0x90
	private bool inprocess; // 0x98
	private Achievements achievements; // 0xA0
	public static long id; // 0x8
	public MenuNavigator menuNavigator; // 0xA8
	public BoxCollider boxColliderFix; // 0xB0
	public tk2dSlicedSprite BG; // 0xB8
	public int ordered_category; // 0xC0
	public static MenuAchivements Instance; // 0x10
	private static Action`1<GameObject> <>f__am$cache19; // 0x18

	// Methods
	public void .ctor(); // 0x1002AF5AC
	private static void .cctor(); // 0x1002AF5B4
	private void Awake(); // 0x1002AF5B8
	public void Reset(); // 0x1002AF624
	public void OnGetAchivements(); // 0x1002AFA44
	private void OnPlayerProfileAchievements(Achievements a); // 0x1002B09FC
	private void UpdateCounter(); // 0x1002B07C4
	private void OnEnable(); // 0x1002B0A70
	private void FixCollider(); // 0x1002B0EC8
	private void On(); // 0x1002B0A04
	private void OnDisable(); // 0x1002B0FD4
	private IEnumerator GetAchivements(); // 0x1002B0F68
	private void Update(); // 0x1002B1120
	private static void <Reset>m__AE(GameObject child); // 0x1002B11E0
}

// Namespace: 
private sealed class <GetAchivements>c__Iterator40 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3916
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuAchivements <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002B1118
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002B124C
	private object System.Collections.IEnumerator.get_Current(); // 0x1002B1254
	public bool MoveNext(); // 0x1002B125C
	public void Dispose(); // 0x1002B1368
	public void Reset(); // 0x1002B1374
}

// Namespace: 
public class MenuAeroButton : MenuStateButton // TypeDefIndex: 3917
{
	// Fields
	private MenuAeroButtons menuCamBtns; // 0xA8

	// Methods
	public void .ctor(); // 0x1002B13C8
	private void Update(); // 0x1002B13D0
	private void Awake(); // 0x1002B14AC
	public override void SetCost(int value); // 0x1002B15CC
	public override void SetRequiredMaxPart(Weapon currentWeapon); // 0x1002B1BB4
	public override void SetRequiredMaxPart(Helmet currentHelmet); // 0x1002B1C34
	public override void SetRequiredTuning(int tuning_required); // 0x1002B1CB4
	public override void SetRemains(string requiredbtntext); // 0x1002B1DD8
	private void OnClick(); // 0x1002B1F94
	private void BuyCamo(Items item); // 0x1002B22D8
	private void BuyItem(Items item); // 0x1002B2434
	private void InputEnabled(bool inputEnabled); // 0x1002B1A18
	private void OnEnable(); // 0x1002B2530
	private void OnDisable(); // 0x1002B26D0
	private void OnHelmetAeroBuyed(TuningGroups group_type, int item_type, int tuning_type); // 0x1002B2848
	private void OnWeaponCamoRemoved(); // 0x1002B2A58
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyEB // TypeDefIndex: 3918
{
	// Fields
	internal Items item; // 0x10
	internal MenuAeroButton <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002B22D0
	internal void <>m__AF(); // 0x1002B2A5C
}

// Namespace: 
public class MenuAeroButtons : MenuStateButtons // TypeDefIndex: 3919
{
	// Methods
	public void .ctor(); // 0x1002B2A7C
}

// Namespace: 
public class MenuArmory : MonoBehaviour // TypeDefIndex: 3920
{
	// Fields
	public Items item; // 0x18
	public MenuArmoryButtons buttons; // 0x20
	public tk2dSprite flagIcon; // 0x28
	public tk2dTextMesh description; // 0x30
	public MenuUpgradeStats stats; // 0x38
	public LoadingBundle loadingbundle; // 0x40
	public BottomScroll bottomNavigator; // 0x48
	public GameObject loader; // 0x50
	public MenuWeaponLights lights; // 0x58
	public Transform model; // 0x60
	public Menu3DElementInputRotate inputRotate; // 0x68
	public MenuWeaponLoaded menuWeaponLoaded; // 0x70
	public MenuHelmetsLoaded menuHelmetLoaded; // 0x78
	public LoadingBundle loadingweaponcamobundle; // 0x80
	public GameObject camoblock; // 0x88
	public GameObject modelblock; // 0x90
	public GameObject girlRequired; // 0x98
	public tk2dTextMesh girlRequiredText; // 0xA0
	private Action`1<Weapon> m_WeaponSelected; // 0xA8
	private Action`1<Helmet> m_HelmetSelected; // 0xB0
	public AnimStatus animStatus; // 0xB8
	public float switchSpeed; // 0xBC
	private Weapon weapon; // 0xC0
	private Helmet helmet; // 0xC8
	private float[] velo; // 0xD0
	private Weapon activeWeapon; // 0xD8
	private Helmet activeHelmet; // 0xE0
	private Transform lastselectedtransform; // 0xE8
	public bool turorial; // 0xF0
	public tk2dUIItem buttonWeapon1; // 0xF8
	public tk2dUIItem buttonWeapon2; // 0x100
	public GameObject selector; // 0x108
	private MenuNavigatorEvents menuNavigatorEvents; // 0x110

	// Methods
	public void .ctor(); // 0x1002B2A84
	public void add_OnWeaponSelected(Action`1<Weapon> value); // 0x1002B2AF8
	public void remove_OnWeaponSelected(Action`1<Weapon> value); // 0x1002B2C48
	public void add_OnHelmetSelected(Action`1<Helmet> value); // 0x1002B2D28
	public void remove_OnHelmetSelected(Action`1<Helmet> value); // 0x1002B2E78
	public Weapon GetCurrentWeapon(); // 0x1002B2F58
	public Helmet GetCurrentHelmet(); // 0x1002B2F60
	private void Awake(); // 0x1002B2F68
	private void Start(); // 0x1002B3064
	private void buttonWeapon1Click(); // 0x1002B3794
	private void buttonWeapon2Click(); // 0x1002B4F28
	private void OnDownloadError(); // 0x1002B4FA0
	private void OnEnable(); // 0x1002B4FE4
	private void OnDisable(); // 0x1002B52AC
	private void OnStartCamoDownload(); // 0x1002B5534
	private void OnDownloadedCamo(List`1<Texture2D> objects); // 0x1002B5578
	private void SetupWeaponCamo(GameObject wmodel); // 0x1002B5970
	public void ApplyStats(); // 0x1002B5F98
	private void OnBottomItemSelect(Transform t); // 0x1002B380C
	public void OnHelmetDelivered(int type, int camo_type, int camo_leftuses, int aero_type, int aero_leftuses); // 0x1002B689C
	public void OnWeaponDelivered(int type, int camo_type, int camo_leftuses, int handling_type, int handling_leftuses); // 0x1002B696C
	private void Update(); // 0x1002B69B8
	private void OnHelmetSwitched(); // 0x1002B7224
	private void OnWeaponSwitched(); // 0x1002B7230
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, double max_damage, double max_speed, double max_zoom, double max_stability, double max_amount, int weapon_type, int headshoot, bool applyPermament, bool applyEasy); // 0x1002B3378
	private void <Awake>m__B0(MenuElements element); // 0x1002B723C
	private void <Awake>m__B1(MenuElements element); // 0x1002B7258
}

// Namespace: 
public sealed class AnimStatus : Enum // TypeDefIndex: 3921
{
	// Fields
	public int value__; // 0x10
	public const AnimStatus idle = 0; // 0x0
	public const AnimStatus hiding = 1; // 0x0
	public const AnimStatus showing = 2; // 0x0

}

// Namespace: 
public class MenuArmoryButton : MonoBehaviour // TypeDefIndex: 3922
{
	// Fields
	public ButtonType buttonType; // 0x18
	public tk2dUIItem button; // 0x20
	public GameObject blueSpites; // 0x28
	public GameObject greenSprites; // 0x30
	public int cost; // 0x38
	public tk2dTextMesh[] costText; // 0x40
	public int deliveryTime; // 0x48
	public tk2dTextMesh timeText; // 0x50
	public tk2dSprite requiredSprite; // 0x58
	public tk2dSprite requiredCupSprite; // 0x60
	private NumberFormatInfo numberFormatInfo; // 0x68
	private MenuArmoryButtons menuArmBtns; // 0x70
	public bool tutorial; // 0x78
	public GameObject tuningGift; // 0x80
	public tk2dTextMesh camoValueMesh; // 0x88
	public RemoteSpriteRender camoIcon; // 0x90
	public tk2dTextMesh handlingAeroValueMesh; // 0x98
	public RemoteSpriteRender handlingAeroIcon; // 0xA0
	public tk2dTextMesh textRequiredWeapon; // 0xA8
	public tk2dTextMesh textRequiredMaxPart; // 0xB0
	private int requiredCup; // 0xB8
	private long requiredRankpoints; // 0xC0

	// Methods
	public void .ctor(); // 0x1002B730C
	private void Awake(); // 0x1002B7314
	public void SetRequiredIcon(long rankpoints); // 0x1002B7420
	public void SetRequiredCupIcon(int cup); // 0x1002B74B8
	public void SetCost(int value); // 0x1002B7584
	private void OnClick(); // 0x1002B7CD8
	private void OnEnable(); // 0x1002B8804
	private void OnDisable(); // 0x1002B8DEC
	private IEnumerator Tick(); // 0x1002B9450
	private void DeliveryEvent(); // 0x1002B94C4
	private void OnWeaponInstalled(int weapontype); // 0x1002B9614
	private void OnWeaponBuyed(int weapontype); // 0x1002B97FC
	private void OnWeaponDelivered(int weapontype, int camo_type, int camo_leftuses, int handling_type, int handling_leftuses); // 0x1002B99C0
	private void OnHelmetInstalled(int helmettype); // 0x1002B9B98
	private void OnHelmetBuyed(int helmettype); // 0x1002B9D80
	private void OnHelmetDelivered(int helmettype, int camo_type, int camo_leftuses, int aero_type, int aero_leftuses); // 0x1002B9F44
	public void SetRequiredMaxPart(Weapon currentWeapon); // 0x1002BA11C
	private string GetPart(int totalStage); // 0x1002BA22C
}

// Namespace: 
public sealed class ButtonType : Enum // TypeDefIndex: 3923
{
	// Fields
	public int value__; // 0x10
	public const ButtonType upgrade = 0; // 0x0
	public const ButtonType delivery = 1; // 0x0
	public const ButtonType install = 2; // 0x0
	public const ButtonType installed = 3; // 0x0
	public const ButtonType required = 4; // 0x0
	public const ButtonType requiredCup = 5; // 0x0
	public const ButtonType requiredCupRank = 6; // 0x0
	public const ButtonType requiredMaxPart = 7; // 0x0

}

// Namespace: 
private sealed class <Tick>c__Iterator41 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3924
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuArmoryButton <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002B94BC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002BA440
	private object System.Collections.IEnumerator.get_Current(); // 0x1002BA448
	public bool MoveNext(); // 0x1002BA450
	public void Dispose(); // 0x1002BA73C
	public void Reset(); // 0x1002BA748
}

// Namespace: 
public class MenuArmoryButtons : MonoBehaviour // TypeDefIndex: 3925
{
	// Fields
	public GameObject messagedialogprefab; // 0x18
	public float speed; // 0x20
	public MenuArmoryButton delivery; // 0x28
	public MenuArmoryButton install; // 0x30
	public MenuArmoryButton installed; // 0x38
	public MenuArmoryButton upgrade; // 0x40
	public MenuArmoryButton required; // 0x48
	public MenuArmoryButton requiredCup; // 0x50
	public MenuArmoryButton requiredCupRank; // 0x58
	public MenuArmoryButton requiredMaxPart; // 0x60
	private States state; // 0x68
	private float leftSpace; // 0x6C
	private float blockWidth; // 0x70
	private MenuArmoryButton activeButton; // 0x78
	private MenuArmoryButton btnForShow; // 0x80
	private float[] velo; // 0x88
	private Vector3 buttonsStartPos; // 0x90
	public MenuArmory menuArmory; // 0xA0
	private float constOffset; // 0xA8

	// Methods
	public void .ctor(); // 0x1002BA79C
	public MessageGirl01Dialog CreateDialog(string header, string message); // 0x1002B86A4
	private void Awake(); // 0x1002BA824
	private void Start(); // 0x1002BA8D4
	private void Update(); // 0x1002BAA4C
	public void ShowButton(MenuArmoryButton btn, long rankpoints_required, optional int cup_required); // 0x1002B6060
	private void OffButtons(); // 0x1002BAF2C
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3926
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States hiding = 1; // 0x0
	public const States showing = 2; // 0x0

}

// Namespace: 
public class MenuArmoryButtons2 : MonoBehaviour // TypeDefIndex: 3927
{
	// Fields
	public GameObject messagedialogprefab; // 0x18
	public float speed; // 0x20
	public MenuArmorySmartButton delivery; // 0x28
	public MenuArmorySmartButton install; // 0x30
	public MenuArmorySmartButton installed; // 0x38
	public MenuArmorySmartButton upgrade; // 0x40
	public MenuArmorySmartButton required; // 0x48
	public MenuArmorySmartButton requiredCup; // 0x50
	public MenuArmorySmartButton requiredCupRank; // 0x58
	public MenuArmorySmartButton requiredMaxPart; // 0x60
	public LocalizationTextMesh uktext; // 0x68
	private States state; // 0x70
	private float leftSpace; // 0x74
	private float blockWidth; // 0x78
	private MenuArmorySmartButton activeButton; // 0x80
	private MenuArmorySmartButton btnForShow; // 0x88
	private float[] velo; // 0x90
	private Vector3 buttonsStartPos; // 0x98
	public Delegate menuArmory; // 0xA8
	private float constOffset; // 0xB0

	// Methods
	public void .ctor(); // 0x1002BB52C
	public MessageGirl01Dialog CreateDialog(string header, string message); // 0x1002BB5DC
	private void Start(); // 0x1002BB73C
	private void Update(); // 0x1002BBE94
	public void PrepareHelmet(); // 0x1002BBBC0
	public void PrepareWeapon(); // 0x1002BB8EC
	public void ShowButton(MenuArmorySmartButton btn, long rankpoints_required, optional int cup_required); // 0x1002BC37C
	private void OffButtons(); // 0x1002BD824
	private void OnEnable(); // 0x1002BD940
	private void OnDisable(); // 0x1002BDB84
	private void OnWeaponPartInstalled(int weapontype, int weaponpartint, int stage); // 0x1002BDDC8
	private void OnHelmetPartInstalled(int helmettype, int helmetpartint, int stage); // 0x1002BDDEC
}

// Namespace: 
public class Delegate // TypeDefIndex: 3928
{
	// Fields
	public Items item; // 0x10
	public Weapon weapon; // 0x18
	public Helmet helmet; // 0x20

	// Methods
	public void .ctor(); // 0x1002BB5D4
	public Weapon GetCurrentWeapon(); // 0x1002BCD4C
	public Helmet GetCurrentHelmet(); // 0x1002BC374
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3929
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States hiding = 1; // 0x0
	public const States showing = 2; // 0x0

}

// Namespace: 
public class MenuArmoryHelmetsButton : MonoBehaviour // TypeDefIndex: 3930
{
	// Fields
	public int helmetType; // 0x18
	public int flagId; // 0x1C
	private BottomScroll m_Scroll; // 0x20

	// Methods
	public void .ctor(); // 0x1002BDE14
	private void Awake(); // 0x1002BDE1C
	public void GoToThisButton(); // 0x1002BDEE4
}

// Namespace: 
public class MenuArmoryPosCorrection : MonoBehaviour // TypeDefIndex: 3931
{
	// Fields
	public MenuWeaponLoaded menuWeaponLoaded; // 0x18
	public ScaleWeapons[] scaleWeapons; // 0x20

	// Methods
	public void .ctor(); // 0x1002BDF90
	private void Start(); // 0x1002BDF98
	private void OnLoaded(int weaponType, GameObject weapon); // 0x1002BE0B4
	public void CorrectPosition(int weaponType, GameObject weapon); // 0x1002BE0B8
}

// Namespace: 
public class ScaleWeapons // TypeDefIndex: 3932
{
	// Fields
	public int weaponType; // 0x10
	public Vector3 localPosition; // 0x14

	// Methods
	public void .ctor(); // 0x1002BE174
}

// Namespace: 
public class MenuArmorySizeCorrection : MonoBehaviour // TypeDefIndex: 3933
{
	// Fields
	public MenuWeaponLoaded menuWeaponLoaded; // 0x18
	public ScaleWeapons[] scaleWeapons; // 0x20

	// Methods
	public void .ctor(); // 0x1002BE17C
	private void Start(); // 0x1002BE184
	private void OnLoaded(int weaponType, GameObject weapon); // 0x1002BE2A0
	public void CorrectSize(int weaponType, GameObject weapon); // 0x1002BE2A4
}

// Namespace: 
public class ScaleWeapons // TypeDefIndex: 3934
{
	// Fields
	public int weaponType; // 0x10
	public Vector3 localScale; // 0x14

	// Methods
	public void .ctor(); // 0x1002BE360
}

// Namespace: 
public class MenuArmorySmartButton : MonoBehaviour // TypeDefIndex: 3935
{
	// Fields
	public ButtonType buttonType; // 0x18
	public tk2dUIItem button; // 0x20
	public GameObject blueSpites; // 0x28
	public GameObject greenSprites; // 0x30
	public int cost; // 0x38
	public tk2dTextMesh[] costText; // 0x40
	public int deliveryTime; // 0x48
	public tk2dTextMesh timeText; // 0x50
	public tk2dSprite requiredSprite; // 0x58
	public tk2dSprite requiredCupSprite; // 0x60
	private NumberFormatInfo numberFormatInfo; // 0x68
	private MenuArmoryButtons2 menuArmBtns; // 0x70
	public bool tutorial; // 0x78
	public GameObject tuningGift; // 0x80
	public tk2dTextMesh camoValueMesh; // 0x88
	public RemoteSpriteRender camoIcon; // 0x90
	public tk2dTextMesh handlingAeroValueMesh; // 0x98
	public RemoteSpriteRender handlingAeroIcon; // 0xA0
	public tk2dTextMesh textRequiredWeapon; // 0xA8
	public tk2dTextMesh textRequiredMaxPart; // 0xB0

	// Methods
	public void .ctor(); // 0x1002BE368
	private void Awake(); // 0x1002BE370
	public void SetRequiredIcon(long rankpoints); // 0x1002BD4A8
	public void SetRequiredCupIcon(int cup); // 0x1002BD53C
	public void SetCost(int value); // 0x1002BCD54
	private void OnClick(); // 0x1002BE47C
	private void OnEnable(); // 0x1002BE98C
	public void SetRequiredMaxPart(Weapon currentWeapon); // 0x1002BD604
	public void SetRequiredMaxPart(Helmet currentHelmet); // 0x1002BD714
	private string GetPart(int totalStage); // 0x1002BEA0C
}

// Namespace: 
public sealed class ButtonType : Enum // TypeDefIndex: 3936
{
	// Fields
	public int value__; // 0x10
	public const ButtonType upgrade = 0; // 0x0
	public const ButtonType delivery = 1; // 0x0
	public const ButtonType install = 2; // 0x0
	public const ButtonType installed = 3; // 0x0
	public const ButtonType required = 4; // 0x0
	public const ButtonType requiredCup = 5; // 0x0
	public const ButtonType requiredCupRank = 6; // 0x0
	public const ButtonType requiredMaxPart = 7; // 0x0

}

// Namespace: 
public class MenuArmoryWeaponButton : MonoBehaviour // TypeDefIndex: 3937
{
	// Fields
	public int weaponType; // 0x18
	public int flagId; // 0x1C
	private BottomScroll m_Scroll; // 0x20

	// Methods
	public void .ctor(); // 0x1002BEC20
	private void Awake(); // 0x1002BEC28
	public void GoToThisButton(); // 0x1002BECF0
}

// Namespace: 
public class MenuBackButton : MonoBehaviour // TypeDefIndex: 3938
{
	// Fields
	public static Action OnClick; // 0x0
	private tk2dUIItem btn; // 0x18

	// Methods
	public void .ctor(); // 0x1002BED9C
	private void Start(); // 0x1002BEDA4
	private void OnUp(); // 0x1002BEE4C
	private void Update(); // 0x1002BEEB0
}

// Namespace: 
public class MenuBackground : MonoBehaviour // TypeDefIndex: 3939
{
	// Methods
	public void .ctor(); // 0x1002BEF60
	private void Start(); // 0x1002BEF68
}

// Namespace: 
public class MenuBattleResults : MonoBehaviour // TypeDefIndex: 3940
{
	// Fields
	public OnEventDgt AnimationEnd; // 0x18
	public States state; // 0x20
	public GameObject cartButton; // 0x28
	public WinSettings winSettings; // 0x30
	public NumberAnimater dollars; // 0x38
	public float dollarsOffset; // 0x40
	public bool dollarsParticle; // 0x44
	public NumberAnimater cry; // 0x48
	public float cryOffset; // 0x50
	public bool cryParticle; // 0x54
	public NumberAnimater rankpoints; // 0x58
	public NumberAnimater goose_penalty; // 0x60
	public float rankpointsOffset; // 0x68
	public bool rankpointsParticle; // 0x6C
	public NumberAnimater xp; // 0x70
	public float xpOffset; // 0x78
	public bool xpParticle; // 0x7C
	public NumberAnimater stamina; // 0x80
	public float staminaOffset; // 0x88
	public bool staminaParticle; // 0x8C
	public NumberAnimater shoots; // 0x90
	public float shootsOffset; // 0x98
	public NumberAnimater kills; // 0xA0
	public float killsOffset; // 0xA8
	public NumberAnimater accuary; // 0xB0
	public float accuaryOffset; // 0xB8
	public NumberAnimater headshoots; // 0xC0
	public float headshotsOffset; // 0xC8
	public NumberAnimater deaths; // 0xD0
	public float deathsOffset; // 0xD8
	public tk2dUIProgressBar rankpointsBar; // 0xE0
	public tk2dTextMesh rankpointsTextOnBar; // 0xE8
	public MenuTitle leftTitle; // 0xF0
	public MenuTitle rightTitle; // 0xF8
	public float rankpointsBottomOffset; // 0x100
	public bool blitzkrieg; // 0x104
	public SpritesAlphaControl blitzkriegOnState; // 0x108
	public float blitzkriegAlpha; // 0x110
	public bool coldblood; // 0x114
	public SpritesAlphaControl coldbloodOnState; // 0x118
	public float coldbloodAlpha; // 0x120
	public bool best; // 0x124
	public SpritesAlphaControl bestOnState; // 0x128
	public float bestAlpha; // 0x130
	public MenuStamina menuStamina; // 0x138
	private long onEnableRankpointsValue; // 0x140
	private int onEnableDollarsValue; // 0x148
	private int onEnableCryValue; // 0x14C
	private long leftIconRankpointsValue; // 0x150
	private float rankpointsBarValue; // 0x158
	private float oldrankpointsBarValue; // 0x15C
	private int onEnableExperianceValue; // 0x160
	public tk2dUIItem facebookButton; // 0x168
	public tk2dUIItem menuButton; // 0x170
	private float battle_end_SoundTime; // 0x178
	private MenuBackButton backbtn; // 0x180
	private bool adv_shown; // 0x188
	private static Dictionary`2<string, int> <>f__switch$map9; // 0x0

	// Methods
	public void .ctor(); // 0x1002BEFB4
	private void Awake(); // 0x1002BEFBC
	private void Start(); // 0x1002BF1D0
	private void OnFacebookClick(); // 0x1002BF2B0
	private void OnFacebookClick2(tk2dUIItem item); // 0x1002BF370
	private void OnExitClick(); // 0x1002BF3F0
	private void OnVideo(); // 0x1002BF488
	private void OnEnable(); // 0x1002BF48C
	private IEnumerator DestroySound(string clipName, float waitTime); // 0x1002BF6EC
	private void Update(); // 0x1002BF778
	public void OnAnimationEnd(AnimationEvent animationState); // 0x1002C0488
	public static void ReloadDialog(); // 0x1002C2054
	private void OnRateApp(); // 0x1002C2A7C
	private void BonusClick(tk2dUIItem item); // 0x1002C2BB8
	private BonusDialog CreateBonusDialog(string header, string subheader, string getbuttonText, string facebookButtonText); // 0x1002C11E4
	public static void OnNewItemOpened(ISFSObject response); // 0x1002C13E8
	private void <Awake>m__B2(MenuElements element); // 0x1002C2CC4
	private void <Awake>m__B3(MenuElements element); // 0x1002C2E38
	private void <OnAnimationEnd>m__B4(); // 0x1002C2FAC
}

// Namespace: 
public class WinSettings // TypeDefIndex: 3941
{
	// Fields
	public bool isWin; // 0x10
	public Color winColor; // 0x14
	public Color defeatColor; // 0x24
	public tk2dTextMesh headerTextMesh; // 0x38
	public tk2dSlicedSprite borderSprite; // 0x40

	// Methods
	public void .ctor(); // 0x1002C3694
}

// Namespace: 
public class NumberAnimater // TypeDefIndex: 3942
{
	// Fields
	public float value; // 0x10
	public GUINumberAnimator animator; // 0x18
	public ParticleSystem particle; // 0x20

	// Methods
	public void .ctor(); // 0x1002C3574
}

// Namespace: 
public class MenuTitle // TypeDefIndex: 3943
{
	// Fields
	public tk2dSprite titleIcon; // 0x10
	public tk2dTextMesh titleText; // 0x18

	// Methods
	public void .ctor(); // 0x1002C356C
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 3944
{
	// Fields
	public int value__; // 0x10
	public const States animation = 0; // 0x0
	public const States idle = 1; // 0x0

}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 3945
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002C357C
	public virtual void Invoke(); // 0x1002C358C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1002C3628
	public virtual void EndInvoke(IAsyncResult result); // 0x1002C3688
}

// Namespace: 
private sealed class <DestroySound>c__Iterator42 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3946
{
	// Fields
	internal float waitTime; // 0x10
	internal string clipName; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal float <$>waitTime; // 0x30
	internal string <$>clipName; // 0x38

	// Methods
	public void .ctor(); // 0x1002BF770
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002C2FB0
	private object System.Collections.IEnumerator.get_Current(); // 0x1002C2FB8
	public bool MoveNext(); // 0x1002C2FC0
	public void Dispose(); // 0x1002C30C0
	public void Reset(); // 0x1002C30CC
}

// Namespace: 
private sealed class <ReloadDialog>c__AnonStoreyEC // TypeDefIndex: 3947
{
	// Fields
	internal YesNoDialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x1002C3278
	internal void <>m__B5(); // 0x1002C3280
}

// Namespace: 
private sealed class <OnNewItemOpened>c__AnonStoreyED // TypeDefIndex: 3948
{
	// Fields
	internal MessageGirl02Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x1002C2CAC
	internal void <>m__B6(); // 0x1002C3120
}

// Namespace: 
private sealed class <OnNewItemOpened>c__AnonStoreyEE // TypeDefIndex: 3949
{
	// Fields
	internal MessageGirl02Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x1002C2CB4
	internal void <>m__B7(); // 0x1002C3174
}

// Namespace: 
private sealed class <OnNewItemOpened>c__AnonStoreyEF // TypeDefIndex: 3950
{
	// Fields
	internal MessageGirl02Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x1002C2CBC
	internal void <>m__B8(); // 0x1002C31C8
}

// Namespace: 
private sealed class <OnNewItemOpened>c__AnonStoreyF0 // TypeDefIndex: 3951
{
	// Fields
	internal MessageGirl02Dialog dialog; // 0x10

	// Methods
	public void .ctor(); // 0x1002C321C
	internal void <>m__B9(); // 0x1002C3224
}

// Namespace: 
public class MenuBattleResultsProgress : MonoBehaviour // TypeDefIndex: 3952
{
	// Fields
	public tk2dTextMesh rp_label; // 0x18
	public tk2dSprite rp_icon; // 0x20
	public tk2dSlicedSprite progress_fill; // 0x28
	public float offset; // 0x30
	public Color inColor; // 0x34
	public Color outColor; // 0x44

	// Methods
	public void .ctor(); // 0x1002C369C
	private void Update(); // 0x1002C36A4
}

// Namespace: 
public class MenuBottomLockBtn : MonoBehaviour // TypeDefIndex: 3953
{
	// Fields
	private BoxCollider box; // 0x18
	public Color textColor; // 0x20
	public Color iconColor; // 0x30
	public tk2dSprite icon; // 0x40
	public tk2dTextMesh text; // 0x48
	public Color normaltextColor; // 0x50
	public Color normaliconColor; // 0x60

	// Methods
	public void .ctor(); // 0x1002C38FC
	private void Start(); // 0x1002C3904
	public void Setup(); // 0x1002C3908
	private void Update(); // 0x1002C3AE0
	private void OnDestroy(); // 0x1002C3BF4
	public void UnLock(); // 0x1002C3CEC
}

// Namespace: 
public class MenuButtonGlowAnimate : MonoBehaviour // TypeDefIndex: 3954
{
	// Fields
	public tk2dSlicedSprite glow; // 0x18
	public tk2dBaseSprite spriteglow; // 0x20
	public tk2dBaseSprite[] sprites; // 0x28
	public float speed; // 0x30
	public float timeOffset; // 0x34
	public float intervalMin; // 0x38
	public float intervalMax; // 0x3C
	public bool animate; // 0x40
	public float minglow; // 0x44
	public float maxglow; // 0x48
	private float[] velo; // 0x50
	private tk2dUIItem button; // 0x58
	private States state; // 0x60
	private Color glowColor; // 0x64
	private float oldTime; // 0x74
	private float eventInterval; // 0x78

	// Methods
	public void .ctor(); // 0x1002C3DE4
	private void Start(); // 0x1002C3E88
	private void SetEventInterval(); // 0x1002C4104
	private void Reset(); // 0x1002C4134
	private void OnDown(); // 0x1002C4178
	private void OnUp(); // 0x1002C4278
	private void set_spriteColor(Color value); // 0x1002C41D4
	private void Update(); // 0x1002C42D4
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 3955
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States animateIn = 1; // 0x0
	public const States animateOut = 2; // 0x0

}

// Namespace: 
public abstract class MenuStateButton : MonoBehaviour // TypeDefIndex: 3956
{
	// Fields
	public tk2dUIItem button; // 0x18
	public GameObject blueSpites; // 0x20
	public GameObject greenSprites; // 0x28
	public GameObject yelowSprites; // 0x30
	public tk2dTextMesh amountText; // 0x38
	public int cost; // 0x40
	protected MoneyTypes costType; // 0x44
	public tk2dTextMesh[] costText; // 0x48
	public tk2dSprite iconRequired; // 0x50
	public tk2dSprite requiredCupSprite; // 0x58
	public tk2dTextMesh textRequired; // 0x60
	public tk2dTextMesh textRequiredMaxPart; // 0x68
	public tk2dTextMesh textRequiredTuning; // 0x70
	public GameObject loadinggo; // 0x78
	public Transform spiner; // 0x80
	public float angle; // 0x88
	public tk2dTextMesh textWait; // 0x90
	public ButtonType buttonType; // 0x98
	protected int requiredCup; // 0x9C
	protected long requiredRankpoints; // 0xA0

	// Methods
	protected void .ctor(); // 0x10032170C
	public abstract void SetCost(int value); // 0
	public virtual void SetRequiredMaxPart(Weapon currentWeapon); // 0x100321714
	public virtual void SetRequiredMaxPart(Helmet currentHelmet); // 0x100321718
	public abstract void SetRequiredTuning(int tuning_required); // 0
	public abstract void SetRemains(string requiredbtntext); // 0
	public void SetRequired(long rankpoints, string requiredbtntext); // 0x10032171C
	public void SetRequiredCupIcon(int cup); // 0x1003218F4
}

// Namespace: 
public sealed class ButtonType : Enum // TypeDefIndex: 3957
{
	// Fields
	public int value__; // 0x10
	public const ButtonType upgrade = 0; // 0x0
	public const ButtonType installed = 1; // 0x0
	public const ButtonType required = 2; // 0x0
	public const ButtonType requiredMaxPart = 3; // 0x0
	public const ButtonType requiredTuning = 4; // 0x0
	public const ButtonType requiredVeteran = 5; // 0x0
	public const ButtonType requiredCup = 6; // 0x0
	public const ButtonType inDevelop = 7; // 0x0
	public const ButtonType delivery = 8; // 0x0
	public const ButtonType install = 9; // 0x0

}

// Namespace: 
public class MenuCamouflageButton : MenuStateButton // TypeDefIndex: 3958
{
	// Fields
	private MenuCamouflageButtons menuCamBtns; // 0xA8

	// Methods
	public void .ctor(); // 0x1002C4540
	private void Update(); // 0x1002C4548
	private void Awake(); // 0x1002C4624
	public override void SetCost(int value); // 0x1002C4744
	public override void SetRequiredMaxPart(Weapon currentWeapon); // 0x1002C4CCC
	public override void SetRequiredMaxPart(Helmet currentHelmet); // 0x1002C4D4C
	public override void SetRequiredTuning(int tuning_required); // 0x1002C4DCC
	public override void SetRemains(string requiredbtntext); // 0x1002C4EF0
	private void OnClick(); // 0x1002C50A8
	private void BuyCamo(Items item); // 0x1002C5504
	private void BuyItem(Items item); // 0x1002C5640
	private void InputEnabled(bool inputEnabled); // 0x1002C4B78
	private void OnEnable(); // 0x1002C5DF8
	private void OnDisable(); // 0x1002C6084
	private void OnWeaponHandleBuyed(TuningGroups group_type, int item_type, int tuning_type); // 0x1002C62E8
	private void OnHelmetHandleBuyed(TuningGroups group_type, int item_type, int tuning_type); // 0x1002C65F8
	private void OnWeaponCamoRemoved(); // 0x1002C68F4
}

// Namespace: 
private sealed class <OnClick>c__AnonStoreyF1 // TypeDefIndex: 3959
{
	// Fields
	internal Items item; // 0x10
	internal MenuCamouflageButton <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002C54F4
	internal void <>m__BA(); // 0x1002C69E0
	internal void <>m__BB(); // 0x1002C6A00
}

// Namespace: 
public class MenuCamouflageButtons : MenuStateButtons // TypeDefIndex: 3960
{
	// Methods
	public void .ctor(); // 0x1002C6A20
}

// Namespace: 
public abstract class MenuCamouflages : MonoBehaviour // TypeDefIndex: 3961
{
	// Fields
	public Items item; // 0x18
	public MenuStateButtons buttons; // 0x20
	protected Tuning selectedcamo; // 0x28
	public BottomScroll bottomNavigator; // 0x30
	protected Weapon activeWeapon; // 0x38
	protected Helmet activeHelmet; // 0x40

	// Methods
	protected void .ctor(); // 0x1002C6A28
	public Weapon GetCurrentWeapon(); // 0x1002C54FC
	public Helmet GetCurrentHelmet(); // 0x1002C6A30
	public Tuning GetTuning(); // 0x1002C4B70
	public abstract void ApplyStats(); // 0
	public abstract void LockBottomButtons(); // 0
}

// Namespace: 
public class MenuCampaignButton : MonoBehaviour // TypeDefIndex: 3962
{
	// Fields
	public tk2dTextMesh value; // 0x18
	public tk2dTextMesh valueTime; // 0x20
	public GameObject dailyRewardsBtn; // 0x28
	public tk2dTextMesh dailyRewardsTime1; // 0x30
	private int counter; // 0x38
	private static Dictionary`2<int, int> shown; // 0x0
	private bool nickEntered; // 0x3C

	// Methods
	public void .ctor(); // 0x1002C6A38
	private void Start(); // 0x1002C6A48
	private void HandleOnClick(); // 0x1002C6C88
	private void Update(); // 0x1002C72D8
	public static void ShowMessages(bool force); // 0x1002C6C90
}

// Namespace: 
public class MenuCreateSquad : DialogBasic // TypeDefIndex: 3963
{
	// Fields
	public tk2dUIItem CreateSquadButton; // 0x98
	public tk2dUIItem FindSquadButton; // 0xA0
	public tk2dUIItem infoSquadButton; // 0xA8
	private tk2dUIItem m_BackButton; // 0xB0
	private tk2dCameraAnchor m_Anchor; // 0xB8

	// Methods
	public void .ctor(); // 0x1002C7634
	private void Awake(); // 0x1002C769C
	public override void Start(); // 0x1002C76A0
	public override void Show(); // 0x1002C7834
	public override void SetShowed(); // 0x1002C787C
	private void OnEnable(); // 0x1002C78C4
	public void Init(); // 0x1002C78C8
	private void CreateSquad(); // 0x1002C78CC
	private void ShowInfoSquad(); // 0x1002C7AD0
	private void FindSquad(); // 0x1002C7B74
	private void <Start>m__BC(); // 0x1002C7D60
}

// Namespace: 
public class MenuCry : MonoBehaviour // TypeDefIndex: 3964
{
	// Fields
	public ParticleSystem particle; // 0x18
	public Transform icon; // 0x20
	public double speed; // 0x28
	private tk2dTextMesh textMesh; // 0x30
	private double value; // 0x38
	private NumberFormatInfo numberFormatInfo; // 0x40
	private bool isAnimate; // 0x48
	private double velo; // 0x50

	// Methods
	public void .ctor(); // 0x1002C7DC8
	private void Start(); // 0x1002C7DD8
	private void OnDestroy(); // 0x1002C80DC
	public void OnCryChange(); // 0x1002C821C
	private IEnumerator Animate(); // 0x1002C83C4
	private void SetMesh(); // 0x1002C8058
}

// Namespace: 
private sealed class <Animate>c__Iterator43 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3965
{
	// Fields
	internal float <i>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal MenuCry <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002C8430
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002C8438
	private object System.Collections.IEnumerator.get_Current(); // 0x1002C8440
	public bool MoveNext(); // 0x1002C8448
	public void Dispose(); // 0x1002C879C
	public void Reset(); // 0x1002C87A8
}

// Namespace: 
public class MenuDollars : MonoBehaviour // TypeDefIndex: 3966
{
	// Fields
	public ParticleSystem particle; // 0x18
	public Transform icon; // 0x20
	public double speed; // 0x28
	private tk2dTextMesh textMesh; // 0x30
	private double value; // 0x38
	private NumberFormatInfo numberFormatInfo; // 0x40
	private bool isAnimate; // 0x48
	private double velo; // 0x50

	// Methods
	public void .ctor(); // 0x1002C87FC
	private void Start(); // 0x1002C880C
	private void OnDestroy(); // 0x1002C8B10
	public void OnDollarsChange(); // 0x1002C8C50
	private IEnumerator Animate(); // 0x1002C8DF8
	private void SetMesh(); // 0x1002C8A8C
	public static double SmoothDamp(double current, double target, double currentVelocity, double smoothTime); // 0x1002C8678
	public static double Clamp(double value, double min, double max); // 0x1002C8E6C
}

// Namespace: 
private sealed class <Animate>c__Iterator44 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3967
{
	// Fields
	internal float <i>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal MenuDollars <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002C8E64
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002C8E88
	private object System.Collections.IEnumerator.get_Current(); // 0x1002C8E90
	public bool MoveNext(); // 0x1002C8E98
	public void Dispose(); // 0x1002C90C8
	public void Reset(); // 0x1002C90D4
}

// Namespace: 
public class MenuDroneButton : MonoBehaviour // TypeDefIndex: 3968
{
	// Fields
	public int type; // 0x18

	// Methods
	public void .ctor(); // 0x1002C9128
	private void Start(); // 0x1002C9130
}

// Namespace: 
public class MenuDronesLoaded : MonoBehaviour // TypeDefIndex: 3969
{
	// Fields
	public OnLoadedDeligate OnLoaded; // 0x18
	public LoadingBundle loadingBundle; // 0x20
	public GameObject loader; // 0x28
	public GameObject loadedElement; // 0x30
	public DroneController controller; // 0x38

	// Methods
	public void .ctor(); // 0x1002C9134
	private void OnEnable(); // 0x1002C913C
	private void OnDisable(); // 0x1002C9300
	private void OnStartDownload(); // 0x1002C94C4
	private void OnDestroy(); // 0x1002C94E4
	private void OnDownloaded(List`1<GameObject> objects); // 0x1002C96A8
}

// Namespace: 
public sealed class OnLoadedDeligate : MulticastDelegate // TypeDefIndex: 3970
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002C96AC
	public virtual void Invoke(int helmetType, GameObject helmet); // 0x1002C96BC
	public virtual IAsyncResult BeginInvoke(int helmetType, GameObject helmet, AsyncCallback callback, object object); // 0x1002C974C
	public virtual void EndInvoke(IAsyncResult result); // 0x1002C9810
}

// Namespace: 
public class MenuElements : MonoBehaviour // TypeDefIndex: 3971
{
	// Fields
	private Vector3 oldPos; // 0x18
	public Transform background; // 0x28
	public Transform bottomMenu; // 0x30
	public Transform[] elements; // 0x38
	public bool zero; // 0x40
	public Dictionary`2<string, object> args; // 0x48
	public int historyIndex; // 0x50

	// Methods
	public void .ctor(); // 0x1002C981C
	private void Start(); // 0x1002C988C
	private void Update(); // 0x1002C9A78
}

// Namespace: 
public class MenuElementsDisable : MonoBehaviour // TypeDefIndex: 3972
{
	// Fields
	private MenuElements menuElements; // 0x18

	// Methods
	public void .ctor(); // 0x1002C9F14
	private void Start(); // 0x1002C9F1C
	public void Enable(bool val); // 0x1002C9F24
}

// Namespace: 
public class MenuElementsDisable2 : MonoBehaviour // TypeDefIndex: 3973
{
	// Methods
	public void .ctor(); // 0x1002CA104
	private void Awake(); // 0x1002CA10C
	public void Enable(bool val); // 0x1002CA114
}

// Namespace: 
public class MenuHelmetAero : MenuCamouflages // TypeDefIndex: 3974
{
	// Fields
	public tk2dTextMesh namecamo; // 0x48
	public MenuUpgradeStats stats; // 0x50
	public GameObject loader; // 0x58
	public MenuWeaponLights lights; // 0x60
	public Transform model; // 0x68
	public Menu3DElementInputRotate inputRotate; // 0x70
	public MenuHelmetsLoaded menuHelmetLoaded; // 0x78
	public GameObject modelBlock; // 0x80
	public GameObject camoBlock; // 0x88
	public Transform infoBlock; // 0x90
	public GameObject paintStatPrefab; // 0x98
	public AnimStatus animStatus; // 0xA0
	public float switchSpeed; // 0xA4
	private BundleOptions selectedcamobundle; // 0xA8
	private Transform lastselectedtransform; // 0xB0
	private MenuNavigatorEvents menuNavigatorEvents; // 0xB8
	private static OnMenuDgt <>f__am$cache10; // 0x0

	// Methods
	public void .ctor(); // 0x1002CA2DC
	private void Awake(); // 0x1002CA2EC
	private void Start(); // 0x1002CA43C
	private void OnDownloaded(List`1<GameObject> objects); // 0x1002CA8D8
	private void OnDownloadError(); // 0x1002CA8DC
	private void OnEnable(); // 0x1002CB218
	public override void LockBottomButtons(); // 0x1002CB908
	private void OnDisable(); // 0x1002CBE78
	private void OnStartCamoDownload(); // 0x1002CC150
	private void OnDownloadedCamo(List`1<Texture2D> objects); // 0x1002CC194
	private void OnBottomItemSelect(Transform t); // 0x1002CA90C
	private void CalculateStats(); // 0x1002D06F4
	public override void ApplyStats(); // 0x1002D08C0
	private void ClearInfoBlock(); // 0x1002CC198
	private void SetupInfoBlock(Tuning camo); // 0x1002CC4A8
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, bool applyPermament, bool applyEasy); // 0x1002CA5DC
	private void <Awake>m__BD(MenuElements element); // 0x1002D095C
	private static void <Awake>m__BE(MenuElements element); // 0x1002D0978
}

// Namespace: 
public sealed class AnimStatus : Enum // TypeDefIndex: 3975
{
	// Fields
	public int value__; // 0x10
	public const AnimStatus idle = 0; // 0x0
	public const AnimStatus hiding = 1; // 0x0
	public const AnimStatus showing = 2; // 0x0

}

// Namespace: 
public class MenuHelmetCamouflages : MenuCamouflages // TypeDefIndex: 3976
{
	// Fields
	public tk2dTextMesh namecamo; // 0x48
	public MenuUpgradeStats stats; // 0x50
	public GameObject loader; // 0x58
	public MenuWeaponLights lights; // 0x60
	public Transform model; // 0x68
	public Menu3DElementInputRotate inputRotate; // 0x70
	public MenuHelmetsLoaded menuHelmetLoaded; // 0x78
	public GameObject modelBlock; // 0x80
	public GameObject camoBlock; // 0x88
	public Transform infoBlock; // 0x90
	public GameObject paintStatPrefab; // 0x98
	public AnimStatus animStatus; // 0xA0
	public float switchSpeed; // 0xA4
	private BundleOptions selectedcamobundle; // 0xA8
	private Transform lastselectedtransform; // 0xB0
	private MenuNavigatorEvents menuNavigatorEvents; // 0xB8
	private static OnMenuDgt <>f__am$cache10; // 0x0

	// Methods
	public void .ctor(); // 0x1002D09DC
	private void Awake(); // 0x1002D09EC
	private void Start(); // 0x1002D0B00
	private void OnDownloaded(List`1<GameObject> objects); // 0x1002D0F6C
	private void OnDownloadError(); // 0x1002D0F70
	private void OnEnable(); // 0x1002D18AC
	public override void LockBottomButtons(); // 0x1002D1CE0
	private void OnDisable(); // 0x1002D2250
	private void OnStartCamoDownload(); // 0x1002D2268
	private void OnDownloadedCamo(List`1<Texture2D> objects); // 0x1002D22AC
	private void OnBottomItemSelect(Transform t); // 0x1002D0FA0
	private void CalculateStats(); // 0x1002D67F0
	public override void ApplyStats(); // 0x1002D699C
	private void ClearInfoBlock(); // 0x1002D22B0
	private void SetupInfoBlock(Tuning camo); // 0x1002D25C0
	private void Update(); // 0x1002D6A38
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, bool applyPermament, bool applyEasy); // 0x1002D0CA0
	private void <Awake>m__BF(MenuElements element); // 0x1002D6A88
	private static void <Awake>m__C0(MenuElements element); // 0x1002D6AA4
}

// Namespace: 
public sealed class AnimStatus : Enum // TypeDefIndex: 3977
{
	// Fields
	public int value__; // 0x10
	public const AnimStatus idle = 0; // 0x0
	public const AnimStatus hiding = 1; // 0x0
	public const AnimStatus showing = 2; // 0x0

}

// Namespace: 
public class MenuHelmetsLoaded : MonoBehaviour // TypeDefIndex: 3978
{
	// Fields
	public OnLoadedDeligate OnLoaded; // 0x18
	public LoadingBundle loadingBundle; // 0x20
	public GameObject loader; // 0x28
	public GameObject loadedElement; // 0x30
	public HelmetController helmetcontroller; // 0x38

	// Methods
	public void .ctor(); // 0x1002D6B08
	private void OnEnable(); // 0x1002D6B10
	private void OnDisable(); // 0x1002D6CD4
	private void OnStartDownload(); // 0x1002D6E98
	private void OnDestroy(); // 0x1002D6EB8
	private void OnDownloaded(List`1<GameObject> objects); // 0x1002D707C
}

// Namespace: 
public sealed class OnLoadedDeligate : MulticastDelegate // TypeDefIndex: 3979
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002D7080
	public virtual void Invoke(int helmetType, GameObject helmet); // 0x1002D7090
	public virtual IAsyncResult BeginInvoke(int helmetType, GameObject helmet, AsyncCallback callback, object object); // 0x1002D7120
	public virtual void EndInvoke(IAsyncResult result); // 0x1002D71E4
}

// Namespace: 
public class MenuLevel : MonoBehaviour // TypeDefIndex: 3980
{
	// Fields
	public tk2dTextMesh levelMesh; // 0x18
	public tk2dUIProgressBar levelBar; // 0x20
	public int oldexperience; // 0x28
	public GameObject bonusDialogPrefab; // 0x30
	public MenuStamina menuStamina; // 0x38

	// Methods
	public void .ctor(); // 0x1002D71F0
	private void Start(); // 0x1002D71F8
	private void Update(); // 0x1002D7510
	private void OnLevelUp(Reward reward); // 0x1002D7598
	private IEnumerator WaitForBattleResults(Reward reward); // 0x1002D7794
	public void DoBonusDialog(Reward reward); // 0x1002D7810
	private void BonusClick(tk2dUIItem item); // 0x1002D7C9C
	private void Calculatelevel(); // 0x1002D7328
	private void UpdateLevel(int value); // 0x1002D7DF4
	private BonusDialog CreateBonusDialog(string header, string subheader, string getbuttonText, string facebookButtonText); // 0x1002D7B14
	private void OnDestroy(); // 0x1002D7E54
	private void OnFacebookClick(tk2dUIItem item); // 0x1002D7F7C
}

// Namespace: 
private sealed class <WaitForBattleResults>c__Iterator45 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3981
{
	// Fields
	internal MenuBattleResults <battleResults>__0; // 0x10
	internal bool <continueloop>__1; // 0x18
	internal Reward reward; // 0x20
	internal int $PC; // 0x28
	internal object $current; // 0x30
	internal Reward <$>reward; // 0x38
	internal MenuLevel <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x1002D7B0C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D7FFC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D8004
	public bool MoveNext(); // 0x1002D800C
	public void Dispose(); // 0x1002D81A4
	public void Reset(); // 0x1002D81B0
}

// Namespace: 
public class MenuLights : MonoBehaviour // TypeDefIndex: 3982
{
	// Fields
	public static List`1<GameObject> lights; // 0x0

	// Methods
	public void .ctor(); // 0x1002D8204
	private void Awake(); // 0x1002D820C
	private void OnDestroy(); // 0x1002D86F8
	private void Download(); // 0x1002D8278
	private void CreateLights(); // 0x1002D8314
}

// Namespace: 
public class MenuLoader : MonoBehaviour // TypeDefIndex: 3983
{
	// Fields
	public GameObject loader; // 0x18
	public tk2dUIProgressBar progressbar; // 0x20

	// Methods
	public void .ctor(); // 0x1002D9000
	private void Update(); // 0x1002D9008
}

// Namespace: 
public class MenuLoaderActivateOffset : MonoBehaviour // TypeDefIndex: 3984
{
	// Fields
	public GameObject loader; // 0x18
	public tk2dUIProgressBar progressbar; // 0x20
	private float waitsecs; // 0x28
	private float onenabletime; // 0x2C
	private float oldprogressvalue; // 0x30

	// Methods
	public void .ctor(); // 0x1002D90AC
	public void OnEnable(); // 0x1002D90BC
	private void Update(); // 0x1002D90E8
}

// Namespace: 
public class MenuMainLastWeekRating : MonoBehaviour // TypeDefIndex: 3985
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public RatingType ratingType; // 0x28

	// Methods
	public void .ctor(); // 0x1002D9228
	private void OnEnable(); // 0x1002D9230
	private void OnDisable(); // 0x1002D9468
	private IEnumerator GetRating(); // 0x1002D9390
	private IEnumerator GetRegionRating(); // 0x1002D92B8
	private IEnumerator GetMercRating(); // 0x1002D93FC
	private IEnumerator SquadGetRatings(); // 0x1002D9324
}

// Namespace: 
public sealed class RatingType : Enum // TypeDefIndex: 3986
{
	// Fields
	public int value__; // 0x10
	public const RatingType personal = 0; // 0x0
	public const RatingType squad = 1; // 0x0
	public const RatingType region = 2; // 0x0
	public const RatingType merc = 3; // 0x0

}

// Namespace: 
private sealed class <GetRating>c__Iterator46 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3987
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuMainLastWeekRating <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002D94FC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D9720
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D9728
	public bool MoveNext(); // 0x1002D9730
	public void Dispose(); // 0x1002D98C4
	public void Reset(); // 0x1002D98D0
}

// Namespace: 
private sealed class <GetRegionRating>c__Iterator47 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3988
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuMainLastWeekRating <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002D9504
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D9924
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D992C
	public bool MoveNext(); // 0x1002D9934
	public void Dispose(); // 0x1002D9AC8
	public void Reset(); // 0x1002D9AD4
}

// Namespace: 
private sealed class <GetMercRating>c__Iterator48 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3989
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuMainLastWeekRating <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002D950C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D951C
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D9524
	public bool MoveNext(); // 0x1002D952C
	public void Dispose(); // 0x1002D96C0
	public void Reset(); // 0x1002D96CC
}

// Namespace: 
private sealed class <SquadGetRatings>c__Iterator49 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3990
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuMainLastWeekRating <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002D9514
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D9B28
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D9B30
	public bool MoveNext(); // 0x1002D9B38
	public void Dispose(); // 0x1002D9CCC
	public void Reset(); // 0x1002D9CD8
}

// Namespace: 
public class MenuMainRatings : MonoBehaviour // TypeDefIndex: 3991
{
	// Fields
	public GameObject[] ratingViews; // 0x18
	private static bool isDone; // 0x0

	// Methods
	public void .ctor(); // 0x1002D9D2C
	private static void .cctor(); // 0x1002D9D34
	private void OnEnable(); // 0x1002D9D38
	private void OnDisable(); // 0x1002D9EE8
	private IEnumerator СhangeRating(); // 0x1002D9E7C
}

// Namespace: 
private sealed class <СhangeRating>c__Iterator4A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 3992
{
	// Fields
	internal int <i>__0; // 0x10
	internal int <j>__1; // 0x14
	internal int <next>__2; // 0x18
	internal int <x>__3; // 0x1C
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal MenuMainRatings <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1002D9F3C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002D9F44
	private object System.Collections.IEnumerator.get_Current(); // 0x1002D9F4C
	public bool MoveNext(); // 0x1002D9F54
	public void Dispose(); // 0x1002DA10C
	public void Reset(); // 0x1002DA118
}

// Namespace: 
public class MenuMainRatingsBase : MonoBehaviour // TypeDefIndex: 3993
{
	// Fields
	public MenuMainRating prevweekrating; // 0x18

	// Methods
	public void .ctor(); // 0x1002DA16C
}

// Namespace: 
public class MenuMainRatingPosition // TypeDefIndex: 3994
{
	// Fields
	public long userdbid; // 0x10
	public tk2dSprite rankicon; // 0x18
	public tk2dSprite avataricon; // 0x20
	public tk2dSprite flagicon; // 0x28
	public tk2dTextMesh nickname; // 0x30
	public tk2dTextMesh title; // 0x38
	public long rankpointsforimage; // 0x40
	public GameObject rowgo; // 0x48

	// Methods
	public void .ctor(); // 0x1002DA17C
}

// Namespace: 
public class MenuMainRating // TypeDefIndex: 3995
{
	// Fields
	public float angle; // 0x10
	public Transform spiner; // 0x18
	public GameObject loadinggo; // 0x20
	public GameObject contentgo; // 0x28
	public List`1<MenuMainRatingPosition> rating; // 0x30

	// Methods
	public void .ctor(); // 0x1002DA174
}

// Namespace: 
public class MenuMainRatingsFriend : MenuMainRatingsBase // TypeDefIndex: 3996
{
	// Methods
	public void .ctor(); // 0x1002DA184
	private void Start(); // 0x1002DA18C
	private void OnEnable(); // 0x1002DA2B4
	private void OnGetPrevWeekRatings(ISFSArray ratingarray); // 0x1002DA45C
	private void Update(); // 0x1002DADCC
	private void OnDestroy(); // 0x1002DAE4C
}

// Namespace: 
public class MenuMainRatingsMerc : MenuMainRatingsBase // TypeDefIndex: 3997
{
	// Methods
	public void .ctor(); // 0x1002DAF74
	private void Start(); // 0x1002DAF7C
	private void OnEnable(); // 0x1002DB0A4
	private void OnGetPrevWeekRatings(ISFSArray ratingarray); // 0x1002DB24C
	private void Update(); // 0x1002DBBBC
	private void OnDestroy(); // 0x1002DBC3C
}

// Namespace: 
public class MenuMainRatingsRegion : MenuMainRatingsBase // TypeDefIndex: 3998
{
	// Methods
	public void .ctor(); // 0x1002DBD64
	private void Start(); // 0x1002DBD6C
	private void OnEnable(); // 0x1002DBE94
	private void OnGetPrevWeekRatings(ISFSArray ratingarray); // 0x1002DC03C
	private void Update(); // 0x1002DC9AC
	private void OnDestroy(); // 0x1002DCA2C
}

// Namespace: 
public class MenuMainRatingsSquad : MonoBehaviour // TypeDefIndex: 3999
{
	// Fields
	public MenuMainRating prevweekrating; // 0x18

	// Methods
	public void .ctor(); // 0x1002DCB54
	private void Start(); // 0x1002DCB5C
	private void OnEnable(); // 0x1002DCC84
	private void OnSquadRatingsPrevWeek(List`1<Squad> ratingarray); // 0x1002DCE2C
	private void Update(); // 0x1002DD094
	private void OnDestroy(); // 0x1002DD114
}

// Namespace: 
public class MenuMainRatingPosition // TypeDefIndex: 4000
{
	// Fields
	public long userdbid; // 0x10
	public tk2dSprite rankicon; // 0x18
	public tk2dSprite flagicon; // 0x20
	public tk2dTextMesh nickname; // 0x28
	public tk2dTextMesh title; // 0x30
	public int rankpointsforimage; // 0x38
	public GameObject rowgo; // 0x40

	// Methods
	public void .ctor(); // 0x1002DD244
}

// Namespace: 
public class MenuMainRating // TypeDefIndex: 4001
{
	// Fields
	public float angle; // 0x10
	public Transform spiner; // 0x18
	public GameObject loadinggo; // 0x20
	public GameObject contentgo; // 0x28
	public List`1<MenuMainRatingPosition> rating; // 0x30

	// Methods
	public void .ctor(); // 0x1002DD23C
}

// Namespace: 
public class MenuMapElement : MonoBehaviour // TypeDefIndex: 4002
{
	// Fields
	public tk2dTextMesh nameMesh; // 0x18
	public GameObject image; // 0x20
	public tk2dTextMesh staminaLabelMesh; // 0x28
	public tk2dTextMesh staminaValueMesh; // 0x30
	public tk2dTextMesh levelLabelMesh; // 0x38
	public tk2dTextMesh levelValueMesh; // 0x40
	public tk2dUIItem playButton; // 0x48
	public tk2dUIItem lockButton; // 0x50
	public tk2dTextMesh mapDifficulty; // 0x58
	public tk2dTextMesh maxPlayers; // 0x60
	public tk2dSlicedSprite darkerImage; // 0x68
	public tk2dSlicedSprite darkerFull; // 0x70
	public int requiredLevel; // 0x78
	public int requiredStamina; // 0x7C
	public int max_players; // 0x80
	public bool forceLocked; // 0x84
	public int platoon_id; // 0x88
	public int territory_id; // 0x8C
	public int t_image_id; // 0x90
	public tk2dTextMesh squadControl; // 0x98
	public tk2dTextMesh squadControlTime; // 0xA0
	public tk2dTextMesh income; // 0xA8
	public tk2dTextMesh toAttackText; // 0xB0
	public int prime_time; // 0xB8
	public tk2dTextMesh timeText; // 0xC0
	public tk2dTextMesh bid_squad_id; // 0xC8
	public int min_bid; // 0xD0
	public tk2dTextMesh attacker_squad_text; // 0xD8
	public tk2dTextMesh cupsReqLabel; // 0xE0
	public tk2dTextMesh cupsReqValue; // 0xE8
	public bool tournamentMatch; // 0xF0
	public tk2dTextMesh endSeasonText; // 0xF8
	public tk2dTextMesh endSeasonTime; // 0x100
	public tk2dTextMesh toBattleText; // 0x108
	public tk2dTextMesh toBattleTimer; // 0x110
	public tk2dTextMesh lastEnemyText; // 0x118
	public tk2dTextMesh lastEnemyName; // 0x120
	public tk2dTextMesh lastResultText; // 0x128
	public tk2dTextMesh lastResultValue; // 0x130
	public tk2dTextMesh lastScoreText; // 0x138
	public tk2dTextMesh lastScoreValue; // 0x140
	public tk2dTextMesh seasonBattlesText; // 0x148
	public tk2dTextMesh seasonBattlesValue; // 0x150
	public tk2dTextMesh seasonScoreText; // 0x158
	public tk2dTextMesh seasonScoreValue; // 0x160
	public tk2dTextMesh membersOnlineText; // 0x168
	public tk2dTextMesh membersOnlineValue; // 0x170
	private GameObject special_offer; // 0x178
	private GameObject owner_bonus; // 0x180
	private LocalizationTextMesh special_offerText; // 0x188
	private LocalizationTextMesh owner_bonusText; // 0x190
	private MenuMapsScroll mms; // 0x198
	public bool image_ok; // 0x1A0
	public string map_name; // 0x1A8
	public int index; // 0x1B0

	// Methods
	public void .ctor(); // 0x1002DD24C
	public void UpdateUI(); // 0x1002DD2D8
	private void Start(); // 0x1002DD830
	private void OnEnable(); // 0x1002DD834
	private void OnDisable(); // 0x1002DDA40
	private IEnumerator Tick(); // 0x1002DDAF0
	private IEnumerator TourneyTick(); // 0x1002DDB64
	private void SetDefaultTourneyVals(); // 0x1002DD770
	public void UpdatePlatoon(); // 0x1002DDBD8
	private IEnumerator PlatoonTick(); // 0x1002DDF38
}

// Namespace: 
private sealed class <Tick>c__Iterator4B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4003
{
	// Fields
	internal WarTerritory <territory>__0; // 0x10
	internal int <delta>__1; // 0x18
	internal bool <qualification_time>__2; // 0x1C
	internal bool <canPlay>__3; // 0x1D
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal MenuMapElement <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1002DDB5C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002DE0FC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002DE104
	public bool MoveNext(); // 0x1002DE10C
	public void Dispose(); // 0x1002DECB4
	public void Reset(); // 0x1002DECC0
}

// Namespace: 
private sealed class <TourneyTick>c__Iterator4C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4004
{
	// Fields
	internal long <now_msec>__0; // 0x10
	internal DateTime <now>__1; // 0x18
	internal int <dayNow>__2; // 0x28
	internal int <hourNow>__3; // 0x2C
	internal int <minuteNow>__4; // 0x30
	internal int <secondNow>__5; // 0x34
	internal int <hourPT>__6; // 0x38
	internal int <minutePT>__7; // 0x3C
	internal int <delta>__8; // 0x40
	internal int <hour>__9; // 0x44
	internal int <minute>__10; // 0x48
	internal int <second>__11; // 0x4C
	internal int <end_sec>__12; // 0x50
	internal int <dayEnd>__13; // 0x54
	internal int <hourEnd>__14; // 0x58
	internal int <minuteEnd>__15; // 0x5C
	internal int <secondEnd>__16; // 0x60
	internal int <start_sec>__17; // 0x64
	internal int <dayEnd>__18; // 0x68
	internal int <hourEnd>__19; // 0x6C
	internal int <minuteEnd>__20; // 0x70
	internal int <secondEnd>__21; // 0x74
	internal int $PC; // 0x78
	internal object $current; // 0x80
	internal MenuMapElement <>f__this; // 0x88

	// Methods
	public void .ctor(); // 0x1002DDBD0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002DED14
	private object System.Collections.IEnumerator.get_Current(); // 0x1002DED1C
	public bool MoveNext(); // 0x1002DED24
	public void Dispose(); // 0x1002E060C
	public void Reset(); // 0x1002E0618
}

// Namespace: 
private sealed class <PlatoonTick>c__Iterator4D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4005
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuMapElement <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002DDFA4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002DDFAC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002DDFB4
	public bool MoveNext(); // 0x1002DDFBC
	public void Dispose(); // 0x1002DE09C
	public void Reset(); // 0x1002DE0A8
}

// Namespace: 
public class MenuMapSelectWeaponCamo : MonoBehaviour // TypeDefIndex: 4006
{
	// Fields
	public GameObject weaponCamo; // 0x18
	public tk2dTextMesh weaponCamoValueMesh; // 0x20
	public RemoteSpriteRender weaponCamoIcon; // 0x28
	public GameObject weaponHandling; // 0x30
	public tk2dTextMesh weaponHandlingValueMesh; // 0x38
	public RemoteSpriteRender weaponHandlingIcon; // 0x40
	public GameObject helmetCamo; // 0x48
	public tk2dTextMesh helmetCamoValueMesh; // 0x50
	public RemoteSpriteRender helmetCamoIcon; // 0x58
	public GameObject helmetAero; // 0x60
	public tk2dTextMesh helmetAeroValueMesh; // 0x68
	public RemoteSpriteRender helmetAeroIcon; // 0x70
	private int positionCount; // 0x78
	public bool count_minus; // 0x7C
	private int count_replay; // 0x80
	public bool reload; // 0x84
	public int prev_weapon_camo; // 0x88
	public int prev_weapon_handling; // 0x8C
	public int prev_helmet_camo; // 0x90
	public int prev_helmet_aero; // 0x94
	private int offs; // 0x98

	// Methods
	public void .ctor(); // 0x1002E066C
	private void OnEnable(); // 0x1002E067C
	public void UpdateUI(); // 0x1002E0680
	private void SetPosition(GameObject tuning); // 0x1002E114C
}

// Namespace: 
public class OpenTimer : MonoBehaviour // TypeDefIndex: 4007
{
	// Fields
	public long delay; // 0x18
	public Action OnUpdate; // 0x20
	private Nullable`1<long> timer; // 0x28

	// Methods
	public void .ctor(); // 0x10008C548
	public void Stop(); // 0x10008C558
	public void Reset(); // 0x10008C5E0
	private void Update(); // 0x10008C688
}

// Namespace: 
public class MenuMapsScroll : MonoBehaviour // TypeDefIndex: 4008
{
	// Fields
	public BattleMode type; // 0x18
	public States state; // 0x1C
	public Transform mapsParent; // 0x20
	public Transform center; // 0x28
	public string firstmapname; // 0x30
	public List`1<Transform> maps; // 0x38
	public float offset; // 0x40
	private List`1<Transform> elements; // 0x48
	private float mapsoffest_y; // 0x50
	private Vector3 notselectedscale; // 0x54
	private int centerPose; // 0x60
	private float oldoffset; // 0x64
	private int elementscount; // 0x68
	public Color notselectedcolor; // 0x6C
	private Color selectedcolor; // 0x7C
	public Vector2 sensitivity; // 0x8C
	public Vector2 input; // 0x94
	private Vector2 deltaPosition; // 0x9C
	private int scrollFingerId; // 0xA4
	private tk2dUITouch scrollTouch; // 0xA8
	private UITouch scrollTouchUnity; // 0xC4
	private Vector2 positionTouchOnScreen; // 0xE0
	private Vector2 screenSize; // 0xE8
	private Vector2 minScreenSize; // 0xF0
	private Vector2 maxScreenSize; // 0xF8
	private Vector2 addSensitivityViaScreen; // 0x100
	private Vector2 addSensitivity; // 0x108
	private Vector2 addToAddSensitivityViaScreen; // 0x110
	private float velo; // 0x118
	private float velo2; // 0x11C
	public float speedtothesameelement; // 0x120
	public float switchSpeed; // 0x124
	private int lastplayedid; // 0x128
	private int lastSelectedMapIndex; // 0x12C
	public DailyQuests dailyQuests; // 0x130
	public tk2dTextMesh attack_hold; // 0x138
	public tk2dTextMesh bid_squad; // 0x140
	public GameObject betButton; // 0x148
	public GameObject betMaxButton; // 0x150
	public tk2dTextMesh warBet; // 0x158
	public tk2dTextMesh warMaxBet; // 0x160
	public tk2dTextMesh bidPlayerText; // 0x168
	public tk2dTextMesh bidPlayerValue; // 0x170
	private TerritoryBidDialog dialog; // 0x178
	private int territory_id; // 0x180
	public static int match_time; // 0x0
	public GameObject checkInButton; // 0x188
	public tk2dTextMesh checkInMessage; // 0x190
	public tk2dTextMesh checkInMatchTime; // 0x198
	public tk2dTextMesh signUpText; // 0x1A0
	public tk2dTextMesh signUpPlayer; // 0x1A8
	public GameObject payFineButton; // 0x1B0
	public Action OnBeginScroll; // 0x1B8
	public Action OnIdle; // 0x1C0
	private bool isTerritoryIconsLoading; // 0x1C8
	private bool isMapIconsLoading; // 0x1C9

	// Methods
	public void .ctor(); // 0x1002E121C
	public void ChangePos(int offset); // 0x1002E13B4
	private void OnScrollAreaDown(tk2dUIItem item); // 0x1002E13DC
	private void OnScrollAreaUp(); // 0x1002E1460
	private void OnBidsUpdate(); // 0x1002E146C
	private void Awake(); // 0x1002E213C
	private void Start(); // 0x1002E2230
	private void OnAllianceRegisterOk(IList`1<WarTerritoryRegInfo> terr); // 0x1002E42CC
	private void OnAllianceRegisterFailed(IList`1<WarTerritoryRegInfo> terr); // 0x1002E42E0
	private void OnAllianceRegistration(IList`1<WarTerritoryRegInfo> terr); // 0x1002E4420
	private void OnPlatoonRegisterOk(); // 0x1002E4434
	private void OnPlatoonRegistration(); // 0x1002E4BB8
	private void OnEnable(); // 0x1002E4BBC
	private void OnDisable(); // 0x1002E4C60
	private void OnDestroy(); // 0x1002E4D60
	private void CreateMapImage(MenuMapElement e, optional string mapName, optional int territory_id); // 0x1002E52DC
	private void InitMaps(); // 0x1002E2C20
	private void CheckMapImages(); // 0x1002E6D34
	private void Update(); // 0x1002E6E54
	private void MoveMaps(); // 0x1002E70F0
	private void PoseChange(); // 0x1002E7B48
	private void OnTournamentBlock(); // 0x1002E8150
	private void OnPayFine(); // 0x1002E839C
	private void OnCheckIn(); // 0x1002E8460
	private void OnTournamentInfoOk(); // 0x1002E84E4
	private void SetRegistration(); // 0x1002E57FC
	public MenuMapElement CurrentMenuMapElement(); // 0x1002E44FC
	private void TerritoryBlockTick(); // 0x1002E84F8
	public void UpdateSquadWar(); // 0x1002E1480
	public void UpdatePlatoon(); // 0x1002E45B4
	public void SetDailyQuests(); // 0x1002E56F0
	private void SetupScales(); // 0x1002E6F40
	private float GetPercentOffsetFromCenter(Transform element); // 0x1002E86C0
	private float GetPercentOffsetFromCenterForEasyGoto(Transform element); // 0x1002E878C
	public void SetAddSensetivityViaScreen(); // 0x1002E80E0
	private IEnumerator DownloadMapIcons(); // 0x1002E8850
	private IEnumerator DownloadTerritoryIcons(); // 0x1002E88C4
	private IEnumerator DownloadTournamentIcon(); // 0x1002E8938
	private void <Start>m__C1(); // 0x1002E899C
	private void <Start>m__C2(); // 0x1002E8A6C
	private void <OnTournamentBlock>m__C3(); // 0x1002E8BD8
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4009
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States moving = 1; // 0x0
	public const States gotoelement = 2; // 0x0
	public const States pose = 3; // 0x0

}

// Namespace: 
private sealed class <DownloadMapIcons>c__Iterator4E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4010
{
	// Fields
	internal IEnumerable`1<KeyValuePair`2<string, MapInfo>> <mapInfo>__0; // 0x10
	internal IEnumerator`1<KeyValuePair`2<string, MapInfo>> <$s_356>__1; // 0x18
	internal KeyValuePair`2<string, MapInfo> <pair>__2; // 0x20
	internal string <map_name>__3; // 0x30
	internal AssetBundleLoadAssetOperation <request>__4; // 0x38
	internal Texture2D <texture>__5; // 0x40
	internal List`1<PlatoonType> <platoon_modes>__6; // 0x48
	internal Enumerator<PlatoonType> <$s_357>__7; // 0x50
	internal PlatoonType <mode>__8; // 0x68
	internal string <map_name>__9; // 0x70
	internal AssetBundleLoadAssetOperation <request>__10; // 0x78
	internal Texture2D <texture>__11; // 0x80
	internal int $PC; // 0x88
	internal object $current; // 0x90
	internal MenuMapsScroll <>f__this; // 0x98

	// Methods
	public void .ctor(); // 0x1002E88BC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002E8BDC
	private object System.Collections.IEnumerator.get_Current(); // 0x1002E8BE4
	public bool MoveNext(); // 0x1002E8BEC
	public void Dispose(); // 0x1002E97D0
	public void Reset(); // 0x1002E99B8
}

// Namespace: 
private sealed class <DownloadTerritoryIcons>c__Iterator4F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4011
{
	// Fields
	internal List`1<WarTerritory> <territories>__0; // 0x10
	internal int <i>__1; // 0x18
	internal WarTerritory <t>__2; // 0x20
	internal int $PC; // 0x28
	internal object $current; // 0x30
	internal MenuMapsScroll <>f__this; // 0x38

	// Methods
	public void .ctor(); // 0x1002E8930
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002E9A0C
	private object System.Collections.IEnumerator.get_Current(); // 0x1002E9A14
	public bool MoveNext(); // 0x1002E9A1C
	public void Dispose(); // 0x1002E9C24
	public void Reset(); // 0x1002E9C30
}

// Namespace: 
private sealed class <DownloadTournamentIcon>c__Iterator50 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4012
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x1002E8994
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002E9C84
	private object System.Collections.IEnumerator.get_Current(); // 0x1002E9C8C
	public bool MoveNext(); // 0x1002E9C94
	public void Dispose(); // 0x1002E9DDC
	public void Reset(); // 0x1002E9DE8
}

// Namespace: 
public class MenuMoney : MonoBehaviour // TypeDefIndex: 4013
{
	// Methods
	public void .ctor(); // 0x1002E9E3C
	private void Start(); // 0x1002E9E44
	private void OnDestroy(); // 0x1002EA018
	private void OnDollarsUpdate(int value); // 0x1002EA234
	private void OnCrystalsUpdate(int value); // 0x1002EA2A0
}

// Namespace: 
public class MenuNavigateRequest : MonoBehaviour // TypeDefIndex: 4014
{
	// Fields
	public MenuNavigator navigator; // 0x18
	public MenuElements requestMenu; // 0x20
	public string menuName; // 0x28
	private tk2dUIItem button; // 0x30

	// Methods
	public void .ctor(); // 0x1002EA30C
	private void Start(); // 0x1002EA314
	protected virtual void OnClick(); // 0x1002EA610
	public static void ShowMenu(string menuName); // 0x1002EA850
}

// Namespace: 
public class MenuNavigateRequestBoosters : MenuNavigateRequest // TypeDefIndex: 4015
{
	// Methods
	public void .ctor(); // 0x1002EAAE0
	protected override void OnClick(); // 0x1002EAAE8
}

// Namespace: 
public class MenuNavigateRequestChat : MenuNavigateRequest // TypeDefIndex: 4016
{
	// Methods
	public void .ctor(); // 0x1002EAB58
	protected override void OnClick(); // 0x1002EAB60
}

// Namespace: 
public class MenuNavigateRequestWithItem : MonoBehaviour // TypeDefIndex: 4017
{
	// Fields
	public MenuNavigator navigator; // 0x18
	public ItemCondition[] requests; // 0x20
	public Action OnButtonClick; // 0x28
	private tk2dUIItem button; // 0x30

	// Methods
	public void .ctor(); // 0x1002EADF0
	private void Start(); // 0x1002EADF8
	private void OnClick(); // 0x1002EAEA0
}

// Namespace: 
public class ItemCondition // TypeDefIndex: 4018
{
	// Fields
	public Items item; // 0x10
	public MenuElements menu; // 0x18

	// Methods
	public void .ctor(); // 0x1002EB044
}

// Namespace: 
public class MenuNavigator : MonoBehaviour // TypeDefIndex: 4019
{
	// Fields
	public OnMenuDgt OnMenuShowed; // 0x18
	public OnMenuDgt OnMenuHide; // 0x20
	public OnMenuDgt OnMenuHided; // 0x28
	public OnMenuDgt OnMenuShow; // 0x30
	public OnMenuBack OnGoBack; // 0x38
	public Transform topMenu; // 0x40
	public int pose; // 0x48
	public List`1<MenuElements> history; // 0x50
	public List`1<Dictionary`2<string, object>> historyArgs; // 0x58
	public GameObject cartButton; // 0x60
	public float speed; // 0x68
	public tk2dUIMask mask; // 0x70
	public Transform backgroundClassic; // 0x78
	public tk2dUIItem backBtn; // 0x80
	public MenuElements nextMenu; // 0x88
	public GameObject confirmDialogPrefab; // 0x90
	private States _state; // 0x98
	private float[] velo; // 0xA0
	private bool isBack; // 0xA8
	private static MenuNavigator instance; // 0x0

	// Methods
	public void .ctor(); // 0x1002EB04C
	public States get_state(); // 0x1002EB0E0
	public void set_state(States value); // 0x1002EB0E8
	private void Start(); // 0x1002EB244
	private void CheckCartButtonVisibility(); // 0x1002EB320
	public void OnBackBtn(); // 0x1002EB658
	private IEnumerator DoExitDialog(); // 0x1002EC504
	public MenuElements GetCurrentMenu(); // 0x1002EA7F4
	private void SwitchBottomMenu(Transform trs, bool toOff); // 0x1002EC578
	private void Update(); // 0x1002EC8A8
	public void SetNextmenu(MenuElements menu); // 0x1002C7A54
	public void SetNextmenu(MenuElements menu, Dictionary`2<string, object> args); // 0x1002EBC30
	public void UpdateHistoryArgs(MenuElements c_menu, Dictionary`2<string, object> args); // 0x1002EEAA8
	public void AddBeforeLastmenu(MenuElements menu); // 0x1002EEB50
	private void OnMenuAdd(MenuElements menu); // 0x1002EE9A0
	private ConfirmDialog CreateConfirmDialog(string header, string message); // 0x1002EECE0
	public static void pop(); // 0x1002EEE40
	private void Awake(); // 0x1002EEF54
	public static MenuNavigator Instance(); // 0x1002EF000
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4020
{
	// Fields
	public int value__; // 0x10
	public const States Idle = 0; // 0x0
	public const States Change = 1; // 0x0
	public const States Hiding = 2; // 0x0
	public const States Showing = 3; // 0x0
	public const States Reset = 4; // 0x0

}

// Namespace: 
public sealed class OnMenuDgt : MulticastDelegate // TypeDefIndex: 4021
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002CA42C
	public virtual void Invoke(MenuElements element); // 0x1002EB1A8
	public virtual IAsyncResult BeginInvoke(MenuElements element, AsyncCallback callback, object object); // 0x1002EF470
	public virtual void EndInvoke(IAsyncResult result); // 0x1002EF4C0
}

// Namespace: 
public sealed class OnMenuBack : MulticastDelegate // TypeDefIndex: 4022
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002EF3E4
	public virtual bool Invoke(MenuElements element); // 0x1002EBB94
	public virtual IAsyncResult BeginInvoke(MenuElements element, AsyncCallback callback, object object); // 0x1002EF3F4
	public virtual bool EndInvoke(IAsyncResult result); // 0x1002EF444
}

// Namespace: 
private sealed class <DoExitDialog>c__Iterator51 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4023
{
	// Fields
	internal ConfirmDialog <confirmDialog>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal MenuNavigator <>f__this; // 0x28
	private static Action <>f__am$cache4; // 0x0

	// Methods
	public void .ctor(); // 0x1002EC570
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002EF050
	private object System.Collections.IEnumerator.get_Current(); // 0x1002EF058
	public bool MoveNext(); // 0x1002EF060
	public void Dispose(); // 0x1002EF2A0
	public void Reset(); // 0x1002EF2AC
	private static void <>m__C4(); // 0x1002EF300
	internal void <>m__C5(); // 0x1002EF34C
}

// Namespace: 
public class MenuNavigatorEvents // TypeDefIndex: 4024
{
	// Fields
	public OnMenuDgt OnMenuReady; // 0x10
	public OnMenuDgt OnMenuShow; // 0x18
	public OnMenuDgt OnMenuHide; // 0x20
	public OnMenuDgt OnMenuHided; // 0x28
	private States currentState; // 0x30
	private bool start; // 0x34
	private MenuElements m_element; // 0x38

	// Methods
	public void .ctor(); // 0x1002EF4CC
	public void .ctor(MenuElements element); // 0x1002CA400
	public bool get_isActive(); // 0x1002D08A0
	public void SetElement(MenuElements element); // 0x1002EF4F4
	public void OnStart(); // 0x1002CA8A8
	public void OnEnable(); // 0x1002CB64C
	public void OnDisable(); // 0x1002CBE90
	private void MenuShowed(MenuElements element); // 0x1002EF4FC
	private void MenuHide(MenuElements element); // 0x1002EF5D4
	private void MenuHided(MenuElements element); // 0x1002EF5F0
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 4025
{
	// Fields
	public int value__; // 0x10
	public const States Hide = 0; // 0x0
	public const States Show = 1; // 0x0

}

// Namespace: 
public class MenuNavigatorEventsWithBehaviour : MonoBehaviour // TypeDefIndex: 4026
{
	// Fields
	public MenuNavigatorEvents events; // 0x18

	// Methods
	public void .ctor(); // 0x1002EF60C
	private void Awake(); // 0x1002EF614
	private void Start(); // 0x1002EF678
	public void OnEnable(); // 0x1002EF690
	public void OnDisable(); // 0x1002EF6A8
	public void SetElement(MenuElements element); // 0x1002EF6C0
}

// Namespace: 
public class MenuNotEnoughMoney : MonoBehaviour // TypeDefIndex: 4027
{
	// Fields
	private static MenuNotEnoughMoney instance_; // 0x0

	// Methods
	public void .ctor(); // 0x1002EF6DC
	public static MenuNotEnoughMoney get_Instance(); // 0x1002C5784
	public void NotEnoughDollars(); // 0x1002C5934
	public void NotEnoughCrystals(); // 0x1002C5B94
	public void NotEnoughStamina(); // 0x1002EF6E4
}

// Namespace: 
public class MenuOptionsTabsControl : MenuTabsControl // TypeDefIndex: 4028
{
	// Methods
	public void .ctor(); // 0x1002EF800
	protected override float tabsWeight(); // 0x1002EF808
}

// Namespace: 
public class MenuPaintNavigateRequest : MonoBehaviour // TypeDefIndex: 4029
{
	// Fields
	public MenuNavigator navigator; // 0x18
	public MenuElements requestWeaponMenu; // 0x20
	private tk2dUIItem button; // 0x28

	// Methods
	public void .ctor(); // 0x1002EF814
	private void Start(); // 0x1002EF81C
	private void OnClick(); // 0x1002EF8C4
}

// Namespace: 
public class MenuPaintStat : MonoBehaviour // TypeDefIndex: 4030
{
	// Fields
	public tk2dSprite icon; // 0x18
	public tk2dTextMesh textMesh; // 0x20

	// Methods
	public void .ctor(); // 0x1002EF9DC
}

// Namespace: 
public class MenuPoseControl : MonoBehaviour // TypeDefIndex: 4031
{
	// Fields
	public Transform[] elements; // 0x18
	private Vector3 oldPos; // 0x20

	// Methods
	public void .ctor(); // 0x1002F6168
	private void Update(); // 0x1002F6170
}

// Namespace: 
public class MenuPrevewSwitchControl : MonoBehaviour // TypeDefIndex: 4032
{
	// Fields
	private PreviewMenuElements menu; // 0x18

	// Methods
	public void .ctor(); // 0x1002F6324
	private void Start(); // 0x1002F632C
	private void OnSwitchInstant(GameObject obj); // 0x1002F6460
}

// Namespace: 
public class MenuPreview3dObjects : MonoBehaviour // TypeDefIndex: 4033
{
	// Fields
	public PreviewElement3D[] elements; // 0x18

	// Methods
	public void .ctor(); // 0x1002F6578
	private void Start(); // 0x1002F6580
}

// Namespace: 
public class PreviewElement3D // TypeDefIndex: 4034
{
	// Fields
	public Transform obj; // 0x10
	public Vector3 showScale; // 0x18
	public Vector3 hideScale; // 0x24

	// Methods
	public void .ctor(); // 0x1002F6610
}

// Namespace: 
public class MenuPreviewWeaponPosCorrection : MonoBehaviour // TypeDefIndex: 4035
{
	// Fields
	public Preset[] presets; // 0x18

	// Methods
	public void .ctor(); // 0x1002F6618
	private void OnEnable(); // 0x1002F6620
	public void CorrectPose(int weaponType); // 0x1002F6624
}

// Namespace: 
public class Preset // TypeDefIndex: 4036
{
	// Fields
	public int weaponType; // 0x10
	public Vector3 position; // 0x14

	// Methods
	public void .ctor(); // 0x1002F6704
}

// Namespace: 
public class MenuPreviewWeaponSizeCorrection : MonoBehaviour // TypeDefIndex: 4037
{
	// Fields
	public Preset[] presets; // 0x18

	// Methods
	public void .ctor(); // 0x1002F670C
	private void OnEnable(); // 0x1002F6714
	public void CorrectScale(int weaponType); // 0x1002F6718
}

// Namespace: 
public class Preset // TypeDefIndex: 4038
{
	// Fields
	public int weaponType; // 0x10
	public Vector3 localScale; // 0x14

	// Methods
	public void .ctor(); // 0x1002F67D0
}

// Namespace: 
public class MenuRankpoints : MonoBehaviour // TypeDefIndex: 4039
{
	// Fields
	public tk2dTextMesh numbersMesh; // 0x18
	public tk2dTextMesh titleMesh; // 0x20
	public tk2dSprite badje; // 0x28
	private long oldrankpoints; // 0x30
	public GameObject bonusDialogPrefab; // 0x38

	// Methods
	public void .ctor(); // 0x1002F67D8
	private void Start(); // 0x1002F67E0
	private void Update(); // 0x1002F6A58
	private void OnRankpointsUp(Reward reward); // 0x1002F6B00
	private IEnumerator WaitForBattleResults(Reward reward); // 0x1002F6CFC
	public void DoBonusDialog(Reward reward); // 0x1002F6D78
	private void BonusClick(tk2dUIItem item); // 0x1002F7130
	public void CalculateRankproints(); // 0x1002F6910
	private void UpdateNumbers(long value); // 0x1002F7224
	private void UpdateTitle(string title); // 0x1002F72E4
	private BonusDialog CreateBonusDialog(string header, string subheader, string getbuttonText, string facebookButtonText); // 0x1002F6FA8
	private void OnDestroy(); // 0x1002F7320
	private void OnFacebookClick(tk2dUIItem item); // 0x1002F7448
}

// Namespace: 
private sealed class <WaitForBattleResults>c__Iterator52 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4040
{
	// Fields
	internal MenuBattleResults <battleResults>__0; // 0x10
	internal bool <continueloop>__1; // 0x18
	internal Reward reward; // 0x20
	internal int $PC; // 0x28
	internal object $current; // 0x30
	internal Reward <$>reward; // 0x38
	internal MenuRankpoints <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x1002F74C8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002F74D0
	private object System.Collections.IEnumerator.get_Current(); // 0x1002F74D8
	public bool MoveNext(); // 0x1002F74E0
	public void Dispose(); // 0x1002F767C
	public void Reset(); // 0x1002F7688
}

// Namespace: 
public class MenuRanks : MonoBehaviour // TypeDefIndex: 4041
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public tk2dUIScrollableArea scroll; // 0x28
	public float angle; // 0x30
	public Transform spiner; // 0x38
	public GameObject rankrowprefab; // 0x40
	public RankItem[] rankItemsInfo; // 0x48
	private GameObject myrowinlistgo; // 0x50
	private bool inprocess; // 0x58
	private static Action`1<GameObject> <>f__am$cache9; // 0x0

	// Methods
	public void .ctor(); // 0x1002F76DC
	public void Reset(); // 0x1002F76E4
	private void OnGetRanks(); // 0x1002F7AC0
	private void OnEnable(); // 0x1002F8084
	public void On(); // 0x1002F80B8
	private void OnDisable(); // 0x1002F8150
	private IEnumerator GetRanks(); // 0x1002F80E4
	private void Update(); // 0x1002F81B4
	private static void <Reset>m__C6(GameObject child); // 0x1002F826C
}

// Namespace: 
private sealed class <GetRanks>c__Iterator53 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4042
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuRanks <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002F81AC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002F82D8
	private object System.Collections.IEnumerator.get_Current(); // 0x1002F82E0
	public bool MoveNext(); // 0x1002F82E8
	public void Dispose(); // 0x1002F83F4
	public void Reset(); // 0x1002F8400
}

// Namespace: 
public class MenuRating : MonoBehaviour // TypeDefIndex: 4043
{
	// Fields
	private const float DELIVEY_CHECK_DELAY = 1; // 0x0
	public OnSwitchDgt OnSwitch; // 0x18
	public OnSwitchDgt OnSwitchInstant; // 0x20
	public static bool canPress; // 0x0
	public float switchSpeed; // 0x28
	public GameObject elementConners; // 0x30
	public GameObject elementMiddle; // 0x38
	public List`1<GameObject> allElements; // 0x40
	public RatingsMenuSwitchControl switchBtns; // 0x48
	public tk2dUIItem[] tests; // 0x50
	private States m_State; // 0x58
	private GameObject tempContainer; // 0x60
	private GameObject destroyContainer; // 0x68
	private List`1<GameObject> elements; // 0x70
	private float offset; // 0x78
	private int pose; // 0x7C
	private float stepOffset; // 0x80
	private tk2dCamera guicamera; // 0x88
	private Vector2 blockSize; // 0x90
	private float btwoffset; // 0x98
	private float oldoffset; // 0x9C
	private float[] velo; // 0xA0
	private Vector2 headerDisablePos; // 0xA8
	private GameObject container; // 0xB0
	private bool isFirstInit; // 0xB8
	public static bool setSquad; // 0x1
	private int current_rating_tab; // 0xBC
	public static int rating_tab; // 0x4
	private static Action <>f__am$cache1B; // 0x8

	// Methods
	public void .ctor(); // 0x1002F8454
	private static void .cctor(); // 0x1002F84D0
	public void StartTest(); // 0x1002F84D4
	public void EnsTest(); // 0x1002F853C
	private States get_state(); // 0x1002F85A8
	private void set_state(States value); // 0x1002F85B0
	private void OnDisable(); // 0x1002F85C8
	private void OnEnable(); // 0x1002F86E8
	private void OnChangeFocus(GameObject focusedobj); // 0x1002F8AA8
	public void SetSquad(); // 0x1002F8B48
	private void Start(); // 0x1002F99B8
	private void SetBlockFillPosition(Transform obj); // 0x1002FB6E0
	private void SetBlockBordersPosition(Transform obj); // 0x1002FB4DC
	private void Update(); // 0x1002F995C
	private void TextUpdate(); // 0x1002FBB20
	private void MoveElements(); // 0x1002FB7E4
	private bool CheckDestination(); // 0x1002FC5CC
	public void Move(bool direction); // 0x1002F8C94
	public List`1<GameObject> GetElements(); // 0x1002FC668
	private void UpdateDescriptions(); // 0x1002F85C4
	private static void <OnEnable>m__C7(); // 0x1002FC670
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 4044
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States moveLeft = 1; // 0x0
	public const States movingLeft = 2; // 0x0
	public const States moveRight = 3; // 0x0
	public const States movingRight = 4; // 0x0

}

// Namespace: 
public sealed class OnSwitchDgt : MulticastDelegate // TypeDefIndex: 4045
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002FC698
	public virtual void Invoke(GameObject obj); // 0x1002F8AAC
	public virtual IAsyncResult BeginInvoke(GameObject obj, AsyncCallback callback, object object); // 0x1002FC6A8
	public virtual void EndInvoke(IAsyncResult result); // 0x1002FC6F8
}

// Namespace: 
public class MenuRatingButtonLook : MonoBehaviour // TypeDefIndex: 4046
{
	// Fields
	public tk2dTextMesh label; // 0x18
	public tk2dTextMesh value; // 0x20
	public tk2dSlicedSprite fill; // 0x28
	public tk2dSlicedSprite backFill; // 0x30

	// Methods
	public void .ctor(); // 0x1002FC704
	private void Start(); // 0x1002FC70C
}

// Namespace: 
public class MenuRatingPersonal : MonoBehaviour // TypeDefIndex: 4047
{
	// Fields
	public Areas area; // 0x18
	public Type type; // 0x1C
	public GameObject loadinggo; // 0x20
	public GameObject contentgo; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	public float angle; // 0x38
	public Transform spiner; // 0x40
	public GameObject ratingrowprefab; // 0x48
	public GameObject cupratingrowprefab; // 0x50
	public GameObject squadratingrowprefab; // 0x58
	public GameObject platoonratingrowprefab; // 0x60
	public RatingPlayerRow myrating; // 0x68
	public RatingCupRow myratingcup; // 0x70
	public RatingSquadRow myratingsquad; // 0x78
	public RatingPlatoonRow myratingplatoon; // 0x80
	private ISFSObject myrateobj; // 0x88
	private CupRating myratecupobj; // 0x90
	private Squad myratesquadobj; // 0x98
	private GameObject myrowinlistgo; // 0xA0
	private bool inprocess; // 0xA8
	private Color colorTransparency; // 0xAC
	private tk2dCamera guicamera; // 0xC0
	public tk2dSlicedSprite lineTop; // 0xC8
	public tk2dUIMask mask; // 0xD0
	public tk2dUITextInput searchtext; // 0xD8
	public tk2dUIItem searchbtn; // 0xE0
	public tk2dUIItem searcOpenbBtn; // 0xE8
	public tk2dTextMesh cupOneText; // 0xF0
	public tk2dTextMesh cupOneEliteText; // 0xF8
	public tk2dTextMesh topSniperText; // 0x100
	public tk2dTextMesh cupThreeText; // 0x108
	public tk2dTextMesh cupTwoText; // 0x110
	public tk2dTextMesh cupTwoEliteText; // 0x118
	public tk2dTextMesh cupFiveText; // 0x120
	public tk2dTextMesh cup_9; // 0x128
	public Transform rewardsBlock; // 0x130
	public RatingRewardItem cup_6; // 0x138
	public RatingRewardItem cup_4; // 0x140
	public RatingRewardItem reward_4; // 0x148
	public static bool setSquad; // 0x0
	private StateChecker`1<int> stateChecker; // 0x150
	private bool on; // 0x158
	private long lastTimeOn; // 0x160
	private static Action`1<GameObject> <>f__am$cache2B; // 0x8

	// Methods
	public void .ctor(); // 0x1002FC710
	private static void .cctor(); // 0x1002FC770
	private void Start(); // 0x1002FC774
	public void OnClickSearchPlatoon(); // 0x1002FDD18
	public void OnClickSearch(); // 0x1002FE1F4
	public void OnClickSearchOpenSquads(); // 0x1002FE2AC
	public void Reset(); // 0x1002FDD50
	private GameObject AddCup(GameObject cup, int sel_cup, int sel_cup_value, Vector3 pos); // 0x1002FE2E4
	private void SetRatingsSquadRow(RatingSquadRow rpr, Squad rate); // 0x1002FE548
	private void OnGetRatingsSquad(List`1<Squad> squads); // 0x1002FEB8C
	private void OnSquadSearch(List`1<Squad> squads); // 0x1002FF468
	private void OnCupGetRatings(List`1<CupRating> listCupRating); // 0x1002FFA30
	private void SetRatingsRow(RatingPlayerRow rpr, ISFSObject rate); // 0x100300408
	private void SetRatingsPlatoonRow(RatingPlatoonRow rpr, ISFSObject rate, int type); // 0x100300FBC
	private void OnPlatoonSearchOk(ISFSObject response); // 0x1003017FC
	private void OnPlattonRatings(ISFSObject response); // 0x100301DF4
	private void OnGetRatings(ISFSArray ratingarray); // 0x1003025DC
	private void OnGetMercenaryRatings(ISFSArray ratingarray); // 0x1003030F8
	private void OnGetTopMercRatings(ISFSArray ratingarray); // 0x1003048DC
	private void OnEnable(); // 0x100305F08
	public void On(); // 0x10030620C
	private void OnDisable(); // 0x100306568
	private IEnumerator SearchSquads(bool can_join); // 0x1002FE22C
	private IEnumerator SearchPlatoons(bool can_join); // 0x1002FE174
	private IEnumerator CupGetRatings(); // 0x1003064FC
	private void GetMyMercCache(); // 0x1003063D4
	private IEnumerator GetRating(); // 0x100306490
	private void Update(); // 0x100307434
	private void OnDestroy(); // 0x100307790
	private void OnGetMercenaryContracts(ReadOnlyCollection`1<Contract> contracts); // 0x1003065F4
	private static void <Reset>m__C8(GameObject child); // 0x100308A90
}

// Namespace: 
public sealed class Areas : Enum // TypeDefIndex: 4048
{
	// Fields
	public int value__; // 0x10
	public const Areas week = 0; // 0x0
	public const Areas alltime = 1; // 0x0
	public const Areas league = 2; // 0x0
	public const Areas region = 3; // 0x0
	public const Areas flag = 4; // 0x0
	public const Areas find = 5; // 0x0
	public const Areas weekRoyal = 6; // 0x0
	public const Areas tournament = 7; // 0x0
	public const Areas mercLeague1 = 8; // 0x0
	public const Areas mercLeague2 = 9; // 0x0
	public const Areas mercLeague3 = 10; // 0x0
	public const Areas mercLeague4 = 11; // 0x0
	public const Areas mercTop100 = 12; // 0x0
	public const Areas myMercs = 13; // 0x0
	public const Areas contracts = 14; // 0x0
	public const Areas findOpen = 15; // 0x0
	public const Areas alliance = 16; // 0x0
	public const Areas platoon2x2 = 17; // 0x0
	public const Areas platoon3x3 = 18; // 0x0
	public const Areas platoon4x4 = 19; // 0x0
	public const Areas platoon5x5 = 20; // 0x0
	public const Areas platoon6x6 = 21; // 0x0
	public const Areas platoon2x2s = 22; // 0x0
	public const Areas platoon3x3s = 23; // 0x0
	public const Areas platoon4x4s = 24; // 0x0
	public const Areas platoon5x5s = 25; // 0x0
	public const Areas platoon6x6s = 26; // 0x0

}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4049
{
	// Fields
	public int value__; // 0x10
	public const Type personal = 0; // 0x0
	public const Type friends = 1; // 0x0
	public const Type squad = 2; // 0x0
	public const Type mercenary = 3; // 0x0
	public const Type platoon = 4; // 0x0

}

// Namespace: 
private sealed class <SearchSquads>c__Iterator54 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4050
{
	// Fields
	internal bool can_join; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal bool <$>can_join; // 0x20
	internal MenuRatingPersonal <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1003065DC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1003098B0
	private object System.Collections.IEnumerator.get_Current(); // 0x1003098B8
	public bool MoveNext(); // 0x1003098C0
	public void Dispose(); // 0x100309A14
	public void Reset(); // 0x100309A20
}

// Namespace: 
private sealed class <SearchPlatoons>c__Iterator55 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4051
{
	// Fields
	internal bool can_join; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal bool <$>can_join; // 0x20
	internal MenuRatingPersonal <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1003065E4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100309588
	private object System.Collections.IEnumerator.get_Current(); // 0x100309590
	public bool MoveNext(); // 0x100309598
	public void Dispose(); // 0x100309850
	public void Reset(); // 0x10030985C
}

// Namespace: 
private sealed class <CupGetRatings>c__Iterator56 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4052
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuRatingPersonal <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1003065EC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100308AFC
	private object System.Collections.IEnumerator.get_Current(); // 0x100308B04
	public bool MoveNext(); // 0x100308B0C
	public void Dispose(); // 0x100308C38
	public void Reset(); // 0x100308C44
}

// Namespace: 
private sealed class <GetRating>c__Iterator57 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4053
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuRatingPersonal <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10030742C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100308C98
	private object System.Collections.IEnumerator.get_Current(); // 0x100308CA0
	public bool MoveNext(); // 0x100308CA8
	public void Dispose(); // 0x100309528
	public void Reset(); // 0x100309534
}

// Namespace: 
public class MenuRatingPersonalControl : MonoBehaviour // TypeDefIndex: 4054
{
	// Fields
	public Type type; // 0x18
	public MenuRatingPersonal weekRating; // 0x20
	public MenuRatingPersonal weekRoyalrating; // 0x28
	public MenuRatingPersonal alltimerating; // 0x30
	public MenuRatingPersonal leaguerating; // 0x38
	public MenuRatingPersonal regionrating; // 0x40
	public MenuRatingPersonal flagrating; // 0x48
	public MenuRatingPersonal TournamentRating; // 0x50
	public GameObject mercLeagueTabs; // 0x58
	public MenuRatingPersonal allianceContent; // 0x60
	public MenuRatingPersonal platoon2x2Content; // 0x68
	public MenuRatingPersonal platoon3x3Content; // 0x70
	public MenuRatingPersonal platoon4x4Content; // 0x78
	public MenuRatingPersonal platoon5x5Content; // 0x80
	public MenuRatingPersonal platoon6x6Content; // 0x88
	public MenuRatingPersonal platoon2x2SearchContent; // 0x90
	public MenuRatingPersonal platoon3x3SearchContent; // 0x98
	public MenuRatingPersonal platoon4x4SearchContent; // 0xA0
	public MenuRatingPersonal platoon5x5SearchContent; // 0xA8
	public MenuRatingPersonal platoon6x6SearchContent; // 0xB0
	public MenuRatingPersonal activeContent; // 0xB8
	public tk2dUIItem weekbtn; // 0xC0
	public tk2dUIItem weekRoyalbtn; // 0xC8
	public tk2dUIItem alltimebtn; // 0xD0
	public tk2dUIItem leaguebtn; // 0xD8
	public tk2dUIItem regionbtn; // 0xE0
	public tk2dUIItem flagbtn; // 0xE8
	public tk2dUIItem TournamentBtn; // 0xF0
	public tk2dUIItem joinMercBtn; // 0xF8
	private tk2dTextMesh joinMercBtnLabel; // 0x100
	public tk2dUIItem mercLeagueTabsBtn; // 0x108
	private tk2dTextMesh mercLeagueTabsBtnLabel; // 0x110
	public tk2dUIItem MyMercsBtn; // 0x118
	public tk2dUIItem MyContractsBtn; // 0x120
	public tk2dUIItem FishingMercsBtn; // 0x128
	public GameObject FishingMercsContent; // 0x130
	public tk2dUIItem alliancesBtn; // 0x138
	public tk2dUIItem platoon2x2Btn; // 0x140
	public tk2dUIItem platoon3x3Btn; // 0x148
	public tk2dUIItem platoon4x4Btn; // 0x150
	public tk2dUIItem platoon5x5Btn; // 0x158
	public tk2dUIItem platoon6x6Btn; // 0x160
	public tk2dUIItem platoonSearch2x2Btn; // 0x168
	public tk2dUIItem platoonSearch3x3Btn; // 0x170
	public tk2dUIItem platoonSearch4x4Btn; // 0x178
	public tk2dUIItem platoonSearch5x5Btn; // 0x180
	public tk2dUIItem platoonSearch6x6Btn; // 0x188
	public tk2dTextMesh PlatoonTimer; // 0x190
	public tk2dTextMesh TournamentTimer; // 0x198
	public tk2dTextMesh weektimer; // 0x1A0
	public tk2dTextMesh alliacetimer; // 0x1A8
	public tk2dTextMesh weekRoyaltimer; // 0x1B0
	public tk2dTextMesh leaguetimer; // 0x1B8
	public Color downColor; // 0x1C0
	public Color releaseColor; // 0x1D0
	private Color releaseFillColor; // 0x1E0
	private Color downYellowColor; // 0x1F0
	private Color downBrownColor; // 0x200
	public Transform border; // 0x210
	public float borderX; // 0x218
	public GameObject leftPos; // 0x220
	public GameObject rigtPos; // 0x228
	private tk2dCamera guicamera; // 0x230
	public GameObject Content; // 0x238
	public GameObject HeaderName; // 0x240
	private float oldtime; // 0x248
	public Vector3 posCorrection; // 0x24C
	public tk2dSprite regionFlag; // 0x258
	public tk2dTextMesh leagueName; // 0x260
	public GameObject previousLeague; // 0x268
	public tk2dTextMesh previousLeagueName; // 0x270
	public tk2dTextMesh previousLeagueScore; // 0x278
	public GameObject nextLeague; // 0x280
	public tk2dTextMesh nextLeagueName; // 0x288
	public tk2dTextMesh nextLeagueScore; // 0x290
	public tk2dTextMesh[] ratingPosition; // 0x298
	public tk2dTextMesh[] ratingReward; // 0x2A0
	public tk2dTextMesh[] ratingPositionRoyal; // 0x2A8
	public tk2dTextMesh[] ratingRewardRoyal; // 0x2B0
	public tk2dTextMesh[] ratingPositionTournament; // 0x2B8
	public tk2dTextMesh[] ratingRewardTournament; // 0x2C0
	public tk2dTextMesh[] ratingPositionAlliance; // 0x2C8
	public tk2dTextMesh[] ratingRewardAlliance; // 0x2D0
	private NumberFormatInfo numberFormatInfo; // 0x2D8
	public NicknameDialogControl nickControll; // 0x2E0
	public static bool setSquad; // 0x0
	public static bool platoonSearch; // 0x1

	// Methods
	public void .ctor(); // 0x100309A74
	private static void .cctor(); // 0x100309B50
	private void Start(); // 0x100309B54
	private void Awake(); // 0x10030A514
	private void OnEnable(); // 0x10030A5AC
	private void OnWeekClick(); // 0x10030DA48
	private void OnWeekRoyalClick(); // 0x10030DA5C
	private void OnAllTimeClick(); // 0x10030DA70
	private void OnLeagueClick(); // 0x10030DA84
	private void OnRegionClick(); // 0x10030DA98
	private void OnFlagClick(); // 0x10030DAAC
	public void SquadSearch(); // 0x10030DAC0
	public void OnTournamentClick(); // 0x10030DAD4
	public void OnMercLeagueTabsClick(); // 0x10030DAE8
	public void OnMyMercsClick(); // 0x10030DAFC
	public void OnFishingMercsClick(); // 0x10030DB10
	public void OnMyContractsClick(); // 0x10030DB20
	public void OnAllianceClick(); // 0x10030DB34
	public void OnPlatoon2x2Click(); // 0x10030DB48
	public void OnPlatoon3x3Click(); // 0x10030DB5C
	public void OnPlatoon4x4Click(); // 0x10030DB70
	public void OnPlatoon5x5Click(); // 0x10030DB84
	public void OnPlatoon6x6Click(); // 0x10030DB98
	public void OnPlatoon2x2ClickS(); // 0x10030CB5C
	public void OnPlatoon3x3ClickS(); // 0x10030CB70
	public void OnPlatoon4x4ClickS(); // 0x10030CB84
	public void OnPlatoon5x5ClickS(); // 0x10030CB98
	public void OnPlatoon6x6ClickS(); // 0x10030CBAC
	private void OnClickMercBtn(); // 0x10030DBAC
	private void OnMercDialogs(); // 0x10030DDE8
	private void RemoveBlackMark(YesNoDialog dialog); // 0x10030E1A8
	private void ChangeMercStatus(YesNoDialog dialog); // 0x10030E2E4
	private void ShowPopup(); // 0x10030E3E8
	private void OnMercStatusOk(); // 0x10030CBC0
	private void HideContent(MenuRatingPersonal newContent, MenuRatingPersonal current); // 0x10030F484
	private void HideContent(GameObject newContent, GameObject current); // 0x10030F568
	private void ButtonOff(tk2dUIItem item); // 0x10030F640
	private void OnRatingClick(MenuRatingPersonal activeRating, tk2dUIItem activeBtn, GameObject activeObj, optional bool clickSound); // 0x10030BBAC
	public void UpdateRatingName(); // 0x10030A9FC
	private void Update(); // 0x10030F7E8
	private void OnDestroy(); // 0x10030FD00
}

// Namespace: 
private sealed class <OnMercDialogs>c__AnonStoreyF2 // TypeDefIndex: 4055
{
	// Fields
	internal YesNoDialog dialog; // 0x10
	internal MenuRatingPersonalControl <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10030E1A0
	internal void <>m__C9(); // 0x10030FF10
	internal void <>m__CA(); // 0x10030FF30
	internal void <>m__CB(); // 0x10030FF50
}

// Namespace: 
private sealed class <OnRatingClick>c__AnonStoreyF3 // TypeDefIndex: 4056
{
	// Fields
	internal MenuRatingPersonal activeRating; // 0x10
	internal tk2dUIItem activeBtn; // 0x18
	internal MenuRatingPersonalControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10030F7E0
	internal bool <>m__CC(MenuRatingPersonal pc); // 0x10030FF70
	internal void <>m__CD(MenuRatingPersonal obj); // 0x10030FFF0
	internal bool <>m__CE(MenuRatingPersonal pc); // 0x100310014
	internal void <>m__CF(MenuRatingPersonal obj); // 0x100310094
	internal bool <>m__D0(tk2dUIItem pc); // 0x1003100B8
	internal void <>m__D1(tk2dUIItem obj); // 0x100310138
	internal bool <>m__D2(tk2dUIItem pc); // 0x100310150
	internal void <>m__D3(tk2dUIItem obj); // 0x1003101D0
}

// Namespace: 
public class MenuShopBase : MonoBehaviour // TypeDefIndex: 4057
{
	// Fields
	public GameObject cartButton; // 0x18
	public MenuTabsControl tabs; // 0x20
	public Sections currentSection; // 0x28
	public Section[] sections; // 0x30

	// Methods
	public void .ctor(); // 0x1003101E8
	public void SetTab(Sections section); // 0x100310260
	private void OnEnable(); // 0x100310610
	private void Start(); // 0x100310794
	private void OnTabSelect(int index); // 0x100310970
	private void ShowSection(Sections section); // 0x100310974
	private void OnMaskCover(int index); // 0x100310B8C
	private void ShowCurrentSection(); // 0x100310564
	private void HideAllSections(); // 0x100310B94
	private void Update(); // 0x100310C1C
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4058
{
	// Fields
	public int value__; // 0x10
	public const Sections cash = 0; // 0x0
	public const Sections diamons = 1; // 0x0
	public const Sections boosters = 2; // 0x0
	public const Sections avatars = 3; // 0x0
	public const Sections emblems = 4; // 0x0
	public const Sections flags = 5; // 0x0
	public const Sections starter = 6; // 0x0
	public const Sections unknown = 7; // 0x0
	public const Sections box = 8; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4059
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x100310D88
}

// Namespace: 
public class MenuShopBuyItems : MonoBehaviour // TypeDefIndex: 4060
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject shopprefab; // 0x28
	public Groups group; // 0x30
	public tk2dUIScrollableArea scroll; // 0x38
	private bool inprocess; // 0x40
	private long updateTime; // 0x48
	public BoxCollider boxColliderFix; // 0x50
	public tk2dSlicedSprite LineTop; // 0x58
	public tk2dSlicedSprite LineBottom; // 0x60
	private static Action`1<GameObject> <>f__am$cacheA; // 0x0

	// Methods
	public void .ctor(); // 0x100310D90
	private void OnEnable(); // 0x100310D98
	private void FixCollider(); // 0x100311228
	public void On(); // 0x1003111F0
	public void Reset(); // 0x100310E18
	private void OnDisable(); // 0x100311368
	private IEnumerator GetItems(); // 0x1003112FC
	private void OnGetItems(); // 0x1003113CC
	private void Update(); // 0x100311A1C
	private IEnumerator Refresh(); // 0x100311A20
	private static void <Reset>m__D4(GameObject child); // 0x100311A94
}

// Namespace: 
private sealed class <GetItems>c__Iterator58 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4061
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuShopBuyItems <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1003113C4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100311B00
	private object System.Collections.IEnumerator.get_Current(); // 0x100311B08
	public bool MoveNext(); // 0x100311B10
	public void Dispose(); // 0x100311C1C
	public void Reset(); // 0x100311C28
}

// Namespace: 
private sealed class <Refresh>c__Iterator59 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4062
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuShopBuyItems <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100311A8C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100311C7C
	private object System.Collections.IEnumerator.get_Current(); // 0x100311C84
	public bool MoveNext(); // 0x100311C8C
	public void Dispose(); // 0x100311DD0
	public void Reset(); // 0x100311DDC
}

// Namespace: 
public class MenuShopSelect : MonoBehaviour // TypeDefIndex: 4063
{
	// Fields
	public GameObject cartButton; // 0x18
	public float space; // 0x20
	public ShopMenuButton[] buttons; // 0x28
	private tk2dCamera guicamera; // 0x30

	// Methods
	public void .ctor(); // 0x100311E30
	private void OnEnable(); // 0x100311E40
	private void Start(); // 0x100311EDC
}

// Namespace: 
public class MenuSoundsDownload : MonoBehaviour // TypeDefIndex: 4064
{
	// Fields
	public LoadingBundle soundsLoading; // 0x18

	// Methods
	public void .ctor(); // 0x10031214C
	private void Awake(); // 0x100312154
	private void DownloadSounds(); // 0x100312338
	private void OnDownloadedAC(List`1<AudioClip> audioClips); // 0x10031248C
	private void OnDestroy(); // 0x10031251C
}

// Namespace: 
public class MenuSquad : MonoBehaviour // TypeDefIndex: 4065
{
	// Fields
	public MenuTabsControl tabs; // 0x18
	public GameObject squadRequestBtn; // 0x20
	public GameObject settingsBtn; // 0x28
	public tk2dUIItem[] buttons1; // 0x30
	public tk2dUIItem[] buttons2; // 0x38
	public static Sections currentSection; // 0x0
	public Section[] sections; // 0x40
	public static int squadID; // 0x4
	public static int prev_squadID; // 0x8
	public static Sections section; // 0xC

	// Methods
	public void .ctor(); // 0x100312674
	private static void .cctor(); // 0x10031267C
	private void OnDisable(); // 0x100312680
	private void OnEnable(); // 0x100312708
	private void Start(); // 0x100312CD8
	private void OnTabSelect(int index); // 0x100312E94
	private void OnMaskCover(int index); // 0x100312EAC
	public void ShowCurrentSection(); // 0x100312A14
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4066
{
	// Fields
	public int value__; // 0x10
	public const Sections squad = 0; // 0x0
	public const Sections tournament = 1; // 0x0
	public const Sections diplomacy = 2; // 0x0
	public const Sections joinsquad = 3; // 0x0
	public const Sections settings = 4; // 0x0
	public const Sections battles = 5; // 0x0
	public const Sections territory = 6; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4067
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x100313CA8
}

// Namespace: 
public class MenuSquadBattles : MonoBehaviour // TypeDefIndex: 4068
{
	// Fields
	public tk2dSprite SquadEmblem; // 0x18
	public tk2dTextMesh PlayersTextMesh; // 0x20
	public tk2dTextMesh WinsTextMesh; // 0x28
	public tk2dTextMesh SquadNameTextMesh; // 0x30
	public SquadWarElement CurrentWar; // 0x38
	public Transform PreviousWarsAnchor; // 0x40
	public GameObject loadinggo; // 0x48
	public GameObject contentgo; // 0x50
	public GameObject warPrefab; // 0x58
	public GameObject seperatorPrefab; // 0x60
	public tk2dUIScrollableArea scroll; // 0x68
	public int MaxWars; // 0x70
	private bool inprocess; // 0x74
	public GameObject WarRulesGO; // 0x78
	public GameObject FindEnemyBlock; // 0x80
	public tk2dUIItem FindEnemyButton; // 0x88
	public tk2dUIItem WarRulesButton; // 0x90
	public tk2dUIItem WarRulesCloseButton; // 0x98
	public int squadID; // 0xA0
	private static Action`1<GameObject> <>f__am$cache13; // 0x0

	// Methods
	public void .ctor(); // 0x100313CB0
	private void Awake(); // 0x100313CC0
	private void OnEnable(); // 0x100313DD8
	public void On(Squad squad); // 0x100313F7C
	public void On(); // 0x100313F44
	public void Reset(); // 0x100313FB8
	private void OnDisable(); // 0x1003143E4
	private IEnumerator GetSquadInfo(optional Squad otherSquad); // 0x100314368
	private void OnGetSquadInfo(optional Squad otherSquad); // 0x100314578
	private void FindEnemy(); // 0x100314F6C
	private void WarRules(); // 0x100314F70
	private void WarRulesClose(); // 0x100314F90
	private static void <Reset>m__D5(GameObject child); // 0x100314FB0
}

// Namespace: 
private sealed class <GetSquadInfo>c__Iterator5A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4069
{
	// Fields
	internal Squad otherSquad; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal Squad <$>otherSquad; // 0x28
	internal MenuSquadBattles <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100314570
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10031501C
	private object System.Collections.IEnumerator.get_Current(); // 0x100315024
	public bool MoveNext(); // 0x10031502C
	public void Dispose(); // 0x100315138
	public void Reset(); // 0x100315144
}

// Namespace: 
public class MenuSquadDiplomacy : MonoBehaviour // TypeDefIndex: 4070
{
	// Fields
	public tk2dSprite SquadEmblem; // 0x18
	public tk2dTextMesh allianceStatusTextMesh; // 0x20
	public tk2dTextMesh allianceNameTextMesh; // 0x28
	public tk2dUIItem allianceLeaderButton; // 0x30
	public tk2dUIItem allianceInviteButton; // 0x38
	public tk2dUIItem allianceDismissButton; // 0x40
	public tk2dTextMesh allianceDismissText; // 0x48
	public tk2dTextMesh WeeklyPointsTextMesh; // 0x50
	public tk2dTextMesh TotalPointsTextMesh; // 0x58
	public GameObject loadinggo; // 0x60
	public GameObject contentgo; // 0x68
	public GameObject playerPrefab; // 0x70
	public GameObject seperatorPrefab; // 0x78
	public tk2dUIScrollableArea scroll; // 0x80
	private bool inprocess; // 0x88
	private int userStatus; // 0x8C
	private bool noInviteAccepted; // 0x90
	public int squadID; // 0x94
	public static Squad squad; // 0x0
	private static Action`1<GameObject> <>f__am$cache13; // 0x8

	// Methods
	public void .ctor(); // 0x100315198
	private void Awake(); // 0x1003151B0
	private void OnDestroy(); // 0x1003152C8
	private void AllianceInviteOnClick(); // 0x100315610
	private void AllianceDismissOnClick(); // 0x100315904
	private void AllianceDismiss(); // 0x100315E94
	private void AllianceLeaderOnClick(); // 0x1003160F0
	private void OnSquadAllianceOk(); // 0x1003162D0
	private void OnSquadAllianceError(); // 0x100316458
	private void OnSquadDataOk(Squad squad); // 0x100316580
	public void ResetDiplomacy(); // 0x100316400
	private void ResetDiplomacyInternal(Squad _squad); // 0x100316584
	private void OnEnable(); // 0x100316EA8
	public void On(); // 0x100316EAC
	public void Reset(); // 0x100316F1C
	private void OnDisable(); // 0x100317340
	private IEnumerator GetSquadInfo(optional Squad otherSquad); // 0x1003172C4
	private void OnGetSquadInfo(optional Squad otherSquad); // 0x100317540
	private void <AllianceDismissOnClick>m__D6(); // 0x100318A70
	private void <AllianceDismissOnClick>m__D7(); // 0x100318A74
	private static void <Reset>m__D8(GameObject child); // 0x100318A78
}

// Namespace: 
private sealed class <GetSquadInfo>c__Iterator5B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4071
{
	// Fields
	internal Squad otherSquad; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal Squad <$>otherSquad; // 0x28
	internal MenuSquadDiplomacy <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100317538
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100318AE4
	private object System.Collections.IEnumerator.get_Current(); // 0x100318AEC
	public bool MoveNext(); // 0x100318AF4
	public void Dispose(); // 0x100318C04
	public void Reset(); // 0x100318C10
}

// Namespace: 
public class MenuSquadPlayers : MonoBehaviour // TypeDefIndex: 4072
{
	// Fields
	public Sections section; // 0x18
	public tk2dSprite SquadEmblem; // 0x20
	public tk2dTextMesh PlayerCountTextMesh; // 0x28
	public tk2dTextMesh OnlineCountTextMesh; // 0x30
	public tk2dTextMesh SquadNameTextMesh; // 0x38
	public tk2dTextMesh SquadMembershipTextMesh; // 0x40
	public tk2dTextMesh SquadWeeklyPointsTextMesh; // 0x48
	public tk2dTextMesh SquadPointsTextMesh; // 0x50
	public tk2dTextMesh minScoreCup; // 0x58
	public GameObject squadJoinButton; // 0x60
	public tk2dUIItem buySlotsButton; // 0x68
	public tk2dTextMesh squadDesc; // 0x70
	private tk2dSlicedSprite m_squadJoinButtonBack; // 0x78
	public GameObject squadJoinButtonGlow; // 0x80
	public GameObject squadInfoButton; // 0x88
	public GameObject loadinggo; // 0x90
	public GameObject contentgo; // 0x98
	public GameObject playerPrefab; // 0xA0
	public GameObject seperatorPrefab; // 0xA8
	public tk2dUIScrollableArea scroll; // 0xB0
	private bool inprocess; // 0xB8
	public tk2dTextMesh squadJoinText; // 0xC0
	private int userStatus; // 0xC8
	public int squadID; // 0xCC
	public static Squad squad; // 0x0
	public Triger triger; // 0xD0
	private static Action`1<GameObject> <>f__am$cache1A; // 0x8

	// Methods
	public void .ctor(); // 0x100318C64
	private void Awake(); // 0x100318C74
	private void BuySlots(); // 0x100318D20
	private void SquadExpand(); // 0x100318F2C
	private void OnEnable(); // 0x100319018
	private void On(Squad squad); // 0x1003192A8
	public void Reset(); // 0x1003192E4
	private void OnDisable(); // 0x100319708
	private bool SetSquad(optional Squad otherSquad); // 0x100319900
	private IEnumerator GetSquadInfo(optional Squad otherSquad); // 0x10031968C
	private void OnGetSquadInfo(optional Squad otherSquad); // 0x1003199FC
	private void Update(); // 0x10031A6E4
	private void OnError(); // 0x10031AD48
	private void <BuySlots>m__D9(); // 0x10031AE70
	private static void <Reset>m__DA(GameObject child); // 0x10031AE74
}

// Namespace: 
public struct Triger // TypeDefIndex: 4073
{
	// Fields
	private int counter; // 0x10

	// Methods
	public void Reset(); // 0x10031B084
	public bool Iterate(); // 0x10031B090
}

// Namespace: 
private sealed class <GetSquadInfo>c__Iterator5C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4074
{
	// Fields
	internal Squad otherSquad; // 0x10
	internal bool <result>__0; // 0x18
	internal int $PC; // 0x1C
	internal object $current; // 0x20
	internal Squad <$>otherSquad; // 0x28
	internal MenuSquadPlayers <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1003199F4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10031AEE0
	private object System.Collections.IEnumerator.get_Current(); // 0x10031AEE8
	public bool MoveNext(); // 0x10031AEF0
	public void Dispose(); // 0x10031B018
	public void Reset(); // 0x10031B024
}

// Namespace: 
public class MenuSquadRequest : MonoBehaviour // TypeDefIndex: 4075
{
	// Fields
	public tk2dSprite SquadEmblem; // 0x18
	public tk2dTextMesh PlayerCountTextMesh; // 0x20
	public tk2dTextMesh SquadNameTextMesh; // 0x28
	public GameObject loadinggo; // 0x30
	public GameObject contentgo; // 0x38
	public GameObject NoInviteText; // 0x40
	public GameObject playerPrefab; // 0x48
	public GameObject seperatorPrefab; // 0x50
	public tk2dUIScrollableArea scroll; // 0x58
	private bool inprocess; // 0x60
	private static Action`1<GameObject> <>f__am$cacheA; // 0x0

	// Methods
	public void .ctor(); // 0x10031B0C0
	private void OnEnable(); // 0x10031B0C8
	public void On(); // 0x10031B338
	public void Reset(); // 0x10031B36C
	private void OnDisable(); // 0x10031B788
	private IEnumerator GetSquadInfo(); // 0x10031B71C
	private void OnGetSquadInfo(); // 0x10031B8D4
	private void Update(); // 0x10031C014
	private static void <Reset>m__DB(GameObject child); // 0x10031C018
}

// Namespace: 
private sealed class <GetSquadInfo>c__Iterator5D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4076
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuSquadRequest <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10031B8CC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10031C084
	private object System.Collections.IEnumerator.get_Current(); // 0x10031C08C
	public bool MoveNext(); // 0x10031C094
	public void Dispose(); // 0x10031C1A0
	public void Reset(); // 0x10031C1AC
}

// Namespace: 
public class MenuSquadSettings : MonoBehaviour // TypeDefIndex: 4077
{
	// Fields
	public tk2dSprite SquadEmblem; // 0x18
	public TextInput SquadName; // 0x20
	public TextInput squadDescription; // 0x28
	public tk2dTextMesh MembershipTextMesh; // 0x30
	public GameObject MembershipBlock; // 0x38
	public tk2dUIItem MembershipSelectButton; // 0x40
	public GameObject MembershipSelectGO; // 0x48
	public tk2dUIItem[] MembershipButtons; // 0x50
	public tk2dTextMesh[] MembershipTextMeshes; // 0x58
	public string[] LocalizationMembershipSettings; // 0x60
	public tk2dTextMesh TerMinStatusTextMesh; // 0x68
	public GameObject TerMinStatusBlock; // 0x70
	public tk2dUIItem TerMinStatusSelectButton; // 0x78
	public GameObject TerMinStatusSelectGO; // 0x80
	public tk2dUIItem[] TerMinStatusButtons; // 0x88
	public tk2dTextMesh[] TerMinStatusTextMeshes; // 0x90
	public string[] LocalizationTerMinStatusSettings; // 0x98
	public GameObject EmblemsBlock; // 0xA0
	public tk2dUIItem BuyEmblems; // 0xA8
	public tk2dUIItem SaveButton; // 0xB0
	public tk2dUIItem LeaveSquadButton; // 0xB8
	public GameObject InactiveSaveButton; // 0xC0
	public tk2dTextMesh PayAndSaveTextMesh; // 0xC8
	public tk2dUIItem PayAndSaveButton; // 0xD0
	public LocalizationTextMesh PayAndSaveLabel; // 0xD8
	public tk2dTextMesh errormesh; // 0xE0
	public tk2dTextMesh statusDescription; // 0xE8
	public GameObject[] Inactives; // 0xF0
	public GameObject loadingGO; // 0xF8
	public GameObject contentGO; // 0x100
	public tk2dTextMesh nickMesh; // 0x108
	private bool inprocess; // 0x110
	private int squadID; // 0x114
	private string currentSquadDescription; // 0x118
	private string currentSquadName; // 0x120
	private int currentStatus; // 0x128
	private int newStatus; // 0x12C
	private int currentTerMinStatus; // 0x130
	private int newTerMinStatus; // 0x134
	private int currentEmblem; // 0x138
	private int newEmblem; // 0x13C
	private int userStatus; // 0x140
	private CupUpdaterSquad cupUpdaterSquad; // 0x148
	public EmblemsScroll avatarsScroll; // 0x150
	private static Func`2<ShopItem, int> <>f__am$cache2C; // 0x0
	private static Func`2<int, int> <>f__am$cache2D; // 0x8
	private static OnSocketServerDgt <>f__am$cache2E; // 0x10
	private static Action <>f__am$cache2F; // 0x18

	// Methods
	public void .ctor(); // 0x10031C200
	private void Start(); // 0x10031C210
	public void RefreshAvatar(int id); // 0x10031C2B0
	private void Awake(); // 0x10031C37C
	private void OnEnable(); // 0x10031C758
	public void On(optional Squad squad); // 0x10031C960
	private void OnDisable(); // 0x10031CA1C
	private IEnumerator GetSquadInfo(); // 0x10031C9B0
	private void OnGetSquadInfo(); // 0x10031CB68
	private void SetMembershipText(); // 0x10031D644
	private void SetTerMinStatusText(); // 0x10031D8C8
	public bool CheckEnteredName(); // 0x10031DB4C
	public void SetError(string textkey); // 0x10031DC60
	private void OffError(); // 0x10031C8A0
	private void Update(); // 0x10031DD3C
	private void OnLeaveSquadButton(); // 0x10031DF30
	private void LeaveSquad(); // 0x10031E1E0
	private void OnSave(); // 0x10031E394
	private void OnDuplicateName(); // 0x10031E830
	private void OnCreateOk(); // 0x10031EA2C
	private void PayAndSave(); // 0x10031EDF8
	private void OnBuyEmblems(); // 0x10031EF40
	private void OnMembershipButton(); // 0x10031F0A4
	private void OnTerMinStatusButton(); // 0x10031F0E8
	private void OnMembershipSelected(tk2dUIItem source); // 0x10031F12C
	private void OnTerMinStatusSelected(tk2dUIItem source); // 0x10031F3CC
	private void SetSaveButton(); // 0x10031DD40
	private bool EmblemChanged(); // 0x10031E76C
	private void OnEmblemSelected(tk2dUIItem source); // 0x10031F788
	private void <Start>m__DC(tk2dUIScrollableArea obj); // 0x10031F8A0
	private void <Awake>m__DD(TextInput obj); // 0x10031F924
	private static int <OnGetSquadInfo>m__DE(ShopItem x); // 0x10031F928
	private static int <OnGetSquadInfo>m__DF(int x); // 0x10031F940
	private void <OnLeaveSquadButton>m__E2(); // 0x10031F9B8
	private static void <LeaveSquad>m__E3(); // 0x10031F9BC
	private static void <OnCreateOk>m__E4(); // 0x10031FE04
}

// Namespace: 
private sealed class <GetSquadInfo>c__Iterator5E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4078
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuSquadSettings <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10031CB60
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10031FEEC
	private object System.Collections.IEnumerator.get_Current(); // 0x10031FEF4
	public bool MoveNext(); // 0x10031FEFC
	public void Dispose(); // 0x100320040
	public void Reset(); // 0x10032004C
}

// Namespace: 
private sealed class <OnGetSquadInfo>c__AnonStoreyF4 // TypeDefIndex: 4079
{
	// Fields
	internal Squad squad; // 0x10
	internal MenuSquadSettings <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10031D63C
	internal void <>m__E0(GameObject obj, int id); // 0x1003200A0
	internal int <>m__E1(int x); // 0x100320148
}

// Namespace: 
public class MenuStamina : MonoBehaviour // TypeDefIndex: 4080
{
	// Fields
	public StaminaBar staminaBar; // 0x18
	public tk2dUIItem staminaBtn; // 0x20
	public GameObject energydialogPrefab; // 0x28
	public GameObject staminaPlusIcon; // 0x30
	private EnergyDialog energyDialog; // 0x38

	// Methods
	public void .ctor(); // 0x1003201EC
	private void Start(); // 0x1003201F4
	public void OnClick(); // 0x1003203D0
	private void OnFacebookClick(); // 0x100320800
	private void OnFacebookPost(); // 0x10032095C
	private void Update(); // 0x100320D44
	private void OnWaitClick(); // 0x100320EF4
	private void OnDonateClick(); // 0x100320F48
	public void OnStaminaUpdate(float value, int lastusingtime, int facebooktime); // 0x100320B8C
	public bool UseStamina(int cost); // 0x100320C84
	public bool CheckStamina(int cost); // 0x10032109C
	public void AddStamina(int count); // 0x100321108
	public void SetStamina(float count); // 0x1003211B0
	private IEnumerator Regeneration(); // 0x100321248
	private void OnDestroy(); // 0x1003212BC
	private void CreateEnergyDialog(); // 0x1003206D8
}

// Namespace: 
private sealed class <Regeneration>c__Iterator5F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4081
{
	// Fields
	internal int <time>__0; // 0x10
	internal float <regenpoints>__1; // 0x14
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal MenuStamina <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1003212B4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100321444
	private object System.Collections.IEnumerator.get_Current(); // 0x10032144C
	public bool MoveNext(); // 0x100321454
	public void Dispose(); // 0x1003216AC
	public void Reset(); // 0x1003216B8
}

// Namespace: 
public abstract class MenuStateButtons : MonoBehaviour // TypeDefIndex: 4082
{
	// Fields
	public float speed; // 0x18
	public MenuStateButton installed; // 0x20
	public MenuStateButton upgrade; // 0x28
	public MenuStateButton required; // 0x30
	public MenuStateButton requiredMaxPart; // 0x38
	public MenuStateButton requiredTuning; // 0x40
	public MenuStateButton requiredCup; // 0x48
	public MenuStateButton requiredVeteran; // 0x50
	public MenuStateButton inDevelop; // 0x58
	protected States state; // 0x60
	private float leftSpace; // 0x64
	private float blockWidth; // 0x68
	private MenuStateButton activeButton; // 0x70
	private MenuStateButton btnForShow; // 0x78
	private float[] velo; // 0x80
	private Vector3 buttonsStartPos; // 0x88
	public MenuCamouflages menuCamo; // 0x98
	private float constOffset; // 0xA0

	// Methods
	protected void .ctor(); // 0x1003219C0
	private void Awake(); // 0x100321A48
	private void Start(); // 0x100321AF8
	private void Update(); // 0x100321C70
	public virtual void SetButtonText(MenuStateButton btn, string requiredbtntext); // 0x100322150
	public virtual void ShowButton(MenuStateButton btn, string requiredbtntext, optional int cup_required); // 0x100322270
	private void OffButton(MenuStateButton button); // 0x10032295C
	private void OffButtons(); // 0x1003228E8
}

// Namespace: 
protected sealed class States : Enum // TypeDefIndex: 4083
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States hiding = 1; // 0x0
	public const States showing = 2; // 0x0

}

// Namespace: 
public class MenuTabsControl : MonoBehaviour // TypeDefIndex: 4084
{
	// Fields
	public OnSelectDeligate OnSelect; // 0x18
	public OnMaskCoverDeligate OnMaskCover; // 0x20
	public GUISsScreenOverride gUISsScreenOverride; // 0x28
	public tk2dUIItem[] buttons; // 0x30
	public tk2dSlicedSprite separator; // 0x38
	public tk2dSlicedSprite border; // 0x40
	public float borderOffestX; // 0x48
	public tk2dSlicedSprite selector; // 0x50
	public tk2dUIMask mask; // 0x58
	public float speed; // 0x60
	private tk2dCamera guicamera; // 0x68
	public int currentIndex; // 0x70
	public Color offColor; // 0x74
	public Color onCollor; // 0x84
	public Color diableColor; // 0x94
	public bool playSounds; // 0xA4
	private float[] velo; // 0xA8
	private MaskStates maskState; // 0xB0
	private bool isInited; // 0xB4

	// Methods
	public void .ctor(); // 0x100322AB0
	private void Start(); // 0x100322BB0
	protected virtual float tabsWeight(); // 0x100322BC0
	public void Init(); // 0x100312F74
	public void OnSwitchProfile(); // 0x100322C20
	public void SetTabPermament(int index); // 0x10031029C
	public void ShowMask(); // 0x100310A9C
	public void HideMask(); // 0x100322E7C
	private void Update(); // 0x100322F9C
	private void OnClick(tk2dUIItem item); // 0x100323330
	public void SetIndex(int index); // 0x1003235CC
	private void ChengeTextColor(int index); // 0x100322D08
}

// Namespace: 
private sealed class MaskStates : Enum // TypeDefIndex: 4085
{
	// Fields
	public int value__; // 0x10
	public const MaskStates idle = 0; // 0x0
	public const MaskStates showing = 1; // 0x0
	public const MaskStates hiding = 2; // 0x0

}

// Namespace: 
public sealed class OnSelectDeligate : MulticastDelegate // TypeDefIndex: 4086
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100310950
	public virtual void Invoke(int index); // 0x1003237EC
	public virtual IAsyncResult BeginInvoke(int index, AsyncCallback callback, object object); // 0x100323944
	public virtual void EndInvoke(IAsyncResult result); // 0x1003239FC
}

// Namespace: 
public sealed class OnMaskCoverDeligate : MulticastDelegate // TypeDefIndex: 4087
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100310960
	public virtual void Invoke(int index); // 0x1003232BC
	public virtual IAsyncResult BeginInvoke(int index, AsyncCallback callback, object object); // 0x100323870
	public virtual void EndInvoke(IAsyncResult result); // 0x100323928
}

// Namespace: 
public class MenuTuningBtn : MonoBehaviour // TypeDefIndex: 4088
{
	// Fields
	public int tuningType; // 0x18
	private BottomScroll m_Scroll; // 0x20

	// Methods
	public void .ctor(); // 0x100323A08
	private void Awake(); // 0x100323A10
	public void GoToThisButton(); // 0x100323AD8
}

// Namespace: 
public class MenuTuningIconControl : MonoBehaviour // TypeDefIndex: 4089
{
	// Fields
	public tk2dTextMesh label; // 0x18
	private tk2dSprite sprt; // 0x20
	private Items oldItem; // 0x28

	// Methods
	public void .ctor(); // 0x100323B84
	private void Start(); // 0x100323B8C
	private void Update(); // 0x100323D90
	private void UpdateIcon(); // 0x100323C18
}

// Namespace: 
public class MenuUpdDroneButton : MenuUpgradeBaseButton // TypeDefIndex: 4090
{
	// Fields
	public DronePartType part; // 0x20

	// Methods
	public void .ctor(); // 0x100323E38
}

// Namespace: 
public class MenuUpdHelmetButton : MenuUpgradeBaseButton // TypeDefIndex: 4091
{
	// Fields
	public HelmetPartType helmetPart; // 0x20

	// Methods
	public void .ctor(); // 0x100323E48
}

// Namespace: 
public class MenuUpdWeaponButton : MenuUpgradeBaseButton // TypeDefIndex: 4092
{
	// Fields
	public WeaponPartType weaponPart; // 0x20

	// Methods
	public void .ctor(); // 0x100323E50
}

// Namespace: 
public class MenuUpgrade : MonoBehaviour // TypeDefIndex: 4093
{
	// Fields
	public Items item; // 0x18
	public MenuArmoryButtons2 smartButtons; // 0x20
	public MenuUpgradeButtons buttons; // 0x28
	public MenuUpgradeStages stages; // 0x30
	public MenuUpgradeStats stats; // 0x38
	public BottomScroll partNavigator; // 0x40
	public GameObject loader; // 0x48
	public MenuWeaponLights lights; // 0x50
	public Transform model; // 0x58
	public LoadingBundle loadingbundle; // 0x60
	public LoadingBundle loadingweaponcamobundle; // 0x68
	public MenuHelmetsLoaded helmetsLoaded; // 0x70
	public MenuWeaponLoaded weaponsLoaded; // 0x78
	public MenuDronesLoaded dronesLoaded; // 0x80
	public tk2dTextMesh description; // 0x88
	public GameObject camoblock; // 0x90
	public GameObject modelblock; // 0x98
	private Weapon weapon; // 0xA0
	private WeaponPart part; // 0xA8
	private WeaponPartStage currentStage; // 0xB0
	private Helmet helmet; // 0xB8
	private HelmetPart helmetpart; // 0xC0
	private HelmetPartStage helmetcurrentStage; // 0xC8
	private SABaseDrone drone; // 0xD0
	public int dronepart; // 0xD8
	public int dronecurrentStage; // 0xDC
	private static Predicate`1<SABaseDrone> <>f__am$cache1A; // 0x0

	// Methods
	public void .ctor(); // 0x100323E58
	public WeaponPartStage GetCurrentStage(); // 0x100323E60
	public HelmetPartStage GetCurrentStageForHelmet(); // 0x100323E68
	public WeaponPart GetPart(); // 0x100323E70
	public HelmetPart GetPartForHelmet(); // 0x100323E78
	public SADroneStage GetCurrentStageForDrone(); // 0x100323E80
	public SABaseDrone GetDrone(); // 0x100323EDC
	private void OnSmartRifleUpgradeOk(); // 0x100323EE4
	private void OnSmartHelmetUpgradeOk(); // 0x1003240B0
	private void OnDisable(); // 0x10032427C
	private void OnEnable(); // 0x100324450
	private void Refresh(); // 0x10032462C
	private void SetupWeaponCamo(GameObject wmodel); // 0x100325094
	public void OnLoadedWeapon(int weaponType, GameObject w); // 0x1003256BC
	public void OnLoadedHelmet(int helmetType, GameObject h); // 0x100325980
	public void OnLoadedDrone(int helmetType, GameObject h); // 0x100325A38
	private void OnDownloadError(); // 0x100325A6C
	private void Awake(); // 0x100325A98
	private void Start(); // 0x100325A9C
	private void OnStageChange(int stge); // 0x100325F50
	private void OnItemSelected(Transform obj); // 0x100326DC4
	private IEnumerator SetChangedStats(); // 0x100328678
	public void ApplyStats(); // 0x1003286EC
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, double max_damage, double max_speed, double max_zoom, double max_stability, double max_amount, int weapon_type, int headshoot, bool applyPermament, bool applyEasy); // 0x100324C88
	private static bool <Refresh>m__E5(SABaseDrone obj); // 0x100328D10
}

// Namespace: 
private sealed class <SetChangedStats>c__Iterator60 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4094
{
	// Fields
	internal WeaponAttributes <atr>__0; // 0x10
	internal int <j>__1; // 0xC8
	internal int <i>__2; // 0xCC
	internal WeaponPartStage <activeStage>__3; // 0xD0
	internal WeaponPartStage[] <allStg>__4; // 0xD8
	internal int <i>__5; // 0xE0
	internal int <i>__6; // 0xE4
	internal Tuning <camo>__7; // 0xE8
	internal Tuning <camo>__8; // 0xF0
	internal HelmetAttributes <atr>__9; // 0xF8
	internal int <j>__10; // 0x140
	internal int <i>__11; // 0x144
	internal HelmetPartStage <activeStage>__12; // 0x148
	internal HelmetPartStage[] <allStg>__13; // 0x150
	internal int <i>__14; // 0x158
	internal int <i>__15; // 0x15C
	internal Tuning <camo>__16; // 0x160
	internal Tuning <camo>__17; // 0x168
	internal int $PC; // 0x170
	internal object $current; // 0x178
	internal MenuUpgrade <>f__this; // 0x180

	// Methods
	public void .ctor(); // 0x1003286E4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100328D34
	private object System.Collections.IEnumerator.get_Current(); // 0x100328D3C
	public bool MoveNext(); // 0x100328D44
	public void Dispose(); // 0x100329940
	public void Reset(); // 0x10032994C
}

// Namespace: 
public class MenuUpgradeButton : MenuStateButton // TypeDefIndex: 4095
{
	// Fields
	public int deliveryTime; // 0xA8
	public tk2dTextMesh timeText; // 0xB0
	private MenuUpgradeButtons menuUpdBtns; // 0xB8

	// Methods
	public void .ctor(); // 0x100329B14
	private void Awake(); // 0x100329B1C
	public override void SetCost(int value); // 0x100329BF0
	public override void SetRequiredTuning(int tuning_required); // 0x100329C44
	public override void SetRemains(string requiredbtntext); // 0x100329C98
	public void SetCost(int value, MoneyTypes costType); // 0x100329CEC
	private void OnClick(); // 0x100329EA8
	private void Pay(); // 0x10032A6F4
	private void OnEnable(); // 0x10032A86C
	private void OnDisable(); // 0x10032AE58
	private IEnumerator Tick(); // 0x10032B588
	private void DeliveryEvent(); // 0x10032B5FC
	private void OnWeaponPartBuyed(int weapontype, int weaponpartint, int stage); // 0x10032B830
	private void OnWeaponPartDelivered(int weapontype, int weaponpartint, int stage); // 0x10032BA68
	private void OnWeaponPartInstalled(int weapontype, int weaponpartint, int stage); // 0x10032BC58
	private void OnHelmetPartBuyed(int helmettype, int helmetpartint, int stage); // 0x10032C008
	private void OnHelmetPartDelivered(int helmettype, int helmetpartint, int stage); // 0x10032C240
	private void OnHelmetPartInstalled(int helmettype, int helmetpartint, int stage); // 0x10032C430
}

// Namespace: 
private sealed class <Tick>c__Iterator61 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4096
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MenuUpgradeButton <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10032B5F4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10032C798
	private object System.Collections.IEnumerator.get_Current(); // 0x10032C7A0
	public bool MoveNext(); // 0x10032C7A8
	public void Dispose(); // 0x10032CAC4
	public void Reset(); // 0x10032CAD0
}

// Namespace: 
public class MenuUpgradeButtons : MonoBehaviour // TypeDefIndex: 4097
{
	// Fields
	public GameObject messagedialogprefab; // 0x18
	public float speed; // 0x20
	public MenuUpgradeButton delivery; // 0x28
	public MenuUpgradeButton install; // 0x30
	public MenuUpgradeButton installed; // 0x38
	public MenuUpgradeButton upgrade; // 0x40
	public MenuUpgradeButton requiredCup; // 0x48
	private States state; // 0x50
	private float leftSpace; // 0x54
	private float blockWidth; // 0x58
	private MenuUpgradeButton activeButton; // 0x60
	private MenuUpgradeButton btnForShow; // 0x68
	private float[] velo; // 0x70
	private Vector3 buttonsStartPos; // 0x78
	public MenuUpgrade menuUpgrade; // 0x88
	private float constOffset; // 0x90

	// Methods
	public void .ctor(); // 0x10032CB24
	public MessageGirl01Dialog CreateDialog(string header, string message); // 0x10032A594
	private void Start(); // 0x10032CBAC
	private void Update(); // 0x10032CD54
	public void TryAutomaticSwitchStage(); // 0x10032BF04
	private IEnumerator NextStageClick(); // 0x10032D230
	public void ShowButton(MenuUpgradeButton btn, optional int cup_required); // 0x10032686C
	private void OffButtons(); // 0x10032D2A4
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 4098
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States hiding = 1; // 0x0
	public const States showing = 2; // 0x0

}

// Namespace: 
private sealed class <NextStageClick>c__Iterator62 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4099
{
	// Fields
	internal WeaponPart <p>__0; // 0x10
	internal WeaponPartStage <nextNewStage>__1; // 0x18
	internal HelmetPart <p>__2; // 0x20
	internal HelmetPartStage <nextNewStage>__3; // 0x28
	internal int $PC; // 0x30
	internal object $current; // 0x38
	internal MenuUpgradeButtons <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x10032D29C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10032D5C4
	private object System.Collections.IEnumerator.get_Current(); // 0x10032D5CC
	public bool MoveNext(); // 0x10032D5D4
	public void Dispose(); // 0x10032D988
	public void Reset(); // 0x10032D994
}

// Namespace: 
public class MenuUpgradeStages : MonoBehaviour // TypeDefIndex: 4100
{
	// Fields
	public OnStageChangeDelegate OnStageChange; // 0x18
	public tk2dTextMesh valueText; // 0x20
	public tk2dUIItem leftBtn; // 0x28
	public tk2dUIItem rightBtn; // 0x30
	public int stage; // 0x38
	public int maxStage; // 0x3C
	private float leftSpace; // 0x40
	private int oldStage; // 0x44

	// Methods
	public void .ctor(); // 0x10032D9E8
	private void Start(); // 0x10032D9F8
	private void OnLeftClick(); // 0x10032DC00
	private void OnRightClick(); // 0x10032DC10
	public void SetStage(int value, bool castevent); // 0x100328430
}

// Namespace: 
public sealed class OnStageChangeDelegate : MulticastDelegate // TypeDefIndex: 4101
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100325F30
	public virtual void Invoke(int currentStage); // 0x10032DC20
	public virtual IAsyncResult BeginInvoke(int currentStage, AsyncCallback callback, object object); // 0x10032DCA4
	public virtual void EndInvoke(IAsyncResult result); // 0x10032DD5C
}

// Namespace: 
public class MenuUpgradeStat : MonoBehaviour // TypeDefIndex: 4102
{
	// Fields
	private const float MIN_BAR_SIZE = 0.025; // 0x0
	public StatType statType; // 0x18
	public States state; // 0x1C
	public float current; // 0x20
	public float max_current; // 0x24
	public float max; // 0x28
	public int headshot; // 0x2C
	public bool apply; // 0x30
	public float speed; // 0x34
	private float tempCurrent; // 0x38
	private float tempValue; // 0x3C
	private float value; // 0x40
	private float valueRed; // 0x44
	private float valueGreen; // 0x48
	private tk2dSlicedSprite valueBar; // 0x50
	private tk2dSlicedSprite valueRedBar; // 0x58
	private tk2dSlicedSprite valueGreenBar; // 0x60
	private MenuUpgradeStats menuUpgradeStats; // 0x68
	private tk2dTextMesh valueText; // 0x70
	private tk2dTextMesh valueMaxText; // 0x78
	private tk2dTextMesh valueChangeText; // 0x80
	private tk2dTextMesh valueHeadshotText; // 0x88
	private float[] velo; // 0x90
	private bool inited; // 0x98

	// Methods
	public void .ctor(); // 0x10032DD68
	private void Start(); // 0x10032DDDC
	private void Init(); // 0x10032DDEC
	private void SetTextForValue(); // 0x10032EA3C
	private void SetTextForChangeValue(); // 0x10032EB14
	private void Update(); // 0x10032EED8
	public void ApplyChanges(); // 0x10032F59C
	public void ApplyChangesPermanent(); // 0x100328980
	private void OffRedBar(); // 0x10032F524
	private void OffGreenBar(); // 0x10032F4AC
	private void SetLimitsForValues(); // 0x10032F40C
}

// Namespace: 
public sealed class StatType : Enum // TypeDefIndex: 4103
{
	// Fields
	public int value__; // 0x10
	public const StatType stability = 0; // 0x0
	public const StatType speed = 1; // 0x0
	public const StatType zoom = 2; // 0x0
	public const StatType damage = 3; // 0x0
	public const StatType amount = 4; // 0x0

}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4104
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States applyingChanges = 1; // 0x0

}

// Namespace: 
public class MenuUpgradeStats : MonoBehaviour // TypeDefIndex: 4105
{
	// Fields
	public Transform stability; // 0x18
	public Transform speed; // 0x20
	public Transform zoom; // 0x28
	public Transform damage; // 0x30
	public Transform amount; // 0x38
	private Transform[] elements; // 0x40
	private float space; // 0x48
	private float leftSpace; // 0x4C
	private tk2dCamera guicamera; // 0x50
	private float blockWidth; // 0x58

	// Methods
	public void .ctor(); // 0x10032F5B0
	private void Start(); // 0x10032F5C4
	public float GetBlockWidth(); // 0x10032F4A4
}

// Namespace: 
public class MenuWeaponCamoLoadingGameObject : MonoBehaviour // TypeDefIndex: 4106
{
	// Fields
	public float ticktime; // 0x18
	public float oldtime; // 0x1C
	public GameObject loadinggameobgect; // 0x20

	// Methods
	public void .ctor(); // 0x100330260
	private void Update(); // 0x100330270
}

// Namespace: 
public class MenuWeaponCamouflages : MenuCamouflages // TypeDefIndex: 4107
{
	// Fields
	public tk2dTextMesh namecamo; // 0x48
	public MenuUpgradeStats stats; // 0x50
	public LoadingBundle weaponLoadingBundle; // 0x58
	public LoadingBundle camoweaponLoadingBundle; // 0x60
	public GameObject loader; // 0x68
	public MenuWeaponLights lights; // 0x70
	public Transform model; // 0x78
	public Menu3DElementInputRotate inputRotate; // 0x80
	public MenuWeaponLoaded menuWeaponLoaded; // 0x88
	public GameObject modelBlock; // 0x90
	public GameObject camoBlock; // 0x98
	public Transform infoBlock; // 0xA0
	public GameObject paintStatPrefab; // 0xA8
	public AnimStatus animStatus; // 0xB0
	public float switchSpeed; // 0xB4
	private float[] velo; // 0xB8
	private Transform lastselectedtransform; // 0xC0
	private MenuNavigatorEvents menuNavigatorEvents; // 0xC8
	private static OnMenuDgt <>f__am$cache12; // 0x0

	// Methods
	public void .ctor(); // 0x1003303BC
	private void Awake(); // 0x100330430
	private void Start(); // 0x10033055C
	private void OnDownloadError(); // 0x100330AD0
	private void OnEnable(); // 0x10033135C
	public override void LockBottomButtons(); // 0x1003315E4
	private void OnDisable(); // 0x100331B34
	private void OnBottomItemSelect(Transform t); // 0x100330B00
	private void CalculateStats(); // 0x10033569C
	public override void ApplyStats(); // 0x1003358D0
	private void ClearInfoBlock(); // 0x100331B50
	private void SetupInfoBlock(Tuning camo); // 0x100331E60
	private void Update(); // 0x100335990
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, int weapon_type, int headshoot, bool applyPermament, bool applyEasy); // 0x100330798
	private void <Awake>m__E6(MenuElements element); // 0x10033613C
	private static void <Awake>m__E7(MenuElements element); // 0x100336158
}

// Namespace: 
public sealed class AnimStatus : Enum // TypeDefIndex: 4108
{
	// Fields
	public int value__; // 0x10
	public const AnimStatus idle = 0; // 0x0
	public const AnimStatus hiding = 1; // 0x0
	public const AnimStatus showing = 2; // 0x0

}

// Namespace: 
public class MenuWeaponLights : MonoBehaviour // TypeDefIndex: 4109
{
	// Fields
	public Light baseLight; // 0x18
	public Light backLight; // 0x20
	public Light supportLight; // 0x28
	public Preset[] presets; // 0x30

	// Methods
	public void .ctor(); // 0x1003361BC
	private void OnEnable(); // 0x1003361C4
	public void SetLightsForWeapon(int type); // 0x1003258AC
	public void SetLightsOne(); // 0x100325844
}

// Namespace: 
public class Preset // TypeDefIndex: 4110
{
	// Fields
	public int weaponType; // 0x10
	public float baseIntensity; // 0x14
	public float backIntensity; // 0x18
	public float supportIntensity; // 0x1C

	// Methods
	public void .ctor(); // 0x1003361C8
}

// Namespace: 
public class MenuWeaponLoaded : MonoBehaviour // TypeDefIndex: 4111
{
	// Fields
	private const string LOADER_PATH = "Prefabs/GUI/LoaderOffset"; // 0x0
	public OnLoadedDeligate OnLoaded; // 0x18
	public LoadingBundle loadingBundle; // 0x20
	public GameObject loader; // 0x28
	public GameObject loadedElement; // 0x30
	public GameObject modelBlock; // 0x38
	private bool oldmodelblockactivestate; // 0x40
	public MenuLoader m_Loader; // 0x48
	public MenuLoader m_LoaderWeapon; // 0x50
	public Action OnWeaponSwitched; // 0x58
	private int currentWeaponType; // 0x60
	private int currentWeaponCamo; // 0x64

	// Methods
	public void .ctor(); // 0x1003361D0
	public void AddBundleDelegates(); // 0x1003361D8
	public void RemoveBundleDelegates(); // 0x10033639C
	public void OnStartDownload(); // 0x100336560
	private void OnDestroy(); // 0x100336580
	private void Start(); // 0x100336744
	public void OnDownloaded(List`1<GameObject> objects); // 0x100336880
	private IEnumerator OnDownloadedNumerator(List`1<GameObject> objects); // 0x100336960
	public bool IsLoading(); // 0x1003369E4
	public void StopDownload(); // 0x10033565C
	private void SetupWeapon(int newWeapon, int camo_type); // 0x100336A34
	public void Reset(); // 0x1003370B8
	public void SwitchWeapon(int newHelmet, int camo_type); // 0x100325090
	private void ShowWeapon(); // 0x1003373D4
	private bool CamoDisabled(int camo_type); // 0x100337AB0
	private void SetupWeaponCamo(int newWeapon, int camo_type); // 0x100336EFC
	private void ShowLoader(bool show); // 0x100337BBC
	private void ShowLoaderWeapon(bool show); // 0x100337EB0
	private void FixedUpdate(); // 0x1003381A4
	private void SetupTexture(BundleOptions selectedcamobundle, Weapon weapon, int camo_type); // 0x100337604
}

// Namespace: 
public sealed class OnLoadedDeligate : MulticastDelegate // TypeDefIndex: 4112
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100325F40
	public virtual void Invoke(int weaponType, GameObject weapon); // 0x1003389E8
	public virtual IAsyncResult BeginInvoke(int weaponType, GameObject weapon, AsyncCallback callback, object object); // 0x100338CB4
	public virtual void EndInvoke(IAsyncResult result); // 0x100338D78
}

// Namespace: 
private sealed class <OnDownloadedNumerator>c__Iterator63 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4113
{
	// Fields
	internal List`1<GameObject> objects; // 0x10
	internal Weapon <weapon>__0; // 0x18
	internal Transform <child>__1; // 0x20
	internal Vector3 <pos>__2; // 0x28
	internal Vector3 <scale>__3; // 0x34
	internal GameObject <newobject>__4; // 0x40
	internal int $PC; // 0x48
	internal object $current; // 0x50
	internal List`1<GameObject> <$>objects; // 0x58
	internal MenuWeaponLoaded <>f__this; // 0x60

	// Methods
	public void .ctor(); // 0x1003369DC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100338394
	private object System.Collections.IEnumerator.get_Current(); // 0x10033839C
	public bool MoveNext(); // 0x1003383A4
	public void Dispose(); // 0x100338A78
	public void Reset(); // 0x100338A84
}

// Namespace: 
private sealed class <SetupWeapon>c__AnonStoreyF5 // TypeDefIndex: 4114
{
	// Fields
	internal Weapon w; // 0x10
	internal int newWeapon; // 0x18
	internal int camo_type; // 0x1C
	internal MenuWeaponLoaded <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100336EF4
	internal void <>m__E8(); // 0x100338AD8
}

// Namespace: 
private sealed class <SetupWeaponCamo>c__AnonStoreyF7 // TypeDefIndex: 4115
{
	// Fields
	internal int newWeapon; // 0x10
	internal int camo_type; // 0x14
	internal MenuWeaponLoaded <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100337BAC
}

// Namespace: 
private sealed class <SetupWeaponCamo>c__AnonStoreyF6 // TypeDefIndex: 4116
{
	// Fields
	internal BundleOptions selectedcamobundle; // 0x10
	internal <SetupWeaponCamo>c__AnonStoreyF7 <>f__ref$247; // 0x18
	internal MenuWeaponLoaded <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100337BB4
	internal void <>m__E9(); // 0x100338BDC
}

// Namespace: 
public class MenuWeaponLoadingGameObjectControl : MonoBehaviour // TypeDefIndex: 4117
{
	// Fields
	public float ticktime; // 0x18
	public float oldtime; // 0x1C
	public GameObject loadinggameobgect; // 0x20

	// Methods
	public void .ctor(); // 0x100338D84
	private void Update(); // 0x100338D94
}

// Namespace: 
public class MenuWeaponService : MenuCamouflages // TypeDefIndex: 4118
{
	// Fields
	public tk2dTextMesh namecamo; // 0x48
	public MenuUpgradeStats stats; // 0x50
	public LoadingBundle weaponLoadingBundle; // 0x58
	public LoadingBundle camoweaponLoadingBundle; // 0x60
	public GameObject loader; // 0x68
	public MenuWeaponLights lights; // 0x70
	public Transform model; // 0x78
	public Menu3DElementInputRotate inputRotate; // 0x80
	public MenuWeaponLoaded menuWeaponLoaded; // 0x88
	public GameObject modelBlock; // 0x90
	public GameObject camoBlock; // 0x98
	public Transform infoBlock; // 0xA0
	public GameObject paintStatPrefab; // 0xA8
	public AnimStatus animStatus; // 0xB0
	public float switchSpeed; // 0xB4
	private float[] velo; // 0xB8
	private Transform lastselectedtransform; // 0xC0
	private MenuNavigatorEvents menuNavigatorEvents; // 0xC8

	// Methods
	public void .ctor(); // 0x100338ECC
	private void Awake(); // 0x100338F40
	private void Start(); // 0x100339000
	private void OnDownloadError(); // 0x1003395B0
	private void OnEnable(); // 0x10033A02C
	public override void LockBottomButtons(); // 0x10033A314
	private void OnDisable(); // 0x10033A824
	private void OnBottomItemSelect(Transform t); // 0x1003395E0
	private void CalculateStats(); // 0x10033E598
	public override void ApplyStats(); // 0x10033E7CC
	private void ClearInfoBlock(); // 0x10033A8F8
	private void SetupInfoBlock(Tuning camo); // 0x10033AC08
	private void Update(); // 0x10033E88C
	private void SetStats(double damage, double speed, double zoom, double stability, double amount, int weapon_type, int headshoot, bool applyPermament, bool applyEasy); // 0x100339278
	private void <Awake>m__EA(MenuElements element); // 0x10033F038
}

// Namespace: 
public sealed class AnimStatus : Enum // TypeDefIndex: 4119
{
	// Fields
	public int value__; // 0x10
	public const AnimStatus idle = 0; // 0x0
	public const AnimStatus hiding = 1; // 0x0
	public const AnimStatus showing = 2; // 0x0

}

// Namespace: 
public class MenuWeaponServiceBtn : MonoBehaviour // TypeDefIndex: 4120
{
	// Fields
	public int handletype; // 0x18
	private BottomScroll m_Scroll; // 0x20

	// Methods
	public void .ctor(); // 0x10033F054
	private void Awake(); // 0x10033F05C
	public void GoToThisButton(); // 0x10033F124
}

// Namespace: 
public class MenuWeaponServiceButton : MenuStateButton // TypeDefIndex: 4121
{
	// Fields
	public GameObject MenuLights; // 0xA8
	private Transform spinLight; // 0xB0
	private MenuWeaponServiceButtons menuCamBtns; // 0xB8

	// Methods
	public void .ctor(); // 0x10033F1D0
	private void Update(); // 0x10033F1D8
	private void Awake(); // 0x10033F2B4
	public override void SetCost(int value); // 0x10033F3D4
	public override void SetRequiredTuning(int tuning_required); // 0x10033FA08
	public override void SetRemains(string requiredbtntext); // 0x10033FB28
	private void OnClick(); // 0x10033FCE4
	private void BuyHandle(); // 0x100340004
	private void InputEnabled(bool inputEnabled); // 0x10033F84C
	private void OnEnable(); // 0x100340438
	private void OnDisable(); // 0x100340608
	private void OnWeaponHandleBuyed(TuningGroups group_type, int item_type, int tuning_type); // 0x100340798
}

// Namespace: 
public class MenuWeaponServiceButtons : MenuStateButtons // TypeDefIndex: 4122
{
	// Methods
	public void .ctor(); // 0x100340AA8
}

// Namespace: 
public class MercContractInfo : MonoBehaviour // TypeDefIndex: 4123
{
	// Fields
	public GameObject block; // 0x18
	public tk2dTextMesh timer; // 0x20
	public tk2dUIItem profileBtn; // 0x28
	public tk2dTextMesh employerName; // 0x30
	public tk2dSprite employerRank; // 0x38
	public tk2dSprite employerAvatar; // 0x40
	public tk2dTextMesh title; // 0x48
	public tk2dTextMesh message; // 0x50
	public tk2dSprite cupIcon; // 0x58
	public tk2dSprite profileIcon; // 0x60
	public tk2dSlicedSprite progressBar; // 0x68
	public tk2dUIItem pointsBtn; // 0x70
	public GameObject pointsGO; // 0x78
	public tk2dTextMesh progressPoints; // 0x80
	public GameObject borderX; // 0x88
	public tk2dSlicedSprite bkgd; // 0x90
	private float borderX_oldPos; // 0x98
	private float oldtime; // 0x9C
	private NumberFormatInfo numberFormatInfo; // 0xA0

	// Methods
	public void .ctor(); // 0x100340B50
	private void Start(); // 0x100340B58
	private void OnDestroy(); // 0x1003413F0
	private void OnMercContractInfo(); // 0x100341518
	private void OnProfileBtn(); // 0x1003416C0
	private void OnDown(); // 0x10034189C
	private void OnRelease(); // 0x1003418BC
	private void OnActiveContract(); // 0x100340E30
	private void SetTimer(); // 0x1003418DC
	private void SetBorder(); // 0x100341E5C
	private void Update(); // 0x100341F30
}

// Namespace: 
public class MercEmployerRewardOfflineChecker : MonoBehaviour // TypeDefIndex: 4124
{
	// Fields
	private static MercEmployerRewardOffline mercEmployerRewardOffline; // 0x0

	// Methods
	public void .ctor(); // 0x1003429B4
	private static void .cctor(); // 0x1003429BC
	public static void Setup(ISFSObject o); // 0x1003429C0
	private void OnMercEmployerRewardOffline(int value); // 0x100342B64
	private void OnEnable(); // 0x100342CE0
	private void OnDisable(); // 0x100342E30
	private void Start(); // 0x100342F80
}

// Namespace: 
public class MercEmployerRewardOffline // TypeDefIndex: 4125
{
	// Fields
	public int value; // 0x10

	// Methods
	public void .ctor(ISFSObject o); // 0x100342A4C
}

// Namespace: 
public class MercFishingMenu : MonoBehaviour // TypeDefIndex: 4126
{
	// Fields
	public tk2dTextMesh[] mercs_league; // 0x18
	public tk2dTextMesh[] free_mercs; // 0x20
	public LocalizationTextMeshWithArgs my_merc_count_args; // 0x28
	public CheckBox league1; // 0x30
	public CheckBox league2; // 0x38
	public CheckBox league3; // 0x40
	public CheckBox league4; // 0x48
	private int new_commission; // 0x50
	private int league_mask; // 0x54
	private int title_diff; // 0x58
	public tk2dTextMesh title_diff_text; // 0x60
	public tk2dTextMesh max_cost; // 0x68
	public tk2dUIScrollbar bar; // 0x70
	public tk2dUIToggleButton cupOptionTrigger; // 0x78
	public MercFishingTimer timer; // 0x80
	public tk2dUIItem hireButton; // 0x88
	private bool lockButton; // 0x90
	private int title_diff_max; // 0x94

	// Methods
	public void .ctor(); // 0x100343AD8
	private void Start(); // 0x100343AE0
	private void LeagueAcceptedAlert(); // 0x10034404C
	private bool isLeagueAccepted(int league); // 0x100344174
	private void OnToggle(tk2dUIToggleButton obj); // 0x100344268
	public bool getEnabled(); // 0x10034426C
	public void setEnabled(bool enabled); // 0x1003442D0
	private void GetCommission(); // 0x100343F88
	private int LeagueCost(int league, int title_diff); // 0x1003443A0
	private string CostToString(int total_cost); // 0x1003444A4
	private void Update(); // 0x100344618
	private void OnHire(); // 0x100344990
	private void OnEnable(); // 0x100344B48
	private void OnDisable(); // 0x100345108
	private void OnMercHireError(int code); // 0x100345338
	private void OnMercHireOk(Contract contract); // 0x100345340
	private void <Start>m__EB(bool val); // 0x100345364
	private void <Start>m__EC(bool val); // 0x1003453D4
	private void <Start>m__ED(bool val); // 0x100345444
	private void <Start>m__EE(bool val); // 0x1003454B4
	private void <Start>m__EF(tk2dUIScrollbar obj); // 0x100345524
	private void <OnEnable>m__F0(int[] _free_mercs); // 0x100345588
}

// Namespace: 
public class MercHireButton : MonoBehaviour // TypeDefIndex: 4127
{
	// Fields
	private tk2dUIItem button; // 0x18
	private MercHireDialog dialog; // 0x20

	// Methods
	public void .ctor(); // 0x10034591C
	private void Start(); // 0x100345924
	private void HandleOnClick(); // 0x1003459CC
}

// Namespace: 
public class MercLeagueTabs : MonoBehaviour // TypeDefIndex: 4128
{
	// Fields
	public MenuTabsControl tabs; // 0x18
	public Sections currentSection; // 0x20
	public static bool canPress; // 0x0
	public static Sections oldSection; // 0x4
	public Section[] sections; // 0x28
	public GameObject previousLeague; // 0x30
	public tk2dTextMesh previousLeagueName; // 0x38
	public tk2dTextMesh previousLeagueScore; // 0x40
	public GameObject nextLeague; // 0x48
	public tk2dTextMesh nextLeagueName; // 0x50
	public tk2dTextMesh nextLeagueScore; // 0x58
	public tk2dTextMesh leagueWeekText; // 0x60
	public GameObject previousLeague2; // 0x68
	public tk2dTextMesh previousLeagueName2; // 0x70
	public tk2dTextMesh previousLeagueScore2; // 0x78
	private float oldtime; // 0x80
	private int league_min_time; // 0x84

	// Methods
	public void .ctor(); // 0x1003480D4
	public void SetTab(Sections section); // 0x1003480DC
	private void OnEnable(); // 0x100348208
	private void Start(); // 0x10034822C
	public void MercLeagueRequirements(); // 0x10030E764
	private void Update(); // 0x100348B58
	private void SetTimer(); // 0x1003483E8
	private void OnTabSelect(int index); // 0x100348CBC
	private void ShowSection(Sections section); // 0x100348CD4
	private void OnMaskCover(int index); // 0x100348CEC
	private void ShowCurrentSection(); // 0x10034815C
	private void HideAllSections(); // 0x100348D60
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4129
{
	// Fields
	public int value__; // 0x10
	public const Sections mercL1 = 0; // 0x0
	public const Sections mercL2 = 1; // 0x0
	public const Sections mercL3 = 2; // 0x0
	public const Sections mercL4 = 3; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4130
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x100348DE8
}

// Namespace: 
public class MessageDialog : DialogBasic // TypeDefIndex: 4131
{
	// Fields
	public tk2dUIItem okbutton; // 0x98
	public tk2dTextMesh header; // 0xA0
	public tk2dTextMesh message; // 0xA8

	// Methods
	public void .ctor(); // 0x100075F30
	public override void Start(); // 0x100075F98
	private void OnOkClick(); // 0x100076034
	public void SetHeader(string text); // 0x100076080
	public void SetMessage(string text); // 0x1000760E4
}

// Namespace: 
public class MessageGirl01Dialog : DialogBasic // TypeDefIndex: 4132
{
	// Fields
	public tk2dUIItem okbutton; // 0x98
	public tk2dTextMesh header; // 0xA0
	public tk2dTextMesh message; // 0xA8
	public bool animation; // 0xB0

	// Methods
	public void .ctor(); // 0x100076148
	public override void Start(); // 0x1000761B8
	private void OnOkClick(); // 0x100076254
	public void SetHeader(string text); // 0x1000762B4
	public void SetMessage(string text); // 0x100076318
	public void SetOkButton(string index); // 0x10007637C
}

// Namespace: 
public class MessageGirl02Dialog : MessageGirl01Dialog // TypeDefIndex: 4133
{
	// Methods
	public void .ctor(); // 0x1000763F0
}

// Namespace: 
public class MessageGirl03Dialog : MessageGirl01Dialog // TypeDefIndex: 4134
{
	// Methods
	public void .ctor(); // 0x1000763F4
}

// Namespace: 
public class MobileScreens // TypeDefIndex: 4135
{
	// Methods
	public void .ctor(); // 0x1000763F8
	public static bool GetConsent(ScreenResolutionEnum resolution); // 0x100076400
}

// Namespace: 
public sealed class ScreenResolutionEnum : Enum // TypeDefIndex: 4136
{
	// Fields
	public int value__; // 0x10
	public const ScreenResolutionEnum a320_240 = 0; // 0x0
	public const ScreenResolutionEnum a400_240 = 1; // 0x0
	public const ScreenResolutionEnum ai480_320 = 2; // 0x0
	public const ScreenResolutionEnum a800_400 = 3; // 0x0
	public const ScreenResolutionEnum a800_480 = 4; // 0x0
	public const ScreenResolutionEnum a854_480 = 5; // 0x0
	public const ScreenResolutionEnum a960_540 = 6; // 0x0
	public const ScreenResolutionEnum a1024_600 = 7; // 0x0
	public const ScreenResolutionEnum i960_640 = 8; // 0x0
	public const ScreenResolutionEnum i1136_640 = 9; // 0x0
	public const ScreenResolutionEnum a1280_720 = 10; // 0x0
	public const ScreenResolutionEnum i1024_768 = 11; // 0x0
	public const ScreenResolutionEnum a1280_768 = 12; // 0x0
	public const ScreenResolutionEnum a1280_800 = 13; // 0x0
	public const ScreenResolutionEnum a1920_1080 = 14; // 0x0
	public const ScreenResolutionEnum a1920_1200 = 15; // 0x0
	public const ScreenResolutionEnum i2048_1536 = 16; // 0x0
	public const ScreenResolutionEnum a2560_1600 = 17; // 0x0
	public const ScreenResolutionEnum a800_444 = 18; // 0x0
	public const ScreenResolutionEnum a897_540 = 19; // 0x0
	public const ScreenResolutionEnum a1024_552 = 20; // 0x0
	public const ScreenResolutionEnum a1024_564 = 21; // 0x0
	public const ScreenResolutionEnum a1024_720 = 22; // 0x0
	public const ScreenResolutionEnum a1196_720 = 23; // 0x0
	public const ScreenResolutionEnum a1280_736 = 24; // 0x0
	public const ScreenResolutionEnum a1280_752 = 25; // 0x0
	public const ScreenResolutionEnum a1196_768 = 26; // 0x0
	public const ScreenResolutionEnum a1794_1080 = 27; // 0x0
	public const ScreenResolutionEnum a1803_1080 = 28; // 0x0
	public const ScreenResolutionEnum a1836_1080 = 29; // 0x0
	public const ScreenResolutionEnum a1887_1080 = 30; // 0x0
	public const ScreenResolutionEnum a1920_1104 = 31; // 0x0
	public const ScreenResolutionEnum a1920_1128 = 32; // 0x0
	public const ScreenResolutionEnum a2560_1504 = 33; // 0x0

}

// Namespace: 
public class MouseWheel : MonoBehaviour // TypeDefIndex: 4137
{
	// Methods
	public void .ctor(); // 0x100077AC8
	public float get_Value(); // 0x100077AD0
}

// Namespace: 
public class MoveControlHelp : MonoBehaviour // TypeDefIndex: 4138
{
	// Fields
	public GameObject tutorialDialog2Prefab; // 0x18
	private TutorialDialog2 tutorialDialog3; // 0x20
	public GameObject fingerArea; // 0x28
	public GameObject fingerIcon; // 0x30
	public GameObject arrowLeft; // 0x38
	public GameObject arrowRight; // 0x40
	public GameObject statisticWindow; // 0x48
	private float oldtime; // 0x50
	private int seconds; // 0x54

	// Methods
	public void .ctor(); // 0x100077B40
	private void Start(); // 0x100077B48
	private void Update(); // 0x1000781F0
	private IEnumerator StartHelpDialog(); // 0x100078270
	private void HideFinger(); // 0x1000782E4
	private void ShowFinger(); // 0x1000783C8
	private TutorialDialog2 CreateTutorialDialog2(string header); // 0x1000784AC
	private void SizeCorrection(); // 0x100077F44
	private void <Start>m__F1(UITouch touch, GestureState state, Gesture gesture); // 0x1000785F0
	private void <Start>m__F2(); // 0x1000787D4
	private void <Start>m__F3(); // 0x1000787D8
}

// Namespace: 
private sealed class <StartHelpDialog>c__Iterator64 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4139
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal MoveControlHelp <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000782DC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000787DC
	private object System.Collections.IEnumerator.get_Current(); // 0x1000787E4
	public bool MoveNext(); // 0x1000787EC
	public void Dispose(); // 0x1000789E8
	public void Reset(); // 0x1000789F4
}

// Namespace: 
public class MoveTimer : MonoBehaviour // TypeDefIndex: 4140
{
	// Methods
	public void .ctor(); // 0x100078E0C
	private void Start(); // 0x100078E14
}

// Namespace: 
public class MusicObj : MonoBehaviour // TypeDefIndex: 4141
{
	// Methods
	public void .ctor(); // 0x100078F40
	private void Start(); // 0x100078F48
	private void Update(); // 0x100078F4C
}

// Namespace: 
public class GameKitPlugin // TypeDefIndex: 4142
{
	// Fields
	private static bool is_started; // 0x0

	// Methods
	public void .ctor(); // 0x100250030
	private static void .cctor(); // 0x100250038
	public static extern void _GKStart(); // 0x10025003C
	public static extern int _GKIsStarted(); // 0x100250040
	public static extern int _GKIsAuthenticated(); // 0x100250044
	public static extern IntPtr _GKGetPlayerID(); // 0x100250048
	public static extern void _GKResetAchievements(); // 0x10025004C
	public static extern void _GKReportAchievements(IntPtr ids); // 0x100250050
	public static extern int _GKGetResult(); // 0x100250058
	public static void Start(); // 0x10025005C
	public static void ResetAchievements(); // 0x100250160
	public static void ReportAchievements(string names); // 0x1002501F8
	public static int GetResult(); // 0x1002502DC
	public static bool IsStarted(); // 0x100250378
	public static bool IsAuthenticated(); // 0x100250418
	public static string GetPlayerID(); // 0x1002505B0
}

// Namespace: 
public class NativePlugin : MonoBehaviour // TypeDefIndex: 4143
{
	// Fields
	public static bool IsShotResizedForTwitter; // 0x0
	public static string AndroidIDFA; // 0x8
	private static string cachedTempDir; // 0x10
	private static string cachedDocDir; // 0x18
	private static string cacheLanguage; // 0x20
	private static string model; // 0x28
	private static string cacheBundleID; // 0x30

	// Methods
	public void .ctor(); // 0x100078F50
	private static void .cctor(); // 0x100078F58
	public static extern IntPtr _iosGetTempDirectory(); // 0x100078FD8
	public static extern void _iosSaveScreenshotToPhotoAlbum(); // 0x100078FDC
	public static extern int _iosTakeScreenshot(IntPtr frame); // 0x100078FE0
	public static extern void _iosResizeScreenshot(); // 0x100078FE8
	public static extern IntPtr _iosGetLanguage(); // 0x100078FEC
	public static extern IntPtr _iosGetLocale(); // 0x100078FF0
	public static extern IntPtr _iosGetVersion(); // 0x100078FF4
	public static extern IntPtr _iosGetModel(); // 0x100078FF8
	public static extern IntPtr _iosGetBundleID(); // 0x100078FFC
	public static extern IntPtr _iosGetAdvertisingID(); // 0x100079000
	public static extern IntPtr _iosGetIDFA(); // 0x100079004
	public static extern IntPtr _iosGetCountry(); // 0x100079008
	public static extern void _iosSendToReviewApp(IntPtr appid); // 0x10007900C
	public static extern void _iosSendToUpdateApp(IntPtr appid); // 0x100079014
	public static extern IntPtr _iosGetLog(); // 0x10007901C
	public static extern int _iosIsMusicPlaying(); // 0x100079020
	public static extern void _iosSetBadgeNumber(int n); // 0x100079024
	public static extern void _iosExcludeFromBackup(IntPtr path); // 0x10007902C
	public static extern IntPtr _iosGetReceipt(); // 0x100079034
	public static bool IsIOS(); // 0x100079038
	public static bool IsAndroid(); // 0x10007905C
	public static bool IsAmazon(); // 0x100079080
	public static bool IsGoogle(); // 0x1000790A0
	public static bool IsWeb(); // 0x1000790C4
	public static int GetPlatformID(); // 0x1000790E8
	public static string GetPlatformName(); // 0x10007919C
	public static void SaveScreenshotToPhotoAlbum(); // 0x1000791E4
	public static byte[] TakeScreenshot(); // 0x100079278
	private static string AndroidGetCacheDir(); // 0x100079D00
	public static string GetTempDirectory(); // 0x100079A00
	private static string AndroidGetDocumentsDir(); // 0x100079D7C
	public static string GetDocumentsDirectory(); // 0x100079DE4
	private static string AndroidGetLanguage(); // 0x10007A068
	private static string AndroidGetCountry(); // 0x10007A0E4
	public static string GetLanguage(); // 0x10007A160
	public static bool IsRussianLanguage(); // 0x10007A408
	private static string AndroidGetVersion(); // 0x10007A4A4
	public static string GetVersion(); // 0x10007A52C
	public static string GetModel(); // 0x10007A66C
	public static bool IsLowMemModel(); // 0x10007A8AC
	private static string AndroidGetPackageName(); // 0x10007AA2C
	public static string GetBundleID(); // 0x10007AAA8
	public static string GetIDFA(); // 0x10007ACD0
	public static string GetDeviceID(); // 0x10007AE14
	public static string GetCountry(); // 0x10007AFA4
	public static string GetNetworkCountry(); // 0x10007B0C4
	public static string GetReceipt(); // 0x10007B360
	public static void SendToReviewApp(string id); // 0x10007B454
	public static void SendToUpdateApp(string id); // 0x10007B534
	public static string GetLog(); // 0x10007B614
	public static bool IsMusicPlaying(); // 0x10007B708
	public static void SetBadgeNumber(int n); // 0x10007B7A4
	public static void ExcludeFromBackup(string path); // 0x10007B840
	private static string AndroidGetMacAddress(); // 0x10007B920
	public static string getMacAddress(); // 0x10007BB08
	public static string GetGoogleEmail(); // 0x10007BD68
	public static string[] GetGoogleEmails(); // 0x10007BE64
	public static int GetFreeSpace(); // 0x10007BEF4
	public static void showAppSettings(); // 0x10007BF64
	public static void showAlert(string title, string text, string button1, string button2, string objectName, string callback); // 0x10007BF68
}

// Namespace: 
public struct SAnyValue // TypeDefIndex: 4144
{
	// Fields
	private int iVal; // 0x10
	private double dVal; // 0x18
	private IntPtr sVal; // 0x20
	private int handle; // 0x28
	private int type; // 0x2C

}

// Namespace: 
private struct AndroidFrame // TypeDefIndex: 4145
{
	// Fields
	public string file; // 0x10
	public int x1; // 0x18
	public int y1; // 0x1C
	public int x2; // 0x20
	public int y2; // 0x24

}

// Namespace: 
public class ConnectionControl : MonoBehaviour // TypeDefIndex: 4146
{
	// Fields
	private static MonoBehaviour Current; // 0x0
	private static Dictionary`2<int, ServerConnectionData> servers; // 0x8
	private static int last_server_id; // 0x10
	public tk2dTextMesh progressText; // 0x18
	public LogoAnimation logoAnimation; // 0x20
	public GameObject warningDialogPrefab; // 0x28
	public tk2dUIProgressBar progressBar; // 0x30
	public LoadingBundle menuSoundLoading; // 0x38
	public LoadingBundle gameMenuSoundLoading; // 0x40
	private WarningDialog warningDialog; // 0x48
	private SocketServer ss; // 0x50
	private bool _pingpongInited; // 0x58
	private bool _isfirstload; // 0x59
	private bool _staminaInited; // 0x5A
	private bool web_policy_ok; // 0x5B
	private static bool bundles_loaded; // 0x14
	private string google_id_token; // 0x60
	private static bool first_connect; // 0x15
	private ISFSObject loginResponse; // 0x68

	// Methods
	public void .ctor(); // 0x1001FE044
	private static void .cctor(); // 0x1001FE0A4
	public static int get_last_server_id(); // 0x1001FE128
	public static Dictionary`2<int, ServerConnectionData> GetServers(); // 0x1001FE190
	public static void SetServer(ServerConnectionData server); // 0x1001FE224
	public static ServerConnectionData GetServer(); // 0x1001FE2C0
	private void AwakeInternal(); // 0x1001FE358
	private void Awake(); // 0x1001FE54C
	public static void SetReloadBundles(); // 0x1001FE550
	private void setCurrentDayRewardsInfo(ISFSObject responseData); // 0x1001FE608
	private void OnBattleResults(ISFSObject battledata); // 0x1001FE8EC
	private void Start(); // 0x100200984
	private void OnGoogleIDToken(string token); // 0x100200E94
	private void DownloadMenuSounds(); // 0x100200E9C
	private void DownloadGameMenuSounds(); // 0x10020104C
	private void OnDownloadedGameMenuSounds(List`1<AudioClip> audioClips); // 0x1002011FC
	private IEnumerator WaitForGKStart(); // 0x100201914
	private IEnumerator WaitForGPGStart(); // 0x100201988
	private IEnumerator WaitForGoogleIDToken(); // 0x1002019FC
	private IEnumerator WaitForAmazonLogin(); // 0x100201A70
	private void OnDownloadedMenuSounds(List`1<AudioClip> audioClips); // 0x100201AE4
	public void LoadingAnimationReady(); // 0x100201B6C
	private void OnPong(long cT, long sT); // 0x1002021AC
	public void SocketConnect(); // 0x100202118
	private IEnumerator GetServerIP(); // 0x100202C98
	public void SocketConnect2(); // 0x100202310
	private void SocketLogin(); // 0x100202ECC
	private void SocketLoginGame(); // 0x100204718
	private void OnConnectionSuccess(); // 0x100204890
	private void OnConnectionError(); // 0x1002049B8
	private void OnGameConnectionSuccess(); // 0x100204CF4
	private void OnGameConnectionError(); // 0x100204D70
	private void OnConnectionErrorNoSocketPolicy(); // 0x100204EF8
	private void OnConnectionErrorNoGMail(); // 0x100205080
	private void AlertStage01(string result); // 0x1002051D8
	private IEnumerator reCheck(); // 0x100205328
	private void AlertStage02(string result); // 0x10020539C
	private void OnConnectionPremissionAlert(); // 0x100205464
	private void RequestPremission(); // 0x100205264
	private void OnConnectionErrorNoFreeSpace(); // 0x1002055BC
	private void OnConnectionErrorNoMacAddress(); // 0x100202D0C
	private void ButtonConnectionError(); // 0x10020577C
	private void OnConnectionLost(); // 0x100205830
	private void OnGameConnectionLost(); // 0x100205A40
	private void ButtonConnectionLost(); // 0x100205C50
	private void Step4(ISFSObject responseData); // 0x100205CEC
	private void OnLoginSuccess(ISFSObject responseData); // 0x1002096E8
	private void OnManifestLoaded(); // 0x100209FB0
	private void OnLocalizationLoaded(); // 0x10020A064
	private void OnFontLoaded(); // 0x10020A168
	private void OnAndroidBillingConnectionSuccess(); // 0x10020A16C
	private void OnAndroidBillingConnectionError(); // 0x10020A3C8
	private void OnAndroidBillingErrorClick(); // 0x10020A3CC
	private void OnLoginError(int code); // 0x10020A44C
	private void ButtonUpdateappWWW(); // 0x10020A7D4
	private void ButtonLoginError(); // 0x10020A880
	private void OnJoinSuccess(); // 0x1002013DC
	private void OnMapIconsLoaded(); // 0x10020A950
	private void PingPongInit(); // 0x10020AB50
	private void StaminaInit(); // 0x10020ABB8
	private IEnumerator StaminaCoroutine(); // 0x10020AC20
	public void ForceStaminaCheck(); // 0x10020AC94
	private IEnumerator PingPongCoroutine(); // 0x10020ACB0
	private void CreateWarningDialog(string header, string message, string buttonText); // 0x100204B40
	private void SetProgressText(string message); // 0x100200DB0
	private void OnApplicationPause(bool pauseStatus); // 0x10020AD24
	private void <RequestPremission>m__F4(); // 0x10020ADC8
	private void <RequestPremission>m__F5(bool always); // 0x10020AE44
}

// Namespace: 
private sealed class <WaitForGKStart>c__Iterator65 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4147
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100201980
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020C45C
	private object System.Collections.IEnumerator.get_Current(); // 0x10020C464
	public bool MoveNext(); // 0x10020C46C
	public void Dispose(); // 0x10020C548
	public void Reset(); // 0x10020C554
}

// Namespace: 
private sealed class <WaitForGPGStart>c__Iterator66 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4148
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1002019F4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020C730
	private object System.Collections.IEnumerator.get_Current(); // 0x10020C738
	public bool MoveNext(); // 0x10020C740
	public void Dispose(); // 0x10020C8C0
	public void Reset(); // 0x10020C8CC
	internal void <>m__F6(bool success); // 0x10020C920
}

// Namespace: 
private sealed class <WaitForGoogleIDToken>c__Iterator67 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4149
{
	// Fields
	internal string <code>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal ConnectionControl <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100201A68
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020C5A8
	private object System.Collections.IEnumerator.get_Current(); // 0x10020C5B0
	public bool MoveNext(); // 0x10020C5B8
	public void Dispose(); // 0x10020C6D0
	public void Reset(); // 0x10020C6DC
}

// Namespace: 
private sealed class <WaitForAmazonLogin>c__Iterator68 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4150
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100201ADC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020C2C0
	private object System.Collections.IEnumerator.get_Current(); // 0x10020C2C8
	public bool MoveNext(); // 0x10020C2D0
	public void Dispose(); // 0x10020C3FC
	public void Reset(); // 0x10020C408
}

// Namespace: 
private sealed class <GetServerIP>c__Iterator69 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4151
{
	// Fields
	internal WWW <www>__0; // 0x10
	internal string[] <server_list>__1; // 0x18
	internal string[] <$s_469>__2; // 0x20
	internal int <$s_470>__3; // 0x28
	internal string <server>__4; // 0x30
	internal string[] <ips>__5; // 0x38
	internal ServerConnectionData <data>__6; // 0x40
	internal ServerConnectionData <default_server>__7; // 0x48
	internal ServerConnectionData <prefer_server>__8; // 0x50
	internal string <country>__9; // 0x58
	internal Enumerator<int, ServerConnectionData> <$s_471>__10; // 0x60
	internal ServerConnectionData <data>__11; // 0x80
	internal string[] <countries>__12; // 0x88
	internal Enumerator<int, ServerConnectionData> <$s_472>__13; // 0x90
	internal ServerConnectionData <data>__14; // 0xB0
	internal int $PC; // 0xB8
	internal object $current; // 0xC0
	internal ConnectionControl <>f__this; // 0xC8

	// Methods
	public void .ctor(); // 0x100202D04
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020B130
	private object System.Collections.IEnumerator.get_Current(); // 0x10020B138
	public bool MoveNext(); // 0x10020B140
	public void Dispose(); // 0x10020BD38
	public void Reset(); // 0x10020BD44
}

// Namespace: 
private sealed class <reCheck>c__Iterator6A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4152
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100205394
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020BF7C
	private object System.Collections.IEnumerator.get_Current(); // 0x10020BF84
	public bool MoveNext(); // 0x10020BF8C
	public void Dispose(); // 0x10020C070
	public void Reset(); // 0x10020C07C
}

// Namespace: 
private sealed class <StaminaCoroutine>c__Iterator6B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4153
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10020AC8C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020C0D0
	private object System.Collections.IEnumerator.get_Current(); // 0x10020C0D8
	public bool MoveNext(); // 0x10020C0E0
	public void Dispose(); // 0x10020C260
	public void Reset(); // 0x10020C26C
}

// Namespace: 
private sealed class <PingPongCoroutine>c__Iterator6C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4154
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ConnectionControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10020AD1C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10020BD98
	private object System.Collections.IEnumerator.get_Current(); // 0x10020BDA0
	public bool MoveNext(); // 0x10020BDA8
	public void Dispose(); // 0x10020BF1C
	public void Reset(); // 0x10020BF28
}

// Namespace: 
public class LoadingBundle : MonoBehaviour // TypeDefIndex: 4155
{
	// Fields
	public OnBundleGoDownloaded OnDownloadedGO; // 0x18
	public OnBundleACDownloaded OnDownloadedAC; // 0x20
	public OnBundleTex2DDownloaded OnDownloadedTex2D; // 0x28
	public OnBundleTextDownloaded OnDownloadedText; // 0x30
	public OnDownloadDgt OnStartDownload; // 0x38
	public OnDownloadDgt OnDownloadError; // 0x40
	public OnDownloadDgt OnDownloadCancel; // 0x48
	public ContentTypes contenttype; // 0x50
	public bool yieldfunction; // 0x54
	public bool dontUseMessages; // 0x55
	public bool autoInstantiate; // 0x56
	public Hash128 version; // 0x58
	public uint crc32; // 0x68
	public string formData; // 0x70
	public tk2dTextMesh textMesh; // 0x78
	public string loadingText; // 0x80
	public tk2dUIProgressBar progressBar; // 0x88
	public List`1<GameObject> gameobjects; // 0x90
	public List`1<AudioClip> audioclips; // 0x98
	public List`1<Texture2D> textures2d; // 0xA0
	protected bool loading; // 0xA8
	protected WWW download; // 0xB0

	// Methods
	public void .ctor(); // 0x100290148
	public float get_Progress(); // 0x100276958
	private void Awake(); // 0x1002901F4
	public bool isLoading(); // 0x1002902AC
	public virtual void Download(); // 0x1002902B4
	public void StopDownload(); // 0x100276A24
	private void OnDestroy(); // 0x100290394
	public void DisposeDownload(); // 0x100290364
	public virtual IEnumerator LoadBundle(); // 0x1002903C4
	public string parseFormData(); // 0x100290438
}

// Namespace: 
public class FormData // TypeDefIndex: 4156
{
	// Fields
	public string label; // 0x10
	public string value; // 0x18

	// Methods
	public void .ctor(); // 0x10027719C
}

// Namespace: 
public sealed class ContentTypes : Enum // TypeDefIndex: 4157
{
	// Fields
	public int value__; // 0x10
	public const ContentTypes GO = 0; // 0x0
	public const ContentTypes AC = 1; // 0x0
	public const ContentTypes Tex2D = 2; // 0x0

}

// Namespace: 
public sealed class OnBundleGoDownloaded : MulticastDelegate // TypeDefIndex: 4158
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10027B99C
	public virtual void Invoke(List`1<GameObject> objs); // 0x100291548
	public virtual IAsyncResult BeginInvoke(List`1<GameObject> objs, AsyncCallback callback, object object); // 0x100291908
	public virtual void EndInvoke(IAsyncResult result); // 0x100291958
}

// Namespace: 
public sealed class OnBundleACDownloaded : MulticastDelegate // TypeDefIndex: 4159
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10029189C
	public virtual void Invoke(List`1<AudioClip> objs); // 0x1002915E4
	public virtual IAsyncResult BeginInvoke(List`1<AudioClip> objs, AsyncCallback callback, object object); // 0x1002918AC
	public virtual void EndInvoke(IAsyncResult result); // 0x1002918FC
}

// Namespace: 
public sealed class OnBundleTex2DDownloaded : MulticastDelegate // TypeDefIndex: 4160
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002771A4
	public virtual void Invoke(List`1<Texture2D> objs); // 0x100291680
	public virtual IAsyncResult BeginInvoke(List`1<Texture2D> objs, AsyncCallback callback, object object); // 0x100291964
	public virtual void EndInvoke(IAsyncResult result); // 0x1002919B4
}

// Namespace: 
public sealed class OnBundleTextDownloaded : MulticastDelegate // TypeDefIndex: 4161
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1002919C0
	public virtual void Invoke(TextAsset t); // 0x1002919D0
	public virtual IAsyncResult BeginInvoke(TextAsset t, AsyncCallback callback, object object); // 0x100291A6C
	public virtual void EndInvoke(IAsyncResult result); // 0x100291ABC
}

// Namespace: 
public sealed class OnDownloadDgt : MulticastDelegate // TypeDefIndex: 4162
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100291AC8
	public virtual void Invoke(); // 0x100291AD8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100291B74
	public virtual void EndInvoke(IAsyncResult result); // 0x100291BD4
}

// Namespace: 
private sealed class <LoadBundle>c__Iterator6D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4163
{
	// Fields
	internal WWW <$s_474>__0; // 0x10
	internal AssetBundle <assetBundle>__1; // 0x18
	internal string <url>__2; // 0x20
	internal Object[] <objs>__3; // 0x28
	internal int <i>__4; // 0x30
	internal GameObject <o>__5; // 0x38
	internal int <i>__6; // 0x40
	internal AudioClip <o>__7; // 0x48
	internal int <i>__8; // 0x50
	internal Texture2D <o>__9; // 0x58
	internal int $PC; // 0x60
	internal object $current; // 0x68
	internal LoadingBundle <>f__this; // 0x70

	// Methods
	public void .ctor(); // 0x100290430
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1002904E8
	private object System.Collections.IEnumerator.get_Current(); // 0x1002904F0
	public bool MoveNext(); // 0x1002904F8
	public void Dispose(); // 0x10029171C
	public void Reset(); // 0x100291848
}

// Namespace: 
public class LoadingLevelBundle : MonoBehaviour // TypeDefIndex: 4164
{
	// Fields
	public DownloadComplete onDownloadComplete; // 0x18
	public Action OnDownloadError; // 0x20
	public int version; // 0x28
	public tk2dUIProgressBar progressBar; // 0x30
	public string formData; // 0x38
	public static AssetBundle levelAssetBundle; // 0x0
	protected WWW download; // 0x40

	// Methods
	public void .ctor(); // 0x100291BE0
	public void DownloadLevel(); // 0x100291BE8
	public IEnumerator LoadLevelBundle(); // 0x100291C3C
	public string parseFormData(); // 0x100291CB0
}

// Namespace: 
public class LevelFormData // TypeDefIndex: 4165
{
	// Fields
	public string label; // 0x10
	public string value; // 0x18

	// Methods
	public void .ctor(); // 0x1002925B0
}

// Namespace: 
public sealed class DownloadComplete : MulticastDelegate // TypeDefIndex: 4166
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100292528
	public virtual void Invoke(); // 0x100292318
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100292544
	public virtual void EndInvoke(IAsyncResult result); // 0x1002925A4
}

// Namespace: 
private sealed class <LoadLevelBundle>c__Iterator6E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4167
{
	// Fields
	internal WWW <$s_475>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal LoadingLevelBundle <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x100291CA8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100291D60
	private object System.Collections.IEnumerator.get_Current(); // 0x100291D68
	public bool MoveNext(); // 0x100291D70
	public void Dispose(); // 0x1002923A8
	public void Reset(); // 0x1002924D4
}

// Namespace: 
public class LocalizationBundle : LoadingBundle // TypeDefIndex: 4168
{
	// Methods
	public void .ctor(); // 0x100293F20
	public override IEnumerator LoadBundle(); // 0x100293F28
}

// Namespace: 
private sealed class <LoadBundle>c__Iterator6F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4169
{
	// Fields
	internal WWW <$s_476>__0; // 0x10
	internal AssetBundle <assetBundle>__1; // 0x18
	internal string <url>__2; // 0x20
	internal TextAsset <textXML>__3; // 0x28
	internal int $PC; // 0x30
	internal object $current; // 0x38
	internal LocalizationBundle <>f__this; // 0x40

	// Methods
	public void .ctor(); // 0x100293F94
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100293F9C
	private object System.Collections.IEnumerator.get_Current(); // 0x100293FA4
	public bool MoveNext(); // 0x100293FAC
	public void Dispose(); // 0x1002948D0
	public void Reset(); // 0x1002949FC
}

// Namespace: 
public class SAAndroidBilling : MonoBehaviour // TypeDefIndex: 4170
{
	// Fields
	public OnBillingResultDgt OnConnectionSuccess; // 0x18
	public OnBillingResultDgt OnConnectionError; // 0x20
	public OnBillingResultDgt OnInventorySuccess; // 0x28
	private bool _isInited; // 0x30
	private bool ListnersAdded; // 0x31
	public Inventory MyInventory; // 0x38
	private WebFormRequest wwwRequest; // 0x40
	private Purchase lastPurchase; // 0x48
	public bool IsRequestingInventory; // 0x50
	public string _purchasePending; // 0x58
	private static SAAndroidBilling _instance; // 0x0
	public string amazon_user_id; // 0x60
	private int current_gift_user_id; // 0x68

	// Methods
	public void .ctor(); // 0x1000D38E0
	public bool get_isInited(); // 0x1000D3958
	public static SAAndroidBilling get_Instance(); // 0x1000D3960
	public string get_PurchasePending(); // 0x1000D39B0
	public bool get_IsPurchasePending(); // 0x1000D39B8
	private void Awake(); // 0x1000D39E4
	public void Init(optional bool force); // 0x1000D3A9C
	private IEnumerator BSE(); // 0x1000D4DD8
	public void AmazonInit(); // 0x1000D4E4C
	private void billingSupportedEvent(); // 0x1000D52A0
	private void billingNotSupportedEvent(string error); // 0x1000D53F4
	private void queryInventorySucceededEvent(Inventory inventory); // 0x1000D54CC
	public void ContinuePausedPurchase(string sku); // 0x1000D5750
	private void queryInventoryFailedEvent(string error); // 0x1000D590C
	private void purchaseSucceededEvent(Purchase purchase); // 0x1000D579C
	private void SendWebRequest(Purchase purchase); // 0x1000D59D0
	private void CloseSpinerDialog(); // 0x1000D6324
	private void purchaseFailedEvent(int errorCode, string errorMessage); // 0x1000D634C
	private void ConsumePurchaseSucceededEvent(Purchase purchase); // 0x1000D677C
	private void consumePurchaseFailedEvent(string error); // 0x1000D6988
	private void OnAndroidVerifyResponse(JSONNode node); // 0x1000D6A34
	private void OnAndroidSocketPurchaseSuccess(); // 0x1000D7548
	public void RequestInventory(); // 0x1000D6430
	public void Purchase(string sku, optional int gift_user_id); // 0x1000D7858
	private void UpdateStoreData(); // 0x1000D7A8C
	private void OnApplicatiobPause(bool pause); // 0x1000D7A90
	private void AmazonConsume(Purchase p); // 0x1000D73DC
	private void AmazonPurchase(string sku); // 0x1000D7950
	private void AmazonGetPurchaseUpdates(); // 0x1000D7720
	private void OnAmazonGetUserData(GetUserDataResponse args); // 0x1000D7A94
	private void OnAmazonPurchase(PurchaseResponse args); // 0x1000D7C70
	private void OnAmazonProductData(GetProductDataResponse args); // 0x1000D7F28
	private void OnAmazonPurchaseData(GetPurchaseUpdatesResponse args); // 0x1000D8440
}

// Namespace: 
public sealed class OnBillingResultDgt : MulticastDelegate // TypeDefIndex: 4171
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000D8C68
	public virtual void Invoke(); // 0x1000D5364
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1000D8C84
	public virtual void EndInvoke(IAsyncResult result); // 0x1000D8CE4
}

// Namespace: 
private sealed class <BSE>c__Iterator70 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4172
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal SAAndroidBilling <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000D4E44
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000D8B34
	private object System.Collections.IEnumerator.get_Current(); // 0x1000D8B3C
	public bool MoveNext(); // 0x1000D8B44
	public void Dispose(); // 0x1000D8C08
	public void Reset(); // 0x1000D8C14
}

// Namespace: 
public class SAAndroidMenuBillingGetSkuDetails : MonoBehaviour // TypeDefIndex: 4173
{
	// Fields
	public string sku; // 0x18
	public bool skuIsName; // 0x20
	public bool isConsume; // 0x21
	public tk2dTextMesh buttontextmesh; // 0x28

	// Methods
	public void .ctor(); // 0x1000D8CF0
	public string GetSku(); // 0x1000D8D00
	public void Start(); // 0x1000D8D4C
	public void OnDestroy(); // 0x1000D8E98
	private void OnEnable(); // 0x1000D9048
	private void OnUpdateSKU(); // 0x1000D90D8
}

// Namespace: 
public class SAFacebook : MonoBehaviour // TypeDefIndex: 4174
{
	// Fields
	public OnEventDgt OnLogout; // 0x18
	public OnEventDgt OnPostEvent; // 0x20
	private static SAFacebook Instance_; // 0x0
	public bool facebookreward; // 0x28
	public bool social_like; // 0x29
	private bool _isAuthInProgress; // 0x2A
	private static SAFacebook Current; // 0x8

	// Methods
	public void .ctor(); // 0x1000DB5F4
	public static SAFacebook get_Instance(); // 0x1000DB5FC
	public bool get_IsAuth(); // 0x1000DB64C
	public bool get_IsAuthInProgress(); // 0x1000DB718
	private void AwakeInternal(); // 0x1000DB720
	private void Awake(); // 0x1000DB8B4
	public void Init(); // 0x1000DBA0C
	public void OnInitComplete(); // 0x1000DBB20
	private void OnApplicatiobPause(bool pause); // 0x1000DBD98
	public void LogIn(); // 0x1000DBE10
	private void LoginCallback(ILoginResult result); // 0x1000DC078
	private void OnLoggedIn(); // 0x1000DBC14
	private void OnUserDataLoaded(IGraphResult result); // 0x1000DC218
	private void OnPostFailed(); // 0x1000DC84C
	private void OnPost(IShareResult result); // 0x1000DC8F8
	private void OnFacebookReward(); // 0x1000DCCB8
	private void OnInit(); // 0x1000DCCC4
	public void LogOut(); // 0x1000DCDF0
	public void PostStaminaMessage(); // 0x1000DCEAC
	public void PostLevelUpMessage(); // 0x1000DD138
	public void PostQuestCompleteMessage(string description); // 0x1000DD3BC
	public void PostRankUpMessage(); // 0x1000DD5AC
	public void PostBattleScreenshot(); // 0x1000DD86C
	private IEnumerator UploadScreenshot(string filename, string uploadURL); // 0x1000DDC6C
	public void CheckUserLikes(); // 0x1000DDCF0
	private void APICallback(IGraphResult result); // 0x1000DDDB0
}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 4175
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000DE824
	public virtual void Invoke(); // 0x1000DCC28
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x1000DE840
	public virtual void EndInvoke(IAsyncResult result); // 0x1000DE8A0
}

// Namespace: 
private sealed class <UploadScreenshot>c__Iterator71 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4176
{
	// Fields
	internal byte[] <snap>__0; // 0x10
	internal WWWForm <postForm>__1; // 0x18
	internal string filename; // 0x20
	internal string uploadURL; // 0x28
	internal WWW <upload>__2; // 0x30
	internal int $PC; // 0x38
	internal object $current; // 0x40
	internal string <$>filename; // 0x48
	internal string <$>uploadURL; // 0x50

	// Methods
	public void .ctor(); // 0x1000DDCE8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000DE314
	private object System.Collections.IEnumerator.get_Current(); // 0x1000DE31C
	public bool MoveNext(); // 0x1000DE324
	public void Dispose(); // 0x1000DE7C4
	public void Reset(); // 0x1000DE7D0
}

// Namespace: 
public class ServerConnectionData // TypeDefIndex: 4177
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string web_addr; // 0x20
	public string file_addr; // 0x28
	public string socket_addr; // 0x30
	public string game_addr; // 0x38
	public string countries; // 0x40

	// Methods
	public void .ctor(); // 0x1000E6664
}

// Namespace: 
public class SocketServer : MonoBehaviour // TypeDefIndex: 4178
{
	// Fields
	public OnISFSObjectDgt OnGameChat; // 0x18
	public OnTuningBuyedDgt OnTuningBuyed; // 0x20
	public OnRankpointsDgt OnFirstBlood; // 0x28
	public OnRankpointsDgt OnHeadshoot; // 0x30
	public OnRankpointsDgt OnOneHitKill; // 0x38
	public OnRankpointsDgt OnFastKill; // 0x40
	public OnRankpointsDgt OnAssistKill; // 0x48
	public OnRankpointsDgt OnRevengeKill; // 0x50
	public OnComboKillDgt OnComboKill; // 0x58
	public OnISFSObjectDgt OnBattleResults; // 0x60
	public OnISFSObjectDgt OnBonusHited; // 0x68
	public OnISFSObjectDgt OnBonusSpawned; // 0x70
	public OnISFSArrayDgt OnMapPlayers; // 0x78
	public OnStringDgt OnVotedReplay; // 0x80
	public OnIntDgt OnVoteTimerTick; // 0x88
	public OnSocketServerDgt OnFacebookReward; // 0x90
	public OnSocketServerDgt OnGameplayEnd; // 0x98
	public OnSocketServerDgt OnRestartGame; // 0xA0
	public OnSocketServerDgt OnReloadError; // 0xA8
	public OnSocketServerDgt OnConnectionSuccess; // 0xB0
	public OnSocketServerDgt OnConnectionError; // 0xB8
	public OnSocketServerDgt OnConnectionLost; // 0xC0
	public OnSocketServerDgt OnGameConnectionSuccess; // 0xC8
	public OnSocketServerDgt OnGameConnectionError; // 0xD0
	public OnSocketServerDgt OnGameConnectionLost; // 0xD8
	public OnSocketServerDgt OnAndroidPurchaseSuccess; // 0xE0
	public OnISFSObjectDgt OnLoginSuccess; // 0xE8
	public OnIntDgt OnLoginError; // 0xF0
	public OnSocketServerDgt OnJoinSuccess; // 0xF8
	public OnSocketServerDgt OnJoinError; // 0x100
	public OnPongDgt OnPong; // 0x108
	public OnPongDgt OnGamePong; // 0x110
	public Action`2<int, List`1<GameDrone>> OnGameTimerTick; // 0x118
	public OnIntDgt OnSpawnPointSeted; // 0x120
	public OnPlayerAndSpawnDgt OnRespawn; // 0x128
	public OnPlayerAndSpawnDgt OnGameLoaded; // 0x130
	public OnStringDgt OnEnemyExitRoom; // 0x138
	public OnEnemyLookAtTargetDgt OnEnemyLookAtTarget; // 0x140
	public OnISFSObjectDgt OnEnemyFire; // 0x148
	public OnTakeDamageDgt OnTakeDamage; // 0x150
	public OnSocketServerDgt OnGameEnd; // 0x158
	public OnISFSArrayDgt OnUpdateStatistic; // 0x160
	public OnBoolDgt OnGameFinded; // 0x168
	public OnIntDgt OnDollarsUpdate; // 0x170
	public OnIntDgt OnCrystalsUpdate; // 0x178
	public OnIntDgt OnWeaponBuyed; // 0x180
	public On5IntDgt OnWeaponDelivered; // 0x188
	public OnIntDgt OnWeaponInstalled; // 0x190
	public OnIntDgt OnWeaponAfterInstalled; // 0x198
	public OnSocketServerDgt OnSmartRifleUpgradeOk; // 0x1A0
	public OnSocketServerDgt OnSmartRifleUpgradeError; // 0x1A8
	public OnSocketServerDgt OnSmartHelmetUpgradeOk; // 0x1B0
	public OnSocketServerDgt OnSmartHelmetUpgradeError; // 0x1B8
	public OnIntDgt OnHelmetBuyed; // 0x1C0
	public On5IntDgt OnHelmetDelivered; // 0x1C8
	public OnIntDgt OnHelmetInstalled; // 0x1D0
	public OnIntIntIntDgt OnWeaponPartBuyed; // 0x1D8
	public OnIntIntIntDgt OnPostWeaponPartBuyed; // 0x1E0
	public OnIntIntIntDgt OnWeaponPartDelivered; // 0x1E8
	public OnIntIntIntDgt OnPostWeaponPartDelivered; // 0x1F0
	public OnIntIntIntDgt OnWeaponPartInstalled; // 0x1F8
	public OnIntIntIntDgt OnHelmetPartBuyed; // 0x200
	public OnIntIntIntDgt OnPostHelmetPartBuyed; // 0x208
	public OnIntIntIntDgt OnHelmetPartDelivered; // 0x210
	public OnIntIntIntDgt OnPostHelmetPartDelivered; // 0x218
	public OnIntIntIntDgt OnHelmetPartInstalled; // 0x220
	public OnFloatIntIntDgt OnStaminaUpdate; // 0x228
	public OnSocketServerDgt OnStaminaDonate; // 0x230
	public OnStringDgt OnPlayerExitRoom; // 0x238
	public OnSocketServerDgt OnSuccessLeavedGame; // 0x240
	public OnRewardDgt OnLevelUp; // 0x248
	public OnRewardDgt OnRankpointsUp; // 0x250
	public OnLevelUpDgt OnRatingReward; // 0x258
	public OnLevelUpDgt OnSquadReward; // 0x260
	public OnLevelUpDgt OnPlatoonReward; // 0x268
	public OnLevelUpDgt OnTournamentReward; // 0x270
	public OnLevelUpDgt OnAllianceReward; // 0x278
	public OnLevelUpDgt OnTerritoriesReward; // 0x280
	public OnBoosterRewardDgt OnSpecialReward; // 0x288
	public OnLevelUpDgt OnWarBidReturned; // 0x290
	public OnSocketServerDgt OnCommanderPromotion; // 0x298
	public OnSocketServerDgt OnVIPPromotion; // 0x2A0
	public OnIntIntDgt OnDailyReward; // 0x2A8
	public OnIntIntDgt OnServerRestart; // 0x2B0
	public OnISFSObjectDgt OnAddStatisticPlayer; // 0x2B8
	public OnISFSObjectDgt OnRemoveStatisticPlayer; // 0x2C0
	public OnISFSObjectDgt OnKill; // 0x2C8
	public OnISFSObjectDgt OnBattlePlayerTuning; // 0x2D0
	public OnBoolDgt OnJoinedToGame; // 0x2D8
	public OnISFSArrayDgt OnGetPrevWeekRatings; // 0x2E0
	public OnISFSArrayDgt OnGetWeekRatings; // 0x2E8
	public OnISFSArrayDgt OnGetAllTimeRatings; // 0x2F0
	public OnISFSArrayDgt OnGetFriendsWeekRatings; // 0x2F8
	public OnISFSArrayDgt OnGetFriendsAllTimeRatings; // 0x300
	public OnISFSArrayDgt OnGetLeagueRatings; // 0x308
	public OnISFSArrayDgt OnGetRegionRatings; // 0x310
	public OnISFSArrayDgt OnGetChatRegionRatings; // 0x318
	public OnISFSArrayDgt OnGetChampionRatings; // 0x320
	public OnIntDgt OnAchievementReward; // 0x328
	public OnShopItemDgt OnShopBuyOk; // 0x330
	public OnSocketServerDgt OnPlayerProfileReceived; // 0x338
	public OnIntIntStringDgt OnQuestProgress; // 0x340
	public OnSquadDgt OnSquadDataOk; // 0x348
	public OnSocketServerDgt OnJoinSquadOk; // 0x350
	public OnSocketServerDgt OnTerritoryOwnedOk; // 0x358
	public OnSocketServerDgt OnSquadError; // 0x360
	public OnSocketServerDgt OnSquadLeaveOk; // 0x368
	public OnSocketServerDgt OnSquadDismissMemberOk; // 0x370
	public OnSocketServerDgt OnSquadInviteOk; // 0x378
	public OnSocketServerDgt OnSquadRequestJoinOk; // 0x380
	public OnSocketServerDgt OnSquadExpandOk; // 0x388
	public OnIntIntDgt OnSquadChangeMemberStatusOk; // 0x390
	public OnSquadSearchDgt OnSquadSearchOk; // 0x398
	public OnSocketServerDgt OnSquadRequestsOk; // 0x3A0
	public OnSocketServerDgt OnSquadInvitesOk; // 0x3A8
	public OnSocketServerDgt OnSquadKicked; // 0x3B0
	public OnSocketServerDgt OnSquadCreateOk; // 0x3B8
	public OnSocketServerDgt OnSquadDuplicateName; // 0x3C0
	public OnSocketServerDgt OnSquadDiplomacyOk; // 0x3C8
	public OnSocketServerDgt OnSquadAllianceOk; // 0x3D0
	public OnSocketServerDgt OnSquadAllianceError; // 0x3D8
	public OnSocketServerDgt OnTutorialStageOk; // 0x3E0
	public OnIntDgt OnChangeLeague; // 0x3E8
	public OnIntDgt OnSquadChangeLeague; // 0x3F0
	public OnSocketServerDgt OnProgressAchievement; // 0x3F8
	public OnSquadSearchDgt OnSquadRatingsAllTime; // 0x400
	public OnSquadSearchDgt OnSquadRatingsWeek; // 0x408
	public OnSquadSearchDgt OnSquadRatingsPrevWeek; // 0x410
	public OnSquadSearchDgt OnSquadRatingsChampion; // 0x418
	public OnSquadSearchDgt OnSquadRatingsTournament; // 0x420
	public OnSquadSearchDgt OnSquadRatingsAlliance; // 0x428
	public OnAchievementsDgt OnPlayerProfileAchievements; // 0x430
	public OnCupRatingDgt OnGetCupRatings; // 0x438
	public OnIntStringDgt OnBoosterOn; // 0x440
	public OnIntStringDgt OnBoosterOff; // 0x448
	public OnIntDgt OnBoosterRejected; // 0x450
	public OnSocketServerDgt OnChangeProfileDataOk; // 0x458
	public OnSocketServerDgt OnFriendAddOk; // 0x460
	public OnSocketServerDgt OnFriendRemoveOk; // 0x468
	public OnBoolDgt OnFriendSearchOk; // 0x470
	public OnIntIntStringDgt OnGiftRewardDollars; // 0x478
	public OnIntIntStringDgt OnGiftRewardCrystals; // 0x480
	public OnISFSObjectDgt OnNewItemOpened; // 0x488
	public OnSocketServerDgt OnChatLeaveOk; // 0x490
	public OnSocketServerDgt OnChatEnterError; // 0x498
	public OnSocketServerDgt OnChatEnterOk; // 0x4A0
	public OnSocketServerDgt OnChatNewMessage; // 0x4A8
	public OnSocketServerDgt OnBidsUpdate; // 0x4B0
	public OnSocketServerDgt OnBidOk; // 0x4B8
	public OnSocketServerDgt OnBidError; // 0x4C0
	public OnSocketServerDgt OnBidOutbid; // 0x4C8
	public OnSocketServerDgt OnNodesUpdate; // 0x4D0
	public OnStringDgt OnWarAttackOk; // 0x4D8
	public OnSocketServerDgt OnWarAttackError; // 0x4E0
	public OnSocketServerDgt OnTournamentInfoOk; // 0x4E8
	public OnSocketServerDgt OnChatBanChanged; // 0x4F0
	public OnISFSArrayDgt OnGetMercRatings; // 0x4F8
	public OnISFSArrayDgt OnGetMercTop5Ratings; // 0x500
	public Action`1<ReadOnlyCollection`1<Contract>> OnGetMyMercs; // 0x508
	public Action`1<ReadOnlyCollection`1<Contract>> OnGetMercsContracts; // 0x510
	public OnSocketServerDgt OnMercStatusOk; // 0x518
	public OnIntDgt OnMercHireError; // 0x520
	public Action`1<Contract> OnMercHireOk; // 0x528
	public OnSocketServerDgt OnMercContractInfo; // 0x530
	public OnLevelUpDgt OnMercReward; // 0x538
	public OnSocketServerDgt OnMercEmployerReward; // 0x540
	public OnLevelUpDgt OnMercEmployerRefund; // 0x548
	public Action`1<int[]> OnMercFishingUpdate; // 0x550
	public Action`1<IList`1<WarTerritoryRegInfo>> OnAllianceRegistration; // 0x558
	public Action`1<IList`1<WarTerritoryRegInfo>> OnAllianceRegisterOk; // 0x560
	public Action`1<IList`1<WarTerritoryRegInfo>> OnAllianceRegisterFailed; // 0x568
	public Action`1<AllianceQualification> OnAllianceQualification; // 0x570
	public Action`1<string> OnAllianceEnterQualificationOk; // 0x578
	public Action OnAllianceEnterQualificationFailed; // 0x580
	public Action`1<int> OnMercEmployerRewardOffline; // 0x588
	public Action`1<int[]> OnAvatarsUpdate; // 0x590
	public Action`1<int[]> OnFlagsUpdate; // 0x598
	public OnSkuItemReceivedDgt OnSkuItemReceived; // 0x5A0
	public Action`1<Platoon> OnPlatoon; // 0x5A8
	public Action`1<Platoon> OnPlatoonCreate; // 0x5B0
	public Action`1<IList`1<PlatoonsInvites>> OnPlatoonsInvites; // 0x5B8
	public Action OnPlatoonInviteOk; // 0x5C0
	public Action OnPlatoonLeaveOk; // 0x5C8
	public Action OnPlatoonRequestJoinOk; // 0x5D0
	public Action`1<Platoon> OnJoinPlatoon; // 0x5D8
	public Action OnPlatoonRegisterOk; // 0x5E0
	public Action OnPlatoonRegistration; // 0x5E8
	public Action`1<PlatoonBattle> OnPlatoonBattle; // 0x5F0
	public Action`1<string> OnPlatoonEnterBattleOk; // 0x5F8
	public OnISFSObjectDgt OnPlatoonRatings; // 0x600
	public OnISFSObjectDgt OnPlatoonSearchOk; // 0x608
	public Action`1<int> OnPlatoonRequestsOk; // 0x610
	public Action OnPlatoonKicked; // 0x618
	public Action`2<string, int> OnError; // 0x620
	private static bool _listenEvents; // 0x0
	private static bool _isConnected; // 0x1
	private static bool _isConnectedGame; // 0x2
	private static bool _isLogged; // 0x3
	private static bool _isLoggedGame; // 0x4
	private static bool _isInited; // 0x5
	private static bool _isInitedGame; // 0x6
	private float oldTime; // 0x628
	private float tick; // 0x62C
	private long gamePingTime; // 0x630
	public float processEventsPerSecond; // 0x638
	public static SmartFoxWrapper smartFox; // 0x8
	public static SmartFox gameFox; // 0x10
	public static bool IsResetProgress; // 0x18
	public static int restart_t; // 0x1C
	public static int restart_type; // 0x20
	private static SocketServer Current; // 0x28
	public static int platoon_invite_user_id; // 0x30
	public static int platoon_invite_platoon_id; // 0x34

	// Methods
	public void .ctor(); // 0x100106778
	private static void .cctor(); // 0x100106788
	public static bool get_processingEvents(); // 0x1001067DC
	public static bool get_Connected(); // 0x100106844
	public static bool get_Logged(); // 0x1001068AC
	public static bool get_ConnectedGame(); // 0x100106914
	public static bool get_LoggedGame(); // 0x10010697C
	public void ResetConnectionDelegates(); // 0x1001069E4
	public void ResetLoginDelegates(); // 0x1001069F0
	public void ResetJoinDelegates(); // 0x1001069F8
	public void ResetDeligates(); // 0x100106A00
	public void ResetGameDelegates(); // 0x100106A14
	public void Init(); // 0x100106A20
	public void InitGame(); // 0x100107084
	public static SocketServer get_Instance(); // 0x100107468
	private void AwakeInternal(); // 0x1001074D0
	private void Awake(); // 0x1001076C4
	public void FixedUpdate(); // 0x100107704
	public void SetProcessingEvents(bool flag); // 0x10010784C
	public void StaminaChecker(); // 0x1001078B8
	public void PingPong(); // 0x100107A40
	public void GamePingPong(); // 0x100107C38
	public void OnConnection(BaseEvent evt); // 0x100107F54
	public void OnConnLost(BaseEvent evt); // 0x1001083C8
	private void OnLogout(BaseEvent evt); // 0x100108610
	public void OnGameConnection(BaseEvent evt); // 0x1001088E8
	public void OnGameConnLost(BaseEvent evt); // 0x100108C40
	private void OnJoinRoom(BaseEvent evt); // 0x100108E88
	private void OnJoinRoomError(BaseEvent evt); // 0x100109164
	private void OnPublicMessage(BaseEvent evt); // 0x100109340
	public void OnLogin(BaseEvent evt); // 0x100109700
	public void OnGameLogin(BaseEvent evt); // 0x10010985C
	public void OnLinError(BaseEvent evt); // 0x1001098FC
	public void OnGameLoginError(BaseEvent evt); // 0x100109C90
	public void OnUserEnterRoom(BaseEvent evt); // 0x100109FB0
	public void OnUserExitRoom(BaseEvent evt); // 0x10010A404
	public void Connect(string host, int port); // 0x10010A990
	public void Login(string username, ISFSObject customdata); // 0x10010AAE0
	public void Login(string username, string zone, ISFSObject customdata); // 0x10010ABD4
	public void LoginGame(string username, ISFSObject customdata); // 0x10010ACC4
	public void Join(string room); // 0x10010ADB8
	public void FindGameRoom(int mapId, int battle_mode); // 0x10010AE60
	public void CreateGameRoom(int mapId, int battle_mode); // 0x10010B1D0
	public void SetGameLoaded(); // 0x10010B540
	public void LookAtEnemy(string enemyName); // 0x10010B818
	public void Fire(int enemyType, string enemyName, string enemyPart); // 0x10010BB34
	public void BuyWeaponCamo(int weaponType, int camoType); // 0x10010C0FC
	public void BuyTuning(TuningGroups tuningGroup, int itemType, int tuningType); // 0x10010C114
	public void BuyHelmetPart(int helmettype, HelmetPartType helmetpart, int stage); // 0x10010C478
	public void ForceHelmetPartDelivery(int helmettype, HelmetPartType helmetpart, int stage); // 0x10010C7DC
	public void CheckHelmetPartDelivery(int helmettype, HelmetPartType helmetpart, int stage); // 0x10010CB40
	public void InstallHelmetPart(int helmettype, HelmetPartType helmetpart, int stage); // 0x10010CEA4
	public void BuyWeaponPart(int weapontype, WeaponPartType weaponpart, int stage); // 0x10010D208
	public void ForceWeaponPartDelivery(int weapontype, WeaponPartType weaponpart, int stage); // 0x10010D56C
	public void CheckWeaponPartDelivery(int weapontype, WeaponPartType weaponpart, int stage); // 0x10010D8D0
	public void InstallWeaponPart(int weapontype, WeaponPartType weaponpart, int stage); // 0x10010DC34
	public void SmartRifleUpgrade(int type); // 0x10010DF98
	public void BuyWeapon(int type); // 0x10010E1CC
	public void ForceWeaponDelivery(int type); // 0x10010E400
	public void CheckWeaponDelivery(int type); // 0x10010E634
	public void InstallWeapon(int type); // 0x10010E868
	public void SmartHelmetUpgrade(int type); // 0x10010EA9C
	public void BuyHelmet(int type); // 0x10010ECD0
	public void ForceHelmetDelivery(int type); // 0x10010EF04
	public void CheckHelmetDelivery(int type); // 0x10010F138
	public void InstallHelmet(int type); // 0x10010F36C
	public void SetupNicknameAndFlag(string nickname, int flag, bool startGame); // 0x10010F5A0
	public void ChangeProfileData(string nickname, int flag, int avatar); // 0x10010F948
	public void StaminaDonate(); // 0x10010FC6C
	public void StaminaDonateAndReplay(); // 0x10010FDD8
	public void CheckHit(string enemyName, double bulletmovingtime); // 0x10010FFBC
	public void CheckHitDrone(int user_id, int drone_id, double bulletmovingtime); // 0x10011040C
	public void CheckReload(); // 0x100110A28
	public void CheckRespawn(); // 0x100110C28
	public void ForceRespawn(); // 0x100110E28
	public void CheckPlayerForStayInGame(string playername); // 0x100111028
	public void UpdateGameStatistic(); // 0x100111284
	public void ForceLeaveGame(); // 0x100111424
	public void VoteForReplay(); // 0x100111624
	public void KillMe(); // 0x100111824
	public void CheckLevelUp(int level); // 0x1001119D8
	public void CheckRankpointsUp(int index); // 0x1001119DC
	public void CheckMoney(); // 0x1001119E0
	public void SaveLanguage(int lang); // 0x100111B4C
	public void ChatBlock(int user_id, bool block); // 0x100111D80
	public void ChatReport(int chat_id); // 0x100112050
	public void SaveChatRegion(int lang); // 0x10011221C
	public void FacebookLogin(); // 0x1001123E8
	public void SocialLike(int social); // 0x100112554
	public void UpdateFacebookData(string email, string fb_id); // 0x100112720
	public void FacebookStamina(); // 0x1001129EC
	public void CheckAndroidPurchase(string sku); // 0x100112C3C
	public void GetRatings(int area); // 0x100112E70
	public void FriendsGetRatings(int area); // 0x1001130E8
	public void SquadGetRatings(int area); // 0x100113360
	public void CupGetRatings(); // 0x1001135D8
	public void GameChat(int wordid); // 0x1001136DC
	public void BonusCheckHit(int spawnid, string shooter, int type); // 0x1001139A4
	public void BuyShopItem(ShopItem item); // 0x100113DA4
	public void BuyBoosterInBattle(ShopItem item); // 0x100114010
	public void GetPlayerProfile(int user_id); // 0x100114314
	public void GetPlayerProfileAchievements(int user_id); // 0x1001144FC
	public void GetAchievementReward(int id); // 0x1001146C8
	public void PlatoonCreate(string name, int type, int status); // 0x100114894
	public void PlatoonGetData(int platoon_id); // 0x100114B90
	public void PlatoonInvite(int user_id, int platoon_id); // 0x100114D5C
	public void PlatoonLeave(int platoon_id); // 0x100114FC8
	public void PlatoonChangeMemberStatus(int platoon_id, int user_id); // 0x100115194
	public void PlatoonAcceptInvite(int platoon_id); // 0x1001153F8
	public void PlatoonRejectInvite(int platoon_id); // 0x1001155C4
	public void PlatoonJoinPublic(int platoon_id); // 0x100115790
	public void PlatoonRequestJoin(int platoon_id); // 0x10011595C
	public void PlatoonAcceptRequest(int platoon_id, int user_id); // 0x100115B98
	public void PlatoonRejectRequest(int platoon_id, int user_id); // 0x100115E30
	public void PlatoonGetRequests(int platoon_id); // 0x100116094
	public void PlatoonDismissMember(int platoon_id, int user_id); // 0x100116260
	public void PlatoonGetRegistration(); // 0x1001164C4
	public void PlatoonRegister(int type, int prime_time); // 0x1001165C8
	public void PlatoonGetBattle(int type); // 0x10011682C
	public void PlatoonEnterBattle(int type, int room_id); // 0x1001169F8
	public void PlatoonGetRating(int type); // 0x100116C74
	public void PlatoonChangeData(int platoon_id, string name, int status); // 0x100116E40
	public void SquadGetData(int squad_id); // 0x100117154
	public void SquadCreate(string name, int status); // 0x100117320
	public void SquadJoinPublic(int squad_id, optional bool paid); // 0x100117584
	public void SquadRequestJoin(int squad_id, optional bool paid); // 0x1001177E8
	public void SquadInvite(int squad_id, int user_id); // 0x100117AF0
	public void SquadAcceptInvite(int squad_id, optional bool paid); // 0x100117D54
	public void SquadRejectInvite(int squad_id); // 0x100118018
	public void SquadChangeMemberStatus(int squad_id, int user_id, int status_delta); // 0x1001181E4
	public void SquadDismissMember(int squad_id, int user_id); // 0x1001184E0
	public void SquadLeave(int squad_id); // 0x100118744
	public void SquadChangeData(int squad_id, string name, string desc, int status, int emblem_id, optional int t_min_status); // 0x100118930
	public void SquadSearch(string pattern, bool can_join); // 0x100118E10
	public void PlatoonSearch(int type, string pattern, bool can_join); // 0x100119074
	public void SquadExpand(int squad_id); // 0x100119370
	public void SquadAcceptRequest(int squad_id, int user_id); // 0x10011953C
	public void SquadRejectRequest(int squad_id, int user_id); // 0x1001197D0
	public void SquadGetRequests(int squad_id); // 0x100119A34
	public void SquadGetDiplomacy(int squad_id); // 0x100119C00
	public void SquadAllianceAccept(int squad_id); // 0x100119DCC
	public void SquadAllianceReject(int squad_id); // 0x100119F98
	public void SquadAllianceInvite(int squad_id); // 0x10011A164
	public void SquadAllianceBreak(int squad_id); // 0x10011A330
	public void SwitchTutorialStage(int stage); // 0x10011A4FC
	public void ResetProgress(); // 0x10011A878
	public void FriendAdd(int id); // 0x10011A97C
	public void FriendRemove(int id); // 0x10011AB48
	public void FriendSearch(int id); // 0x10011AD14
	public void UseBooster(int type, bool permanent); // 0x10011AEE0
	public void OffBooster(int type); // 0x10011B1DC
	public void SendIRWorkTime(int t); // 0x10011B440
	public void TransferGift(int to_id, string to_name, int dollars, int crystals); // 0x10011B6A4
	public void CheckRewards(); // 0x10011BA2C
	public void CheckAdBonus(); // 0x10011BB30
	public void ChatEnter(int room); // 0x10011BC34
	public void ChatLeave(); // 0x10011BE44
	public void ChatSendMsg(string text); // 0x10011C074
	public void WarGetBids(); // 0x10011C304
	public void WarBidUp(int territory_id, int value); // 0x10011C408
	public void WarGetNodes(int territory_id, int instance_id); // 0x10011C66C
	public void WarAttackNode(int territory_id, int node_id, optional int instance_id); // 0x10011C8D0
	public void GetVideoReward(); // 0x10011CBE8
	public void RatedApp(); // 0x10011CCEC
	public void TournamentGetInfo(); // 0x10011CDF0
	public void TournamentRegister(int time); // 0x10011CEF4
	public void ChatLiftBan(); // 0x10011D0C0
	public void MercStatus(bool active); // 0x10011D1C4
	public void MercHire(int merc_id, bool squad_cup); // 0x10011D390
	public void MercGetRating(int league); // 0x10011D5F4
	public void MercGetContracts(); // 0x10011D7F8
	public void MercGetMercs(); // 0x10011D8FC
	public void MercProlongContract(int contract_id); // 0x10011DA00
	public void MercFishingStart(); // 0x10011DBCC
	public void MercFishingEnd(); // 0x10011DCD0
	public void MercFishingHire(bool squad_cup, int title_diff, int league_mask); // 0x10011DDD4
	public void ChangeSensitivity(float val, float val_zoom, bool tf_zoom, bool ir_button); // 0x10011E0D0
	public void UnGoose(); // 0x10011E4A0
	public void SmartHelmetSetup(Settings settings); // 0x10011E5A4
	public void SmartWeaponSetup(Settings settings); // 0x10011E6A4
	public void AllianceGetRegistration(); // 0x10011E7A4
	public void AllianceRegister(int territory_id); // 0x10011E8A8
	public void AllianceGetQualification(int territory_id); // 0x10011EA74
	public void AllianceEnterQualification(int territory_id, int room_id); // 0x10011EC40
	public void GetOwnedTerritories(); // 0x10011EEC4
	public void OneSignalId(string user_id, string token); // 0x10011EFC8
	public void ChangePushSettings(int settings); // 0x10011F22C
	public void SelectCup(int cup); // 0x10011F3F8
	public void SquadSelectCup(int cup); // 0x10011F5C4
	public void DroneBuy(int drone_id); // 0x10011F790
	public void DroneBuyPart(int drone_id, int part, int stage); // 0x10011F95C
	public void DroneCheckPartDelivery(int drone_id, int part, int stage); // 0x10011FC58
	public void DroneForcePartDelivery(int drone_id, int part, int stage); // 0x10011FF54
	public void DroneInstallPart(int drone_id, int part, int stage); // 0x100120250
	public void DroneRestoreEnergy(int drone_id); // 0x10012054C
	public void DroneLaunch(int drone_id); // 0x100120718
	public void Disconnect(); // 0x100108730
	public void DisconnectGame(); // 0x10010880C
	public void OnDMessage(BaseEvent evt); // 0x1001209E0
	public void OnExtensionResponse(BaseEvent evt); // 0x1001209E4
	private string RequestToString(ExtensionRequests req); // 0x1001079BC
	private void OnApplicationPause(bool pauseStatus); // 0x10013ABD8
	private void OnApplicationQuit(); // 0x10013ABDC
	public void ForceReloadApp(); // 0x10013773C
}

// Namespace: 
public class SmartFoxWrapper : SmartFox // TypeDefIndex: 4179
{
	// Methods
	public void .ctor(bool debug); // 0x10010707C
	public void Send(IRequest request); // 0x100107A38
}

// Namespace: 
public sealed class ExtensionResponses : Enum // TypeDefIndex: 4180
{
	// Fields
	public int value__; // 0x10
	public const ExtensionResponses error = 0; // 0x0
	public const ExtensionResponses pong = 1; // 0x0
	public const ExtensionResponses gameCreated = 2; // 0x0
	public const ExtensionResponses findGameResponse = 3; // 0x0
	public const ExtensionResponses userLoadGameResponse = 4; // 0x0
	public const ExtensionResponses gameTimerTick = 5; // 0x0
	public const ExtensionResponses enemyLookAtTarget = 6; // 0x0
	public const ExtensionResponses enemyFire = 7; // 0x0
	public const ExtensionResponses takeDamage = 8; // 0x0
	public const ExtensionResponses respawn = 9; // 0x0
	public const ExtensionResponses gameend = 10; // 0x0
	public const ExtensionResponses onplayerexit = 11; // 0x0
	public const ExtensionResponses statisticupdate = 12; // 0x0
	public const ExtensionResponses criticalerror = 13; // 0x0
	public const ExtensionResponses dollarsupdate = 14; // 0x0
	public const ExtensionResponses crystalsupdate = 15; // 0x0
	public const ExtensionResponses weaponbuyed = 16; // 0x0
	public const ExtensionResponses weapondelivered = 17; // 0x0
	public const ExtensionResponses weaponinstalled = 18; // 0x0
	public const ExtensionResponses weaponpartbuyed = 19; // 0x0
	public const ExtensionResponses weaponpartdelivered = 20; // 0x0
	public const ExtensionResponses weaponpartinstalled = 21; // 0x0
	public const ExtensionResponses helmetpartbuyed = 22; // 0x0
	public const ExtensionResponses helmetpartdelivered = 23; // 0x0
	public const ExtensionResponses helmetpartinstalled = 24; // 0x0
	public const ExtensionResponses stamina = 25; // 0x0
	public const ExtensionResponses helmetbuyed = 26; // 0x0
	public const ExtensionResponses helmetdelivered = 27; // 0x0
	public const ExtensionResponses helmetinstalled = 28; // 0x0
	public const ExtensionResponses successleavedgame = 29; // 0x0
	public const ExtensionResponses firstblood = 30; // 0x0
	public const ExtensionResponses headshoot = 31; // 0x0
	public const ExtensionResponses onehitkill = 32; // 0x0
	public const ExtensionResponses combokill = 33; // 0x0
	public const ExtensionResponses fastkiller = 34; // 0x0
	public const ExtensionResponses killassist = 35; // 0x0
	public const ExtensionResponses revengekill = 36; // 0x0
	public const ExtensionResponses votedforreplay = 37; // 0x0
	public const ExtensionResponses voteTimerTick = 38; // 0x0
	public const ExtensionResponses gameplayend = 39; // 0x0
	public const ExtensionResponses restartgame = 40; // 0x0
	public const ExtensionResponses onreloaderror = 41; // 0x0
	public const ExtensionResponses gamebattleresults = 42; // 0x0
	public const ExtensionResponses leveluped = 43; // 0x0
	public const ExtensionResponses rankpointsuped = 44; // 0x0
	public const ExtensionResponses facebookreward = 45; // 0x0
	public const ExtensionResponses weaponcamobuyed = 46; // 0x0
	public const ExtensionResponses addstatisticplayer = 47; // 0x0
	public const ExtensionResponses removestatisticplayer = 48; // 0x0
	public const ExtensionResponses kill = 49; // 0x0
	public const ExtensionResponses androidpurchasesuccess = 50; // 0x0
	public const ExtensionResponses ammolevel = 51; // 0x0
	public const ExtensionResponses onmapplayers = 52; // 0x0
	public const ExtensionResponses joinedtogame = 53; // 0x0
	public const ExtensionResponses prevweekratings = 54; // 0x0
	public const ExtensionResponses weekratings = 55; // 0x0
	public const ExtensionResponses alltimeratings = 56; // 0x0
	public const ExtensionResponses friendsweekratings = 57; // 0x0
	public const ExtensionResponses friendsalltimeratings = 58; // 0x0
	public const ExtensionResponses leagueratings = 59; // 0x0
	public const ExtensionResponses championratings = 60; // 0x0
	public const ExtensionResponses ratingreward = 61; // 0x0
	public const ExtensionResponses gamechat = 62; // 0x0
	public const ExtensionResponses bonushit = 63; // 0x0
	public const ExtensionResponses bonusspawn = 64; // 0x0
	public const ExtensionResponses specialreward = 65; // 0x0
	public const ExtensionResponses specialreward1 = 66; // 0x0
	public const ExtensionResponses weaponcamoremoved = 67; // 0x0
	public const ExtensionResponses tuningremoved = 68; // 0x0
	public const ExtensionResponses tuningbuyed = 69; // 0x0
	public const ExtensionResponses dailyquestinfo = 70; // 0x0
	public const ExtensionResponses dailyquestprogress = 71; // 0x0
	public const ExtensionResponses dailyquestreward = 72; // 0x0
	public const ExtensionResponses achievementprogress = 73; // 0x0
	public const ExtensionResponses achievementreward = 74; // 0x0
	public const ExtensionResponses shop_buy_ok = 75; // 0x0
	public const ExtensionResponses player_profile = 76; // 0x0
	public const ExtensionResponses squad_data_ok = 77; // 0x0
	public const ExtensionResponses squad_other_data_ok = 78; // 0x0
	public const ExtensionResponses squad_error = 79; // 0x0
	public const ExtensionResponses squad_leave_ok = 80; // 0x0
	public const ExtensionResponses squad_invite_ok = 81; // 0x0
	public const ExtensionResponses squad_search_ok = 82; // 0x0
	public const ExtensionResponses squad_request_join_ok = 83; // 0x0
	public const ExtensionResponses squad_kicked = 84; // 0x0
	public const ExtensionResponses squad_requests_ok = 85; // 0x0
	public const ExtensionResponses squad_prev_week_ratings = 86; // 0x0
	public const ExtensionResponses squad_week_ratings = 87; // 0x0
	public const ExtensionResponses squad_champion_ratings = 88; // 0x0
	public const ExtensionResponses squad_all_time_ratings = 89; // 0x0
	public const ExtensionResponses squad_tournament_ratings = 90; // 0x0
	public const ExtensionResponses squad_alliance_ratings = 91; // 0x0
	public const ExtensionResponses squad_invites_ok = 92; // 0x0
	public const ExtensionResponses squad_create_ok = 93; // 0x0
	public const ExtensionResponses squad_reward = 94; // 0x0
	public const ExtensionResponses squad_duplicate_name = 95; // 0x0
	public const ExtensionResponses squad_diplomacy_ok = 96; // 0x0
	public const ExtensionResponses squad_alliance_ok = 97; // 0x0
	public const ExtensionResponses squad_alliance_error = 98; // 0x0
	public const ExtensionResponses squad_change_league = 99; // 0x0
	public const ExtensionResponses tutorial_stage_ok = 100; // 0x0
	public const ExtensionResponses change_league = 101; // 0x0
	public const ExtensionResponses progress_achievement = 102; // 0x0
	public const ExtensionResponses player_profile_achievements = 103; // 0x0
	public const ExtensionResponses cup_rating = 104; // 0x0
	public const ExtensionResponses region_rating = 105; // 0x0
	public const ExtensionResponses booster_on = 106; // 0x0
	public const ExtensionResponses booster_off = 107; // 0x0
	public const ExtensionResponses booster_rejected = 108; // 0x0
	public const ExtensionResponses booster_permanent = 109; // 0x0
	public const ExtensionResponses battle_player_tuning = 110; // 0x0
	public const ExtensionResponses change_profile_data_ok = 111; // 0x0
	public const ExtensionResponses money_exp_update = 112; // 0x0
	public const ExtensionResponses reset_progress_ok = 113; // 0x0
	public const ExtensionResponses friend_add_ok = 114; // 0x0
	public const ExtensionResponses friend_remove_ok = 115; // 0x0
	public const ExtensionResponses friend_list_update = 116; // 0x0
	public const ExtensionResponses friend_search_ok = 117; // 0x0
	public const ExtensionResponses armory_update = 118; // 0x0
	public const ExtensionResponses gift_size_update = 119; // 0x0
	public const ExtensionResponses gift_reward_dollars = 120; // 0x0
	public const ExtensionResponses gift_reward_crystals = 121; // 0x0
	public const ExtensionResponses popup_new_item = 122; // 0x0
	public const ExtensionResponses chat_enter_ok = 123; // 0x0
	public const ExtensionResponses chat_enter_error = 124; // 0x0
	public const ExtensionResponses chat_leave_ok = 125; // 0x0
	public const ExtensionResponses chat_new_msg = 126; // 0x0
	public const ExtensionResponses chat_count_changed = 127; // 0x0
	public const ExtensionResponses chat_message_count = 128; // 0x0
	public const ExtensionResponses chat_message_plus = 129; // 0x0
	public const ExtensionResponses chat_region_rating = 130; // 0x0
	public const ExtensionResponses war_bids_update = 131; // 0x0
	public const ExtensionResponses war_bid_ok = 132; // 0x0
	public const ExtensionResponses war_bid_error = 133; // 0x0
	public const ExtensionResponses war_bid_outbid = 134; // 0x0
	public const ExtensionResponses war_bid_returned = 135; // 0x0
	public const ExtensionResponses war_nodes_update = 136; // 0x0
	public const ExtensionResponses war_attack_ok = 137; // 0x0
	public const ExtensionResponses war_attack_error = 138; // 0x0
	public const ExtensionResponses territories_reward = 139; // 0x0
	public const ExtensionResponses war_start_battle = 140; // 0x0
	public const ExtensionResponses war_end_battle = 141; // 0x0
	public const ExtensionResponses server_restart = 142; // 0x0
	public const ExtensionResponses user_team = 143; // 0x0
	public const ExtensionResponses tournament_info_ok = 144; // 0x0
	public const ExtensionResponses commander_promotion = 145; // 0x0
	public const ExtensionResponses chat_ban = 146; // 0x0
	public const ExtensionResponses tournament_reward = 147; // 0x0
	public const ExtensionResponses alliance_reward = 148; // 0x0
	public const ExtensionResponses spy_battle = 149; // 0x0
	public const ExtensionResponses vip_status_changed = 150; // 0x0
	public const ExtensionResponses daily_reward = 151; // 0x0
	public const ExtensionResponses merc_status_ok = 152; // 0x0
	public const ExtensionResponses merc_hire_ok = 153; // 0x0
	public const ExtensionResponses merc_hire_error = 154; // 0x0
	public const ExtensionResponses merc_rating_ok = 155; // 0x0
	public const ExtensionResponses merc_mercs_ok = 156; // 0x0
	public const ExtensionResponses merc_contracts_ok = 157; // 0x0
	public const ExtensionResponses merc_contract_info = 158; // 0x0
	public const ExtensionResponses merc_reward = 159; // 0x0
	public const ExtensionResponses merc_employer_reward = 160; // 0x0
	public const ExtensionResponses merc_employer_refund = 161; // 0x0
	public const ExtensionResponses merc_top5_rating = 162; // 0x0
	public const ExtensionResponses merc_fishing_update = 163; // 0x0
	public const ExtensionResponses smart_rifle_upgrade_ok = 164; // 0x0
	public const ExtensionResponses smart_rifle_upgrade_error = 165; // 0x0
	public const ExtensionResponses smart_helmet_upgrade_ok = 166; // 0x0
	public const ExtensionResponses smart_helmet_upgrade_error = 167; // 0x0
	public const ExtensionResponses alliance_registration = 168; // 0x0
	public const ExtensionResponses alliance_register_ok = 169; // 0x0
	public const ExtensionResponses alliance_register_failed = 170; // 0x0
	public const ExtensionResponses alliance_qualification = 171; // 0x0
	public const ExtensionResponses alliance_enter_qualification_ok = 172; // 0x0
	public const ExtensionResponses alliance_enter_qualification_failed = 173; // 0x0
	public const ExtensionResponses t_owned_ok = 174; // 0x0
	public const ExtensionResponses merc_employer_reward_offline = 175; // 0x0
	public const ExtensionResponses avatars_update = 176; // 0x0
	public const ExtensionResponses flags_update = 177; // 0x0
	public const ExtensionResponses sku_item_received = 178; // 0x0
	public const ExtensionResponses login_data_ok = 179; // 0x0
	public const ExtensionResponses platoon_data_ok = 180; // 0x0
	public const ExtensionResponses platoon_other_data_ok = 181; // 0x0
	public const ExtensionResponses platoon_create_ok = 182; // 0x0
	public const ExtensionResponses platoon_leave_ok = 183; // 0x0
	public const ExtensionResponses platoon_invite_ok = 184; // 0x0
	public const ExtensionResponses platoon_invites_ok = 185; // 0x0
	public const ExtensionResponses platoon_register_ok = 186; // 0x0
	public const ExtensionResponses platoon_registration = 187; // 0x0
	public const ExtensionResponses platoon_battle = 188; // 0x0
	public const ExtensionResponses platoon_enter_battle_ok = 189; // 0x0
	public const ExtensionResponses platoon_ratings = 190; // 0x0
	public const ExtensionResponses platoon_reward = 191; // 0x0
	public const ExtensionResponses platoon_search_ok = 192; // 0x0
	public const ExtensionResponses platoon_request_join_ok = 193; // 0x0
	public const ExtensionResponses platoon_requests_ok = 194; // 0x0
	public const ExtensionResponses platoon_kicked = 195; // 0x0
	public const ExtensionResponses drones_update = 196; // 0x0

}

// Namespace: 
public sealed class ExtensionRequests : Enum // TypeDefIndex: 4181
{
	// Fields
	public int value__; // 0x10
	public const ExtensionRequests ping = 0; // 0x0
	public const ExtensionRequests creategame = 1; // 0x0
	public const ExtensionRequests findgame = 2; // 0x0
	public const ExtensionRequests userloadgame = 3; // 0x0
	public const ExtensionRequests lookatenemy = 4; // 0x0
	public const ExtensionRequests playerfire = 5; // 0x0
	public const ExtensionRequests checkhit = 6; // 0x0
	public const ExtensionRequests checkhitdrone = 7; // 0x0
	public const ExtensionRequests checkreload = 8; // 0x0
	public const ExtensionRequests checkrespawn = 9; // 0x0
	public const ExtensionRequests forcerespawn = 10; // 0x0
	public const ExtensionRequests checkstayplayeringame = 11; // 0x0
	public const ExtensionRequests buyweapon = 12; // 0x0
	public const ExtensionRequests checkweapondelivery = 13; // 0x0
	public const ExtensionRequests forceweapondelivery = 14; // 0x0
	public const ExtensionRequests installweapon = 15; // 0x0
	public const ExtensionRequests smart_rifle_upgrade = 16; // 0x0
	public const ExtensionRequests buyhelmet = 17; // 0x0
	public const ExtensionRequests checkhelmetdelivery = 18; // 0x0
	public const ExtensionRequests forcehelmetdelivery = 19; // 0x0
	public const ExtensionRequests installhelmet = 20; // 0x0
	public const ExtensionRequests smart_helmet_upgrade = 21; // 0x0
	public const ExtensionRequests buyweaponpart = 22; // 0x0
	public const ExtensionRequests checkweaponpartdelivery = 23; // 0x0
	public const ExtensionRequests forceweaponpartdelivery = 24; // 0x0
	public const ExtensionRequests installweaponpart = 25; // 0x0
	public const ExtensionRequests buyhelmetpart = 26; // 0x0
	public const ExtensionRequests checkhelmetpartdelivery = 27; // 0x0
	public const ExtensionRequests forcehelmetpartdelivery = 28; // 0x0
	public const ExtensionRequests installhelmetpart = 29; // 0x0
	public const ExtensionRequests setupnicknameandflag = 30; // 0x0
	public const ExtensionRequests checkstamina = 31; // 0x0
	public const ExtensionRequests staminadonate = 32; // 0x0
	public const ExtensionRequests forceleavegame = 33; // 0x0
	public const ExtensionRequests voteforreplay = 34; // 0x0
	public const ExtensionRequests levelup = 35; // 0x0
	public const ExtensionRequests checkmoney = 36; // 0x0
	public const ExtensionRequests rankpointsup = 37; // 0x0
	public const ExtensionRequests savelanguage = 38; // 0x0
	public const ExtensionRequests facebooklogin = 39; // 0x0
	public const ExtensionRequests facebooklike = 40; // 0x0
	public const ExtensionRequests facebookstamina = 41; // 0x0
	public const ExtensionRequests killme = 42; // 0x0
	public const ExtensionRequests updategamestatistic = 43; // 0x0
	public const ExtensionRequests buyweaponcamo = 44; // 0x0
	public const ExtensionRequests checkandroidpurchase = 45; // 0x0
	public const ExtensionRequests getratings = 46; // 0x0
	public const ExtensionRequests gamechat = 47; // 0x0
	public const ExtensionRequests bonuscheckhit = 48; // 0x0
	public const ExtensionRequests facebookupdate = 49; // 0x0
	public const ExtensionRequests buytuning = 50; // 0x0
	public const ExtensionRequests buy_shop_item = 51; // 0x0
	public const ExtensionRequests get_player_profile = 52; // 0x0
	public const ExtensionRequests change_profile_data = 53; // 0x0
	public const ExtensionRequests get_achievement_reward = 54; // 0x0
	public const ExtensionRequests squad_get_data = 55; // 0x0
	public const ExtensionRequests squad_create = 56; // 0x0
	public const ExtensionRequests squad_join_public = 57; // 0x0
	public const ExtensionRequests squad_request_join = 58; // 0x0
	public const ExtensionRequests squad_invite = 59; // 0x0
	public const ExtensionRequests squad_accept_invite = 60; // 0x0
	public const ExtensionRequests squad_reject_invite = 61; // 0x0
	public const ExtensionRequests squad_change_member_status = 62; // 0x0
	public const ExtensionRequests squad_dismiss_member = 63; // 0x0
	public const ExtensionRequests squad_leave = 64; // 0x0
	public const ExtensionRequests squad_change_data = 65; // 0x0
	public const ExtensionRequests squad_search = 66; // 0x0
	public const ExtensionRequests squad_expand = 67; // 0x0
	public const ExtensionRequests squad_accept_request = 68; // 0x0
	public const ExtensionRequests squad_reject_request = 69; // 0x0
	public const ExtensionRequests squad_get_requests = 70; // 0x0
	public const ExtensionRequests squad_get_rating = 71; // 0x0
	public const ExtensionRequests squad_get_diplomacy = 72; // 0x0
	public const ExtensionRequests squad_alliance_invite = 73; // 0x0
	public const ExtensionRequests squad_alliance_accept = 74; // 0x0
	public const ExtensionRequests squad_alliance_reject = 75; // 0x0
	public const ExtensionRequests squad_alliance_break = 76; // 0x0
	public const ExtensionRequests tutorial_stage = 77; // 0x0
	public const ExtensionRequests tutorial_stage_game = 78; // 0x0
	public const ExtensionRequests reset_progress = 79; // 0x0
	public const ExtensionRequests get_player_profile_achievements = 80; // 0x0
	public const ExtensionRequests get_cup_rating = 81; // 0x0
	public const ExtensionRequests use_booster = 82; // 0x0
	public const ExtensionRequests buy_booster_in_battle = 83; // 0x0
	public const ExtensionRequests off_booster = 84; // 0x0
	public const ExtensionRequests friend_add = 85; // 0x0
	public const ExtensionRequests friend_remove = 86; // 0x0
	public const ExtensionRequests friend_search = 87; // 0x0
	public const ExtensionRequests friends_get_rating = 88; // 0x0
	public const ExtensionRequests ir_work_time = 89; // 0x0
	public const ExtensionRequests transfer_gift = 90; // 0x0
	public const ExtensionRequests check_rewards = 91; // 0x0
	public const ExtensionRequests check_ad_bonus = 92; // 0x0
	public const ExtensionRequests chat_enter = 93; // 0x0
	public const ExtensionRequests chat_leave = 94; // 0x0
	public const ExtensionRequests chat_send_msg = 95; // 0x0
	public const ExtensionRequests chat_region = 96; // 0x0
	public const ExtensionRequests chat_report = 97; // 0x0
	public const ExtensionRequests chat_block = 98; // 0x0
	public const ExtensionRequests chat_lift_ban = 99; // 0x0
	public const ExtensionRequests war_get_bids = 100; // 0x0
	public const ExtensionRequests war_bid_up = 101; // 0x0
	public const ExtensionRequests war_get_nodes = 102; // 0x0
	public const ExtensionRequests war_attack_node = 103; // 0x0
	public const ExtensionRequests get_video_reward = 104; // 0x0
	public const ExtensionRequests tournament_register = 105; // 0x0
	public const ExtensionRequests tournament_get_info = 106; // 0x0
	public const ExtensionRequests rated_app = 107; // 0x0
	public const ExtensionRequests donate_and_replay = 108; // 0x0
	public const ExtensionRequests merc_status = 109; // 0x0
	public const ExtensionRequests merc_hire = 110; // 0x0
	public const ExtensionRequests merc_get_rating = 111; // 0x0
	public const ExtensionRequests merc_get_contracts = 112; // 0x0
	public const ExtensionRequests merc_get_mercs = 113; // 0x0
	public const ExtensionRequests merc_prolong_contract = 114; // 0x0
	public const ExtensionRequests merc_fishing_start = 115; // 0x0
	public const ExtensionRequests merc_fishing_end = 116; // 0x0
	public const ExtensionRequests merc_fishing_hire = 117; // 0x0
	public const ExtensionRequests change_sensitivity = 118; // 0x0
	public const ExtensionRequests remove_goose = 119; // 0x0
	public const ExtensionRequests smart_helmet_setup = 120; // 0x0
	public const ExtensionRequests smart_rifle_setup = 121; // 0x0
	public const ExtensionRequests alliance_get_registration = 122; // 0x0
	public const ExtensionRequests alliance_register = 123; // 0x0
	public const ExtensionRequests alliance_get_qualification = 124; // 0x0
	public const ExtensionRequests alliance_enter_qualification = 125; // 0x0
	public const ExtensionRequests get_t_owned = 126; // 0x0
	public const ExtensionRequests onesignal_id = 127; // 0x0
	public const ExtensionRequests change_push_settings = 128; // 0x0
	public const ExtensionRequests select_cup = 129; // 0x0
	public const ExtensionRequests squad_select_cup = 130; // 0x0
	public const ExtensionRequests login_get_data = 131; // 0x0
	public const ExtensionRequests platoon_get_data = 132; // 0x0
	public const ExtensionRequests platoon_create = 133; // 0x0
	public const ExtensionRequests platoon_invite = 134; // 0x0
	public const ExtensionRequests platoon_leave = 135; // 0x0
	public const ExtensionRequests platoon_change_member_status = 136; // 0x0
	public const ExtensionRequests platoon_accept_invite = 137; // 0x0
	public const ExtensionRequests platoon_reject_invite = 138; // 0x0
	public const ExtensionRequests platoon_request_join = 139; // 0x0
	public const ExtensionRequests platoon_join_public = 140; // 0x0
	public const ExtensionRequests platoon_get_requests = 141; // 0x0
	public const ExtensionRequests platoon_accept_request = 142; // 0x0
	public const ExtensionRequests platoon_reject_request = 143; // 0x0
	public const ExtensionRequests platoon_dismiss_member = 144; // 0x0
	public const ExtensionRequests platoon_get_ratings = 145; // 0x0
	public const ExtensionRequests platoon_change_data = 146; // 0x0
	public const ExtensionRequests platoon_register = 147; // 0x0
	public const ExtensionRequests platoon_get_registration = 148; // 0x0
	public const ExtensionRequests platoon_get_battle = 149; // 0x0
	public const ExtensionRequests platoon_enter_battle = 150; // 0x0
	public const ExtensionRequests platoon_search = 151; // 0x0
	public const ExtensionRequests drone_buy = 152; // 0x0
	public const ExtensionRequests drone_buy_part = 153; // 0x0
	public const ExtensionRequests drone_check_part_delivery = 154; // 0x0
	public const ExtensionRequests drone_force_part_delivery = 155; // 0x0
	public const ExtensionRequests drone_install_part = 156; // 0x0
	public const ExtensionRequests drone_restore_energy = 157; // 0x0
	public const ExtensionRequests drone_launch = 158; // 0x0

}

// Namespace: 
public sealed class OnSocketServerDgt : MulticastDelegate // TypeDefIndex: 4182
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C580
	public virtual void Invoke(); // 0x100108338
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x10013C59C
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C5FC
}

// Namespace: 
public sealed class OnAchievementsDgt : MulticastDelegate // TypeDefIndex: 4183
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013AE44
	public virtual void Invoke(Achievements a); // 0x100137D54
	public virtual IAsyncResult BeginInvoke(Achievements a, AsyncCallback callback, object object); // 0x10013AE54
	public virtual void EndInvoke(IAsyncResult result); // 0x10013AEA4
}

// Namespace: 
public sealed class OnISFSObjectDgt : MulticastDelegate // TypeDefIndex: 4184
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BEE8
	public virtual void Invoke(ISFSObject responseobject); // 0x100136F50
	public virtual IAsyncResult BeginInvoke(ISFSObject responseobject, AsyncCallback callback, object object); // 0x10013BEF8
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BF48
}

// Namespace: 
public sealed class OnIntDgt : MulticastDelegate // TypeDefIndex: 4185
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B928
	public virtual void Invoke(int intvalue); // 0x100109C1C
	public virtual IAsyncResult BeginInvoke(int intvalue, AsyncCallback callback, object object); // 0x10013B948
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BA00
}

// Namespace: 
public sealed class OnShopItemDgt : MulticastDelegate // TypeDefIndex: 4186
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C3EC
	public virtual void Invoke(ShopItem item); // 0x100137CB8
	public virtual IAsyncResult BeginInvoke(ShopItem item, AsyncCallback callback, object object); // 0x10013C3FC
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C44C
}

// Namespace: 
public sealed class OnPongDgt : MulticastDelegate // TypeDefIndex: 4187
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C13C
	public virtual void Invoke(long clientTime, long serverTime); // 0x100137A8C
	public virtual IAsyncResult BeginInvoke(long clientTime, long serverTime, AsyncCallback callback, object object); // 0x10013C160
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C228
}

// Namespace: 
public sealed class OnPlayerAndSpawnDgt : MulticastDelegate // TypeDefIndex: 4188
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C054
	public virtual void Invoke(string playername, int spawnid, ISFSObject adddata); // 0x100137800
	public virtual IAsyncResult BeginInvoke(string playername, int spawnid, ISFSObject adddata, AsyncCallback callback, object object); // 0x10013C064
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C130
}

// Namespace: 
public sealed class OnStringDgt : MulticastDelegate // TypeDefIndex: 4189
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C6E0
	public virtual void Invoke(string stringvalue); // 0x10010A8F4
	public virtual IAsyncResult BeginInvoke(string stringvalue, AsyncCallback callback, object object); // 0x10013C724
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C774
}

// Namespace: 
public sealed class OnEnemyLookAtTargetDgt : MulticastDelegate // TypeDefIndex: 4190
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B638
	public virtual void Invoke(string enemyName, string targetName); // 0x1001379CC
	public virtual IAsyncResult BeginInvoke(string enemyName, string targetName, AsyncCallback callback, object object); // 0x10013B6A4
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B700
}

// Namespace: 
public sealed class OnEnemyFireDgt : MulticastDelegate // TypeDefIndex: 4191
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B400
	public virtual void Invoke(string shooter, string target, float bulletSpeed); // 0x10013B410
	public virtual IAsyncResult BeginInvoke(string shooter, string target, float bulletSpeed, AsyncCallback callback, object object); // 0x10013B560
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B62C
}

// Namespace: 
public sealed class OnTakeDamageDgt : MulticastDelegate // TypeDefIndex: 4192
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C780
	public virtual void Invoke(string shooter, string target, double health, double s_h); // 0x1001378D4
	public virtual IAsyncResult BeginInvoke(string shooter, string target, double health, double s_h, AsyncCallback callback, object object); // 0x10013C804
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C8E0
}

// Namespace: 
public sealed class OnRankpointsDgt : MulticastDelegate // TypeDefIndex: 4193
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C234
	public virtual void Invoke(string shooter, string target, int rp); // 0x100137358
	public virtual IAsyncResult BeginInvoke(string shooter, string target, int rp, AsyncCallback callback, object object); // 0x10013C2A8
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C374
}

// Namespace: 
public sealed class OnComboKillDgt : MulticastDelegate // TypeDefIndex: 4194
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B228
	public virtual void Invoke(string shooter, string target, int combo, int rp); // 0x10013742C
	public virtual IAsyncResult BeginInvoke(string shooter, string target, int combo, int rp, AsyncCallback callback, object object); // 0x10013B2AC
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B388
}

// Namespace: 
public sealed class OnISFSArrayDgt : MulticastDelegate // TypeDefIndex: 4195
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BE7C
	public virtual void Invoke(ISFSArray responsearray); // 0x10013710C
	public virtual IAsyncResult BeginInvoke(ISFSArray responsearray, AsyncCallback callback, object object); // 0x10013BE8C
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BEDC
}

// Namespace: 
public sealed class OnBoolDgt : MulticastDelegate // TypeDefIndex: 4196
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B040
	public virtual void Invoke(bool boolvalue); // 0x1001371A8
	public virtual IAsyncResult BeginInvoke(bool boolvalue, AsyncCallback callback, object object); // 0x10013B060
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B118
}

// Namespace: 
public sealed class OnIntStringDgt : MulticastDelegate // TypeDefIndex: 4197
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BD54
	public virtual void Invoke(int type, string name); // 0x10013AAB8
	public virtual IAsyncResult BeginInvoke(int type, string name, AsyncCallback callback, object object); // 0x10013BDAC
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BE70
}

// Namespace: 
public sealed class OnIntIntDgt : MulticastDelegate // TypeDefIndex: 4198
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BA0C
	public virtual void Invoke(int type, int parttype); // 0x10013AB48
	public virtual IAsyncResult BeginInvoke(int type, int parttype, AsyncCallback callback, object object); // 0x10013BA30
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BAF8
}

// Namespace: 
public sealed class OnIntIntStringDgt : MulticastDelegate // TypeDefIndex: 4199
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BC14
	public virtual void Invoke(int type, int parttype, string name); // 0x100137B1C
	public virtual IAsyncResult BeginInvoke(int type, int parttype, string name, AsyncCallback callback, object object); // 0x10013BC74
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BD48
}

// Namespace: 
public sealed class OnIntIntIntDgt : MulticastDelegate // TypeDefIndex: 4200
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BB04
	public virtual void Invoke(int type, int parttype, int stage); // 0x1001375D0
	public virtual IAsyncResult BeginInvoke(int type, int parttype, int stage, AsyncCallback callback, object object); // 0x10013BB2C
	public virtual void EndInvoke(IAsyncResult result); // 0x10013BC08
}

// Namespace: 
public sealed class On5IntDgt : MulticastDelegate // TypeDefIndex: 4201
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013AD08
	public virtual void Invoke(int item_type, int camo_type, int camo_leftuses, int handling_type, int handling_leftusers); // 0x100137670
	public virtual IAsyncResult BeginInvoke(int item_type, int camo_type, int camo_leftuses, int handling_type, int handling_leftusers, AsyncCallback callback, object object); // 0x10013AD38
	public virtual void EndInvoke(IAsyncResult result); // 0x10013AE38
}

// Namespace: 
public sealed class OnFloatIntIntDgt : MulticastDelegate // TypeDefIndex: 4202
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B70C
	public virtual void Invoke(float type, int parttype, int stage); // 0x100137524
	public virtual IAsyncResult BeginInvoke(float type, int parttype, int stage, AsyncCallback callback, object object); // 0x10013B730
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B814
}

// Namespace: 
public sealed class OnLevelUpDgt : MulticastDelegate // TypeDefIndex: 4203
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013BF54
	public virtual void Invoke(MoneyTypes moneytype, int value); // 0x100136FEC
	public virtual IAsyncResult BeginInvoke(MoneyTypes moneytype, int value, AsyncCallback callback, object object); // 0x10013BF78
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C048
}

// Namespace: 
public sealed class OnRewardDgt : MulticastDelegate // TypeDefIndex: 4204
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C380
	public virtual void Invoke(Reward reward); // 0x1001372BC
	public virtual IAsyncResult BeginInvoke(Reward reward, AsyncCallback callback, object object); // 0x10013C390
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C3E0
}

// Namespace: 
public sealed class OnBonusRewardDgt : MulticastDelegate // TypeDefIndex: 4205
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013AEB0
	public virtual void Invoke(BonusValueType bonusytype, int value); // 0x10013AEC0
	public virtual IAsyncResult BeginInvoke(BonusValueType bonusytype, int value, AsyncCallback callback, object object); // 0x10013AF64
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B034
}

// Namespace: 
public sealed class OnBoosterRewardDgt : MulticastDelegate // TypeDefIndex: 4206
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B124
	public virtual void Invoke(MoneyTypes moneytype, long value); // 0x10013707C
	public virtual IAsyncResult BeginInvoke(MoneyTypes moneytype, long value, AsyncCallback callback, object object); // 0x10013B148
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B21C
}

// Namespace: 
public sealed class OnWeaponCamoBuyedDgt : MulticastDelegate // TypeDefIndex: 4207
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013CA04
	public virtual void Invoke(int camotype); // 0x10013CA14
	public virtual IAsyncResult BeginInvoke(int camotype, AsyncCallback callback, object object); // 0x10013CA98
	public virtual void EndInvoke(IAsyncResult result); // 0x10013CB50
}

// Namespace: 
public sealed class OnSquadDgt : MulticastDelegate // TypeDefIndex: 4208
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C608
	public virtual void Invoke(Squad sq); // 0x100139EA4
	public virtual IAsyncResult BeginInvoke(Squad sq, AsyncCallback callback, object object); // 0x10013C618
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C668
}

// Namespace: 
public sealed class OnSquadSearchDgt : MulticastDelegate // TypeDefIndex: 4209
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C674
	public virtual void Invoke(List`1<Squad> res); // 0x100139F40
	public virtual IAsyncResult BeginInvoke(List`1<Squad> res, AsyncCallback callback, object object); // 0x10013C684
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C6D4
}

// Namespace: 
public sealed class OnCupRatingDgt : MulticastDelegate // TypeDefIndex: 4210
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B394
	public virtual void Invoke(List`1<CupRating> res); // 0x10013AA1C
	public virtual IAsyncResult BeginInvoke(List`1<CupRating> res, AsyncCallback callback, object object); // 0x10013B3A4
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B3F4
}

// Namespace: 
public sealed class OnFriendListDgt : MulticastDelegate // TypeDefIndex: 4211
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013B820
	public virtual void Invoke(List`1<Friend> res); // 0x10013B830
	public virtual IAsyncResult BeginInvoke(List`1<Friend> res, AsyncCallback callback, object object); // 0x10013B8CC
	public virtual void EndInvoke(IAsyncResult result); // 0x10013B91C
}

// Namespace: 
public sealed class OnSkuItemReceivedDgt : MulticastDelegate // TypeDefIndex: 4212
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C458
	public virtual void Invoke(int id, int dollars, int crystals, int avatar, int flag, ISFSObject response); // 0x100137BBC
	public virtual IAsyncResult BeginInvoke(int id, int dollars, int crystals, int avatar, int flag, ISFSObject response, AsyncCallback callback, object object); // 0x10013C468
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C574
}

// Namespace: 
public sealed class OnTuningBuyedDgt : MulticastDelegate // TypeDefIndex: 4213
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10013C8EC
	public virtual void Invoke(TuningGroups group_type, int item_type, int tuning_type); // 0x10013721C
	public virtual IAsyncResult BeginInvoke(TuningGroups group_type, int item_type, int tuning_type, AsyncCallback callback, object object); // 0x10013C914
	public virtual void EndInvoke(IAsyncResult result); // 0x10013C9F8
}

// Namespace: 
public class WebFormRequest : MonoBehaviour // TypeDefIndex: 4214
{
	// Fields
	public OnResponseDeligate OnResponse; // 0x18
	public OnErrorDeligate OnError; // 0x20
	public tk2dUIItem btn; // 0x28
	public string zendAction; // 0x30
	public List`1<Field> fields; // 0x38
	private string url; // 0x40
	private WWWForm form; // 0x48
	private List`1<WWW> downloads; // 0x50

	// Methods
	public void .ctor(); // 0x1001D4AA8
	public void Reset(); // 0x1001D4B30
	private void Awake(); // 0x1001D4CA8
	private void Start(); // 0x1001D4D10
	private void OnClick(); // 0x1001D4E00
	public void Send(); // 0x1001D4E04
	private void SetForm(); // 0x1001D4E58
	private void SetUrl(); // 0x1001D519C
	private IEnumerator WebRequest(); // 0x1001D524C
}

// Namespace: 
public class Field // TypeDefIndex: 4215
{
	// Fields
	public string name; // 0x10
	public string value; // 0x18

	// Methods
	public void .ctor(); // 0x1001D57A0
}

// Namespace: 
public sealed class OnResponseDeligate : MulticastDelegate // TypeDefIndex: 4216
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1001D5848
	public virtual void Invoke(JSONNode jnode); // 0x1001D56A4
	public virtual IAsyncResult BeginInvoke(JSONNode jnode, AsyncCallback callback, object object); // 0x1001D5858
	public virtual void EndInvoke(IAsyncResult result); // 0x1001D58A8
}

// Namespace: 
public sealed class OnErrorDeligate : MulticastDelegate // TypeDefIndex: 4217
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1001D57A8
	public virtual void Invoke(string message); // 0x1001D5608
	public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object); // 0x1001D57EC
	public virtual void EndInvoke(IAsyncResult result); // 0x1001D583C
}

// Namespace: 
private sealed class <WebRequest>c__Iterator72 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4218
{
	// Fields
	internal string <url_>__0; // 0x10
	internal WWWForm <form_>__1; // 0x18
	internal WWW <www>__2; // 0x20
	internal string <message>__3; // 0x28
	internal JSONNode <node>__4; // 0x30
	internal int $PC; // 0x38
	internal object $current; // 0x40
	internal WebFormRequest <>f__this; // 0x48

	// Methods
	public void .ctor(); // 0x1001D52B8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001D52C0
	private object System.Collections.IEnumerator.get_Current(); // 0x1001D52C8
	public bool MoveNext(); // 0x1001D52D0
	public void Dispose(); // 0x1001D5740
	public void Reset(); // 0x1001D574C
}

// Namespace: 
public class NicknameDialog : DialogBasic // TypeDefIndex: 4219
{
	// Fields
	public tk2dTextMesh header; // 0x98
	public tk2dUIItem button; // 0xA0
	public tk2dTextMesh buttonLabel; // 0xA8
	public tk2dUITextInput nameinput; // 0xB0
	public int defflag; // 0xB8
	public int maxNicknameLength; // 0xBC
	public tk2dTextMesh errormesh; // 0xC0
	public Vector3 focusPosition; // 0xC8
	private Vector3 startPosition; // 0xD4

	// Methods
	public void .ctor(); // 0x10007EAD4
	protected override void Update(); // 0x10007EB58
	public override void Start(); // 0x10007EC4C
	public void SetDefaultFlag(int f); // 0x10007EE28
	public void SetError(string textkey); // 0x10007EEA8
	public void OffError(); // 0x10007ED68
	public bool CheckEnteredName(); // 0x10007EF84
}

// Namespace: 
public class NicknameDialogControl : MonoBehaviour // TypeDefIndex: 4220
{
	// Fields
	public tk2dUIItem btn; // 0x18
	private NicknameDialog nicknameDialog; // 0x20
	public GameObject nicknamedialogprefab; // 0x28
	public tk2dSprite flagSprite; // 0x30
	public tk2dTextMesh nickMesh; // 0x38

	// Methods
	public void .ctor(); // 0x10007F078
	private void Start(); // 0x10007F080
	private void OnDestroy(); // 0x10007F490
	public void OnClick(); // 0x10007F708
	private IEnumerator WaitForInitDialog(); // 0x10007FAA0
	private void OnSaveNickname(); // 0x10007FB14
	public void OnSaveFlag(int flag); // 0x10007F80C
	public void SetupNickData(); // 0x10007F388
	private void Update(); // 0x10007FC70
	private void CreateNicknamegDialog(); // 0x10007F8C4
}

// Namespace: 
private sealed class <WaitForInitDialog>c__Iterator73 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4221
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal NicknameDialogControl <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10007FB0C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10007FC74
	private object System.Collections.IEnumerator.get_Current(); // 0x10007FC7C
	public bool MoveNext(); // 0x10007FC84
	public void Dispose(); // 0x10007FDE8
	public void Reset(); // 0x10007FDF4
}

// Namespace: 
public class NotificationSettingsScroll : TableView // TypeDefIndex: 4222
{
	// Fields
	public GameObject cell; // 0x38
	private int bitmask; // 0x40
	public static int SETTINGS_NOTIFY_LOCAL_1_3_7; // 0x0
	public static int SETTINGS_NOTIFY_LOCAL_ENERGY; // 0x4
	public static int SETTINGS_NOTIFY_LOCAL_DELIVERY; // 0x8
	public static int SETTINGS_NOTIFY_LOCAL_DAY; // 0xC
	public static int SETTINGS_NOTIFY_LOCAL_DAILYQUEST; // 0x10
	private Item[] cells; // 0x48

	// Methods
	public void .ctor(); // 0x100080538
	private static void .cctor(); // 0x100080B5C
	protected override void OnStart(); // 0x100080BC0
	protected override int OnCount(); // 0x100080BE0
	protected override float OnHeight(int i); // 0x100080BFC
	protected override GameObject OnCell(int i); // 0x100080C04
	private void OnEnable(); // 0x100080DF8
	private void OnDisable(); // 0x100081048
	private void UpdateRemote(); // 0x100080F14
}

// Namespace: 
private class Item // TypeDefIndex: 4223
{
	// Fields
	public string word; // 0x10
	public int bit; // 0x18

	// Methods
	public void .ctor(string word, int bit); // 0x100080B20
}

// Namespace: 
private sealed class <OnCell>c__AnonStoreyF8 // TypeDefIndex: 4224
{
	// Fields
	internal int i; // 0x10
	internal NotificationSettingsScroll <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x100080DF0
	internal void <>m__F7(bool obj); // 0x10008104C
}

// Namespace: 
public class AppleLocalNotifcations : ILocalNotification // TypeDefIndex: 4225
{
	// Methods
	public void .ctor(); // 0x10005F1F8
	public void ScheduleNotification(int id, string title, string message, int seconds); // 0x10005F200
	public void CancelAll(); // 0x10005F308
	public void DebugAll(); // 0x10005F388
}

// Namespace: 
public interface ILocalNotification // TypeDefIndex: 4226
{
	// Methods
	public abstract void ScheduleNotification(int id, string title, string message, int seconds); // 0
	public abstract void CancelAll(); // 0
}

// Namespace: 
public class NotificationsManager : MonoBehaviour // TypeDefIndex: 4227
{
	// Fields
	private const int MINUTE = 60; // 0x0
	private const int HOUR = 3600; // 0x0
	private const int DAY = 86400; // 0x0
	private const int WEEK = 604800; // 0x0
	private const int MONTH = 2592000; // 0x0
	private const string TITLE = "SYSTEM_PUSH_HEADER"; // 0x0
	public static int bitmask; // 0x0
	private ILocalNotification m_Notification; // 0x18
	private List`1<string> m_ComeBackMessages; // 0x20
	private List`1<int> m_Times; // 0x28
	private string m_Title; // 0x30
	private static NotificationsManager Current; // 0x8
	private int launch_count; // 0x38

	// Methods
	public void .ctor(); // 0x1000810DC
	private static void .cctor(); // 0x100081154
	private string get_Title(); // 0x100081158
	private void Awake(); // 0x100081224
	private void ScheduleNotifications(); // 0x1000816C8
	private void ScheduleComeBackNotifications(); // 0x100081A0C
	private void ScheduleDailyQuestNotifications(); // 0x100082BF8
	private void ScheduleDailyRewardsNotification(); // 0x100082E00
	private void ScheduleWeaponDeliveryNotifications(); // 0x10008238C
	private void ScheduleHelmetDeliveryNotifications(); // 0x100081DBC
	private void ScheduleStaminaNotification(); // 0x10008295C
	private void OnApplicationPause(bool pause); // 0x10008303C
	private void OnApplicationQuit(); // 0x100083158
}

// Namespace: 
public class StandAloneLocalNotification : ILocalNotification // TypeDefIndex: 4228
{
	// Methods
	public void .ctor(); // 0x10014BCAC
	public void ScheduleNotification(int id, string title, string message, int seconds); // 0x10014BCB4
	public void CancelAll(); // 0x10014BCB8
}

// Namespace: 
public class NotifyRow : MonoBehaviour // TypeDefIndex: 4229
{
	// Fields
	public CheckBox checkBox; // 0x18
	public LocalizationTextMesh text; // 0x20

	// Methods
	public void .ctor(); // 0x10008315C
	private void Start(); // 0x100083164
	private void Update(); // 0x100083168
}

// Namespace: 
public class OffPositionCameraAnchor : MonoBehaviour // TypeDefIndex: 4230
{
	// Fields
	public Vector2 offset; // 0x18

	// Methods
	public void .ctor(); // 0x10008316C
}

// Namespace: 
public class OneSignalPlugin : MonoBehaviour // TypeDefIndex: 4231
{
	// Fields
	public static OneSignalPlugin Current; // 0x0
	private static string extraMessage; // 0x8
	private static IdsAvailableCallback <>f__am$cache2; // 0x10

	// Methods
	public void .ctor(); // 0x100088560
	public void Awake(); // 0x100088568
	private void Start(); // 0x1000886C4
	private void OneSignal_subscriptionObserver(OSSubscriptionStateChanges stateChanges); // 0x100088910
	private void OneSignal_permissionObserver(OSPermissionStateChanges stateChanges); // 0x100088A54
	private static void HandleNotificationReceived(OSNotification notification); // 0x100088B3C
	public static void HandleNotificationOpened(OSNotificationOpenedResult result); // 0x100088D20
	public void OnLoginSuccess(ISFSObject responseData); // 0x100088F14
	private static void <OnLoginSuccess>m__F8(string userId, string pushToken); // 0x100088FCC
}

// Namespace: 
public class OptionsMenu : MonoBehaviour // TypeDefIndex: 4232
{
	// Fields
	public tk2dUIItem musicbutton; // 0x18
	public GameObject onoffmusic; // 0x20
	public tk2dUIItem soundsbutton; // 0x28
	public GameObject onoffsounds; // 0x30
	public tk2dUIItem creditsbutton; // 0x38
	public tk2dUIItem infobutton; // 0x40
	public tk2dUIItem reportbutton; // 0x48
	public tk2dUIItem restorebutton; // 0x50
	public tk2dUIItem fbbutton; // 0x58
	public tk2dUIItem resetbutton; // 0x60
	private tk2dUIItem m_ChangeNameButton; // 0x68
	private tk2dSprite flagSprite; // 0x70
	private tk2dTextMesh nickMesh; // 0x78
	public tk2dTextMesh currentServer; // 0x80
	public tk2dUIScrollbar musicBar; // 0x88
	public tk2dUIScrollbar soundBar; // 0x90
	public GameObject messageDialogPrefab; // 0x98
	private static Action`1<tk2dUIScrollbar> <>f__am$cache11; // 0x0
	private static Action`1<tk2dUIScrollbar> <>f__am$cache12; // 0x8

	// Methods
	public void .ctor(); // 0x10008C854
	private void Awake(); // 0x10008C85C
	private void Start(); // 0x10008C860
	private void OnRestoreClick(); // 0x10008CC14
	private void OnReportClick(); // 0x10008CE6C
	private void OnMusicToggle(); // 0x10008CEBC
	private void OnSoundToggle(); // 0x10008CFE4
	private MessageDialog CreateMessageDialog(string header, string message); // 0x10008CD14
	private void OpenEnterNickDialog(); // 0x10008D10C
	private void GotoBank(); // 0x10008D2BC
	private void SetupNickData(); // 0x10008D2E4
	private void Update(); // 0x10008D3EC
	private static void <Start>m__F9(tk2dUIScrollbar obj); // 0x10008D43C
	private static void <Start>m__FA(tk2dUIScrollbar obj); // 0x10008D4F4
}

// Namespace: 
private sealed class <OpenEnterNickDialog>c__AnonStoreyF9 // TypeDefIndex: 4233
{
	// Fields
	internal ChangeNicknameDialog nicknameDialog; // 0x10
	internal OptionsMenu <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x10008D2B4
	internal void <>m__FB(); // 0x10008D5AC
	internal void <>m__FC(); // 0x10008D7C8
}

// Namespace: 
public class OptionsRelocationButton : MonoBehaviour // TypeDefIndex: 4234
{
	// Methods
	public void .ctor(); // 0x10008D870
	private void Start(); // 0x10008D878
}

// Namespace: 
public class PairsList : TableView // TypeDefIndex: 4235
{
	// Fields
	private AllianceQualification aq; // 0x38
	public Action`1<ServerConnectionData> OnSelect; // 0x40

	// Methods
	public void .ctor(); // 0x10008D930
	protected override void OnStart(); // 0x10008D938
	public void SetAllianceQualification(AllianceQualification _aq); // 0x10008D93C
	private void OnEnable(); // 0x10008D954
	private void OnDisable(); // 0x10008DA84
	private void OnAllianceQualification(AllianceQualification _aq); // 0x10008D948
	protected override int OnCount(); // 0x10008DBB4
	protected override float OnHeight(int i); // 0x10008DBE0
	protected override GameObject OnCell(int i); // 0x10008DBE8
	private void OnSelectItem(object element); // 0x10008DCF8
}

// Namespace: 
public class ParticleSystemLifeTime : MonoBehaviour // TypeDefIndex: 4236
{
	// Fields
	private ParticleSystem m_System; // 0x18

	// Methods
	public void .ctor(); // 0x10008DDA8
	private void Awake(); // 0x10008DDB0
	private void OnTimer(); // 0x10008DEC0
}

// Namespace: 
public class MainMenuPlatoonBtnLock : MonoBehaviour // TypeDefIndex: 4237
{
	// Fields
	public MenuBottomLockBtn lockBtn; // 0x18
	private static Func`2<Weapon, bool> <>f__am$cache1; // 0x0
	private static Func`2<Weapon, int> <>f__am$cache2; // 0x8

	// Methods
	public void .ctor(); // 0x100297F98
	private void OnEnable(); // 0x100297FA0
	private static bool <OnEnable>m__FD(Weapon wp); // 0x100298358
	private static int <OnEnable>m__FE(Weapon wp); // 0x100298374
}

// Namespace: 
public class MenuPlatoon : MonoBehaviour // TypeDefIndex: 4238
{
	// Fields
	public Sections section; // 0x18
	public tk2dTextMesh PlayerCountTextMesh; // 0x20
	public tk2dTextMesh OnlineCountTextMesh; // 0x28
	public tk2dTextMesh SquadNameTextMesh; // 0x30
	public tk2dTextMesh SquadWeeklyPointsTextMesh; // 0x38
	public tk2dTextMesh SquadMembershipTextMesh; // 0x40
	public tk2dTextMesh SquadPointsTextMesh; // 0x48
	public tk2dTextMesh minScoreCup; // 0x50
	public GameObject acceptButton; // 0x58
	public GameObject createButton; // 0x60
	public GameObject searchButton; // 0x68
	private tk2dSlicedSprite m_squadJoinButtonBack; // 0x70
	public GameObject squadJoinButtonGlow; // 0x78
	public tk2dTextMesh squadJoinText; // 0x80
	public GameObject squadInfoButton; // 0x88
	public tk2dTextMesh createCost; // 0x90
	public GameObject loadinggo; // 0x98
	public GameObject contentgo; // 0xA0
	public GameObject InPlatoon; // 0xA8
	public GameObject OutPlatoon; // 0xB0
	public GameObject editBtn; // 0xB8
	public GameObject OutPlatoonControls; // 0xC0
	public GameObject OutPlatoonRequirements; // 0xC8
	public GameObject playerPrefab; // 0xD0
	public GameObject platoonPrefab; // 0xD8
	public GameObject requestPrefab; // 0xE0
	public GameObject sectionPrefab; // 0xE8
	public GameObject seperatorPrefab; // 0xF0
	public tk2dUIScrollableArea scroll; // 0xF8
	public LocalizationTextMesh title; // 0x100
	public GameObject footer; // 0x108
	public MenuTabsControl tabs; // 0x110
	public GameObject scrollContainer; // 0x118
	private int platoon_id; // 0x120
	private Platoon platoon; // 0x128
	private ChangePlatoonDialog nicknameDialog; // 0x130
	private static Func`2<Weapon, bool> <>f__am$cache24; // 0x0
	private static Func`2<Weapon, int> <>f__am$cache25; // 0x8
	private static Func`2<Weapon, bool> <>f__am$cache26; // 0x10
	private static Func`2<Weapon, int> <>f__am$cache27; // 0x18
	private static Func`2<Weapon, bool> <>f__am$cache28; // 0x20
	private static Func`2<Weapon, int> <>f__am$cache29; // 0x28
	private static Action`1<GameObject> <>f__am$cache2A; // 0x30
	private static Func`2<Weapon, bool> <>f__am$cache2B; // 0x38
	private static Func`2<Weapon, int> <>f__am$cache2C; // 0x40

	// Methods
	public void .ctor(); // 0x1002EF9E4
	public void Switch(int platoon_id); // 0x1002EF9EC
	private void Awake(); // 0x1002EF9F8
	private bool CanEdit(); // 0x1002EFBE0
	private bool CanCreate(); // 0x1002EFCDC
	private void UpdateUI(); // 0x1002EFD58
	private void Refresh(); // 0x1002F048C
	private void OnEnable(); // 0x1002F1EE8
	public void OnPlatoonInvites(int platoon_id); // 0x1002F095C
	public void OnPlatoonRequests(int platoon_id); // 0x1002F1748
	public void OnPlatoon(Platoon platoon); // 0x1002F06F8
	public void Reset(); // 0x1002F220C
	private void OnDisable(); // 0x1002F2D10
	private void OnGetPlatoonInfo(); // 0x1002F25BC
	private void Update(); // 0x1002F2FD0
	private void OnError(); // 0x1002F35F0
	private void OnSave(string currentSquadName, int status); // 0x1002F3718
	private void OnSaveChange(string currentSquadName, int status); // 0x1002F39DC
	private void OnPlatoonUpdate(Platoon platoon); // 0x1002F3C60
	private void OnError(string text, int code); // 0x1002F3EEC
	private void OnPlatoonCreate(Platoon platoon); // 0x1002F4248
	private void OnPlatoonChange(); // 0x1002F45BC
	private void OnPlatoonCreate(); // 0x1002F4774
	private void <Awake>m__FF(); // 0x1002F4C0C
	private void <Awake>m__100(); // 0x1002F4C10
	private void <Awake>m__101(int index); // 0x1002F4E60
	private static bool <UpdateUI>m__102(Weapon wp); // 0x1002F4E64
	private static int <UpdateUI>m__103(Weapon wp); // 0x1002F4E80
	private static bool <UpdateUI>m__104(Weapon wp); // 0x1002F4E98
	private static int <UpdateUI>m__105(Weapon wp); // 0x1002F4EB4
	private bool <Refresh>m__106(PlatoonRequest obj); // 0x1002F4ECC
	private static bool <OnPlatoonInvites>m__107(Weapon wp); // 0x1002F4EF0
	private static int <OnPlatoonInvites>m__108(Weapon wp); // 0x1002F4F0C
	private static void <Reset>m__10B(GameObject child); // 0x1002F4F24
	private void <OnPlatoonChange>m__10C(); // 0x1002F4F90
	private void <OnPlatoonChange>m__10D(); // 0x1002F5140
	private static bool <OnPlatoonCreate>m__10E(Weapon wp); // 0x1002F5214
	private static int <OnPlatoonCreate>m__10F(Weapon wp); // 0x1002F5230
}

// Namespace: 
private sealed class <OnPlatoonInvites>c__AnonStoreyFA // TypeDefIndex: 4239
{
	// Fields
	internal int platoon_type; // 0x10

	// Methods
	public void .ctor(); // 0x1002F2204
	internal bool <>m__109(PlatoonsInvites invite); // 0x1002F54B8
}

// Namespace: 
private sealed class <OnPlatoonRequests>c__AnonStoreyFB // TypeDefIndex: 4240
{
	// Fields
	internal int platoon_id; // 0x10

	// Methods
	public void .ctor(); // 0x1002F25B4
	internal bool <>m__10A(PlatoonRequest r); // 0x1002F54DC
}

// Namespace: 
private sealed class <OnPlatoonCreate>c__AnonStoreyFC // TypeDefIndex: 4241
{
	// Fields
	internal int amount; // 0x10
	internal MenuPlatoon <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1002F4C04
	internal void <>m__110(); // 0x1002F5248
	internal void <>m__111(); // 0x1002F53A4
}

// Namespace: 
public class MenuPlatoons : MonoBehaviour // TypeDefIndex: 4242
{
	// Fields
	public MenuTabsControl tabs; // 0x18
	public GameObject settingsBtn; // 0x20
	public tk2dUIItem[] buttons1; // 0x28
	public tk2dUIItem[] buttons2; // 0x30
	public GameObject externalHeader; // 0x38
	public static Sections currentSection; // 0x0
	public Section[] sections; // 0x40
	public static Sections section; // 0x4

	// Methods
	public void .ctor(); // 0x1002F5500
	private static void .cctor(); // 0x1002F5508
	private Sections TypeToSection(int type); // 0x1002F550C
	public static int SectionToType(Sections section); // 0x1002F0468
	private void OnDisable(); // 0x1002F552C
	private void OnEnable(); // 0x1002F55B4
	private void Start(); // 0x1002F5EB8
	private void OnTabSelect(int index); // 0x1002F607C
	private void OnMaskCover(int index); // 0x1002F6098
	public void ShowCurrentSection(); // 0x1002F58E0
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4243
{
	// Fields
	public int value__; // 0x10
	public const Sections platoon2х2 = 0; // 0x0
	public const Sections platoon3х3 = 1; // 0x0
	public const Sections platoon4х4 = 2; // 0x0
	public const Sections platoon5х5 = 3; // 0x0
	public const Sections platoon6х6 = 4; // 0x0
	public const Sections settings = 5; // 0x0
	public const Sections none = 6; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4244
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x1002F6160
}

// Namespace: 
public class Platoon : ISFSTranform // TypeDefIndex: 4245
{
	// Fields
	public int id; // 0x10
	public int type; // 0x14
	public string name; // 0x18
	public long created; // 0x20
	public int points; // 0x28
	public int battles; // 0x2C
	public int wins; // 0x30
	public long rankpoints; // 0x38
	public int total_points; // 0x40
	public int total_battles; // 0x44
	public int total_wins; // 0x48
	public long total_rankpoints; // 0x50
	public int cup; // 0x58
	public int p_registration; // 0x5C
	public int p_reg_user; // 0x60
	public string p_reg_user_name; // 0x68
	public int status; // 0x70
	public long min_score_cup; // 0x78
	public int p_place; // 0x80
	public PlatoonMember[] members; // 0x88
	public static int default_id; // 0x0

	// Methods
	public void .ctor(); // 0x10008DF60
	public void .ctor(ISFSObject response); // 0x10008DFD8
	private static void .cctor(); // 0x10008EBDC
	public void Setup(ISFSObject response); // 0x10008E068
	public PlatoonMember FindMember(int id); // 0x10008EBE0
	public int MaxMembers(); // 0x10008EC5C
	public string GetStatusText(); // 0x10008EC64
}

// Namespace: 
public class PlatoonBattle // TypeDefIndex: 4246
{
	// Fields
	public int type; // 0x10
	public int battle_winner; // 0x14
	public long server_time; // 0x18
	public bool battle_active; // 0x20
	public int battle_round; // 0x24
	public int prime_time; // 0x28
	public int round_start; // 0x2C
	public long round_start_ms; // 0x30
	public int max_rounds; // 0x38
	private Pair[] pairs; // 0x40
	public Room[] rooms; // 0x48

	// Methods
	public void .ctor(ISFSObject response); // 0x10008ECE4
	public Pair[] Pairs(); // 0x10008F448
	public Pair MyPair(); // 0x10008F450
}

// Namespace: 
private sealed class <MyPair>c__AnonStoreyFD // TypeDefIndex: 4247
{
	// Fields
	internal Platoon platoon; // 0x10

	// Methods
	public void .ctor(); // 0x10008F568
	internal bool <>m__112(Pair p); // 0x10008F570
}

// Namespace: 
public class PlatoonInfoMenu : InfoMenu // TypeDefIndex: 4248
{
	// Methods
	public void .ctor(); // 0x10008F5B4
	protected override void OnPrepareCell(CreditsElement newelement, int i); // 0x10008F5BC
}

// Namespace: 
public class PlatoonInviteButton : MonoBehaviour // TypeDefIndex: 4249
{
	// Methods
	public void .ctor(); // 0x100091428
	private void Start(); // 0x100091430
	private void Update(); // 0x100091434
}

// Namespace: 
public class PlatoonInviteShortMenu : MonoBehaviour // TypeDefIndex: 4250
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject squadsInvitePrefab; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	public tk2dSlicedSprite border; // 0x38
	private bool inprocess; // 0x40
	private long updateTime; // 0x48
	private static Action`1<GameObject> <>f__am$cache7; // 0x0

	// Methods
	public void .ctor(); // 0x100091438
	private void OnEnable(); // 0x100091440
	public void On(); // 0x100091988
	public void Reset(); // 0x1000915B0
	private void OnDisable(); // 0x100091A2C
	private void OnPlatoonInviteOk(); // 0x100091B90
	private IEnumerator GetItems(); // 0x1000919C0
	private void OnGetItems(); // 0x100091C60
	private void Update(); // 0x100092884
	private IEnumerator Refresh(); // 0x100092888
	private static void <Reset>m__113(GameObject child); // 0x1000928FC
}

// Namespace: 
private sealed class <GetItems>c__Iterator74 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4251
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal PlatoonInviteShortMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000923F4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100092968
	private object System.Collections.IEnumerator.get_Current(); // 0x100092970
	public bool MoveNext(); // 0x100092978
	public void Dispose(); // 0x100092A84
	public void Reset(); // 0x100092A90
}

// Namespace: 
private sealed class <Refresh>c__Iterator75 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4252
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal PlatoonInviteShortMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000928F4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100092AE4
	private object System.Collections.IEnumerator.get_Current(); // 0x100092AEC
	public bool MoveNext(); // 0x100092AF4
	public void Dispose(); // 0x100092C38
	public void Reset(); // 0x100092C44
}

// Namespace: 
public class PlatoonInviteShortRow : MonoBehaviour // TypeDefIndex: 4253
{
	// Fields
	private tk2dCamera guicamera; // 0x18
	public tk2dSlicedSprite border; // 0x20
	public GameObject[] element; // 0x28
	public float Multiplier; // 0x30
	public tk2dSprite Emblem; // 0x38
	public tk2dTextMesh Type; // 0x40
	public tk2dTextMesh Name; // 0x48
	public tk2dSprite userBadge; // 0x50
	public tk2dSprite userFlag; // 0x58
	public tk2dSprite userAvatar; // 0x60
	public tk2dTextMesh userName; // 0x68
	public tk2dUIItem ProfileButton; // 0x70
	public GameObject inviteButton; // 0x78
	public int platoon_id; // 0x80
	public int type; // 0x84
	public int user_id; // 0x88
	private static Func`2<Weapon, int> <>f__am$cache10; // 0x0
	private static Func`2<Weapon, int> <>f__am$cache11; // 0x8

	// Methods
	public void .ctor(); // 0x100092C98
	private void OnEnable(); // 0x100092CA0
	public void Init(); // 0x1000923FC
	private void Awake(); // 0x100092CA4
	private void OnInviteButton(); // 0x100092DE4
	private void OnProfileButton(); // 0x100093078
	private void OnDestroy(); // 0x100093290
	private static int <Init>m__114(Weapon wp); // 0x100093294
	private static int <OnInviteButton>m__115(Weapon wp); // 0x10009329C
}

// Namespace: 
public class PlatoonJoinButton : MonoBehaviour // TypeDefIndex: 4254
{
	// Fields
	private tk2dUIItem button; // 0x18
	public Platoon platoon; // 0x20
	private static Func`2<Weapon, bool> <>f__am$cache2; // 0x0
	private static Func`2<Weapon, int> <>f__am$cache3; // 0x8

	// Methods
	public void .ctor(); // 0x1000932A4
	private void Start(); // 0x1000932AC
	private void OnEnable(); // 0x100093354
	private void OnDisable(); // 0x1000934A4
	private void OnJoinPlatoon(Platoon platoon); // 0x1000935F4
	private void OnJoin(); // 0x1000936F4
	private static bool <OnJoin>m__116(Weapon wp); // 0x100093B58
	private static int <OnJoin>m__117(Weapon wp); // 0x100093B74
}

// Namespace: 
public class PlatoonMember : ISFSTranform // TypeDefIndex: 4255
{
	// Fields
	public int type; // 0x10
	public int user_id; // 0x14
	public int platoon_id; // 0x18
	public int status; // 0x1C
	public string name; // 0x20
	public int flag_id; // 0x28
	public int avatar_id; // 0x2C
	public long joined; // 0x30
	public long last_play; // 0x38
	public long rankpoints; // 0x40
	public int p_rankpoints; // 0x48
	public long p_total_rankpoints; // 0x50
	public int goose; // 0x58
	public bool is_online; // 0x5C

	// Methods
	public void .ctor(); // 0x100093B8C
	public void Setup(ISFSObject response); // 0x100093B94
}

// Namespace: 
public class PlatoonMenuTab : MonoBehaviour // TypeDefIndex: 4256
{
	// Fields
	public Sections section; // 0x18

	// Methods
	public void .ctor(); // 0x100094388
}

// Namespace: 
public class PlatoonModeSwitcher : MonoBehaviour // TypeDefIndex: 4257
{
	// Fields
	public LocalizationTextMesh text; // 0x18
	public GameObject platoons; // 0x20
	public GameObject search; // 0x28
	public LocalizationTextMesh title; // 0x30

	// Methods
	public void .ctor(); // 0x100094390
	private void Refresh(); // 0x100094398
	private void OnEnable(); // 0x1000944D0
	private void OnClick(); // 0x1000944D4
}

// Namespace: 
public class PlatoonPairsList : TableView // TypeDefIndex: 4258
{
	// Fields
	private PlatoonBattle aq; // 0x38
	public Action`1<ServerConnectionData> OnSelect; // 0x40

	// Methods
	public void .ctor(); // 0x10009454C
	protected override void OnStart(); // 0x100094554
	public void SetPlatoonBattle(PlatoonBattle _aq); // 0x100094558
	private void OnEnable(); // 0x100094570
	private void OnDisable(); // 0x1000946A0
	private void OnPlatoonBattle(PlatoonBattle _aq); // 0x100094564
	protected override int OnCount(); // 0x1000947D0
	protected override float OnHeight(int i); // 0x1000947FC
	protected override GameObject OnCell(int i); // 0x100094804
	private void OnSelectItem(object element); // 0x10009490C
}

// Namespace: 
public class PlatoonPlayerElement : MonoBehaviour // TypeDefIndex: 4259
{
	// Fields
	public int Number; // 0x18
	public PlayerStatus Status; // 0x1C
	public int FlagID; // 0x20
	private int AvatarID; // 0x24
	private int goose; // 0x28
	public string NickName; // 0x30
	public int WeeklyPoints; // 0x38
	public long Points; // 0x40
	public long AllTimePoints; // 0x48
	public GameObject Highlight; // 0x50
	public tk2dSprite IconFlag; // 0x58
	public tk2dSprite IconBadge; // 0x60
	public tk2dSprite IconAvatar; // 0x68
	public tk2dTextMesh NumberTextMesh; // 0x70
	public GameObject IsOnline; // 0x78
	public LocalizationTextMesh StatusTextMesh; // 0x80
	public tk2dTextMesh NameTextMesh; // 0x88
	public tk2dTextMesh WeeklyPointsTextMesh; // 0x90
	public tk2dTextMesh PointsTextMesh; // 0x98
	public tk2dUIItem MenuButton; // 0xA0
	public GameObject MenuLeave; // 0xA8
	public GameObject MenuPromoteDemote; // 0xB0
	public GameObject MenuPromoteDismiss; // 0xB8
	public GameObject MenuDemote; // 0xC0
	public GameObject MenuNew; // 0xC8
	public tk2dUIItem LeaveSquadButton; // 0xD0
	public tk2dUIItem DismissButton; // 0xD8
	public tk2dUIItem InviteButton; // 0xE0
	public tk2dUIItem RejectButton; // 0xE8
	public Button ProfileButton; // 0xF0
	public tk2dUIItem[] PromoteButtons; // 0xF8
	public tk2dUIItem[] DemoteButton; // 0x100
	public tk2dUIItem[] MenuCloseButtons; // 0x108
	public GameObject LoadingGO; // 0x110
	private Action OnYesCommander; // 0x118
	private Action OnNoCommander; // 0x120
	private int userID; // 0x128
	private GameObject currentMenu; // 0x130
	private bool currentPlayer; // 0x138
	private readonly Color newColor; // 0x13C
	private readonly Color newArrowColor; // 0x14C
	private readonly Color currentPlayerColor; // 0x15C
	private PlatoonMember member; // 0x170
	private static Action <>f__am$cache2B; // 0x0

	// Methods
	public void .ctor(); // 0x1000949BC
	private void Awake(); // 0x100094AB4
	private void OnDestroy(); // 0x100094E14
	public void Init(PlatoonMember member, int playerStatus, int number, int _WeeklyPoints); // 0x100095174
	private void UpdateVisuals(); // 0x100095358
	private void OnProfileButton(); // 0x1000956CC
	private void OnMenuButton(); // 0x10009587C
	private void OnMenuCloseButton(); // 0x1000958C0
	private void OnLeaveSquadButton(); // 0x100095904
	private void LeavePatoon(); // 0x100095BB8
	private void OnPromoteButton(); // 0x100095D6C
	private void SignalTriger(); // 0x100095EE4
	private void Promote(); // 0x100095EE8
	private void OnDemoteButton(); // 0x100095F84
	private void OnDismissButton(); // 0x100095FB8
	private void Dismiss(); // 0x100096130
	private void <OnLeaveSquadButton>m__118(); // 0x1000961CC
	private static void <LeavePatoon>m__119(); // 0x1000961D0
	private void <OnPromoteButton>m__11A(); // 0x1000962B8
	private void <OnDismissButton>m__11B(); // 0x1000962BC
}

// Namespace: 
public sealed class PlayerStatus : Enum // TypeDefIndex: 4260
{
	// Fields
	public int value__; // 0x10
	public const PlayerStatus STATUS_RECRUIT = 0; // 0x0
	public const PlayerStatus STATUS_MEMBER = 1; // 0x0
	public const PlayerStatus STATUS_OFFICER = 2; // 0x0
	public const PlayerStatus STATUS_VICE_COMMANDER = 3; // 0x0
	public const PlayerStatus STATUS_COMMANDER = 4; // 0x0
	public const PlayerStatus STATUS_NEW = 5; // 0x0

}

// Namespace: 
public class PlatoonQualifyingRoundMenu : MonoBehaviour // TypeDefIndex: 4261
{
	// Fields
	public int platoon_type; // 0x18
	public tk2dTextMesh territory_name; // 0x20
	public tk2dTextMesh qa_text; // 0x28
	public tk2dTextMesh timer; // 0x30
	public tk2dTextMesh teamBlue; // 0x38
	public tk2dTextMesh teamRed; // 0x40
	public tk2dTextMesh scoreBlue; // 0x48
	public tk2dTextMesh scoreRed; // 0x50
	public tk2dUIItem blueButton; // 0x58
	public tk2dUIItem redButton; // 0x60
	public tk2dSprite blueIcon; // 0x68
	public tk2dSprite redIcon; // 0x70
	private int blueID; // 0x78
	private int redID; // 0x7C
	public Transform WarNodesTransform; // 0x80
	public GameObject spiner; // 0x88
	public GameObject content; // 0x90
	public Transform pairsView; // 0x98
	public Transform PlayerModeView; // 0xA0
	public GameObject UserModeView; // 0xA8
	private Object warNode; // 0xB0
	private GameObject[] warNodes; // 0xB8
	private GameObject[] warConnections; // 0xC0
	private long last_update; // 0xC8
	private bool is_ticking; // 0xD0
	private Color color_red; // 0xD4
	private Color color_blue; // 0xE4
	public bool loadstarted; // 0xF4
	public MenuStamina menuStamina; // 0xF8
	private PlatoonBattle aq; // 0x100

	// Methods
	public void .ctor(); // 0x1000962C0
	private void Start(); // 0x100096358
	private void BlueSquad(); // 0x1000963B4
	private void RedSquad(); // 0x10009659C
	private void OnEnable(); // 0x100096784
	private void OnDisable(); // 0x100096B64
	private void SetNodeColor(LoadGameNodeButton warNodes_lgnb, Color color); // 0x100096D64
	private void OnPlatoonBattle(PlatoonBattle _aq); // 0x100096E24
	private IEnumerator Tick(); // 0x1000985A0
	private void UpdateNodes(); // 0x100097FBC
	public void OnNodeClick(int node_id); // 0x10009860C
	private void InputEnabled(bool inputEnabled); // 0x100096AB4
	private void OnAttackOk(string map); // 0x1000988C8
	private void OnError(string text, int code); // 0x100098B40
	private IEnumerator Load(string map); // 0x100098D5C
	private void <OnPlatoonBattle>m__11C(PlatoonPairsList obj); // 0x100098DD8
}

// Namespace: 
private sealed class <Tick>c__Iterator76 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4262
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal PlatoonQualifyingRoundMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100099008
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100099010
	private object System.Collections.IEnumerator.get_Current(); // 0x100099018
	public bool MoveNext(); // 0x100099020
	public void Dispose(); // 0x100099114
	public void Reset(); // 0x100099120
}

// Namespace: 
private sealed class <Load>c__Iterator77 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4263
{
	// Fields
	internal string map; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal string <$>map; // 0x28
	internal PlatoonQualifyingRoundMenu <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100098DFC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100098E04
	private object System.Collections.IEnumerator.get_Current(); // 0x100098E0C
	public bool MoveNext(); // 0x100098E14
	public void Dispose(); // 0x100098FA8
	public void Reset(); // 0x100098FB4
}

// Namespace: 
public class PlatoonRequest : ISFSTranform // TypeDefIndex: 4264
{
	// Fields
	public int platoon_id; // 0x10
	public int user_id; // 0x14
	public int type; // 0x18
	public long rankpoints; // 0x20
	public int flag_id; // 0x28
	public int avatar_id; // 0x2C
	public string name; // 0x30
	public bool is_merc; // 0x38
	public int merc_league; // 0x3C
	public int goose; // 0x40

	// Methods
	public void .ctor(ISFSObject o); // 0x100099174
	public void .ctor(int _user_id, int _id); // 0x100099778
	public void Setup(ISFSObject o); // 0x1000991A4
}

// Namespace: 
public class PlatoonRequestElement : MonoBehaviour // TypeDefIndex: 4265
{
	// Fields
	public int Number; // 0x18
	public int FlagID; // 0x1C
	private int AvatarID; // 0x20
	private int goose; // 0x24
	public string NickName; // 0x28
	public long WeeklyPoints; // 0x30
	public long Points; // 0x38
	public long AllTimePoints; // 0x40
	public GameObject Highlight; // 0x48
	public tk2dSprite IconFlag; // 0x50
	public tk2dSprite IconBadge; // 0x58
	public tk2dSprite IconAvatar; // 0x60
	public tk2dTextMesh NumberTextMesh; // 0x68
	public tk2dTextMesh NameTextMesh; // 0x70
	public tk2dTextMesh WeeklyPointsTextMesh; // 0x78
	public tk2dTextMesh PointsTextMesh; // 0x80
	public Button ProfileButton; // 0x88
	public GameObject LoadingGO; // 0x90
	public tk2dUIItem squadInviteButton; // 0x98
	public tk2dUIItem squadRejectButton; // 0xA0
	private Action OnYesCommander; // 0xA8
	private Action OnNoCommander; // 0xB0
	private int userID; // 0xB8
	private GameObject currentMenu; // 0xC0
	private bool currentPlayer; // 0xC8
	private int platoon_id; // 0xCC
	private readonly Color newColor; // 0xD0
	private readonly Color newArrowColor; // 0xE0
	private readonly Color currentPlayerColor; // 0xF0

	// Methods
	public void .ctor(); // 0x1000997B0
	private void Awake(); // 0x100099884
	private void OnDestroy(); // 0x100099A28
	public void Init(PlatoonRequest member, int playerStatus, int number); // 0x100099BCC
	private void UpdateVisuals(); // 0x100099E8C
	private void OnProfileButton(); // 0x10009A144
	private void OnInvite(); // 0x10009A2F4
	private void OnReject(); // 0x10009A358
}

// Namespace: 
public class PlatoonTournamentRegInfo : ISFSTranform // TypeDefIndex: 4266
{
	// Fields
	public int type; // 0x10
	public int registered_count; // 0x14
	public bool started; // 0x18
	public int winner; // 0x1C
	public string winner_name; // 0x20
	public int battle_winner; // 0x28

	// Methods
	public void .ctor(); // 0x10009D1A8
	public void Setup(ISFSObject o); // 0x10009D1B0
}

// Namespace: 
public class PlatoonType // TypeDefIndex: 4267
{
	// Fields
	public PlatoonsConditions conditions; // 0x10
	public IList`1<PlatoonsInvites> invites; // 0x18
	public IList`1<PlatoonsRewards> rewards; // 0x20
	public IList`1<PlatoonsTimes> times; // 0x28
	public int type; // 0x30
	public int days_owned; // 0x34
	public PlatoonTournamentRegInfo regInfo; // 0x38

	// Methods
	public void .ctor(); // 0x10009CDC0
	public int get_platoon_id(); // 0x10009D564
	public Platoon get_platoon(); // 0x10009D59C
	public string get_owner_platoon_name(); // 0x10009D630
	public int get_income(); // 0x10009D6AC
	public int get_prime_time(); // 0x10009D6E0
	public int get_registered_count(); // 0x10009DA8C
	public bool get_qualification_time(); // 0x10009DAA4
	public int get_prime_time_seconds(); // 0x10009DACC
	public int get_next_prime_time(); // 0x10009DB44
	public bool get_registred(); // 0x10009DC08
	public bool get_can_register(); // 0x10009DC48
	private int nearest_prime_time(); // 0x10009D6E4
}

// Namespace: 
public class PlatoonTournament // TypeDefIndex: 4268
{
	// Fields
	public static IList`1<PlatoonsConditions> conditions; // 0x0
	public static IList`1<PlatoonsInvites> invites; // 0x8
	public static IList`1<PlatoonsRewards> rewards; // 0x10
	public static IList`1<PlatoonsTimes> times; // 0x18
	public static Dictionary`2<int, PlatoonType> types; // 0x20
	private static Func`2<PlatoonType, int> <>f__am$cache5; // 0x28

	// Methods
	public void .ctor(); // 0x10009B980
	private static void .cctor(); // 0x10009B988
	public static List`1<PlatoonType> GetTypes(); // 0x10009B9FC
	public static PlatoonType GetType(int type); // 0x10009BB40
	public static bool HasInvite(int id); // 0x10009BBC4
	public static bool RemoveInvitesByType(int type); // 0x10009BDC0
	public static PlatoonsConditions GetPlatoonsConditions(int type); // 0x10009BEE8
	public static void Setup(ISFSObject o); // 0x10009BFDC
	public static void UpdateRegistrations(PlatoonTournamentRegInfo[] terr); // 0x10009CDC8
	private static int <GetTypes>m__11D(PlatoonType mode); // 0x10009D0B8
}

// Namespace: 
private sealed class <RemoveInvitesByType>c__AnonStoreyFE // TypeDefIndex: 4269
{
	// Fields
	internal int type; // 0x10

	// Methods
	public void .ctor(); // 0x10009BEE0
	internal bool <>m__11E(PlatoonsInvites i); // 0x10009D0F4
}

// Namespace: 
private sealed class <GetPlatoonsConditions>c__AnonStoreyFF // TypeDefIndex: 4270
{
	// Fields
	internal int type; // 0x10

	// Methods
	public void .ctor(); // 0x10009BFD4
	internal bool <>m__11F(PlatoonsConditions x); // 0x10009D0D0
}

// Namespace: 
private sealed class <Setup>c__AnonStorey100 // TypeDefIndex: 4271
{
	// Fields
	internal PlatoonsConditions c; // 0x10

	// Methods
	public void .ctor(); // 0x10009CDB8
	internal bool <>m__120(PlatoonsRewards x); // 0x10009D118
	internal bool <>m__121(PlatoonsInvites x); // 0x10009D148
	internal bool <>m__122(PlatoonsTimes x); // 0x10009D178
}

// Namespace: 
public class PlatoonsConditions : ISFSTranform // TypeDefIndex: 4272
{
	// Fields
	public int type; // 0x10
	public int[] weapon_required; // 0x18
	public int cup_required; // 0x20
	public long rankpoints_required; // 0x28
	public int cost; // 0x30
	public int cost_battle; // 0x34

	// Methods
	public void .ctor(); // 0x10009A3BC
	public void Setup(ISFSObject o); // 0x10009A3C4
	public bool IsRequirementsMet(long current_rankpoints, int[] owned_weapons, int[] cups); // 0x10009A778
	private bool IsWeaponRequirementsMet(int[] owned_weapons); // 0x10009A7DC
	private bool IsCupRequirementsMet(int[] cups); // 0x10009A8DC
	private bool IsRankpointsRequirementsMet(long current_rankpoints); // 0x10009A8C0
	public bool Dialog(string sub_header, long current_rankpoints, int[] owned_weapons, int[] cups); // 0x10009A940
	public void Content(HelpDialogContent dialog, string sub_header, long current_rankpoints, int[] owned_weapons, int[] cups); // 0x10009AB70
}

// Namespace: 
private sealed class <IsWeaponRequirementsMet>c__AnonStorey101 // TypeDefIndex: 4273
{
	// Fields
	internal int[] owned_weapons; // 0x10

	// Methods
	public void .ctor(); // 0x10009A938
	internal bool <>m__123(int w); // 0x10009ACE0
}

// Namespace: 
private sealed class <IsWeaponRequirementsMet>c__AnonStorey102 // TypeDefIndex: 4274
{
	// Fields
	internal int w; // 0x10
	internal <IsWeaponRequirementsMet>c__AnonStorey101 <>f__ref$257; // 0x18

	// Methods
	public void .ctor(); // 0x10009ADAC
	internal bool <>m__124(int wp); // 0x10009ADB4
}

// Namespace: 
public class PlatoonsInvites : ISFSTranform // TypeDefIndex: 4275
{
	// Fields
	public int type; // 0x10
	public int recruit_id; // 0x14
	public int user_id; // 0x18
	public int platoon_id; // 0x1C
	public long rankpoints; // 0x20
	public int flag_id; // 0x28
	public int avatar_id; // 0x2C
	public string name; // 0x30
	public string platoon_name; // 0x38
	public long invite_time; // 0x40
	public int emblem_id; // 0x48
	public int goose; // 0x4C

	// Methods
	public void .ctor(); // 0x10009ADC4
	public void Setup(ISFSObject o); // 0x10009ADCC
}

// Namespace: 
public class PlatoonsRewards : ISFSTranform // TypeDefIndex: 4276
{
	// Fields
	public int league; // 0x10
	public int place; // 0x14
	public int reward; // 0x18
	public int type; // 0x1C

	// Methods
	public void .ctor(); // 0x10009B4B0
	public void Setup(ISFSObject o); // 0x10009B4B8
}

// Namespace: 
public class PlatoonsTimes : ISFSTranform // TypeDefIndex: 4277
{
	// Fields
	public int id; // 0x10
	public int type; // 0x14
	public int time; // 0x18

	// Methods
	public void .ctor(); // 0x10009B75C
	public void Setup(ISFSObject o); // 0x10009B764
}

// Namespace: 
public class PlayerAreaMarker : MonoBehaviour // TypeDefIndex: 4278
{
	// Fields
	public LimitAngles limitAngles; // 0x18
	public Camera mainCamera; // 0x20
	public tk2dCamera guicamera; // 0x28
	public GameObject directionMarkerPrefab; // 0x30
	private float velo; // 0x38
	private List`1<GameObject> markers; // 0x40
	private int count; // 0x48
	private bool visible; // 0x4C

	// Methods
	public void .ctor(); // 0x10009DCE4
	public void OnDisable(); // 0x10009DD54
	private void UpdateMarker(GameObject marker, Vector3 target); // 0x10009DF08
	private Vector2 WorldToScreenPointProjected(Camera camera, Vector3 worldPos); // 0x10009E048
	private void Start(); // 0x10009E260
	public void Visible(bool value); // 0x10009E4D0
	private void LateUpdate(); // 0x10009E608
	public void UpdateAreaMarkerMesh(int count); // 0x10009E940
}

// Namespace: 
public class PlayerPrefsKeys // TypeDefIndex: 4279
{
	// Fields
	public static string LAST_VERSION; // 0x0
	public static string FIRST_LAUNCH; // 0x8
	public static string AGREEMENT; // 0x10
	public static string SHOWN_MESSAGES; // 0x18
	public static string LOCAL_NOTIFICATION_MASK; // 0x20
	public static string LOCAL_NOTIFICATION_1_3_7_ONLYONE; // 0x28

	// Methods
	public void .ctor(); // 0x10009F7E4
	private static void .cctor(); // 0x10009F7EC
}

// Namespace: 
public class Prepare : MonoBehaviour // TypeDefIndex: 4280
{
	// Fields
	public float waittime; // 0x18

	// Methods
	public void .ctor(); // 0x1000A6400
	private void Start(); // 0x1000A6410
	private IEnumerator LoadLevel(); // 0x1000A643C
}

// Namespace: 
private sealed class <LoadLevel>c__Iterator78 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4281
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal Prepare <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000A64A8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000A64B0
	private object System.Collections.IEnumerator.get_Current(); // 0x1000A64B8
	public bool MoveNext(); // 0x1000A64C0
	public void Dispose(); // 0x1000A6594
	public void Reset(); // 0x1000A65A0
}

// Namespace: 
public class PreviewMenuButtom : MonoBehaviour // TypeDefIndex: 4282
{
	// Fields
	public GameObject drones; // 0x18
	public GameObject main; // 0x20
	private Items item; // 0x28

	// Methods
	public void .ctor(); // 0x1000A65F4
	private void OnEnable(); // 0x1000A65FC
	private void Apply(); // 0x1000A6600
	private void Update(); // 0x1000A66C4
}

// Namespace: 
public class PreviewMenuDroneLinks : MonoBehaviour // TypeDefIndex: 4283
{
	// Fields
	public LoadingBundle helmetsLoading; // 0x18
	public MenuDronesLoaded helmetsLoaded; // 0x20
	public tk2dTextMesh loadinglabel; // 0x28
	public tk2dSprite cup; // 0x30
	public tk2dUIProgressBar loadingbar; // 0x38
	private tk2dTextMesh description; // 0x40

	// Methods
	public void .ctor(); // 0x1000A674C
	public void UpdateDesc(string desc); // 0x1000A6754
}

// Namespace: 
public class PreviewMenuElements : MonoBehaviour // TypeDefIndex: 4284
{
	// Fields
	private const float DELIVEY_CHECK_DELAY = 1; // 0x0
	public BottomScroll bottomNavigator; // 0x18
	public OnSwitchDgt OnSwitch; // 0x20
	public OnSwitchDgt OnSwitchInstant; // 0x28
	public float switchSpeed; // 0x30
	public GameObject helmet; // 0x38
	public GameObject weapon; // 0x40
	public GameObject drone; // 0x48
	public PreviewMenuSwitch switchBtns; // 0x50
	public PreviewMenuWeaponLinks pmwl; // 0x58
	public PreviewMenuHelmetLinks pmhl; // 0x60
	public PreviewMenuDroneLinks pmdl; // 0x68
	public MenuPreview3dObjects control3Dobjects; // 0x70
	public LoadingBundle loadingweaponbundle; // 0x78
	public LoadingBundle loadingweaponcamobundle; // 0x80
	public LoadingBundle loadinghelmetbundle; // 0x88
	public LoadingBundle loadingdronebundle; // 0x90
	private States m_State; // 0x98
	private List`1<GameObject> elements; // 0xA0
	private float offset; // 0xA8
	private int pose; // 0xAC
	private float stepOffset; // 0xB0
	private tk2dCamera guicamera; // 0xB8
	private Vector2 blockSize; // 0xC0
	private float btwoffset; // 0xC8
	private float oldoffset; // 0xCC
	private Vector3 oldLocalPos; // 0xD0
	private bool elementCorrected; // 0xDC
	private float[] velo; // 0xE0
	private Vector2 headerDisablePos; // 0xE8
	private GameObject container; // 0xF0
	private bool isFirstInit; // 0xF8
	private bool isFirstChange; // 0xF9
	private static Action <>f__am$cache20; // 0x0

	// Methods
	public void .ctor(); // 0x1000A6770
	private States get_state(); // 0x1000A67EC
	private void set_state(States value); // 0x1000A67F4
	private void OnDisable(); // 0x1000A6B94
	private void OnEnable(); // 0x1000A6F98
	private void OnStartCamoDownload(); // 0x1000A7B8C
	private void OnDownloadedCamo(List`1<Texture2D> objects); // 0x1000A7BE0
	private void SetupWeaponCamo(GameObject weapon); // 0x1000A8024
	private void OnDownloadError(); // 0x1000A866C
	public void OnLoadedWeapon(int weaponType, GameObject weapon); // 0x1000A8698
	public void OnLoadedHelmet(int helmetType, GameObject helmet); // 0x1000A883C
	public void OnLoadedDrone(int helmetType, GameObject helmet); // 0x1000A89C8
	private void SetHelmetToScreen(Helmet helmet); // 0x1000A8AAC
	private void OnChangeFocus(GameObject focusedobj); // 0x1000A761C
	private void OnBottomItemSelect(Transform t); // 0x1000A8AB0
	private void Start(); // 0x1000A8C04
	private void SetBlockFillPosition(Transform obj); // 0x1000AA6D0
	private void SetBlockFSBtnPosition(Transform obj); // 0x1000AA2B0
	private void SetBlockBordersPosition(Transform obj); // 0x1000AA0F4
	private void Update(); // 0x1000AA97C
	private void MoveElements(); // 0x1000AAEB4
	private bool CheckDestination(); // 0x1000ABBD4
	public void Move(bool direction); // 0x1000A730C
	public List`1<GameObject> GetElements(); // 0x1000ABFB0
	private void UpdateDescriptions(); // 0x1000A680C
	private static void <OnEnable>m__125(); // 0x1000AC094
}

// Namespace: 
private sealed class States : Enum // TypeDefIndex: 4285
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States moveLeft = 1; // 0x0
	public const States movingLeft = 2; // 0x0
	public const States moveRight = 3; // 0x0
	public const States movingRight = 4; // 0x0

}

// Namespace: 
public sealed class OnSwitchDgt : MulticastDelegate // TypeDefIndex: 4286
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000AC0BC
	public virtual void Invoke(GameObject obj); // 0x1000A7AF0
	public virtual IAsyncResult BeginInvoke(GameObject obj, AsyncCallback callback, object object); // 0x1000AC0CC
	public virtual void EndInvoke(IAsyncResult result); // 0x1000AC11C
}

// Namespace: 
public class PreviewMenuFill : MonoBehaviour // TypeDefIndex: 4287
{
	// Methods
	public void .ctor(); // 0x1000AC128
	private void Start(); // 0x1000AC130
	private void Update(); // 0x1000AC134
}

// Namespace: 
public class PreviewMenuFullscreen : MonoBehaviour // TypeDefIndex: 4288
{
	// Fields
	public Transform topMenuControl; // 0x18
	public Transform bottomMenuControl; // 0x20
	public GameObject header; // 0x28
	private GameObject m_Description; // 0x30
	public List`1<GameObject> offObjects; // 0x38
	public tk2dSlicedSprite elementBorder; // 0x40
	public float fadeTime; // 0x48
	public float fullScreenTime; // 0x4C
	public Transform element3D; // 0x50
	public Vector3 element3Dscale; // 0x58
	public Menu3DElementInputRotate inputRotate; // 0x68
	public States state; // 0x70
	private tk2dSlicedSprite border; // 0x78
	private tk2dSprite icon; // 0x80
	private tk2dUIItem button; // 0x88
	private float[] velo; // 0x90
	public Color borderColor; // 0x98
	private bool allowPlay; // 0xA8
	private tk2dCamera guicamera; // 0xB0
	private Vector3 startPos; // 0xB8
	private Color startElementBorderColor; // 0xC4
	private Vector3 colliderElementBorderSize; // 0xD4
	private TransformData bottomMenuControl_; // 0xE0

	// Methods
	public void .ctor(); // 0x1000AC138
	private void Awake(); // 0x1000AC1AC
	private void OnFullscreen(); // 0x1000AC670
	private void Update(); // 0x1000ACE54
	public void On(); // 0x1000ABD20
	public void Off(); // 0x1000AA7D4
	private IEnumerator Showing(); // 0x1000AE168
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4289
{
	// Fields
	public int value__; // 0x10
	public const States normal = 0; // 0x0
	public const States toFullScreen = 1; // 0x0
	public const States fullscreen = 2; // 0x0
	public const States toNormal = 3; // 0x0

}

// Namespace: 
private sealed class <Showing>c__Iterator79 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4290
{
	// Fields
	internal float <f>__0; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal PreviewMenuFullscreen <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000AE1D4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000AE1DC
	private object System.Collections.IEnumerator.get_Current(); // 0x1000AE1E4
	public bool MoveNext(); // 0x1000AE1EC
	public void Dispose(); // 0x1000AE51C
	public void Reset(); // 0x1000AE528
}

// Namespace: 
public class PreviewMenuHeader : MonoBehaviour // TypeDefIndex: 4291
{
	// Methods
	public void .ctor(); // 0x1000AE57C
}

// Namespace: 
public class PreviewMenuHelmetLinks : MonoBehaviour // TypeDefIndex: 4292
{
	// Fields
	public LoadingBundle helmetsLoading; // 0x18
	public MenuHelmetsLoaded helmetsLoaded; // 0x20
	public tk2dTextMesh loadinglabel; // 0x28
	public tk2dUIProgressBar loadingbar; // 0x30
	private tk2dTextMesh m_HelmetDescription; // 0x38

	// Methods
	public void .ctor(); // 0x1000AE584
	public void UpdateDesc(string desc); // 0x1000ABFB8
}

// Namespace: 
public class PreviewMenuSwitch : MonoBehaviour // TypeDefIndex: 4293
{
	// Fields
	public tk2dUIItem leftBtn; // 0x18
	public tk2dUIItem rightBtn; // 0x20
	public float fadeTime; // 0x28
	private PreviewMenuElements previewMenuElements; // 0x30
	private tk2dSprite leftSprite; // 0x38
	private tk2dSprite rightSprite; // 0x40
	private Vector3[] startPositions; // 0x48
	private float[] velo; // 0x50
	private Vector3[] veloV3; // 0x58
	private List`1<GameObject> elements; // 0x60
	private bool allowPlay; // 0x68
	private bool Init; // 0x69

	// Methods
	public void .ctor(); // 0x1000AE58C
	private void Start(); // 0x1000AE648
	private void OnLeftBtnDown(); // 0x1000AE804
	private void OnLeftBtnUp(); // 0x1000AE934
	private void OnRightBtnDown(); // 0x1000AE9C8
	private void OnRightBtnUp(); // 0x1000AEAF8
	private void SetBtnsInvisible(); // 0x1000AEB8C
	public void Off(); // 0x1000ABDF0
	public void On(); // 0x1000ABC70
	private IEnumerator Showing(); // 0x1000AEC9C
}

// Namespace: 
private sealed class <Showing>c__Iterator7A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4294
{
	// Fields
	internal Vector3 <offset>__0; // 0x10
	internal float <f>__1; // 0x1C
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal PreviewMenuSwitch <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000AED08
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000AED10
	private object System.Collections.IEnumerator.get_Current(); // 0x1000AED18
	public bool MoveNext(); // 0x1000AED20
	public void Dispose(); // 0x1000AF2CC
	public void Reset(); // 0x1000AF2D8
}

// Namespace: 
public class PreviewMenuWeaponLinks : MonoBehaviour // TypeDefIndex: 4295
{
	// Fields
	public LoadingBundle weaponsLoading; // 0x18
	public MenuWeaponLights lights; // 0x20
	public MenuPreviewWeaponPosCorrection posCorrection; // 0x28
	public MenuPreviewWeaponSizeCorrection posScale; // 0x30
	public MenuWeaponLoaded weaponLoaded; // 0x38
	public tk2dTextMesh loadinglabel; // 0x40
	public tk2dUIProgressBar loadingbar; // 0x48
	public GameObject camoblock; // 0x50
	public GameObject modelblock; // 0x58
	private tk2dTextMesh m_WeaponDescription; // 0x60

	// Methods
	public void .ctor(); // 0x1000AF32C
	public void UpdateDesc(string desc, string rankpointsBonus); // 0x1000ABFD4
}

// Namespace: 
public class ProfileBattleMenu : MonoBehaviour // TypeDefIndex: 4296
{
	// Fields
	public GameObject loadinggo; // 0x18
	public Transform spiner; // 0x20
	public GameObject contentgo; // 0x28
	public GameObject battleprefab; // 0x30
	public tk2dUIScrollableArea scroll; // 0x38
	public tk2dSlicedSprite border; // 0x40
	public GameObject baseBattleElement; // 0x48
	private bool inprocess; // 0x50
	private long updateTime; // 0x58
	private static Action`1<GameObject> <>f__am$cache9; // 0x0

	// Methods
	public void .ctor(); // 0x1000AF334
	private void OnEnable(); // 0x1000AF33C
	public void On(); // 0x1000AF754
	public void Reset(); // 0x1000AF37C
	private void OnDisable(); // 0x1000AF7F8
	private IEnumerator GetItems(); // 0x1000AF78C
	private void OnGetItems(); // 0x1000AF85C
	private void Update(); // 0x1000AFE70
	private IEnumerator Refresh(); // 0x1000AFEE4
	private static void <Reset>m__126(GameObject child); // 0x1000AFF58
}

// Namespace: 
private sealed class <GetItems>c__Iterator7B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4297
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileBattleMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000AF854
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000AFFC4
	private object System.Collections.IEnumerator.get_Current(); // 0x1000AFFCC
	public bool MoveNext(); // 0x1000AFFD4
	public void Dispose(); // 0x1000B00E0
	public void Reset(); // 0x1000B00EC
}

// Namespace: 
private sealed class <Refresh>c__Iterator7C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4298
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileBattleMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000AFF50
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000B0140
	private object System.Collections.IEnumerator.get_Current(); // 0x1000B0148
	public bool MoveNext(); // 0x1000B0150
	public void Dispose(); // 0x1000B0294
	public void Reset(); // 0x1000B02A0
}

// Namespace: 
public class ProfileContractMenu : MonoBehaviour // TypeDefIndex: 4299
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject profileContractPrefab; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	public tk2dSlicedSprite border; // 0x38
	public GameObject baseSquadsInviteElement; // 0x40
	public tk2dTextMesh contracts_completed; // 0x48
	private bool inprocess; // 0x50
	private long updateTime; // 0x58
	private NumberFormatInfo numberFormatInfo; // 0x60
	private static Action`1<GameObject> <>f__am$cacheA; // 0x0

	// Methods
	public void .ctor(); // 0x1000B02F4
	private void OnEnable(); // 0x1000B02FC
	public void On(); // 0x1000B0924
	public void Reset(); // 0x1000B054C
	private void OnDisable(); // 0x1000B09C8
	private IEnumerator GetItems(); // 0x1000B095C
	private void OnGetItems(); // 0x1000B0A2C
	private IEnumerator Refresh(); // 0x1000B129C
	private static void <Reset>m__127(GameObject child); // 0x1000B1310
}

// Namespace: 
private sealed class <GetItems>c__Iterator7D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4300
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileContractMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000B0A24
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000B137C
	private object System.Collections.IEnumerator.get_Current(); // 0x1000B1384
	public bool MoveNext(); // 0x1000B138C
	public void Dispose(); // 0x1000B1498
	public void Reset(); // 0x1000B14A4
}

// Namespace: 
private sealed class <Refresh>c__Iterator7E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4301
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileContractMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000B1308
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000B14F8
	private object System.Collections.IEnumerator.get_Current(); // 0x1000B1500
	public bool MoveNext(); // 0x1000B1508
	public void Dispose(); // 0x1000B164C
	public void Reset(); // 0x1000B1658
}

// Namespace: 
public class ProfileContractRow : MonoBehaviour // TypeDefIndex: 4302
{
	// Fields
	public float Multiplier; // 0x18
	public tk2dTextMesh date; // 0x20
	public tk2dSprite userBadge; // 0x28
	public tk2dSprite userFlag; // 0x30
	public tk2dSprite userAvatar; // 0x38
	public tk2dTextMesh userName; // 0x40
	public tk2dTextMesh type; // 0x48
	public tk2dTextMesh rankpoints; // 0x50
	public GameObject pointsGO; // 0x58
	public int user_id; // 0x60
	public Button ProfileButton; // 0x68
	private tk2dCamera guicamera; // 0x70
	private float borderX; // 0x78

	// Methods
	public void .ctor(); // 0x1000B16AC
	private void OnEnable(); // 0x1000B16C0
	private void OnProfileButton(); // 0x1000B16C4
	private void Awake(); // 0x1000B1874
	private void OnDestroy(); // 0x1000B19CC
}

// Namespace: 
public class ProfileCup : MonoBehaviour // TypeDefIndex: 4303
{
	// Fields
	public tk2dTextMesh value; // 0x18
	public LocalizationTextMesh text; // 0x20
	public tk2dBaseSprite icon; // 0x28

	// Methods
	public void .ctor(); // 0x1000B1B24
}

// Namespace: 
public class ProfileEquipmentElement : MonoBehaviour // TypeDefIndex: 4304
{
	// Fields
	public tk2dTextMesh textMesh1; // 0x18
	public tk2dTextMesh textMesh2; // 0x20
	public Weapon weapon; // 0x28
	public Helmet helmet; // 0x60
	public ProfileEquipmentsMenu profileEquipmentsMenu; // 0x88
	public BoxCollider boxColl; // 0x90
	public Button button; // 0x98

	// Methods
	public void .ctor(); // 0x1000B1B2C
	public void Init(Weapon customWeapon, Helmet customHelmet, ProfileEquipmentsMenu profEquip); // 0x1000B1B34
	private void ButtonClick(); // 0x1000B1E50
	private void OnDisable(); // 0x1000B2084
}

// Namespace: 
public class ProfileEquipmentsMenu : MonoBehaviour // TypeDefIndex: 4305
{
	// Fields
	private const int MODULE = 5; // 0x0
	private Weapon weapon; // 0x18
	private Helmet helmet; // 0x50
	public MenuPreview3dObjects control3Dobjects; // 0x78
	public Equipment activeEquipment; // 0x80
	public tk2dTextMesh elementName; // 0x88
	public tk2dTextMesh elementStats; // 0x90
	public GameObject elementEquiped; // 0x98
	public LoadingBundle loadingbundle; // 0xA0
	public LoadingBundle loadingweaponcamobundle; // 0xA8
	public MenuWeaponLoaded menuWeaponLoaded; // 0xB0
	public MenuHelmetsLoaded menuHelmetLoaded; // 0xB8
	public GameObject camoblock; // 0xC0
	public GameObject modelblock; // 0xC8
	public GameObject loader; // 0xD0
	public Transform model; // 0xD8
	public Camera cam; // 0xE0
	public GameObject equipGO; // 0xE8
	public GameObject ownedGO; // 0xF0
	public tk2dUIItem button; // 0xF8
	public GameObject loadinggo; // 0x100
	public GameObject contentgo; // 0x108
	public GameObject textprefab; // 0x110
	public tk2dUIScrollableArea scroll; // 0x118
	private bool inprocess; // 0x120
	private long updateTime; // 0x128
	public tk2dTextMesh ownedText; // 0x130
	public tk2dTextMesh buttonText; // 0x138
	private NumberFormatInfo numberFormatInfo; // 0x140
	private static Action`1<GameObject> <>f__am$cache1C; // 0x0

	// Methods
	public void .ctor(); // 0x1000B21A0
	private void OnEnable(); // 0x1000B21A8
	private void OnStartCamoDownload(); // 0x1000B2550
	private void OnDownloadedCamo(List`1<Texture2D> objects); // 0x1000B2594
	private void OnDownloadedWeapon(List`1<GameObject> gameobjects); // 0x1000B2CA4
	private void OnPlayerProfileReceived(); // 0x1000B2DA4
	public void CustomInit(Weapon customWeapon, Helmet customHelmet); // 0x1000B1FF8
	public void Init(); // 0x1000B2338
	private void OnDisable(); // 0x1000B4C94
	public Weapon GetActiveWeapon(); // 0x1000B33F4
	public Helmet GetActiveHelmet(); // 0x1000B4070
	public string GetLocalizedNameHelmet(Helmet w); // 0x1000B5304
	public string GetLocalizedNameWeapon(Weapon w); // 0x1000B569C
	public void WeaponLoader(); // 0x1000B36E4
	public void HelmetLoader(); // 0x1000B4384
	private void OnDownloadedHelmet(List`1<GameObject> objects); // 0x1000B59B8
	private void SetupWeaponCamo(GameObject weap); // 0x1000B2688
	private void MainEquip(); // 0x1000B5BE8
	private void ButtonEquip(); // 0x1000B494C
	private void ButtonOwned(); // 0x1000B5D3C
	public void On(); // 0x1000B62DC
	public void Reset(); // 0x1000B5F04
	private IEnumerator GetItems(); // 0x1000B6314
	private void OnGetItems(); // 0x1000B6388
	private IEnumerator Refresh(); // 0x1000B7428
	private static void <Reset>m__128(GameObject child); // 0x1000B749C
}

// Namespace: 
public sealed class Equipment : Enum // TypeDefIndex: 4306
{
	// Fields
	public int value__; // 0x10
	public const Equipment Weapon = 0; // 0x0
	public const Equipment Helmet = 1; // 0x0

}

// Namespace: 
private sealed class <GetItems>c__Iterator7F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4307
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileEquipmentsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000B6380
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000B7508
	private object System.Collections.IEnumerator.get_Current(); // 0x1000B7510
	public bool MoveNext(); // 0x1000B7518
	public void Dispose(); // 0x1000B7624
	public void Reset(); // 0x1000B7630
}

// Namespace: 
private sealed class <Refresh>c__Iterator80 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4308
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileEquipmentsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000B7494
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000B7684
	private object System.Collections.IEnumerator.get_Current(); // 0x1000B768C
	public bool MoveNext(); // 0x1000B7694
	public void Dispose(); // 0x1000B77D8
	public void Reset(); // 0x1000B77E4
}

// Namespace: 
public class ProfileMenuBase : MonoBehaviour // TypeDefIndex: 4309
{
	// Fields
	public GameObject cartButton; // 0x18
	public MenuTabsControl tabs; // 0x20
	public ProfileMenuElement profileMenuElement; // 0x28
	public Sections currentSection; // 0x30
	public Section[] sections; // 0x38
	public GameObject squadInviteBtn; // 0x40
	public tk2dUIItem[] buttons1; // 0x48
	public tk2dUIItem[] buttons2; // 0x50

	// Methods
	public void .ctor(); // 0x1000B7838
	private void OnEnable(); // 0x1000B7848
	private void OnBackButton(); // 0x1000B7B4C
	private void OnDisable(); // 0x1000B7B50
	private void Start(); // 0x1000B7C80
	private void OnTabSelect(int index); // 0x1000B7E44
	private void ShowSection(Sections section); // 0x1000B7E60
	private void OnMaskCover(int index); // 0x1000B7E7C
	public void ShowCurrentSection(); // 0x1000B7E84
	public void HideAllSections(); // 0x1000B8004
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4310
{
	// Fields
	public int value__; // 0x10
	public const Sections rifles = 0; // 0x0
	public const Sections helmets = 1; // 0x0
	public const Sections statistics = 2; // 0x0
	public const Sections battles = 3; // 0x0
	public const Sections socials = 4; // 0x0
	public const Sections squadInvite = 5; // 0x0
	public const Sections def = 6; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4311
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x1000B808C
}

// Namespace: 
public class ProfileMenuElement : MonoBehaviour // TypeDefIndex: 4312
{
	// Fields
	public GameObject loadinggo; // 0x18
	public Transform spiner; // 0x20
	public GameObject contentgo; // 0x28
	public static long player; // 0x0
	public tk2dSprite avatarIcon; // 0x30
	public tk2dSprite flagIcon; // 0x38
	public tk2dSprite rankIcon; // 0x40
	public tk2dTextMesh name; // 0x48
	public tk2dTextMesh rankName; // 0x50
	public tk2dTextMesh rankValue; // 0x58
	public tk2dTextMesh playerIdValue; // 0x60
	public GameObject friendInviteButton; // 0x68
	public GameObject friendDeleteButton; // 0x70
	public GameObject squadInviteButton; // 0x78
	public GameObject mercHireBtn; // 0x80
	public GameObject mercHireBtnInactive; // 0x88
	public ChatClaimButton claimBtn; // 0x90
	public GameObject unblockBtn; // 0x98
	private tk2dSlicedSprite m_squadInviteButtonBack; // 0xA0
	public GameObject squadInviteButtonGlow; // 0xA8
	public GameObject clan; // 0xB0
	public tk2dSprite clanIcon; // 0xB8
	public tk2dTextMesh clanName; // 0xC0
	public tk2dTextMesh squadStatusTextMesh; // 0xC8
	public GameObject edit; // 0xD0
	public GameObject transferGift; // 0xD8
	public GameObject option; // 0xE0
	public GameObject userId; // 0xE8

	// Methods
	public void .ctor(); // 0x1000B8094
	private void Awake(); // 0x1000B809C
	private void OnEnable(); // 0x1000B80A0
	public void Init(); // 0x1000B84AC
	private void OnPlayerProfileReceived(); // 0x1000B86A8
	private void OnDisable(); // 0x1000B9328
	private void Update(); // 0x1000B9450
}

// Namespace: 
public sealed class SquadPlayerStatus : Enum // TypeDefIndex: 4313
{
	// Fields
	public int value__; // 0x10
	public const SquadPlayerStatus STATUS_RECRUIT = 0; // 0x0
	public const SquadPlayerStatus STATUS_MEMBER = 1; // 0x0
	public const SquadPlayerStatus STATUS_OFFICER = 2; // 0x0
	public const SquadPlayerStatus STATUS_VICE_COMMANDER = 3; // 0x0
	public const SquadPlayerStatus STATUS_COMMANDER = 4; // 0x0
	public const SquadPlayerStatus STATUS_NEW = 5; // 0x0

}

// Namespace: 
public class ProfileMenuInitialization : MonoBehaviour // TypeDefIndex: 4314
{
	// Fields
	public tk2dUIItem button; // 0x18
	public bool MyProfileInitialization; // 0x20
	public MenuMainRatingsBase menumainratings; // 0x28
	public int menumainratingsElement; // 0x30
	public bool cantClick; // 0x34

	// Methods
	public void .ctor(); // 0x1000B9F68
	private void OnEnable(); // 0x1000B9F70
	private void MenuMainRatingsProfile(); // 0x1000BA0F4
	private void MyProfile(); // 0x1000BA1C4
	private void OnMouseUpAsButton(); // 0x1000BA240
	private void OnDisable(); // 0x1000BA288
}

// Namespace: 
public class ProfileOptionsMenuBase : MonoBehaviour // TypeDefIndex: 4315
{
	// Fields
	public tk2dUIItem button; // 0x18
	public tk2dUIItem saveButton; // 0x20
	private tk2dSlicedSprite m_buttonBack; // 0x28
	public GameObject saveButtonGlow; // 0x30
	public tk2dSprite avatarIcon; // 0x38
	public tk2dUITextInput nameinput; // 0x40
	public ProfileOptionsMenuFlagController FlagController; // 0x48
	public long player; // 0x50
	private bool inprocess; // 0x58
	public GameObject loadinggo; // 0x60
	public GameObject contentgo; // 0x68
	private long updateTime; // 0x70
	public tk2dTextMesh errormesh; // 0x78
	public int avatar_Id; // 0x80
	public tk2dUIItem buyAvatarsBtn; // 0x88
	public AvatarsScroll avatarsScroll; // 0x90
	private tk2dTextMesh m_CrystallsCount; // 0x98
	public tk2dSprite menuflagSprite; // 0xA0
	public tk2dTextMesh menunickMesh; // 0xA8
	private static Func`2<ShopItem, int> <>f__am$cache13; // 0x0
	private static Func`2<int, int> <>f__am$cache14; // 0x8
	private static Func`2<int, int> <>f__am$cache15; // 0x10

	// Methods
	public void .ctor(); // 0x1000BA3F4
	private void Start(); // 0x1000BA3FC
	public void RefreshAvatar(int avatarId); // 0x1000BA5C4
	public void SetCrystallsCount(int count); // 0x1000BA520
	private void OnEnable(); // 0x1000BA6A8
	private void Init(); // 0x1000BA8CC
	private IEnumerator NickNameLoad(); // 0x1000BAAC0
	public void SetError(string textkey); // 0x1000BAB34
	public bool CheckEnteredName(); // 0x1000BAC10
	public void OffError(); // 0x1000BAD04
	private void OnPlayerProfileReceived(); // 0x1000BAA84
	private void OnDisable(); // 0x1000BADC4
	public void On(); // 0x1000BAA88
	public void Reset(); // 0x1000BB018
	private IEnumerator GetItems(); // 0x1000BAFAC
	private void OnGetAvatars(); // 0x1000BB064
	private IEnumerator Refresh(); // 0x1000BB3FC
	private void EnableButton(bool enabled); // 0x1000BB470
	private void OnBuyAvatars(); // 0x1000BB824
	private void FixedUpdate(); // 0x1000BB988
	private bool NickChanged(); // 0x1000BBA20
	private bool FlagChanged(); // 0x1000BBB48
	private bool AvatarChanged(); // 0x1000BBBCC
	public int GetCost(); // 0x1000BB614
	public void SaveChange(); // 0x1000BBC74
	private void SetupNickData(); // 0x1000BBEB0
	private void <Start>m__129(tk2dUIScrollableArea obj); // 0x1000BBFB8
	private void <Start>m__12A(); // 0x1000BC03C
	private static int <OnGetAvatars>m__12B(ShopItem x); // 0x1000BC0AC
	private static int <OnGetAvatars>m__12C(int x); // 0x1000BC0C4
	private static int <OnGetAvatars>m__12D(int x); // 0x1000BC13C
}

// Namespace: 
private sealed class <NickNameLoad>c__Iterator81 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4316
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileOptionsMenuBase <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000BAB2C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000BC3B4
	private object System.Collections.IEnumerator.get_Current(); // 0x1000BC3BC
	public bool MoveNext(); // 0x1000BC3C4
	public void Dispose(); // 0x1000BC4F8
	public void Reset(); // 0x1000BC504
}

// Namespace: 
private sealed class <GetItems>c__Iterator82 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4317
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileOptionsMenuBase <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000BB05C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000BC1F4
	private object System.Collections.IEnumerator.get_Current(); // 0x1000BC1FC
	public bool MoveNext(); // 0x1000BC204
	public void Dispose(); // 0x1000BC354
	public void Reset(); // 0x1000BC360
}

// Namespace: 
private sealed class <Refresh>c__Iterator83 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4318
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileOptionsMenuBase <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000BB468
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000BC558
	private object System.Collections.IEnumerator.get_Current(); // 0x1000BC560
	public bool MoveNext(); // 0x1000BC568
	public void Dispose(); // 0x1000BC6AC
	public void Reset(); // 0x1000BC6B8
}

// Namespace: 
public class ProfileOptionsMenuFlagController : MonoBehaviour // TypeDefIndex: 4319
{
	// Fields
	public ProfileOptionsMenuBase profileOptionsMenuBase; // 0x18
	public tk2dSprite flagIcon; // 0x20
	public tk2dTextMesh flagName; // 0x28
	public tk2dTextMesh flagRegionName; // 0x30
	public tk2dSlicedSprite border; // 0x38
	public tk2dSlicedSprite bg; // 0x40
	public tk2dUIItem openBtn; // 0x48
	public tk2dUIItem closeBtn; // 0x50
	public tk2dUIItem openFlagBtn; // 0x58
	public tk2dUIItem openFlagBtn2; // 0x60
	public int flag_id; // 0x68
	public int flag_region_id; // 0x6C
	public GameObject closed; // 0x70
	public GameObject open; // 0x78
	public GameObject openFlags; // 0x80
	public GameObject regionsParent; // 0x88
	public GameObject regionsPrefab; // 0x90
	public GameObject btn; // 0x98
	public tk2dUIScrollableArea scroll; // 0xA0
	public GameObject flagsParent; // 0xA8
	public GameObject flagsElement; // 0xB0
	public tk2dUIItem[] cancelBtns; // 0xB8
	public string cameraName; // 0xC0
	public int maxChars; // 0xC8
	public Action`1<int> OnChangeFlag; // 0xD0
	private static Action`1<GameObject> <>f__am$cache19; // 0x0
	private static Action`1<GameObject> <>f__am$cache1A; // 0x8

	// Methods
	public void .ctor(); // 0x1000BC70C
	private void OnEnable(); // 0x1000BC71C
	private void OnDisable(); // 0x1000BC990
	private void OnCancel(); // 0x1000BCA78
	private void Init(); // 0x1000BCA7C
	private void ShowRegions(); // 0x1000BCC2C
	private void ShowFlags(); // 0x1000BD974
	private void ResetFlags(); // 0x1000BE700
	private void ResetRegions(); // 0x1000BD5D4
	public void openBtnClick(); // 0x1000BC838
	public void closeBtnClick(); // 0x1000BEAA8
	public void openFlagBtnClick(); // 0x1000BEC00
	public void RefreshFlag(int flagId); // 0x1000BECE0
	public void SetFlagId(int flag_id); // 0x1000BED58
	private static void <ResetFlags>m__12E(GameObject child); // 0x1000BED60
	private static void <ResetRegions>m__12F(GameObject child); // 0x1000BEDCC
}

// Namespace: 
public class ProfileSocialsFriendsElement : MonoBehaviour // TypeDefIndex: 4320
{
	// Fields
	public tk2dTextMesh friendName; // 0x18
	public float Multiplier; // 0x20

	// Methods
	public void .ctor(); // 0x1000BEE38
	public void Init(string name); // 0x1000BEE40
}

// Namespace: 
public class ProfileSocialsFriendsMenu : MonoBehaviour // TypeDefIndex: 4321
{
	// Fields
	public SocialsStatiscticsMenu socialsStatiscticsMenu; // 0x18
	public GameObject loadinggo; // 0x20
	public GameObject contentgo; // 0x28
	public GameObject friendprefab; // 0x30
	public tk2dUIScrollableArea scroll; // 0x38
	private bool inprocess; // 0x40
	private long updateTime; // 0x48
	private static Action`1<GameObject> <>f__am$cache7; // 0x0

	// Methods
	public void .ctor(); // 0x1000BEFF4
	private void OnEnable(); // 0x1000BEFFC
	public void On(); // 0x1000BF414
	public void Reset(); // 0x1000BF03C
	private void OnDisable(); // 0x1000BF4B8
	private IEnumerator GetItems(); // 0x1000BF44C
	private void OnGetItems(); // 0x1000BF51C
	private void Update(); // 0x1000BF97C
	private IEnumerator Refresh(); // 0x1000BF980
	private static void <Reset>m__130(GameObject child); // 0x1000BF9F4
}

// Namespace: 
private sealed class <GetItems>c__Iterator84 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4322
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsFriendsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000BF514
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000BFA60
	private object System.Collections.IEnumerator.get_Current(); // 0x1000BFA68
	public bool MoveNext(); // 0x1000BFA70
	public void Dispose(); // 0x1000BFB7C
	public void Reset(); // 0x1000BFB88
}

// Namespace: 
private sealed class <Refresh>c__Iterator85 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4323
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsFriendsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000BF9EC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000BFBDC
	private object System.Collections.IEnumerator.get_Current(); // 0x1000BFBE4
	public bool MoveNext(); // 0x1000BFBEC
	public void Dispose(); // 0x1000BFD30
	public void Reset(); // 0x1000BFD3C
}

// Namespace: 
public class ProfileSocialsMenu : MonoBehaviour // TypeDefIndex: 4324
{
	// Fields
	public MenuTabsControl tabs; // 0x18
	public Sections currentSection; // 0x20
	public Section[] sections; // 0x28

	// Methods
	public void .ctor(); // 0x1000BFD90
	private void OnEnable(); // 0x1000BFD98
	private void OnDisable(); // 0x1000BFE7C
	private void Start(); // 0x1000BFE80
	private void OnTabSelect(int index); // 0x1000C0044
	private void ShowSection(Sections section); // 0x1000C0060
	private void OnMaskCover(int index); // 0x1000C007C
	public void ShowCurrentSection(); // 0x1000BFDD0
	public void HideAllSections(); // 0x1000C0084
}

// Namespace: 
public sealed class Sections : Enum // TypeDefIndex: 4325
{
	// Fields
	public int value__; // 0x10
	public const Sections squad = 0; // 0x0
	public const Sections platoon = 1; // 0x0

}

// Namespace: 
public class Section // TypeDefIndex: 4326
{
	// Fields
	public Sections type; // 0x10
	public GameObject obj; // 0x18

	// Methods
	public void .ctor(); // 0x1000C010C
}

// Namespace: 
public class ProfileSocialsPlatoonsMenu : MonoBehaviour // TypeDefIndex: 4327
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject squadprefab; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	private bool inprocess; // 0x38
	private long updateTime; // 0x40
	private static Action`1<GameObject> <>f__am$cache6; // 0x0

	// Methods
	public void .ctor(); // 0x1000C0114
	private void OnEnable(); // 0x1000C011C
	public void On(); // 0x1000C0534
	public void Reset(); // 0x1000C015C
	private void OnDisable(); // 0x1000C05D8
	private IEnumerator GetItems(); // 0x1000C056C
	private void OnGetItems(); // 0x1000C063C
	private IEnumerator Refresh(); // 0x1000C13F0
	private static void <Reset>m__131(GameObject child); // 0x1000C1464
}

// Namespace: 
private sealed class <GetItems>c__Iterator86 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4328
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsPlatoonsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000C0634
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000C14D0
	private object System.Collections.IEnumerator.get_Current(); // 0x1000C14D8
	public bool MoveNext(); // 0x1000C14E0
	public void Dispose(); // 0x1000C15EC
	public void Reset(); // 0x1000C15F8
}

// Namespace: 
private sealed class <Refresh>c__Iterator87 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4329
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsPlatoonsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000C145C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000C164C
	private object System.Collections.IEnumerator.get_Current(); // 0x1000C1654
	public bool MoveNext(); // 0x1000C165C
	public void Dispose(); // 0x1000C17A0
	public void Reset(); // 0x1000C17AC
}

// Namespace: 
public class ProfileSocialsSquadsElement : MonoBehaviour // TypeDefIndex: 4330
{
	// Fields
	public tk2dTextMesh squadName; // 0x18
	public tk2dTextMesh squadDate; // 0x20
	public float Multiplier; // 0x28

	// Methods
	public void .ctor(); // 0x1000C1800
	public void Init(string name, string date); // 0x1000C115C
}

// Namespace: 
public class ProfileSocialsSquadsMenu : MonoBehaviour // TypeDefIndex: 4331
{
	// Fields
	public SocialsStatiscticsMenu socialsStatiscticsMenu; // 0x18
	public GameObject loadinggo; // 0x20
	public GameObject contentgo; // 0x28
	public GameObject squadprefab; // 0x30
	public tk2dUIScrollableArea scroll; // 0x38
	private bool inprocess; // 0x40
	private long updateTime; // 0x48
	private static Action`1<GameObject> <>f__am$cache7; // 0x0

	// Methods
	public void .ctor(); // 0x1000C1808
	private void OnEnable(); // 0x1000C1810
	public void On(); // 0x1000C1C28
	public void Reset(); // 0x1000C1850
	private void OnDisable(); // 0x1000C1CCC
	private IEnumerator GetItems(); // 0x1000C1C60
	private void OnGetItems(); // 0x1000C1D30
	private void Update(); // 0x1000C264C
	private IEnumerator Refresh(); // 0x1000C2650
	private static void <Reset>m__132(GameObject child); // 0x1000C26C4
}

// Namespace: 
private sealed class <GetItems>c__Iterator88 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4332
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsSquadsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000C1D28
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000C2730
	private object System.Collections.IEnumerator.get_Current(); // 0x1000C2738
	public bool MoveNext(); // 0x1000C2740
	public void Dispose(); // 0x1000C284C
	public void Reset(); // 0x1000C2858
}

// Namespace: 
private sealed class <Refresh>c__Iterator89 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4333
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ProfileSocialsSquadsMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000C26BC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000C28AC
	private object System.Collections.IEnumerator.get_Current(); // 0x1000C28B4
	public bool MoveNext(); // 0x1000C28BC
	public void Dispose(); // 0x1000C2A00
	public void Reset(); // 0x1000C2A0C
}

// Namespace: 
public class ProfileSquadNavigate : MonoBehaviour // TypeDefIndex: 4334
{
	// Fields
	private tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x1000C2A60
	private void Start(); // 0x1000C2A68
	private void HandleOnClick(); // 0x1000C2B10
	private void OnDestroy(); // 0x1000C2D0C
}

// Namespace: 
public class ProfileStatisticMenu : MonoBehaviour // TypeDefIndex: 4335
{
	// Fields
	public tk2dTextMesh battles; // 0x18
	public tk2dTextMesh wins; // 0x20
	public tk2dTextMesh kills; // 0x28
	public tk2dTextMesh shots; // 0x30
	public tk2dTextMesh accuracy; // 0x38
	public tk2dTextMesh battlesText; // 0x40
	public tk2dTextMesh winsText; // 0x48
	public tk2dTextMesh killsText; // 0x50
	public tk2dTextMesh shotsText; // 0x58
	public tk2dTextMesh accuracyText; // 0x60
	public tk2dTextMesh achievements; // 0x68
	public GameObject achievementsText; // 0x70
	public tk2dTextMesh current_place; // 0x78
	public tk2dTextMesh best_place; // 0x80
	public tk2dTextMesh profile_views; // 0x88
	public GameObject shame_cup; // 0x90
	public GameObject rightPanel; // 0x98
	public tk2dTextMesh shame_cupText; // 0xA0
	public tk2dTextMesh shame_cup_value; // 0xA8
	public tk2dUIItem shame_cup_btn; // 0xB0
	public ProfileCup cup1; // 0xB8
	public ProfileCup cup2; // 0xC0
	public ProfileCup cup3; // 0xC8
	public ProfileCup cup4; // 0xD0
	public ProfileCup cup5; // 0xD8
	public ProfileCup cup6; // 0xE0
	public ProfileCup cup7; // 0xE8
	public ProfileCup cup8; // 0xF0
	public ProfileCup cup9; // 0xF8
	public ProfileCup cup10; // 0x100
	public ProfileCup cup11; // 0x108
	public ProfileCup cup12; // 0x110
	public ProfileCup cup13; // 0x118
	public ProfileCup cup14; // 0x120
	public ProfileCup cup15; // 0x128
	public ProfileCup cup16; // 0x130
	public ProfileCup cup17; // 0x138
	public ProfileCup cup18; // 0x140
	public ProfileCup cup19; // 0x148
	public ProfileCup cup20; // 0x150
	public ProfileCup cup22; // 0x158
	public ProfileCup cup23; // 0x160
	public ProfileCup cup24; // 0x168
	public ProfileCup cup25; // 0x170
	public ProfileCup cup26; // 0x178
	public tk2dUIScrollableArea scroll; // 0x180
	public GameObject line; // 0x188
	public tk2dTextMesh current_placeText; // 0x190
	public tk2dTextMesh best_placeText; // 0x198
	public tk2dTextMesh profile_viewsText; // 0x1A0
	public float Multiplier; // 0x1A8
	public Renderer MedalOfEpic; // 0x1B0
	private int unbanCost; // 0x1B8

	// Methods
	public void .ctor(); // 0x1000C2D10
	public static string[] get_CupDescription(); // 0x1000C2D18
	public static string[] get_CupName(); // 0x1000C3534
	private void Awake(); // 0x1000C3D50
	private void OnEnable(); // 0x1000C490C
	private void Start(); // 0x1000C6B04
	private void OnClickCup(string message); // 0x1000C71B8
	private void OnClickGoose(); // 0x1000C72DC
	private void UnGooseRequest(); // 0x1000C7568
	private void <Awake>m__133(); // 0x1000C76A8
	private void <Awake>m__134(); // 0x1000C76E8
	private void <Awake>m__135(); // 0x1000C7728
	private void <Awake>m__136(); // 0x1000C7768
	private void <Awake>m__137(); // 0x1000C77A8
	private void <Awake>m__138(); // 0x1000C77E8
	private void <Awake>m__139(); // 0x1000C7828
	private void <Awake>m__13A(); // 0x1000C7868
	private void <Awake>m__13B(); // 0x1000C78A8
	private void <Awake>m__13C(); // 0x1000C78E8
	private void <Awake>m__13D(); // 0x1000C7928
	private void <Awake>m__13E(); // 0x1000C7968
	private void <Awake>m__13F(); // 0x1000C79A8
	private void <Awake>m__140(); // 0x1000C79E8
	private void <Awake>m__141(); // 0x1000C7A28
	private void <Awake>m__142(); // 0x1000C7A68
	private void <Awake>m__143(); // 0x1000C7AA8
	private void <Awake>m__144(); // 0x1000C7AE8
	private void <Awake>m__145(); // 0x1000C7B28
	private void <Awake>m__146(); // 0x1000C7B68
	private void <Awake>m__147(); // 0x1000C7BA8
	private void <Awake>m__148(); // 0x1000C7BE8
	private void <Awake>m__149(); // 0x1000C7C28
	private void <Awake>m__14A(); // 0x1000C7C68
	private void <Awake>m__14B(); // 0x1000C7CA8
	private void <Awake>m__14C(); // 0x1000C7CE8
	private void <OnClickGoose>m__14D(); // 0x1000C7D98
}

// Namespace: 
public class ProfileTab : MonoBehaviour // TypeDefIndex: 4336
{
	// Fields
	public static Sections tabWhenProfileOpen; // 0x0

	// Methods
	public void .ctor(); // 0x1000C7D9C
}

// Namespace: 
public class ProgressInfo : MonoBehaviour // TypeDefIndex: 4337
{
	// Fields
	private static Action <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x1000C7DA4
	private void Start(); // 0x1000C7DAC
	private static void <Start>m__14E(); // 0x1000C8138
}

// Namespace: 
public class ProgressPair : MonoBehaviour // TypeDefIndex: 4338
{
	// Fields
	public GameObject[] otherRewardPairs; // 0x18

	// Methods
	public void .ctor(); // 0x1000C8250
	public void Show(); // 0x1000C8258
}

// Namespace: 
public class QualifyingRoundMenu : MonoBehaviour // TypeDefIndex: 4339
{
	// Fields
	public int territory_id; // 0x18
	public tk2dTextMesh territory_name; // 0x20
	public tk2dTextMesh qa_text; // 0x28
	public tk2dTextMesh timer; // 0x30
	public tk2dTextMesh teamBlue; // 0x38
	public tk2dTextMesh teamRed; // 0x40
	public tk2dTextMesh scoreBlue; // 0x48
	public tk2dTextMesh scoreRed; // 0x50
	public tk2dUIItem blueButton; // 0x58
	public tk2dUIItem redButton; // 0x60
	public tk2dSprite blueIcon; // 0x68
	public tk2dSprite redIcon; // 0x70
	private int blueID; // 0x78
	private int redID; // 0x7C
	public Transform WarNodesTransform; // 0x80
	public GameObject spiner; // 0x88
	public GameObject content; // 0x90
	public Transform pairsView; // 0x98
	public Transform PlayerModeView; // 0xA0
	public GameObject UserModeView; // 0xA8
	private Object warNode; // 0xB0
	private GameObject[] warNodes; // 0xB8
	private GameObject[] warConnections; // 0xC0
	private long last_update; // 0xC8
	private bool is_ticking; // 0xD0
	private Color color_red; // 0xD4
	private Color color_blue; // 0xE4
	public bool loadstarted; // 0xF4
	public MenuStamina menuStamina; // 0xF8
	private AllianceQualification aq; // 0x100

	// Methods
	public void .ctor(); // 0x1000C84EC
	private void Start(); // 0x1000C8584
	private void BlueSquad(); // 0x1000C85E0
	private void RedSquad(); // 0x1000C873C
	private void OnEnable(); // 0x1000C8898
	private void OnDisable(); // 0x1000C8C7C
	private void SetNodeColor(LoadGameNodeButton warNodes_lgnb, Color color); // 0x1000C8E5C
	private void OnAllianceQualification(AllianceQualification _aq); // 0x1000C8F1C
	private IEnumerator Tick(); // 0x1000CA740
	private void UpdateNodes(); // 0x1000CA140
	public void OnNodeClick(int node_id); // 0x1000CA7B4
	private void InputEnabled(bool inputEnabled); // 0x1000C8BCC
	private void OnAttackOk(string map); // 0x1000CAA48
	private void OnAttackError(); // 0x1000CAC98
	private IEnumerator Load(string map); // 0x1000CAF68
	private void <OnAllianceQualification>m__14F(PairsList obj); // 0x1000CAFEC
}

// Namespace: 
private sealed class <Tick>c__Iterator8A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4340
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal QualifyingRoundMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000CA7AC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000CB210
	private object System.Collections.IEnumerator.get_Current(); // 0x1000CB218
	public bool MoveNext(); // 0x1000CB220
	public void Dispose(); // 0x1000CB310
	public void Reset(); // 0x1000CB31C
}

// Namespace: 
private sealed class <Load>c__Iterator8B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4341
{
	// Fields
	internal string map; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal string <$>map; // 0x28
	internal QualifyingRoundMenu <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000CAFE4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000CB010
	private object System.Collections.IEnumerator.get_Current(); // 0x1000CB018
	public bool MoveNext(); // 0x1000CB020
	public void Dispose(); // 0x1000CB1B0
	public void Reset(); // 0x1000CB1BC
}

// Namespace: 
public class RankItem // TypeDefIndex: 4342
{
	// Fields
	public static readonly bool USE_DEFAULT_TITLES; // 0x0
	public string[] textureNames; // 0x10
	public int columns; // 0x18

	// Methods
	public void .ctor(); // 0x1000CB370
	private static void .cctor(); // 0x1000CB414
}

// Namespace: 
public class RankItemRow : MonoBehaviour // TypeDefIndex: 4343
{
	// Fields
	public tk2dSprite[] rankIcons; // 0x18
	public tk2dTextMesh rankNameLabel; // 0x20
	public Color playerRankColor; // 0x28

	// Methods
	public void .ctor(); // 0x1000CB468
	public void SetRankName(int index, string playerRank); // 0x1000CB4A8
	public void SetRankIcons(string[] texturesArray); // 0x1000CB5AC
	public void RemoveSeparator(); // 0x1000CB714
}

// Namespace: 
public class RatingCupRow : MonoBehaviour // TypeDefIndex: 4344
{
	// Fields
	public tk2dTextMesh posemesh; // 0x18
	public tk2dSprite flagicon; // 0x20
	public tk2dTextMesh flagname; // 0x28
	public tk2dTextMesh rankpoints; // 0x30
	public bool isFirstPlace; // 0x38
	public Color goodcolor; // 0x3C
	public GameObject fill; // 0x50
	public int user_id; // 0x58
	public GameObject cup1; // 0x60
	public tk2dSprite cup1Icon; // 0x68
	public tk2dTextMesh cup1Value; // 0x70
	public GameObject cup2; // 0x78
	public tk2dSprite cup2Icon; // 0x80
	public tk2dTextMesh cup2Value; // 0x88
	public tk2dSlicedSprite border; // 0x90
	public float borderX; // 0x98
	public Transform playerData; // 0xA0
	public GameObject BlackBG; // 0xA8
	public bool foundonserver; // 0xB0
	public bool ismyself; // 0xB1
	private tk2dCamera guicamera; // 0xB8

	// Methods
	public void .ctor(); // 0x1000CB9EC
	private void Start(); // 0x1000CB9FC
	public void Setup(); // 0x1000CBB3C
	private void OnEnable(); // 0x1000CBE64
	public void OnRefreshLocalization(); // 0x1000CC184
	private void OnDestroy(); // 0x1000CC278
}

// Namespace: 
public class RatingPlatoonRow : MonoBehaviour // TypeDefIndex: 4345
{
	// Fields
	public tk2dTextMesh Name; // 0x18
	public tk2dSprite Icon; // 0x20
	public tk2dTextMesh Status; // 0x28
	public tk2dTextMesh wins; // 0x30
	public tk2dTextMesh members; // 0x38
	public tk2dSprite membersIcon; // 0x40
	public tk2dTextMesh rank; // 0x48
	public tk2dSprite rankIcon; // 0x50
	public bool isFirstPlace; // 0x58
	public Color goodcolor; // 0x5C
	public tk2dTextMesh posemesh; // 0x70
	public tk2dSlicedSprite border; // 0x78
	public GameObject fill; // 0x80
	public int id; // 0x88
	public Button Button; // 0x90
	public Transform Data; // 0x98
	public float borderX; // 0xA0
	public BoxCollider buttonCol; // 0xA8
	public GameObject BlackBG; // 0xB0
	public GameObject cup; // 0xB8
	public tk2dSprite cupIcon; // 0xC0
	public tk2dTextMesh cupValue; // 0xC8
	public bool foundonserver; // 0xD0
	public bool ismyself; // 0xD1
	private tk2dCamera guicamera; // 0xD8
	public Areas area; // 0xE0
	public List`1<GameObject> cups; // 0xE8

	// Methods
	public void .ctor(); // 0x1000CC3B8
	public void Setup(); // 0x1000CC430
	private void OnEnable(); // 0x1000CC7F8
	private void OnButton(); // 0x1000CCCE4
	public void OnRefreshLocalization(); // 0x1000CCEC4
	private void OnDestroy(); // 0x1000CCFB8
	public void Reset(); // 0x1000CD1E0
}

// Namespace: 
public class RatingPlayerRow : MonoBehaviour // TypeDefIndex: 4346
{
	// Fields
	public tk2dTextMesh posemesh; // 0x18
	public tk2dSprite rankicon; // 0x20
	public tk2dSprite flagicon; // 0x28
	public tk2dSprite avatar; // 0x30
	public tk2dTextMesh nickname; // 0x38
	public tk2dTextMesh clanname; // 0x40
	public tk2dTextMesh rankpoints; // 0x48
	public bool isFirstPlace; // 0x50
	public Color goodcolor; // 0x54
	public tk2dSlicedSprite border; // 0x68
	public GameObject fill; // 0x70
	public int user_id; // 0x78
	public Button ProfileButton; // 0x80
	public Transform playerData; // 0x88
	public float borderX; // 0x90
	public BoxCollider buttonCol; // 0x98
	public GameObject BlackBG; // 0xA0
	public GameObject cup; // 0xA8
	public GameObject veteran; // 0xB0
	public tk2dTextMesh contracts; // 0xB8
	public GameObject cost; // 0xC0
	public tk2dSprite costIcon; // 0xC8
	public tk2dTextMesh costValue; // 0xD0
	public tk2dSprite statusIсon; // 0xD8
	public tk2dUIItem progress; // 0xE0
	public string contractWorkTime; // 0xE8
	public tk2dUIItem timeBtn; // 0xF0
	public tk2dSlicedSprite progressBar; // 0xF8
	public tk2dUIItem prolongBtn; // 0x100
	public tk2dSprite pointsIсon; // 0x108
	public string swap_name; // 0x110
	public int points_progress; // 0x118
	public int points_goal; // 0x11C
	public int contract_id; // 0x120
	public int contract_merc_id; // 0x124
	public bool cup_option; // 0x128
	public bool is_prolong; // 0x129
	private NumberFormatInfo numberFormatInfo; // 0x130
	public bool foundonserver; // 0x138
	public bool ismyself; // 0x139
	private tk2dCamera guicamera; // 0x140
	public List`1<GameObject> cups; // 0x148

	// Methods
	public void .ctor(); // 0x1000CD3E8
	private void Start(); // 0x1000CD460
	public void Setup(); // 0x1000CD464
	private void OnEnable(); // 0x1000CDA98
	private void OnProgressDown(); // 0x1000CE2BC
	private void OnProgressRelease(); // 0x1000CE4C8
	private void OnTimeBtnDown(); // 0x1000CE518
	private void OnTimeBtnRelease(); // 0x1000CE53C
	private void OnProlongBtn(); // 0x1000CE560
	private void Prolonged(); // 0x1000CE670
	private void OnProfileButton(); // 0x1000CE6B8
	public void OnRefreshLocalization(); // 0x1000CE8C4
	private void OnDisable(); // 0x1000CE9B8
	private void OnDestroy(); // 0x1000CEDDC
	public void Reset(); // 0x1000CF200
	private void <OnProlongBtn>m__150(); // 0x1000CF408
}

// Namespace: 
public class RatingRewardItem : MonoBehaviour // TypeDefIndex: 4347
{
	// Fields
	public tk2dTextMesh reward; // 0x18
	public tk2dTextMesh position; // 0x20

	// Methods
	public void .ctor(); // 0x1000CF6BC
}

// Namespace: 
public class RatingSquadRow : MonoBehaviour // TypeDefIndex: 4348
{
	// Fields
	public tk2dTextMesh squadName; // 0x18
	public tk2dSprite squadIcon; // 0x20
	public tk2dTextMesh squadStatus; // 0x28
	public tk2dTextMesh wins; // 0x30
	public tk2dTextMesh members; // 0x38
	public tk2dSprite membersIcon; // 0x40
	public tk2dTextMesh rank; // 0x48
	public tk2dSprite rankIcon; // 0x50
	public bool isFirstPlace; // 0x58
	public Color goodcolor; // 0x5C
	public tk2dTextMesh posemesh; // 0x70
	public tk2dSlicedSprite border; // 0x78
	public GameObject fill; // 0x80
	public int squad_id; // 0x88
	public Button SquadButton; // 0x90
	public Transform squadData; // 0x98
	public float borderX; // 0xA0
	public BoxCollider buttonCol; // 0xA8
	public GameObject BlackBG; // 0xB0
	public GameObject cup; // 0xB8
	public tk2dSprite cupIcon; // 0xC0
	public tk2dTextMesh cupValue; // 0xC8
	public bool foundonserver; // 0xD0
	public bool ismyself; // 0xD1
	private tk2dCamera guicamera; // 0xD8
	public Areas area; // 0xE0
	public List`1<GameObject> cups; // 0xE8

	// Methods
	public void .ctor(); // 0x1000D0788
	public void Setup(); // 0x1000D0800
	private void OnEnable(); // 0x1000D0BC8
	private void OnSquadButton(); // 0x1000D10B4
	public void OnRefreshLocalization(); // 0x1000D1288
	private void OnDestroy(); // 0x1000D137C
	public void Reset(); // 0x1000D15A4
}

// Namespace: 
public class RatingsMenuSwitchControl : MonoBehaviour // TypeDefIndex: 4349
{
	// Fields
	public tk2dUIItem leftBtn; // 0x18
	public tk2dUIItem rightBtn; // 0x20
	public float fadeTime; // 0x28
	private MenuRating previewMenuElements; // 0x30
	private tk2dSprite leftSprite; // 0x38
	private tk2dSprite rightSprite; // 0x40
	private Vector3[] startPositions; // 0x48
	private float[] velo; // 0x50
	private Vector3[] veloV3; // 0x58
	private List`1<GameObject> elements; // 0x60
	private bool allowPlay; // 0x68
	private bool Init; // 0x69

	// Methods
	public void .ctor(); // 0x1000CF6C4
	private void Start(); // 0x1000CF780
	private void OnLeftBtnDown(); // 0x1000CF93C
	private void OnLeftBtnUp(); // 0x1000CFA70
	private void OnRightBtnDown(); // 0x1000CFB08
	private void OnRightBtnUp(); // 0x1000CFC3C
	private void SetBtnsInvisible(); // 0x1000CFCD4
	public void Off(); // 0x1000CFDE4
	public void On(); // 0x1000CFFA4
	private IEnumerator Showing(); // 0x1000D0054
}

// Namespace: 
private sealed class <Showing>c__Iterator8C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4350
{
	// Fields
	internal Vector3 <offset>__0; // 0x10
	internal float <f>__1; // 0x1C
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal RatingsMenuSwitchControl <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000D0164
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000D016C
	private object System.Collections.IEnumerator.get_Current(); // 0x1000D0174
	public bool MoveNext(); // 0x1000D017C
	public void Dispose(); // 0x1000D0728
	public void Reset(); // 0x1000D0734
}

// Namespace: 
public class ReloadTuningDialogController : MonoBehaviour // TypeDefIndex: 4351
{
	// Fields
	public GameObject crystals; // 0x18
	public tk2dTextMesh crystalsValue; // 0x20
	public GameObject dollars; // 0x28
	public tk2dTextMesh dollarsValue; // 0x30

	// Methods
	public void .ctor(); // 0x1000D17AC
	private void Start(); // 0x1000D17B4
	private void Update(); // 0x1000D17B8
}

// Namespace: 
public class RelocationValue : MonoBehaviour // TypeDefIndex: 4352
{
	// Fields
	private static Action`1<bool> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x1000D17BC
	private void Start(); // 0x1000D17C4
	private static void <Start>m__151(bool value); // 0x1000D19C4
}

// Namespace: 
public class ResetCacheButton : MonoBehaviour // TypeDefIndex: 4353
{
	// Fields
	private int clicks; // 0x18

	// Methods
	public void .ctor(); // 0x1000D22F0
	private void Start(); // 0x1000D22F8
	private void OnClick(); // 0x1000D239C
}

// Namespace: 
public class ResetProgressButton : MonoBehaviour // TypeDefIndex: 4354
{
	// Fields
	public GameObject confirmDialogPrefab; // 0x18
	private ConfirmDialog confirmDialog; // 0x20

	// Methods
	public void .ctor(); // 0x1000D2438
	private void Start(); // 0x1000D2440
	private void OnClick(); // 0x1000D24E4
	private void OnConfirmDialog(); // 0x1000D2644
}

// Namespace: 
public class RewardPair : MonoBehaviour // TypeDefIndex: 4355
{
	// Fields
	public tk2dTextMesh valueLbl; // 0x18
	public GameObject[] otherRewardPairs; // 0x20
	public tk2dTextMesh vip_status_1; // 0x28
	public tk2dTextMesh vip_status_2; // 0x30
	public tk2dTextMesh valueLbl_1; // 0x38
	public tk2dTextMesh valueLbl_2; // 0x40
	public GameObject vip_2; // 0x48

	// Methods
	public void .ctor(); // 0x1000D270C
	public void Show(int value); // 0x1000D2714
	public void ShowVIP(int value1, int value2); // 0x1000D27D8
}

// Namespace: 
public class RifleAnimationCallbacks : MonoBehaviour // TypeDefIndex: 4356
{
	// Fields
	private WeaponAnimationControl playerSetup; // 0x18

	// Methods
	public void .ctor(); // 0x1000D2A88
	private void Start(); // 0x1000D2A90
	public void DropCase(); // 0x1000D2B44
}

// Namespace: 
public class SceneNameControl : MonoBehaviour // TypeDefIndex: 4357
{
	// Fields
	public SceneNames sceneName; // 0x18

	// Methods
	public void .ctor(); // 0x1000E30A0
	private void Awake(); // 0x1000E30A8
	public static void LoadMainScene(); // 0x1000E3118
}

// Namespace: 
public class ScopeButton : MonoBehaviour // TypeDefIndex: 4358
{
	// Fields
	public static int ShootOutZoomCount; // 0x0
	public GameObject glow; // 0x18

	// Methods
	public void .ctor(); // 0x1000E3168
	private void Start(); // 0x1000E3170
	private void Update(); // 0x1000E3174
}

// Namespace: 
public class ScopeGlint : MonoBehaviour // TypeDefIndex: 4359
{
	// Fields
	public Camera mainCamera; // 0x18
	private Animator animator; // 0x20
	private float delay; // 0x28
	private bool isPlayed; // 0x2C

	// Methods
	public void .ctor(); // 0x1000E3314
	private void Start(); // 0x1000E331C
	private void Update(); // 0x1000E33CC
	private IEnumerator StartAnimation(); // 0x1000E3474
}

// Namespace: 
private sealed class <StartAnimation>c__Iterator8D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4360
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ScopeGlint <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000E34E0
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000E34E8
	private object System.Collections.IEnumerator.get_Current(); // 0x1000E34F0
	public bool MoveNext(); // 0x1000E34F8
	public void Dispose(); // 0x1000E35EC
	public void Reset(); // 0x1000E35F8
}

// Namespace: 
public class ScopeTutorial : MonoBehaviour // TypeDefIndex: 4361
{
	// Fields
	public GameObject zoomTutorGlow; // 0x18
	public GameObject arrowButton; // 0x20
	private int stage; // 0x28

	// Methods
	public void .ctor(); // 0x1000E364C
	private void Start(); // 0x1000E365C
	private void Update(); // 0x1000E36CC
}

// Namespace: 
public class ScrollAnimation : MonoBehaviour // TypeDefIndex: 4362
{
	// Fields
	private tk2dUIScrollableArea scroll; // 0x18
	public bool scrolling; // 0x20
	public float target; // 0x24
	private float velo2; // 0x28
	public float smoothTime; // 0x2C

	// Methods
	public void .ctor(); // 0x1000E37D4
	private void Start(); // 0x1000E37E8
	private void OnEnable(); // 0x1000E3840
	private void OnDisable(); // 0x1000E38F0
	private void Scroll_OnScroll(tk2dUIScrollableArea obj); // 0x1000E3988
	private void Update(); // 0x1000E3A24
}

// Namespace: 
public class ScrollContentAlign : MonoBehaviour // TypeDefIndex: 4363
{
	// Fields
	public Transform pivot; // 0x18
	public float offset; // 0x20
	private tk2dUIScrollableArea area; // 0x28

	// Methods
	public void .ctor(); // 0x1000E3B78
	private void Start(); // 0x1000E3B8C
	private void Update(); // 0x1000E3BE4
}

// Namespace: 
public class ScrollVisibleArea : MonoBehaviour // TypeDefIndex: 4364
{
	// Methods
	public void .ctor(); // 0x1000E3D00
	private void Start(); // 0x1000E3D08
}

// Namespace: 
public class SearchFriends : MonoBehaviour // TypeDefIndex: 4365
{
	// Fields
	private tk2dUIItem button; // 0x18
	public GameObject prefab; // 0x20
	private FriendsSearchDialog dialog; // 0x28
	private bool pending; // 0x30

	// Methods
	public void .ctor(); // 0x1000E3E8C
	private void Start(); // 0x1000E3E94
	private void HandleOnClick(); // 0x1000E3F3C
	private void <HandleOnClick>m__152(); // 0x1000E4140
	private void <HandleOnClick>m__153(); // 0x1000E42EC
	private void <HandleOnClick>m__154(bool b); // 0x1000E4374
}

// Namespace: 
public class SearchSquad : MonoBehaviour // TypeDefIndex: 4366
{
	// Fields
	private tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x1000E45B0
	private void Start(); // 0x1000E45B8
	private void HandleOnClick(); // 0x1000E4660
}

// Namespace: 
public class SelfHideGUIElement : MonoBehaviour // TypeDefIndex: 4367
{
	// Fields
	private MeshRenderer renderer; // 0x18

	// Methods
	public void .ctor(); // 0x1000E4664
	private void Start(); // 0x1000E466C
}

// Namespace: 
public class SensitivityController : MonoBehaviour // TypeDefIndex: 4368
{
	// Fields
	public tk2dUIScrollbar bar; // 0x18
	private static RangeAttribute right; // 0x0
	private static float defaultSensitivity; // 0x8
	private static float m_sensitivity; // 0xC
	private static float inGameSensitivity; // 0x10
	private static Action`1<tk2dUIScrollbar> <>f__am$cache5; // 0x18

	// Methods
	public void .ctor(); // 0x1000E4720
	private static void .cctor(); // 0x1000E4728
	private static void set_sensitivity(float value); // 0x1000E47B8
	private static float get_sensitivity(); // 0x1000E48FC
	private static float Normalize(float val, float min, float max); // 0x1000E4964
	private static float RecalculateInGameSensitivity(); // 0x1000E483C
	public static void SetInGameSensitivity(float val); // 0x1000E4974
	public static float GetSensitivity(); // 0x1000E4AA4
	public static float GetInGameSensitivity(); // 0x1000E4B00
	public static void SetSensitivity(float val); // 0x1000E4A38
	private void Start(); // 0x1000E4B68
	private void Update(); // 0x1000E4CD4
	private static void <Start>m__155(tk2dUIScrollbar obj); // 0x1000E4CD8
}

// Namespace: 
public class SensitivityZoomController : MonoBehaviour // TypeDefIndex: 4369
{
	// Fields
	public tk2dUIScrollbar bar; // 0x18
	private static RangeAttribute right; // 0x0
	private static float defaultSensitivity; // 0x8
	private static float m_sensitivity; // 0xC
	private static float inGameSensitivity; // 0x10
	private static Action`1<tk2dUIScrollbar> <>f__am$cache5; // 0x18

	// Methods
	public void .ctor(); // 0x1000E4D8C
	private static void .cctor(); // 0x1000E4D94
	private static void set_sensitivity(float value); // 0x1000E4E30
	private static float get_sensitivity(); // 0x1000E4F74
	private static float Normalize(float val, float min, float max); // 0x1000E4FDC
	private static float RecalculateInGameSensitivity(); // 0x1000E4EB4
	public static void SetInGameSensitivity(float val); // 0x1000E4FEC
	public static float GetSensitivity(); // 0x1000E511C
	public static float GetInGameSensitivity(); // 0x1000E5178
	public static void SetSensitivity(float val); // 0x1000E50B0
	private void Start(); // 0x1000E51E0
	private void Update(); // 0x1000E534C
	private static void <Start>m__156(tk2dUIScrollbar obj); // 0x1000E5350
}

// Namespace: 
public class SerialMessages : MonoBehaviour // TypeDefIndex: 4370
{
	// Fields
	public States state; // 0x18
	public float speed; // 0x1C
	public float waitfornext; // 0x20
	public float hidetime; // 0x24
	public TextPositions wordsmeshes; // 0x28
	public Transform cube; // 0x30
	private List`1<string> words; // 0x38
	private List`1<Color> colors; // 0x40
	private bool nextword; // 0x48
	private int switches; // 0x4C
	private Vector3 rotation; // 0x50
	private Color visiblecolor; // 0x5C

	// Methods
	public void .ctor(); // 0x1000E5448
	public void AddWord(string text, Color color); // 0x1000E54F4
	public Color GetRPColor(); // 0x1000E55A4
	private void OnEnable(); // 0x1000E55B0
	private void Start(); // 0x1000E561C
	private void Update(); // 0x1000E56FC
	private IEnumerator WaitForNextWord(); // 0x1000E5A4C
	private void SortWordMeshes(); // 0x1000E5A20
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4371
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States switching = 1; // 0x0
	public const States waitfornext = 2; // 0x0

}

// Namespace: 
public class TextPositions // TypeDefIndex: 4372
{
	// Fields
	public tk2dTextMesh front; // 0x10
	public tk2dTextMesh top; // 0x18
	public tk2dTextMesh back; // 0x20
	public tk2dTextMesh bottom; // 0x28

	// Methods
	public void .ctor(); // 0x1000E5D54
}

// Namespace: 
private sealed class <WaitForNextWord>c__Iterator8E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4373
{
	// Fields
	internal Color <c>__0; // 0x10
	internal float <t>__1; // 0x20
	internal int $PC; // 0x24
	internal object $current; // 0x28
	internal SerialMessages <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000E5AB8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000E5AC0
	private object System.Collections.IEnumerator.get_Current(); // 0x1000E5AC8
	public bool MoveNext(); // 0x1000E5AD0
	public void Dispose(); // 0x1000E5CF4
	public void Reset(); // 0x1000E5D00
}

// Namespace: 
public class ServerSelectButton : MonoBehaviour // TypeDefIndex: 4374
{
	// Fields
	public GameObject confirmDialogPrefab; // 0x18
	public MonoBehaviour[] objects; // 0x20
	public GameObject[] gameObjects; // 0x28

	// Methods
	public void .ctor(); // 0x1000F50A4
	private void Start(); // 0x1000F50AC
	private void OnEnable(); // 0x1000F5150
	private void OnClick(); // 0x1000F5290
}

// Namespace: 
private sealed class <OnClick>c__AnonStorey103 // TypeDefIndex: 4375
{
	// Fields
	internal DialogBasic dialog; // 0x10
	internal ServerSelectButton <>f__this; // 0x18

	// Methods
	public void .ctor(); // 0x1000F53B8
	internal void <>m__157(ServerConnectionData server); // 0x1000F550C
}

// Namespace: 
private sealed class <OnClick>c__AnonStorey104 // TypeDefIndex: 4376
{
	// Fields
	internal ConfirmDialog confirmDialog; // 0x10
	internal ServerConnectionData server; // 0x18
	internal <OnClick>c__AnonStorey103 <>f__ref$259; // 0x20

	// Methods
	public void .ctor(); // 0x1000F5728
	internal void <>m__158(); // 0x1000F5730
}

// Namespace: 
public class ShopBoxMenu : MonoBehaviour // TypeDefIndex: 4377
{
	// Fields
	public tk2dSprite avatarIcon; // 0x18
	public tk2dSprite flagIcon; // 0x20
	public tk2dSprite rankIcon; // 0x28
	public tk2dTextMesh name; // 0x30
	public int avatarIcon_c; // 0x38
	public int flagIcon_c; // 0x3C
	public int rankIcon_c; // 0x40
	public int gift_to_user_id; // 0x44
	public string name_c; // 0x48

	// Methods
	public void .ctor(); // 0x1000F8694
	private void OnEnable(); // 0x1000F869C
	private void Start(); // 0x1000F871C
	private void Update(); // 0x1000F8720
}

// Namespace: 
public class ShopBuyBooster : MonoBehaviour // TypeDefIndex: 4378
{
	// Fields
	public Types type; // 0x18
	public List`1<Booster> booster; // 0x20
	public List`1<ShopItem> boosterItem; // 0x28
	private Groups group; // 0x30
	public tk2dTextMesh discount; // 0x38
	public ShopCashStock stock; // 0x40
	public ShopItem shopItem; // 0x48
	public tk2dUIItem buybuttonDollars; // 0x50
	public tk2dUIItem buybuttonCrystals; // 0x58
	public OnSelectDeligate OnSelect; // 0x60
	public tk2dUIItem[] buttons; // 0x68
	public tk2dSlicedSprite selector; // 0x70
	public int currentIndex; // 0x78
	public Color offColor; // 0x7C
	public Color onCollor; // 0x8C
	public Color diableColor; // 0x9C

	// Methods
	public void .ctor(); // 0x1000F8724
	public void Init(); // 0x1000F87CC
	private void OnShopBuyOk(ShopItem itm); // 0x1000F9530
	private void OnBuyButtonClick(); // 0x1000F9534
	private void OnEnable(); // 0x1000F964C
	private void OnDisable(); // 0x1000F977C
	private void Change(int i); // 0x1000F8E54
	private void OnClick(tk2dUIItem item); // 0x1000F996C
	public void SetIndex(int index); // 0x1000F92FC
	private void ChengeTextColor(int index); // 0x1000F99F8
}

// Namespace: 
public sealed class OnSelectDeligate : MulticastDelegate // TypeDefIndex: 4379
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000F9BE0
	public virtual void Invoke(int index); // 0x1000F9B6C
	public virtual IAsyncResult BeginInvoke(int index, AsyncCallback callback, object object); // 0x1000F9C00
	public virtual void EndInvoke(IAsyncResult result); // 0x1000F9CB8
}

// Namespace: 
public class ShopBuyBoosterCount : MonoBehaviour // TypeDefIndex: 4380
{
	// Fields
	public tk2dTextMesh boosterBullet; // 0x18
	public tk2dTextMesh boosterHealth; // 0x20
	public tk2dTextMesh boosterLocation; // 0x28

	// Methods
	public void .ctor(); // 0x1000F9CC4
	private void Update(); // 0x1000F9CCC
}

// Namespace: 
public class ShopBuyElement : MonoBehaviour // TypeDefIndex: 4381
{
	// Fields
	public string name; // 0x18
	public int id; // 0x20
	public int item_id; // 0x24
	public Groups group; // 0x28
	public ButtonStatus buttonStatus; // 0x2C
	public MoneyTypes money_type; // 0x30
	public int price; // 0x34
	public int limited_start; // 0x38
	public int limited_end; // 0x3C
	public int limited_percent; // 0x40
	public tk2dTextMesh discount; // 0x48
	public tk2dTextMesh delivery; // 0x50
	public GameObject limited; // 0x58
	public tk2dSprite iconFlag; // 0x60
	public tk2dSprite iconAvatar; // 0x68
	public GameObject avatarBG; // 0x70
	public tk2dSprite iconClan; // 0x78
	public LocalizationTextMesh nameLbl; // 0x80
	public tk2dTextMesh priceLbl; // 0x88
	public tk2dUIItem buybutton; // 0x90
	public tk2dTextMesh priceCrLbl; // 0x98
	public tk2dUIItem buyCrbutton; // 0xA0
	public tk2dUIItem installrbutton; // 0xA8
	public GameObject installedrbutton; // 0xB0
	public tk2dTextMesh installedrbuttonText; // 0xB8
	public GameObject Requiredbutton; // 0xC0
	public tk2dTextMesh RequiredbuttonText; // 0xC8
	public GameObject RequiredText; // 0xD0
	private int req_level; // 0xD8
	public tk2dUIItem in_packet_button; // 0xE0
	public ShopItem currentItem; // 0xE8
	private bool inst; // 0xF0
	private bool isTicking; // 0xF1
	private NumberFormatInfo numberFormatInfo; // 0xF8
	public NicknameDialogControl nickControll; // 0x100
	private static bool install_pending; // 0x0

	// Methods
	public void .ctor(); // 0x1000F9EC4
	private static void .cctor(); // 0x1000F9ECC
	public void Init(ShopItem item); // 0x1000F9ED0
	private void OnShopBuyOk(ShopItem itm); // 0x1000FAABC
	private void OnBuyButtonClick(); // 0x1000FABE4
	private void StartX(); // 0x1000FA3F8
	private void Install(); // 0x1000FAE84
	private void Installing(); // 0x1000FB908
	private void ChangeProfileDataOk(); // 0x1000FBC78
	private void Installed(); // 0x1000FB798
	public void UpdateItem(); // 0x1000FB130
	private void On(); // 0x1000FAFE0
	private void OnDisable(); // 0x1000FBE4C
	private void OnDestroy(); // 0x1000FC09C
	private IEnumerator TickDelivery(); // 0x1000FC2C0
	private void <StartX>m__159(); // 0x1000FC334
}

// Namespace: 
public sealed class ButtonStatus : Enum // TypeDefIndex: 4382
{
	// Fields
	public int value__; // 0x10
	public const ButtonStatus buy = 0; // 0x0
	public const ButtonStatus install = 1; // 0x0
	public const ButtonStatus installed = 2; // 0x0

}

// Namespace: 
private sealed class <TickDelivery>c__Iterator8F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4383
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ShopBuyElement <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000FC32C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000FC398
	private object System.Collections.IEnumerator.get_Current(); // 0x1000FC3A0
	public bool MoveNext(); // 0x1000FC3A8
	public void Dispose(); // 0x1000FC580
	public void Reset(); // 0x1000FC58C
}

// Namespace: 
public class ShopCashDiscount : MonoBehaviour // TypeDefIndex: 4384
{
	// Fields
	public tk2dTextMesh value; // 0x18
	public float discount; // 0x20
	public ShopCashPrice price; // 0x28
	public float spacing; // 0x30
	public float offset; // 0x34
	private NumberFormatInfo numberFormatInfo; // 0x38
	private GameObject newPriceText; // 0x40
	private GameObject newPriceIcon; // 0x48
	private Vector3 redLine; // 0x50
	private Vector3 text; // 0x5C
	private Vector3 icon; // 0x68
	private float off; // 0x74
	private bool firstTime; // 0x78

	// Methods
	public void .ctor(); // 0x1000FC5E8
	public void SetDiscount(float val, DiscountTypes type, float priceWithoutDiscount); // 0x1000FC600
	private void CorrectRedLine(); // 0x1000FDC2C
}

// Namespace: 
public class ShopCash // TypeDefIndex: 4385
{
	// Fields
	public MoneyTypes moneyType; // 0x10
	public float priceValue; // 0x14
	public float discountPercent; // 0x18
	public float priceWithoutDiscount; // 0x1C
	public DiscountTypes discountType; // 0x20
	public bool isNew; // 0x24
	public bool isBest; // 0x25
	public int endingTime; // 0x28

	// Methods
	public void .ctor(); // 0x1000FC5E0
}

// Namespace: 
public class ShopCashElement : MonoBehaviour // TypeDefIndex: 4386
{
	// Fields
	public MoneyTypes moneyType; // 0x18
	public float priceValue; // 0x1C
	public float discountPercent; // 0x20
	public float priceWithoutDiscount; // 0x24
	public DiscountTypes discountType; // 0x28
	public bool isNew; // 0x2C
	public bool isBest; // 0x2D
	public bool isNow; // 0x2E
	public int endingTime; // 0x30
	public ShopCashPrice price; // 0x38
	public ShopCashStock stock; // 0x40
	public ShopCashDiscount discount; // 0x48
	public GameObject newIcon; // 0x50
	public tk2dTextMesh label; // 0x58
	public tk2dTextMesh delivery; // 0x60
	public tk2dUIItem buybutton; // 0x68
	public GameObject spinerDialogPrefab; // 0x70
	private bool isTicking; // 0x78
	private SpinerDialog spinerDialog; // 0x80
	private WebFormRequest wwwRequest; // 0x88
	public GameObject infoBtn; // 0x90
	private Type skuType; // 0x98

	// Methods
	public void .ctor(); // 0x1000FDF2C
	private void Awake(); // 0x1000FDF34
	public void OnUpdate(); // 0x1000FDF38
	private void Start(); // 0x1000FECDC
	private void OnBuyButtonClick(); // 0x1000FEE78
	private void OnUpdateInventory(); // 0x1000FF2AC
	private void OnEnable(); // 0x1000FF2B0
	private void OnDisable(); // 0x1000FF320
	private IEnumerator TickDelivery(); // 0x1000FF38C
	private void MoveLabel(); // 0x1000FEC34
	private string GetInfoKey(); // 0x1000FE940
	private void OnInfoBtn(); // 0x1000FF400
	private SpinerDialog CreateSpinerDialog(string header, string message); // 0x1000FF124
}

// Namespace: 
private sealed class <TickDelivery>c__Iterator90 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4387
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal ShopCashElement <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x1000FF3F8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000FF5B4
	private object System.Collections.IEnumerator.get_Current(); // 0x1000FF5BC
	public bool MoveNext(); // 0x1000FF5C4
	public void Dispose(); // 0x1000FF874
	public void Reset(); // 0x1000FF880
}

// Namespace: 
public class ShopCashPrice : MonoBehaviour // TypeDefIndex: 4388
{
	// Fields
	public float price; // 0x18
	public tk2dSprite icon; // 0x20
	public tk2dTextMesh text; // 0x28
	public tk2dSlicedSprite redLine; // 0x30
	private NumberFormatInfo numberFormatInfo; // 0x38

	// Methods
	public void .ctor(); // 0x1000FF8D4
	public void SetPrice(float val); // 0x1000FE784
}

// Namespace: 
public class ShopCashStock : MonoBehaviour // TypeDefIndex: 4389
{
	// Fields
	public string text; // 0x18
	public float padding; // 0x20
	public tk2dSprite crown; // 0x28
	public tk2dSlicedSprite fill; // 0x30
	public Transform left; // 0x38
	public Transform right; // 0x40
	public tk2dTextMesh label; // 0x48

	// Methods
	public void .ctor(); // 0x1000FF8DC
	public void OffSelf(); // 0x1000FF8E4
	public void OnSelf(); // 0x1000FF90C
	public void SetText(string txt); // 0x1000F9924
	private void CalculateMesh(); // 0x1000FF934
	public void OffCrown(); // 0x1000FFAD8
	public void OnCrown(); // 0x1000FFB40
}

// Namespace: 
public class ShopImage : MonoBehaviour // TypeDefIndex: 4390
{
	// Fields
	public string asset; // 0x18

	// Methods
	public void .ctor(); // 0x1000FFBA8
	private IEnumerator Start(); // 0x1000FFBB0
}

// Namespace: 
private sealed class <Start>c__Iterator91 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4391
{
	// Fields
	internal AssetBundleLoadAssetOperation <request>__0; // 0x10
	internal Texture2D <texture>__1; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal ShopImage <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x1000FFC1C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000FFC24
	private object System.Collections.IEnumerator.get_Current(); // 0x1000FFC2C
	public bool MoveNext(); // 0x1000FFC34
	public void Dispose(); // 0x1000FFEDC
	public void Reset(); // 0x1000FFEE8
}

// Namespace: 
public class ShopItemsFilter : MonoBehaviour // TypeDefIndex: 4392
{
	// Fields
	public Sections section; // 0x18
	private static Func`2<SASku2, int> <>f__am$cache1; // 0x0
	private static Func`2<ShopCashElement, int> <>f__am$cache2; // 0x8

	// Methods
	public void .ctor(); // 0x1000FFF3C
	private bool SectionCompare(SASku2 sku); // 0x1000FFF44
	private static bool TimeCompare(SASku2 sku); // 0x1000FFFE8
	private bool ExtraFilter(SASku2 sku); // 0x1001000A8
	public static bool StarterPackFilter(SASku2 sku); // 0x1001000D0
	public static bool BoxFilter(SASku2 sku); // 0x1001004C8
	private void Filter(); // 0x100100500
	private void OnEnable(); // 0x1001009B4
	private void OnDisable(); // 0x100100C88
	private void OnItemInstalled(int type); // 0x100100F54
	private static int <StarterPackFilter>m__15A(SASku2 s); // 0x100100F58
	private bool <Filter>m__15B(ShopCashElement shopCashElement); // 0x100100FD4
	private static int <Filter>m__15C(ShopCashElement shopCashElement); // 0x1001010AC
}

// Namespace: 
public class ShopMenuButton : MonoBehaviour // TypeDefIndex: 4393
{
	// Fields
	public tk2dSlicedSprite[] slicedSprites; // 0x18
	private tk2dCamera guicamera; // 0x20

	// Methods
	public void .ctor(); // 0x100101144
	private void Start(); // 0x10010114C
}

// Namespace: 
public class SliderValue : MonoBehaviour // TypeDefIndex: 4394
{
	// Methods
	public void .ctor(); // 0x100101D98
	private void Start(); // 0x100101DA0
	private void Update(); // 0x100101DA4
}

// Namespace: 
public class SliderZooomValue : MonoBehaviour // TypeDefIndex: 4395
{
	// Methods
	public void .ctor(); // 0x100101E60
	private void Update(); // 0x100101E68
}

// Namespace: 
public class SmartHelmetButtonController : MonoBehaviour // TypeDefIndex: 4396
{
	// Fields
	public GameObject button; // 0x18
	private Component go; // 0x20

	// Methods
	public void .ctor(); // 0x100102F20
	private void Start(); // 0x100102F28
	public void OnShow(); // 0x100103038
	private void OnHelmetPartInstalled(int helmettype, int helmetpartint, int stage); // 0x100103068
	private void OnEnable(); // 0x10010313C
	private void OnDisable(); // 0x100103328
}

// Namespace: 
private sealed class <OnEnable>c__AnonStorey105 // TypeDefIndex: 4397
{
	// Fields
	internal bool active; // 0x10

	// Methods
	public void .ctor(); // 0x100103320
	internal void <>m__15D(HelmetPart arg1, HelmetPartStage arg2); // 0x100103450
}

// Namespace: 
public class SmartHud : MonoBehaviour // TypeDefIndex: 4398
{
	// Fields
	public Element[] elements; // 0x18
	private bool scopeActive; // 0x20

	// Methods
	public void .ctor(); // 0x100103478
	private void Update(); // 0x100103480
	private void Start(); // 0x100103894
	private void Refresh(); // 0x1001034E0
}

// Namespace: 
public sealed class Hud : Enum // TypeDefIndex: 4399
{
	// Fields
	public int value__; // 0x10
	public const Hud chat = 0; // 0x0
	public const Hud health = 1; // 0x0
	public const Hud ir = 2; // 0x0
	public const Hud boosters = 3; // 0x0
	public const Hud zoom = 4; // 0x0
	public const Hud bullet = 5; // 0x0

}

// Namespace: 
public class Element // TypeDefIndex: 4400
{
	// Fields
	public GameObject control; // 0x10
	public Hud hud; // 0x18

	// Methods
	public void .ctor(); // 0x100103974
}

// Namespace: 
public class SmartWeapon : MonoBehaviour // TypeDefIndex: 4401
{
	// Fields
	public CheckBox targets; // 0x18
	public CheckBox auto_fire; // 0x20
	public CheckBox area; // 0x28
	public CheckBox chat; // 0x30
	public CheckBox health; // 0x38
	public CheckBox vision; // 0x40
	public CheckBox boosters; // 0x48
	public CheckBox zoom; // 0x50
	public CheckBox bullet; // 0x58

	// Methods
	public void .ctor(); // 0x10010397C
	public static Settings get_settings(); // 0x100103898
	public static bool CanUse(Weapon weapon, int stage); // 0x10010392C
	private void Start(); // 0x100103A84
	private void OnEnable(); // 0x100103A88
	private void OnDisable(); // 0x100103EA8
	private bool OnGoBack(MenuElements e); // 0x100103FD0
	private void OnSave(); // 0x100104000
}

// Namespace: 
public class Settings // TypeDefIndex: 4402
{
	// Fields
	private const int SR_TARGET = 1; // 0x0
	private const int SR_AUTO_SHOT = 2; // 0x0
	private const int SR_ZONES = 4; // 0x0
	private const int SR_PM_CHAT = 8; // 0x0
	private const int SR_PM_HEALTH = 16; // 0x0
	private const int SR_PM_IR = 32; // 0x0
	private const int SR_PM_BOOSTERS = 64; // 0x0
	private const int SR_PM_ZOOM = 128; // 0x0
	private const int SR_PM_BULLET = 256; // 0x0
	public bool target; // 0x10
	public bool auto_shot; // 0x11
	public bool zones; // 0x12
	public bool pm_chat; // 0x13
	public bool pm_health; // 0x14
	public bool pm_ir; // 0x15
	public bool pm_boosters; // 0x16
	public bool pm_zoom; // 0x17
	public bool pm_bullet; // 0x18

	// Methods
	public void .ctor(int sr_settings); // 0x100103984
	private int SetFlag(bool val, int a, int b); // 0x10010424C
	public int GetSettings(); // 0x1001041B0
	public ISFSObject Get(); // 0x100104260
}

// Namespace: 
public class SmartWeaponButtonController : MonoBehaviour // TypeDefIndex: 4403
{
	// Fields
	public GameObject button; // 0x18
	private Component go; // 0x20

	// Methods
	public void .ctor(); // 0x100104394
	private void Start(); // 0x10010439C
	public void OnShow(); // 0x1001044AC
	private void OnWeaponPartInstalled(int weapontype, int weaponpartint, int stage); // 0x1001044DC
	private void OnEnable(); // 0x1001045B0
	private void OnDisable(); // 0x100104794
}

// Namespace: 
private sealed class <OnEnable>c__AnonStorey106 // TypeDefIndex: 4404
{
	// Fields
	internal bool active; // 0x10

	// Methods
	public void .ctor(); // 0x1001048BC
	internal void <>m__15E(WeaponPart arg1, WeaponPartStage arg2); // 0x1001048C4
}

// Namespace: 
public class SocialsStatiscticsMenu : MonoBehaviour // TypeDefIndex: 4405
{
	// Fields
	public string[] friendsName; // 0x18
	public string[] squadsName; // 0x20
	public tk2dTextMesh scuads; // 0x28
	public tk2dTextMesh recruits; // 0x30
	public tk2dTextMesh platoons; // 0x38
	public tk2dTextMesh scuadsText; // 0x40
	public tk2dTextMesh recruitsText; // 0x48
	public float Multiplier; // 0x50

	// Methods
	public void .ctor(); // 0x1001062F4
	private void Start(); // 0x1001062FC
	private void OnEnable(); // 0x10010655C
}

// Namespace: 
public class SocketServerLink : MonoBehaviour // TypeDefIndex: 4406
{
	// Methods
	public void .ctor(); // 0x10013CB5C
	public static SocketServer get_Instance(); // 0x10013CB64
	public static SocketServer GetServer(); // 0x10013CBC0
}

// Namespace: 
public class PlaySoundWaitTime : MonoBehaviour // TypeDefIndex: 4407
{
	// Fields
	public AudioClip buttonSound; // 0x18
	public float waitTime; // 0x20

	// Methods
	public void .ctor(); // 0x1000A6198
	private IEnumerator Start(); // 0x1000A61A0
}

// Namespace: 
private sealed class <Start>c__Iterator92 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4408
{
	// Fields
	internal AudioSource <asrc>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal PlaySoundWaitTime <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1000A620C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1000A6214
	private object System.Collections.IEnumerator.get_Current(); // 0x1000A621C
	public bool MoveNext(); // 0x1000A6224
	public void Dispose(); // 0x1000A63A0
	public void Reset(); // 0x1000A63AC
}

// Namespace: 
public class SoundsObj : MonoBehaviour // TypeDefIndex: 4409
{
	// Methods
	public void .ctor(); // 0x10013F750
	private void Start(); // 0x10013F758
	private void Update(); // 0x10013F75C
}

// Namespace: 
public class SpawnPoses : MonoBehaviour // TypeDefIndex: 4410
{
	// Methods
	public void .ctor(); // 0x10013F760
	private void Start(); // 0x10013F768
	private void Update(); // 0x10013F76C
}

// Namespace: 
public class SpecialButton : MonoBehaviour // TypeDefIndex: 4411
{
	// Fields
	public float maskmaxvalue; // 0x18
	public tk2dUIMask mask; // 0x20
	private GameObject counter; // 0x28

	// Methods
	public void .ctor(); // 0x10013F770
	private void Start(); // 0x10013F778
	public void SetMask(float worktime, float workedtime); // 0x10013FBC4
}

// Namespace: 
public class SpecialDeviceButtonPosValue : MonoBehaviour // TypeDefIndex: 4412
{
	// Fields
	private static Action`1<bool> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x10013FC4C
	private void Start(); // 0x10013FC54
	private static void <Start>m__15F(bool value); // 0x10013FDF8
}

// Namespace: 
public class SpinerDialog : DialogBasic // TypeDefIndex: 4413
{
	// Fields
	public tk2dTextMesh header; // 0x98
	public tk2dTextMesh message; // 0xA0
	public Transform spiner; // 0xA8
	public float angle; // 0xB0

	// Methods
	public void .ctor(); // 0x10013FE94
	public void SetHeader(string text); // 0x10013FEFC
	public void SetMessage(string text); // 0x10013FF70
	protected override void Update(); // 0x10013FFE4
}

// Namespace: 
public class SpritesAlphaControl : MonoBehaviour // TypeDefIndex: 4414
{
	// Fields
	public float alpha; // 0x18
	private float alpha_; // 0x1C
	public tk2dBaseSprite[] sprites; // 0x20
	public tk2dTextMesh[] texts; // 0x28
	public MenuButtonGlowAnimate externalGlow; // 0x30

	// Methods
	public void .ctor(); // 0x100140508
	private void Start(); // 0x100140518
	private void Update(); // 0x100140524
	public void ApplyAlpha(float alpha); // 0x10014053C
}

// Namespace: 
public class SquadDialog : MonoBehaviour // TypeDefIndex: 4415
{
	// Methods
	public void .ctor(); // 0x10014209C
}

// Namespace: 
public class SquadDiplomacyElement : MonoBehaviour // TypeDefIndex: 4416
{
	// Fields
	public tk2dTextMesh squadName; // 0x18
	public tk2dSprite squadIcon; // 0x20
	public tk2dTextMesh members; // 0x28
	public GameObject PlayersInSquadIcon; // 0x30
	public tk2dTextMesh rank; // 0x38
	public tk2dTextMesh rankWeek; // 0x40
	public tk2dTextMesh status; // 0x48
	public tk2dTextMesh posemesh; // 0x50
	public GameObject points; // 0x58
	public GameObject squadControlButton; // 0x60
	public tk2dUIItem squadInviteButton; // 0x68
	public tk2dUIItem squadRejectButton; // 0x70
	public tk2dSlicedSprite border; // 0x78
	public GameObject fill; // 0x80
	public int squad_id; // 0x88
	public Button SquadButton; // 0x90
	public Transform squadData; // 0x98
	public float borderX; // 0xA0
	public BoxCollider buttonCol; // 0xA8
	public GameObject BlackBG; // 0xB0
	public bool foundonserver; // 0xB8
	public bool ismyself; // 0xB9
	public GameObject LoadingGO; // 0xC0
	private tk2dCamera guicamera; // 0xC8

	// Methods
	public void .ctor(); // 0x1001420A4
	private void Awake(); // 0x1001420B4
	public void Setup(); // 0x10014218C
	public void Init(SquadAlliance squadAlliance, int number, bool squadControlButtonActive); // 0x1001424EC
	private void OnInvite(); // 0x100142990
	private void OnReject(); // 0x100142AB4
	private void OnEnable(); // 0x100142BD8
	private void OnSquadButton(); // 0x1001430C4
	public void OnRefreshLocalization(); // 0x1001432B0
	private void OnDestroy(); // 0x1001433A4
}

// Namespace: 
public class SquadInviteButton : MonoBehaviour // TypeDefIndex: 4417
{
	// Fields
	private tk2dUIItem button; // 0x18

	// Methods
	public void .ctor(); // 0x100143E5C
	private void Start(); // 0x100143E64
	private void HandleOnClick(); // 0x100143F0C
	private void Update(); // 0x1001440E0
}

// Namespace: 
public class SquadInviteRow : MonoBehaviour // TypeDefIndex: 4418
{
	// Fields
	private tk2dCamera guicamera; // 0x18
	public tk2dSlicedSprite border; // 0x20
	public GameObject[] element; // 0x28
	public float Multiplier; // 0x30
	public tk2dSprite squadEmblem; // 0x38
	public tk2dTextMesh squadName; // 0x40
	public tk2dTextMesh squadRankpoint; // 0x48
	public tk2dSprite userBadge; // 0x50
	public tk2dSprite userFlag; // 0x58
	public tk2dSprite userAvatar; // 0x60
	public tk2dTextMesh userName; // 0x68
	public Button ProfileButton; // 0x70
	public int squad_id; // 0x78

	// Methods
	public void .ctor(); // 0x1001440E4
	private void OnEnable(); // 0x1001440F8
	public void Init(int battle); // 0x1001440FC
	private void Awake(); // 0x100144100
	private void OnProfileButton(); // 0x100144258
	private void OnDestroy(); // 0x1001443B4
}

// Namespace: 
public class SquadInviteShortRow : MonoBehaviour // TypeDefIndex: 4419
{
	// Fields
	private tk2dCamera guicamera; // 0x18
	public tk2dSlicedSprite border; // 0x20
	public GameObject[] element; // 0x28
	public float Multiplier; // 0x30
	public tk2dSprite squadEmblem; // 0x38
	public tk2dTextMesh squadName; // 0x40
	public tk2dSprite userBadge; // 0x48
	public tk2dSprite userFlag; // 0x50
	public tk2dSprite userAvatar; // 0x58
	public tk2dTextMesh userName; // 0x60
	public Button ProfileButton; // 0x68
	public int squad_id; // 0x70

	// Methods
	public void .ctor(); // 0x10014450C
	private void OnEnable(); // 0x100144514
	public void Init(); // 0x100144518
	private void Awake(); // 0x10014451C
	private void OnProfileButton(); // 0x100144674
	private void OnDestroy(); // 0x1001447D0
}

// Namespace: 
public class SquadJoinButton : MonoBehaviour // TypeDefIndex: 4420
{
	// Fields
	private tk2dUIItem button; // 0x18
	public tk2dTextMesh nickMesh; // 0x20

	// Methods
	public void .ctor(); // 0x100144928
	private void Start(); // 0x100144930
	private void OnDestroy(); // 0x100144ACC
	private void OnJoinSquadOk(); // 0x100144C08
	private void HandleOnClick(); // 0x100144D10
	private void OnSquadJoinBlock(); // 0x100144D94
	private void OnRemoveBlock(); // 0x100145228
	private void OnSquadJoin(); // 0x100144FE0
	private void Update(); // 0x1001452F8
	private void <OnSquadJoinBlock>m__160(); // 0x1001452FC
}

// Namespace: 
public class SquadMenuInitialization : MonoBehaviour // TypeDefIndex: 4421
{
	// Fields
	public tk2dUIItem button; // 0x18
	public bool MySquadInitialization; // 0x20
	public MenuMainRatingsSquad menumainratings; // 0x28
	public int menumainratingsElement; // 0x30
	public bool cantClick; // 0x34

	// Methods
	public void .ctor(); // 0x100145300
	private void OnEnable(); // 0x100145308
	private void MenuMainRatingsProfile(); // 0x100145434
	private void MySquad(); // 0x10014551C
	private void OnDisable(); // 0x100145728
}

// Namespace: 
public class SquadMenuTab : MonoBehaviour // TypeDefIndex: 4422
{
	// Fields
	public Sections section; // 0x18

	// Methods
	public void .ctor(); // 0x1001457D0
}

// Namespace: 
public class SquadPairRow : MonoBehaviour // TypeDefIndex: 4423
{
	// Fields
	private SquadRow left; // 0x18
	private SquadRow right; // 0x20

	// Methods
	public void .ctor(); // 0x1001457D8
	public void set_pair(Pair value); // 0x1001457E0
}

// Namespace: 
public class SquadPlayerElement : MonoBehaviour // TypeDefIndex: 4424
{
	// Fields
	public int Number; // 0x18
	public PlayerStatus Status; // 0x1C
	public int FlagID; // 0x20
	private int AvatarID; // 0x24
	private int goose; // 0x28
	public string NickName; // 0x30
	public int WeeklyPoints; // 0x38
	public long Points; // 0x40
	public long AllTimePoints; // 0x48
	public GameObject Highlight; // 0x50
	public tk2dSprite IconFlag; // 0x58
	public tk2dSprite IconBadge; // 0x60
	public tk2dSprite IconAvatar; // 0x68
	public tk2dTextMesh NumberTextMesh; // 0x70
	public GameObject IsOnline; // 0x78
	public LocalizationTextMesh StatusTextMesh; // 0x80
	public tk2dTextMesh NameTextMesh; // 0x88
	public tk2dTextMesh WeeklyPointsTextMesh; // 0x90
	public tk2dTextMesh PointsTextMesh; // 0x98
	public tk2dUIItem MenuButton; // 0xA0
	public GameObject MenuLeave; // 0xA8
	public GameObject MenuPromoteDemote; // 0xB0
	public GameObject MenuPromoteDismiss; // 0xB8
	public GameObject MenuDemote; // 0xC0
	public GameObject MenuNew; // 0xC8
	public tk2dUIItem LeaveSquadButton; // 0xD0
	public tk2dUIItem DismissButton; // 0xD8
	public tk2dUIItem InviteButton; // 0xE0
	public tk2dUIItem RejectButton; // 0xE8
	public Button ProfileButton; // 0xF0
	public tk2dUIItem[] PromoteButtons; // 0xF8
	public tk2dUIItem[] DemoteButton; // 0x100
	public tk2dUIItem[] MenuCloseButtons; // 0x108
	public GameObject LoadingGO; // 0x110
	private Action OnYesCommander; // 0x118
	private Action OnNoCommander; // 0x120
	private int userID; // 0x128
	private GameObject currentMenu; // 0x130
	private bool currentPlayer; // 0x138
	private readonly Color newColor; // 0x13C
	private readonly Color newArrowColor; // 0x14C
	private readonly Color currentPlayerColor; // 0x15C
	private static OnSocketServerDgt <>f__am$cache2A; // 0x0

	// Methods
	public void .ctor(); // 0x100145958
	private void Awake(); // 0x100145A50
	private void OnDestroy(); // 0x100145E30
	public void Init(SquadMember member, int playerStatus, int number, int _WeeklyPoints); // 0x100146210
	public void Init(SquadRequest member, int playerStatus); // 0x100146AC4
	private void UpdateVisuals(); // 0x10014663C
	private void OnProfileButton(); // 0x100146B54
	private void OnMenuButton(); // 0x100146D04
	private void OnMenuCloseButton(); // 0x100146D48
	private void OnLeaveSquadButton(); // 0x100146D8C
	private void LeaveSquad(); // 0x100147044
	private void OnPromoteButton(); // 0x1001471D8
	private void SignalTriger(); // 0x100147420
	private void Promote(); // 0x100147378
	private void OnDemoteButton(); // 0x1001474C8
	private void OnDismissButton(); // 0x100147578
	private void Dismiss(); // 0x1001476F0
	private void OnInviteButton(); // 0x10014778C
	private void OnRejectButton(); // 0x100147830
	private void <OnLeaveSquadButton>m__161(); // 0x1001478D4
	private static void <LeaveSquad>m__162(); // 0x1001478D8
	private void <OnPromoteButton>m__163(); // 0x100147D20
	private void <OnDismissButton>m__164(); // 0x100147D24
}

// Namespace: 
public sealed class PlayerStatus : Enum // TypeDefIndex: 4425
{
	// Fields
	public int value__; // 0x10
	public const PlayerStatus STATUS_RECRUIT = 0; // 0x0
	public const PlayerStatus STATUS_MEMBER = 1; // 0x0
	public const PlayerStatus STATUS_OFFICER = 2; // 0x0
	public const PlayerStatus STATUS_VICE_COMMANDER = 3; // 0x0
	public const PlayerStatus STATUS_COMMANDER = 4; // 0x0
	public const PlayerStatus STATUS_NEW = 5; // 0x0

}

// Namespace: 
public class SquadRequestElement : MonoBehaviour // TypeDefIndex: 4426
{
	// Fields
	public int Number; // 0x18
	public int FlagID; // 0x1C
	private int AvatarID; // 0x20
	private int goose; // 0x24
	public string NickName; // 0x28
	public long WeeklyPoints; // 0x30
	public long Points; // 0x38
	public long AllTimePoints; // 0x40
	public GameObject Highlight; // 0x48
	public tk2dSprite IconFlag; // 0x50
	public tk2dSprite IconBadge; // 0x58
	public tk2dSprite IconAvatar; // 0x60
	public tk2dTextMesh NumberTextMesh; // 0x68
	public tk2dTextMesh NameTextMesh; // 0x70
	public tk2dTextMesh WeeklyPointsTextMesh; // 0x78
	public tk2dTextMesh PointsTextMesh; // 0x80
	public Button ProfileButton; // 0x88
	public GameObject LoadingGO; // 0x90
	public tk2dUIItem squadInviteButton; // 0x98
	public tk2dUIItem squadRejectButton; // 0xA0
	private Action OnYesCommander; // 0xA8
	private Action OnNoCommander; // 0xB0
	private int userID; // 0xB8
	private GameObject currentMenu; // 0xC0
	private bool currentPlayer; // 0xC8
	private readonly Color newColor; // 0xCC
	private readonly Color newArrowColor; // 0xDC
	private readonly Color currentPlayerColor; // 0xEC

	// Methods
	public void .ctor(); // 0x100148280
	private void Awake(); // 0x100148360
	private void OnDestroy(); // 0x100148504
	public void Init(SquadMember member, int playerStatus, int number); // 0x1001486A8
	public void Init(SquadRequest member, int playerStatus, int number); // 0x1001489B0
	private void UpdateVisuals(); // 0x1001486F8
	private void OnProfileButton(); // 0x100148C68
	private void OnInvite(); // 0x100148E18
	private void OnReject(); // 0x100148EC8
}

// Namespace: 
public class SquadRow : MonoBehaviour // TypeDefIndex: 4427
{
	// Fields
	public tk2dTextMesh squadName; // 0x18
	public tk2dSprite squadIcon; // 0x20
	public tk2dTextMesh rank; // 0x28

	// Methods
	public void .ctor(); // 0x100148F78
}

// Namespace: 
public class SquadRoyalOrRoyalButton : MonoBehaviour // TypeDefIndex: 4428
{
	// Fields
	public LocalizationTextMesh text; // 0x18
	public tk2dTextMesh sub; // 0x20
	private int cup2; // 0x28
	private int cup9; // 0x2C
	private StateChecker`1<int> stateChecker; // 0x30
	private StateChecker`1<int> stateChecker2; // 0x38
	private float oldtime; // 0x40

	// Methods
	public void .ctor(); // 0x100148F80
	private void Prepare(); // 0x100148F88
	private void Start(); // 0x100149010
	private void Update(); // 0x100149210
}

// Namespace: 
public class SquadWarElement : MonoBehaviour // TypeDefIndex: 4429
{
	// Fields
	public tk2dTextMesh Date; // 0x18
	public tk2dTextMesh SquadName; // 0x20
	public tk2dTextMesh Kills1; // 0x28
	public tk2dTextMesh Kills2; // 0x30
	public tk2dTextMesh Deaths1; // 0x38
	public tk2dTextMesh Deaths2; // 0x40
	public tk2dSprite WhoWon; // 0x48
	public tk2dSprite Emblem; // 0x50
	private readonly Color lossColor; // 0x58

	// Methods
	public void .ctor(); // 0x10014A7C0
	public void Init(string date, string name, int kills1, int kills2, int deaths1, int deaths2, int emblem, optional bool weWon); // 0x10014A800
}

// Namespace: 
public class SquadsInviteMenu : MonoBehaviour // TypeDefIndex: 4430
{
	// Fields
	public GameObject loadinggo; // 0x18
	public GameObject contentgo; // 0x20
	public GameObject squadsInvitePrefab; // 0x28
	public tk2dUIScrollableArea scroll; // 0x30
	public tk2dSlicedSprite border; // 0x38
	public GameObject baseSquadsInviteElement; // 0x40
	private bool inprocess; // 0x48
	private long updateTime; // 0x50
	private static Action`1<GameObject> <>f__am$cache8; // 0x0

	// Methods
	public void .ctor(); // 0x100149830
	private void OnEnable(); // 0x100149838
	public void On(); // 0x100149D20
	public void Reset(); // 0x100149948
	private void OnDisable(); // 0x100149DC4
	private IEnumerator GetItems(); // 0x100149D58
	private void OnGetItems(); // 0x100149E28
	private void Update(); // 0x10014A3AC
	private IEnumerator Refresh(); // 0x10014A3B0
	private static void <Reset>m__165(GameObject child); // 0x10014A424
}

// Namespace: 
private sealed class <GetItems>c__Iterator93 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4431
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal SquadsInviteMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100149E20
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10014A490
	private object System.Collections.IEnumerator.get_Current(); // 0x10014A498
	public bool MoveNext(); // 0x10014A4A0
	public void Dispose(); // 0x10014A5AC
	public void Reset(); // 0x10014A5B8
}

// Namespace: 
private sealed class <Refresh>c__Iterator94 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4432
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal SquadsInviteMenu <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10014A41C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10014A60C
	private object System.Collections.IEnumerator.get_Current(); // 0x10014A614
	public bool MoveNext(); // 0x10014A61C
	public void Dispose(); // 0x10014A760
	public void Reset(); // 0x10014A76C
}

// Namespace: 
public class StageChecker : MonoBehaviour // TypeDefIndex: 4433
{
	// Fields
	public int stage; // 0x18
	public Items item; // 0x1C

	// Methods
	public void .ctor(); // 0x10014B3F8
	private void OnEnable(); // 0x10014B408
}

// Namespace: 
public class StaminaBar : MonoBehaviour // TypeDefIndex: 4434
{
	// Fields
	public Transform[] fillBars; // 0x18
	private int oldValue; // 0x20

	// Methods
	public void .ctor(); // 0x10014B8B8
	private void Start(); // 0x10014B924
	private void Update(); // 0x10014BB08
	public void SetBars(); // 0x10014B994
}

// Namespace: 
public class StaminaValueToTextMesh : MonoBehaviour // TypeDefIndex: 4435
{
	// Methods
	public void .ctor(); // 0x10014BBB0
	private void Start(); // 0x10014BBB8
}

// Namespace: 
public class StarterPack // TypeDefIndex: 4436
{
	// Fields
	private static Func`2<SASku2, bool> <>f__am$cache0; // 0x0

	// Methods
	public void .ctor(); // 0x10014BCBC
	public static bool get_IsActive(); // 0x10014BCC4
	private static bool <get_IsActive>m__166(SASku2 sku); // 0x10014BDFC
}

// Namespace: 
public class StarterPackBtn : MonoBehaviour // TypeDefIndex: 4437
{
	// Fields
	public tk2dTextMesh time; // 0x18
	public GameObject content; // 0x20
	private static Action <>f__am$cache2; // 0x0

	// Methods
	public void .ctor(); // 0x10014BE08
	private void OnEnable(); // 0x10014BE10
	private void OnDisable(); // 0x10014C008
	private void OnItemInstalled(int type); // 0x10014C1DC
	private void Start(); // 0x10014C218
	private void Update(); // 0x10014C2EC
	private static void <Start>m__167(); // 0x10014C43C
}

// Namespace: 
public class StarterPackDialog : DialogBasic // TypeDefIndex: 4438
{
	// Fields
	public tk2dUIItem backButton; // 0x98

	// Methods
	public void .ctor(); // 0x10014C4D4
	private void OnBack(); // 0x10014C53C
	public override void Start(); // 0x10014C588
	private void OnEnable(); // 0x10014C624
	private void OnDisable(); // 0x10014C82C
	private void OnItemInstalled(int type); // 0x10014CA00
}

// Namespace: 
public class Achievement // TypeDefIndex: 4439
{
	// Fields
	public int id; // 0x10
	public int stage; // 0x14
	public int amount; // 0x18
	public string name; // 0x20
	public string name_gc; // 0x28
	public string reward_type; // 0x30
	public int reward_value; // 0x38
	public int sort_pos; // 0x3C
	public int category; // 0x40
	public bool cycle_last; // 0x44
	public int[] reward_vip; // 0x48
	private bool m_shown; // 0x50
	private static Dictionary`2<string, int> <>f__switch$mapA; // 0x0

	// Methods
	public void .ctor(JSONNode o); // 0x100041C74
	public bool get_shown(); // 0x1000424D8
	public void set_shown(bool value); // 0x1000424E0
}

// Namespace: 
public class AchievementStages // TypeDefIndex: 4440
{
	// Fields
	public int current_stage; // 0x10
	public int rewarded_stage; // 0x14
	public Achievement[] achievements; // 0x18
	public int progress; // 0x20
	public int sort_pos; // 0x24
	public int base_sort_pos; // 0x28

	// Methods
	public void .ctor(); // 0x1000446FC
	public Achievement get_Item(int index); // 0x100046590
	public Achievement get_Current(); // 0x100043200
	public string get_IconName(); // 0x1000465D4
	public Stage get_stage(); // 0x1000431B0
}

// Namespace: 
public sealed class Stage : Enum // TypeDefIndex: 4441
{
	// Fields
	public int value__; // 0x10
	public const Stage InProgress = 0; // 0x0
	public const Stage GetReward = 1; // 0x0
	public const Stage Completed = 2; // 0x0

}

// Namespace: 
public class Achievements // TypeDefIndex: 4442
{
	// Fields
	public Dictionary`2<int, AchievementStages> achievements; // 0x10
	public List`1<AchievementStages> sorted_achievements; // 0x18
	public int max_count; // 0x20
	private static JSONNode node; // 0x0
	private static bool IsReportAchievementInProgress; // 0x8
	private static Comparison`1<AchievementStages> <>f__am$cache5; // 0x10
	private static Comparison`1<AchievementStages> <>f__am$cache6; // 0x18

	// Methods
	public void .ctor(ISFSArray acp); // 0x100043A94
	private static void .cctor(); // 0x100044704
	public static void Setup(ISFSObject responseData); // 0x100044708
	public int GetCompletedStages(optional int category); // 0x1000449BC
	public int GetTotalNumberOfStages(optional int category); // 0x100044C18
	public void SortAchievements(); // 0x100044E48
	public static void OnAchievementProgress(ISFSObject o); // 0x100045150
	public static void OnAchievementReward(ISFSObject o); // 0x1000453BC
	public void CheckAchievementsToReport(); // 0x1000456E8
	public void ReportSingleAchievement(int id); // 0x100045CBC
	private IEnumerable WaitForResult(); // 0x1000462B8
	private static int <Achievements>m__168(AchievementStages a, AchievementStages b); // 0x10004632C
	private static int <SortAchievements>m__169(AchievementStages a, AchievementStages b); // 0x100046354
}

// Namespace: 
private sealed class <WaitForResult>c__Iterator95 : IEnumerator, IDisposable, IEnumerable, IEnumerator`1<object>, IEnumerable`1<object> // TypeDefIndex: 4443
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Methods
	public void .ctor(); // 0x100046324
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10004637C
	private object System.Collections.IEnumerator.get_Current(); // 0x100046384
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x10004638C
	private IEnumerator`1<object> System.Collections.Generic.IEnumerable<object>.GetEnumerator(); // 0x100046390
	public bool MoveNext(); // 0x100046410
	public void Dispose(); // 0x100046530
	public void Reset(); // 0x10004653C
}

// Namespace: 
public class AllianceQualification // TypeDefIndex: 4444
{
	// Fields
	public int max_rounds; // 0x10
	public int qualify_winner; // 0x14
	public long server_time; // 0x18
	public int qualify_round; // 0x20
	public bool qualify_active; // 0x24
	public int qualify_time; // 0x28
	public int round_start; // 0x2C
	public long round_start_ms; // 0x30
	private Pair[] pairs; // 0x38
	public Room[] rooms; // 0x40

	// Methods
	public void .ctor(ISFSObject response); // 0x10005D278
	public Pair[] Pairs(); // 0x10005D954
	public Pair MyPair(); // 0x10005D95C
}

// Namespace: 
public class Pair : ISFSTranform // TypeDefIndex: 4445
{
	// Fields
	public int id_1; // 0x10
	public int id_2; // 0x14
	public int score_1; // 0x18
	public int score_2; // 0x1C
	public int winner; // 0x20
	public string name_1; // 0x28
	public string name_2; // 0x30
	public int emblem_1; // 0x38
	public int emblem_2; // 0x3C

	// Methods
	public void .ctor(); // 0x10005DAE0
	public void Setup(ISFSObject response); // 0x10005DAE8
	public bool IsFreeSpace(int id, Room room, int max_team_members); // 0x10005E034
}

// Namespace: 
public class Room : ISFSTranform // TypeDefIndex: 4446
{
	// Fields
	public int team_1; // 0x10
	public int team_2; // 0x14
	public int score; // 0x18

	// Methods
	public void .ctor(); // 0x10005E084
	public void Setup(ISFSObject response); // 0x10005E08C
}

// Namespace: 
private sealed class <MyPair>c__AnonStorey107 // TypeDefIndex: 4447
{
	// Fields
	internal int alliance_id; // 0x10

	// Methods
	public void .ctor(); // 0x10005DAA0
	internal bool <>m__16A(Pair p); // 0x10005DAA8
}

// Namespace: 
public class AmmoLevel : MonoBehaviour // TypeDefIndex: 4448
{
	// Fields
	public static int AMMOLEVEL; // 0x0
	public static int WEAPONLEVEL; // 0x4
	public static int HELMETLEVEL; // 0x8

	// Methods
	public void .ctor(); // 0x10005EED8
}

// Namespace: 
public class SASku2 // TypeDefIndex: 4449
{
	// Fields
	public int id; // 0x10
	public string sku; // 0x18
	public long start; // 0x20
	public long end; // 0x28
	public int sort_pos; // 0x30
	public int discount_percent; // 0x34
	public int price_without_discount; // 0x38
	public DiscountTypes discount_type; // 0x3C
	public Type type; // 0x40
	public int platform_mask; // 0x44
	public List`1<SASkuData> items; // 0x48

	// Methods
	public void .ctor(ISFSObject o); // 0x1000DE980
	public Type GetMainType(); // 0x1000DEF78
}

// Namespace: 
public sealed class DiscountTypes : Enum // TypeDefIndex: 4450
{
	// Fields
	public int value__; // 0x10
	public const DiscountTypes first = 0; // 0x0
	public const DiscountTypes second = 1; // 0x0
	public const DiscountTypes third = 2; // 0x0

}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4451
{
	// Fields
	public int value__; // 0x10
	public const Type NONE = 0; // 0x0
	public const Type NEW = 1; // 0x0
	public const Type BEST = 2; // 0x0
	public const Type NOW = 3; // 0x0
	public const Type STARTER_PACK = 4; // 0x0
	public const Type BOX = 5; // 0x0

}

// Namespace: 
public class SASkuData // TypeDefIndex: 4452
{
	// Fields
	public int id; // 0x10
	public int sku_id; // 0x14
	public Type type; // 0x18
	public int item_type; // 0x1C
	public int amount; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x1000DEFDC
}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4453
{
	// Fields
	public int value__; // 0x10
	public const Type UNKNOWN = 0; // 0x0
	public const Type DOLLARS = 1; // 0x0
	public const Type CRYSTALS = 2; // 0x0
	public const Type WCAMO = 3; // 0x0
	public const Type HCAMO = 4; // 0x0
	public const Type HANDLING = 5; // 0x0
	public const Type AERO = 6; // 0x0
	public const Type BOOSTER = 7; // 0x0
	public const Type RIFLE = 8; // 0x0
	public const Type HELMET = 9; // 0x0
	public const Type AVATAR = 10; // 0x0
	public const Type BOOSTERS = 11; // 0x0
	public const Type AVATARPACK = 12; // 0x0
	public const Type CUP = 13; // 0x0
	public const Type FLAG = 14; // 0x0
	public const Type FLAGPACK = 15; // 0x0
	public const Type SMARTRIFLE = 16; // 0x0
	public const Type SMARTHELMET = 17; // 0x0

}

// Namespace: 
public static class Skus // TypeDefIndex: 4454
{
	// Fields
	private static List`1<SASku2> items; // 0x0
	private static List`1<SASkuData> sku_data; // 0x8
	private static Func`2<SASku2, string> <>f__am$cache2; // 0x10
	private static Func`2<SASku2, string> <>f__am$cache3; // 0x18

	// Methods
	private static void .cctor(); // 0x1001013BC
	public static List`1<SASku2> GetSkus(); // 0x1000D4D70
	public static List`1<SASkuData> GetSkuData(); // 0x100101460
	public static int SetupSkus(ISFSArray skus, ISFSArray a_sku_data); // 0x1001014C8
	public static SASku2 GetSkuViaName(string sku); // 0x1000FE520
	private static string <SetupSkus>m__16C(SASku2 sku); // 0x100101D38
	private static string <SetupSkus>m__16D(SASku2 sku); // 0x100101D50
}

// Namespace: 
private sealed class <SetupSkus>c__AnonStorey108 // TypeDefIndex: 4455
{
	// Fields
	internal SASku2 sku; // 0x10

	// Methods
	public void .ctor(); // 0x100101D30
	internal bool <>m__16B(SASkuData item); // 0x100101D68
}

// Namespace: 
public class Avatar // TypeDefIndex: 4456
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public int req_level; // 0x20
	public int sort_pos; // 0x24

	// Methods
	public void .ctor(ISFSObject o); // 0x1000652C0
}

// Namespace: 
public static class BattleResults // TypeDefIndex: 4457
{
	// Fields
	public static bool iswin; // 0x0
	public static int dollars; // 0x4
	public static int crystals; // 0x8
	public static int rankpoints; // 0xC
	public static int experience; // 0x10
	public static int stamina; // 0x14
	public static int shoots; // 0x18
	public static int kills; // 0x1C
	public static double accuary; // 0x20
	public static int headshoots; // 0x28
	public static int deaths; // 0x2C
	public static bool blitzkrieg; // 0x30
	public static bool coldblood; // 0x31
	public static bool best; // 0x32
	public static ISFSArray popups; // 0x38
	public static int applovin; // 0x40
	public static int goose_penalty; // 0x44
	public static int prev_weapon_camo; // 0x48
	public static int prev_weapon_handling; // 0x4C
	public static int prev_helmet_camo; // 0x50
	public static int prev_helmet_aero; // 0x54

	// Methods
	public static Reward GetReward(); // 0x100067158
	public static ISFSObject GetPopupData(); // 0x1000671BC
	public static void NextPopup(); // 0x100067838
	public static string GetPopupType(); // 0x1000679BC
	public static bool IsQuest(); // 0x100067AC8
	public static bool IsLevelUp(); // 0x100067B44
	public static bool IsRankUp(); // 0x100067BC0
	public static bool IsNewWeapon(); // 0x100067C3C
	public static bool IsNewHelmet(); // 0x100067CB8
	public static bool IsNewTuning(); // 0x100067D34
	public static bool IsNewMap(); // 0x100067DB0
	public static bool IsRateApp(); // 0x100067E2C
	public static bool IsDailyReward(); // 0x100067EA8
	public static bool IsContractCompleted(); // 0x100067F24
	public static bool IsNewContract(); // 0x100067FA0
	public static bool IsContractProlonged(); // 0x10006801C
	public static bool IsContractProlongFailed(); // 0x100068098
	public static bool IsEmployerRefund(); // 0x100068114
	public static bool IsEmployerReward(); // 0x100068190
	public static bool IsStarterPack(); // 0x10006820C
	public static string GetPopupRewardType(); // 0x100068288
	public static int GetPopupRewardTuningType(); // 0x1000684DC
	public static int GetPopupQuestID(); // 0x100068608
	public static TuningGroups GetPopupRewardTuningGroup(); // 0x100068734
	public static int GetPopupRewardValue(); // 0x100068918
	public static MoneyTypes GetPopupMoneyType(); // 0x1000683D0
	public static int GetPopupMoneyValue(); // 0x100068A40
	public static int GetPopupItemType(); // 0x100068B4C
	public static int GetPopupTuningType(); // 0x100068C58
	public static TuningGroups GetPopupTuningGroup(); // 0x100068D64
	public static string GetPopupMapName(); // 0x100068E70
	public static int GetPopupEventValue(); // 0x100068F7C
	public static int GetPopupDayValue(); // 0x100069088
}

// Namespace: 
public class Reward // TypeDefIndex: 4458
{
	// Fields
	public int dollars; // 0x10
	public int crystals; // 0x14
	public int booster_1; // 0x18
	public int booster_2; // 0x1C
	public int booster_3; // 0x20
	public int rankpoints; // 0x24
	public int experience; // 0x28

	// Methods
	public void .ctor(ISFSObject o); // 0x1000673F4
}

// Namespace: 
public class BattleResultsData : MonoBehaviour // TypeDefIndex: 4459
{
	// Methods
	public void .ctor(); // 0x100069194
	private void Start(); // 0x10006919C
	private void Update(); // 0x1000691A0
}

// Namespace: 
public class Booster // TypeDefIndex: 4460
{
	// Fields
	public int id; // 0x10
	public Types type; // 0x14
	public string name; // 0x18
	public int amount; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x100070230
}

// Namespace: 
public sealed class Types : Enum // TypeDefIndex: 4461
{
	// Fields
	public int value__; // 0x10
	public const Types health = 0; // 0x0
	public const Types bullet = 1; // 0x0
	public const Types location = 2; // 0x0

}

// Namespace: 
public class ChatRegion : IComparable`1<ChatRegion> // TypeDefIndex: 4462
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public int sort_pos; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x1001F8268
	public int CompareTo(ChatRegion that); // 0x1001F8490
}

// Namespace: 
public class ChatRegionLanguage // TypeDefIndex: 4463
{
	// Fields
	public int region; // 0x10
	public string country; // 0x18
	public string language; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x1001F87D0
}

// Namespace: 
public class ChatRoom // TypeDefIndex: 4464
{
	// Fields
	public const int TYPE_COMMON = 0; // 0x0
	public const int TYPE_SQUAD = 1; // 0x0
	public const int TYPE_ALLIANCE = 2; // 0x0
	public static HashSet`1<int> chatBlock; // 0x0
	public static List`1<ChatRoomMessage> messages; // 0x8
	public static int[] new_message_count; // 0x10
	private static int current_room; // 0x18
	public static int user_count; // 0x1C

	// Methods
	public void .ctor(); // 0x1001F89F8
	private static void .cctor(); // 0x1001F8A00
	public static void SwitchRoom(int room); // 0x1001F8AE0
	public static int GetCurrentRoom(); // 0x1001F5EA8
	public static void ClearMessages(); // 0x1001F8BF4
	public static void UpdateMessages(ISFSArray m); // 0x1001F8C80
	public static bool AddMessage(ISFSObject o); // 0x1001F9918
	public static void ResetCounter(); // 0x1001F75A4
	public static void ResetRoom(); // 0x1001F9AB8
}

// Namespace: 
public class ChatRoomMessage // TypeDefIndex: 4465
{
	// Fields
	public int id; // 0x10
	public int user_id; // 0x14
	public int squad_id; // 0x18
	public int title_id; // 0x1C
	public int avatar_id; // 0x20
	public int flag_id; // 0x24
	public int time; // 0x28
	public string name; // 0x30
	public string squad_name; // 0x38
	public string text; // 0x40
	public int to_id; // 0x48
	public string to_name; // 0x50
	public string to_squad_name; // 0x58
	public bool is_merc; // 0x60
	public int merc_league; // 0x64
	public int goose; // 0x68
	public int t_own; // 0x6C

	// Methods
	public void .ctor(ISFSObject o); // 0x1001F8F80
}

// Namespace: 
public class Checkers : MonoBehaviour // TypeDefIndex: 4466
{
	// Methods
	public void .ctor(); // 0x1001FCB14
	public static bool IsWeaponsInDelivery(); // 0x1001FCB1C
	public static bool IsWeaponPartsInDelivery(); // 0x1001FCC70
	public static bool IsHelmetsIndelivery(); // 0x1001FCE70
	public static bool IsHelmetPartsIndelivery(); // 0x1001FCFC4
}

// Namespace: 
public class Contract // TypeDefIndex: 4467
{
	// Fields
	public int id; // 0x10
	public int employer_id; // 0x14
	public int merc_id; // 0x18
	public int cost; // 0x1C
	public int goal; // 0x20
	public int progress; // 0x24
	public int start; // 0x28
	public int end; // 0x2C
	public int result; // 0x30
	public bool squad_cup; // 0x34
	public int commission; // 0x38
	public int rewarded; // 0x3C
	public int next_contract; // 0x40
	public string employer_name; // 0x48
	public int employer_squad_id; // 0x50
	public string employer_squad_name; // 0x58
	public long employer_rankpoints; // 0x60
	public int employer_avatar_id; // 0x68
	public int employer_flag_id; // 0x6C
	public bool prolonged; // 0x70
	public int employer_goose; // 0x74

	// Methods
	public void .ctor(ISFSObject o); // 0x1001FFDC4
	public bool IsActive(); // 0x10020C9D0
	public bool IsProlonged(); // 0x10020C9E4
	public bool IsCompleted(); // 0x10020C9F4
	public bool IsFailed(); // 0x10020CA04
}

// Namespace: 
public class ContractCommission // TypeDefIndex: 4468
{
	// Fields
	public int squad_cup; // 0x10
	public int contracts; // 0x14
	public int commission; // 0x18

	// Methods
	public void .ctor(ISFSObject o); // 0x10020CA14
}

// Namespace: 
public static class Contracts // TypeDefIndex: 4469
{
	// Fields
	private static List`1<Contract> contracts; // 0x0
	private static int activeContracts; // 0x8

	// Methods
	private static void .cctor(); // 0x10020CC3C
	public static ReadOnlyCollection`1<Contract> GetContracts(); // 0x10020CCBC
	public static int Count(); // 0x10020CD38
	public static int CountActive(); // 0x10020CDB4
	public static void SetContracts(ISFSArray _contracts); // 0x10020CE1C
	public static void AddContract(ISFSObject _contract); // 0x10020D2DC
}

// Namespace: 
public class CupRating // TypeDefIndex: 4470
{
	// Fields
	public int flag_id; // 0x10
	public int[] cups; // 0x18
	public long rankpoints; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x10020F7F0
}

// Namespace: 
public class DailyQuestSimple // TypeDefIndex: 4471
{
	// Fields
	public int progress; // 0x10
	public int amount; // 0x14
	public string name; // 0x18

	// Methods
	public void .ctor(int progress, int amount, string name); // 0x100213F1C
	public void .ctor(DailyQuest q); // 0x100213F5C
}

// Namespace: 
public class DailyQuest // TypeDefIndex: 4472
{
	// Fields
	public int id; // 0x10
	public int type; // 0x14
	public int amount; // 0x18
	public int param1; // 0x1C
	public int param2; // 0x20
	public int difficulty; // 0x24
	public string map; // 0x28
	public bool one_battle; // 0x30
	public int headshot; // 0x34
	public bool death; // 0x38
	public bool unique; // 0x39
	public int helmet_type; // 0x3C
	public int weapon_type; // 0x40
	public int weapon_camo; // 0x44
	public int weapon_handling; // 0x48
	public int helmet_camo; // 0x4C
	public int helmet_aero; // 0x50
	public string reward_type; // 0x58
	public int reward_amount; // 0x60
	public int reward_tuning; // 0x64
	public Dictionary`2<string, string> desc; // 0x68
	public int progress; // 0x70

	// Methods
	public void .ctor(ISFSObject o); // 0x1002123E0
	public string get_name(); // 0x1002134CC
	public bool IsCompleted(); // 0x100213570
	public bool IsStarted(); // 0x100213594
}

// Namespace: 
public class DailyReward // TypeDefIndex: 4473
{
	// Fields
	public int day; // 0x10
	public int event_type; // 0x14
	public int dollars; // 0x18
	public int crystals; // 0x1C
	public int boosters; // 0x20
	public int weapon_camo; // 0x24
	public int weapon_handling; // 0x28
	public int helmet_camo; // 0x2C
	public int helmet_aero; // 0x30
	public int tuning_amount; // 0x34
	public bool cup_1; // 0x38
	public bool cup_3; // 0x39
	public bool received; // 0x3A

	// Methods
	public void .ctor(int event_type, int day); // 0x100213FA8
	public void .ctor(DailyReward reward); // 0x100213FE0
	public void .ctor(ISFSObject o); // 0x100214048
	public RewardType GetRewardTypes(); // 0x100214748
	public void Get(); // 0x1002147A0
}

// Namespace: 
public sealed class EventType : Enum // TypeDefIndex: 4474
{
	// Fields
	public int value__; // 0x10
	public const EventType LOGIN = 1; // 0x0
	public const EventType PLAY = 2; // 0x0
	public const EventType WIN = 3; // 0x0

}

// Namespace: 
public sealed class RewardType : Enum // TypeDefIndex: 4475
{
	// Fields
	public int value__; // 0x10
	public const RewardType NONE = 0; // 0x0
	public const RewardType DOLLARS = 1; // 0x0
	public const RewardType CRYSTALS = 2; // 0x0
	public const RewardType BOOSTERS = 4; // 0x0
	public const RewardType TUNING_AMOUNT = 8; // 0x0
	public const RewardType CUP_1 = 16; // 0x0
	public const RewardType CUP_3 = 32; // 0x0

}

// Namespace: 
public static class DisplayMetricsUtil // TypeDefIndex: 4476
{
	// Fields
	private const float DEFAULT_DPI = 160; // 0x0
	private static bool isScreenSizeInitialized; // 0x0
	private static Rect ScreenSize; // 0x4

	// Methods
	private static void .cctor(); // 0x100226790
	public static Vector2 DpToPixel(Vector2 vector); // 0x100226794
	public static Vector3 DpToPixel(Vector3 vector); // 0x1002268B4
	public static Rect DpToPixel(Rect rect); // 0x10022697C
	public static int DpToPixel(int dp); // 0x100226A74
	public static int DpToPixel(float dp); // 0x100226838
	public static int PixelToDp(int px); // 0x100226B58
	public static int PixelToDp(float px); // 0x100226BD0
	public static GUIStyle DpToPixel(GUIStyle style); // 0x100226C4C
	public static RectOffset DpToPixel(RectOffset rectOffset); // 0x100226DEC
	public static Rect ScreenSizeDpUnit(); // 0x100226EF8
	public static ResolutionType GetResolutionType(); // 0x10022701C
	public static float GetDPI(); // 0x1002270BC
	private static float GetScale(); // 0x100226AEC
}

// Namespace: 
public sealed class ResolutionType : Enum // TypeDefIndex: 4477
{
	// Fields
	public int value__; // 0x10
	public const ResolutionType ldpi = 0; // 0x0
	public const ResolutionType mdpi = 1; // 0x0
	public const ResolutionType hdpi = 2; // 0x0
	public const ResolutionType xhdpi = 3; // 0x0

}

// Namespace: 
public class Drone // TypeDefIndex: 4478
{
	// Fields
	public int type; // 0x10
	public string name; // 0x18
	public GameObject model; // 0x20
	public int cup; // 0x28
	public static List`1<Drone> drones; // 0x0
	public static int active; // 0x8

	// Methods
	public void .ctor(int type, int cup); // 0x100227264
	private static void .cctor(); // 0x1002272BC
	public static Drone GetViaType(int type); // 0x10022750C
}

// Namespace: 
public class Emblem // TypeDefIndex: 4479
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public int req_level; // 0x20
	public int sort_pos; // 0x24

	// Methods
	public void .ctor(ISFSObject o); // 0x10022A1B8
}

// Namespace: 
public static class EnemyCharacter // TypeDefIndex: 4480
{
	// Fields
	public static BundleOptions enemy; // 0x0

	// Methods
	private static void .cctor(); // 0x10022BB98
}

// Namespace: 
public class BundleOptions // TypeDefIndex: 4481
{
	// Fields
	public int version; // 0x10
	public GameObject lyingPrefab; // 0x18
	public GameObject sitPrefab; // 0x20
	public GameObject standPrefab; // 0x28

	// Methods
	public void .ctor(); // 0x10022BC0C
}

// Namespace: 
public static class EnumExtensions // TypeDefIndex: 4482
{
	// Methods
	public static bool HasFlag(Enum variable, Enum value); // 0x10022DC64
	public static bool HasFlag(int variable, int value); // 0x10022DCFC
	public static int SetFlag(int a, bool val, int b); // 0x10022DD08
}

// Namespace: 
public static class Experience // TypeDefIndex: 4483
{
	// Fields
	public static int oldlevel; // 0x0
	private static int value_; // 0x4
	public static int[] levels; // 0x8

	// Methods
	private static void .cctor(); // 0x10022DD1C
	public static int get_Value(); // 0x10022DD70
	public static void set_Value(int value); // 0x10022DDD8
	public static void LevelUp(int level); // 0x10022DFE8
	public static int GetLevel(int value); // 0x10022DEEC
	public static void SetupLevels(ISFSArray data); // 0x10022E020
}

// Namespace: 
public class Flag // TypeDefIndex: 4484
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string country_code; // 0x20
	public int shop; // 0x28
	public int region; // 0x2C
	public int chat_region; // 0x30

	// Methods
	public void .ctor(); // 0x10022F884
}

// Namespace: 
public static class ForcedNavigator // TypeDefIndex: 4485
{
	// Fields
	public static ForcedScreens showscreen; // 0x0

	// Methods
	private static void .cctor(); // 0x1002318E0
}

// Namespace: 
public sealed class ForcedScreens : Enum // TypeDefIndex: 4486
{
	// Fields
	public int value__; // 0x10
	public const ForcedScreens None = 0; // 0x0
	public const ForcedScreens MenuBattleResults = 1; // 0x0

}

// Namespace: 
public class Friend // TypeDefIndex: 4487
{
	// Fields
	public int user_id; // 0x10
	public int friend_id; // 0x14
	public int status; // 0x18

	// Methods
	public void .ctor(ISFSObject o); // 0x1002323EC
}

// Namespace: 
public static class GameChat // TypeDefIndex: 4488
{
	// Fields
	public static List`1<Word> words; // 0x0

	// Methods
	private static void .cctor(); // 0x10024978C
	public static void Setup(byte[] data); // 0x100249800
	private static void OnLocalizationRefresh(); // 0x10024A11C
	public static void Translate(); // 0x100249ED0
	public static Word GetWord(int id); // 0x10024A178
	public static Word GetWord(string key); // 0x10024A3F8
	public static List`1<Word> GetInstalledWords(); // 0x10024A6C0
	public static List`1<Word> GetTestWords(); // 0x10024A8E0
	private static Word GetWordViaId(int id); // 0x10024A1DC
	private static Word GetWordViaKey(string key); // 0x10024A45C
}

// Namespace: 
public class Word // TypeDefIndex: 4489
{
	// Fields
	public int id; // 0x10
	public string key; // 0x18
	public string translation; // 0x20
	public MoneyTypes moneytype; // 0x28
	public int cost; // 0x2C
	public bool owned; // 0x30
	public bool installed; // 0x31

	// Methods
	public void .ctor(); // 0x100249EC8
}

// Namespace: 
public static class Guild // TypeDefIndex: 4490
{
	// Fields
	public static string GUILD_NAME; // 0x0

	// Methods
	private static void .cctor(); // 0x10026FA50
}

// Namespace: 
public static class Hands // TypeDefIndex: 4491
{
	// Fields
	public static BundleOptions hands; // 0x0

	// Methods
	private static void .cctor(); // 0x1002745D4
}

// Namespace: 
public class BundleOptions // TypeDefIndex: 4492
{
	// Fields
	public int version; // 0x10
	public GameObject model; // 0x18

	// Methods
	public void .ctor(); // 0x100274648
}

// Namespace: 
public static class Helmets // TypeDefIndex: 4493
{
	// Fields
	public static List`1<Helmet> helmets; // 0x0

	// Methods
	private static void .cctor(); // 0x10027BBAC
	public static void UnloadUnusedHelmets(); // 0x10027BC20
	public static void BuyHelmet(Helmet helmet); // 0x10027BED4
	public static void DeliveryHelmet(Helmet helmet); // 0x10027BF2C
	public static void InstallHelmet(Helmet helmet); // 0x10027BF84
	public static void BuyStage(int stage, HelmetPart part); // 0x10027C240
	public static void DeliveryStage(int stage, HelmetPart part); // 0x10027C2A8
	public static void RecaculateAttributes(Helmet h); // 0x10027C1EC
	public static void InstallStage(Helmet h, int stage, HelmetPart part); // 0x10027C310
	public static Helmet GetActiveHelmet(); // 0x10027C3A4
	public static Helmet GetNextHelmetToBuy(); // 0x10027C704
	public static Helmet GetHelmetViaType(int type); // 0x100276190
	public static Helmet GetOwnedHelmetViaType(int type); // 0x10027C8EC
	public static Helmet GetHelmetViaName(string name); // 0x10027CBA4
	public static HelmetPart GetPart(Helmet h, HelmetPartType part); // 0x10027CEB4
	public static HelmetPartStage GetActiveStageInPart(HelmetPart p); // 0x10027CED0
	public static HelmetPartStage GetStageInPartForInstall(HelmetPart p); // 0x10027CF28
	public static HelmetPartStage GetStageInPartForDelivery(HelmetPart p); // 0x10027CF80
	public static HelmetPartStage GetStageInPartForBuy(HelmetPart p); // 0x10027CFD8
	public static HelmetPartStage GetLastPurchasedStage(HelmetPart p); // 0x10027D030
	public static HelmetPartStage GetLastStageInPart(HelmetPart p); // 0x10027D088
	public static HelmetPartStage GetFirstStageInPart(HelmetPart p); // 0x10027D0E0
	public static HelmetPartStage GetStageInPart(HelmetPart p, int stage); // 0x10027D138
	public static HelmetPartStage GetNewStageForPurchase(HelmetPart p); // 0x10027D1A0
	public static HelmetPartStage[] GetStagesForPart(HelmetPart p); // 0x10027D1F8
	public static int GetUpgradeLevel(Helmet helmet); // 0x10027D250
	public static int GetMask(Helmet helmet); // 0x10027D4F0
	public static void SetDataBase(string[] jsondata); // 0x10027D4F8
	private static void ParseParts(Helmet helmet, JSONNode node); // 0x10027F158
	private static void ParsePurchasingOptions(Helmet helmet, JSONNode node, int from); // 0x100280E9C
	public static void SetDataUser(string[] jsondata); // 0x1002815E8
	private static void UpgradeInject(); // 0x100280C60
}

// Namespace: 
public class InfoMessage // TypeDefIndex: 4494
{
	// Fields
	public int id; // 0x10
	public int start; // 0x14
	public int end; // 0x18
	private Dictionary`2<string, string> _text; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x100287FDC
	public string get_text(); // 0x10028867C
}

// Namespace: 
public static class Localization // TypeDefIndex: 4495
{
	// Fields
	public static OnEventDgt OnRefresh; // 0x0
	private static Dictionary`2<string, Dictionary`2<string, string>> words; // 0x8
	public static string currentLanguage; // 0x10
	public static List`1<Language> languages; // 0x18

	// Methods
	private static void .cctor(); // 0x100292678
	public static void SetupLanguages(ISFSArray a); // 0x10029271C
	public static int FindLanguageID(string lang); // 0x100292C90
	public static bool LanguagesLoaded(); // 0x100292EF8
	public static Language FindLanguage(string lang); // 0x100292F80
	public static void Refresh(); // 0x1002931E4
	public static void SetupWord(string index); // 0x10029331C
	public static bool AddTranslate(string index, string word, string lang); // 0x1002933D0
	public static Dictionary`2<string, string> GetWordUnsafe(string index); // 0x1002935C4
	public static Dictionary`2<string, string> GetWord(string index); // 0x1002934A4
	public static string plural(string word, int num); // 0x100293694
	public static string GetTranslationForWordIndex(string index, int num); // 0x100293818
	public static string GetTranslationForWordIndex(string index); // 0x1002939A4
	public static string GetTranslationForWord(Dictionary`2<string, string> word, int num); // 0x100293894
	public static string GetTranslationForWord(Dictionary`2<string, string> word); // 0x100293A10
	public static string GetTranslationForWordWithLang(Dictionary`2<string, string> word, string language); // 0x100293A80
	public static void SetCurrentLanguage(string lang); // 0x100293B68
	public static void SetCurrentLanguage(int lang); // 0x100293C40
	public static string GetCurrentLanguage(); // 0x100293E30
}

// Namespace: 
public class Language // TypeDefIndex: 4496
{
	// Fields
	public int id; // 0x10
	public int flag_id; // 0x14
	public string str_id; // 0x18
	public string name; // 0x20
	public bool enabled; // 0x28

	// Methods
	public void .ctor(ISFSObject o); // 0x100292950
}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 4497
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100293E98
	public virtual void Invoke(); // 0x10029328C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100293EB4
	public virtual void EndInvoke(IAsyncResult result); // 0x100293F14
}

// Namespace: 
public class MercContractBtnControl : MonoBehaviour // TypeDefIndex: 4498
{
	// Fields
	public static List`1<int> prolonged_contracts; // 0x0
	public static List`1<int> my_active_mercs; // 0x8

	// Methods
	public void .ctor(); // 0x100340AAC
	private static void .cctor(); // 0x100340AB4
}

// Namespace: 
public static class MercCostCalculation // TypeDefIndex: 4499
{
	// Fields
	public static int[] current_league_cost; // 0x0
	public static Dictionary`2<string, int> all_league_cost; // 0x8

	// Methods
	private static void .cctor(); // 0x100341FB0
	public static ContractCommission GetContractCommission(bool squad_cup, int contracts); // 0x100342024
	private static List`1<ContractCommission> GetList(int cup); // 0x10034211C
	public static void SetCostDictionary(); // 0x100342290
	public static void SetCurrentCost(); // 0x1003425B0
}

// Namespace: 
public class MercLeague // TypeDefIndex: 4500
{
	// Fields
	public int id; // 0x10
	public int points; // 0x14
	public int cost; // 0x18
	public int min_time; // 0x1C
	public int min_contracts; // 0x20
	public int max_time; // 0x24
	public int max_contracts; // 0x28
	public int cost_0; // 0x2C
	public int cost_1; // 0x30
	public int cost_2; // 0x34
	public int cost_3; // 0x38

	// Methods
	public void .ctor(ISFSObject o); // 0x100347A6C
}

// Namespace: 
public class Mercenary // TypeDefIndex: 4501
{
	// Fields
	public int user_id; // 0x10
	public int league; // 0x14
	public int active_contract_id; // 0x18
	public int contracts_taken; // 0x1C
	public int contracts_completed; // 0x20
	public int contracts_time; // 0x24
	public int week_contracts_taken; // 0x28
	public int week_contracts_completed; // 0x2C
	public int week_contracts_time; // 0x30
	public int league_contracts_taken; // 0x34
	public int league_contracts_completed; // 0x38
	public bool is_active; // 0x3C
	public int squad_id; // 0x40
	public long rankpoints; // 0x48
	public int avatar_id; // 0x50
	public int flag_id; // 0x54
	public string name; // 0x58
	public string squad_name; // 0x60
	public int goose; // 0x68

	// Methods
	public void .ctor(ISFSObject o); // 0x100343024
	public bool IsBlackMark(); // 0x100343ACC
}

// Namespace: 
public static class Money // TypeDefIndex: 4502
{
	// Fields
	public static OnDollarsChangeDeligate OnDollarsChange; // 0x0
	public static OnCryChangeDeligate OnCryChange; // 0x8
	private static int[] _dollarsArr; // 0x10
	private static int[] _cryArr; // 0x18

	// Methods
	private static void .cctor(); // 0x10007682C
	public static int get_Dollars(); // 0x1000768C8
	public static void set_Dollars(int value); // 0x10007698C
	public static int get_Cry(); // 0x100076CF8
	public static void set_Cry(int value); // 0x100076DBC
	public static bool CanPay(int value, MoneyTypes type); // 0x100077128
	public static bool Pay(int value, MoneyTypes type); // 0x1000771DC
}

// Namespace: 
public sealed class MoneyTypes : Enum // TypeDefIndex: 4503
{
	// Fields
	public int value__; // 0x10
	public const MoneyTypes Dollars = 0; // 0x0
	public const MoneyTypes Crystals = 1; // 0x0
	public const MoneyTypes Experience = 2; // 0x0
	public const MoneyTypes Rankpoints = 3; // 0x0
	public const MoneyTypes Boosters = 4; // 0x0

}

// Namespace: 
public sealed class OnDollarsChangeDeligate : MulticastDelegate // TypeDefIndex: 4504
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000773EC
	public virtual void Invoke(); // 0x100076C68
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100077408
	public virtual void EndInvoke(IAsyncResult result); // 0x100077468
}

// Namespace: 
public sealed class OnCryChangeDeligate : MulticastDelegate // TypeDefIndex: 4505
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100077364
	public virtual void Invoke(); // 0x100077098
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100077380
	public virtual void EndInvoke(IAsyncResult result); // 0x1000773E0
}

// Namespace: 
public class PlayerBattleStats // TypeDefIndex: 4506
{
	// Fields
	public string username; // 0x10
	public string nickname; // 0x18
	public int flag; // 0x20
	public int rankpointscurrent; // 0x24
	public long rankpointsall; // 0x28
	public int kills; // 0x30
	public int deaths; // 0x34
	public bool myself; // 0x38
	public int weapon_type; // 0x3C
	public int helmet_type; // 0x40
	public string weaponname; // 0x48
	public string helmetname; // 0x50
	public int sel_cup; // 0x58
	public int sel_cup_value; // 0x5C
	public int avatar_id; // 0x60
	public string squad_name; // 0x68
	public int weapon_camo; // 0x70
	public int weapon_handling; // 0x74
	public int helmet_camo; // 0x78
	public int helmet_aero; // 0x7C
	public int last_booster_time; // 0x80
	public int team; // 0x84
	public bool is_merc; // 0x88
	public int merc_league; // 0x8C
	public int goose; // 0x90
	public int t_own; // 0x94
	public int player_id; // 0x98
	public int user_id; // 0x9C
	public static PlayerBattleStats[] players; // 0x0
	public static string killername; // 0x8
	public static int killer_id; // 0x10
	public static int team_winner; // 0x14
	public IList`1<Drone> drones; // 0xA0
	private static Comparison`1<PlayerBattleStats> <>f__am$cache21; // 0x18
	private static Comparison`1<PlayerBattleStats> <>f__am$cache22; // 0x20

	// Methods
	public void .ctor(int player_id); // 0x10009EA10
	public static void Init(int count); // 0x10009EAA4
	public static void Sort(); // 0x10009EB20
	public static int GetPlayerIDByName(string name); // 0x10009EE34
	public static string GetPlayerNameByUserID(int id); // 0x10009EF58
	public static int AddPlayer(string name); // 0x10009F0A8
	public static void ResetPlayer(int id); // 0x10009F328
	public static void SetKiller(string name); // 0x10009F3D8
	public static void ResetKiller(); // 0x10009F440
	private static int <Sort>m__16E(PlayerBattleStats a, PlayerBattleStats b); // 0x10009F494
	private static int <Sort>m__16F(PlayerBattleStats a, PlayerBattleStats b); // 0x10009F520
}

// Namespace: 
public class Drone : ISFSTranform // TypeDefIndex: 4507
{
	// Fields
	public int id; // 0x10
	public int[] part_active; // 0x18
	public int[] part_max; // 0x20

	// Methods
	public void .ctor(); // 0x10009F5C0
	public void Setup(ISFSObject o); // 0x10009F5C8
}

// Namespace: 
public sealed class PlayerProfile // TypeDefIndex: 4508
{
	// Fields
	private static PlayerProfile instance; // 0x0
	public int user_id; // 0x10
	public string name; // 0x18
	public long rankpoints; // 0x20
	public int battles; // 0x28
	public int shots; // 0x2C
	public int hits; // 0x30
	public int kills; // 0x34
	public int headshots; // 0x38
	public int wins; // 0x3C
	public int best_place; // 0x40
	public int profile_views; // 0x44
	public int flag_id; // 0x48
	public int avatar_id; // 0x4C
	public int squad_id; // 0x50
	public string squad_name; // 0x58
	public int squad_emblem; // 0x60
	public int squad_status; // 0x64
	public int achievements; // 0x68
	public int achievements_vip; // 0x6C
	public int headkills; // 0x70
	public int rating_pos; // 0x74
	public int best_rating_pos; // 0x78
	public int[] cups; // 0x80
	public bool is_merc; // 0x88
	public bool is_merc_active; // 0x89
	public int merc_league; // 0x8C
	public int goose; // 0x90
	public int active_contract_id; // 0x94
	public List`1<Weapon> weapons; // 0x98
	public List`1<Helmet> helmets; // 0xA0
	public List`1<Battle> last_battles; // 0xA8
	public List`1<SquadHistory> squad_history; // 0xB0
	public List`1<int> squad_invites; // 0xB8
	public List`1<SquadMember> invited_members; // 0xC0
	public List`1<Contract> contracts; // 0xC8
	public int t_own; // 0xD0
	public int t_owned; // 0xD4
	public int contracts_completed; // 0xD8
	public Platoon[] platoons; // 0xE0
	public List`1<PlatoonHistory> platoon_history; // 0xE8
	public List`1<int> platoon_invites; // 0xF0
	public static bool need_refresh; // 0x8
	private static int[] weaponSort; // 0x10

	// Methods
	private void .ctor(); // 0x10009F8A0
	private static void .cctor(); // 0x10009F9F4
	public static PlayerProfile get_Instance(); // 0x10009FAAC
	public static void Reset(); // 0x10009FB14
	public double get_Accuracy(); // 0x10009FB8C
	public int Cups(int cup); // 0x10009FBC0
	private int WeaponOrder(int id); // 0x10009FC08
	public void Setup(ISFSObject o); // 0x10009FCD8
	public Platoon MemberOfPlatoonType(int type); // 0x1000A5CF0
	public bool IsInvitedToPlatoon(int platoon_id); // 0x1000A5D34
	public bool IsInvitedToSquad(int squad_id); // 0x1000A5D9C
	private int <Setup>m__170(Weapon a, Weapon b); // 0x1000A5E04
}

// Namespace: 
public class PlatoonHistory // TypeDefIndex: 4509
{
	// Fields
	public string name; // 0x10
	public int platoon_id; // 0x18
	public int join; // 0x1C
	public int leave; // 0x20
	public int type; // 0x24

	// Methods
	public void .ctor(ISFSObject o); // 0x1000A59B8
}

// Namespace: 
public struct Weapon // TypeDefIndex: 4510
{
	// Fields
	public int type; // 0x10
	public int camo_type; // 0x14
	public int handling_type; // 0x18
	public int battles; // 0x1C
	public int shots; // 0x20
	public int hits; // 0x24
	public int kills; // 0x28
	public int headshots; // 0x2C
	public int headkills; // 0x30
	public int wins; // 0x34
	public int[] parts; // 0x38
	public bool active; // 0x40

	// Methods
	public double get_Accuracy(); // 0x1000A6060
}

// Namespace: 
public struct Helmet // TypeDefIndex: 4511
{
	// Fields
	public int type; // 0x10
	public int camo_type; // 0x14
	public int aero_type; // 0x18
	public int[] parts; // 0x20
	public bool active; // 0x28
	public int battles; // 0x2C
	public int ir_time; // 0x30
	public int helmet_hits; // 0x34

}

// Namespace: 
public struct Battle // TypeDefIndex: 4512
{
	// Fields
	public long id; // 0x10
	public int start; // 0x18
	public int best; // 0x1C
	public int coldblood; // 0x20
	public int blitzkrieg; // 0x24
	public int rankpoints; // 0x28
	public int weapon; // 0x2C
	public int helmet; // 0x30
	public int weapon_camo; // 0x34
	public int weapon_handling; // 0x38
	public int helmet_camo; // 0x3C
	public int helmet_aero; // 0x40
	public int kills; // 0x44
	public int deaths; // 0x48
	public string map; // 0x50
	public int battle_mode; // 0x58
	public int contract_id; // 0x5C

}

// Namespace: 
public static class Rankpoints // TypeDefIndex: 4513
{
	// Fields
	public static int oldtitle; // 0x0
	private static long value_; // 0x8

	// Methods
	private static void .cctor(); // 0x1000CB7FC
	public static long get_Value(); // 0x10009AB08
	public static void set_Value(long value); // 0x1000CB850
	public static void RankpointsUp(int index); // 0x1000CB9B4
}

// Namespace: 
public class RatingReward // TypeDefIndex: 4514
{
	// Fields
	public int league; // 0x10
	public int place; // 0x14
	public int reward; // 0x18
	public int visual_reward; // 0x1C

	// Methods
	public void .ctor(ISFSObject o); // 0x1000CF40C
}

// Namespace: 
public static class SAMD5Hash // TypeDefIndex: 4515
{
	// Methods
	public static string GetMd5Hash(MD5 md5Hash, string input); // 0x1000DDB14
	public static bool VerifyMd5Hash(MD5 md5Hash, string input, string hash); // 0x1000DE8AC
}

// Namespace: 
public static class SAUser // TypeDefIndex: 4516
{
	// Fields
	public const int APPLOVIN = 0; // 0x0
	public const int CHARTBOOST = 1; // 0x0
	public static string DEVICE_ID; // 0x0
	public static string PLAYER_NAME; // 0x8
	public static string PLAYER_START_NAME; // 0x10
	public static int USER_DB_ID; // 0x18
	public static string GAME_LOGIN_TOKEN; // 0x20
	public static int avatar_id; // 0x28
	public static int squad_id; // 0x2C
	public static string squad_name; // 0x30
	public static int flag_id; // 0x38
	public static int flag_region_id; // 0x3C
	public static int tutorial_stage; // 0x40
	public static int dq_rank; // 0x44
	public static int league; // 0x48
	public static int t_own; // 0x4C
	public static int t_owned; // 0x50
	public static List`1<int> flags; // 0x58
	public static List`1<int> avatars; // 0x60
	public static int[] boosters; // 0x68
	public static int[] cups; // 0x70
	public static int goose; // 0x78
	public static Squad squad; // 0x80
	public static List`1<SquadRequest> squad_requests; // 0x88
	public static List`1<SquadInvite> squad_invites; // 0x90
	public static List`1<SquadRequest> my_requests; // 0x98
	public static List`1<PlatoonRequest> platoon_requests; // 0xA0
	public static List`1<PlatoonRequest> my_platoon_requests; // 0xA8
	public static SquadDiplomacy diplomacy; // 0xB0
	public static Achievements achievements; // 0xB8
	public static bool booster_health; // 0xC0
	public static bool booster_bullet; // 0xC1
	public static long booster_location; // 0xC8
	public static bool booster_pending; // 0xD0
	public static bool booster_bullet_permanent; // 0xD1
	public static bool booster_location_permanent; // 0xD2
	public static bool booster_health_permanent; // 0xD3
	public static bool tpar_switch; // 0xD4
	public static long friends_updated; // 0xD8
	public static List`1<Friend> friends; // 0xE0
	public static int gift_dollars; // 0xE8
	public static int gift_crystals; // 0xEC
	public static int chat_ban; // 0xF0
	public static int chat_messages; // 0xF4
	public static int my_team; // 0xF8
	public static bool user_loaded; // 0xFC
	public static int adv_system; // 0x100
	public static bool is_donater; // 0x104
	public static int adv_engine; // 0x108
	public static int vip_status; // 0x10C
	public static int vip_progress; // 0x110
	public static int ret_day; // 0x114
	public static int ret_day_360; // 0x118
	public static int ret_battles; // 0x11C
	public static int ret_wins; // 0x120
	public static int current_online; // 0x124
	public static int chat_region; // 0x128
	public static bool is_employer; // 0x12C
	public static int employer_contracts; // 0x130
	public static bool leaved_squad; // 0x134
	public static int respawn_cost; // 0x138
	public static int sel_cup; // 0x13C
	public static bool tf_zoom; // 0x140
	public static bool ir_button; // 0x141
	public static int battles_counter; // 0x144
	public static int free_rename; // 0x148
	public static int starter_pack_time; // 0x14C
	public static Platoon[] platoons; // 0x150

	// Methods
	private static void .cctor(); // 0x1000DF4C8
	public static bool get_IsDefaultName(); // 0x1000DF694
	public static bool IsAvatarOwned(int id); // 0x1000DF734
	public static int GetCup(int cup); // 0x1000DF7B8
	public static bool get_tf_zoom_active(); // 0x1000DF888
	public static int starter_pack_time_end(); // 0x1000DFA1C
	public static int starter_pack_time_left(); // 0x1000DFB38
	public static void ResetChatRegion(); // 0x1000DFBD8
	public static string GetFullName(); // 0x1000DFEB8
	public static void OnBuyItem(ShopItem item); // 0x1000E0260
	public static void UpdateRequests(ISFSArray requests); // 0x1000E0448
	public static void UpdateInvites(ISFSArray invites); // 0x1000E0974
	public static bool IsTutorial(); // 0x1000DF944
	public static int GetTutorialStage(); // 0x1000DF9B4
	public static void OnBoosterRejected(int type); // 0x1000E0DD8
	public static void OnBoosterPermanent(int type); // 0x1000E0E40
	public static void OnBoosterOn(int type); // 0x1000E1008
	public static void OnBoosterOff(int type); // 0x1000E12C8
	public static void OnBoosterPermanentOff(int type); // 0x1000E1494
	public static bool GetBoosterState(BoosterTypes type); // 0x1000E159C
	public static bool GetBoosterPermanentState(BoosterTypes type); // 0x1000E16A0
	public static long GetBoosterValue(BoosterTypes type); // 0x1000E17A0
	public static bool HasFriend(int id); // 0x1000E186C
	public static bool HasRequest(int id); // 0x1000E1968
	public static bool HasSquadRequest(int id); // 0x1000E1A64
	public static void RemoveSquadRequest(int id); // 0x1000E1B60
	public static bool HasInvite(int id); // 0x1000E1CA0
	public static void UpdateFriends(ISFSObject responseData); // 0x1000E1D9C
	public static int get_squad_cup_2(); // 0x1000E22F4
	public static bool get_isNovice(); // 0x1000E2394
	public static void set_relocation(bool value); // 0x1000D1A58
	public static bool get_relocation(); // 0x1000D1964
	public static void RemovePlatoonType(int type); // 0x1000E24B0
	public static Platoon MemberOfPlatoonType(int type); // 0x1000E2540
	public static Platoon MemberOfPlatoon(int platoon_id); // 0x1000E25D0
	public static bool MemberOfPlatoon(int type, int platoon_id); // 0x1000E2698
	public static bool HasMyPlatoonRequest(int id); // 0x1000E2798
	public static void ClearMyPlatoonRequests(int id); // 0x1000E2894
	public static void RemovePlatoonRequest(int platoon_id, int user_id); // 0x1000E2988
	public static void UpdatePlatoonRequests(int platoon_id, ISFSArray requests); // 0x1000E2A80
}

// Namespace: 
private sealed class <ClearMyPlatoonRequests>c__AnonStorey109 // TypeDefIndex: 4517
{
	// Fields
	internal int id; // 0x10

	// Methods
	public void .ctor(); // 0x1000E2980
	internal bool <>m__171(PlatoonRequest obj); // 0x1000E301C
}

// Namespace: 
private sealed class <RemovePlatoonRequest>c__AnonStorey10A // TypeDefIndex: 4518
{
	// Fields
	internal int platoon_id; // 0x10
	internal int user_id; // 0x14

	// Methods
	public void .ctor(); // 0x1000E2A78
	internal bool <>m__172(PlatoonRequest obj); // 0x1000E3040
}

// Namespace: 
private sealed class <UpdatePlatoonRequests>c__AnonStorey10B // TypeDefIndex: 4519
{
	// Fields
	internal int platoon_id; // 0x10

	// Methods
	public void .ctor(); // 0x1000E3014
	internal bool <>m__173(PlatoonRequest obj); // 0x1000E307C
}

// Namespace: 
public static class Series // TypeDefIndex: 4520
{
	// Fields
	public static Serial[] series; // 0x0

	// Methods
	public static void SetupSeries(ISFSArray array); // 0x1000E5D5C
	public static Serial GetSerialViaType(SerialTypes type); // 0x1000E65B4
}

// Namespace: 
public sealed class SerialTypes : Enum // TypeDefIndex: 4521
{
	// Fields
	public int value__; // 0x10
	public const SerialTypes kill = 0; // 0x0
	public const SerialTypes addkill = 1; // 0x0
	public const SerialTypes firstkill = 2; // 0x0
	public const SerialTypes headshoot = 3; // 0x0
	public const SerialTypes onehitkill = 4; // 0x0
	public const SerialTypes combo = 5; // 0x0
	public const SerialTypes fastkiller = 6; // 0x0
	public const SerialTypes teamwin = 7; // 0x0
	public const SerialTypes assist = 8; // 0x0
	public const SerialTypes revenge = 9; // 0x0
	public const SerialTypes battle = 10; // 0x0
	public const SerialTypes addbattle = 11; // 0x0
	public const SerialTypes blitzkrieg = 12; // 0x0
	public const SerialTypes best = 13; // 0x0
	public const SerialTypes coldblood = 14; // 0x0

}

// Namespace: 
public class Serial // TypeDefIndex: 4522
{
	// Fields
	public SerialTypes type; // 0x10
	public int rankpoints; // 0x14
	public int experience; // 0x18
	public int dollars; // 0x1C
	public int crystals; // 0x20

	// Methods
	public void .ctor(); // 0x1000E65AC
}

// Namespace: 
public class ServerData // TypeDefIndex: 4523
{
	// Fields
	public static ISFSArray maps; // 0x0
	public static ISFSArray flags; // 0x8
	private static Dictionary`2<string, int> vars; // 0x10
	private static Dictionary`2<string, MapInfo> mapInfo; // 0x18
	public static ISFSArray dailyQuestTypes; // 0x20
	public static Dictionary`2<int, DailyQuest> dailyQuests; // 0x28
	public static ISFSArray tuning_rewards; // 0x30
	public static Dictionary`2<int, Flag> flagInfo; // 0x38
	public static List`1<Flag> flags_non_shop; // 0x40
	public static Dictionary`2<int, string> flag_regions; // 0x48
	public static List`1<List`1<RatingReward>> rating_rewards; // 0x50
	public static List`1<List`1<RatingReward>> squad_rewards; // 0x58
	public static List`1<List`1<RatingReward>> tournament_rewards; // 0x60
	public static List`1<List`1<RatingReward>> alliance_rewards; // 0x68
	public static List`1<InfoMessage> info_messages; // 0x70
	public static Dictionary`2<string, Texture2D> map_icons; // 0x78
	public static Dictionary`2<int, List`1<int>> squad_alliances; // 0x80
	public static List`1<int> tournament_schedule; // 0x88
	public static long t_season_start; // 0x90
	public static long t_season_end; // 0x98
	public static long p_season_start; // 0xA0
	public static long p_season_end; // 0xA8
	public static bool battle_spy_on; // 0xB0
	public static int battle_spy_freq; // 0xB4
	public static int battle_spy_id; // 0xB8
	public static int[] vip_status; // 0xC0
	public static List`1<DailyReward> daily_rewards; // 0xC8
	public static MercLeague[] merc_leagues; // 0xD0
	public static ContractCommission[] contract_commission; // 0xD8
	public static Contract contract; // 0xE0
	public static Mercenary mercenary; // 0xE8
	public static List`1<ChatRegion> chat_regions; // 0xF0
	public static List`1<ChatRegionLanguage> chat_region_languages; // 0xF8
	public static bool SCOPE_RED_AIM; // 0x100
	private static Func`2<KeyValuePair`2<string, MapInfo>, int> <>f__am$cache22; // 0x108
	private static Func`2<KeyValuePair`2<string, MapInfo>, int> <>f__am$cache23; // 0x110
	private static Func`2<KeyValuePair`2<string, MapInfo>, bool> <>f__am$cache24; // 0x118
	private static Func`2<KeyValuePair`2<string, MapInfo>, bool> <>f__am$cache25; // 0x120
	private static Func`2<KeyValuePair`2<string, MapInfo>, bool> <>f__am$cache26; // 0x128
	private static Func`2<KeyValuePair`2<string, MapInfo>, int> <>f__am$cache27; // 0x130
	private static Predicate`1<ChatRegionLanguage> <>f__am$cache28; // 0x138

	// Methods
	public void .ctor(); // 0x1000E666C
	private static void .cctor(); // 0x1000E6674
	public static Dictionary`2<string, MapInfo> MapsInfo(); // 0x1000E6790
	public static IEnumerable`1<KeyValuePair`2<string, MapInfo>> MapInfoByOrder(); // 0x1000E67F8
	public static IEnumerable`1<KeyValuePair`2<string, MapInfo>> MapInfoByOrder(BattleMode battleMode); // 0x1000E6900
	public static MapInfo GetMap(string map); // 0x1000E6C60
	public static string LevelName(string map); // 0x1000E6CE4
	public static string MapDisplayNameIndex(string map); // 0x1000E6E1C
	public static int GetRoundTime(string map); // 0x1000E6F14
	public static int GetMaxPlayers(string map, int mode); // 0x1000E7230
	public static int GetStaminaCost(string map); // 0x1000E7460
	public static int GetStaminaCostForQA(); // 0x1000E7784
	public static int FindChatRegion(); // 0x1000DFC68
	public static int GetDefaultFlag(); // 0x1000E793C
	public static int get_DOWNLOAD_MAPS_BUTTON(); // 0x1000E7DB8
	public static int get_NEW_SHOP_ACTION(); // 0x1000E7E8C
	public static int get_FB_MIN_BATTLES(); // 0x1000E7F60
	public static int get_FB_LOGIN_REWARD(); // 0x1000E8038
	public static int get_FB_LIKE_REWARD(); // 0x1000E810C
	public static int get_FACEBOOK_STAMINA(); // 0x1000E81E0
	public static int get_ROUND_TIME(); // 0x1000E703C
	public static int get_RESPAWN_TIME(); // 0x1000E8268
	public static int get_VOTE_TIME(); // 0x1000E82F0
	public static int get_ENERGY_REFUEL_TIME(); // 0x1000E8378
	public static int get_STAMINA_RESTORE_COST(); // 0x1000E8438
	public static int get_MATCH_ENERGY_COST(); // 0x1000E75C8
	public static int get_CHANGE_NAME_FLAG_COST(); // 0x1000E84C0
	public static int get_CREATE_SQUAD_COST(); // 0x1000E8548
	public static int get_RENAME_SQUAD_COST(); // 0x1000E85D0
	public static int get_EXPAND_SQUAD_COST(); // 0x1000E8658
	public static int get_RENAME_PLATOON_COST(); // 0x1000E86E0
	public static int get_LEAGUE_1_RANKPOINTS(); // 0x1000E8768
	public static int get_LEAGUE_2_RANKPOINTS(); // 0x1000E87F0
	public static int get_LEAGUE_3_RANKPOINTS(); // 0x1000E8878
	public static int get_BONUS_BATTERY_TIME(); // 0x1000E8900
	public static int get_BONUS_LOCATION_TIME(); // 0x1000E1240
	public static int get_GAMECHAT_BOOSTER_COOLDOWN(); // 0x1000E8988
	public static int get_TPAR_BATTERY_BONUS(); // 0x1000E8A10
	public static int get_TPAR_RANKPOINTS_BONUS(); // 0x1000E8A98
	public static int get_MASK_HP_REGEN(); // 0x1000E8B20
	public static int get_MASK_DOT_PERCENT(); // 0x1000E8BA8
	public static int get_MASK_DOT_TIME(); // 0x1000E8C30
	public static int get_MASK_HEAD_DEF(); // 0x1000E8CB8
	public static int get_CHAT_MAX_MESSAGES(); // 0x1000E8D40
	public static int get_CHAT_FREE_MESSAGES_PER_DAY(); // 0x1000E8DC8
	public static int get_CHAT_MESSAGE_COST(); // 0x1000E8E50
	public static int get_TEAM_MIN_USER_LEVEL(); // 0x1000E8ED8
	public static int get_TERRITORY_WAR_MIN_STATUS(); // 0x1000E8F60
	public static int get_TERRITORY_BID_MIN_STATUS(); // 0x1000E8FE8
	public static int get_SQUAD_LEAGUE_1_RANKPOINGS(); // 0x1000E9070
	public static int get_CUP_1_COUNT(); // 0x1000E90F8
	public static int get_CUP_1_ELITE_COUNT(); // 0x1000E9180
	public static int get_CUP_2_COUNT(); // 0x1000E9208
	public static int get_CUP_2_ELITE_COUNT(); // 0x1000E9290
	public static int get_CUP_3_COUNT(); // 0x1000E9318
	public static int get_CUP_3_ELITE_COUNT(); // 0x1000E93A0
	public static int get_CUP_4_COUNT(); // 0x1000E9428
	public static int get_CUP_4_ELITE_COUNT(); // 0x1000E94B0
	public static int get_CUP_5_COUNT(); // 0x1000E9538
	public static int get_CUP_5_ELITE_COUNT(); // 0x1000E95C0
	public static int get_CUP_6_COUNT(); // 0x1000E9648
	public static int get_CUP_6_ELITE_COUNT(); // 0x1000E96D0
	public static int get_CUP_7_COUNT(); // 0x1000E9758
	public static int get_CUP_8_COUNT(); // 0x1000E97E0
	public static int get_CUP_9_COUNT(); // 0x1000E9868
	public static int get_CUP_22_COUNT(); // 0x1000E98F0
	public static int get_CUP_23_COUNT(); // 0x1000E9978
	public static int get_CUP_24_COUNT(); // 0x1000E9A00
	public static int get_CUP_25_COUNT(); // 0x1000E9A88
	public static int get_CUP_26_COUNT(); // 0x1000E9B10
	public static int get_MIN_CUP_8_RANKPOINTS(); // 0x1000E9B98
	public static int get_CUP_3_VETERAN_COUNT(); // 0x1000E9C20
	public static int get_CUP_3_SUPER_VETERAN_COUNT(); // 0x1000E9CA8
	public static int get_RESTART_TIME_UTC(); // 0x1000E9D30
	public static int get_RATING_RECALC_DAY(); // 0x1000E9DF0
	public static int get_HANDS_BUNDLE_VERSION(); // 0x1000E9EB0
	public static int get_ENEMY_BUNDLE_VERSION(); // 0x1000E9F38
	public static int get_GAME_MENU_SOUNDS_BUNDLE_VERSION(); // 0x1000E9FC0
	public static int get_MENU_SOUNDS_BUNDLE_VERSION(); // 0x1000EA048
	public static int get_GAME_SOUNDS_BUNDLE_VERSION(); // 0x1000EA0D0
	public static int get_WEAPON_SOUNDS_BUNDLE_VERSION(); // 0x1000EA158
	public static int get_CASE_BUNDLE_VERSION(); // 0x1000EA1E0
	public static int get_DAILY_QUESTS_ALL_MAPS(); // 0x1000EA268
	public static int get_CHAT_BAN_LIFT_COST(); // 0x1000EA2F0
	public static int get_PATRICK_REWARD(); // 0x1000EA378
	public static int get_MERC_AUTO_PROLONG(); // 0x1000EA400
	public static int get_MERC_SQUAD_CUP(); // 0x1000EA488
	public static int get_MERC_RANK_DIFF(); // 0x1000EA510
	public static int get_MERC_BLACK_MARK_REMOVE(); // 0x1000EA598
	public static int get_MERC_FISHING_TIME(); // 0x1000EA620
	public static int get_TERRITORY_QUALIFY_MAX_TEAM_MEMBERS(); // 0x1000EA6A8
	public static int get_TERRITORY_QUALIFY_ROUND_TIME(); // 0x1000EA730
	public static int get_TERRITORY_QUALIFY_ROUND_INTERVAL(); // 0x1000EA7B8
	public static int get_TERRITORY_QUALIFY_TIME(); // 0x1000EA84C
	public static int get_TERRITORY_QUALIFY_MAX_ALLIANCES(); // 0x1000EA908
	public static int get_MAX_CONTRACTS_PER_EMPLOYER(); // 0x1000EA990
	public static int get_TOURNAMENT_BLOCK_REMOVE(); // 0x1000EAA18
	public static int get_SQUAD_DEFECTION_COST(); // 0x1000EAB3C
	public static int get_GOOSE_REMOVE_COST(); // 0x1000EABC4
	public static int get_STARTER_PACK_TIME(); // 0x1000DFAB0
	public static int get_START_ENTER_NAME_MODE(); // 0x1000EAC4C
	public static int get_NEWBIE_BATTLES_COUNTER(); // 0x1000E2428
	public static int get_NEWBIE_BATTLES_COUNTER_2(); // 0x1000EACD4
	public static int get_NEWBIE_REPLAY_BUTTON_SHOW(); // 0x1000EAD5C
	public static int get_NEWBIE_PSG_ZOOM(); // 0x1000EADE4
	public static int get_NEWBIE_GLOW_BATTLES_COUNT(); // 0x1000EAE6C
	public static bool get_IS_GLOW(); // 0x1000E3254
	public static int get_NEWBIE_RELOCATION_BATTLES_SHOW(); // 0x1000EAEF4
	public static int get_NEWBIE_SCOPE_GLINT_ON(); // 0x1000EAF7C
	public static int get_RELOCATION_BUTTON_TOGGLE(); // 0x1000EB004
	public static int get_BONUS_PUMPKIN_TIME(); // 0x1000EB08C
	public static int get_NEWBIE_CONTROL_HELP_ON(); // 0x1000EB114
	public static int get_ACHIEVEMENTS_DIALOG(); // 0x1000EB19C
	public static int get_NEWBIE_MAP_COUNTER(); // 0x1000EB224
	public static bool get_ALLIANCE_POINTS_ENABLED(); // 0x1000EB2AC
	public static bool get_LOAD_TIPS_IMAGE(); // 0x1000EB380
	public static bool GetBool(string key); // 0x1000EB454
	public static int GetInt(string key, optional int def); // 0x1000EB524
	public static int TERRITORY_MAX_NODES(int terr); // 0x1000EB608
	public static int get_BAD_PING(); // 0x1000EB73C
	public static int get_PING_MAIN(); // 0x1000EB81C
	public static int get_PING_GAME(); // 0x1000EB8FC
	public static void Setup(ISFSObject responseData); // 0x1000EB984
	public static int GetLocalizationBundleVersion(); // 0x1000F28C0
	public static int GetFontBundleVersion(); // 0x1000F2948
	public static string GetDailyQuestName(int i); // 0x1000F29D0
	public static DailyQuest GetDailyQuestByID(int id); // 0x1000F2AF8
	public static int FindQuestType(string t); // 0x1000F2B7C
	public static DailyQuest GetActiveQuestForMap(string map); // 0x1000F2DA0
	public static bool IsAnyStartedQuests(); // 0x1000F3334
	public static int GetTuningReward(TuningGroups group, int type); // 0x1000F359C
	public static int GetTotalTuningReward(TuningGroups group, int type); // 0x1000F3BC8
	public static void RemoveTuningReward(TuningGroups group, int type); // 0x1000F41F0
	public static bool HasBlackMark(); // 0x1000F45E8
	public static bool HasActiveContract(); // 0x1000E0154
	public static bool ProlongedContract(); // 0x1000F468C
	public static bool IsMercenary(); // 0x1000E00AC
	private static int <MapInfoByOrder>m__174(KeyValuePair`2<string, MapInfo> map); // 0x1000F4738
	private static int <MapInfoByOrder>m__175(KeyValuePair`2<string, MapInfo> map); // 0x1000F47A0
	private static bool <MapInfoByOrder>m__176(KeyValuePair`2<string, MapInfo> map); // 0x1000F4808
	private static bool <MapInfoByOrder>m__177(KeyValuePair`2<string, MapInfo> map); // 0x1000F4878
	private static bool <MapInfoByOrder>m__178(KeyValuePair`2<string, MapInfo> map); // 0x1000F48E8
	private static int <GetStaminaCostForQA>m__179(KeyValuePair`2<string, MapInfo> map); // 0x1000F4958
	private static bool <FindChatRegion>m__17C(ChatRegionLanguage chatRegion); // 0x1000F49E4
}

// Namespace: 
public class MapInfo // TypeDefIndex: 4524
{
	// Fields
	private ISFSObject mapInfo; // 0x10
	public int enable_dm; // 0x18
	public int enable_team; // 0x1C
	public int enable_qualify; // 0x20
	public int id; // 0x24
	public int Order; // 0x28
	public int enable_team_random; // 0x2C

	// Methods
	public void .ctor(ISFSObject mapInfo); // 0x1000F24FC
	public int GetStaminaCost(); // 0x1000E7650
	public int GetRoundTime(); // 0x1000E70FC
	public int GetMinLevel(); // 0x1000F4C74
	public int GetMaxPlayers(int mode); // 0x1000E72D4
	public int GetBundleVersion(); // 0x1000F4D78
	public int ExtractBuildVersion(); // 0x1000F4E7C
	public int GetIconBundleVersion(); // 0x1000F4FA0
}

// Namespace: 
private sealed class <FindChatRegion>c__AnonStorey10C // TypeDefIndex: 4525
{
	// Fields
	internal string lang; // 0x10
	internal string country; // 0x18

	// Methods
	public void .ctor(); // 0x1000E7934
	internal bool <>m__17A(ChatRegionLanguage chatRegion); // 0x1000F4ABC
	internal bool <>m__17B(ChatRegionLanguage chatRegion); // 0x1000F4B9C
}

// Namespace: 
public class Shop // TypeDefIndex: 4526
{
	// Fields
	public static Dictionary`2<int, string> flags; // 0x0
	public static Dictionary`2<int, Emblem> emblems; // 0x8
	public static Dictionary`2<int, Avatar> avatars; // 0x10
	public static Dictionary`2<int, Booster> boosters; // 0x18
	public static Dictionary`2<int, ShopItem>[] items; // 0x20

	// Methods
	public void .ctor(); // 0x1000F622C
	public static void Setup(ISFSObject responseData); // 0x1000F6234
}

// Namespace: 
public sealed class Groups : Enum // TypeDefIndex: 4527
{
	// Fields
	public int value__; // 0x10
	public const Groups Avatars = 0; // 0x0
	public const Groups Emblems = 1; // 0x0
	public const Groups Flags = 2; // 0x0
	public const Groups Boosters = 3; // 0x0

}

// Namespace: 
public class ShopItem // TypeDefIndex: 4528
{
	// Fields
	public int id; // 0x10
	public int item_id; // 0x14
	public Groups group; // 0x18
	public MoneyTypes money_type; // 0x1C
	public int price; // 0x20
	public long limited_start; // 0x28
	public long limited_end; // 0x30
	public int limited_percent; // 0x38
	public int in_packet; // 0x3C

	// Methods
	public void .ctor(ISFSObject o); // 0x1000F8244
}

// Namespace: 
public class ShopTab : MonoBehaviour // TypeDefIndex: 4529
{
	// Fields
	public static Sections tabWhenShopOpen; // 0x0

	// Methods
	public void .ctor(); // 0x100101360
	private static void .cctor(); // 0x100101368
}

// Namespace: 
public class SniperArena : MonoBehaviour // TypeDefIndex: 4530
{
	// Fields
	public const string BUILD = "115"; // 0x0
	public const string VERSION = "0.8.9"; // 0x0
	public const string CLIENTVERSION = "0.8.9.115"; // 0x0
	public const bool IS_AMAZON = False; // 0x0
	public const bool USE_ADV_SDK = False; // 0x0
	public const string SETTINGSNAME = "settings"; // 0x0
	public const string LOCALIZATIONNAME = "localizations"; // 0x0
	public const string RESOURCESPATH = "../SniperArena/Assets/Resources/"; // 0x0
	public const string FILESPATH = "Files/"; // 0x0
	public const string WEBLOGOLINK = "/design/images/SniperArenaLogo.png"; // 0x0
	public const string SCREENSHOTADRESS = "/screenshot/index/"; // 0x0
	public const string SCREENSHOTADRESSVIEW = "/screenshot/view/"; // 0x0
	public const string PUBLIC_SCREENSHOTADRESS = "/files/screenshots/"; // 0x0
	public const string BUNDLEMAPNAMEDEFAULT = "bundlemap"; // 0x0
	public const int SOCKETSERVERPORT = 9933; // 0x0
	public const string SOCKET_DEFAULTZONE = "SniperArena"; // 0x0
	public const string SOCKET_DEFAULTROOM = "default"; // 0x0
	public const float PONGINTERVAL = 1; // 0x0
	public const string DEVFILES = "http://devfiles.sniperarena.com"; // 0x0
	public static InputType inputType; // 0x0
	private static Action`1<Items> m_ItemChangeHandler; // 0x8
	private static Items m_currentItem; // 0x10
	public static SceneNames currentSceneName; // 0x14
	private static long m_serverTime; // 0x18
	private static long m_syncTime; // 0x20
	public static string gametoload; // 0x28
	public static int battle_mode; // 0x30
	public static int current_territory_id; // 0x34
	public static int current_platoon_type; // 0x38
	public static SquadWarState last_squad_war_state; // 0x3C
	public static Encoding STRINGENCODING; // 0x40
	public static tk2dFontData loadedFontData; // 0x48
	public static bool MULTI_SERVER; // 0x50
	public static bool SOCKET_DEBUGMODE; // 0x51
	public static bool ONMAPPLAYERS_DEBUGMODE; // 0x52
	public static bool APP_DEBUGMODE; // 0x53
	public static bool PING_DEBUGMODE; // 0x54
	public static bool LOOKAT_DEBUGMODE; // 0x55
	public static bool GAMETIMER_DEBUGMODE; // 0x56
	public static string WEBSERVERADRESS; // 0x58
	public static string FILESERVERADRESS; // 0x60
	public static string SOCKETSERVERADRESS; // 0x68
	public static string GAMESERVERADRESS; // 0x70

	// Methods
	public void .ctor(); // 0x1001048EC
	private static void .cctor(); // 0x1001048F4
	public static void add_OnItemChange(Action`1<Items> value); // 0x1001049B4
	public static void remove_OnItemChange(Action`1<Items> value); // 0x100104B4C
	public static Items get_currentItem(); // 0x100104C50
	public static void set_currentItem(Items value); // 0x100104CB8
	public static long get_servertime(); // 0x100104D9C
	public static void set_servertime(long value); // 0x100104E04
	public static long get_synctime(); // 0x100104E98
	public static string get_PLAYMARKETLINK(); // 0x100104F30
	public static void ResetShaderOnlyThis(GameObject go); // 0x100104FB4
	public static void ResetShader(GameObject obj); // 0x100104FB8
	public static void ResetShaderPrefab(GameObject obj); // 0x100104FBC
	public static void ResetShader(GameObject[] objs); // 0x100104FC0
	public static void ResetShaderPrefab(GameObject[] objs); // 0x100104FC4
	public static void LoadLocalizations(); // 0x100104FC8
	public static void LoadLocalizations(TextAsset textXML); // 0x100105090
	public static void LoadSettings(); // 0x100105CEC
	public static void UpdateFont(GameObject font); // 0x100106260
}

// Namespace: 
public sealed class Items : Enum // TypeDefIndex: 4531
{
	// Fields
	public int value__; // 0x10
	public const Items weapon = 0; // 0x0
	public const Items helmet = 1; // 0x0
	public const Items special = 2; // 0x0
	public const Items drone = 3; // 0x0

}

// Namespace: 
public sealed class InputType : Enum // TypeDefIndex: 4532
{
	// Fields
	public int value__; // 0x10
	public const InputType mobile = 0; // 0x0
	public const InputType mouse = 1; // 0x0

}

// Namespace: 
public sealed class SceneNames : Enum // TypeDefIndex: 4533
{
	// Fields
	public int value__; // 0x10
	public const SceneNames Setplatform = 0; // 0x0
	public const SceneNames Prepare = 1; // 0x0
	public const SceneNames Menu = 2; // 0x0
	public const SceneNames Matchmaking = 3; // 0x0
	public const SceneNames Game = 4; // 0x0

}

// Namespace: 
public sealed class BoosterTypes : Enum // TypeDefIndex: 4534
{
	// Fields
	public int value__; // 0x10
	public const BoosterTypes health = 0; // 0x0
	public const BoosterTypes bullet = 1; // 0x0
	public const BoosterTypes location = 2; // 0x0

}

// Namespace: 
public class GameNames // TypeDefIndex: 4535
{
	// Fields
	public const string Map01 = "Map01"; // 0x0
	public const string Map02 = "Map02"; // 0x0
	public const string Map03 = "Map03"; // 0x0
	public const string Map04 = "Map04"; // 0x0
	public const string Map05 = "Map05"; // 0x0
	public const string Map06 = "Map06"; // 0x0
	public const string Map07 = "Map07"; // 0x0
	public const string Map08 = "Map08"; // 0x0
	public const string Map09 = "Map09"; // 0x0

	// Methods
	public void .ctor(); // 0x1001062EC
}

// Namespace: 
public sealed class BattleMode : Enum // TypeDefIndex: 4536
{
	// Fields
	public int value__; // 0x10
	public const BattleMode DeathMatch = 0; // 0x0
	public const BattleMode TeamVsTeam = 1; // 0x0
	public const BattleMode SquadWar = 2; // 0x0
	public const BattleMode SquadTournament = 3; // 0x0
	public const BattleMode QualifyingRound = 4; // 0x0
	public const BattleMode OpenTeamVsOpenTeam = 5; // 0x0
	public const BattleMode Platoon = 6; // 0x0

}

// Namespace: 
public sealed class SquadWarState : Enum // TypeDefIndex: 4537
{
	// Fields
	public int value__; // 0x10
	public const SquadWarState Unknown = 0; // 0x0
	public const SquadWarState Qualification = 1; // 0x0
	public const SquadWarState Final = 2; // 0x0

}

// Namespace: 
public static class SocketUserVar // TypeDefIndex: 4538
{
}

// Namespace: 
public sealed class Names : Enum // TypeDefIndex: 4539
{
	// Fields
	public int value__; // 0x10

}

// Namespace: 
public static class Sounds // TypeDefIndex: 4540
{
	// Fields
	public static float volumeSound; // 0x0
	public static float volumeMusic; // 0x4
	public static float volumeVoice; // 0x8
	public static BundleOptions menu; // 0x10
	public static BundleOptions gameMenu; // 0x18
	public static BundleOptions game; // 0x20
	public static BundleOptions weapon; // 0x28
	private static Vector3 vector3; // 0x30

	// Methods
	private static void .cctor(); // 0x10013DA08
	public static void SetupFromPrefsVolume(); // 0x10013DB98
	public static void RefreshSoundsVolume(); // 0x10013DCFC
	public static void RefreshMusicVolume(); // 0x10013DED4
}

// Namespace: 
public sealed class SoundTypes : Enum // TypeDefIndex: 4541
{
	// Fields
	public int value__; // 0x10
	public const SoundTypes music = 0; // 0x0
	public const SoundTypes sound = 1; // 0x0

}

// Namespace: 
public class BundleOptions // TypeDefIndex: 4542
{
	// Fields
	public int version; // 0x10
	public List`1<AudioClip> sounds; // 0x18

	// Methods
	public void .ctor(int _version); // 0x10013DB6C
	public AudioClip GetSound(string clipName); // 0x10013E0AC
	public void PlaySound(string clipName); // 0x10013E3D8
	public void PlaySound(string clipName, float volume, optional Vector3 position); // 0x10013E484
	public void PlaySound(AudioClip sound); // 0x10013E7A4
	public void PlayMusic(string clipName, float volume); // 0x10013E914
	public void PlaySoundLoop(string clipName, float volume); // 0x10013EAB0
	public void StopSound(string clipName); // 0x10013EC60
	public void StopSound(GameObject go); // 0x10013EDD0
	public void PlaySoundDelayed(string clipName, float waitTime); // 0x10013EEA0
	public GameObject PlaySoundDelayedGO(string clipName, float waitTime); // 0x10013F040
	public void PlaySoundRandom(string[] clipsName); // 0x10013F1D4
	public void PlaySoundRandom(string[] clipsName, float volume, optional Vector3 position); // 0x10013F23C
	public int PlaySoundRandom(string[] clipsName, float volume, float waitTime); // 0x10013F2D4
	public void PlaySoundRandom(AudioClip[] clips); // 0x10013F354
	public void PlaySoundPitch(AudioClip sound, float pitch, float waitTime); // 0x10013F420
	public void UnloadSounds(); // 0x10013F588
}

// Namespace: 
private sealed class <GetSound>c__AnonStorey10D // TypeDefIndex: 4543
{
	// Fields
	internal string clipName; // 0x10

	// Methods
	public void .ctor(); // 0x10013E3D0
	internal bool <>m__17D(AudioClip x); // 0x10013F6B8
}

// Namespace: 
public class Squad // TypeDefIndex: 4544
{
	// Fields
	public const int STATUS_DISMISSED = 3; // 0x0
	public const int STATUS_CLOSED = 2; // 0x0
	public const int STATUS_OPEN = 1; // 0x0
	public const int STATUS_MODERATED = 0; // 0x0
	public int id; // 0x10
	public string name; // 0x18
	public string description; // 0x20
	public long rankpoints; // 0x28
	public long week_rankpoints; // 0x30
	public int emblem_id; // 0x38
	public int wins; // 0x3C
	public int status; // 0x40
	public int max_members; // 0x44
	public int position; // 0x48
	public int cup_2; // 0x4C
	public int cup_4; // 0x50
	public int cup_6; // 0x54
	public int cup_8; // 0x58
	public int cup_9; // 0x5C
	public int sel_cup; // 0x60
	public int sel_cup_value; // 0x64
	public int[] cups; // 0x68
	public int alliance_id; // 0x70
	public string alliance_name; // 0x78
	public int alliance_emblem_id; // 0x80
	public List`1<int> alliance_members; // 0x88
	public int pending_alliance_id; // 0x90
	public int t_min_status; // 0x94
	public int t_mmr; // 0x98
	public int t_battles; // 0x9C
	public int t_wins; // 0xA0
	public int t_rankpoints; // 0xA4
	public int a_rankpoints; // 0xA8
	public long a_points; // 0xB0
	public long a_battles; // 0xB8
	public long a_wins; // 0xC0
	public int am_rankpoints; // 0xC8
	public int t_total_rankpoints; // 0xCC
	public int t_best_place; // 0xD0
	public bool t_banned; // 0xD4
	public long min_score_cup; // 0xD8
	public long min_score_t; // 0xE0
	public long min_score_a; // 0xE8
	public List`1<SquadMember> members; // 0xF0
	public List`1<int> emblems; // 0xF8

	// Methods
	public void .ctor(ISFSObject o); // 0x100137DF0
	public int Cup(int cup); // 0x100141398
	public bool IsEmblemOwned(int id); // 0x1001413DC
	public void OnChangeMemberStatus(int user_id, int status); // 0x100141444
	public SquadMember FindMember(int id); // 0x10014152C
	public string GetStatusText(); // 0x100141724
	public static string GetStatusText(int status); // 0x1001417A4
	public bool IsAllianceLeader(); // 0x100141834
	public int GetAllianceID(); // 0x1001418A8
	public bool IsAllianceMember(); // 0x1001418C0
	public bool IsFreeFromAlliance(); // 0x1001418D0
	public bool CanBeLeaderOfAlliance(); // 0x100141944
	public int GetOnlineMembersCount(); // 0x100141954
}

// Namespace: 
private sealed class <OnChangeMemberStatus>c__AnonStorey10E // TypeDefIndex: 4545
{
	// Fields
	internal int user_id; // 0x10

	// Methods
	public void .ctor(); // 0x100141524
	internal bool <>m__17E(SquadMember m1); // 0x100141A08
}

// Namespace: 
public class SquadAlliance // TypeDefIndex: 4546
{
	// Fields
	public const int INVITED = 0; // 0x0
	public const int ACCEPTED = 1; // 0x0
	public const int JOINED = 2; // 0x0
	public const int LEAVING = 3; // 0x0
	public int squad_id; // 0x10
	public string squad_name; // 0x18
	public int emblem_id; // 0x20
	public int member_count; // 0x24
	public int max_members; // 0x28
	public long rankpoints; // 0x30
	public int status; // 0x38
	public long joined_time; // 0x40
	public bool is_leader; // 0x48
	public int week_rankpoints; // 0x4C
	public long total_rankpoints; // 0x50

	// Methods
	public void .ctor(); // 0x100141A2C
	public void .ctor(ISFSObject o); // 0x100141A34
}

// Namespace: 
public class SquadDiplomacy // TypeDefIndex: 4547
{
	// Fields
	public int alliance_id; // 0x10
	public string alliance_name; // 0x18
	public int alliance_emblem_id; // 0x20
	public int alliance_rp; // 0x24
	public long alliance_trp; // 0x28
	public int am_rankpoints; // 0x30
	public long am_total_rankpoints; // 0x38
	public int pending_alliance_id; // 0x40
	public string pending_alliance_name; // 0x48
	public int pending_alliance_emblem_id; // 0x50
	public int member_count; // 0x54
	public int max_members; // 0x58
	public int member_status; // 0x5C
	public long joined_time; // 0x60
	public List`1<SquadAlliance> alliances; // 0x68

	// Methods
	public void .ctor(ISFSObject o); // 0x100139FDC
}

// Namespace: 
public class SquadHistory // TypeDefIndex: 4548
{
	// Fields
	public string squad_name; // 0x10
	public int squad_id; // 0x18
	public int join; // 0x1C
	public int leave; // 0x20

	// Methods
	public void .ctor(ISFSObject o); // 0x100143654
}

// Namespace: 
public class SquadInvite // TypeDefIndex: 4549
{
	// Fields
	public int user_id; // 0x10
	public int squad_id; // 0x14
	public long rankpoints; // 0x18
	public int flag_id; // 0x20
	public int avatar_id; // 0x24
	public int emblem_id; // 0x28
	public string name; // 0x30
	public string squad_name; // 0x38
	public int goose; // 0x40

	// Methods
	public void .ctor(ISFSObject o); // 0x100143904
}

// Namespace: 
public class SquadMember // TypeDefIndex: 4550
{
	// Fields
	public const int STATUS_COMMANDER = 4; // 0x0
	public const int STATUS_VICE_COMMANDER = 3; // 0x0
	public const int STATUS_OFFICER = 2; // 0x0
	public const int STATUS_MEMBER = 1; // 0x0
	public const int STATUS_RECRUIT = 0; // 0x0
	public int user_id; // 0x10
	public int squad_id; // 0x14
	public int status; // 0x18
	public long rankpoints; // 0x20
	public long rankpoints_squad; // 0x28
	public int week_rankpoints_squad; // 0x30
	public int flag_id; // 0x34
	public int avatar_id; // 0x38
	public string name; // 0x40
	public bool is_online; // 0x48
	public int t_rankpoints; // 0x4C
	public int a_rankpoints; // 0x50
	public bool is_merc; // 0x54
	public int merc_league; // 0x58
	public int goose; // 0x5C

	// Methods
	public void .ctor(ISFSObject o); // 0x100140B10
}

// Namespace: 
public class SquadRequest // TypeDefIndex: 4551
{
	// Fields
	public int user_id; // 0x10
	public int squad_id; // 0x14
	public long rankpoints; // 0x18
	public int flag_id; // 0x20
	public int avatar_id; // 0x24
	public string name; // 0x28
	public bool is_merc; // 0x30
	public int merc_league; // 0x34
	public int goose; // 0x38

	// Methods
	public void .ctor(ISFSObject o); // 0x100147D28
	public void .ctor(int _user_id, int _squad_id); // 0x100117AB8
}

// Namespace: 
public static class Stamina // TypeDefIndex: 4552
{
	// Fields
	public const int DEFAULT_BATTLE_COST = 3; // 0x0
	public static int lastusingtime; // 0x0
	public static int facebooktime; // 0x4
	private static float value_; // 0x8
	public static int maxValue; // 0xC

	// Methods
	private static void .cctor(); // 0x10014B5A4
	public static float get_Value(); // 0x10014B5F8
	public static void set_Value(float value); // 0x10014B660
	public static bool Check(int cost); // 0x10014B750
	public static bool Use(int cost); // 0x10014B7D0
}

// Namespace: 
public static class Title // TypeDefIndex: 4553
{
	// Fields
	public static Titles[] titles; // 0x0
	public static Titles[] images; // 0x8

	// Methods
	private static void .cctor(); // 0x100151A44
	public static string GetName(long rankpoints); // 0x100151AE0
	public static string GetImageName(long rankpoints); // 0x100151C40
	public static string GetImageNameRank(int rank); // 0x100151D84
	public static int GetImageIndex(long value); // 0x100151E64
	public static int GetImageIndexViaName(string name); // 0x100151FA0
	public static void SetupTitles(ISFSArray ttls); // 0x1001520C8
}

// Namespace: 
public class Titles // TypeDefIndex: 4554
{
	// Fields
	public string name; // 0x10
	public long rankpoints; // 0x18

	// Methods
	public void .ctor(); // 0x10015278C
}

// Namespace: 
public class Tournament // TypeDefIndex: 4555
{
	// Fields
	public static int instance_id; // 0x0
	public static int mmr; // 0x4
	public static int registration; // 0x8
	public static string reg_user_name; // 0x10
	public static int enemy_squad_id; // 0x18
	public static string enemy_squad_name; // 0x20
	public static int enemy_emblem_id; // 0x28
	public static int last_enemy_squad_id; // 0x2C
	public static string last_enemy_squad_name; // 0x30
	public static int last_enemy_emblem_id; // 0x38
	public static int last_enemy_result; // 0x3C
	public static int last_enemy_win; // 0x40
	public static long season_start; // 0x48
	public static long season_end; // 0x50
	public static int t_battles; // 0x58
	public static int t_wins; // 0x5C
	public static WarTerritory territory; // 0x60
	public static int winner; // 0x68

	// Methods
	public void .ctor(); // 0x10019F7B4
	public static void UpdateInfo(ISFSObject o); // 0x10019F7BC
	public static void EndBattle(ISFSObject o); // 0x1001A031C
}

// Namespace: 
public struct TransformData // TypeDefIndex: 4556
{
	// Fields
	public Vector3 position; // 0x10
	public Quaternion rotation; // 0x1C
	public Vector3 localPosition; // 0x2C
	public Vector3 localScale; // 0x38
	public Quaternion localRotation; // 0x44
	public Transform parent; // 0x58

}

// Namespace: 
public static class TransformUtils // TypeDefIndex: 4557
{
	// Methods
	public static TransformData Clone(Transform transform); // 0x1001A1B04
}

// Namespace: 
public static class Tunings // TypeDefIndex: 4558
{
	// Fields
	public static List`1<Tuning> tunings; // 0x0
	public static List`1<TuningBundle> tuningsbundle; // 0x8
	private static string[] namePrefix; // 0x10
	public static string cam_square; // 0x18
	private static string[] namePrefixSquare; // 0x20

	// Methods
	private static void .cctor(); // 0x1001A9010
	public static void UnloadUnusedTunings(); // 0x1001A9350
	public static Tuning GetCamouflage(int weapontype, int camotype); // 0x1001A9CA0
	public static Tuning GetTuning(TuningGroups tuningGroup, int itemType, int tuningType); // 0x1001A9F88
	public static Tuning GetTuning(TuningGroups tuningGroup, int tuningType); // 0x1001AA278
	public static List`1<Tuning> GetTunings(TuningGroups tuningGroup, int itemType); // 0x1001AA55C
	public static BundleOptions GetTuningBundle(TuningGroups tuningGroup, int itemtype); // 0x1001AA654
	public static BundleOptions GetTuningBundle(TuningGroups tuningGroup, int itemtype, int tuningType); // 0x1001AAA40
	public static void SetTuningData(string[] jsondata); // 0x1001AADB0
	public static void SetTuningBundleData(string[] jsondata); // 0x1001ACFEC
	public static string NameSquare(TuningGroups tuningGroup, int tuningType); // 0x1001AD5F0
	public static void OnTuningBuyed(TuningGroups group_type, int item_type, int tuning_type); // 0x1001AD6DC
}

// Namespace: 
public sealed class WeaponCamoTypes : Enum // TypeDefIndex: 4559
{
	// Fields
	public int value__; // 0x10
	public const WeaponCamoTypes cam00 = 0; // 0x0
	public const WeaponCamoTypes cam01 = 1; // 0x0
	public const WeaponCamoTypes cam02 = 2; // 0x0
	public const WeaponCamoTypes cam03 = 3; // 0x0
	public const WeaponCamoTypes cam04 = 4; // 0x0
	public const WeaponCamoTypes cam05 = 5; // 0x0
	public const WeaponCamoTypes cam06 = 6; // 0x0
	public const WeaponCamoTypes cam07 = 7; // 0x0
	public const WeaponCamoTypes cam08 = 8; // 0x0
	public const WeaponCamoTypes cam09 = 9; // 0x0
	public const WeaponCamoTypes cam10 = 10; // 0x0

}

// Namespace: 
public sealed class TuningGroups : Enum // TypeDefIndex: 4560
{
	// Fields
	public int value__; // 0x10
	public const TuningGroups WeaponCamo = 0; // 0x0
	public const TuningGroups WeaponHandling = 1; // 0x0
	public const TuningGroups HelmetCamo = 2; // 0x0
	public const TuningGroups HelmetAero = 3; // 0x0

}

// Namespace: 
public class TuningBundle // TypeDefIndex: 4561
{
	// Fields
	public int itemType; // 0x10
	public int tuningType; // 0x14
	public TuningGroups tuningGroup; // 0x18
	public BundleOptions bundleOptions; // 0x20

	// Methods
	public void .ctor(); // 0x1001AD570
	public void .ctor(TuningGroups tuningGroup, int itemtype, int tuningType); // 0x1001AA9B4
}

// Namespace: 
public class Tuning // TypeDefIndex: 4562
{
	// Fields
	public int itemType; // 0x10
	public int tuningType; // 0x14
	public TuningGroups tuningGroup; // 0x18
	public MoneyTypes moneytype; // 0x1C
	public int max_uses; // 0x20
	public long rankpoints_required; // 0x28
	public int dollars; // 0x30
	public bool dollarsPercent; // 0x34
	public int crystals; // 0x38
	public bool crystalsPercent; // 0x3C
	public int rankpoints; // 0x40
	public bool rankpointsPercent; // 0x44
	public int experience; // 0x48
	public bool experiencePercent; // 0x4C
	public double damage; // 0x50
	public bool damagePercent; // 0x58
	public double speed; // 0x60
	public bool speedPercent; // 0x68
	public double zoom; // 0x70
	public bool zoomPercent; // 0x78
	public double stability; // 0x80
	public bool stabilityPercent; // 0x88
	public double amount; // 0x90
	public bool amountPercent; // 0x98
	public double zoomFovMin; // 0xA0
	public bool zoomFovMinPercent; // 0xA8
	public double zoomFovMax; // 0xB0
	public bool zoomFovMaxPercent; // 0xB8
	public double zoomNoiseRadiusX; // 0xC0
	public bool zoomNoiseRadiusXPercent; // 0xC8
	public double zoomNoiseRadiusY; // 0xD0
	public bool zoomNoiseRadiusYPercent; // 0xD8
	public double zoomNoiseSpeed; // 0xE0
	public bool zoomNoiseSpeedPercent; // 0xE8
	public double zoomNoiseRotateSpeed; // 0xF0
	public bool zoomNoiseRotateSpeedPercent; // 0xF8
	public double shootStun; // 0x100
	public bool shootStunPercent; // 0x108
	public double shootStunOutSpeed; // 0x110
	public bool shootStunOutSpeedPercent; // 0x118
	public double shootStunInSpeed; // 0x120
	public bool shootStunInSpeedPercent; // 0x128
	public double shootPower; // 0x130
	public bool shootPowerPercent; // 0x138
	public double shootPowerOutSpeed; // 0x140
	public bool shootPowerOutSpeedPercent; // 0x148
	public double shootPowerInSpeed; // 0x150
	public bool shootPowerInSpeedPercent; // 0x158
	public double bulletSpeed; // 0x160
	public bool bulletSpeedPercent; // 0x168
	public double fireSpeed; // 0x170
	public bool fireSpeedPercent; // 0x178
	public double reloadSpeed; // 0x180
	public bool reloadSpeedPercent; // 0x188
	public double zoomInSpeed; // 0x190
	public bool zoomInSpeedPercent; // 0x198
	public int stamina; // 0x19C
	public int headshotDamagePercent; // 0x1A0
	public string special; // 0x1A8
	public int maxParamPercent; // 0x1B0
	public double armor; // 0x1B8
	public double armorTech; // 0x1C0
	public double seekpower; // 0x1C8
	public double seekpowerTech; // 0x1D0
	public double camouflage; // 0x1D8
	public double camouflageTech; // 0x1E0
	public double battery; // 0x1E8
	public double frequency; // 0x1F0
	public double frequencyTech; // 0x1F8
	public bool maxpart_required; // 0x200
	public int tuning_required; // 0x204
	public int cup_required; // 0x208
	public bool enabled; // 0x20C
	private int m_price; // 0x210
	private Dictionary`2<int, int> territory_prices; // 0x218

	// Methods
	public void .ctor(JSONNode node); // 0x1001AB038
	public string get_name(); // 0x1001ADAEC
	public string get_nameSquare(); // 0x1001ADBD4
	public int get_price(); // 0x1001ADCBC
	public bool IsRequirementsMet(); // 0x1001AE090
	public string get_Key(); // 0x1001AE378
	public string get_DefaultName(); // 0x1001AE468
	private int TerritoryPrice(int territory_id); // 0x1001ADFF8
}

// Namespace: 
public class BundleOptions // TypeDefIndex: 4563
{
	// Fields
	public int version; // 0x10
	public List`1<Texture2D> tex2D; // 0x18

	// Methods
	public void .ctor(); // 0x1001AD578
}

// Namespace: 
private sealed class <GetTunings>c__AnonStorey10F // TypeDefIndex: 4564
{
	// Fields
	internal TuningGroups tuningGroup; // 0x10
	internal int itemType; // 0x14

	// Methods
	public void .ctor(); // 0x1001AA64C
	internal bool <>m__17F(Tuning camo); // 0x1001ADAB0
}

// Namespace: 
public static class Util // TypeDefIndex: 4565
{
	// Fields
	private static NumberFormatInfo numberFormatInfo; // 0x0
	private static readonly DateTime UnixEpoch; // 0x8
	private static Random rng; // 0x18

	// Methods
	private static void .cctor(); // 0x1001B4BD8
	public static long GetUTCUnixTimeSecs(); // 0x1001B4C88
	public static long GetUTCUnixTimeMSecs(); // 0x1001B0750
	public static int GetUTCUnixTimeSecsLikeInt(); // 0x1001B4D60
	public static DateTime Now(); // 0x1001B4DE8
	public static int GetUTCUnixTimeSecsLikeIntDay(); // 0x1001B4E74
	public static int DeltaTimeOfDay(int time_of_day_seconds); // 0x1001B5038
	public static NumberFormatInfo GetNumberFormat(); // 0x1001B50E8
	public static int EndOfTheWeek(); // 0x1001B528C
	public static int ToSeconds(int prime_time); // 0x1001B536C
	public static string TimeToString(int delta); // 0x1001B53A0
	public static string TimeToString(long delta); // 0x1001B56B0
	public static string GetFullName(string name, string squadName, bool mercenary, int merc_league, int t_own, optional bool t_owned); // 0x1001B5A9C
	public static void Shuffle(IList`1<T> list); // 0
}

// Namespace: 
public class War // TypeDefIndex: 4566
{
	// Fields
	public static long ter_block; // 0x0
	public static int territory_id; // 0x8
	public static Dictionary`2<int, WarTerritory> territories; // 0x10
	private static Func`2<WarTerritory, int> <>f__am$cache3; // 0x18

	// Methods
	public void .ctor(); // 0x1001B7544
	private static void .cctor(); // 0x1001B754C
	public static List`1<WarTerritory> GetTerritories(BattleMode battleMode); // 0x1001B75C0
	public static void Setup(ISFSObject o); // 0x1001B7794
	public static void UpdateRegistrations(IList`1<WarTerritoryRegInfo> terr); // 0x1001B8CE4
	public static void UpdateTerritories(ISFSArray a); // 0x1001B928C
	public static void UpdateBids(ISFSObject oo); // 0x1001B9C5C
	public static void UpdateNodes(ISFSObject o); // 0x1001BA3A4
	public static void StartBattle(ISFSObject o); // 0x1001BB8A0
	public static void EndBattle(ISFSObject o); // 0x1001BBB08
	private static int <GetTerritories>m__181(WarTerritory territory); // 0x1001BBDA8
}

// Namespace: 
private sealed class <GetTerritories>c__AnonStorey110 // TypeDefIndex: 4567
{
	// Fields
	internal BattleMode battleMode; // 0x10

	// Methods
	public void .ctor(); // 0x1001B778C
	internal bool <>m__180(WarTerritory territory); // 0x1001BBDC0
}

// Namespace: 
public class WarConnection // TypeDefIndex: 4568
{
	// Fields
	public int id; // 0x10
	public int territory_id; // 0x14
	public int node_1; // 0x18
	public int node_2; // 0x1C

	// Methods
	public void .ctor(WarConnection a); // 0x1001BBDE4
	public void .ctor(ISFSObject o); // 0x1001BBE24
}

// Namespace: 
public class WarNode // TypeDefIndex: 4569
{
	// Fields
	public int id; // 0x10
	public int territory_id; // 0x14
	public int x; // 0x18
	public int y; // 0x1C
	public int owner; // 0x20
	public bool is_base; // 0x24
	public string map; // 0x28
	public int battle_timer; // 0x30
	public int cooldown_timer; // 0x34
	public long battle_start; // 0x38
	public long cooldown_start; // 0x40
	public int attackers_count; // 0x48
	public int defenders_count; // 0x4C
	public int score; // 0x50

	// Methods
	public void .ctor(WarNode a); // 0x1001BC32C
	public void .ctor(ISFSObject o); // 0x1001BC3AC
	public void .ctor(); // 0x1001BC7FC
	public int GetBattleTimeLeft(); // 0x1001BC804
	public int GetCooldownTimeLeft(); // 0x1001BC8B0
}

// Namespace: 
public class WarNodeMenu : MonoBehaviour // TypeDefIndex: 4570
{
	// Fields
	public tk2dTextMesh timer; // 0x18
	public tk2dTextMesh PlayersBlue; // 0x20
	public tk2dTextMesh PlayersRed; // 0x28
	public int node_id; // 0x30
	public tk2dSprite icon; // 0x38

	// Methods
	public void .ctor(); // 0x1001BC964
}

// Namespace: 
public class WarTerritoryRegInfo : ISFSTranform // TypeDefIndex: 4571
{
	// Fields
	public int territory_id; // 0x10
	public int alliance_id; // 0x14
	public int user_id; // 0x18
	public int squad_id; // 0x1C
	public string name; // 0x20
	public string squad_name; // 0x28

	// Methods
	public void .ctor(); // 0x1001C0AB4
	public void Setup(ISFSObject o); // 0x1001C0ABC
}

// Namespace: 
public class WarTerritory // TypeDefIndex: 4572
{
	// Fields
	public const int ATTACKER = 2; // 0x0
	public const int DEFENDER = 1; // 0x0
	public WarTerritoryRegInfo regInfo; // 0x10
	public int registered_count; // 0x18
	public int qualify_winner; // 0x1C
	public string qualify_winner_name; // 0x20
	public int qualify_winner_emblem; // 0x28
	public int qualify_second; // 0x2C
	public string qualify_second_name; // 0x30
	public int qualify_second_emblem; // 0x38
	public int id; // 0x3C
	public string name; // 0x40
	public int income; // 0x48
	public int prime_time; // 0x4C
	public int min_bid; // 0x50
	public int mode; // 0x54
	public Dictionary`2<int, WarNode> nodes; // 0x58
	public List`1<WarConnection> connections; // 0x60
	public int bid_squad_id; // 0x68
	public string bid_squad_name; // 0x70
	public string bid_user_name; // 0x78
	public int bid_up; // 0x80
	public int bid_value; // 0x84
	public int owner_squad_id; // 0x88
	public string owner_squad_name; // 0x90
	public int owner_squad_emblem_id; // 0x98
	public int real_owner_id; // 0x9C
	public string real_owner_name; // 0xA0
	public int real_owner_emblem; // 0xA8
	public int days_owned; // 0xAC
	public int attacker_squad_id; // 0xB0
	public string attacker_squad_name; // 0xB8
	public int attacker_squad_emblem_id; // 0xC0
	public int winner; // 0xC4
	public int icon_bundle_version; // 0xC8
	public Texture2D territory_icon; // 0xD0
	public int instance_id; // 0xD8
	public int min_cups; // 0xDC
	public int max_cups; // 0xE0
	public int owner_bonus; // 0xE4
	public int special_offer; // 0xE8

	// Methods
	public void .ctor(WarTerritory a); // 0x1001BA790
	public void .ctor(ISFSObject o); // 0x1001B7A74
	public bool get_registred(); // 0x1001C05A4
	public bool get_can_register(); // 0x1001C05B4
	public static int get_qualification_time(); // 0x1001C063C
	public static int get_register_start_time(); // 0x1001C06A0
	public void UpdateNodes(ISFSObject o); // 0x1001BAD14
	public bool CanAttackNode(int node_id); // 0x1001BEDEC
	private bool HasConnectionToOwnedNode(WarNode n, int owner); // 0x1001C06AC
	public int get_prime_time_seconds(); // 0x1001C0964
	public int get_next_prime_time(); // 0x1001C09F8
}

// Namespace: 
public static class Weapons // TypeDefIndex: 4573
{
	// Fields
	public static Weapon ActiveWeapon; // 0x0
	public static List`1<Weapon> weapons; // 0x8

	// Methods
	private static void .cctor(); // 0x1001CA91C
	public static void UnloadUnusedWeapons(); // 0x1001CA99C
	public static void BuyWeapon(Weapon weapon); // 0x1001CAC50
	public static void DeliveryWeapon(Weapon weapon); // 0x1001CACA8
	public static void InstallWeapon(Weapon weapon); // 0x1001CAD00
	public static void BuyStage(int stage, WeaponPart part); // 0x1001CAFEC
	public static void DeliveryStage(int stage, WeaponPart part); // 0x1001CB054
	public static void RecaculateAttributes(Weapon w); // 0x1001CAF98
	public static void InstallStage(Weapon w, int stage, WeaponPart part); // 0x1001CB0BC
	public static Weapon GetActiveWeapon(); // 0x1001A97DC
	public static Weapon GetNextWeaponToBuy(); // 0x1001CB160
	public static Weapon GetWeaponViaType(int type); // 0x1001C4068
	public static Weapon GetOwnedWeaponViaType(int type); // 0x1001CB348
	public static Weapon GetWeaponViaName(string name); // 0x1001CB58C
	public static WeaponPart GetPart(Weapon w, WeaponPartType part); // 0x1001CB89C
	public static WeaponPartStage GetActiveStageInPart(WeaponPart p); // 0x1001CB8B8
	public static WeaponPartStage GetStageInPartForInstall(WeaponPart p); // 0x1001CB910
	public static WeaponPartStage GetStageInPartForDelivery(WeaponPart p); // 0x1001CB968
	public static WeaponPartStage GetStageInPartForBuy(WeaponPart p); // 0x1001CB9C0
	public static WeaponPartStage GetLastPurchasedStage(WeaponPart p); // 0x1001CBA18
	public static WeaponPartStage GetLastStageInPart(WeaponPart p); // 0x1001CBA70
	public static WeaponPartStage GetFirstStageInPart(WeaponPart p); // 0x1001CBAC8
	public static WeaponPartStage GetStageInPart(WeaponPart p, int stage); // 0x1001CBB20
	public static WeaponPartStage GetNewStageForPurchase(WeaponPart p); // 0x1001CBB88
	public static WeaponPartStage[] GetStagesForPart(WeaponPart p); // 0x1001CBBE0
	public static void SetDataBase(string[] jsondata); // 0x1001CBC38
	public static void SetDataUser(string[] jsondata); // 0x1001D34B4
	public static void SetDataForTest(); // 0x1001D4A44
	private static void UpgradeInject(); // 0x1001D3278
}

// Namespace: 
public static class Words // TypeDefIndex: 4574
{
	// Methods
	public static string GetNumEnding(int number, string[] endingArray); // 0x1001D649C
	public static string GetEndingTime(int current, int end, ColorTypes colorType); // 0x1001D6628
	public static string GetEndingTime(int current, int end); // 0x1001D9624
	public static string GetEndingTimeHour(int current, int end); // 0x1001DB140
}

// Namespace: 
public sealed class ColorTypes : Enum // TypeDefIndex: 4575
{
	// Fields
	public int value__; // 0x10
	public const ColorTypes upgrade = 0; // 0x0
	public const ColorTypes shop = 1; // 0x0

}

// Namespace: 
public class Rifle // TypeDefIndex: 4576
{
	// Fields
	public string name; // 0x10
	public Type type; // 0x18
	public float shootDelay; // 0x1C
	public float reloadDelay; // 0x20
	public float zoomDelay; // 0x24
	public int ammoCount; // 0x28

	// Methods
	public void .ctor(); // 0x1000D2A80
}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4577
{
	// Fields
	public int value__; // 0x10
	public const Type manual = 0; // 0x0
	public const Type auto = 1; // 0x0

}

// Namespace: 
public class Storage : MonoBehaviour // TypeDefIndex: 4578
{
	// Fields
	public GameShoot gameShoot; // 0x18
	public ArrayList RiflesArray; // 0x20
	public RuntimeAnimatorController AS50HandsController; // 0x28
	public RuntimeAnimatorController AWMHandsController; // 0x30
	public RuntimeAnimatorController BarretHandsController; // 0x38
	public RuntimeAnimatorController CheytacHandsController; // 0x40
	public RuntimeAnimatorController L42EnfieldHandsController; // 0x48
	public RuntimeAnimatorController M21HandsController; // 0x50
	public RuntimeAnimatorController PGMHandsController; // 0x58
	public RuntimeAnimatorController PSG1HandsController; // 0x60
	public RuntimeAnimatorController SR25HandsController; // 0x68
	public RuntimeAnimatorController SVDHandsController; // 0x70
	public RuntimeAnimatorController VyhlopHandsController; // 0x78
	public RuntimeAnimatorController OrsisHandsController; // 0x80
	public RuntimeAnimatorController DSR50HandsController; // 0x88
	public RuntimeAnimatorController TRAC300HandsController; // 0x90
	public RuntimeAnimatorController Vyhlop2HandsController; // 0x98
	public RuntimeAnimatorController Barret2HandsController; // 0xA0
	public RuntimeAnimatorController PGM2HandsController; // 0xA8
	public GameObject CasePrefab; // 0xB0

	// Methods
	public void .ctor(); // 0x10014CA6C
	private void Awake(); // 0x10014CAD4
	private void Start(); // 0x10014CCC8
}

// Namespace: 
public class SuperScrollDemo : MonoBehaviour // TypeDefIndex: 4579
{
	// Fields
	public float speed; // 0x18
	public float waitTime; // 0x1C

	// Methods
	public void .ctor(); // 0x10014DB48
	private void Update(); // 0x10014DB50
}

// Namespace: 
public abstract class TableView : MonoBehaviour // TypeDefIndex: 4580
{
	// Fields
	public float contentheight; // 0x18
	public float cellHeight; // 0x1C
	public tk2dSlicedSprite background; // 0x20
	public tk2dUIScrollableArea scroll; // 0x28
	private GameObject root; // 0x30

	// Methods
	protected void .ctor(); // 0x10014DBCC
	protected virtual void OnStart(); // 0x10014DBE0
	protected abstract int OnCount(); // 0
	protected abstract GameObject OnCell(int i); // 0
	private void Start(); // 0x10014DBE4
	public void ReloadContent(); // 0x10014DC30
	protected virtual float OnHeight(int i); // 0x10014DF10
}

// Namespace: 
public class TabsController : MonoBehaviour // TypeDefIndex: 4581
{
	// Fields
	public MenuTabsControl tabsControl; // 0x18
	public GameObject[] content; // 0x20

	// Methods
	public void .ctor(); // 0x10014DF18
	private void Start(); // 0x10014DF20
	private void Update(); // 0x10014E03C
	private void <Start>m__182(int index); // 0x10014E040
}

// Namespace: 
public class TextColorStates : UIStates // TypeDefIndex: 4582
{
	// Fields
	public Color normal; // 0x18
	public Color disabled; // 0x28

	// Methods
	public void .ctor(); // 0x10014F3AC
	private void SetState(Color st); // 0x10014F45C
	public override void SetNormal(); // 0x10014F4EC
	public override void SetDisabled(); // 0x10014F4F8
}

// Namespace: 
public class TextInput : MonoBehaviour // TypeDefIndex: 4583
{
	// Fields
	public tk2dUIItem selectionBtn; // 0x18
	public tk2dTextMesh inputLabel; // 0x20
	public GameObject unSelectedStateGO; // 0x28
	public GameObject selectedStateGO; // 0x30
	public GameObject cursor; // 0x38
	public float fieldLength; // 0x40
	public bool onlyUpperCase; // 0x44
	public int maxCharacterLength; // 0x48
	public bool isPasswordField; // 0x4C
	public string passwordChar; // 0x50
	public string emptyText; // 0x58
	private tk2dUILayout layoutItem; // 0x60
	private bool isSelected; // 0x68
	private bool wasStartedCalled; // 0x69
	private bool wasOnAnyPressEventAttached; // 0x6A
	private TouchScreenKeyboard keyboard; // 0x70
	private bool listenForKeyboardText; // 0x78
	private bool isDisplayTextShown; // 0x79
	public Action`1<TextInput> OnTextChange; // 0x80
	public string SendMessageOnTextChangeMethodName; // 0x88
	private string text; // 0x90

	// Methods
	public void .ctor(); // 0x10014F764
	public tk2dUILayout get_LayoutItem(); // 0x10014F7FC
	public void set_LayoutItem(tk2dUILayout value); // 0x10014F804
	public GameObject get_SendMessageTarget(); // 0x10014F9B0
	public void set_SendMessageTarget(GameObject value); // 0x10014FA44
	public bool get_IsFocus(); // 0x10014FB18
	public string get_Text(); // 0x10014FB20
	public void set_Text(string value); // 0x10014FB28
	private void Awake(); // 0x1001501F0
	private void Start(); // 0x100150224
	private void OnEnable(); // 0x100150354
	private void OnDisable(); // 0x10015069C
	public void SetFocus(); // 0x100150920
	private void FormatTextForDisplay(string modifiedText); // 0x10014FC18
	private void ListenForKeyboardTextUpdate(); // 0x100150AA0
	private void InputSelected(); // 0x100150930
	private IEnumerator TouchScreenKeyboardLoop(); // 0x100150D48
	private void InputDeselected(); // 0x100150DBC
	private void AnyPress(); // 0x100150EC0
	private void SetState(); // 0x10015055C
	private void SetCursorPosition(); // 0x10014FDF8
	private void LayoutReshaped(Vector3 dMin, Vector3 dMax); // 0x100150FA0
}

// Namespace: 
private sealed class <TouchScreenKeyboardLoop>c__Iterator96 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4584
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal TextInput <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x100150DB4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100151044
	private object System.Collections.IEnumerator.get_Current(); // 0x10015104C
	public bool MoveNext(); // 0x100151054
	public void Dispose(); // 0x100151148
	public void Reset(); // 0x100151154
}

// Namespace: 
public class TipImage : MonoBehaviour // TypeDefIndex: 4585
{
	// Fields
	public string assetBundle; // 0x18
	public string assetName; // 0x20

	// Methods
	public void .ctor(); // 0x1001514F4
	private IEnumerator Start(); // 0x1001514FC
}

// Namespace: 
private sealed class <Start>c__Iterator97 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4586
{
	// Fields
	internal AssetBundleLoadAssetOperation <request>__0; // 0x10
	internal Texture2D <texture>__1; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal TipImage <>f__this; // 0x30

	// Methods
	public void .ctor(); // 0x100151568
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x100151570
	private object System.Collections.IEnumerator.get_Current(); // 0x100151578
	public bool MoveNext(); // 0x100151580
	public void Dispose(); // 0x1001519E4
	public void Reset(); // 0x1001519F0
}

// Namespace: 
public class TopFiveRatingControll : MonoBehaviour // TypeDefIndex: 4587
{
	// Fields
	private const float ROTATION_SPEED = 20; // 0x0
	public float scrollSpeed; // 0x18
	public float scrollWaitTime; // 0x1C
	public GameObject scrollGO; // 0x20
	public bool scrollRotate; // 0x28
	public int nextElement; // 0x2C
	public int prevElement; // 0x30
	public Camera cam; // 0x38
	public GameObject[] squadList; // 0x40
	public GameObject[] personalList; // 0x48
	public Transform element; // 0x50
	public float resetTime; // 0x58
	public float speed; // 0x5C
	public bool allowScale; // 0x60
	public float limitY; // 0x64
	private tk2dUITouch touchTk; // 0x68
	private int fingerId; // 0x84
	private tk2dUIItem button; // 0x88
	private tk2dCamera guicamera; // 0x90
	private Vector2 deltaInput; // 0x98
	public float deltaScale; // 0xA0
	public Quaternion toRotation; // 0xA4
	private float lastTouchTime; // 0xB4
	public Vector3 scaleVelo; // 0xB8
	private float oldScaleTouchDistance; // 0xC4
	public bool forZAxis; // 0xC8
	public bool forHelmet; // 0xC9
	private bool m_DeltaReset; // 0xCA
	public bool oneRotate; // 0xCB
	public List`1<AlphaSaver> alphaSaver; // 0xD0
	public MenuNavigator menuNavigator; // 0xD8
	private float[] velo; // 0xE0
	private bool boola; // 0xE8

	// Methods
	public void .ctor(); // 0x10019D56C
	private void OnEnable(); // 0x10019D5E8
	private void CamOn(); // 0x10019D784
	private void Start(); // 0x10019D7A4
	private void OnDown(tk2dUIItem item); // 0x10019D940
	private void OnUp(tk2dUIItem item); // 0x10019D998
	private void Update(); // 0x10019D9A8
	private void StopRotate(); // 0x10019E760
	private void CheckNextElement(int i); // 0x10019E66C
}

// Namespace: 
public class TotalOnlineLabel : MonoBehaviour // TypeDefIndex: 4588
{
	// Methods
	public void .ctor(); // 0x10019E76C
	private void Start(); // 0x10019E774
	private void Update(); // 0x10019E778
}

// Namespace: 
public struct UITouch // TypeDefIndex: 4589
{
	// Fields
	public const int MOUSE_POINTER_FINGER_ID = 9999; // 0x0
	private TouchPhase <phase>k__BackingField; // 0x10
	private int <fingerId>k__BackingField; // 0x14
	private Vector2 <position>k__BackingField; // 0x18
	private Vector2 <deltaPosition>k__BackingField; // 0x20
	private float <deltaTime>k__BackingField; // 0x28

	// Methods
	public void .ctor(TouchPhase _phase, int _fingerId, Vector2 _position, Vector2 _deltaPosition, float _deltaTime); // 0x1001B3E84
	public void .ctor(Touch touch); // 0x1001B3F08
	public TouchPhase get_phase(); // 0x1001B3F4C
	private void set_phase(TouchPhase value); // 0x1001B3F54
	public int get_fingerId(); // 0x1001B3F64
	private void set_fingerId(int value); // 0x1001B3F6C
	public Vector2 get_position(); // 0x1001B3F7C
	private void set_position(Vector2 value); // 0x1001B3F84
	public Vector2 get_deltaPosition(); // 0x1001B3F98
	private void set_deltaPosition(Vector2 value); // 0x1001B3FA0
	public float get_deltaTime(); // 0x1001B3FAC
	private void set_deltaTime(float value); // 0x1001B3FB4
	public override string ToString(); // 0x1001B4350
}

// Namespace: 
public class Gesture : MonoBehaviour // TypeDefIndex: 4590
{
	// Fields
	public Action`3<UITouch, GestureState, Gesture> OnGesture; // 0x18
	protected tk2dUICamera cam; // 0x20
	private RaycastHit hit; // 0x28
	private Ray ray; // 0x58

	// Methods
	public void .ctor(); // 0x100268280
	private void Update(); // 0x100268288
	public void SetCamera(tk2dUICamera c); // 0x10026828C
	protected tk2dUIItem RaycastForUIItem(tk2dUICamera currCamera, Vector2 screenPos); // 0x100268294
}

// Namespace: 
public sealed class GestureState : Enum // TypeDefIndex: 4591
{
	// Fields
	public int value__; // 0x10
	public const GestureState Began = 0; // 0x0
	public const GestureState Changed = 1; // 0x0
	public const GestureState Ended = 2; // 0x0

}

// Namespace: 
public class MoveGesture : Gesture // TypeDefIndex: 4592
{
	// Fields
	private Nullable`1<UITouch> current; // 0x70

	// Methods
	public void .ctor(); // 0x100078A48
	private void Update(); // 0x100078A50
}

// Namespace: 
public class TouchManager : MonoBehaviour // TypeDefIndex: 4593
{
	// Fields
	private static TouchManager instance; // 0x0
	private Dictionary`2<int, UITouch> _touches; // 0x18
	private Nullable`1<UITouch> primaryTouch; // 0x20

	// Methods
	public void .ctor(); // 0x10019E93C
	public static TouchManager get_Instance(); // 0x10019E9AC
	public UITouch[] get_touches(); // 0x10019EB5C
	private void Start(); // 0x10019EBCC
	private void Update(); // 0x10019EBD0
}

// Namespace: 
private sealed class <Update>c__AnonStorey111 // TypeDefIndex: 4594
{
	// Fields
	internal Touch touch; // 0x10

	// Methods
	public void .ctor(); // 0x10019F72C
	internal bool <>m__183(UITouch t); // 0x10019F734
	internal bool <>m__184(UITouch t); // 0x10019F774
}

// Namespace: 
public class TransferGift : MonoBehaviour // TypeDefIndex: 4595
{
	// Fields
	private tk2dUIItem button; // 0x18
	public GameObject prefab; // 0x20
	private TransferGiftDialog dialog; // 0x28
	private static Action <>f__am$cache3; // 0x0

	// Methods
	public void .ctor(); // 0x1001A0584
	private void Start(); // 0x1001A058C
	private void HandleOnClick(); // 0x1001A0630
	private void <HandleOnClick>m__185(); // 0x1001A0884
	private void <HandleOnClick>m__186(); // 0x1001A0AB4
	private static void <HandleOnClick>m__187(); // 0x1001A0F04
}

// Namespace: 
public class TransformTimerRotate : MonoBehaviour // TypeDefIndex: 4596
{
	// Fields
	public float speed; // 0x18
	public float waittime; // 0x1C
	public float zAngle; // 0x20
	private Vector3 rotate; // 0x24
	public States state; // 0x30
	public bool rotateflag; // 0x34
	public bool allowautomaticrotate; // 0x35
	private float _oldtime; // 0x38
	private int iterations; // 0x3C

	// Methods
	public void .ctor(); // 0x1001A1910
	private void Start(); // 0x1001A1934
	private void Update(); // 0x1001A1960
	public void Rotate(); // 0x1001A1AEC
}

// Namespace: 
public sealed class States : Enum // TypeDefIndex: 4597
{
	// Fields
	public int value__; // 0x10
	public const States idle = 0; // 0x0
	public const States rotate = 1; // 0x0

}

// Namespace: 
public class TuningImage : MonoBehaviour // TypeDefIndex: 4598
{
	// Fields
	public string assetBundle; // 0x18
	public string assetName; // 0x20

	// Methods
	public void .ctor(); // 0x1001A8A58
	private void Awake(); // 0x1001A8A60
	private void OnEnable(); // 0x1001A8AC4
	private IEnumerator Load(); // 0x1001A8B84
	private void OnDestroy(); // 0x1001A8BF0
}

// Namespace: 
private sealed class <Load>c__Iterator98 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4599
{
	// Fields
	internal AssetBundleLoadAssetOperation <request>__0; // 0x10
	internal int $PC; // 0x18
	internal object $current; // 0x20
	internal TuningImage <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1001A8C60
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001A8C68
	private object System.Collections.IEnumerator.get_Current(); // 0x1001A8C70
	public bool MoveNext(); // 0x1001A8C78
	public void Dispose(); // 0x1001A8FB0
	public void Reset(); // 0x1001A8FBC
}

// Namespace: 
public class TuningsBottomItemsController : BottomItemsController // TypeDefIndex: 4600
{
	// Fields
	public Transform item; // 0x18
	public TuningGroups tuningGroup; // 0x20
	private Weapon weapon; // 0x28
	private Helmet helmet; // 0x30

	// Methods
	public void .ctor(); // 0x1001AE5E8
	private int GetActiveTuning(Tuning tuning); // 0x1001AE5F0
	public override Transform[] GetElements(); // 0x1001AE6DC
}

// Namespace: 
public class TutorialController : MonoBehaviour // TypeDefIndex: 4601
{
	// Fields
	public static bool tutorEnable; // 0x0
	public GameObject tutorialDialogPrefab; // 0x18
	public GameObject tutorialDialog2Prefab; // 0x20
	public GameObject tutorialDialog3Prefab; // 0x28
	private TutorialDialog tutorialDialog1; // 0x30
	private TutorialDialog tutorialDialog2; // 0x38
	private TutorialDialog tutorialDialog4; // 0x40
	private TutorialDialog tutorialDialog5; // 0x48
	private TutorialDialog tutorialDialog6; // 0x50
	private TutorialDialog tutorialDialog7; // 0x58
	private TutorialDialog2 tutorialDialog3; // 0x60
	public GameObject target; // 0x68
	public GameEnemy lookAtEnemy; // 0x70
	public OnEnemyLookAtDgt OnEnemyLookAt; // 0x78
	public bool scopeEnable; // 0x80
	public bool zoomX4; // 0x81
	public GameScopeControl gameScopeControl; // 0x88
	public bool firstShot; // 0x90
	public GameShoot gameShoot; // 0x98
	public bool firstKill; // 0xA0
	public EnemyAnimationControl enemyState; // 0xA8
	public bool secondKill; // 0xB0
	public string enemyId; // 0xB8
	public tk2dUIItem specialButton; // 0xC0
	public bool thirdKill; // 0xC8
	public Stage[] stage; // 0xD0
	public Stage[] stageActive; // 0xD8
	public bool canfind; // 0xE0
	public long find_timer; // 0xE8
	public static int CurrentStage; // 0x4
	private int saveStage; // 0xF0
	private bool leaveNextStage; // 0xF4
	public Vector3 targetPoint; // 0xF8
	public Camera mainCamera; // 0x108
	private RaycastHit hit; // 0x110
	private Ray ray; // 0x140
	private float time; // 0x158
	public GameObject ReplayMeshes; // 0x160
	public GameObject RespawnMeshes; // 0x168

	// Methods
	public void .ctor(); // 0x1001AEDF0
	private static void .cctor(); // 0x1001AEDF8
	private void Awake(); // 0x1001AEE4C
	private void tutorWait1(); // 0x1001B0338
	private void tutorWait2(); // 0x1001B0340
	private void ShowHide(int i); // 0x1001B0348
	private void initStage(int currentStage); // 0x1001AEEF8
	private void tutorWait3(); // 0x1001B08F4
	private void specialButtonClick(); // 0x1001B08FC
	private void OnScrollWheelChange(float mouseWheelChange); // 0x1001B0998
	private void zoomButtonDown(); // 0x1001B0A68
	private TutorialDialog CreateTutorialDialog(string header, string subheader); // 0x1001B04C0
	private TutorialDialog2 CreateTutorialDialog2(string header); // 0x1001B0610
	private TutorialDialog2 CreateTutorialDialog3(string header); // 0x1001B07B4
	private void tutor1Click(); // 0x1001B0E28
	private void tutor2Click(); // 0x1001B0E80
	private void tutor4Click(); // 0x1001B0ED8
	private void tutor5Click(); // 0x1001B1014
	private void tutor6Click(); // 0x1001B10A4
	private void tutor7Click(); // 0x1001B10FC
	private void NextStage(); // 0x1001B1240
	private void Update(); // 0x1001B1370
	private bool CheckForEnemyTarget(); // 0x1001B1C70
}

// Namespace: 
public class Stage // TypeDefIndex: 4602
{
	// Fields
	public GameObject[] go; // 0x10
	public GameObject[] show; // 0x18

	// Methods
	public void .ctor(); // 0x1001B2030
}

// Namespace: 
public sealed class OnEnemyLookAtDgt : MulticastDelegate // TypeDefIndex: 4603
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1001B1FC4
	public virtual void Invoke(GameEnemy enemy); // 0x1001B1F28
	public virtual IAsyncResult BeginInvoke(GameEnemy enemy, AsyncCallback callback, object object); // 0x1001B1FD4
	public virtual void EndInvoke(IAsyncResult result); // 0x1001B2024
}

// Namespace: 
public class TutorialControllermenu : MonoBehaviour // TypeDefIndex: 4604
{
	// Fields
	private bool nickChanged; // 0x18
	public GameObject tutorialDialogPrefab; // 0x20
	public GameObject tutorialDialog2Prefab; // 0x28
	private TutorialDialog tutorialDialog1; // 0x30
	private TutorialDialog tutorialDialog2; // 0x38
	private TutorialDialog tutorialDialog3; // 0x40
	private TutorialDialog tutorialDialog4; // 0x48
	private TutorialDialog2 tutorialDialog5; // 0x50
	public tk2dUIItem weaponMenu; // 0x58
	public tk2dUIItem weaponEquip; // 0x60
	public tk2dUIItem resaultTableButton; // 0x68
	public GameObject tutorial4StageGO; // 0x70
	public GameObject crystalBtn; // 0x78
	public GameObject installedBtn; // 0x80
	public tk2dUIItem upgradeBtn; // 0x88
	public GameObject arrow; // 0x90
	public GameObject arrow2; // 0x98
	public GameObject arrow3; // 0xA0
	public GameObject selector; // 0xA8
	public GameObject updateCurentButton; // 0xB0
	public MenuNavigator nav; // 0xB8
	public GameObject tutor402Enable; // 0xC0
	public NicknameDialogControl nicknameDialog; // 0xC8

	// Methods
	public void .ctor(); // 0x1001B2038
	private void Awake(); // 0x1001B2040
	private void ResaultTableButtonClick(); // 0x1001B2258
	private void initStage(int currentStage); // 0x1001B22F4
	private void Update(); // 0x1001B32A8
	private void WeaponEquipClick(); // 0x1001B368C
	private void Wate(); // 0x1001B3728
	private void tutor0Click(); // 0x1001B3730
	private void tutor1Click(); // 0x1001B379C
	private void tutor2Click(); // 0x1001B37F4
	private void tutor3Click(); // 0x1001B3954
	private void tutor4Click(); // 0x1001B39AC
	private TutorialDialog CreateTutorialDialog(string header, string subheader); // 0x1001B3018
	private TutorialDialog2 CreateTutorialDialog2(string header); // 0x1001B3168
}

// Namespace: 
public class TutorialDialog : DialogBasic // TypeDefIndex: 4605
{
	// Fields
	public tk2dTextMesh header; // 0x98
	public tk2dTextMesh subheader; // 0xA0
	public tk2dUIItem arrowButton; // 0xA8

	// Methods
	public void .ctor(); // 0x1001B3CC0
	public void SetHeader(string text); // 0x1001B0B1C
	public void SetSubHeader(string text); // 0x1001B0B90
}

// Namespace: 
public class TutorialDialog2 : DialogBasic // TypeDefIndex: 4606
{
	// Fields
	public tk2dTextMesh setText; // 0x98
	public bool invert; // 0xA0
	public float VarX; // 0xA4
	public tk2dSlicedSprite bgX; // 0xA8

	// Methods
	public void .ctor(); // 0x1001B3D28
	public void SetText(string text); // 0x1001B0C04
}

// Namespace: 
public class NewItemsTest // TypeDefIndex: 4607
{
	// Methods
	public void .ctor(); // 0x10007C110
}

// Namespace: 
public class VKLikeButton : MonoBehaviour // TypeDefIndex: 4608
{
	// Fields
	public GameObject crystals; // 0x18
	public LocalizationTextMesh text; // 0x20
	public tk2dTextMesh reward; // 0x28

	// Methods
	public void .ctor(); // 0x1001B6664
	private void Start(); // 0x1001B666C
	private void Update(); // 0x1001B6884
	private void OnClick(); // 0x1001B68FC
}

// Namespace: 
public class VKLogInOutButton : MonoBehaviour // TypeDefIndex: 4609
{
	// Fields
	public LocalizationTextMesh text; // 0x18
	public GameObject confirmDialogPrefab; // 0x20

	// Methods
	public void .ctor(); // 0x1001B6BF8
	private void Start(); // 0x1001B6C00
	private void Update(); // 0x1001B6D40
	private void OnClick(); // 0x1001B6DB8
	private void OnFacebookLogoutClick(); // 0x1001B6F38
}

// Namespace: 
public static class VKWrapper // TypeDefIndex: 4610
{
	// Fields
	public static Action`1<string> OnLogin; // 0x0
	private static CallBack <>f__am$cache1; // 0x8

	// Methods
	public static bool get_IsAuth(); // 0x1001B691C
	public static void LogIn(); // 0x1001B69E4
	public static void LogOut(); // 0x1001B7110
	private static void OnLoggedIn(string val); // 0x1001B7174
	public static void Join(); // 0x1001B6A8C
	private static void <Join>m__188(object obj); // 0x1001B7210
}

// Namespace: 
public class ValueBlock : MonoBehaviour // TypeDefIndex: 4611
{
	// Fields
	private tk2dTextMesh text; // 0x18
	private string Value; // 0x20

	// Methods
	public void .ctor(); // 0x1001B5FA8
	public string get_value(); // 0x1001B5FB0
	public void set_value(string value); // 0x1001B5FB8
	private void Start(); // 0x1001B6068
	public void SetVisible(bool val); // 0x1001B60D0
	private void Update(); // 0x1001B6184
}

// Namespace: 
public class VisionColorControl : MonoBehaviour // TypeDefIndex: 4612
{
	// Methods
	public void .ctor(); // 0x1001B6188
	protected virtual Color32 Color(); // 0x1001B6190
	private void Update(); // 0x1001B6238
}

// Namespace: 
public class VisionColorControlWithHL : VisionColorControl // TypeDefIndex: 4613
{
	// Fields
	public bool spot; // 0x18

	// Methods
	public void .ctor(); // 0x1001B62DC
	protected override Color32 Color(); // 0x1001B62E4
}

// Namespace: 
public class VisionControl : MonoBehaviour // TypeDefIndex: 4614
{
	// Fields
	private bool state; // 0x18
	public GameObject normal; // 0x20
	public GameObject vision; // 0x28

	// Methods
	public void .ctor(); // 0x1001B6338
	private void Start(); // 0x1001B6340
	private void Update(); // 0x1001B6400
}

// Namespace: 
public class VisionImageControl : MonoBehaviour // TypeDefIndex: 4615
{
	// Fields
	public bool vision; // 0x18
	private Renderer sprite; // 0x20

	// Methods
	public void .ctor(); // 0x1001B64FC
	private void Start(); // 0x1001B6504
	private void Update(); // 0x1001B655C
}

// Namespace: 
public class VolumeControl : MonoBehaviour // TypeDefIndex: 4616
{
	// Fields
	public SoundTypes soundtype; // 0x18

	// Methods
	public void .ctor(); // 0x1001B72D0
	private void Start(); // 0x1001B72D8
}

// Namespace: 
public class WarNodesMenu : MonoBehaviour // TypeDefIndex: 4617
{
	// Fields
	public int territory_id; // 0x18
	public int prime_time; // 0x1C
	public tk2dTextMesh territory_name; // 0x20
	public tk2dTextMesh timer; // 0x28
	public tk2dTextMesh teamBlue; // 0x30
	public tk2dTextMesh teamRed; // 0x38
	public tk2dUIItem blueButton; // 0x40
	public tk2dUIItem redButton; // 0x48
	public tk2dSprite blueIcon; // 0x50
	public tk2dSprite redIcon; // 0x58
	private int blueID; // 0x60
	private int redID; // 0x64
	public Transform WarNodesTransform; // 0x68
	public GameObject loadinggo; // 0x70
	public Transform spiner; // 0x78
	public float angle; // 0x80
	public bool is_tournament; // 0x84
	private Object warNode; // 0x88
	private Object warConnection; // 0x90
	private GameObject[] warNodes; // 0x98
	private GameObject[] warConnections; // 0xA0
	private long last_update; // 0xA8
	private bool is_ticking; // 0xB0
	private Color color_red; // 0xB4
	private Color color_blue; // 0xC4
	public bool loadstarted; // 0xD4
	public MenuStamina menuStamina; // 0xD8
	private int attack_node_id; // 0xE0

	// Methods
	public void .ctor(); // 0x1001BC96C
	private void Start(); // 0x1001BCA04
	private void BlueSquad(); // 0x1001BCA7C
	private void RedSquad(); // 0x1001BCBD8
	private void OnEnable(); // 0x1001BCD34
	private void OnDisable(); // 0x1001BD12C
	private void Update(); // 0x1001BD2FC
	private void OnNodesUpdate(); // 0x1001BD374
	private IEnumerator Tick(); // 0x1001BED78
	private void UpdateNodes(); // 0x1001BE67C
	private void DisableNodes(); // 0x1001BF1A4
	public void OnNodeClick(int node_id); // 0x1001BF3A4
	private void InputEnabled(bool inputEnabled); // 0x1001BF6A4
	private void OnAttackOk(string map); // 0x1001BF740
	private void OnAttackError(); // 0x1001BF988
	private IEnumerator load(string map); // 0x1001BFC50
}

// Namespace: 
private sealed class <Tick>c__Iterator99 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4618
{
	// Fields
	internal long <now_msec>__0; // 0x10
	internal DateTime <now>__1; // 0x18
	internal int <hourNow>__2; // 0x28
	internal int <minuteNow>__3; // 0x2C
	internal int <secondNow>__4; // 0x30
	internal int <hourPT>__5; // 0x34
	internal int <minutePT>__6; // 0x38
	internal int <delta>__7; // 0x3C
	internal int <hour>__8; // 0x40
	internal int <minute>__9; // 0x44
	internal int <second>__10; // 0x48
	internal int $PC; // 0x4C
	internal object $current; // 0x50
	internal WarNodesMenu <>f__this; // 0x58

	// Methods
	public void .ctor(); // 0x1001BEDE4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001C0064
	private object System.Collections.IEnumerator.get_Current(); // 0x1001C006C
	public bool MoveNext(); // 0x1001C0074
	public void Dispose(); // 0x1001C0544
	public void Reset(); // 0x1001C0550
}

// Namespace: 
private sealed class <load>c__Iterator9A : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4619
{
	// Fields
	internal WarTerritory <wt>__0; // 0x10
	internal string map; // 0x18
	internal int $PC; // 0x20
	internal object $current; // 0x28
	internal string <$>map; // 0x30
	internal WarNodesMenu <>f__this; // 0x38

	// Methods
	public void .ctor(); // 0x1001BFCCC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001BFCD4
	private object System.Collections.IEnumerator.get_Current(); // 0x1001BFCDC
	public bool MoveNext(); // 0x1001BFCE4
	public void Dispose(); // 0x1001C0004
	public void Reset(); // 0x1001C0010
}

// Namespace: 
public class WarningDialog : DialogBasic // TypeDefIndex: 4620
{
	// Fields
	public tk2dTextMesh header; // 0x98
	public tk2dTextMesh message; // 0xA0
	public tk2dUIItem button; // 0xA8
	public tk2dTextMesh buttonLabel; // 0xB0
	public Transform spiner; // 0xB8
	public float angle; // 0xC0

	// Methods
	public void .ctor(); // 0x1001BC0D4
	public void SetHeader(string text); // 0x1001BC13C
	public void SetMessage(string text); // 0x1001BC1B0
	public void SetButtonText(string text); // 0x1001BC224
	protected override void Update(); // 0x1001BC298
}

// Namespace: 
public class WeaponAnimationControl : MonoBehaviour // TypeDefIndex: 4621
{
	// Fields
	private Storage storage; // 0x18
	public HandsEnum hands; // 0x20
	public int rifleSetup; // 0x24
	public State state; // 0x28
	public RifflePrefabSetup[] rifflePrefabSetupArray; // 0x30
	public HandsSetupPrefab handsSetupPrefab; // 0x38
	private GameObject riflePrefab; // 0x40
	private GameObject handsPrefab; // 0x48
	private RuntimeAnimatorController handsAnimator; // 0x50
	public Animator HandsAnimator; // 0x58
	public Animator RifleAnimator; // 0x60
	public Rifle currentRifle; // 0x68
	private bool handsLoaded; // 0x70
	private bool rifleLoaded; // 0x71
	private Transform CaseSpawnpoint; // 0x78
	private RifflePrefabSetup currentRps; // 0x80
	private Vector3 meshScale; // 0x88
	public int ammoCount; // 0x94
	public AudioClip[] shotSounds; // 0x98
	public AudioClip reloadSound; // 0xA0
	public AudioClip reloadMagazineSound; // 0xA8
	public double reloadSoundSpeed; // 0xB0
	public double reloadMagazineSoundSpeed; // 0xB8

	// Methods
	public void .ctor(); // 0x1001C4528
	private void Awake(); // 0x1001C4588
	private void SetupTexture(); // 0x1001C4DAC
	private bool CamoDisabled(Weapon weapon, int camo_type); // 0x1001C5874
	public void LoadWeapon(); // 0x1001C4658
	private void Start(); // 0x1001C5F5C
	private GameObject FindHandsPrefab(HandsEnum h); // 0x1001C78F0
	private GameObject FindRiffleSkeleton(int rS); // 0x1001C7858
	private GameObject FindRifflePart(string p); // 0x1001C7FFC
	private void LoadRifle(); // 0x1001C7920
	private void LoadHands(); // 0x1001C7E84
	public void Shoot(float speed); // 0x1001C811C
	public void Reload(float speed); // 0x1001C8578
	public void ZoomIn(float speed); // 0x1001C86DC
	private IEnumerator OnZoomEndCoroutine(float speed); // 0x1001C8814
	private void Update(); // 0x1001C889C
	public IEnumerator RiflePrepear(float delay); // 0x1001C8944
	public void DropCase(); // 0x1001C8484
}

// Namespace: 
public sealed class HandsEnum : Enum // TypeDefIndex: 4622
{
	// Fields
	public int value__; // 0x10
	public const HandsEnum Millitary = 0; // 0x0

}

// Namespace: 
public sealed class State : Enum // TypeDefIndex: 4623
{
	// Fields
	public int value__; // 0x10
	public const State loading = 0; // 0x0
	public const State ready = 1; // 0x0
	public const State shooting = 2; // 0x0
	public const State reloading = 3; // 0x0

}

// Namespace: 
public class RifflePrefabSetup // TypeDefIndex: 4624
{
	// Fields
	public int rifleSetup; // 0x10
	public GameObject skeleton; // 0x18
	public GameObject[] parts; // 0x20

	// Methods
	public void .ctor(); // 0x1001C5B34
}

// Namespace: 
public class HandsSetupPrefab // TypeDefIndex: 4625
{
	// Fields
	public HandsEnum hands; // 0x10
	public GameObject prefab; // 0x18

	// Methods
	public void .ctor(); // 0x1001C4DA4
}

// Namespace: 
private sealed class <OnZoomEndCoroutine>c__Iterator9B : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4626
{
	// Fields
	internal float speed; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal float <$>speed; // 0x20
	internal WeaponAnimationControl <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1001C8894
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001C89CC
	private object System.Collections.IEnumerator.get_Current(); // 0x1001C89D4
	public bool MoveNext(); // 0x1001C89DC
	public void Dispose(); // 0x1001C8B20
	public void Reset(); // 0x1001C8B2C
}

// Namespace: 
private sealed class <RiflePrepear>c__Iterator9C : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4627
{
	// Fields
	internal float delay; // 0x10
	internal int $PC; // 0x14
	internal object $current; // 0x18
	internal float <$>delay; // 0x20
	internal WeaponAnimationControl <>f__this; // 0x28

	// Methods
	public void .ctor(); // 0x1001C89C4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x1001C8B80
	private object System.Collections.IEnumerator.get_Current(); // 0x1001C8B88
	public bool MoveNext(); // 0x1001C8B90
	public void Dispose(); // 0x1001C8D40
	public void Reset(); // 0x1001C8D4C
}

// Namespace: 
private sealed class <SetupTexture>c__AnonStorey112 // TypeDefIndex: 4628
{
	// Fields
	internal CamoShaderControl camoControl; // 0x10
	internal float opacity; // 0x18
	internal Texture tex; // 0x20

	// Methods
	public void .ctor(); // 0x1001C586C
	internal void <>m__189(GameObject go); // 0x1001C8DA0
}

// Namespace: 
public class WeaponCaseSpawnpoint : MonoBehaviour // TypeDefIndex: 4629
{
	// Methods
	public void .ctor(); // 0x1001C9E58
	private void Start(); // 0x1001C9E60
	private void Update(); // 0x1001C9E64
}

// Namespace: 
public class WeaponContainer : MonoBehaviour // TypeDefIndex: 4630
{
	// Methods
	public void .ctor(); // 0x1001C9E68
	private void Start(); // 0x1001C9E70
	private void Update(); // 0x1001C9E74
}

// Namespace: 
public class WeaponsSetupForGame : MonoBehaviour // TypeDefIndex: 4631
{
	// Fields
	public double seekpower; // 0x18
	public static WeaponsSetupForGame Instance; // 0x0

	// Methods
	public void .ctor(); // 0x1001D4A48
	private void Start(); // 0x1001D4A50
	public void Reset(); // 0x1001C5B3C
}

// Namespace: 
public class WhatsNewMenuNavigateRequest : MonoBehaviour // TypeDefIndex: 4632
{
	// Fields
	public GameObject menu; // 0x18
	public Transform background; // 0x20
	public string headerIndex; // 0x28
	private MenuNavigator navigator; // 0x30
	private MenuElements requestMenu; // 0x38
	private tk2dUIItem button; // 0x40

	// Methods
	public void .ctor(); // 0x1001D606C
	private void findNavigator(); // 0x1001D6074
	private void Start(); // 0x1001D6208
	private void OnClick(); // 0x1001D63AC
}

// Namespace: 
public class WorldOrRoyalCupButton : MonoBehaviour // TypeDefIndex: 4633
{
	// Fields
	public LocalizationTextMesh text; // 0x18
	public tk2dTextMesh sub; // 0x20
	private StateChecker`1<int> stateChecker; // 0x28
	private float oldtime; // 0x30

	// Methods
	public void .ctor(); // 0x1001DB7C0
	private void Prepare(); // 0x1001DB7C8
	private void Start(); // 0x1001DB87C
	private void Update(); // 0x1001DB940
}

// Namespace: 
public class YesNoDialog : DialogBasic // TypeDefIndex: 4634
{
	// Fields
	public tk2dUIItem okbutton; // 0x98
	public tk2dUIItem cancelbutton; // 0xA0
	public tk2dTextMesh header; // 0xA8
	public tk2dTextMesh message; // 0xB0
	public bool resources; // 0xB8
	public tk2dTextMesh messageResources; // 0xC0
	public GameObject crystals; // 0xC8
	public tk2dTextMesh crystalsValue; // 0xD0
	private Action OnYes; // 0xD8
	private Action OnCancel; // 0xE0

	// Methods
	public void .ctor(); // 0x1001DBAAC
	public void Init(string headerText, string messageText, Action yesHandler, Action cancelAction); // 0x1001DBB14
	public override void Start(); // 0x1001DBBFC
	private void OnCancelClick(); // 0x1001DBCE0
	private void OnOkClick(); // 0x1001DBD44
	public void SetHeader(string text); // 0x1001DBDA8
	public void SetMessage(string text); // 0x1001DBE0C
}

// Namespace: 
public class tk2dAnimationAdapter : MonoBehaviour // TypeDefIndex: 4635
{
	// Fields
	public Color color; // 0x18
	public Vector3 scale; // 0x28
	private tk2dBaseSprite sprite; // 0x38
	private tk2dTextMesh textMesh; // 0x40
	public Color textColor; // 0x48
	public Vector3 textScale; // 0x58

	// Methods
	public void .ctor(); // 0x100154670
	private void Start(); // 0x1001546FC
	private void LateUpdate(); // 0x100154854
	private void DoUpdate(); // 0x100154858
}

// Namespace: 
public class EnableCameraDepthInForward : MonoBehaviour // TypeDefIndex: 4636
{
	// Methods
	public void .ctor(); // 0x10022A7F4
	private void Start(); // 0x10022A7FC
	private void Set(); // 0x10022A800
}

// Namespace: 
public class SoftNormalsToVertexColor : MonoBehaviour // TypeDefIndex: 4637
{
	// Fields
	public Method method; // 0x18
	public bool generateOnAwake; // 0x1C
	public bool generateNow; // 0x1D

	// Methods
	public void .ctor(); // 0x10013CC1C
	private void OnDrawGizmos(); // 0x10013CC2C
	private void Awake(); // 0x10013CE14
	private void TryGenerate(); // 0x10013CC40
	private void Generate(Mesh m); // 0x10013CE24
}

// Namespace: 
public sealed class Method : Enum // TypeDefIndex: 4638
{
	// Fields
	public int value__; // 0x10
	public const Method Simple = 0; // 0x0
	public const Method AngularDeviation = 1; // 0x0

}

// Namespace: 
public class tk2dCamera : MonoBehaviour // TypeDefIndex: 4639
{
	// Fields
	private static int CURRENT_VERSION; // 0x0
	public int version; // 0x18
	private tk2dCameraSettings cameraSettings; // 0x20
	public tk2dCameraResolutionOverride[] resolutionOverride; // 0x28
	private tk2dCamera inheritSettings; // 0x30
	public int nativeResolutionWidth; // 0x38
	public int nativeResolutionHeight; // 0x3C
	private Camera _unityCamera; // 0x40
	private static tk2dCamera inst; // 0x8
	private static List`1<tk2dCamera> allCameras; // 0x10
	public bool viewportClippingEnabled; // 0x48
	public Vector4 viewportRegion; // 0x4C
	private Vector2 _targetResolution; // 0x5C
	private bool useSaveArea; // 0x64
	private float zoomFactor; // 0x68
	public bool forceResolutionInEditor; // 0x6C
	public Vector2 forceResolution; // 0x70
	private Rect _screenExtents; // 0x78
	private Rect _nativeScreenExtents; // 0x88
	private Rect unitRect; // 0x98
	private tk2dCamera _settingsRoot; // 0xA8

	// Methods
	public void .ctor(); // 0x10015AF18
	private static void .cctor(); // 0x10015B1A0
	public tk2dCameraSettings get_CameraSettings(); // 0x10015B224
	public tk2dCameraResolutionOverride get_CurrentResolutionOverride(); // 0x10015B22C
	public tk2dCamera get_InheritConfig(); // 0x10015B5D4
	public void set_InheritConfig(tk2dCamera value); // 0x10015B5DC
	private Camera get_UnityCamera(); // 0x10015B66C
	public static tk2dCamera get_Instance(); // 0x100159B7C
	public static tk2dCamera CameraForLayer(int layer); // 0x100155E08
	public Rect get_ScreenExtents(); // 0x10015B778
	public Rect get_NativeScreenExtents(); // 0x10015B784
	public Vector2 get_TargetResolution(); // 0x10015B790
	public Vector2 get_NativeResolution(); // 0x10015B798
	public Vector2 get_ScreenOffset(); // 0x10015B7D0
	public Vector2 get_resolution(); // 0x10015B880
	public Vector2 get_ScreenResolution(); // 0x10015B8F4
	public Vector2 get_ScaledResolution(); // 0x10015B968
	public float get_ZoomFactor(); // 0x10015B9DC
	public void set_ZoomFactor(float value); // 0x10015B9E4
	public bool get_UseSaveArea(); // 0x10015BA6C
	public void set_UseSaveArea(bool value); // 0x10015BA74
	public float get_zoomScale(); // 0x10015BA7C
	public void set_zoomScale(float value); // 0x10015BB08
	public Camera get_ScreenCamera(); // 0x10015B414
	private void Awake(); // 0x10015BB98
	private void OnEnable(); // 0x10015BF60
	private void OnDestroy(); // 0x10015C544
	private void OnPreCull(); // 0x10015C61C
	public float GetSizeAtDistance(float distance); // 0x100155F2C
	public tk2dCamera get_SettingsRoot(); // 0x10015B304
	public Matrix4x4 OrthoOffCenter(Vector2 scale, float left, float right, float bottom, float top, float near, float far); // 0x10015C648
	private Vector2 GetScaleForOverride(tk2dCamera settings, tk2dCameraResolutionOverride currentOverride, float width, float height); // 0x10015C8EC
	private Vector2 GetOffsetForOverride(tk2dCamera settings, tk2dCameraResolutionOverride currentOverride, Vector2 scale, float width, float height); // 0x10015CB08
	private Matrix4x4 GetProjectionMatrixForOverride(tk2dCamera settings, tk2dCameraResolutionOverride currentOverride, float pixelWidth, float pixelHeight, bool halfTexelOffset, out Rect screenExtents, out Rect unscaledScreenExtents); // 0x10015CD1C
	private Vector2 GetScreenPixelDimensions(tk2dCamera settings); // 0x10015D508
	private void Upgrade(); // 0x10015BCAC
	public void UpdateCameraMatrix(); // 0x10015C0D0
}

// Namespace: 
public class tk2dCameraAnchor : MonoBehaviour // TypeDefIndex: 4640
{
	// Fields
	private int anchor; // 0x18
	private Anchor _anchorPoint; // 0x1C
	private bool anchorToNativeBounds; // 0x20
	private Vector2 offset; // 0x24
	private tk2dCamera tk2dCamera; // 0x30
	private Camera _anchorCamera; // 0x38
	private Camera _anchorCameraCached; // 0x40
	private tk2dCamera _anchorTk2dCamera; // 0x48
	private Transform _myTransform; // 0x50

	// Methods
	public void .ctor(); // 0x10015D5B4
	public Anchor get_AnchorPoint(); // 0x10015D5F8
	public void set_AnchorPoint(Anchor value); // 0x10015D648
	public Vector2 get_AnchorOffsetPixels(); // 0x10015D650
	public void set_AnchorOffsetPixels(Vector2 value); // 0x10015D658
	public bool get_AnchorToNativeBounds(); // 0x10015D664
	public void set_AnchorToNativeBounds(bool value); // 0x10015D66C
	public Camera get_AnchorCamera(); // 0x10015D674
	public void set_AnchorCamera(Camera value); // 0x10014E56C
	private tk2dCamera get_AnchorTk2dCamera(); // 0x10015D718
	private Transform get_myTransform(); // 0x10015D7C8
	private void Start(); // 0x10015D85C
	private void UpdateTransform(); // 0x10015D860
	public void ForceUpdateTransform(); // 0x10015DDB8
	private void LateUpdate(); // 0x10015DDBC
}

// Namespace: 
public class tk2dCameraSettings // TypeDefIndex: 4641
{
	// Fields
	public ProjectionType projection; // 0x10
	public float orthographicSize; // 0x14
	public float orthographicPixelsPerMeter; // 0x18
	public OrthographicOrigin orthographicOrigin; // 0x1C
	public OrthographicType orthographicType; // 0x20
	public TransparencySortMode transparencySortMode; // 0x24
	public float fieldOfView; // 0x28
	public Rect rect; // 0x2C

	// Methods
	public void .ctor(); // 0x10015B0A4
}

// Namespace: 
public sealed class ProjectionType : Enum // TypeDefIndex: 4642
{
	// Fields
	public int value__; // 0x10
	public const ProjectionType Orthographic = 0; // 0x0
	public const ProjectionType Perspective = 1; // 0x0

}

// Namespace: 
public sealed class OrthographicType : Enum // TypeDefIndex: 4643
{
	// Fields
	public int value__; // 0x10
	public const OrthographicType PixelsPerMeter = 0; // 0x0
	public const OrthographicType OrthographicSize = 1; // 0x0

}

// Namespace: 
public sealed class OrthographicOrigin : Enum // TypeDefIndex: 4644
{
	// Fields
	public int value__; // 0x10
	public const OrthographicOrigin BottomLeft = 0; // 0x0
	public const OrthographicOrigin Center = 1; // 0x0

}

// Namespace: 
public class tk2dCameraResolutionOverride // TypeDefIndex: 4645
{
	// Fields
	public string name; // 0x10
	public MatchByType matchBy; // 0x18
	public int width; // 0x1C
	public int height; // 0x20
	public float aspectRatioNumerator; // 0x24
	public float aspectRatioDenominator; // 0x28
	public float scale; // 0x2C
	public Vector2 offsetPixels; // 0x30
	public AutoScaleMode autoScaleMode; // 0x38
	public FitMode fitMode; // 0x3C

	// Methods
	public void .ctor(); // 0x10015DDC0
	public bool Match(int pixelWidth, int pixelHeight); // 0x10015B4D8
	public void Upgrade(int version); // 0x10015D574
	public static tk2dCameraResolutionOverride get_DefaultOverride(); // 0x10015B11C
}

// Namespace: 
public sealed class MatchByType : Enum // TypeDefIndex: 4646
{
	// Fields
	public int value__; // 0x10
	public const MatchByType Resolution = 0; // 0x0
	public const MatchByType AspectRatio = 1; // 0x0
	public const MatchByType Wildcard = 2; // 0x0

}

// Namespace: 
public sealed class AutoScaleMode : Enum // TypeDefIndex: 4647
{
	// Fields
	public int value__; // 0x10
	public const AutoScaleMode None = 0; // 0x0
	public const AutoScaleMode FitWidth = 1; // 0x0
	public const AutoScaleMode FitHeight = 2; // 0x0
	public const AutoScaleMode FitVisible = 3; // 0x0
	public const AutoScaleMode StretchToFit = 4; // 0x0
	public const AutoScaleMode ClosestMultipleOfTwo = 5; // 0x0
	public const AutoScaleMode PixelPerfect = 6; // 0x0
	public const AutoScaleMode AutoScale = 7; // 0x0

}

// Namespace: 
public sealed class FitMode : Enum // TypeDefIndex: 4648
{
	// Fields
	public int value__; // 0x10
	public const FitMode Constant = 0; // 0x0
	public const FitMode Center = 1; // 0x0

}

// Namespace: 
public class tk2dFont : MonoBehaviour // TypeDefIndex: 4649
{
	// Fields
	public TextAsset bmFont; // 0x18
	public Material material; // 0x20
	public Texture texture; // 0x28
	public Texture2D gradientTexture; // 0x30
	public bool dupeCaps; // 0x38
	public bool flipTextureY; // 0x39
	public bool proxyFont; // 0x3A
	private bool useTk2dCamera; // 0x3B
	private int targetHeight; // 0x3C
	private float targetOrthoSize; // 0x40
	public tk2dSpriteCollectionSize sizeDef; // 0x48
	public int gradientCount; // 0x50
	public bool manageMaterial; // 0x54
	public bool loadable; // 0x55
	public int charPadX; // 0x58
	public tk2dFontData data; // 0x60
	public static int CURRENT_VERSION; // 0x0
	public int version; // 0x68

	// Methods
	public void .ctor(); // 0x10015F4BC
	private static void .cctor(); // 0x10015F510
	public void Upgrade(); // 0x10015F564
}

// Namespace: 
public class tk2dFontChar // TypeDefIndex: 4650
{
	// Fields
	public Vector3 p0; // 0x10
	public Vector3 p1; // 0x1C
	public Vector3 uv0; // 0x28
	public Vector3 uv1; // 0x34
	public bool flipped; // 0x40
	public Vector2[] gradientUv; // 0x48
	public float advance; // 0x50
	public int channel; // 0x54

	// Methods
	public void .ctor(); // 0x10015F724
}

// Namespace: 
public class tk2dFontKerning // TypeDefIndex: 4651
{
	// Fields
	public int c0; // 0x10
	public int c1; // 0x14
	public float amount; // 0x18

	// Methods
	public void .ctor(); // 0x1001600F8
}

// Namespace: 
public class tk2dFontData : MonoBehaviour // TypeDefIndex: 4652
{
	// Fields
	public const int CURRENT_VERSION = 2; // 0x0
	public int version; // 0x18
	public float lineHeight; // 0x1C
	public tk2dFontChar[] chars; // 0x20
	private List`1<int> charDictKeys; // 0x28
	private List`1<tk2dFontChar> charDictValues; // 0x30
	public string[] fontPlatforms; // 0x38
	public string[] fontPlatformGUIDs; // 0x40
	private tk2dFontData platformSpecificData; // 0x48
	public bool hasPlatformData; // 0x50
	public bool managedFont; // 0x51
	public bool needMaterialInstance; // 0x52
	public bool isPacked; // 0x53
	public bool premultipliedAlpha; // 0x54
	private bool isLoaded; // 0x55
	public tk2dSpriteCollectionData spriteCollection; // 0x58
	public Dictionary`2<int, tk2dFontChar> charDict; // 0x60
	public bool useDictionary; // 0x68
	public tk2dFontKerning[] kerning; // 0x70
	public float largestWidth; // 0x78
	public Material material; // 0x80
	public Material materialInst; // 0x88
	public Texture2D gradientTexture; // 0x90
	public bool textureGradients; // 0x98
	public int gradientCount; // 0x9C
	public Vector2 texelSize; // 0xA0
	public float invOrthoSize; // 0xA8
	public float halfTargetHeight; // 0xAC

	// Methods
	public void .ctor(); // 0x10015F72C
	public tk2dFontData get_inst(); // 0x10015F744
	private void Init(); // 0x10015FAF0
	public void ResetPlatformData(); // 0x10015FD1C
	private void OnDestroy(); // 0x10015FDA4
	public void InitDictionary(); // 0x10015FE68
	public void SetDictionary(Dictionary`2<int, tk2dFontChar> dict); // 0x10015FFA4
}

// Namespace: 
public static class tk2dTextGeomGen // TypeDefIndex: 4653
{
	// Fields
	private static GeomData tmpData; // 0x0
	private static readonly Color32[] channelSelectColors; // 0x8
	private static Color32 meshTopColor; // 0x10
	private static Color32 meshBottomColor; // 0x14
	private static float meshGradientTexU; // 0x18
	private static int curGradientCount; // 0x1C
	private static Color32 errorColor; // 0x20

	// Methods
	private static void .cctor(); // 0x10017E65C
	public static GeomData Data(tk2dTextMeshData textMeshData, tk2dFontData fontData, string formattedText); // 0x10017B9D0
	public static Vector2 GetMeshDimensionsForString(string str, GeomData geomData); // 0x10017E944
	public static float GetYAnchorForHeight(float textHeight, GeomData geomData); // 0x10017ED44
	public static float GetXAnchorForWidth(float lineWidth, GeomData geomData); // 0x10017EE4C
	private static void PostAlignTextData(Vector3[] pos, int offset, int targetStart, int targetEnd, float offsetX); // 0x10017EF50
	private static int GetFullHexColorComponent(int c1, int c2); // 0x10017F00C
	private static int GetCompactHexColorComponent(int c); // 0x10017F090
	private static int GetStyleHexColor(string str, bool fullHex, Color32 color); // 0x10017F0CC
	private static int SetColorsFromStyleCommand(string args, bool twoColors, bool fullHex); // 0x10017F424
	private static void SetGradientTexUFromStyleCommand(int arg); // 0x10017F5B8
	private static int HandleStyleCommand(string cmd); // 0x10017F68C
	public static void GetTextMeshGeomDesc(out int numVertices, out int numIndices, GeomData geomData); // 0x10017BA5C
	public static int SetTextMeshGeom(Vector3[] pos, Vector2[] uv, Vector2[] uv2, Color32[] color, int offset, GeomData geomData); // 0x10017BA98
	public static void SetTextMeshIndices(int[] indices, int offset, int vStart, GeomData geomData, int target); // 0x10017CAE8
}

// Namespace: 
public class GeomData // TypeDefIndex: 4654
{
	// Fields
	internal tk2dTextMeshData textMeshData; // 0x10
	internal tk2dFontData fontInst; // 0x18
	internal string formattedText; // 0x20

	// Methods
	public void .ctor(); // 0x10017E8CC
}

// Namespace: 
public class tk2dTextMeshData // TypeDefIndex: 4655
{
	// Fields
	public int version; // 0x10
	public tk2dFontData font; // 0x18
	public string text; // 0x20
	public Color color; // 0x28
	public Color color2; // 0x38
	public bool useGradient; // 0x48
	public int textureGradient; // 0x4C
	public TextAnchor anchor; // 0x50
	public int renderLayer; // 0x54
	public Vector3 scale; // 0x58
	public bool kerning; // 0x64
	public int maxChars; // 0x68
	public bool inlineStyling; // 0x6C
	public bool formatting; // 0x6D
	public int wordWrapWidth; // 0x70
	public float spacing; // 0x74
	public float lineSpacing; // 0x78
	public bool crop; // 0x7C

	// Methods
	public void .ctor(); // 0x10017F984
}

// Namespace: 
public class tk2dTextMesh : MonoBehaviour, ISpriteCollectionForceBuild // TypeDefIndex: 4656
{
	// Fields
	public OnChangeDgt OnTextChange; // 0x18
	public OnChangeDgt OnColorChange; // 0x20
	public Action OnMultiline; // 0x28
	private tk2dFontData _fontInst; // 0x30
	private string _formattedText; // 0x38
	private tk2dFontData _font; // 0x40
	private string _text; // 0x48
	private Color _color; // 0x50
	private Color _color2; // 0x60
	private bool _useGradient; // 0x70
	private int _textureGradient; // 0x74
	private TextAnchor _anchor; // 0x78
	private Vector3 _scale; // 0x7C
	private bool _kerning; // 0x88
	private int _maxChars; // 0x8C
	private bool _inlineStyling; // 0x90
	private bool _crop; // 0x91
	private bool _formatting; // 0x92
	private int _wordWrapWidth; // 0x94
	private float spacing; // 0x98
	private float lineSpacing; // 0x9C
	private tk2dTextMeshData data; // 0xA0
	private Vector3[] vertices; // 0xA8
	private Vector2[] uvs; // 0xB0
	private Vector2[] uv2; // 0xB8
	private Color32[] colors; // 0xC0
	private Color32[] untintedColors; // 0xC8
	private UpdateFlags updateFlags; // 0xD0
	private Mesh mesh; // 0xD8
	private MeshFilter meshFilter; // 0xE0
	private Renderer _cachedRenderer; // 0xE8

	// Methods
	public void .ctor(); // 0x10017F860
	public string get_FormattedText(); // 0x10017FA5C
	private void UpgradeData(); // 0x10017FA64
	private static int GetInlineStyleCommandLength(int cmdSymbol); // 0x10017FB24
	public string FormatText(string unformattedString); // 0x10017FB64
	private void FormatText(); // 0x1001800D0
	private void FormatText(string _targetString, string _source); // 0x10017FC00
	private void SetNeedUpdate(UpdateFlags uf); // 0x100180150
	public tk2dFontData get_font(); // 0x100180198
	public void set_font(tk2dFontData value); // 0x1001801C8
	public bool get_formatting(); // 0x1001800F0
	public void set_formatting(bool value); // 0x100180310
	public int get_wordWrapWidth(); // 0x100180120
	public void set_wordWrapWidth(int value); // 0x10018037C
	public string get_text(); // 0x1001803DC
	public void set_text(string value); // 0x10018040C
	public Color get_color(); // 0x100180570
	public void set_color(Color value); // 0x1001805A4
	public Color get_color2(); // 0x100180638
	public void set_color2(Color value); // 0x10018066C
	public bool get_useGradient(); // 0x1001806E8
	public void set_useGradient(bool value); // 0x100180718
	public TextAnchor get_anchor(); // 0x10018076C
	public void set_anchor(TextAnchor value); // 0x10018079C
	public Vector3 get_scale(); // 0x1001807F0
	public void set_scale(Vector3 value); // 0x100180824
	public bool get_kerning(); // 0x1001808A0
	public void set_kerning(bool value); // 0x1001808D0
	public int get_maxChars(); // 0x100180924
	public void set_maxChars(int value); // 0x10018048C
	public int get_textureGradient(); // 0x100180954
	public void set_textureGradient(int value); // 0x100180984
	public bool get_inlineStyling(); // 0x1001809FC
	public void set_inlineStyling(bool value); // 0x100180A2C
	public bool get_crop(); // 0x100180A80
	public void set_crop(bool value); // 0x100180AB0
	public float get_Spacing(); // 0x100180B04
	public void set_Spacing(float value); // 0x100180B34
	public float get_LineSpacing(); // 0x100180BA0
	public void set_LineSpacing(float value); // 0x100180BD0
	public int get_SortingOrder(); // 0x100180C3C
	public void set_SortingOrder(int value); // 0x100180CF8
	private void InitInstance(); // 0x100180D60
	private Renderer get_CachedRenderer(); // 0x100180C5C
	private void Awake(); // 0x100180E40
	protected void OnDestroy(); // 0x100181628
	private bool get_useInlineStyling(); // 0x1001817A8
	public int NumDrawnCharacters(); // 0x1001817E4
	public int NumTotalCharacters(); // 0x10018181C
	public Vector2 GetMeshDimensionsForString(string str); // 0x1001819EC
	public Bounds GetEstimatedMeshBoundsForString(string str); // 0x100181A7C
	public void Init(bool force); // 0x100181C44
	public void Init(); // 0x100180F4C
	public void Commit(); // 0x100181C80
	public void DoNotUse__CommitInternal(); // 0x100181CA0
	public void MakePixelPerfect(); // 0x1001822A8
	public bool UsesSpriteCollection(tk2dSpriteCollectionData spriteCollection); // 0x10018260C
	private void UpdateMaterial(); // 0x10018022C
	public void ForceBuild(); // 0x100182734
}

// Namespace: 
private sealed class UpdateFlags : Enum // TypeDefIndex: 4657
{
	// Fields
	public int value__; // 0x10
	public const UpdateFlags UpdateNone = 0; // 0x0
	public const UpdateFlags UpdateText = 1; // 0x0
	public const UpdateFlags UpdateColors = 2; // 0x0
	public const UpdateFlags UpdateBuffers = 4; // 0x0

}

// Namespace: 
public sealed class OnChangeDgt : MulticastDelegate // TypeDefIndex: 4658
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1001827E8
	public virtual void Invoke(); // 0x1001804E0
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100182804
	public virtual void EndInvoke(IAsyncResult result); // 0x100182864
}

// Namespace: 
public class tk2dButton : MonoBehaviour // TypeDefIndex: 4659
{
	// Fields
	public Camera viewCamera; // 0x18
	public string buttonDownSprite; // 0x20
	public string buttonUpSprite; // 0x28
	public string buttonPressedSprite; // 0x30
	private int buttonDownSpriteId; // 0x38
	private int buttonUpSpriteId; // 0x3C
	private int buttonPressedSpriteId; // 0x40
	public AudioClip buttonDownSound; // 0x48
	public AudioClip buttonUpSound; // 0x50
	public AudioClip buttonPressedSound; // 0x58
	public GameObject targetObject; // 0x60
	public string messageName; // 0x68
	private tk2dBaseSprite sprite; // 0x70
	private bool buttonDown; // 0x78
	public float targetScale; // 0x7C
	public float scaleTime; // 0x80
	public float pressedWaitTime; // 0x84
	private ButtonHandlerDelegate ButtonPressedEvent; // 0x88
	private ButtonHandlerDelegate ButtonAutoFireEvent; // 0x90
	private ButtonHandlerDelegate ButtonDownEvent; // 0x98
	private ButtonHandlerDelegate ButtonUpEvent; // 0xA0

	// Methods
	public void .ctor(); // 0x100158F0C
	public void add_ButtonPressedEvent(ButtonHandlerDelegate value); // 0x100158FCC
	public void remove_ButtonPressedEvent(ButtonHandlerDelegate value); // 0x1001590AC
	public void add_ButtonAutoFireEvent(ButtonHandlerDelegate value); // 0x10015918C
	public void remove_ButtonAutoFireEvent(ButtonHandlerDelegate value); // 0x10015926C
	public void add_ButtonDownEvent(ButtonHandlerDelegate value); // 0x10015934C
	public void remove_ButtonDownEvent(ButtonHandlerDelegate value); // 0x10015942C
	public void add_ButtonUpEvent(ButtonHandlerDelegate value); // 0x10015950C
	public void remove_ButtonUpEvent(ButtonHandlerDelegate value); // 0x1001595EC
	private void OnEnable(); // 0x1001596CC
	private void Start(); // 0x1001596D4
	public void UpdateSpriteIds(); // 0x100159BE4
	private void PlaySound(AudioClip source); // 0x100159CA0
	private IEnumerator coScale(Vector3 defaultScale, float startScale, float endScale); // 0x100159D9C
	private IEnumerator LocalWaitForSeconds(float seconds); // 0x100159E64
	private IEnumerator coHandleButtonPress(int fingerId); // 0x100159EE4
	private void Update(); // 0x100159F6C
}

// Namespace: 
public sealed class ButtonHandlerDelegate : MulticastDelegate // TypeDefIndex: 4660
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10015AEAC
	public virtual void Invoke(tk2dButton source); // 0x10015AA04
	public virtual IAsyncResult BeginInvoke(tk2dButton source, AsyncCallback callback, object object); // 0x10015AEBC
	public virtual void EndInvoke(IAsyncResult result); // 0x10015AF0C
}

// Namespace: 
private sealed class <coScale>c__Iterator9D : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4661
{
	// Fields
	internal float <t0>__0; // 0x10
	internal Vector3 defaultScale; // 0x14
	internal Vector3 <scale>__1; // 0x20
	internal float <s>__2; // 0x2C
	internal float <t>__3; // 0x30
	internal float startScale; // 0x34
	internal float endScale; // 0x38
	internal float <scl>__4; // 0x3C
	internal int $PC; // 0x40
	internal object $current; // 0x48
	internal Vector3 <$>defaultScale; // 0x50
	internal float <$>startScale; // 0x5C
	internal float <$>endScale; // 0x60
	internal tk2dButton <>f__this; // 0x68

	// Methods
	public void .ctor(); // 0x100159E5C
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10015AB00
	private object System.Collections.IEnumerator.get_Current(); // 0x10015AB08
	public bool MoveNext(); // 0x10015AB10
	public void Dispose(); // 0x10015ACE8
	public void Reset(); // 0x10015ACF4
}

// Namespace: 
private sealed class <LocalWaitForSeconds>c__Iterator9E : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4662
{
	// Fields
	internal float <t0>__0; // 0x10
	internal float <s>__1; // 0x14
	internal float seconds; // 0x18
	internal int $PC; // 0x1C
	internal object $current; // 0x20
	internal float <$>seconds; // 0x28

	// Methods
	public void .ctor(); // 0x100159EDC
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10015AD48
	private object System.Collections.IEnumerator.get_Current(); // 0x10015AD50
	public bool MoveNext(); // 0x10015AD58
	public void Dispose(); // 0x10015AE4C
	public void Reset(); // 0x10015AE58
}

// Namespace: 
private sealed class <coHandleButtonPress>c__Iterator9F : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4663
{
	// Fields
	internal bool <buttonPressed>__0; // 0x10
	internal Vector3 <defaultScale>__1; // 0x14
	internal Vector3 <cursorPosition>__2; // 0x20
	internal bool <cursorActive>__3; // 0x2C
	internal int fingerId; // 0x30
	internal bool <found>__4; // 0x34
	internal int <i>__5; // 0x38
	internal Touch <touch>__6; // 0x3C
	internal Ray <ray>__7; // 0x80
	internal RaycastHit <hitInfo>__8; // 0x98
	internal bool <colliderHit>__9; // 0xC8
	internal int $PC; // 0xCC
	internal object $current; // 0xD0
	internal int <$>fingerId; // 0xD8
	internal tk2dButton <>f__this; // 0xE0

	// Methods
	public void .ctor(); // 0x100159F64
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10015A2E0
	private object System.Collections.IEnumerator.get_Current(); // 0x10015A2E8
	public bool MoveNext(); // 0x10015A2F0
	public void Dispose(); // 0x10015AAA0
	public void Reset(); // 0x10015AAAC
}

// Namespace: 
public class tk2dResource : ScriptableObject // TypeDefIndex: 4664
{
	// Fields
	public Object objectReference; // 0x18

	// Methods
	public void .ctor(); // 0x1001605B0
}

// Namespace: 
public class tk2dResourceTocEntry // TypeDefIndex: 4665
{
	// Fields
	public string resourceGUID; // 0x10
	public string assetName; // 0x18
	public string assetGUID; // 0x20

	// Methods
	public void .ctor(); // 0x1001605B8
}

// Namespace: 
public class tk2dAssetPlatform // TypeDefIndex: 4666
{
	// Fields
	public string name; // 0x10
	public float scale; // 0x18

	// Methods
	public void .ctor(string name, float scale); // 0x100154C28
}

// Namespace: 
public class tk2dSystem : ScriptableObject // TypeDefIndex: 4667
{
	// Fields
	public const string guidPrefix = "tk2d/tk2d_"; // 0x0
	public const string assetName = "tk2d/tk2dSystem"; // 0x0
	public const string assetFileName = "tk2dSystem.asset"; // 0x0
	public tk2dAssetPlatform[] assetPlatforms; // 0x18
	private static tk2dSystem _inst; // 0x0
	private static string currentPlatform; // 0x8
	private tk2dResourceTocEntry[] allResourceEntries; // 0x20

	// Methods
	private void .ctor(); // 0x10017DDC0
	private static void .cctor(); // 0x10017DF7C
	public static tk2dSystem get_inst(); // 0x10017DFF8
	public static tk2dSystem get_inst_NoCreate(); // 0x10017E238
	public static string get_CurrentPlatform(); // 0x10017E3AC
	public static void set_CurrentPlatform(string value); // 0x10017E414
	public static bool get_OverrideBuildMaterial(); // 0x10017E4E4
	public static tk2dAssetPlatform GetAssetPlatform(string platform); // 0x10017E4EC
	private T LoadResourceByGUIDImpl(string guid); // 0
	private T LoadResourceByNameImpl(string name); // 0
	public static T LoadResourceByGUID(string guid); // 0
	public static T LoadResourceByName(string guid); // 0
}

// Namespace: 
public class tk2dUpdateManager : MonoBehaviour // TypeDefIndex: 4668
{
	// Fields
	private static tk2dUpdateManager inst; // 0x0
	private List`1<tk2dTextMesh> textMeshes; // 0x18

	// Methods
	public void .ctor(); // 0x10019CA28
	private static tk2dUpdateManager get_Instance(); // 0x10019CA9C
	public static void QueueCommit(tk2dTextMesh textMesh); // 0x10018016C
	public static void FlushQueues(); // 0x100181C84
	private void OnEnable(); // 0x10019CDE4
	private void LateUpdate(); // 0x10019CE7C
	private IEnumerator coSuperLateUpdate(); // 0x10019CE10
	private void QueueCommitInternal(tk2dTextMesh textMesh); // 0x10019CC84
	private void FlushQueuesInternal(); // 0x10019CCEC
}

// Namespace: 
private sealed class <coSuperLateUpdate>c__IteratorA0 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4669
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal tk2dUpdateManager <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10019CE80
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10019CE88
	private object System.Collections.IEnumerator.get_Current(); // 0x10019CE90
	public bool MoveNext(); // 0x10019CE98
	public void Dispose(); // 0x10019CECC
	public void Reset(); // 0x10019CED8
}

// Namespace: 
public class tk2dAnimatedSprite : tk2dSprite // TypeDefIndex: 4670
{
	// Fields
	private tk2dSpriteAnimator _animator; // 0xC0
	private tk2dSpriteAnimation anim; // 0xC8
	private int clipId; // 0xD0
	public bool playAutomatically; // 0xD4
	public bool createCollider; // 0xD5
	public AnimationCompleteDelegate animationCompleteDelegate; // 0xD8
	public AnimationEventDelegate animationEventDelegate; // 0xE0

	// Methods
	public void .ctor(); // 0x100152794
	public tk2dSpriteAnimator get_Animator(); // 0x10015279C
	private void CheckAddAnimatorInternal(); // 0x1001527C0
	protected override bool NeedBoxCollider(); // 0x1001528F0
	public tk2dSpriteAnimation get_Library(); // 0x1001528F8
	public void set_Library(tk2dSpriteAnimation value); // 0x100152930
	public int get_DefaultClipId(); // 0x100152964
	public void set_DefaultClipId(int value); // 0x10015299C
	public static bool get_g_paused(); // 0x1001529D0
	public static void set_g_paused(bool value); // 0x100152A98
	public bool get_Paused(); // 0x100152B74
	public void set_Paused(bool value); // 0x100152BB4
	private void ProxyCompletedHandler(tk2dSpriteAnimator anim, tk2dSpriteAnimationClip clip); // 0x100152C18
	private void ProxyEventTriggeredHandler(tk2dSpriteAnimator anim, tk2dSpriteAnimationClip clip, int frame); // 0x100152DF8
	private void OnEnable(); // 0x100152F80
	private void OnDisable(); // 0x100153064
	private void Start(); // 0x1001530A8
	public static tk2dAnimatedSprite AddComponent(GameObject go, tk2dSpriteAnimation anim, int clipId); // 0x1001530AC
	public void Play(); // 0x1001532AC
	public void Play(float clipStartTime); // 0x1001533A4
	public void PlayFromFrame(int frame); // 0x1001534B4
	public void Play(string name); // 0x100153568
	public void PlayFromFrame(string name, int frame); // 0x1001535D4
	public void Play(string name, float clipStartTime); // 0x100153658
	public void Play(tk2dSpriteAnimationClip clip, float clipStartTime); // 0x10015376C
	public void Play(tk2dSpriteAnimationClip clip, float clipStartTime, float overrideFps); // 0x1001537B0
	public tk2dSpriteAnimationClip get_CurrentClip(); // 0x1001539AC
	public float get_ClipTimeSeconds(); // 0x1001539E4
	public float get_ClipFps(); // 0x100153A58
	public void set_ClipFps(float value); // 0x100153A90
	public void Stop(); // 0x100153AFC
	public void StopAndResetFrame(); // 0x100153B44
	public bool isPlaying(); // 0x100153C30
	public bool IsPlaying(string name); // 0x100153C70
	public bool IsPlaying(tk2dSpriteAnimationClip clip); // 0x100153CA4
	public bool get_Playing(); // 0x100153D28
	public int GetClipIdByName(string name); // 0x100153D5C
	public tk2dSpriteAnimationClip GetClipByName(string name); // 0x100153E38
	public static float get_DefaultFps(); // 0x100153F14
	public void Pause(); // 0x100153F7C
	public void Resume(); // 0x100153FC4
	public void SetFrame(int currFrame); // 0x10015400C
	public void SetFrame(int currFrame, bool triggerEvent); // 0x10015404C
	public void UpdateAnimation(float deltaTime); // 0x100154144
}

// Namespace: 
public sealed class AnimationCompleteDelegate : MulticastDelegate // TypeDefIndex: 4671
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100154494
	public virtual void Invoke(tk2dAnimatedSprite sprite, int clipId); // 0x100152D38
	public virtual IAsyncResult BeginInvoke(tk2dAnimatedSprite sprite, int clipId, AsyncCallback callback, object object); // 0x1001544A4
	public virtual void EndInvoke(IAsyncResult result); // 0x10015456C
}

// Namespace: 
public sealed class AnimationEventDelegate : MulticastDelegate // TypeDefIndex: 4672
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100154578
	public virtual void Invoke(tk2dAnimatedSprite sprite, tk2dSpriteAnimationClip clip, tk2dSpriteAnimationFrame frame, int frameNum); // 0x100152E88
	public virtual IAsyncResult BeginInvoke(tk2dAnimatedSprite sprite, tk2dSpriteAnimationClip clip, tk2dSpriteAnimationFrame frame, int frameNum, AsyncCallback callback, object object); // 0x100154588
	public virtual void EndInvoke(IAsyncResult result); // 0x100154664
}

// Namespace: 
public abstract class tk2dBaseSprite : MonoBehaviour, ISpriteCollectionForceBuild // TypeDefIndex: 4673
{
	// Fields
	private tk2dSpriteCollectionData collection; // 0x18
	protected tk2dSpriteCollectionData collectionInst; // 0x20
	protected Color _color; // 0x28
	protected Vector3 _scale; // 0x38
	protected int _spriteId; // 0x44
	public BoxCollider2D boxCollider2D; // 0x48
	public List`1<PolygonCollider2D> polygonCollider2D; // 0x50
	public List`1<EdgeCollider2D> edgeCollider2D; // 0x58
	public BoxCollider boxCollider; // 0x60
	public MeshCollider meshCollider; // 0x68
	public Vector3[] meshColliderPositions; // 0x70
	public Mesh meshColliderMesh; // 0x78
	private Renderer _cachedRenderer; // 0x80
	protected int renderLayer; // 0x88
	private Action`1<tk2dBaseSprite> SpriteChanged; // 0x90

	// Methods
	protected void .ctor(); // 0x100154CCC
	public void add_SpriteChanged(Action`1<tk2dBaseSprite> value); // 0x100154DBC
	public void remove_SpriteChanged(Action`1<tk2dBaseSprite> value); // 0x100154E9C
	public tk2dSpriteCollectionData get_Collection(); // 0x100154F7C
	public void set_Collection(tk2dSpriteCollectionData value); // 0x100154F84
	private void InitInstance(); // 0x1001551D4
	public Color get_color(); // 0x10015483C
	public void set_color(Color value); // 0x100154A60
	public Vector3 get_scale(); // 0x100154848
	public void set_scale(Vector3 value); // 0x100154B14
	private Renderer get_CachedRenderer(); // 0x1001552A0
	public int get_SortingOrder(); // 0x10015533C
	public void set_SortingOrder(int value); // 0x10015535C
	public bool get_FlipX(); // 0x1001553BC
	public void set_FlipX(bool value); // 0x1001553CC
	public bool get_FlipY(); // 0x10015548C
	public void set_FlipY(bool value); // 0x10015549C
	public int get_spriteId(); // 0x100155560
	public void set_spriteId(int value); // 0x100155568
	public void SetSprite(int newSpriteId); // 0x1001557F0
	public bool SetSprite(string spriteName); // 0x1001557F4
	public void SetSprite(tk2dSpriteCollectionData newCollection, int newSpriteId); // 0x1001531A8
	public bool SetSprite(tk2dSpriteCollectionData newCollection, string spriteName); // 0x100155998
	public void MakePixelPerfect(); // 0x100155A98
	protected abstract void UpdateMaterial(); // 0
	protected abstract void UpdateColors(); // 0
	protected abstract void UpdateVertices(); // 0
	protected abstract void UpdateGeometry(); // 0
	protected abstract int GetCurrentVertexCount(); // 0
	public abstract void Build(); // 0
	public int GetSpriteIdByName(string name); // 0x1001560D0
	public static T AddComponent(GameObject go, tk2dSpriteCollectionData spriteCollection, int spriteId); // 0
	public static T AddComponent(GameObject go, tk2dSpriteCollectionData spriteCollection, string spriteName); // 0
	protected int GetNumVertices(); // 0x100156110
	protected int GetNumIndices(); // 0x100156174
	protected void SetPositions(Vector3[] positions, Vector3[] normals, Vector4[] tangents); // 0x1001561D8
	protected void SetColors(Color32[] dest); // 0x10015645C
	public Bounds GetBounds(); // 0x100156508
	public Bounds GetUntrimmedBounds(); // 0x10015671C
	public static Bounds AdjustedMeshBounds(Bounds bounds, int renderLayer); // 0x100156930
	public tk2dSpriteDefinition GetCurrentSpriteDef(); // 0x100156998
	public tk2dSpriteDefinition get_CurrentSprite(); // 0x100156A58
	public virtual void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x100156B18
	protected virtual bool NeedBoxCollider(); // 0x100156B1C
	protected virtual void UpdateCollider(); // 0x100156B24
	protected virtual void CreateCollider(); // 0x10015809C
	protected void Awake(); // 0x1001586E0
	public void CreateSimpleBoxCollider(); // 0x100158784
	public bool UsesSpriteCollection(tk2dSpriteCollectionData spriteCollection); // 0x1001589F4
	public virtual void ForceBuild(); // 0x100158A74
	public static GameObject CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, Rect region, Vector2 anchor); // 0
}

// Namespace: 
public sealed class Anchor : Enum // TypeDefIndex: 4674
{
	// Fields
	public int value__; // 0x10
	public const Anchor LowerLeft = 0; // 0x0
	public const Anchor LowerCenter = 1; // 0x0
	public const Anchor LowerRight = 2; // 0x0
	public const Anchor MiddleLeft = 3; // 0x0
	public const Anchor MiddleCenter = 4; // 0x0
	public const Anchor MiddleRight = 5; // 0x0
	public const Anchor UpperLeft = 6; // 0x0
	public const Anchor UpperCenter = 7; // 0x0
	public const Anchor UpperRight = 8; // 0x0

}

// Namespace: 
public class tk2dClippedSprite : tk2dBaseSprite // TypeDefIndex: 4675
{
	// Fields
	private Mesh mesh; // 0x98
	private Vector2[] meshUvs; // 0xA0
	private Vector3[] meshVertices; // 0xA8
	private Color32[] meshColors; // 0xB0
	private Vector3[] meshNormals; // 0xB8
	private Vector4[] meshTangents; // 0xC0
	private int[] meshIndices; // 0xC8
	public Vector2 _clipBottomLeft; // 0xD0
	public Vector2 _clipTopRight; // 0xD8
	private Rect _clipRect; // 0xE0
	protected bool _createBoxCollider; // 0xF0
	private Vector3 boundsCenter; // 0xF4
	private Vector3 boundsExtents; // 0x100

	// Methods
	public void .ctor(); // 0x10015DE24
	public Rect get_ClipRect(); // 0x10015DEE8
	public void set_ClipRect(Rect value); // 0x10015DF28
	public Vector2 get_clipBottomLeft(); // 0x10015E148
	public void set_clipBottomLeft(Vector2 value); // 0x10015DFD8
	public Vector2 get_clipTopRight(); // 0x10015E150
	public void set_clipTopRight(Vector2 value); // 0x10015E090
	public bool get_CreateBoxCollider(); // 0x10015E158
	public void set_CreateBoxCollider(bool value); // 0x10015E160
	private void Awake(); // 0x10015E1D8
	protected void OnDestroy(); // 0x10015E33C
	protected void SetColors(Color32[] dest); // 0x10015E3F4
	protected void SetGeometry(Vector3[] vertices, Vector2[] uvs); // 0x10015E4EC
	public override void Build(); // 0x10015E7DC
	protected override void UpdateGeometry(); // 0x10015EBC8
	protected override void UpdateColors(); // 0x10015ED1C
	protected override void UpdateVertices(); // 0x10015EDA8
	protected void UpdateColorsImpl(); // 0x10015ED20
	protected void UpdateGeometryImpl(); // 0x10015EBCC
	protected override void UpdateCollider(); // 0x10015EDAC
	protected override void CreateCollider(); // 0x10015EF58
	protected override void UpdateMaterial(); // 0x10015EFA4
	protected override int GetCurrentVertexCount(); // 0x10015F0F4
	public override void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x10015F0FC
}

// Namespace: 
public class tk2dPixelPerfectHelper : MonoBehaviour // TypeDefIndex: 4676
{
	// Fields
	private static tk2dPixelPerfectHelper _inst; // 0x0
	public Camera cam; // 0x18
	public int collectionTargetHeight; // 0x20
	public float collectionOrthoSize; // 0x24
	public float targetResolutionHeight; // 0x28
	public float scaleD; // 0x2C
	public float scaleK; // 0x30

	// Methods
	public void .ctor(); // 0x100160100
	private static void .cctor(); // 0x10016011C
	public static tk2dPixelPerfectHelper get_inst(); // 0x100160120
	private void Awake(); // 0x100160320
	public virtual void Setup(); // 0x1001603B8
	public static float CalculateScaleForPerspectiveCamera(float fov, float zdist); // 0x100156044
	public bool get_CameraIsOrtho(); // 0x100160594
}

// Namespace: tk2dRuntime
internal static class SpriteCollectionGenerator // TypeDefIndex: 4677
{
	// Methods
	public static tk2dSpriteCollectionData CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, Rect region, Vector2 anchor); // 0x100160634
	public static tk2dSpriteCollectionData CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, string[] names, Rect[] regions, Vector2[] anchors); // 0x1001607B8
	public static tk2dSpriteCollectionData CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, Vector2 textureDimensions, string[] names, Rect[] regions, Rect[] trimRects, Vector2[] anchors, bool[] rotated); // 0x100160898
	public static tk2dSpriteCollectionData CreateFromTexture(GameObject parentObject, Texture texture, tk2dSpriteCollectionSize size, Vector2 textureDimensions, string[] names, Rect[] regions, Rect[] trimRects, Vector2[] anchors, bool[] rotated); // 0x1001608EC
	private static tk2dSpriteDefinition CreateDefinitionForRegionInTexture(string name, Vector2 textureDimensions, float scale, Rect uvRegion, Rect trimRect, Vector2 anchor, bool rotated); // 0x100160EE8
	public static tk2dSpriteCollectionData CreateFromTexturePacker(tk2dSpriteCollectionSize spriteCollectionSize, string texturePackerFileContents, Texture texture); // 0x1001618A8
}

// Namespace: 
public class tk2dSlicedSprite : tk2dBaseSprite // TypeDefIndex: 4678
{
	// Fields
	private Mesh mesh; // 0x98
	private Vector2[] meshUvs; // 0xA0
	private Vector3[] meshVertices; // 0xA8
	private Color32[] meshColors; // 0xB0
	private Vector3[] meshNormals; // 0xB8
	private Vector4[] meshTangents; // 0xC0
	private int[] meshIndices; // 0xC8
	private Vector2 _dimensions; // 0xD0
	private Anchor _anchor; // 0xD8
	private bool _borderOnly; // 0xDC
	private bool legacyMode; // 0xDD
	public float borderTop; // 0xE0
	public float borderBottom; // 0xE4
	public float borderLeft; // 0xE8
	public float borderRight; // 0xEC
	protected bool _createBoxCollider; // 0xF0
	private Vector3 boundsCenter; // 0xF4
	private Vector3 boundsExtents; // 0x100

	// Methods
	public void .ctor(); // 0x10016B284
	public bool get_BorderOnly(); // 0x10016B310
	public void set_BorderOnly(bool value); // 0x10016B318
	public Vector2 get_dimensions(); // 0x10016B3E0
	public void set_dimensions(Vector2 value); // 0x10016B3E8
	public Anchor get_anchor(); // 0x10016B4A4
	public void set_anchor(Anchor value); // 0x10016B4AC
	public void SetBorder(float left, float bottom, float right, float top); // 0x10016B548
	public bool get_CreateBoxCollider(); // 0x10016B5DC
	public void set_CreateBoxCollider(bool value); // 0x10016B5E4
	private void Awake(); // 0x10016B65C
	protected void OnDestroy(); // 0x10016B83C
	protected void SetColors(Color32[] dest); // 0x10016B8F4
	protected void SetGeometry(Vector3[] vertices, Vector2[] uvs); // 0x10016B9B4
	private void SetIndices(); // 0x10016BCDC
	private bool NearEnough(float value, float compValue, float scale); // 0x10016BDB0
	private void PermanentUpgradeLegacyMode(); // 0x10016BE48
	public override void Build(); // 0x10016C1E0
	protected override void UpdateGeometry(); // 0x10016C578
	protected override void UpdateColors(); // 0x10016C6FC
	protected override void UpdateVertices(); // 0x10016C788
	private void UpdateIndices(); // 0x10016B33C
	protected void UpdateColorsImpl(); // 0x10016C700
	protected void UpdateGeometryImpl(); // 0x10016C57C
	protected override void UpdateCollider(); // 0x10016C78C
	protected override void CreateCollider(); // 0x10016C938
	protected override void UpdateMaterial(); // 0x10016C984
	protected override int GetCurrentVertexCount(); // 0x10016CAD4
	public override void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x10016CADC
}

// Namespace: 
public class tk2dSprite : tk2dBaseSprite // TypeDefIndex: 4679
{
	// Fields
	private Mesh mesh; // 0x98
	private Vector3[] meshVertices; // 0xA0
	private Vector3[] meshNormals; // 0xA8
	private Vector4[] meshTangents; // 0xB0
	private Color32[] meshColors; // 0xB8

	// Methods
	public void .ctor(); // 0x100152798
	private void Awake(); // 0x10016CE88
	protected void OnDestroy(); // 0x10016CFC4
	public override void Build(); // 0x10016D0D8
	public static tk2dSprite AddComponent(GameObject go, tk2dSpriteCollectionData spriteCollection, int spriteId); // 0x10016D46C
	public static tk2dSprite AddComponent(GameObject go, tk2dSpriteCollectionData spriteCollection, string spriteName); // 0x10016D4D8
	public static GameObject CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, Rect region, Vector2 anchor); // 0x10016D544
	protected override void UpdateGeometry(); // 0x10016D5F0
	protected override void UpdateColors(); // 0x10016D910
	protected override void UpdateVertices(); // 0x10016D9C8
	protected void UpdateColorsImpl(); // 0x10016D914
	protected void UpdateVerticesImpl(); // 0x10016D9CC
	protected void UpdateGeometryImpl(); // 0x10016D5F4
	protected override void UpdateMaterial(); // 0x10016DC34
	protected override int GetCurrentVertexCount(); // 0x10016DD84
	public override void ForceBuild(); // 0x10016DD9C
	public override void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x10016DE08
}

// Namespace: 
public class tk2dSpriteAnimationFrame // TypeDefIndex: 4680
{
	// Fields
	public tk2dSpriteCollectionData spriteCollection; // 0x10
	public int spriteId; // 0x18
	public bool triggerEvent; // 0x1C
	public string eventInfo; // 0x20
	public int eventInt; // 0x28
	public float eventFloat; // 0x2C

	// Methods
	public void .ctor(); // 0x10016EA0C
	public void CopyFrom(tk2dSpriteAnimationFrame source); // 0x10016EA84
	public void CopyTriggerFrom(tk2dSpriteAnimationFrame source); // 0x10016EBB0
	public void ClearTrigger(); // 0x10016EBDC
	public void CopyFrom(tk2dSpriteAnimationFrame source, bool full); // 0x10016EB70
}

// Namespace: 
public class tk2dSpriteAnimationClip // TypeDefIndex: 4681
{
	// Fields
	public string name; // 0x10
	public tk2dSpriteAnimationFrame[] frames; // 0x18
	public float fps; // 0x20
	public int loopStart; // 0x24
	public WrapMode wrapMode; // 0x28

	// Methods
	public void .ctor(); // 0x10016E64C
	public void .ctor(tk2dSpriteAnimationClip source); // 0x10016E6AC
	public void CopyFrom(tk2dSpriteAnimationClip source); // 0x10016E724
	public void Clear(); // 0x10016EA8C
	public bool get_Empty(); // 0x10016E300
	public tk2dSpriteAnimationFrame GetFrame(int frame); // 0x10016EB2C
}

// Namespace: 
public sealed class WrapMode : Enum // TypeDefIndex: 4682
{
	// Fields
	public int value__; // 0x10
	public const WrapMode Loop = 0; // 0x0
	public const WrapMode LoopSection = 1; // 0x0
	public const WrapMode Once = 2; // 0x0
	public const WrapMode PingPong = 3; // 0x0
	public const WrapMode RandomFrame = 4; // 0x0
	public const WrapMode RandomLoop = 5; // 0x0
	public const WrapMode Single = 6; // 0x0

}

// Namespace: 
public class tk2dSpriteAnimation : MonoBehaviour // TypeDefIndex: 4683
{
	// Fields
	public tk2dSpriteAnimationClip[] clips; // 0x18

	// Methods
	public void .ctor(); // 0x10016E15C
	public tk2dSpriteAnimationClip GetClipByName(string name); // 0x10016E164
	public tk2dSpriteAnimationClip GetClipById(int id); // 0x10016E26C
	public int GetClipIdByName(string name); // 0x10016E350
	public int GetClipIdByName(tk2dSpriteAnimationClip clip); // 0x10016E430
	public tk2dSpriteAnimationClip get_FirstValidClip(); // 0x10016E4AC
}

// Namespace: 
public class tk2dSpriteAnimator : MonoBehaviour // TypeDefIndex: 4684
{
	// Fields
	private tk2dSpriteAnimation library; // 0x18
	private int defaultClipId; // 0x20
	public bool playAutomatically; // 0x24
	private static State globalState; // 0x0
	private tk2dSpriteAnimationClip currentClip; // 0x28
	private float clipTime; // 0x30
	private float clipFps; // 0x34
	private int previousFrame; // 0x38
	public Action`2<tk2dSpriteAnimator, tk2dSpriteAnimationClip> AnimationCompleted; // 0x40
	public Action`3<tk2dSpriteAnimator, tk2dSpriteAnimationClip, int> AnimationEventTriggered; // 0x48
	private State state; // 0x50
	protected tk2dBaseSprite _sprite; // 0x58

	// Methods
	public void .ctor(); // 0x10016EC54
	private static void .cctor(); // 0x10016EC68
	public static bool get_g_Paused(); // 0x100152A2C
	public static void set_g_Paused(bool value); // 0x100152AFC
	public bool get_Paused(); // 0x100152BA8
	public void set_Paused(bool value); // 0x100152BFC
	public tk2dSpriteAnimation get_Library(); // 0x100152928
	public void set_Library(tk2dSpriteAnimation value); // 0x1001528E0
	public int get_DefaultClipId(); // 0x100152994
	public void set_DefaultClipId(int value); // 0x1001528E8
	public tk2dSpriteAnimationClip get_DefaultClip(); // 0x100153320
	private void OnEnable(); // 0x10016ED18
	private void Start(); // 0x10016EDDC
	public virtual tk2dBaseSprite get_Sprite(); // 0x10016EE20
	public static tk2dSpriteAnimator AddComponent(GameObject go, tk2dSpriteAnimation anim, int clipId); // 0x10016EF2C
	private tk2dSpriteAnimationClip GetClipByNameVerbose(string name); // 0x10016F050
	public void Play(); // 0x10016F1A4
	public void Play(string name); // 0x1001535AC
	public void Play(tk2dSpriteAnimationClip clip); // 0x100153328
	public void PlayFromFrame(int frame); // 0x10016F1E0
	public void PlayFromFrame(string name, int frame); // 0x100153628
	public void PlayFromFrame(tk2dSpriteAnimationClip clip, int frame); // 0x10015353C
	public void PlayFrom(float clipStartTime); // 0x10016F224
	public void PlayFrom(string name, float clipStartTime); // 0x10015369C
	public void PlayFrom(tk2dSpriteAnimationClip clip, float clipStartTime); // 0x10015342C
	public void Play(tk2dSpriteAnimationClip clip, float clipStartTime, float overrideFps); // 0x1001537FC
	public void Stop(); // 0x100153B34
	public void StopAndResetFrame(); // 0x100153B70
	public bool IsPlaying(string name); // 0x10016F4A4
	public bool IsPlaying(tk2dSpriteAnimationClip clip); // 0x100153CFC
	public bool get_Playing(); // 0x100153C64
	public tk2dSpriteAnimationClip get_CurrentClip(); // 0x1001539DC
	public float get_ClipTimeSeconds(); // 0x100153A2C
	public float get_ClipFps(); // 0x100153A88
	public void set_ClipFps(float value); // 0x100153AE0
	public tk2dSpriteAnimationClip GetClipById(int id); // 0x10016EC6C
	public static float get_DefaultFps(); // 0x100153F74
	public int GetClipIdByName(string name); // 0x100153D90
	public tk2dSpriteAnimationClip GetClipByName(string name); // 0x100153E6C
	public void Pause(); // 0x100153FB4
	public void Resume(); // 0x100153FFC
	public void SetFrame(int currFrame); // 0x100154044
	public void SetFrame(int currFrame, bool triggerEvent); // 0x100154090
	public int get_CurrentFrame(); // 0x10016F72C
	public void UpdateAnimation(float deltaTime); // 0x100154180
	private void ClipNameError(string name); // 0x10016F270
	private void ClipIdError(int id); // 0x10016F8F4
	private void WarpClipToLocalTime(tk2dSpriteAnimationClip clip, float time); // 0x10016F328
	private void SetFrameInternal(int currFrame); // 0x10016F548
	private void ProcessEvents(int start, int last, int direction); // 0x10016F624
	private void OnAnimationCompleted(); // 0x10016F434
	public virtual void LateUpdate(); // 0x10016F9C8
	public virtual void SetSprite(tk2dSpriteCollectionData spriteCollection, int spriteId); // 0x10016F9F4
}

// Namespace: 
private sealed class State : Enum // TypeDefIndex: 4685
{
	// Fields
	public int value__; // 0x10
	public const State Init = 0; // 0x0
	public const State Playing = 1; // 0x0
	public const State Paused = 2; // 0x0

}

// Namespace: 
public class tk2dSpriteAttachPoint : MonoBehaviour // TypeDefIndex: 4686
{
	// Fields
	private tk2dBaseSprite sprite; // 0x18
	public List`1<Transform> attachPoints; // 0x20
	private static bool[] attachPointUpdated; // 0x0
	public bool deactivateUnusedAttachPoints; // 0x28

	// Methods
	public void .ctor(); // 0x10016FA5C
	private static void .cctor(); // 0x10016FACC
	private void Awake(); // 0x10016FB3C
	private void OnEnable(); // 0x100170370
	private void OnDisable(); // 0x100170450
	private void UpdateAttachPointTransform(AttachPoint attachPoint, Transform t); // 0x100170530
	private void HandleSpriteChanged(tk2dBaseSprite spr); // 0x10016FC24
}

// Namespace: 
public class tk2dSpriteColliderIsland // TypeDefIndex: 4687
{
	// Fields
	public bool connected; // 0x10
	public Vector2[] points; // 0x18

	// Methods
	public void .ctor(); // 0x100172338
	public bool IsValid(); // 0x10017322C
	public void CopyFrom(tk2dSpriteColliderIsland src); // 0x100172348
	public bool CompareTo(tk2dSpriteColliderIsland src); // 0x100172A34
}

// Namespace: 
public class tk2dSpriteCollectionDefinition // TypeDefIndex: 4688
{
	// Fields
	public string name; // 0x10
	public bool disableTrimming; // 0x18
	public bool additive; // 0x19
	public Vector3 scale; // 0x1C
	public Texture2D texture; // 0x28
	public Texture2D thumbnailTexture; // 0x30
	public int materialId; // 0x38
	public Anchor anchor; // 0x3C
	public float anchorX; // 0x40
	public float anchorY; // 0x44
	public Object overrideMesh; // 0x48
	public bool doubleSidedSprite; // 0x50
	public bool customSpriteGeometry; // 0x51
	public tk2dSpriteColliderIsland[] geometryIslands; // 0x58
	public bool dice; // 0x60
	public int diceUnitX; // 0x64
	public int diceUnitY; // 0x68
	public DiceFilter diceFilter; // 0x6C
	public Pad pad; // 0x70
	public int extraPadding; // 0x74
	public Source source; // 0x78
	public bool fromSpriteSheet; // 0x7C
	public bool hasSpriteSheetId; // 0x7D
	public int spriteSheetId; // 0x80
	public int spriteSheetX; // 0x84
	public int spriteSheetY; // 0x88
	public bool extractRegion; // 0x8C
	public int regionX; // 0x90
	public int regionY; // 0x94
	public int regionW; // 0x98
	public int regionH; // 0x9C
	public int regionId; // 0xA0
	public ColliderType colliderType; // 0xA4
	public Vector2 boxColliderMin; // 0xA8
	public Vector2 boxColliderMax; // 0xB0
	public tk2dSpriteColliderIsland[] polyColliderIslands; // 0xB8
	public PolygonColliderCap polyColliderCap; // 0xC0
	public bool colliderConvex; // 0xC4
	public bool colliderSmoothSphereCollisions; // 0xC5
	public ColliderColor colliderColor; // 0xC8
	public List`1<AttachPoint> attachPoints; // 0xD0

	// Methods
	public void .ctor(); // 0x100171C58
	public void CopyFrom(tk2dSpriteCollectionDefinition src); // 0x100171D70
	public void Clear(); // 0x10017243C
	public bool CompareTo(tk2dSpriteCollectionDefinition src); // 0x10017249C
}

// Namespace: 
public sealed class Anchor : Enum // TypeDefIndex: 4689
{
	// Fields
	public int value__; // 0x10
	public const Anchor UpperLeft = 0; // 0x0
	public const Anchor UpperCenter = 1; // 0x0
	public const Anchor UpperRight = 2; // 0x0
	public const Anchor MiddleLeft = 3; // 0x0
	public const Anchor MiddleCenter = 4; // 0x0
	public const Anchor MiddleRight = 5; // 0x0
	public const Anchor LowerLeft = 6; // 0x0
	public const Anchor LowerCenter = 7; // 0x0
	public const Anchor LowerRight = 8; // 0x0
	public const Anchor Custom = 9; // 0x0

}

// Namespace: 
public sealed class Pad : Enum // TypeDefIndex: 4690
{
	// Fields
	public int value__; // 0x10
	public const Pad Default = 0; // 0x0
	public const Pad BlackZeroAlpha = 1; // 0x0
	public const Pad Extend = 2; // 0x0
	public const Pad TileXY = 3; // 0x0

}

// Namespace: 
public sealed class ColliderType : Enum // TypeDefIndex: 4691
{
	// Fields
	public int value__; // 0x10
	public const ColliderType UserDefined = 0; // 0x0
	public const ColliderType ForceNone = 1; // 0x0
	public const ColliderType BoxTrimmed = 2; // 0x0
	public const ColliderType BoxCustom = 3; // 0x0
	public const ColliderType Polygon = 4; // 0x0

}

// Namespace: 
public sealed class PolygonColliderCap : Enum // TypeDefIndex: 4692
{
	// Fields
	public int value__; // 0x10
	public const PolygonColliderCap None = 0; // 0x0
	public const PolygonColliderCap FrontAndBack = 1; // 0x0
	public const PolygonColliderCap Front = 2; // 0x0
	public const PolygonColliderCap Back = 3; // 0x0

}

// Namespace: 
public sealed class ColliderColor : Enum // TypeDefIndex: 4693
{
	// Fields
	public int value__; // 0x10
	public const ColliderColor Default = 0; // 0x0
	public const ColliderColor Red = 1; // 0x0
	public const ColliderColor White = 2; // 0x0
	public const ColliderColor Black = 3; // 0x0

}

// Namespace: 
public sealed class Source : Enum // TypeDefIndex: 4694
{
	// Fields
	public int value__; // 0x10
	public const Source Sprite = 0; // 0x0
	public const Source SpriteSheet = 1; // 0x0
	public const Source Font = 2; // 0x0

}

// Namespace: 
public sealed class DiceFilter : Enum // TypeDefIndex: 4695
{
	// Fields
	public int value__; // 0x10
	public const DiceFilter Complete = 0; // 0x0
	public const DiceFilter SolidOnly = 1; // 0x0
	public const DiceFilter TransparentOnly = 2; // 0x0

}

// Namespace: 
public class tk2dSpriteCollectionDefault // TypeDefIndex: 4696
{
	// Fields
	public bool additive; // 0x10
	public Vector3 scale; // 0x14
	public Anchor anchor; // 0x20
	public Pad pad; // 0x24
	public ColliderType colliderType; // 0x28

	// Methods
	public void .ctor(); // 0x100171BF4
}

// Namespace: 
public class tk2dSpriteSheetSource // TypeDefIndex: 4697
{
	// Fields
	public const int CURRENT_VERSION = 1; // 0x0
	public Texture2D texture; // 0x10
	public int tilesX; // 0x18
	public int tilesY; // 0x1C
	public int numTiles; // 0x20
	public Anchor anchor; // 0x24
	public Pad pad; // 0x28
	public Vector3 scale; // 0x2C
	public bool additive; // 0x38
	public bool active; // 0x39
	public int tileWidth; // 0x3C
	public int tileHeight; // 0x40
	public int tileMarginX; // 0x44
	public int tileMarginY; // 0x48
	public int tileSpacingX; // 0x4C
	public int tileSpacingY; // 0x50
	public SplitMethod splitMethod; // 0x54
	public int version; // 0x58
	public ColliderType colliderType; // 0x5C

	// Methods
	public void .ctor(); // 0x10017862C
	public void CopyFrom(tk2dSpriteSheetSource src); // 0x100178694
	public bool CompareTo(tk2dSpriteSheetSource src); // 0x100178708
	public string get_Name(); // 0x1001788C4
}

// Namespace: 
public sealed class Anchor : Enum // TypeDefIndex: 4698
{
	// Fields
	public int value__; // 0x10
	public const Anchor UpperLeft = 0; // 0x0
	public const Anchor UpperCenter = 1; // 0x0
	public const Anchor UpperRight = 2; // 0x0
	public const Anchor MiddleLeft = 3; // 0x0
	public const Anchor MiddleCenter = 4; // 0x0
	public const Anchor MiddleRight = 5; // 0x0
	public const Anchor LowerLeft = 6; // 0x0
	public const Anchor LowerCenter = 7; // 0x0
	public const Anchor LowerRight = 8; // 0x0

}

// Namespace: 
public sealed class SplitMethod : Enum // TypeDefIndex: 4699
{
	// Fields
	public int value__; // 0x10
	public const SplitMethod UniformDivision = 0; // 0x0

}

// Namespace: 
public class tk2dSpriteCollectionFont // TypeDefIndex: 4700
{
	// Fields
	public bool active; // 0x10
	public TextAsset bmFont; // 0x18
	public Texture2D texture; // 0x20
	public bool dupeCaps; // 0x28
	public bool flipTextureY; // 0x29
	public int charPadX; // 0x2C
	public tk2dFontData data; // 0x30
	public tk2dFont editorData; // 0x38
	public int materialId; // 0x40
	public bool useGradient; // 0x44
	public Texture2D gradientTexture; // 0x48
	public int gradientCount; // 0x50

	// Methods
	public void .ctor(); // 0x100172B30
	public void CopyFrom(tk2dSpriteCollectionFont src); // 0x100172B40
	public string get_Name(); // 0x100172BB4
	public bool get_InUse(); // 0x100172D14
}

// Namespace: 
public class tk2dSpriteCollectionPlatform // TypeDefIndex: 4701
{
	// Fields
	public string name; // 0x10
	public tk2dSpriteCollection spriteCollection; // 0x18

	// Methods
	public void .ctor(); // 0x100172E48
	public bool get_Valid(); // 0x100172EC0
	public void CopyFrom(tk2dSpriteCollectionPlatform source); // 0x100172F60
}

// Namespace: 
public class tk2dSpriteCollection : MonoBehaviour // TypeDefIndex: 4702
{
	// Fields
	public const int CURRENT_VERSION = 4; // 0x0
	private tk2dSpriteCollectionDefinition[] textures; // 0x18
	private Texture2D[] textureRefs; // 0x20
	public tk2dSpriteSheetSource[] spriteSheets; // 0x28
	public tk2dSpriteCollectionFont[] fonts; // 0x30
	public tk2dSpriteCollectionDefault defaults; // 0x38
	public List`1<tk2dSpriteCollectionPlatform> platforms; // 0x40
	public bool managedSpriteCollection; // 0x48
	public bool loadable; // 0x49
	public AtlasFormat atlasFormat; // 0x4C
	public int maxTextureSize; // 0x50
	public bool forceTextureSize; // 0x54
	public int forcedTextureWidth; // 0x58
	public int forcedTextureHeight; // 0x5C
	public TextureCompression textureCompression; // 0x60
	public int atlasWidth; // 0x64
	public int atlasHeight; // 0x68
	public bool forceSquareAtlas; // 0x6C
	public float atlasWastage; // 0x70
	public bool allowMultipleAtlases; // 0x74
	public bool removeDuplicates; // 0x75
	public tk2dSpriteCollectionDefinition[] textureParams; // 0x78
	public tk2dSpriteCollectionData spriteCollection; // 0x80
	public bool premultipliedAlpha; // 0x88
	public Material[] altMaterials; // 0x90
	public Material[] atlasMaterials; // 0x98
	public Texture2D[] atlasTextures; // 0xA0
	public TextAsset[] atlasTextureFiles; // 0xA8
	private bool useTk2dCamera; // 0xB0
	private int targetHeight; // 0xB4
	private float targetOrthoSize; // 0xB8
	public tk2dSpriteCollectionSize sizeDef; // 0xC0
	public float globalScale; // 0xC8
	public float globalTextureRescale; // 0xCC
	public List`1<AttachPointTestSprite> attachPointTestSprites; // 0xD0
	private bool pixelPerfectPointSampled; // 0xD8
	public FilterMode filterMode; // 0xDC
	public TextureWrapMode wrapMode; // 0xE0
	public bool userDefinedTextureSettings; // 0xE4
	public bool mipmapEnabled; // 0xE5
	public int anisoLevel; // 0xE8
	public PhysicsEngine physicsEngine; // 0xEC
	public float physicsDepth; // 0xF0
	public bool disableTrimming; // 0xF4
	public NormalGenerationMode normalGenerationMode; // 0xF8
	public int padAmount; // 0xFC
	public bool autoUpdate; // 0x100
	public float editorDisplayScale; // 0x104
	public int version; // 0x108
	public string assetName; // 0x110

	// Methods
	public void .ctor(); // 0x10017067C
	public Texture2D[] get_DoNotUse__TextureRefs(); // 0x1001707D8
	public void set_DoNotUse__TextureRefs(Texture2D[] value); // 0x1001707E0
	public bool get_HasPlatformData(); // 0x1001707E8
	public void Upgrade(); // 0x10017084C
}

// Namespace: 
public sealed class NormalGenerationMode : Enum // TypeDefIndex: 4703
{
	// Fields
	public int value__; // 0x10
	public const NormalGenerationMode None = 0; // 0x0
	public const NormalGenerationMode NormalsOnly = 1; // 0x0
	public const NormalGenerationMode NormalsAndTangents = 2; // 0x0

}

// Namespace: 
public sealed class TextureCompression : Enum // TypeDefIndex: 4704
{
	// Fields
	public int value__; // 0x10
	public const TextureCompression Uncompressed = 0; // 0x0
	public const TextureCompression Reduced16Bit = 1; // 0x0
	public const TextureCompression Compressed = 2; // 0x0
	public const TextureCompression Dithered16Bit_Alpha = 3; // 0x0
	public const TextureCompression Dithered16Bit_NoAlpha = 4; // 0x0

}

// Namespace: 
public sealed class AtlasFormat : Enum // TypeDefIndex: 4705
{
	// Fields
	public int value__; // 0x10
	public const AtlasFormat UnityTexture = 0; // 0x0
	public const AtlasFormat Png = 1; // 0x0

}

// Namespace: 
public class AttachPointTestSprite // TypeDefIndex: 4706
{
	// Fields
	public string attachPointName; // 0x10
	public tk2dSpriteCollectionData spriteCollection; // 0x18
	public int spriteId; // 0x20

	// Methods
	public void .ctor(); // 0x100170A60
	public bool CompareTo(AttachPointTestSprite src); // 0x100170AE0
	public void CopyFrom(AttachPointTestSprite src); // 0x100170BC4
}

// Namespace: 
public class tk2dCollider2DData // TypeDefIndex: 4707
{
	// Fields
	public Vector2[] points; // 0x10

	// Methods
	public void .ctor(); // 0x10015F450
}

// Namespace: 
public class tk2dSpriteDefinition // TypeDefIndex: 4708
{
	// Fields
	public string name; // 0x10
	public Vector3[] boundsData; // 0x18
	public Vector3[] untrimmedBoundsData; // 0x20
	public Vector2 texelSize; // 0x28
	public Vector3[] positions; // 0x30
	public Vector3[] normals; // 0x38
	public Vector4[] tangents; // 0x40
	public Vector2[] uvs; // 0x48
	public int[] indices; // 0x50
	public Material material; // 0x58
	public Material materialInst; // 0x60
	public int materialId; // 0x68
	public string sourceTextureGUID; // 0x70
	public bool extractRegion; // 0x78
	public int regionX; // 0x7C
	public int regionY; // 0x80
	public int regionW; // 0x84
	public int regionH; // 0x88
	public FlipMode flipped; // 0x8C
	public bool complexGeometry; // 0x90
	public PhysicsEngine physicsEngine; // 0x94
	public ColliderType colliderType; // 0x98
	public Vector3[] colliderVertices; // 0xA0
	public int[] colliderIndicesFwd; // 0xA8
	public int[] colliderIndicesBack; // 0xB0
	public bool colliderConvex; // 0xB8
	public bool colliderSmoothSphereCollisions; // 0xB9
	public tk2dCollider2DData[] polygonCollider2D; // 0xC0
	public tk2dCollider2DData[] edgeCollider2D; // 0xC8
	public AttachPoint[] attachPoints; // 0xD0

	// Methods
	public void .ctor(); // 0x100173268
	public bool get_Valid(); // 0x100173360
	public Bounds GetBounds(); // 0x10017338C
	public Bounds GetUntrimmedBounds(); // 0x1001734E8
}

// Namespace: 
public sealed class ColliderType : Enum // TypeDefIndex: 4709
{
	// Fields
	public int value__; // 0x10
	public const ColliderType Unset = 0; // 0x0
	public const ColliderType None = 1; // 0x0
	public const ColliderType Box = 2; // 0x0
	public const ColliderType Mesh = 3; // 0x0

}

// Namespace: 
public sealed class PhysicsEngine : Enum // TypeDefIndex: 4710
{
	// Fields
	public int value__; // 0x10
	public const PhysicsEngine Physics3D = 0; // 0x0
	public const PhysicsEngine Physics2D = 1; // 0x0

}

// Namespace: 
public sealed class FlipMode : Enum // TypeDefIndex: 4711
{
	// Fields
	public int value__; // 0x10
	public const FlipMode None = 0; // 0x0
	public const FlipMode Tk2d = 1; // 0x0
	public const FlipMode TPackerCW = 2; // 0x0

}

// Namespace: 
public class AttachPoint // TypeDefIndex: 4712
{
	// Fields
	public string name; // 0x10
	public Vector3 position; // 0x18
	public float angle; // 0x24

	// Methods
	public void .ctor(); // 0x100173644
	public void CopyFrom(AttachPoint src); // 0x1001736D4
	public bool CompareTo(AttachPoint src); // 0x100173708
}

// Namespace: 
public class tk2dSpriteCollectionData : MonoBehaviour // TypeDefIndex: 4713
{
	// Fields
	public const int CURRENT_VERSION = 3; // 0x0
	public int version; // 0x18
	public bool materialIdsValid; // 0x1C
	public bool needMaterialInstance; // 0x1D
	public tk2dSpriteDefinition[] spriteDefinitions; // 0x20
	private Dictionary`2<string, int> spriteNameLookupDict; // 0x28
	public bool premultipliedAlpha; // 0x30
	public Material material; // 0x38
	public Material[] materials; // 0x40
	public Material[] materialInsts; // 0x48
	private Texture2D[] textureInsts; // 0x50
	public Texture[] textures; // 0x58
	public TextAsset[] pngTextures; // 0x60
	public FilterMode textureFilterMode; // 0x68
	public bool textureMipMaps; // 0x6C
	public bool allowMultipleAtlases; // 0x6D
	public string spriteCollectionGUID; // 0x70
	public string spriteCollectionName; // 0x78
	public string assetName; // 0x80
	public bool loadable; // 0x88
	public float invOrthoSize; // 0x8C
	public float halfTargetHeight; // 0x90
	public int buildKey; // 0x94
	public string dataGuid; // 0x98
	public bool managedSpriteCollection; // 0xA0
	public bool hasPlatformData; // 0xA1
	public string[] spriteCollectionPlatforms; // 0xA8
	public string[] spriteCollectionPlatformGUIDs; // 0xB0
	private tk2dSpriteCollectionData platformSpecificData; // 0xB8
	private bool <Transient>k__BackingField; // 0xC0

	// Methods
	public void .ctor(); // 0x100170BF0
	public bool get_Transient(); // 0x100170CC4
	public void set_Transient(bool value); // 0x100160EA0
	public int get_Count(); // 0x10015E314
	public int GetSpriteIdByName(string name); // 0x100156108
	public int GetSpriteIdByName(string name, int defaultValue); // 0x1001558EC
	public tk2dSpriteDefinition GetSpriteDefinition(string name); // 0x100170DC4
	public void InitDictionary(); // 0x100170CCC
	public tk2dSpriteDefinition get_FirstValidDefinition(); // 0x10016AE60
	public bool IsValidSpriteId(int id); // 0x100170E24
	public int get_FirstValidDefinitionIndex(); // 0x100170EB4
	public void InitMaterialIds(); // 0x100170F3C
	public tk2dSpriteCollectionData get_inst(); // 0x100154FB8
	private void Init(); // 0x1001711A4
	public static tk2dSpriteCollectionData CreateFromTexture(Texture texture, tk2dSpriteCollectionSize size, string[] names, Rect[] regions, Vector2[] anchors); // 0x1001716F0
	public static tk2dSpriteCollectionData CreateFromTexturePacker(tk2dSpriteCollectionSize size, string texturePackerData, Texture texture); // 0x1001716F4
	public void ResetPlatformData(); // 0x1001716F8
	private void DestroyTextureInsts(); // 0x1001717CC
	public void UnloadTextures(); // 0x1001718B4
	private void OnDestroy(); // 0x1001719EC
}

// Namespace: tk2dRuntime
public interface ISpriteCollectionForceBuild // TypeDefIndex: 4714
{
	// Methods
	public abstract bool UsesSpriteCollection(tk2dSpriteCollectionData spriteCollection); // 0
	public abstract void ForceBuild(); // 0
}

// Namespace: 
public class tk2dSpriteCollectionSize // TypeDefIndex: 4715
{
	// Fields
	public Type type; // 0x10
	public float orthoSize; // 0x14
	public float pixelsPerMeter; // 0x18
	public float width; // 0x1C
	public float height; // 0x20

	// Methods
	public void .ctor(); // 0x100172F84
	public static tk2dSpriteCollectionSize Explicit(float orthoSize, float targetHeight); // 0x100172FAC
	public static tk2dSpriteCollectionSize PixelsPerMeter(float pixelsPerMeter); // 0x100173064
	public static tk2dSpriteCollectionSize ForResolution(float orthoSize, float width, float height); // 0x100172FB4
	public static tk2dSpriteCollectionSize ForTk2dCamera(); // 0x100151954
	public static tk2dSpriteCollectionSize ForTk2dCamera(tk2dCamera camera); // 0x1001730FC
	public static tk2dSpriteCollectionSize Default(); // 0x10015F504
	public void CopyFromLegacy(bool useTk2dCamera, float orthoSize, float targetHeight); // 0x10015F6FC
	public void CopyFrom(tk2dSpriteCollectionSize source); // 0x100173200
	public float get_OrthoSize(); // 0x100160EA8
	public float get_TargetHeight(); // 0x100160EC4
}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4716
{
	// Fields
	public int value__; // 0x10
	public const Type Explicit = 0; // 0x0
	public const Type PixelsPerMeter = 1; // 0x0

}

// Namespace: 
public class tk2dSpriteFromTexture : MonoBehaviour // TypeDefIndex: 4717
{
	// Fields
	public Texture texture; // 0x18
	public tk2dSpriteCollectionSize spriteCollectionSize; // 0x20
	public Anchor anchor; // 0x28
	private tk2dSpriteCollectionData spriteCollection; // 0x30
	private tk2dBaseSprite _sprite; // 0x38

	// Methods
	public void .ctor(); // 0x1001737CC
	private tk2dBaseSprite get_Sprite(); // 0x10017383C
	private void Awake(); // 0x100173970
	public bool get_HasSpriteCollection(); // 0x100173EC0
	private void OnDestroy(); // 0x100173F34
	public void Create(tk2dSpriteCollectionSize spriteCollectionSize, Texture texture, Anchor anchor); // 0x10017397C
	public void Clear(); // 0x10017425C
	public void ForceBuild(); // 0x100174260
	private void DestroyInternal(); // 0x100174000
}

// Namespace: 
public static class tk2dSpriteGeomGen // TypeDefIndex: 4718
{
	// Fields
	private static readonly int[] boxIndicesBack; // 0x0
	private static readonly int[] boxIndicesFwd; // 0x8
	private static readonly Vector3[] boxUnitVertices; // 0x10
	private static Matrix4x4 boxScaleMatrix; // 0x18

	// Methods
	private static void .cctor(); // 0x10017428C
	public static void SetSpriteColors(Color32[] dest, int offset, int numVertices, Color c, bool premulAlpha); // 0x1001745F4
	public static Vector2 GetAnchorOffset(Anchor anchor, float width, float height); // 0x100174178
	public static void GetSpriteGeomDesc(out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef); // 0x100174694
	public static void SetSpriteGeom(Vector3[] pos, Vector2[] uv, Vector3[] norm, Vector4[] tang, int offset, tk2dSpriteDefinition spriteDef, Vector3 scale); // 0x1001746CC
	public static void SetSpriteIndices(int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef); // 0x100174964
	public static void GetClippedSpriteGeomDesc(out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef); // 0x100174A1C
	public static void SetClippedSpriteGeom(Vector3[] pos, Vector2[] uv, int offset, out Vector3 boundsCenter, out Vector3 boundsExtents, tk2dSpriteDefinition spriteDef, Vector3 scale, Vector2 clipBottomLeft, Vector2 clipTopRight, float colliderOffsetZ, float colliderExtentZ); // 0x100174A5C
	public static void SetClippedSpriteIndices(int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef); // 0x100175838
	public static void GetSlicedSpriteGeomDesc(out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, bool borderOnly); // 0x100175954
	public static void SetSlicedSpriteGeom(Vector3[] pos, Vector2[] uv, int offset, out Vector3 boundsCenter, out Vector3 boundsExtents, tk2dSpriteDefinition spriteDef, Vector3 scale, Vector2 dimensions, Vector2 borderBottomLeft, Vector2 borderTopRight, Anchor anchor, float colliderOffsetZ, float colliderExtentZ); // 0x1001759A8
	public static void SetSlicedSpriteIndices(int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef, bool borderOnly); // 0x1001763CC
	public static void GetTiledSpriteGeomDesc(out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, Vector2 dimensions); // 0x100176518
	public static void SetTiledSpriteGeom(Vector3[] pos, Vector2[] uv, int offset, out Vector3 boundsCenter, out Vector3 boundsExtents, tk2dSpriteDefinition spriteDef, Vector3 scale, Vector2 dimensions, Anchor anchor, float colliderOffsetZ, float colliderExtentZ); // 0x100176628
	public static void SetTiledSpriteIndices(int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef, Vector2 dimensions); // 0x1001779FC
	public static void SetBoxMeshData(Vector3[] pos, int[] indices, int posOffset, int indicesOffset, int vStart, Vector3 origin, Vector3 extents, Matrix4x4 mat, Vector3 baseScale); // 0x100177C7C
	public static void SetSpriteDefinitionMeshData(Vector3[] pos, int[] indices, int posOffset, int indicesOffset, int vStart, tk2dSpriteDefinition spriteDef, Matrix4x4 mat, Vector3 baseScale); // 0x100177FEC
	public static void SetSpriteVertexNormals(Vector3[] pos, Vector3 pMin, Vector3 pMax, Vector3[] spriteDefNormals, Vector4[] spriteDefTangents, Vector3[] normals, Vector4[] tangents); // 0x1001781C8
}

// Namespace: 
public class tk2dBatchedSprite // TypeDefIndex: 4719
{
	// Fields
	public Type type; // 0x10
	public string name; // 0x18
	public int parentId; // 0x20
	public int spriteId; // 0x24
	public int xRefId; // 0x28
	public tk2dSpriteCollectionData spriteCollection; // 0x30
	public Quaternion rotation; // 0x38
	public Vector3 position; // 0x48
	public Vector3 localScale; // 0x54
	public Color color; // 0x60
	public Vector3 baseScale; // 0x70
	public int renderLayer; // 0x7C
	private Vector2 internalData0; // 0x80
	private Vector2 internalData1; // 0x88
	private Vector2 internalData2; // 0x90
	private Vector2 colliderData; // 0x98
	private string formattedText; // 0xA0
	private Flags flags; // 0xA8
	public Anchor anchor; // 0xAC
	public Matrix4x4 relativeMatrix; // 0xB0
	private Vector3 cachedBoundsCenter; // 0xF0
	private Vector3 cachedBoundsExtents; // 0xFC

	// Methods
	public void .ctor(); // 0x100158B84
	public float get_BoxColliderOffsetZ(); // 0x100158D38
	public void set_BoxColliderOffsetZ(float value); // 0x100158D40
	public float get_BoxColliderExtentZ(); // 0x100158D48
	public void set_BoxColliderExtentZ(float value); // 0x100158D50
	public string get_FormattedText(); // 0x100158D58
	public void set_FormattedText(string value); // 0x100158D60
	public Vector2 get_ClippedSpriteRegionBottomLeft(); // 0x100158D68
	public void set_ClippedSpriteRegionBottomLeft(Vector2 value); // 0x100158D70
	public Vector2 get_ClippedSpriteRegionTopRight(); // 0x100158D7C
	public void set_ClippedSpriteRegionTopRight(Vector2 value); // 0x100158D84
	public Vector2 get_SlicedSpriteBorderBottomLeft(); // 0x100158D90
	public void set_SlicedSpriteBorderBottomLeft(Vector2 value); // 0x100158D98
	public Vector2 get_SlicedSpriteBorderTopRight(); // 0x100158DA4
	public void set_SlicedSpriteBorderTopRight(Vector2 value); // 0x100158DAC
	public Vector2 get_Dimensions(); // 0x100158DB8
	public void set_Dimensions(Vector2 value); // 0x100158DC0
	public bool get_IsDrawn(); // 0x100158DCC
	public bool CheckFlag(Flags mask); // 0x100158DDC
	public void SetFlag(Flags mask, bool value); // 0x100158DEC
	public Vector3 get_CachedBoundsCenter(); // 0x100158E08
	public void set_CachedBoundsCenter(Vector3 value); // 0x100158E14
	public Vector3 get_CachedBoundsExtents(); // 0x100158E20
	public void set_CachedBoundsExtents(Vector3 value); // 0x100158E2C
	public tk2dSpriteDefinition GetSpriteDefinition(); // 0x100158E38
}

// Namespace: 
public sealed class Type : Enum // TypeDefIndex: 4720
{
	// Fields
	public int value__; // 0x10
	public const Type EmptyGameObject = 0; // 0x0
	public const Type Sprite = 1; // 0x0
	public const Type TiledSprite = 2; // 0x0
	public const Type SlicedSprite = 3; // 0x0
	public const Type ClippedSprite = 4; // 0x0
	public const Type TextMesh = 5; // 0x0

}

// Namespace: 
public sealed class Flags : Enum // TypeDefIndex: 4721
{
	// Fields
	public int value__; // 0x10
	public const Flags None = 0; // 0x0
	public const Flags Sprite_CreateBoxCollider = 1; // 0x0
	public const Flags SlicedSprite_BorderOnly = 2; // 0x0

}

// Namespace: 
public class tk2dStaticSpriteBatcher : MonoBehaviour, ISpriteCollectionForceBuild // TypeDefIndex: 4722
{
	// Fields
	public static int CURRENT_VERSION; // 0x0
	public int version; // 0x18
	public tk2dBatchedSprite[] batchedSprites; // 0x20
	public tk2dTextMeshData[] allTextMeshData; // 0x28
	public tk2dSpriteCollectionData spriteCollection; // 0x30
	private Flags flags; // 0x38
	private Mesh mesh; // 0x40
	private Mesh colliderMesh; // 0x48
	private Vector3 _scale; // 0x50
	private static Comparison`1<tk2dBatchedSprite> <>f__am$cache9; // 0x8

	// Methods
	public void .ctor(); // 0x100178968
	private static void .cctor(); // 0x1001789D0
	public bool CheckFlag(Flags mask); // 0x100178A24
	public void SetFlag(Flags mask, bool value); // 0x100178A34
	private void Awake(); // 0x100178BF8
	private bool UpgradeData(); // 0x100178BFC
	protected void OnDestroy(); // 0x100179390
	public void UpdateMatrices(); // 0x100178E50
	public void Build(); // 0x100178A68
	private void SortBatchedSprites(); // 0x1001794A4
	private Material GetMaterial(tk2dBatchedSprite bs); // 0x10017B948
	private void BuildRenderMesh(); // 0x100179AAC
	private void BuildPhysicsMesh(); // 0x10017B30C
	private void BuildPhysicsMesh2D(EdgeCollider2D[] edgeColliders, int numEdgeColliders); // 0x10017D2B4
	private void BuildPhysicsMesh3D(MeshCollider meshCollider, bool flattenDepth, int numVertices, int numIndices); // 0x10017CC1C
	public bool UsesSpriteCollection(tk2dSpriteCollectionData spriteCollection); // 0x10017DD14
	public void ForceBuild(); // 0x10017DD94
	private static int <UpdateMatrices>m__18A(tk2dBatchedSprite a, tk2dBatchedSprite b); // 0x10017DD98
}

// Namespace: 
public sealed class Flags : Enum // TypeDefIndex: 4723
{
	// Fields
	public int value__; // 0x10
	public const Flags None = 0; // 0x0
	public const Flags GenerateCollider = 1; // 0x0
	public const Flags FlattenDepth = 2; // 0x0
	public const Flags SortToCamera = 4; // 0x0

}

// Namespace: 
public class tk2dTiledSprite : tk2dBaseSprite // TypeDefIndex: 4724
{
	// Fields
	private Mesh mesh; // 0x98
	private Vector2[] meshUvs; // 0xA0
	private Vector3[] meshVertices; // 0xA8
	private Color32[] meshColors; // 0xB0
	private Vector3[] meshNormals; // 0xB8
	private Vector4[] meshTangents; // 0xC0
	private int[] meshIndices; // 0xC8
	private Vector2 _dimensions; // 0xD0
	private Anchor _anchor; // 0xD8
	protected bool _createBoxCollider; // 0xDC
	private Vector3 boundsCenter; // 0xE0
	private Vector3 boundsExtents; // 0xEC

	// Methods
	public void .ctor(); // 0x100182870
	public Vector2 get_dimensions(); // 0x1001828F4
	public void set_dimensions(Vector2 value); // 0x1001828FC
	public Anchor get_anchor(); // 0x1001829B8
	public void set_anchor(Anchor value); // 0x1001829C0
	public bool get_CreateBoxCollider(); // 0x100182A5C
	public void set_CreateBoxCollider(bool value); // 0x100182A64
	private void Awake(); // 0x100182ADC
	protected void OnDestroy(); // 0x100182CB8
	protected void SetColors(Color32[] dest); // 0x100182D70
	public override void Build(); // 0x100182E44
	protected override void UpdateGeometry(); // 0x100183550
	protected override void UpdateColors(); // 0x1001835E8
	protected override void UpdateVertices(); // 0x100183674
	protected void UpdateColorsImpl(); // 0x1001835EC
	protected void UpdateGeometryImpl(); // 0x10018359C
	protected override void UpdateCollider(); // 0x1001836C0
	protected override void CreateCollider(); // 0x10018386C
	protected override void UpdateMaterial(); // 0x1001838B8
	protected override int GetCurrentVertexCount(); // 0x100183A20
	public override void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x100183A28
}

// Namespace: 
public static class tk2dUtil // TypeDefIndex: 4725
{
	// Fields
	private static string label; // 0x0
	private static bool undoEnabled; // 0x8

	// Methods
	private static void .cctor(); // 0x10019CF2C
	public static bool get_UndoEnabled(); // 0x10019CFA8
	public static void set_UndoEnabled(bool value); // 0x10019D010
	public static void BeginGroup(string name); // 0x10019D07C
	public static void EndGroup(); // 0x10019D0F0
	public static void DestroyImmediate(Object obj); // 0x1001847E0
	public static GameObject CreateGameObject(string name); // 0x10019D184
	public static Mesh CreateMesh(); // 0x10019D1E8
	public static T AddComponent(GameObject go); // 0
	public static void SetActive(GameObject go, bool active); // 0x100184BE4
	public static void SetTransformParent(Transform t, Transform parent); // 0x10019D244
}

// Namespace: 
public sealed class tk2dTileFlags : Enum // TypeDefIndex: 4726
{
	// Fields
	public int value__; // 0x10
	public const tk2dTileFlags None = 0; // 0x0
	public const tk2dTileFlags FlipX = 16777216; // 0x0
	public const tk2dTileFlags FlipY = 33554432; // 0x0
	public const tk2dTileFlags Rot90 = 67108864; // 0x0

}

// Namespace: 
public class tk2dTileMap : MonoBehaviour, ISpriteCollectionForceBuild // TypeDefIndex: 4727
{
	// Fields
	public string editorDataGUID; // 0x18
	public tk2dTileMapData data; // 0x20
	public GameObject renderData; // 0x28
	private tk2dSpriteCollectionData spriteCollection; // 0x30
	private int spriteCollectionKey; // 0x38
	public int width; // 0x3C
	public int height; // 0x40
	public int partitionSizeX; // 0x44
	public int partitionSizeY; // 0x48
	private Layer[] layers; // 0x50
	private ColorChannel colorChannel; // 0x58
	private GameObject prefabsRoot; // 0x60
	private List`1<TilemapPrefabInstance> tilePrefabsList; // 0x68
	private bool _inEditMode; // 0x70
	public string serializedMeshPath; // 0x78

	// Methods
	public void .ctor(); // 0x100183DD8
	public tk2dSpriteCollectionData get_Editor__SpriteCollection(); // 0x100183E88
	public void set_Editor__SpriteCollection(tk2dSpriteCollectionData value); // 0x100183E90
	public tk2dSpriteCollectionData get_SpriteCollectionInst(); // 0x100183E98
	public bool get_AllowEdit(); // 0x100183F34
	private void Awake(); // 0x100183F3C
	private void OnDestroy(); // 0x1001846D0
	public void Build(); // 0x100184888
	public void ForceBuild(); // 0x100184890
	private void ClearSpawnedInstances(); // 0x100184898
	private void SetPrefabsRootActive(bool active); // 0x100184B20
	public void Build(BuildFlags buildFlags); // 0x10018427C
	public bool GetTileAtPosition(Vector3 position, out int x, out int y); // 0x100184C3C
	public bool GetTileFracAtPosition(Vector3 position, out float x, out float y); // 0x100184C8C
	public Vector3 GetTilePosition(int x, int y); // 0x10018509C
	public int GetTileIdAtPosition(Vector3 position, int layer); // 0x100185218
	public TileInfo GetTileInfoForTileId(int tileId); // 0x1001852CC
	public Color GetInterpolatedColorAtPosition(Vector3 position); // 0x10018533C
	public bool UsesSpriteCollection(tk2dSpriteCollectionData spriteCollection); // 0x1001856BC
	public void EndEditMode(); // 0x1001841B4
	public void TouchMesh(Mesh mesh); // 0x1001857CC
	public void DestroyMesh(Mesh mesh); // 0x1001857D0
	public int GetTilePrefabsListCount(); // 0x100185834
	public List`1<TilemapPrefabInstance> get_TilePrefabsList(); // 0x10018588C
	public void GetTilePrefabsListItem(int index, out int x, out int y, out int layer, out GameObject instance); // 0x100185894
	public void SetTilePrefabsList(List`1<int> xs, List`1<int> ys, List`1<int> layers, List`1<GameObject> instances); // 0x100185944
	public Layer[] get_Layers(); // 0x100185AC8
	public void set_Layers(Layer[] value); // 0x100185AD0
	public ColorChannel get_ColorChannel(); // 0x100185AD8
	public void set_ColorChannel(ColorChannel value); // 0x100185AE0
	public GameObject get_PrefabsRoot(); // 0x100185AE8
	public void set_PrefabsRoot(GameObject value); // 0x100185AF0
	public int GetTile(int x, int y, int layer); // 0x100185AF8
	public tk2dTileFlags GetTileFlags(int x, int y, int layer); // 0x100185B78
	public void SetTile(int x, int y, int layer, int tile); // 0x100185BF8
	public void SetTileFlags(int x, int y, int layer, tk2dTileFlags flags); // 0x100185C88
	public void ClearTile(int x, int y, int layer); // 0x100185D18
}

// Namespace: 
public class TilemapPrefabInstance // TypeDefIndex: 4728
{
	// Fields
	public int x; // 0x10
	public int y; // 0x14
	public int layer; // 0x18
	public GameObject instance; // 0x20

	// Methods
	public void .ctor(); // 0x100185AC0
}

// Namespace: 
public sealed class BuildFlags : Enum // TypeDefIndex: 4729
{
	// Fields
	public int value__; // 0x10
	public const BuildFlags Default = 0; // 0x0
	public const BuildFlags EditMode = 1; // 0x0
	public const BuildFlags ForceBuild = 2; // 0x0

}

// Namespace: tk2dRuntime.TileMap
public static class BuilderUtil // TypeDefIndex: 4730
{
	// Fields
	private const int tileMask = 16777215; // 0x0
	private static List`1<int> TilePrefabsX; // 0x0
	private static List`1<int> TilePrefabsY; // 0x8
	private static List`1<int> TilePrefabsLayer; // 0x10
	private static List`1<GameObject> TilePrefabsInstance; // 0x18

	// Methods
	public static bool InitDataStore(tk2dTileMap tileMap); // 0x100162070
	private static GameObject GetExistingTilePrefabInstance(tk2dTileMap tileMap, int tileX, int tileY, int tileLayer); // 0x10016262C
	public static void SpawnPrefabsForChunk(tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY, int layer, int[] prefabCounts); // 0x1001626EC
	public static void SpawnPrefabs(tk2dTileMap tileMap, bool forceBuild); // 0x100162D0C
	public static void HideTileMapPrefabs(tk2dTileMap tileMap); // 0x100163038
	private static Vector3 GetTilePosition(tk2dTileMap tileMap, int x, int y); // 0x100163740
	public static void CreateRenderData(tk2dTileMap tileMap, bool editMode, Dictionary`2<Layer, bool> layersActive); // 0x10016379C
	public static void GetLoopOrder(SortMethod sortMethod, int w, int h, out int x0, out int x1, out int dx, out int y0, out int y1, out int dy); // 0x100164128
	public static int GetTileFromRawTile(int rawTile); // 0x100162CFC
	public static bool IsRawTileFlagSet(int rawTile, tk2dTileFlags flag); // 0x1001647C4
	public static void SetRawTileFlag(int rawTile, tk2dTileFlags flag, bool setValue); // 0x1001647DC
	public static void InvertRawTileFlag(int rawTile, tk2dTileFlags flag); // 0x100164800
	public static Vector3 ApplySpriteVertexTileFlags(tk2dTileMap tileMap, tk2dSpriteDefinition spriteDef, Vector3 pos, bool flipH, bool flipV, bool rot90); // 0x100164824
	public static Vector2 ApplySpriteVertexTileFlags(tk2dTileMap tileMap, tk2dSpriteDefinition spriteDef, Vector2 pos, bool flipH, bool flipV, bool rot90); // 0x100164898
}

// Namespace: tk2dRuntime.TileMap
public class LayerSprites // TypeDefIndex: 4731
{
	// Fields
	public int[] spriteIds; // 0x10

	// Methods
	public void .ctor(); // 0x10016A028
}

// Namespace: tk2dRuntime.TileMap
public class SpriteChunk // TypeDefIndex: 4732
{
	// Fields
	private bool dirty; // 0x10
	public int[] spriteIds; // 0x18
	public GameObject gameObject; // 0x20
	public Mesh mesh; // 0x28
	public MeshCollider meshCollider; // 0x30
	public Mesh colliderMesh; // 0x38
	public List`1<EdgeCollider2D> edgeColliders; // 0x40

	// Methods
	public void .ctor(); // 0x100169728
	public bool get_Dirty(); // 0x100163030
	public void set_Dirty(bool value); // 0x100169AEC
	public bool get_IsEmpty(); // 0x10016300C
	public bool get_HasGameData(); // 0x1001642A0
	public void DestroyGameData(tk2dTileMap tileMap); // 0x1001643EC
	public void DestroyColliderData(tk2dTileMap tileMap); // 0x10016450C
}

// Namespace: tk2dRuntime.TileMap
public class SpriteChannel // TypeDefIndex: 4733
{
	// Fields
	public SpriteChunk[] chunks; // 0x10

	// Methods
	public void .ctor(); // 0x100169564
}

// Namespace: tk2dRuntime.TileMap
public class ColorChunk // TypeDefIndex: 4734
{
	// Fields
	public Color32[] colors; // 0x10
	private bool <Dirty>k__BackingField; // 0x18

	// Methods
	public void .ctor(); // 0x10016931C
	public bool get_Dirty(); // 0x100169538
	public void set_Dirty(bool value); // 0x100169084
	public bool get_Empty(); // 0x100169540
}

// Namespace: tk2dRuntime.TileMap
public class ColorChannel // TypeDefIndex: 4735
{
	// Fields
	public Color clearColor; // 0x10
	public ColorChunk[] chunks; // 0x20
	public int numColumns; // 0x28
	public int numRows; // 0x2C
	public int divX; // 0x30
	public int divY; // 0x34

	// Methods
	public void .ctor(int width, int height, int divX, int divY); // 0x1001625B4
	public void .ctor(); // 0x100168878
	public void Init(int width, int height, int divX, int divY); // 0x1001687D4
	public ColorChunk FindChunkAndCoordinate(int x, int y, out int offset); // 0x100168904
	public Color GetColor(int x, int y); // 0x100168A1C
	private void InitChunk(ColorChunk chunk); // 0x100168AD0
	public void SetColor(int x, int y, Color color); // 0x100168BBC
	public ColorChunk GetChunk(int x, int y); // 0x10016908C
	public ColorChunk GetChunk(int x, int y, bool init); // 0x100169018
	public void ClearChunk(ColorChunk chunk); // 0x1001690DC
	public void ClearDirtyFlag(); // 0x100169160
	public void Clear(Color color); // 0x1001691CC
	public void Delete(); // 0x1001692B8
	public void Create(); // 0x100168F20
	private void Optimize(ColorChunk chunk); // 0x10016938C
	public void Optimize(); // 0x100169248
	public bool get_IsEmpty(); // 0x100168AAC
	public int get_NumActiveChunks(); // 0x1001694AC
}

// Namespace: tk2dRuntime.TileMap
public class Layer // TypeDefIndex: 4736
{
	// Fields
	private const int tileMask = 16777215; // 0x0
	private const int flagMask = -16777216; // 0x0
	public int hash; // 0x10
	public SpriteChannel spriteChannel; // 0x18
	public int width; // 0x20
	public int height; // 0x24
	public int numColumns; // 0x28
	public int numRows; // 0x2C
	public int divX; // 0x30
	public int divY; // 0x34
	public GameObject gameObject; // 0x38

	// Methods
	public void .ctor(int hash, int width, int height, int divX, int divY); // 0x1001624D8
	public void Init(int hash, int width, int height, int divX, int divY); // 0x1001695D4
	public bool get_IsEmpty(); // 0x100162584
	public void Create(); // 0x1001697C0
	public int[] GetChunkData(int x, int y); // 0x100169840
	public SpriteChunk GetChunk(int x, int y); // 0x100162FBC
	private SpriteChunk FindChunkAndCoordinate(int x, int y, out int offset); // 0x100169860
	private bool GetRawTileValue(int x, int y, int value); // 0x1001698F8
	private void SetRawTileValue(int x, int y, int value); // 0x100169974
	public void DestroyGameData(tk2dTileMap tilemap); // 0x100169AF4
	public int GetTile(int x, int y); // 0x100169B94
	public tk2dTileFlags GetTileFlags(int x, int y); // 0x100169BD4
	public int GetRawTile(int x, int y); // 0x100169C14
	public void SetTile(int x, int y, int tile); // 0x100169C44
	public void SetTileFlags(int x, int y, tk2dTileFlags flags); // 0x100169CB0
	public void ClearTile(int x, int y); // 0x100169D2C
	public void SetRawTile(int x, int y, int rawTile); // 0x100169D34
	private void CreateChunk(SpriteChunk chunk); // 0x1001699F8
	private void Optimize(SpriteChunk chunk); // 0x100169D38
	public void Optimize(); // 0x100169DF4
	public void OptimizeIncremental(); // 0x100169E64
	public void ClearDirtyFlag(); // 0x100169EE0
	public int get_NumActiveChunks(); // 0x100169F54
}

// Namespace: tk2dRuntime.TileMap
public static class ColliderBuilder3D // TypeDefIndex: 4737
{
	// Methods
	public static void Build(tk2dTileMap tileMap, bool forceBuild); // 0x100166C9C
	public static void BuildForChunk(tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY); // 0x100166EEC
	private static void BuildLocalMeshForChunk(tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY, Vector3[] vertices, int[] indices); // 0x1001673A8
	private static int CompareWeldVertices(Vector3 a, Vector3 b); // 0x100168500
	private static Vector3[] WeldVertices(Vector3[] vertices, int[] indices); // 0x100167C3C
	private static int CompareDuplicateFaces(int[] indices, int face0index, int face1index); // 0x100168678
	private static int[] RemoveDuplicateFaces(int[] indices); // 0x100168090
}

// Namespace: 
private sealed class <WeldVertices>c__AnonStorey113 // TypeDefIndex: 4738
{
	// Fields
	internal Vector3[] vertices; // 0x10

	// Methods
	public void .ctor(); // 0x100168670
	internal int <>m__18B(int a, int b); // 0x100168744
}

// Namespace: 
private sealed class <RemoveDuplicateFaces>c__AnonStorey114 // TypeDefIndex: 4739
{
	// Fields
	internal int[] sortedFaceIndices; // 0x10

	// Methods
	public void .ctor(); // 0x100168724
	internal int <>m__18C(int a, int b); // 0x10016872C
}

// Namespace: tk2dRuntime.TileMap
public static class ColliderBuilder2D // TypeDefIndex: 4740
{
	// Methods
	public static void Build(tk2dTileMap tileMap, bool forceBuild); // 0x10016490C
	public static void BuildForChunk(tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY); // 0x100164D44
	private static void BuildLocalMeshForChunk(tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY, Vector2[] vertices, int[] indices); // 0x1001652BC
	private static int CompareWeldVertices(Vector2 a, Vector2 b); // 0x100166A54
	private static Vector2[] WeldVertices(Vector2[] vertices, int[] indices); // 0x100165C74
	private static int CompareDuplicateFaces(int[] indices, int face0index, int face1index); // 0x100166B4C
	private static int[] RemoveDuplicateEdges(int[] indices); // 0x10016609C
	private static List`1<Vector2[]> MergeEdges(Vector2[] verts, int[] indices); // 0x100166478
}

// Namespace: 
private sealed class <WeldVertices>c__AnonStorey115 // TypeDefIndex: 4741
{
	// Fields
	internal Vector2[] vertices; // 0x10

	// Methods
	public void .ctor(); // 0x100166B44
	internal int <>m__18D(int a, int b); // 0x100166C18
}

// Namespace: 
private sealed class <RemoveDuplicateEdges>c__AnonStorey116 // TypeDefIndex: 4742
{
	// Fields
	internal int[] sortedFaceIndices; // 0x10

	// Methods
	public void .ctor(); // 0x100166BF8
	internal int <>m__18E(int a, int b); // 0x100166C00
}

// Namespace: tk2dRuntime.TileMap
public class LayerInfo // TypeDefIndex: 4743
{
	// Fields
	public string name; // 0x10
	public int hash; // 0x18
	public bool useColor; // 0x1C
	public bool generateCollider; // 0x1D
	public float z; // 0x20
	public int unityLayer; // 0x24
	public bool skipMeshGeneration; // 0x28
	public PhysicMaterial physicMaterial; // 0x30
	public PhysicsMaterial2D physicsMaterial2D; // 0x38

	// Methods
	public void .ctor(); // 0x100169FE8
}

// Namespace: tk2dRuntime.TileMap
public class TileInfo // TypeDefIndex: 4744
{
	// Fields
	public string stringVal; // 0x10
	public int intVal; // 0x18
	public float floatVal; // 0x1C
	public bool enablePrefabOffset; // 0x20

	// Methods
	public void .ctor(); // 0x10016B20C
}

// Namespace: 
public class tk2dTileMapData : ScriptableObject // TypeDefIndex: 4745
{
	// Fields
	public Vector3 tileSize; // 0x18
	public Vector3 tileOrigin; // 0x24
	public TileType tileType; // 0x30
	public SortMethod sortMethod; // 0x34
	public bool layersFixedZ; // 0x38
	public GameObject[] tilePrefabs; // 0x40
	private TileInfo[] tileInfo; // 0x48
	public List`1<LayerInfo> tileMapLayers; // 0x50

	// Methods
	public void .ctor(); // 0x100185D94
	public int get_NumLayers(); // 0x100185E4C
	public LayerInfo[] get_Layers(); // 0x100185F9C
	public TileInfo GetTileInfoForSprite(int tileId); // 0x1001852E4
	public TileInfo[] GetOrCreateTileInfo(int numTiles); // 0x100186018
	public void GetTileOffset(out float x, out float y); // 0x100186174
	private void InitLayers(); // 0x100185EC8
}

// Namespace: 
public sealed class SortMethod : Enum // TypeDefIndex: 4746
{
	// Fields
	public int value__; // 0x10
	public const SortMethod BottomLeft = 0; // 0x0
	public const SortMethod TopLeft = 1; // 0x0
	public const SortMethod BottomRight = 2; // 0x0
	public const SortMethod TopRight = 3; // 0x0

}

// Namespace: 
public sealed class TileType : Enum // TypeDefIndex: 4747
{
	// Fields
	public int value__; // 0x10
	public const TileType Rectangular = 0; // 0x0
	public const TileType Isometric = 1; // 0x0

}

// Namespace: tk2dRuntime.TileMap
public static class RenderMeshBuilder // TypeDefIndex: 4748
{
	// Methods
	public static void BuildForChunk(tk2dTileMap tileMap, SpriteChunk chunk, ColorChunk colorChunk, bool useColor, bool skipPrefabs, int baseX, int baseY); // 0x10016A098
	public static void Build(tk2dTileMap tileMap, bool editMode, bool forceBuild); // 0x10016AEE8
}

// Namespace: 
public abstract class tk2dUIBaseItemControl : MonoBehaviour // TypeDefIndex: 4749
{
	// Fields
	public tk2dUIItem uiItem; // 0x18

	// Methods
	protected void .ctor(); // 0x1001865C4
	public GameObject get_SendMessageTarget(); // 0x1001865CC
	public void set_SendMessageTarget(GameObject value); // 0x100186660
	public static void ChangeGameObjectActiveState(GameObject go, bool isActive); // 0x1001866F8
	public static void ChangeGameObjectActiveStateWithNullCheck(GameObject go, bool isActive); // 0x100186718
	protected void DoSendMessage(string methodName, object parameter); // 0x1001867C0
}

// Namespace: 
public class tk2dUIDragItem : tk2dUIBaseItemControl // TypeDefIndex: 4750
{
	// Fields
	public tk2dUIManager uiManager; // 0x20
	private Vector3 offset; // 0x28
	private bool isBtnActive; // 0x34

	// Methods
	public void .ctor(); // 0x100186C28
	private void OnEnable(); // 0x100186C60
	private void OnDisable(); // 0x100186F3C
	private void UpdateBtnPosition(); // 0x100187620
	private Vector3 CalculateNewPos(); // 0x100187660
	public void ButtonDown(); // 0x1001879B4
	public void ButtonRelease(); // 0x100187BC8
}

// Namespace: 
public class tk2dUIDropDownItem : tk2dUIBaseItemControl // TypeDefIndex: 4751
{
	// Fields
	public tk2dTextMesh label; // 0x20
	public float height; // 0x28
	public tk2dUIUpDownHoverButton upDownHoverBtn; // 0x30
	private int index; // 0x38
	private Action`1<tk2dUIDropDownItem> OnItemSelected; // 0x40

	// Methods
	public void .ctor(); // 0x100187C88
	public void add_OnItemSelected(Action`1<tk2dUIDropDownItem> value); // 0x100187C90
	public void remove_OnItemSelected(Action`1<tk2dUIDropDownItem> value); // 0x100187D70
	public int get_Index(); // 0x100187E50
	public void set_Index(int value); // 0x100187E58
	public string get_LabelText(); // 0x100187E60
	public void set_LabelText(string value); // 0x100187E78
	private void OnEnable(); // 0x100187EAC
	private void OnDisable(); // 0x100188060
	private void ItemSelected(); // 0x100188214
}

// Namespace: 
public class tk2dUIDropDownMenu : MonoBehaviour // TypeDefIndex: 4752
{
	// Fields
	public tk2dUIItem dropDownButton; // 0x18
	public tk2dTextMesh selectedTextMesh; // 0x20
	public float height; // 0x28
	public tk2dUIDropDownItem dropDownItemTemplate; // 0x30
	private string[] startingItemList; // 0x38
	private int startingIndex; // 0x40
	private List`1<string> itemList; // 0x48
	public string SendMessageOnSelectedItemChangeMethodName; // 0x50
	private int index; // 0x58
	private List`1<tk2dUIDropDownItem> dropDownItems; // 0x60
	private bool isExpanded; // 0x68
	private tk2dUILayout menuLayoutItem; // 0x70
	private tk2dUILayout templateLayoutItem; // 0x78
	private Action OnSelectedItemChange; // 0x80

	// Methods
	public void .ctor(); // 0x100188278
	public void add_OnSelectedItemChange(Action value); // 0x100188340
	public void remove_OnSelectedItemChange(Action value); // 0x100188420
	public List`1<string> get_ItemList(); // 0x100188500
	public void set_ItemList(List`1<string> value); // 0x100188508
	public int get_Index(); // 0x100188510
	public void set_Index(int value); // 0x100188518
	public string get_SelectedItem(); // 0x100188788
	public GameObject get_SendMessageTarget(); // 0x100188840
	public void set_SendMessageTarget(GameObject value); // 0x1001888D4
	public tk2dUILayout get_MenuLayoutItem(); // 0x1001889A8
	public void set_MenuLayoutItem(tk2dUILayout value); // 0x1001889B0
	public tk2dUILayout get_TemplateLayoutItem(); // 0x1001889B8
	public void set_TemplateLayoutItem(tk2dUILayout value); // 0x1001889C0
	private void Awake(); // 0x1001889C8
	private void OnEnable(); // 0x100188DC4
	private void OnDisable(); // 0x100188E50
	public void UpdateList(); // 0x100188AA0
	public void SetSelectedItem(); // 0x1001885C4
	private tk2dUIDropDownItem CreateAnotherDropDownItem(); // 0x100188EDC
	private void ItemSelected(tk2dUIDropDownItem item); // 0x100189228
	private void ExpandButtonPressed(); // 0x100189468
	private void ExpandList(); // 0x100189478
	private void CollapseList(); // 0x100189268
	private void DropDownItemHoverBtnToggle(tk2dUIUpDownHoverButton upDownHoverButton); // 0x1001896E4
	private void OnDestroy(); // 0x100189994
}

// Namespace: 
public class tk2dUIHoverItem : tk2dUIBaseItemControl // TypeDefIndex: 4753
{
	// Fields
	public GameObject outStateGO; // 0x20
	public GameObject overStateGO; // 0x28
	private bool isOver; // 0x30
	public string SendMessageOnToggleHoverMethodName; // 0x38
	private Action`1<tk2dUIHoverItem> OnToggleHover; // 0x40

	// Methods
	public void .ctor(); // 0x100189D4C
	public void add_OnToggleHover(Action`1<tk2dUIHoverItem> value); // 0x100189DC4
	public void remove_OnToggleHover(Action`1<tk2dUIHoverItem> value); // 0x100189EA4
	public bool get_IsOver(); // 0x100189F84
	public void set_IsOver(bool value); // 0x100189F8C
	private void Start(); // 0x10018A06C
	private void OnEnable(); // 0x10018A070
	private void OnDisable(); // 0x10018A34C
	private void HoverOver(); // 0x10018A628
	private void HoverOut(); // 0x10018A630
	public void SetState(); // 0x10018A034
}

// Namespace: 
public class tk2dUIMultiStateToggleButton : tk2dUIBaseItemControl // TypeDefIndex: 4754
{
	// Fields
	public GameObject[] states; // 0x20
	public bool activateOnPress; // 0x28
	private int index; // 0x2C
	public string SendMessageOnStateToggleMethodName; // 0x30
	private Action`1<tk2dUIMultiStateToggleButton> OnStateToggle; // 0x38

	// Methods
	public void .ctor(); // 0x100192584
	public void add_OnStateToggle(Action`1<tk2dUIMultiStateToggleButton> value); // 0x1001925FC
	public void remove_OnStateToggle(Action`1<tk2dUIMultiStateToggleButton> value); // 0x1001926DC
	public int get_Index(); // 0x1001927BC
	public void set_Index(int value); // 0x1001927C4
	private void Start(); // 0x100192A04
	private void OnEnable(); // 0x100192A08
	private void OnDisable(); // 0x100192B24
	private void ButtonClick(); // 0x100192C40
	private void ButtonDown(); // 0x100192C80
	private void ButtonToggle(); // 0x100192C50
	private void SetState(); // 0x10019287C
}

// Namespace: 
public class tk2dUIProgressBar : MonoBehaviour // TypeDefIndex: 4755
{
	// Fields
	public Transform scalableBar; // 0x18
	public tk2dClippedSprite clippedSpriteBar; // 0x20
	public tk2dSlicedSprite slicedSpriteBar; // 0x28
	private bool initializedSlicedSpriteDimensions; // 0x30
	private Vector2 emptySlicedSpriteDimensions; // 0x34
	private Vector2 fullSlicedSpriteDimensions; // 0x3C
	private Vector2 currentDimensions; // 0x44
	private float percent; // 0x4C
	private bool isProgressComplete; // 0x50
	public GameObject sendMessageTarget; // 0x58
	public string SendMessageOnProgressCompleteMethodName; // 0x60
	private Action OnProgressComplete; // 0x68

	// Methods
	public void .ctor(); // 0x100192C90
	public void add_OnProgressComplete(Action value); // 0x100192D38
	public void remove_OnProgressComplete(Action value); // 0x100192E18
	private void Start(); // 0x100192EF8
	public float get_Value(); // 0x10019332C
	public void set_Value(float value); // 0x100193034
	private void InitializeSlicedSpriteDimensions(); // 0x100192F20
	public void RecalculateDimensions(); // 0x100193334
}

// Namespace: 
public class tk2dUIScrollableArea : MonoBehaviour // TypeDefIndex: 4756
{
	// Fields
	private const float SWIPE_SCROLLING_FIRST_SCROLL_THRESHOLD = 0.02; // 0x0
	private const float WITHOUT_SCROLLBAR_FIXED_SCROLL_WHEEL_PERCENT = 0.1; // 0x0
	private float contentLength; // 0x18
	private float visibleAreaLength; // 0x1C
	public GameObject contentContainer; // 0x20
	public tk2dUIScrollbar scrollBar; // 0x28
	public tk2dUIItem backgroundUIItem; // 0x30
	public Axes scrollAxes; // 0x38
	public bool allowSwipeScrolling; // 0x3C
	public bool allowScrollWheel; // 0x3D
	public bool loop; // 0x3E
	public int page; // 0x40
	private tk2dUILayout backgroundLayoutItem; // 0x48
	private tk2dUILayoutContainer contentLayoutContainer; // 0x50
	private bool isBackgroundButtonDown; // 0x58
	private bool isBackgroundButtonOver; // 0x59
	private Vector3 swipeScrollingPressDownStartLocalPos; // 0x5C
	private Vector3 swipeScrollingContentStartLocalPos; // 0x68
	private Vector3 swipeScrollingContentDestLocalPos; // 0x74
	private bool isSwipeScrollingInProgress; // 0x80
	private Vector3 swipePrevScrollingContentPressLocalPos; // 0x84
	private float swipeCurrVelocity; // 0x90
	private float snapBackVelocity; // 0x94
	public string SendMessageOnScrollMethodName; // 0x98
	private float percent; // 0xA0
	private static readonly Vector3[] boxExtents; // 0x0
	private Action`1<tk2dUIScrollableArea> OnScroll; // 0xA8
	private Action`1<tk2dUIScrollableArea> OnScrollEnd; // 0xB0

	// Methods
	public void .ctor(); // 0x100193368
	private static void .cctor(); // 0x100193458
	public void add_OnScroll(Action`1<tk2dUIScrollableArea> value); // 0x1001936F8
	public void remove_OnScroll(Action`1<tk2dUIScrollableArea> value); // 0x1001937D8
	public void add_OnScrollEnd(Action`1<tk2dUIScrollableArea> value); // 0x1001938B8
	public void remove_OnScrollEnd(Action`1<tk2dUIScrollableArea> value); // 0x100193998
	public float get_ContentLength(); // 0x100193A78
	public void set_ContentLength(float value); // 0x100193A80
	public float get_VisibleAreaLength(); // 0x100193B14
	public void set_VisibleAreaLength(float value); // 0x100193B1C
	public tk2dUILayout get_BackgroundLayoutItem(); // 0x100193B2C
	public void set_BackgroundLayoutItem(tk2dUILayout value); // 0x100193B34
	public tk2dUILayoutContainer get_ContentLayoutContainer(); // 0x100193CD8
	public void set_ContentLayoutContainer(tk2dUILayoutContainer value); // 0x100193CE0
	public GameObject get_SendMessageTarget(); // 0x100193E74
	public void set_SendMessageTarget(GameObject value); // 0x100193F08
	public float get_Value(); // 0x100193FDC
	public void set_Value(float value); // 0x100194054
	public void SetScrollPercentWithoutEvent(float newScrollPercent); // 0x100194434
	public float MeasureContentLength(); // 0x100194510
	private void OnEnable(); // 0x100194CCC
	private void OnDisable(); // 0x1001950BC
	private void Start(); // 0x10019563C
	private void BackgroundHoverOverScrollWheelChange(float mouseWheelChange); // 0x10019572C
	private void ScrollBarMove(tk2dUIScrollbar scrollBar); // 0x100195870
	private Vector3 get_ContentContainerOffset(); // 0x100195994
	private void set_ContentContainerOffset(Vector3 value); // 0x100195A18
	private void SetContentPosition(); // 0x1001943B4
	private void BackgroundButtonDown(); // 0x100195ABC
	private void BackgroundOverUpdate(); // 0x100195E34
	private void UpdateSwipeScrollDestintationPosition(); // 0x1001963E0
	private void BackgroundButtonRelease(); // 0x1001958C4
	private void BackgroundButtonHoverOver(); // 0x1001965C8
	private void BackgroundButtonHoverOut(); // 0x10019669C
	private Vector3 CalculateClickWorldPos(tk2dUIItem btn); // 0x100195CEC
	private void UpdateScrollbarActiveState(); // 0x100195640
	private void ContentLengthVisibleAreaLengthChange(float prevContentLength, float newContentLength, float prevVisibleAreaLength, float newVisibleAreaLength); // 0x100193A90
	private void UnpressAllUIItemChildren(); // 0x10019425C
	private void TargetOnScrollCallback(); // 0x100194260
	private static void GetRendererBoundsInChildren(Matrix4x4 rootWorldToLocal, Vector3[] minMax, Transform t); // 0x100194870
	private void LayoutReshaped(Vector3 dMin, Vector3 dMax); // 0x100196764
	private void ContentLayoutChangeCallback(); // 0x100196798
	private void DoPaging(); // 0x100196850
}

// Namespace: 
public sealed class Axes : Enum // TypeDefIndex: 4757
{
	// Fields
	public int value__; // 0x10
	public const Axes XAxis = 0; // 0x0
	public const Axes YAxis = 1; // 0x0

}

// Namespace: 
public class tk2dUIScrollbar : MonoBehaviour // TypeDefIndex: 4758
{
	// Fields
	private const float WITHOUT_SCROLLBAR_FIXED_SCROLL_WHEEL_PERCENT = 0.1; // 0x0
	private const float INITIAL_TIME_TO_REPEAT_UP_DOWN_SCROLL_BUTTON_SCROLLING_ON_HOLD = 0.55; // 0x0
	private const float TIME_TO_REPEAT_UP_DOWN_SCROLL_BUTTON_SCROLLING_ON_HOLD = 0.45; // 0x0
	public tk2dUIItem barUIItem; // 0x18
	public float scrollBarLength; // 0x20
	public tk2dUIItem thumbBtn; // 0x28
	public Transform thumbTransform; // 0x30
	public float thumbLength; // 0x38
	public tk2dUIItem upButton; // 0x40
	private tk2dUIHoverItem hoverUpButton; // 0x48
	public tk2dUIItem downButton; // 0x50
	private tk2dUIHoverItem hoverDownButton; // 0x58
	public float buttonUpDownScrollDistance; // 0x60
	public bool allowScrollWheel; // 0x64
	public Axes scrollAxes; // 0x68
	public tk2dUIProgressBar highlightProgressBar; // 0x70
	private tk2dUILayout barLayoutItem; // 0x78
	private bool isScrollThumbButtonDown; // 0x80
	private bool isTrackHoverOver; // 0x81
	private float percent; // 0x84
	private Vector3 moveThumbBtnOffset; // 0x88
	private int scrollUpDownButtonState; // 0x94
	private float timeOfUpDownButtonPressStart; // 0x98
	private float repeatUpDownButtonHoldCounter; // 0x9C
	public string SendMessageOnScrollMethodName; // 0xA0
	private Action`1<tk2dUIScrollbar> OnScroll; // 0xA8

	// Methods
	public void .ctor(); // 0x100196854
	public void add_OnScroll(Action`1<tk2dUIScrollbar> value); // 0x100194FDC
	public void remove_OnScroll(Action`1<tk2dUIScrollbar> value); // 0x10019555C
	public tk2dUILayout get_BarLayoutItem(); // 0x1001968F4
	public void set_BarLayoutItem(tk2dUILayout value); // 0x1001968FC
	public GameObject get_SendMessageTarget(); // 0x100196AA0
	public void set_SendMessageTarget(GameObject value); // 0x100196B34
	public float get_Value(); // 0x1001958BC
	public void set_Value(float value); // 0x100196C08
	public void SetScrollPercentWithoutEvent(float newScrollPercent); // 0x100194328
	private void OnEnable(); // 0x100196E74
	private void OnDisable(); // 0x10019726C
	private void Awake(); // 0x100197868
	private void Start(); // 0x10019795C
	private void TrackHoverScrollWheelChange(float mouseWheelChange); // 0x100197960
	private void SetScrollThumbPosition(); // 0x100196D40
	private void MoveScrollThumbButton(); // 0x100197980
	private Vector3 CalculateClickWorldPos(tk2dUIItem btn); // 0x1001979BC
	private void ScrollToPosition(Vector3 worldPos); // 0x100197B04
	private void ScrollTrackButtonDown(); // 0x100197B98
	private void ScrollTrackButtonHoverOver(); // 0x100197BC0
	private void ScrollTrackButtonHoverOut(); // 0x100197C94
	private void ScrollThumbButtonDown(); // 0x100197D5C
	private void ScrollThumbButtonRelease(); // 0x100197F28
	private void ScrollUpButtonDown(); // 0x100198084
	private void ScrollUpButtonUp(); // 0x100198164
	private void ScrollDownButtonDown(); // 0x100198224
	private void ScrollDownButtonUp(); // 0x100198304
	public void ScrollUpFixed(); // 0x100195860
	public void ScrollDownFixed(); // 0x100195868
	private void CheckRepeatScrollUpDownButton(); // 0x1001983F8
	public void ScrollDirection(int dir); // 0x1001983C4
	private float CalcScrollPercentOffsetButtonScrollDistance(); // 0x100198474
	private void LayoutReshaped(Vector3 dMin, Vector3 dMax); // 0x100198480
}

// Namespace: 
public sealed class Axes : Enum // TypeDefIndex: 4759
{
	// Fields
	public int value__; // 0x10
	public const Axes XAxis = 0; // 0x0
	public const Axes YAxis = 1; // 0x0

}

// Namespace: 
public class tk2dUISoundItem : tk2dUIBaseItemControl // TypeDefIndex: 4760
{
	// Fields
	public AudioClip downButtonSound; // 0x20
	public AudioClip upButtonSound; // 0x28
	public AudioClip clickButtonSound; // 0x30
	public AudioClip releaseButtonSound; // 0x38

	// Methods
	public void .ctor(); // 0x1001984B4
	private void OnEnable(); // 0x1001984BC
	private void OnDisable(); // 0x100198738
	private void PlayDownSound(); // 0x1001989B4
	private void PlayUpSound(); // 0x1001989E8
	private void PlayClickSound(); // 0x1001989F0
	private void PlayReleaseSound(); // 0x1001989F8
	private void PlaySound(AudioClip source); // 0x1001989BC
}

// Namespace: 
public class tk2dUITextInput : MonoBehaviour // TypeDefIndex: 4761
{
	// Fields
	public tk2dUIItem selectionBtn; // 0x18
	public tk2dTextMesh inputLabel; // 0x20
	public tk2dTextMesh emptyDisplayLabel; // 0x28
	public GameObject unSelectedStateGO; // 0x30
	public GameObject selectedStateGO; // 0x38
	public GameObject cursor; // 0x40
	public float fieldLength; // 0x48
	public bool onlyUpperCase; // 0x4C
	public int maxCharacterLength; // 0x50
	public string emptyDisplayText; // 0x58
	public bool isPasswordField; // 0x60
	public string passwordChar; // 0x68
	private tk2dUILayout layoutItem; // 0x70
	private bool isSelected; // 0x78
	private bool wasStartedCalled; // 0x79
	private bool wasOnAnyPressEventAttached; // 0x7A
	private TouchScreenKeyboard keyboard; // 0x80
	private bool listenForKeyboardText; // 0x88
	private bool isDisplayTextShown; // 0x89
	public Action`1<tk2dUITextInput> OnTextChange; // 0x90
	public string SendMessageOnTextChangeMethodName; // 0x98
	private string text; // 0xA0

	// Methods
	public void .ctor(); // 0x100198AD4
	public tk2dUILayout get_LayoutItem(); // 0x100198B6C
	public void set_LayoutItem(tk2dUILayout value); // 0x100198B74
	public GameObject get_SendMessageTarget(); // 0x100198D18
	public void set_SendMessageTarget(GameObject value); // 0x100198DAC
	public bool get_IsFocus(); // 0x100198E80
	public string get_Text(); // 0x100198E88
	public void set_Text(string value); // 0x100198E90
	private void Awake(); // 0x1001994E8
	private void Start(); // 0x10019953C
	private void OnEnable(); // 0x100199754
	private void OnDisable(); // 0x100199938
	public void SetFocus(); // 0x100199B94
	private void FormatTextForDisplay(string modifiedText); // 0x100198F80
	private void ListenForKeyboardTextUpdate(); // 0x100199D94
	private void InputSelected(); // 0x100199BA4
	private IEnumerator TouchScreenKeyboardLoop(); // 0x10019A03C
	private void InputDeselected(); // 0x10019A0B0
	private void AnyPress(); // 0x10019A1C4
	private void SetState(); // 0x1001994EC
	private void SetCursorPosition(); // 0x100199178
	private void ShowDisplayText(); // 0x100199660
	private void HideDisplayText(); // 0x100199D24
	private void LayoutReshaped(Vector3 dMin, Vector3 dMax); // 0x10019A298
}

// Namespace: 
private sealed class <TouchScreenKeyboardLoop>c__IteratorA1 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4762
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal tk2dUITextInput <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10019A0A8
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10019A33C
	private object System.Collections.IEnumerator.get_Current(); // 0x10019A344
	public bool MoveNext(); // 0x10019A34C
	public void Dispose(); // 0x10019A440
	public void Reset(); // 0x10019A44C
}

// Namespace: 
public class tk2dUIToggleButton : tk2dUIBaseItemControl // TypeDefIndex: 4763
{
	// Fields
	public GameObject offStateGO; // 0x20
	public GameObject onStateGO; // 0x28
	public bool activateOnPress; // 0x30
	private bool isOn; // 0x31
	private bool isInToggleGroup; // 0x32
	public string SendMessageOnToggleMethodName; // 0x38
	private Action`1<tk2dUIToggleButton> OnToggle; // 0x40

	// Methods
	public void .ctor(); // 0x10019A4F8
	public void add_OnToggle(Action`1<tk2dUIToggleButton> value); // 0x10019A578
	public void remove_OnToggle(Action`1<tk2dUIToggleButton> value); // 0x10019A658
	public bool get_IsOn(); // 0x10019A738
	public void set_IsOn(bool value); // 0x10019A740
	public bool get_IsInToggleGroup(); // 0x10019A810
	public void set_IsInToggleGroup(bool value); // 0x10019A818
	private void Start(); // 0x10019A820
	private void OnEnable(); // 0x10019A824
	private void OnDisable(); // 0x10019A940
	private void ButtonClick(); // 0x10019AA5C
	private void ButtonDown(); // 0x10019AB00
	private void ButtonToggle(); // 0x10019AA6C
	private void SetState(); // 0x10019A7D8
}

// Namespace: 
public class tk2dUIToggleButtonGroup : MonoBehaviour // TypeDefIndex: 4764
{
	// Fields
	private tk2dUIToggleButton[] toggleBtns; // 0x18
	public GameObject sendMessageTarget; // 0x20
	private int selectedIndex; // 0x28
	private tk2dUIToggleButton selectedToggleButton; // 0x30
	public string SendMessageOnChangeMethodName; // 0x38
	private Action`1<tk2dUIToggleButtonGroup> OnChange; // 0x40

	// Methods
	public void .ctor(); // 0x10019AB10
	public void add_OnChange(Action`1<tk2dUIToggleButtonGroup> value); // 0x10019AB88
	public void remove_OnChange(Action`1<tk2dUIToggleButtonGroup> value); // 0x10019AC68
	public tk2dUIToggleButton[] get_ToggleBtns(); // 0x10019AD48
	public int get_SelectedIndex(); // 0x10019AD50
	public void set_SelectedIndex(int value); // 0x10019AD58
	public tk2dUIToggleButton get_SelectedToggleButton(); // 0x10019ADE0
	public void set_SelectedToggleButton(tk2dUIToggleButton value); // 0x10019ADE8
	protected virtual void Awake(); // 0x10019AFE8
	protected void Setup(); // 0x10019AFEC
	public void AddNewToggleButtons(tk2dUIToggleButton[] newToggleBtns); // 0x10019B128
	private void ClearExistingToggleBtns(); // 0x10019B154
	private void SetToggleButtonUsingSelectedIndex(); // 0x10019AD70
	private void ButtonToggle(tk2dUIToggleButton toggleButton); // 0x10019ADEC
	private void SetSelectedIndexFromSelectedToggleButton(); // 0x10019B250
}

// Namespace: 
public class tk2dUIToggleControl : tk2dUIToggleButton // TypeDefIndex: 4765
{
	// Fields
	public tk2dTextMesh descriptionTextMesh; // 0x48

	// Methods
	public void .ctor(); // 0x10019B32C
}

// Namespace: 
public class tk2dUITweenItem : tk2dUIBaseItemControl // TypeDefIndex: 4766
{
	// Fields
	private Vector3 onUpScale; // 0x20
	public Vector3 onDownScale; // 0x2C
	public float tweenDuration; // 0x38
	public bool canButtonBeHeldDown; // 0x3C
	private bool useOnReleaseInsteadOfOnUp; // 0x3D
	private bool internalTweenInProgress; // 0x3E
	private Vector3 tweenTargetScale; // 0x40
	private Vector3 tweenStartingScale; // 0x4C
	private float tweenTimeElapsed; // 0x58

	// Methods
	public void .ctor(); // 0x10019B864
	public bool get_UseOnReleaseInsteadOfOnUp(); // 0x10019B900
	private void Awake(); // 0x10019B908
	private void OnEnable(); // 0x10019B944
	private void OnDisable(); // 0x10019BA98
	private void ButtonDown(); // 0x10019BBE4
	private void ButtonUp(); // 0x10019BD18
	private IEnumerator ScaleTween(); // 0x10019BCAC
	public void InternalSetUseOnReleaseInsteadOfOnUp(bool state); // 0x10019BDCC
}

// Namespace: 
private sealed class <ScaleTween>c__IteratorA2 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 4767
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18
	internal tk2dUITweenItem <>f__this; // 0x20

	// Methods
	public void .ctor(); // 0x10019BDC4
	private object System.Collections.Generic.IEnumerator<object>.get_Current(); // 0x10019BDD4
	private object System.Collections.IEnumerator.get_Current(); // 0x10019BDDC
	public bool MoveNext(); // 0x10019BDE4
	public void Dispose(); // 0x10019C004
	public void Reset(); // 0x10019C010
}

// Namespace: 
public class tk2dUIUpDownButton : tk2dUIBaseItemControl // TypeDefIndex: 4768
{
	// Fields
	public GameObject upStateGO; // 0x20
	public GameObject downStateGO; // 0x28
	private bool useOnReleaseInsteadOfOnUp; // 0x30
	private bool isDown; // 0x31

	// Methods
	public void .ctor(); // 0x10019C064
	public bool get_UseOnReleaseInsteadOfOnUp(); // 0x10019C06C
	private void Start(); // 0x10019C074
	private void OnEnable(); // 0x10019C0B0
	private void OnDisable(); // 0x10019C1F4
	private void ButtonUp(); // 0x10019C338
	private void ButtonDown(); // 0x10019C340
	private void SetState(); // 0x10019C078
	public void InternalSetUseOnReleaseInsteadOfOnUp(bool state); // 0x10019C34C
}

// Namespace: 
public class tk2dUIUpDownHoverButton : tk2dUIBaseItemControl // TypeDefIndex: 4769
{
	// Fields
	public GameObject upStateGO; // 0x20
	public GameObject downStateGO; // 0x28
	public GameObject hoverOverStateGO; // 0x30
	private bool useOnReleaseInsteadOfOnUp; // 0x38
	private bool isDown; // 0x39
	private bool isHover; // 0x3A
	public string SendMessageOnToggleOverMethodName; // 0x40
	private Action`1<tk2dUIUpDownHoverButton> OnToggleOver; // 0x48

	// Methods
	public void .ctor(); // 0x10019C354
	public void add_OnToggleOver(Action`1<tk2dUIUpDownHoverButton> value); // 0x100189148
	public void remove_OnToggleOver(Action`1<tk2dUIUpDownHoverButton> value); // 0x100189C6C
	public bool get_UseOnReleaseInsteadOfOnUp(); // 0x10019C3CC
	public bool get_IsOver(); // 0x100189974
	public void set_IsOver(bool value); // 0x100189618
	private void Start(); // 0x10019C4B4
	private void OnEnable(); // 0x10019C4B8
	private void OnDisable(); // 0x10019C668
	private void ButtonUp(); // 0x10019C818
	private void ButtonDown(); // 0x10019C898
	private void ButtonHoverOver(); // 0x10019C91C
	private void ButtonHoverOut(); // 0x10019C9A0
	public void SetState(); // 0x10019C3D4
	public void InternalSetUseOnReleaseInsteadOfOnUp(bool state); // 0x10019CA20
}

// Namespace: 
public class tk2dUIAudioManager : MonoBehaviour // TypeDefIndex: 4770
{
	// Fields
	private static tk2dUIAudioManager instance; // 0x0
	private AudioSource audioSrc; // 0x18

	// Methods
	public void .ctor(); // 0x100186194
	public static tk2dUIAudioManager get_Instance(); // 0x10018619C
	private void Awake(); // 0x10018634C
	private void Setup(); // 0x10018645C
	public void Play(AudioClip clip); // 0x100186584
}

// Namespace: 
public class tk2dUICamera : MonoBehaviour // TypeDefIndex: 4771
{
	// Fields
	private LayerMask raycastLayerMask; // 0x18

	// Methods
	public void .ctor(); // 0x10018689C
	public void AssignRaycastLayerMask(LayerMask mask); // 0x1001868D4
	public LayerMask get_FilteredMask(); // 0x1001868DC
	public Camera get_HostCamera(); // 0x100186968
	private void OnEnable(); // 0x1001869B8
	private void OnDisable(); // 0x100186B40
}

// Namespace: 
public class tk2dUIItem : MonoBehaviour // TypeDefIndex: 4772
{
	// Fields
	public GameObject sendMessageTarget; // 0x18
	public string SendMessageOnDownMethodName; // 0x20
	public string SendMessageOnUpMethodName; // 0x28
	public string SendMessageOnClickMethodName; // 0x30
	public string SendMessageOnReleaseMethodName; // 0x38
	private bool isChildOfAnotherUIItem; // 0x40
	public bool registerPressFromChildren; // 0x41
	public bool isHoverEnabled; // 0x42
	public Transform[] editorExtraBounds; // 0x48
	public Transform[] editorIgnoreBounds; // 0x50
	private bool isPressed; // 0x58
	private bool isHoverOver; // 0x59
	private tk2dUITouch touch; // 0x5C
	private tk2dUIItem parentUIItem; // 0x78
	private Action OnDown; // 0x80
	private Action OnUp; // 0x88
	private Action OnClick; // 0x90
	private Action OnRelease; // 0x98
	private Action OnHoverOver; // 0xA0
	private Action OnHoverOut; // 0xA8
	private Action`1<tk2dUIItem> OnDownUIItem; // 0xB0
	private Action`1<tk2dUIItem> OnUpUIItem; // 0xB8
	private Action`1<tk2dUIItem> OnClickUIItem; // 0xC0
	private Action`1<tk2dUIItem> OnReleaseUIItem; // 0xC8
	private Action`1<tk2dUIItem> OnHoverOverUIItem; // 0xD0
	private Action`1<tk2dUIItem> OnHoverOutUIItem; // 0xD8

	// Methods
	public void .ctor(); // 0x10018A638
	public void add_OnDown(Action value); // 0x100186D7C
	public void remove_OnDown(Action value); // 0x10018710C
	public void add_OnUp(Action value); // 0x10018A6FC
	public void remove_OnUp(Action value); // 0x10018A7DC
	public void add_OnClick(Action value); // 0x100187F80
	public void remove_OnClick(Action value); // 0x100188134
	public void add_OnRelease(Action value); // 0x100186E5C
	public void remove_OnRelease(Action value); // 0x1001871EC
	public void add_OnHoverOver(Action value); // 0x10018A18C
	public void remove_OnHoverOver(Action value); // 0x10018A468
	public void add_OnHoverOut(Action value); // 0x10018A26C
	public void remove_OnHoverOut(Action value); // 0x10018A548
	public void add_OnDownUIItem(Action`1<tk2dUIItem> value); // 0x10018A8BC
	public void remove_OnDownUIItem(Action`1<tk2dUIItem> value); // 0x10018A99C
	public void add_OnUpUIItem(Action`1<tk2dUIItem> value); // 0x10018AA7C
	public void remove_OnUpUIItem(Action`1<tk2dUIItem> value); // 0x10018AB5C
	public void add_OnClickUIItem(Action`1<tk2dUIItem> value); // 0x10018AC3C
	public void remove_OnClickUIItem(Action`1<tk2dUIItem> value); // 0x10018AD1C
	public void add_OnReleaseUIItem(Action`1<tk2dUIItem> value); // 0x10018ADFC
	public void remove_OnReleaseUIItem(Action`1<tk2dUIItem> value); // 0x10018AEDC
	public void add_OnHoverOverUIItem(Action`1<tk2dUIItem> value); // 0x10018AFBC
	public void remove_OnHoverOverUIItem(Action`1<tk2dUIItem> value); // 0x10018B09C
	public void add_OnHoverOutUIItem(Action`1<tk2dUIItem> value); // 0x10018B17C
	public void remove_OnHoverOutUIItem(Action`1<tk2dUIItem> value); // 0x10018B25C
	private void Awake(); // 0x10018B33C
	private void Start(); // 0x10018B390
	public bool get_IsPressed(); // 0x10018B4B8
	public tk2dUITouch get_Touch(); // 0x1001877B4
	public tk2dUIItem get_ParentUIItem(); // 0x10018B4C0
	public void UpdateParent(); // 0x10018B36C
	public void ManuallySetParent(tk2dUIItem newParentUIItem); // 0x10018B5D0
	public void RemoveParent(); // 0x10018B5D8
	public bool Press(tk2dUITouch touch); // 0x10018B5E0
	public bool Press(tk2dUITouch touch, tk2dUIItem sentFromChild); // 0x10018B614
	public void UpdateTouch(tk2dUITouch touch); // 0x10018B868
	private void DoSendMessage(string methodName); // 0x10018B79C
	public void Release(); // 0x10018B944
	public void CurrentOverUIItem(tk2dUIItem overUIItem); // 0x10018BA8C
	public bool CheckIsUIItemChildOfMe(tk2dUIItem uiItem); // 0x10018BBC8
	public void Exit(); // 0x10018BCD4
	public bool HoverOver(tk2dUIItem prevHover); // 0x10018BD60
	public void HoverOut(tk2dUIItem currHoverButton); // 0x10018BEC4
	private tk2dUIItem GetParentUIItem(); // 0x10018B4C8
	public void SimulateClick(); // 0x10018C034
	public void InternalSetIsChildOfAnotherUIItem(bool state); // 0x10018C1D8
	public bool InternalGetIsChildOfAnotherUIItem(); // 0x10018C1E0
}

// Namespace: 
public class tk2dUILayoutItem // TypeDefIndex: 4773
{
	// Fields
	public tk2dBaseSprite sprite; // 0x10
	public tk2dUIMask UIMask; // 0x18
	public tk2dUILayout layout; // 0x20
	public GameObject gameObj; // 0x28
	public bool snapLeft; // 0x30
	public bool snapRight; // 0x31
	public bool snapTop; // 0x32
	public bool snapBottom; // 0x33
	public bool fixedSize; // 0x34
	public float fillPercentage; // 0x38
	public float sizeProportion; // 0x3C
	public bool inLayoutList; // 0x40
	public int childDepth; // 0x44
	public Vector3 oldPos; // 0x48

	// Methods
	public void .ctor(); // 0x10018EB2C
	public static tk2dUILayoutItem FixedSizeLayoutItem(); // 0x10018EB70
}

// Namespace: 
public class tk2dUILayout : MonoBehaviour // TypeDefIndex: 4774
{
	// Fields
	public Vector3 bMin; // 0x18
	public Vector3 bMax; // 0x24
	public List`1<tk2dUILayoutItem> layoutItems; // 0x30
	public bool autoResizeCollider; // 0x38
	private Action`2<Vector3, Vector3> OnReshape; // 0x40

	// Methods
	public void .ctor(); // 0x10018C1E8
	public void add_OnReshape(Action`2<Vector3, Vector3> value); // 0x10018C2C4
	public void remove_OnReshape(Action`2<Vector3, Vector3> value); // 0x10018C3A4
	public int get_ItemCount(); // 0x10018C484
	private void Reset(); // 0x10018C4DC
	public virtual void Reshape(Vector3 dMin, Vector3 dMax, bool updateChildren); // 0x10018C864
	public void SetBounds(Vector3 pMin, Vector3 pMax); // 0x10018D9AC
	public Vector3 GetMinBounds(); // 0x10018DB04
	public Vector3 GetMaxBounds(); // 0x10018DB88
	public void Refresh(); // 0x10018DC0C
}

// Namespace: 
public abstract class tk2dUILayoutContainer : tk2dUILayout // TypeDefIndex: 4775
{
	// Fields
	protected Vector2 innerSize; // 0x48
	private Action OnChangeContent; // 0x50

	// Methods
	protected void .ctor(); // 0x10018DCBC
	public void add_OnChangeContent(Action value); // 0x10018DCF0
	public void remove_OnChangeContent(Action value); // 0x10018DDD0
	public Vector2 GetInnerSize(); // 0x10018DEB0
	protected abstract void DoChildLayout(); // 0
	public override void Reshape(Vector3 dMin, Vector3 dMax, bool updateChildren); // 0x10018DEB8
	public void AddLayout(tk2dUILayout layout, tk2dUILayoutItem item); // 0x10018E028
	public void AddLayoutAtIndex(tk2dUILayout layout, tk2dUILayoutItem item, int index); // 0x10018E0F0
	public void RemoveLayout(tk2dUILayout layout); // 0x10018E1C8
}

// Namespace: 
public class tk2dUILayoutContainerSizer : tk2dUILayoutContainer // TypeDefIndex: 4776
{
	// Fields
	public bool horizontal; // 0x58
	public bool expand; // 0x59
	public Vector2 margin; // 0x5C
	public float spacing; // 0x64

	// Methods
	public void .ctor(); // 0x10018E458
	protected override void DoChildLayout(); // 0x10018E4A0
}

// Namespace: 
public class tk2dUIManager : MonoBehaviour // TypeDefIndex: 4777
{
	// Fields
	private const int MAX_MULTI_TOUCH_COUNT = 5; // 0x0
	private const string MOUSE_WHEEL_AXES_NAME = "Mouse ScrollWheel"; // 0x0
	public static double version; // 0x0
	public static int releaseId; // 0x8
	private static tk2dUIManager instance; // 0x10
	private Camera uiCamera; // 0x18
	public static List`1<tk2dUICamera> allCameras; // 0x18
	private List`1<tk2dUICamera> sortedCameras; // 0x20
	public LayerMask raycastLayerMask; // 0x28
	private bool inputEnabled; // 0x2C
	public bool areHoverEventsTracked; // 0x2D
	private tk2dUIItem pressedUIItem; // 0x30
	private tk2dUIItem overUIItem; // 0x38
	private tk2dUITouch firstPressedUIItemTouch; // 0x40
	private bool checkForHovers; // 0x5C
	private bool useMultiTouch; // 0x5D
	private tk2dUITouch[] allTouches; // 0x60
	private List`1<tk2dUIItem> prevPressedUIItemList; // 0x68
	private tk2dUIItem[] pressedUIItems; // 0x70
	private int touchCounter; // 0x78
	private Vector2 mouseDownFirstPos; // 0x7C
	private tk2dUITouch primaryTouch; // 0x84
	private tk2dUITouch secondaryTouch; // 0xA0
	private tk2dUITouch resultTouch; // 0xBC
	private tk2dUIItem hitUIItem; // 0xD8
	private RaycastHit hit; // 0xE0
	private Ray ray; // 0x110
	private tk2dUITouch currTouch; // 0x128
	private tk2dUIItem currPressedItem; // 0x148
	private tk2dUIItem prevPressedItem; // 0x150
	private Action OnAnyPress; // 0x158
	private Action OnInputUpdate; // 0x160
	private Action`1<float> OnScrollWheelChange; // 0x168
	private static Comparison`1<tk2dUICamera> <>f__am$cache1F; // 0x20

	// Methods
	public void .ctor(); // 0x10018EC04
	private static void .cctor(); // 0x10018EE00
	public void add_OnAnyPress(Action value); // 0x10018EE88
	public void remove_OnAnyPress(Action value); // 0x10018EF68
	public void add_OnInputUpdate(Action value); // 0x100187AE8
	public void remove_OnInputUpdate(Action value); // 0x100187540
	public void add_OnScrollWheelChange(Action`1<float> value); // 0x10018F048
	public void remove_OnScrollWheelChange(Action`1<float> value); // 0x10018F128
	public static tk2dUIManager get_Instance(); // 0x100187334
	public static tk2dUIManager get_Instance__NoCreate(); // 0x1001872CC
	public Camera get_UICamera(); // 0x10018F208
	public void set_UICamera(Camera value); // 0x10018F210
	public Camera GetUICameraForControl(GameObject go); // 0x1001877D8
	public static void RegisterCamera(tk2dUICamera cam); // 0x100186ABC
	public static void UnregisterCamera(tk2dUICamera cam); // 0x100186BA4
	public bool get_InputEnabled(); // 0x10018F218
	public void set_InputEnabled(bool value); // 0x10018F220
	public tk2dUIItem get_PressedUIItem(); // 0x100190918
	public tk2dUIItem[] get_PressedUIItems(); // 0x10019095C
	public bool get_UseMultiTouch(); // 0x100190964
	public void set_UseMultiTouch(bool value); // 0x10019096C
	private void SortCameras(); // 0x10018F280
	private void Awake(); // 0x1001909CC
	private void HookUpLegacyCamera(Camera cam); // 0x100190CCC
	private void Start(); // 0x100190E48
	private void Setup(); // 0x100190E38
	private void Update(); // 0x100190F4C
	private void CheckInputs(); // 0x10018FDEC
	private void CheckMultiTouchInputs(); // 0x10018F4A0
	private tk2dUIItem RaycastForUIItem(Vector2 screenPos); // 0x100191288
	public void OverrideClearAllChildrenPresses(tk2dUIItem item); // 0x100191440
	private static int <SortCameras>m__18F(tk2dUICamera a, tk2dUICamera b); // 0x1001915B0
}

// Namespace: 
public class tk2dUIMask : MonoBehaviour // TypeDefIndex: 4778
{
	// Fields
	public OnEventDgt OnMaskBuild; // 0x18
	public Anchor anchor; // 0x20
	public Vector2 size; // 0x24
	public float depth; // 0x2C
	public bool createBoxCollider; // 0x30
	private MeshFilter _thisMeshFilter; // 0x38
	private BoxCollider _thisBoxCollider; // 0x40
	private static readonly Vector2[] uv; // 0x0
	private static readonly int[] indices; // 0x8

	// Methods
	public void .ctor(); // 0x10019165C
	private static void .cctor(); // 0x1001916C4
	private MeshFilter get_ThisMeshFilter(); // 0x100191860
	private BoxCollider get_ThisBoxCollider(); // 0x1001918FC
	private void Awake(); // 0x100191998
	private void OnDestroy(); // 0x100191C9C
	private Mesh FillMesh(Mesh mesh); // 0x100191D84
	private void OnDrawGizmosSelected(); // 0x1001921E4
	public void Build(); // 0x10019199C
	public void ReshapeBounds(Vector3 dMin, Vector3 dMax); // 0x10018D650
}

// Namespace: 
public sealed class OnEventDgt : MulticastDelegate // TypeDefIndex: 4779
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1001924FC
	public virtual void Invoke(); // 0x10019246C
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100192518
	public virtual void EndInvoke(IAsyncResult result); // 0x100192578
}

// Namespace: 
public class tk2dUISpriteAnimator : tk2dSpriteAnimator // TypeDefIndex: 4780
{
	// Methods
	public void .ctor(); // 0x100198A00
	public override void LateUpdate(); // 0x100198A68
}

// Namespace: 
public static class tk2dUITime // TypeDefIndex: 4781
{
	// Fields
	private static double lastRealTime; // 0x0
	private static float _deltaTime; // 0x8

	// Methods
	private static void .cctor(); // 0x10019A4A0
	public static float get_deltaTime(); // 0x100191220
	public static void Init(); // 0x100190D9C
	public static void Update(); // 0x100191058
}

// Namespace: 
public struct tk2dUITouch // TypeDefIndex: 4782
{
	// Fields
	public const int MOUSE_POINTER_FINGER_ID = 9999; // 0x0
	private TouchPhase <phase>k__BackingField; // 0x10
	private int <fingerId>k__BackingField; // 0x14
	private Vector2 <position>k__BackingField; // 0x18
	private Vector2 <deltaPosition>k__BackingField; // 0x20
	private float <deltaTime>k__BackingField; // 0x28

	// Methods
	public void .ctor(TouchPhase _phase, int _fingerId, Vector2 _position, Vector2 _deltaPosition, float _deltaTime); // 0x10019B330
	public void .ctor(Touch touch); // 0x10019B344
	public TouchPhase get_phase(); // 0x10019B380
	private void set_phase(TouchPhase value); // 0x10019B388
	public int get_fingerId(); // 0x10019B390
	private void set_fingerId(int value); // 0x10019B398
	public Vector2 get_position(); // 0x10019B3A0
	private void set_position(Vector2 value); // 0x10019B3A8
	public Vector2 get_deltaPosition(); // 0x10019B3B4
	private void set_deltaPosition(Vector2 value); // 0x10019B3BC
	public float get_deltaTime(); // 0x10019B3C8
	private void set_deltaTime(float value); // 0x10019B3D0
	public override string ToString(); // 0x10019B76C
}

// Namespace: TapjoyUnity.Internal
public sealed class TapjoyUnityInit : MonoBehaviour // TypeDefIndex: 4783
{
	// Methods
	public void .ctor(); // 0x10014E34C
	private void Awake(); // 0x10014E354
}

// Namespace: TuneSDK
public class Tune : MonoBehaviour // TypeDefIndex: 4784
{
	// Methods
	public void .ctor(); // 0x1001A5710
	public static void Init(string advertiserId, string conversionKey); // 0x1001A1EA0
	public static void Init(string advertiserId, string conversionKey, bool turnOnTMA); // 0x1001A5764
	public static void Init(string advertiserId, string conversionKey, string packageName, bool wearable); // 0x1001A57A8
	public static void CheckForDeferredDeeplink(); // 0x1001A4158
	public static void AutomateIapEventMeasurement(bool automate); // 0x1001A4180
	public static void SetDeepLink(string deepLinkUrl); // 0x1001A4C98
	public static void MeasureEvent(string eventName); // 0x1001A4540
	public static void MeasureEvent(TuneEvent tuneEvent); // 0x1001A4710
	public static void MeasureSession(); // 0x1001A1F30
	public static void SetAge(int age); // 0x1001A4900
	public static void SetAppAdTracking(bool adTrackingEnabled); // 0x1001A493C
	public static void SetDebugMode(bool debug); // 0x1001A4504
	private static void SetEventAttribute1(string eventAttribute); // 0x1001A5F08
	private static void SetEventAttribute2(string eventAttribute); // 0x1001A5F14
	private static void SetEventAttribute3(string eventAttribute); // 0x1001A5F20
	private static void SetEventAttribute4(string eventAttribute); // 0x1001A5F2C
	private static void SetEventAttribute5(string eventAttribute); // 0x1001A5F38
	private static void SetEventContentId(string eventContentId); // 0x1001A5F44
	private static void SetEventContentType(string eventContentType); // 0x1001A5F50
	private static void SetEventDate1(DateTime eventDate); // 0x1001A5F5C
	private static void SetEventDate2(DateTime eventDate); // 0x1001A5F68
	private static void SetEventLevel(int eventLevel); // 0x1001A5F74
	private static void SetEventQuantity(int eventQuantity); // 0x1001A5F80
	private static void SetEventRating(float eventRating); // 0x1001A5F8C
	private static void SetEventSearchString(string eventSearchString); // 0x1001A5F98
	public static void SetExistingUser(bool isExistingUser); // 0x1001A4978
	public static void SetFacebookEventLogging(bool enable, bool limit); // 0x1001A4114
	public static void SetFacebookUserId(string fbUserId); // 0x1001A49B4
	public static void SetGender(int gender); // 0x1001A4A00
	public static void SetGoogleUserId(string googleUserId); // 0x1001A4A3C
	public static void SetLocation(double latitude, double longitude, double altitude); // 0x1001A4A88
	public static void SetPackageName(string packageName); // 0x1001A1EE4
	public static void SetPayingUser(bool isPayingUser); // 0x1001A4AE0
	public static void SetPhoneNumber(string phoneNumber); // 0x1001A4B1C
	public static void SetShouldAutoCollectDeviceLocation(bool shouldAutoCollect); // 0x1001A4DFC
	public static void SetTwitterUserId(string twitterUserId); // 0x1001A4B68
	public static void SetUserEmail(string userEmail); // 0x1001A4C4C
	public static void SetUserId(string userId); // 0x1001A4BB4
	public static void SetUserName(string userName); // 0x1001A4C00
	public static bool GetIsPayingUser(); // 0x1001A4FD0
	public static string GetMATId(); // 0x1001A6150
	public static string GetTuneId(); // 0x1001A5004
	public static string GetOpenLogId(); // 0x1001A509C
	public static void RegisterCustomProfileString(string variableName); // 0x1001A61BC
	public static void RegisterCustomProfileString(string variableName, string defaultValue); // 0x1001A4220
	public static void RegisterCustomProfileDate(string variableName); // 0x1001A6280
	public static void RegisterCustomProfileDate(string variableName, DateTime defaultValue); // 0x1001A4264
	public static void RegisterCustomProfileNumber(string variableName); // 0x1001A63F0
	public static void RegisterCustomProfileNumber(string variableName, int defaultValue); // 0x1001A42C4
	public static void RegisterCustomProfileNumber(string variableName, double defaultValue); // 0x1001A4318
	public static void RegisterCustomProfileNumber(string variableName, float defaultValue); // 0x1001A4378
	public static void RegisterCustomProfileGeoLocation(string variableName); // 0x1001A6514
	public static void RegisterCustomProfileGeoLocation(string variableName, TuneLocation defaultValue); // 0x1001A43E0
	public static void SetCustomProfileString(string variableName, string value); // 0x1001A65D0
	public static void SetCustomProfileDate(string variableName, DateTime value); // 0x1001A6660
	public static void SetCustomProfileNumber(string variableName, int value); // 0x1001A670C
	public static void SetCustomProfileNumber(string variableName, double value); // 0x1001A6794
	public static void SetCustomProfileNumber(string variableName, float value); // 0x1001A6830
	public static void SetCustomProfileGeolocation(string variableName, TuneLocation value); // 0x1001A68CC
	public static string GetCustomProfileString(string variableName); // 0x1001A5134
	public static DateTime GetCustomProfileDate(string variableName); // 0x1001A51C0
	public static double GetCustomProfileNumber(string variableName); // 0x1001A5268
	public static TuneLocation GetCustomProfileGeolocation(string variableName); // 0x1001A5300
	public static void ClearCustomProfileVariable(string variableName); // 0x1001A6B80
	public static void ClearAllCustomProfileVariables(); // 0x1001A6BF8
	public static void RegisterPowerHook(string hookId, string friendlyName, string defaultValue); // 0x1001A41BC
	public static string GetValueForHookById(string hookId); // 0x1001A5684
	public static void SetValueForHookById(string hookId, string value); // 0x1001A6CE4
	public static void OnPowerHooksChanged(bool listenForPowerHooksChanged); // 0x1001A448C
	public static Dictionary`2<string, TunePowerHookExperimentDetails> GetPowerHookExperimentDetails(); // 0x1001A5444
	public static Dictionary`2<string, TuneInAppMessageExperimentDetails> GetInAppMessageExperimentDetails(); // 0x1001A6E38
	public static void OnFirstPlaylistDownloaded(bool listenForFirstPlaylist); // 0x1001A44C8
	public static void OnFirstPlaylistDownloaded(bool listenForFirstPlaylist, long timeout); // 0x1001A70B8
	public static void SetPushNotificationSenderId(string pushSenderId); // 0x1001A4214
	public static void SetPushNotificationRegistrationId(string registrationId); // 0x1001A7108
	public static void SetOptedOutOfPush(bool optedOutOfPush); // 0x1001A7114
	public static string GetDeviceToken(); // 0x1001A7120
	public static bool DidUserManuallyDisablePush(); // 0x1001A7194
	public static bool DidSessionStartFromTunePush(); // 0x1001A71B4
	public static TunePushInfo GetTunePushInfoForSession(); // 0x1001A7204
	public static bool IsUserInSegmentId(string segmentId); // 0x1001A7380
	public static bool IsUserInAnySegmentIds(string[] segmentIds); // 0x1001A7414
	public static void ForceSetUserInSegmentId(string segmentId, bool isInSegment); // 0x1001A74E8
	public static void SetAppleAdvertisingIdentifier(string advertiserIdentifier, bool trackingEnabled); // 0x1001A4CE4
	public static void SetAppleVendorIdentifier(string vendorIdentifier); // 0x1001A4D38
	public static void SetJailbroken(bool isJailbroken); // 0x1001A4D84
	public static void SetShouldAutoDetectJailbroken(bool isAutoDetectJailbroken); // 0x1001A4E38
	public static void SetShouldAutoCollectAppleAdvertisingIdentifier(bool shouldAutoCollect); // 0x1001A4DC0
	public static void SetShouldAutoGenerateVendorIdentifier(bool shouldAutoGenerate); // 0x1001A4E74
	public static void SetUseCookieTracking(bool useCookieTracking); // 0x1001A4EB0
	public static void SetAndroidId(string androidId); // 0x1001A75F8
	public static void SetAndroidIdMd5(string androidIdMd5); // 0x1001A7604
	public static void SetAndroidIdSha1(string androidIdSha1); // 0x1001A7610
	public static void SetAndroidIdSha256(string androidIdSha256); // 0x1001A761C
	public static void SetDeviceId(string deviceId); // 0x1001A7628
	public static void SetEmailCollection(bool collectEmail); // 0x1001A7634
	public static void SetMacAddress(string macAddress); // 0x1001A7640
	public static void SetGoogleAdvertisingId(string adId, bool isLATEnabled); // 0x1001A764C
	public static void SetCurrencyCode(string currencyCode); // 0x1001A4EEC
	public static void SetDelegate(bool enable); // 0x1001A4450
	public static void SetPreloadedApp(TunePreloadData preloadData); // 0x1001A4F84
	public static void SetTRUSTeId(string tpid); // 0x1001A4F38
	private static string GetDateTimeString(DateTime dateTime); // 0x1001A62F8
	private static DateTime GetDateTimeFromString(string dateString); // 0x1001A6A20
}

// Namespace: TuneSDK
internal class TuneExterns // TypeDefIndex: 4785
{
	// Methods
	public void .ctor(); // 0x1001A7F28
	internal static extern void TuneInit(string advertiserId, string conversionKey); // 0x1001A5718
	internal static extern void TuneInitForWearable(string advertiserId, string conversionKey, string packageName, bool wearable); // 0x1001A5808
	internal static extern void TuneCheckForDeferredDeeplink(); // 0x1001A5880
	internal static extern void TuneAutomateIapEventMeasurement(bool automate); // 0x1001A5884
	internal static extern void TuneSetFacebookEventLogging(bool enable, bool limit); // 0x1001A5FAC
	internal static extern void TuneSetDebugMode(bool enable); // 0x1001A5F00
	internal static extern void TuneSetDelegate(bool enable); // 0x1001A7684
	internal static extern void TuneSetAppAdTracking(bool enable); // 0x1001A5EF8
	internal static extern void TuneSetCurrencyCode(string currencyCode); // 0x1001A7658
	internal static extern void TuneSetPackageName(string packageName); // 0x1001A601C
	internal static extern void TuneSetPhoneNumber(string phoneNumber); // 0x1001A6050
	internal static extern void TuneSetTRUSTeId(string trusteTPID); // 0x1001A76EC
	internal static extern void TuneSetUserEmail(string userEmail); // 0x1001A60B0
	internal static extern void TuneSetUserId(string userId); // 0x1001A60DC
	internal static extern void TuneSetUserName(string userName); // 0x1001A6108
	internal static extern void TuneSetFacebookUserId(string facebookUserId); // 0x1001A5FB8
	internal static extern void TuneSetTwitterUserId(string twitterUserId); // 0x1001A6084
	internal static extern void TuneSetGoogleUserId(string googleUserId); // 0x1001A5FEC
	internal static extern void TuneSetExistingUser(bool isExisting); // 0x1001A5FA4
	internal static extern void TuneSetPayingUser(bool isPaying); // 0x1001A6048
	internal static extern void TuneSetJailbroken(bool isJailbroken); // 0x1001A75D0
	internal static extern void TuneSetShouldAutoCollectDeviceLocation(bool shouldAutoCollect); // 0x1001A607C
	internal static extern void TuneSetShouldAutoDetectJailbroken(bool shouldAutoDetect); // 0x1001A75D8
	internal static extern void TuneSetAge(int age); // 0x1001A5EF0
	internal static extern void TuneSetGender(int gender); // 0x1001A5FE4
	internal static extern void TuneSetLocation(double latitude, double longitude, double altitude); // 0x1001A6018
	internal static extern void TuneSetDeepLink(string deepLinkUrl); // 0x1001A588C
	internal static extern void TuneSetPreloadData(TunePreloadData preloadData); // 0x1001A768C
	internal static extern void TuneSetUseCookieTracking(bool useCookieTracking); // 0x1001A75F0
	internal static extern void TuneSetAppleAdvertisingIdentifier(string appleAdvertisingIdentifier, bool trackingEnabled); // 0x1001A7570
	internal static extern void TuneSetAppleVendorIdentifier(string appleVendorIdentifier); // 0x1001A75A4
	internal static extern void TuneSetShouldAutoGenerateAppleVendorIdentifier(bool shouldAutoGenerate); // 0x1001A75E8
	internal static extern void TuneSetShouldAutoCollectAppleAdvertisingIdentifier(bool shouldAutoCollect); // 0x1001A75E0
	internal static extern void TuneMeasureEventName(string eventName); // 0x1001A58B8
	internal static extern void TuneMeasureEvent(TuneEventIos tuneEvent, TuneItemIos[] eventItems, int eventItemCount, byte[] receipt, int receiptByteCount); // 0x1001A5DA8
	internal static extern void TuneMeasureSession(); // 0x1001A5EEC
	internal static extern string TuneGetTuneId(); // 0x1001A6154
	internal static extern string TuneGetOpenLogId(); // 0x1001A6188
	internal static extern bool TuneGetIsPayingUser(); // 0x1001A6134
	internal static extern void TuneRegisterCustomProfileString(string variableName); // 0x1001A6208
	internal static extern void TuneRegisterCustomProfileStringWithDefault(string variableName, string defaultValue); // 0x1001A6234
	internal static extern void TuneRegisterCustomProfileDate(string variableName); // 0x1001A62CC
	internal static extern void TuneRegisterCustomProfileDateWithDefault(string variableName, string defaultValue); // 0x1001A63A4
	internal static extern void TuneRegisterCustomProfileNumber(string variableName); // 0x1001A643C
	internal static extern void TuneRegisterCustomProfileNumberWithDefaultInt(string variableName, int defaultValue); // 0x1001A6468
	internal static extern void TuneRegisterCustomProfileNumberWithDefaultDouble(string variableName, double defaultValue); // 0x1001A649C
	internal static extern void TuneRegisterCustomProfileNumberWithDefaultFloat(string variableName, float defaultValue); // 0x1001A64D8
	internal static extern void TuneRegisterCustomProfileGeolocation(string variableName); // 0x1001A6560
	internal static extern void TuneRegisterCustomProfileGeolocationWithDefault(string variableName, double defaultLongitude, double defaultLatitude); // 0x1001A658C
	internal static extern void TuneSetCustomProfileString(string variableName, string value); // 0x1001A6614
	internal static extern void TuneSetCustomProfileDate(string variableName, string value); // 0x1001A66C0
	internal static extern void TuneSetCustomProfileNumberWithInt(string variableName, int value); // 0x1001A6760
	internal static extern void TuneSetCustomProfileNumberWithDouble(string variableName, double value); // 0x1001A67F4
	internal static extern void TuneSetCustomProfileNumberWithFloat(string variableName, float value); // 0x1001A6890
	internal static extern void TuneSetCustomProfileGeolocation(string variableName, double longitude, double latitude); // 0x1001A693C
	internal static extern string TuneGetCustomProfileString(string variableName); // 0x1001A6980
	internal static extern string TuneGetCustomProfileDate(string variableName); // 0x1001A69D0
	internal static extern string TuneGetCustomProfileNumber(string variableName); // 0x1001A6AE0
	internal static extern string TuneGetCustomProfileGeolocation(string variableName); // 0x1001A6B30
	internal static extern void TuneClearCustomProfileVariable(string variableName); // 0x1001A6BCC
	internal static extern void TuneClearAllCustomProfileVariables(); // 0x1001A6C20
	internal static extern void TuneRegisterHookWithId(string hookId, string friendlyName, string defaultValue); // 0x1001A6C24
	internal static extern string TuneGetValueForHookById(string hookId); // 0x1001A6C94
	internal static extern void TuneSetValueForHookById(string hookId, string value); // 0x1001A6D28
	internal static extern void TuneOnPowerHooksChanged(bool listenForPowerHooksChanged); // 0x1001A6D74
	internal static extern string TuneGetPowerHookVariableExperimentDetails(); // 0x1001A6D7C
	internal static extern string TuneGetInAppMessageExperimentDetails(); // 0x1001A7078
	internal static extern void TuneOnFirstPlaylistDownloaded(bool listenForFirstPlaylist); // 0x1001A70B0
	internal static extern void TuneOnFirstPlaylistDownloadedWithTimeout(bool listenForFirstPlaylist, long timeout); // 0x1001A70FC
	internal static extern bool TuneDidSessionStartFromTunePush(); // 0x1001A71E8
	internal static extern string TuneGetTuneCampaignIdForSession(); // 0x1001A72D8
	internal static extern string TuneGetTunePushIdForSession(); // 0x1001A730C
	internal static extern bool TuneIsUserInSegmentId(string segmentId); // 0x1001A73D8
	internal static extern bool TuneIsUserInAnySegmentIds(string[] segmentIds, int segmentCount); // 0x1001A7460
	internal static extern void TuneForceSetUserInSegmentId(string segmentId, bool isInSegment); // 0x1001A753C
}

// Namespace: TuneSDK
public class TuneListener : MonoBehaviour // TypeDefIndex: 4786
{
	// Methods
	public void .ctor(); // 0x1001A8364
	public void trackerDidSucceed(string data); // 0x1001A836C
	public void trackerDidFail(string error); // 0x1001A8500
	public void trackerDidEnqueueRequest(string refId); // 0x1001A8588
	public void trackerDidEnqueueUrl(string url); // 0x1001A8610
	public void trackerDidReceiveDeeplink(string url); // 0x1001A8698
	public void trackerDidFailDeeplink(string error); // 0x1001A8720
	public void onPowerHooksChanged(string empty); // 0x1001A87A8
	public void onFirstPlaylistDownloaded(string empty); // 0x1001A87F8
	public static string DecodeFrom64(string encodedString); // 0x1001A8400
}

// Namespace: 
public class TuneSample : MonoBehaviour // TypeDefIndex: 4787
{
	// Fields
	private string TUNE_ADVERTISER_ID; // 0x18
	private string TUNE_CONVERSION_KEY; // 0x20
	private string TUNE_PACKAGE_NAME; // 0x28
	private static int titleFontSize; // 0x0
	private static bool isTitleBold; // 0x4
	private Vector2 scrollPosition; // 0x30

	// Methods
	public void .ctor(); // 0x1001A1FEC
	private static void .cctor(); // 0x1001A2024
	private void Awake(); // 0x1001A2080
	private void Update(); // 0x1001A2160
	private void OnGUI(); // 0x1001A22D0
	public static string getSampleiTunesIAPReceipt(); // 0x1001A46C8
}

// Namespace: TuneSDK
public struct TuneEvent // TypeDefIndex: 4788
{
	// Fields
	public string name; // 0x10
	public Nullable`1<double> revenue; // 0x18
	public string currencyCode; // 0x28
	public string advertiserRefId; // 0x30
	public TuneItem[] eventItems; // 0x38
	public Nullable`1<int> transactionState; // 0x40
	public string receipt; // 0x48
	public string receiptSignature; // 0x50
	public string contentType; // 0x58
	public string contentId; // 0x60
	public Nullable`1<int> level; // 0x68
	public Nullable`1<int> quantity; // 0x70
	public string searchString; // 0x78
	public Nullable`1<double> rating; // 0x80
	public Nullable`1<DateTime> date1; // 0x90
	public Nullable`1<DateTime> date2; // 0xA8
	public string attribute1; // 0xC0
	public string attribute2; // 0xC8
	public string attribute3; // 0xD0
	public string attribute4; // 0xD8
	public string attribute5; // 0xE0

	// Methods
	private void .ctor(int dummy1, int dummy2); // 0x1001A790C
	public void .ctor(string name); // 0x1001A7914
}

// Namespace: TuneSDK
internal struct TuneEventIos // TypeDefIndex: 4789
{
	// Fields
	public string name; // 0x10
	public string revenue; // 0x18
	public string currencyCode; // 0x20
	public string advertiserRefId; // 0x28
	public string transactionState; // 0x30
	public string contentType; // 0x38
	public string contentId; // 0x40
	public string level; // 0x48
	public string quantity; // 0x50
	public string searchString; // 0x58
	public string rating; // 0x60
	public string date1; // 0x68
	public string date2; // 0x70
	public string attribute1; // 0x78
	public string attribute2; // 0x80
	public string attribute3; // 0x88
	public string attribute4; // 0x90
	public string attribute5; // 0x98

	// Methods
	private void .ctor(int dummy1, int dummy2); // 0x1001A7974
	public void .ctor(string name); // 0x1001A7984
	public void .ctor(TuneEvent tuneEvent); // 0x1001A79B8
}

// Namespace: TuneSDK
public struct TuneItem // TypeDefIndex: 4790
{
	// Fields
	public string name; // 0x10
	public Nullable`1<double> unitPrice; // 0x18
	public Nullable`1<int> quantity; // 0x28
	public Nullable`1<double> revenue; // 0x30
	public string attribute1; // 0x40
	public string attribute2; // 0x48
	public string attribute3; // 0x50
	public string attribute4; // 0x58
	public string attribute5; // 0x60

	// Methods
	public void .ctor(string name); // 0x1001A8254
}

// Namespace: TuneSDK
internal struct TuneItemIos // TypeDefIndex: 4791
{
	// Fields
	public string name; // 0x10
	public double unitPrice; // 0x18
	public int quantity; // 0x20
	public double revenue; // 0x28
	public string attribute1; // 0x30
	public string attribute2; // 0x38
	public string attribute3; // 0x40
	public string attribute4; // 0x48
	public string attribute5; // 0x50

	// Methods
	public void .ctor(string name); // 0x1001A8290
	public void .ctor(TuneItem tuneItem); // 0x1001A82A8
}

// Namespace: TuneSDK
public struct TunePreloadData // TypeDefIndex: 4792
{
	// Fields
	public string advertiserSubAd; // 0x10
	public string advertiserSubAdgroup; // 0x18
	public string advertiserSubCampaign; // 0x20
	public string advertiserSubKeyword; // 0x28
	public string advertiserSubPublisher; // 0x30
	public string advertiserSubSite; // 0x38
	public string agencyId; // 0x40
	public string offerId; // 0x48
	public string publisherId; // 0x50
	public string publisherReferenceId; // 0x58
	public string publisherSub1; // 0x60
	public string publisherSub2; // 0x68
	public string publisherSub3; // 0x70
	public string publisherSub4; // 0x78
	public string publisherSub5; // 0x80
	public string publisherSubAd; // 0x88
	public string publisherSubAdgroup; // 0x90
	public string publisherSubCampaign; // 0x98
	public string publisherSubKeyword; // 0xA0
	public string publisherSubPublisher; // 0xA8
	public string publisherSubSite; // 0xB0

	// Methods
	public void .ctor(string publisherId); // 0x1001A88FC
}

// Namespace: TuneSDK
public class TuneLocation // TypeDefIndex: 4793
{
	// Fields
	public double altitude; // 0x10
	public double latitude; // 0x18
	public double longitude; // 0x20

	// Methods
	public void .ctor(); // 0x1001A43D8
}

// Namespace: TuneSDK
public class TuneExperimentDetails // TypeDefIndex: 4794
{
	// Fields
	public string experimentId; // 0x10
	public string experimentName; // 0x18
	public string experimentType; // 0x20
	public string currentVariantId; // 0x28
	public string currentVariantName; // 0x30
	public string currentVariantLetter; // 0x38

	// Methods
	public void .ctor(AndroidJavaObject experimentDetails); // 0x1001A7CD8
	public void .ctor(TuneExperimentDetailsIos experimentDetails); // 0x1001A7EB8
}

// Namespace: TuneSDK
public class TunePowerHookExperimentDetails : TuneExperimentDetails // TypeDefIndex: 4795
{
	// Fields
	public bool isRunning; // 0x40

	// Methods
	public void .ctor(AndroidJavaObject experimentDetails); // 0x1001A8848
	public void .ctor(TunePowerHookExperimentDetailsIos experimentDetails); // 0x1001A6DB0
}

// Namespace: TuneSDK
public class TuneInAppMessageExperimentDetails : TuneExperimentDetails // TypeDefIndex: 4796
{
	// Methods
	public void .ctor(AndroidJavaObject experimentDetails); // 0x1001A8248
	public void .ctor(TuneInAppMessageExperimentDetailsIos experimentDetails); // 0x1001A70AC
}

// Namespace: TuneSDK
public class TuneSerializablePowerHookDictionaryIos // TypeDefIndex: 4797
{
	// Fields
	public string[] keys; // 0x10
	public TunePowerHookExperimentDetailsIos[] values; // 0x18

	// Methods
	public void .ctor(); // 0x1001A8A48
}

// Namespace: TuneSDK
public class TuneSerializableInAppMessageDictionaryIos // TypeDefIndex: 4798
{
	// Fields
	public string[] keys; // 0x10
	public TuneInAppMessageExperimentDetailsIos[] values; // 0x18

	// Methods
	public void .ctor(); // 0x1001A8A40
}

// Namespace: TuneSDK
public class TuneExperimentDetailsIos // TypeDefIndex: 4799
{
	// Fields
	public string type; // 0x10
	public string id; // 0x18
	public string name; // 0x20
	public string experiment_end_date; // 0x28
	public string experiment_start_date; // 0x30
	public Variation current_variation; // 0x38

	// Methods
	public void .ctor(); // 0x1001A7F20
}

// Namespace: TuneSDK
public class TunePowerHookExperimentDetailsIos : TuneExperimentDetailsIos // TypeDefIndex: 4800
{
	// Fields
	public string is_running; // 0x40

	// Methods
	public void .ctor(); // 0x1001A88F4
}

// Namespace: TuneSDK
public class TuneInAppMessageExperimentDetailsIos : TuneExperimentDetailsIos // TypeDefIndex: 4801
{
	// Methods
	public void .ctor(); // 0x1001A824C
}

// Namespace: TuneSDK
public class Variation // TypeDefIndex: 4802
{
	// Fields
	public string id; // 0x10
	public string name; // 0x18
	public string letter; // 0x20

	// Methods
	public void .ctor(); // 0x1001A8A50
}

// Namespace: TuneSDK
public class TunePushInfo // TypeDefIndex: 4803
{
	// Fields
	public string campaignId; // 0x10
	public string pushId; // 0x18
	public Dictionary`2<string, string> extrasPayload; // 0x20

	// Methods
	public void .ctor(string campaignId, string pushId, Dictionary`2<string, string> extrasPayload); // 0x1001A7340
}

// Namespace: 
public class UniAndroidPermission : MonoBehaviour // TypeDefIndex: 4804
{
	// Fields
	private static Action permitCallBack; // 0x0
	private static Action`1<bool> notPermitCallBack; // 0x8
	public static UniAndroidPermission Current; // 0x10

	// Methods
	public void .ctor(); // 0x1001B4448
	public void Awake(); // 0x1001B4450
	public static bool IsPermitted(AndroidPermission permission); // 0x1001B45AC
	public static void RequestPremission(AndroidPermission permission, optional Action onPermit, optional Action`1<bool> notPermit); // 0x1001B45B4
	private static string GetPermittionStr(AndroidPermission permittion); // 0x1001B45B8
	private void OnPermit(); // 0x1001B4690
	private void NotPermit(); // 0x1001B476C
	private void NotPermitAlways(); // 0x1001B4804
	private void ResetCallBacks(); // 0x1001B471C
}

// Namespace: 
public sealed class AndroidPermission : Enum // TypeDefIndex: 4805
{
	// Fields
	public int value__; // 0x10
	public const AndroidPermission ACCESS_COARSE_LOCATION = 0; // 0x0
	public const AndroidPermission ACCESS_FINE_LOCATION = 1; // 0x0
	public const AndroidPermission ADD_VOICEMAIL = 2; // 0x0
	public const AndroidPermission BODY_SENSORS = 3; // 0x0
	public const AndroidPermission CALL_PHONE = 4; // 0x0
	public const AndroidPermission CAMERA = 5; // 0x0
	public const AndroidPermission GET_ACCOUNTS = 6; // 0x0
	public const AndroidPermission PROCESS_OUTGOING_CALLS = 7; // 0x0
	public const AndroidPermission READ_CALENDAR = 8; // 0x0
	public const AndroidPermission READ_CALL_LOG = 9; // 0x0
	public const AndroidPermission READ_CONTACTS = 10; // 0x0
	public const AndroidPermission READ_EXTERNAL_STORAGE = 11; // 0x0
	public const AndroidPermission READ_PHONE_STATE = 12; // 0x0
	public const AndroidPermission READ_SMS = 13; // 0x0
	public const AndroidPermission RECEIVE_MMS = 14; // 0x0
	public const AndroidPermission RECEIVE_SMS = 15; // 0x0
	public const AndroidPermission RECEIVE_WAP_PUSH = 16; // 0x0
	public const AndroidPermission RECORD_AUDIO = 17; // 0x0
	public const AndroidPermission SEND_SMS = 18; // 0x0
	public const AndroidPermission USE_SIP = 19; // 0x0
	public const AndroidPermission WRITE_CALENDAR = 20; // 0x0
	public const AndroidPermission WRITE_CALL_LOG = 21; // 0x0
	public const AndroidPermission WRITE_CONTACTS = 22; // 0x0
	public const AndroidPermission WRITE_EXTERNAL_STORAGE = 23; // 0x0

}

// Namespace: GooglePlayGames.BasicApi.SavedGame
public sealed class ConflictCallback : MulticastDelegate // TypeDefIndex: 4806
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10026AA34
	public virtual void Invoke(IConflictResolver resolver, ISavedGameMetadata original, byte[] originalData, ISavedGameMetadata unmerged, byte[] unmergedData); // 0x10026AA44
	public virtual IAsyncResult BeginInvoke(IConflictResolver resolver, ISavedGameMetadata original, byte[] originalData, ISavedGameMetadata unmerged, byte[] unmergedData, AsyncCallback callback, object object); // 0x10026AB50
	public virtual void EndInvoke(IAsyncResult result); // 0x10026ABB0
}

// Namespace: 
internal sealed class AdSystemOnBannersOpen : MulticastDelegate // TypeDefIndex: 4807
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000493EC
	public virtual void Invoke(IntPtr listener, int provider); // 0x1000574A8
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x10005754C
	public virtual void EndInvoke(IAsyncResult result); // 0x100057620
}

// Namespace: 
internal sealed class AdSystemOnBannersClose : MulticastDelegate // TypeDefIndex: 4808
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000493FC
	public virtual void Invoke(IntPtr listener, int provider); // 0x10005701C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x1000570C0
	public virtual void EndInvoke(IAsyncResult result); // 0x100057194
}

// Namespace: 
internal sealed class AdSystemOnBannersLoaded : MulticastDelegate // TypeDefIndex: 4809
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004940C
	public virtual void Invoke(IntPtr listener, int provider); // 0x1000571A0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x100057244
	public virtual void EndInvoke(IAsyncResult result); // 0x100057318
}

// Namespace: 
internal sealed class AdSystemOnBannersLoadFailed : MulticastDelegate // TypeDefIndex: 4810
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004941C
	public virtual void Invoke(IntPtr listener, int provider); // 0x100057324
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x1000573C8
	public virtual void EndInvoke(IAsyncResult result); // 0x10005749C
}

// Namespace: 
internal sealed class AdSystemOnCommunicatorResponseReceived : MulticastDelegate // TypeDefIndex: 4811
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004A110
	public virtual void Invoke(IntPtr listener); // 0x100057774
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x1000577F8
	public virtual void EndInvoke(IAsyncResult result); // 0x1000578B0
}

// Namespace: 
internal sealed class AdSystemOnCommunicatorResponseReceiveFailed : MulticastDelegate // TypeDefIndex: 4812
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004A120
	public virtual void Invoke(IntPtr listener); // 0x1000578BC
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x100057940
	public virtual void EndInvoke(IAsyncResult result); // 0x1000579F8
}

// Namespace: 
internal sealed class AdSystemOnCommunicatorDeviceIdLoaded : MulticastDelegate // TypeDefIndex: 4813
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004A130
	public virtual void Invoke(IntPtr listener); // 0x10005762C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x1000576B0
	public virtual void EndInvoke(IAsyncResult result); // 0x100057768
}

// Namespace: 
internal sealed class AdSystemOnDlcListUpdated : MulticastDelegate // TypeDefIndex: 4814
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B114
	public virtual void Invoke(IntPtr listener); // 0x100058724
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x1000587A8
	public virtual void EndInvoke(IAsyncResult result); // 0x100058860
}

// Namespace: 
internal sealed class AdSystemOnDlcListLoadedFromCache : MulticastDelegate // TypeDefIndex: 4815
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B124
	public virtual void Invoke(IntPtr listener); // 0x1000585DC
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x100058660
	public virtual void EndInvoke(IAsyncResult result); // 0x100058718
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateStart : MulticastDelegate // TypeDefIndex: 4816
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B134
	public virtual void Invoke(IntPtr listener, int id, long size); // 0x1000580F0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, long size, AsyncCallback callback, object object); // 0x1000581A8
	public virtual void EndInvoke(IAsyncResult result); // 0x100058298
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateProgress : MulticastDelegate // TypeDefIndex: 4817
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B144
	public virtual void Invoke(IntPtr listener, int id, long current, long total); // 0x100057F0C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, long current, long total, AsyncCallback callback, object object); // 0x100057FE4
	public virtual void EndInvoke(IAsyncResult result); // 0x1000580E4
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateComplete : MulticastDelegate // TypeDefIndex: 4818
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B154
	public virtual void Invoke(IntPtr listener, int id, string path); // 0x100057B88
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, string path, AsyncCallback callback, object object); // 0x100057C78
	public virtual void EndInvoke(IAsyncResult result); // 0x100057D58
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateCanceled : MulticastDelegate // TypeDefIndex: 4819
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B164
	public virtual void Invoke(IntPtr listener, int id); // 0x100057A04
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, AsyncCallback callback, object object); // 0x100057AA8
	public virtual void EndInvoke(IAsyncResult result); // 0x100057B7C
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateFailed : MulticastDelegate // TypeDefIndex: 4820
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B174
	public virtual void Invoke(IntPtr listener, int id, int error); // 0x100057D64
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, int error, AsyncCallback callback, object object); // 0x100057E1C
	public virtual void EndInvoke(IAsyncResult result); // 0x100057F00
}

// Namespace: 
internal sealed class AdSystemOnDlcFileUpdateUpToDate : MulticastDelegate // TypeDefIndex: 4821
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B184
	public virtual void Invoke(IntPtr listener, int id); // 0x1000582A4
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, AsyncCallback callback, object object); // 0x100058348
	public virtual void EndInvoke(IAsyncResult result); // 0x10005841C
}

// Namespace: 
internal sealed class AdSystemOnDlcIsFileUpToDate : MulticastDelegate // TypeDefIndex: 4822
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004B194
	public virtual void Invoke(IntPtr listener, int id, bool upToDate); // 0x100058428
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, bool upToDate, AsyncCallback callback, object object); // 0x1000584E0
	public virtual void EndInvoke(IAsyncResult result); // 0x1000585D0
}

// Namespace: 
internal sealed class AdSystemCreateByteArray : MulticastDelegate // TypeDefIndex: 4823
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D6B8
	public virtual IntPtr Invoke(IntPtr data, int size); // 0x10005665C
	public virtual IAsyncResult BeginInvoke(IntPtr data, int size, AsyncCallback callback, object object); // 0x100056700
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x1000567D4
}

// Namespace: 
internal sealed class AdSystemDestroyByteArray : MulticastDelegate // TypeDefIndex: 4824
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D6C8
	public virtual void Invoke(IntPtr instance); // 0x100056800
	public virtual IAsyncResult BeginInvoke(IntPtr instance, AsyncCallback callback, object object); // 0x100056884
	public virtual void EndInvoke(IAsyncResult result); // 0x10005693C
}

// Namespace: 
internal sealed class AdSystemEnumDict : MulticastDelegate // TypeDefIndex: 4825
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D668
	public virtual IntPtr Invoke(); // 0x100056A90
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100056B2C
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x100056B8C
}

// Namespace: 
internal sealed class AdSystemEnumDictAdd : MulticastDelegate // TypeDefIndex: 4826
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D678
	public virtual void Invoke(IntPtr instance, string key, int value); // 0x100056BB8
	public virtual IAsyncResult BeginInvoke(IntPtr instance, string key, int value, AsyncCallback callback, object object); // 0x100056CA8
	public virtual void EndInvoke(IAsyncResult result); // 0x100056D88
}

// Namespace: 
internal sealed class AdSystemByteArrayDict : MulticastDelegate // TypeDefIndex: 4827
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D688
	public virtual IntPtr Invoke(); // 0x100056364
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object); // 0x100056400
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x100056460
}

// Namespace: 
internal sealed class AdSystemByteArrayDictAdd : MulticastDelegate // TypeDefIndex: 4828
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D698
	public virtual void Invoke(IntPtr instance, string key, IntPtr value); // 0x10005648C
	public virtual IAsyncResult BeginInvoke(IntPtr instance, string key, IntPtr value, AsyncCallback callback, object object); // 0x10005657C
	public virtual void EndInvoke(IAsyncResult result); // 0x100056650
}

// Namespace: 
internal sealed class AdSystemDictRelease : MulticastDelegate // TypeDefIndex: 4829
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D6A8
	public virtual void Invoke(IntPtr instance); // 0x100056948
	public virtual IAsyncResult BeginInvoke(IntPtr instance, AsyncCallback callback, object object); // 0x1000569CC
	public virtual void EndInvoke(IAsyncResult result); // 0x100056A84
}

// Namespace: 
internal sealed class AdSystemStringArray : MulticastDelegate // TypeDefIndex: 4830
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005C9B8
	public virtual IntPtr Invoke(int size); // 0x10005C9C8
	public virtual IAsyncResult BeginInvoke(int size, AsyncCallback callback, object object); // 0x10005CA4C
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x10005CB04
}

// Namespace: 
internal sealed class AdSystemStringArraySet : MulticastDelegate // TypeDefIndex: 4831
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005CC88
	public virtual void Invoke(IntPtr instance, int index, string element); // 0x10005CC98
	public virtual IAsyncResult BeginInvoke(IntPtr instance, int index, string element, AsyncCallback callback, object object); // 0x10005CD88
	public virtual void EndInvoke(IAsyncResult result); // 0x10005CE68
}

// Namespace: 
internal sealed class AdSystemStringArrayRelease : MulticastDelegate // TypeDefIndex: 4832
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005CB30
	public virtual void Invoke(IntPtr instance); // 0x10005CB40
	public virtual IAsyncResult BeginInvoke(IntPtr instance, AsyncCallback callback, object object); // 0x10005CBC4
	public virtual void EndInvoke(IAsyncResult result); // 0x10005CC7C
}

// Namespace: 
internal sealed class AdSystemOnFriendsInviteFailed : MulticastDelegate // TypeDefIndex: 4833
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D608
	public virtual void Invoke(IntPtr listener, int index); // 0x100058B98
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, AsyncCallback callback, object object); // 0x100058C3C
	public virtual void EndInvoke(IAsyncResult result); // 0x100058D10
}

// Namespace: 
internal sealed class AdSystemOnFriendsInviteResponseReceived : MulticastDelegate // TypeDefIndex: 4834
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D628
	public virtual void Invoke(IntPtr listener, int index, IntPtr data); // 0x100058D1C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, IntPtr data, AsyncCallback callback, object object); // 0x100058DD4
	public virtual void EndInvoke(IAsyncResult result); // 0x100058EB8
}

// Namespace: 
internal sealed class AdSystemOnFriendsProgressFailed : MulticastDelegate // TypeDefIndex: 4835
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D618
	public virtual void Invoke(IntPtr listener, int index); // 0x100058EC4
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, AsyncCallback callback, object object); // 0x100058F68
	public virtual void EndInvoke(IAsyncResult result); // 0x10005903C
}

// Namespace: 
internal sealed class AdSystemOnFriendsProgressReceived : MulticastDelegate // TypeDefIndex: 4836
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D638
	public virtual void Invoke(IntPtr listener, int index, IntPtr progress); // 0x100059048
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, IntPtr progress, AsyncCallback callback, object object); // 0x100059100
	public virtual void EndInvoke(IAsyncResult result); // 0x1000591E4
}

// Namespace: 
internal sealed class AdSystemOnFriendsChallengersFailed : MulticastDelegate // TypeDefIndex: 4837
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D648
	public virtual void Invoke(IntPtr listener, int index); // 0x10005886C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, AsyncCallback callback, object object); // 0x100058910
	public virtual void EndInvoke(IAsyncResult result); // 0x1000589E4
}

// Namespace: 
internal sealed class AdSystemOnFriendsChallengersReceived : MulticastDelegate // TypeDefIndex: 4838
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004D658
	public virtual void Invoke(IntPtr listener, int index, IntPtr challengers); // 0x1000589F0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int index, IntPtr challengers, AsyncCallback callback, object object); // 0x100058AA8
	public virtual void EndInvoke(IAsyncResult result); // 0x100058B8C
}

// Namespace: 
internal sealed class AdSystemOnInterstitialsLoadStarted : MulticastDelegate // TypeDefIndex: 4839
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004F72C
	public virtual void Invoke(IntPtr listener, int provider); // 0x10005967C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x100059720
	public virtual void EndInvoke(IAsyncResult result); // 0x1000597F4
}

// Namespace: 
internal sealed class AdSystemOnInterstitialsLoadCompleted : MulticastDelegate // TypeDefIndex: 4840
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004F73C
	public virtual void Invoke(IntPtr listener, int provider); // 0x100059374
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x100059418
	public virtual void EndInvoke(IAsyncResult result); // 0x1000594EC
}

// Namespace: 
internal sealed class AdSystemOnInterstitialsLoadFailed : MulticastDelegate // TypeDefIndex: 4841
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004F74C
	public virtual void Invoke(IntPtr listener, int provider); // 0x1000594F8
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x10005959C
	public virtual void EndInvoke(IAsyncResult result); // 0x100059670
}

// Namespace: 
internal sealed class AdSystemOnInterstitialsShow : MulticastDelegate // TypeDefIndex: 4842
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004F75C
	public virtual void Invoke(IntPtr listener, int provider); // 0x100059800
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x1000598A4
	public virtual void EndInvoke(IAsyncResult result); // 0x100059978
}

// Namespace: 
internal sealed class AdSystemOnInterstitialsHide : MulticastDelegate // TypeDefIndex: 4843
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10004F76C
	public virtual void Invoke(IntPtr listener, int provider); // 0x1000591F0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x100059294
	public virtual void EndInvoke(IAsyncResult result); // 0x100059368
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialShow : MulticastDelegate // TypeDefIndex: 4844
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005A72C
	public virtual void Invoke(IntPtr listener); // 0x10005A73C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005A7C0
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A878
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialClose : MulticastDelegate // TypeDefIndex: 4845
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000506C8
	public virtual void Invoke(IntPtr listener, int button); // 0x100059B2C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int button, AsyncCallback callback, object object); // 0x100059BD0
	public virtual void EndInvoke(IAsyncResult result); // 0x100059CA4
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialButtonWithError : MulticastDelegate // TypeDefIndex: 4846
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000506D8
	public virtual void Invoke(IntPtr listener, int button, int error); // 0x100059984
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int button, int error, AsyncCallback callback, object object); // 0x100059A3C
	public virtual void EndInvoke(IAsyncResult result); // 0x100059B20
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialReloaded : MulticastDelegate // TypeDefIndex: 4847
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000506E8
	public virtual void Invoke(IntPtr listener); // 0x10005A3F0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005A474
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A52C
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialRemoved : MulticastDelegate // TypeDefIndex: 4848
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000506F8
	public virtual void Invoke(IntPtr listener, int reason); // 0x10005A538
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int reason, AsyncCallback callback, object object); // 0x10005A5DC
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A6B0
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialCustomShow : MulticastDelegate // TypeDefIndex: 4849
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100050708
	public virtual void Invoke(IntPtr listener); // 0x10005A2A8
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005A32C
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A3E4
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialCustomClose : MulticastDelegate // TypeDefIndex: 4850
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100050718
	public virtual void Invoke(IntPtr listener, int button); // 0x100059E58
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int button, AsyncCallback callback, object object); // 0x100059EFC
	public virtual void EndInvoke(IAsyncResult result); // 0x100059FD0
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialCustomButtonWithError : MulticastDelegate // TypeDefIndex: 4851
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100050728
	public virtual void Invoke(IntPtr listener, int button, int error); // 0x100059CB0
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int button, int error, AsyncCallback callback, object object); // 0x100059D68
	public virtual void EndInvoke(IAsyncResult result); // 0x100059E4C
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialCustomReloaded : MulticastDelegate // TypeDefIndex: 4852
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100050738
	public virtual void Invoke(IntPtr listener); // 0x100059FDC
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005A060
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A118
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentInterstitialCustomRemoved : MulticastDelegate // TypeDefIndex: 4853
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x100050748
	public virtual void Invoke(IntPtr listener, int reason); // 0x10005A124
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int reason, AsyncCallback callback, object object); // 0x10005A1C8
	public virtual void EndInvoke(IAsyncResult result); // 0x10005A29C
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentOfferwallLoaded : MulticastDelegate // TypeDefIndex: 4854
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005A884
	public virtual void Invoke(IntPtr listener, int count); // 0x10005A894
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int count, AsyncCallback callback, object object); // 0x10005A938
	public virtual void EndInvoke(IAsyncResult result); // 0x10005AA0C
}

// Namespace: 
internal sealed class AdSystemOnNordcurrentOfferwallLoadFailed : MulticastDelegate // TypeDefIndex: 4855
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005AA18
	public virtual void Invoke(IntPtr listener); // 0x10005AA28
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005AAAC
	public virtual void EndInvoke(IAsyncResult result); // 0x10005AB64
}

// Namespace: 
internal sealed class AdSystemNordcurrentOfferwallAdBuild : MulticastDelegate // TypeDefIndex: 4856
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x1000529CC
	public virtual IntPtr Invoke(int textureType, string texturePath, string link, string gameTitle, string gameDescription); // 0x100056D94
	public virtual IAsyncResult BeginInvoke(int textureType, string texturePath, string link, string gameTitle, string gameDescription, AsyncCallback callback, object object); // 0x100056F10
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x100056FF0
}

// Namespace: 
internal sealed class AdSystemOnOffersUpdate : MulticastDelegate // TypeDefIndex: 4857
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005ACC8
	public virtual void Invoke(IntPtr listener, int id, int type, int timeLeft, string data); // 0x10005ACD8
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int id, int type, int timeLeft, string data, AsyncCallback callback, object object); // 0x10005AE0C
	public virtual void EndInvoke(IAsyncResult result); // 0x10005AF10
}

// Namespace: 
internal sealed class AdSystemOnOffersUpdateNext : MulticastDelegate // TypeDefIndex: 4858
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005AF1C
	public virtual void Invoke(IntPtr listener, int type, int timeUntilStart); // 0x10005AF2C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int type, int timeUntilStart, AsyncCallback callback, object object); // 0x10005AFE4
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B0C8
}

// Namespace: 
internal sealed class AdSystemOnOffersExpired : MulticastDelegate // TypeDefIndex: 4859
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005AB70
	public virtual void Invoke(IntPtr listener); // 0x10005AB80
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005AC04
	public virtual void EndInvoke(IAsyncResult result); // 0x10005ACBC
}

// Namespace: 
internal sealed class AdSystemOnOfferwallPointsReceived : MulticastDelegate // TypeDefIndex: 4860
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B268
	public virtual void Invoke(IntPtr listener, int points, int provider); // 0x10005B278
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int points, int provider, AsyncCallback callback, object object); // 0x10005B330
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B414
}

// Namespace: 
internal sealed class AdSystemOnOfferwallShow : MulticastDelegate // TypeDefIndex: 4861
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B420
	public virtual void Invoke(IntPtr listener, int provider); // 0x10005B430
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x10005B4D4
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B5A8
}

// Namespace: 
internal sealed class AdSystemOnOfferwallHide : MulticastDelegate // TypeDefIndex: 4862
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B0D4
	public virtual void Invoke(IntPtr listener, int provider); // 0x10005B0E4
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int provider, AsyncCallback callback, object object); // 0x10005B188
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B25C
}

// Namespace: 
internal sealed class AdSystemOnPointsReceived : MulticastDelegate // TypeDefIndex: 4863
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005BA1C
	public virtual bool Invoke(IntPtr listener, string name, int count, int type); // 0x10005BA2C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, string name, int count, int type, AsyncCallback callback, object object); // 0x10005BB58
	public virtual bool EndInvoke(IAsyncResult result); // 0x10005BC48
}

// Namespace: 
internal sealed class AdSystemSavesCreateByteArray : MulticastDelegate // TypeDefIndex: 4864
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005C804
	public virtual IntPtr Invoke(IntPtr data, int size); // 0x10005C814
	public virtual IAsyncResult BeginInvoke(IntPtr data, int size, AsyncCallback callback, object object); // 0x10005C8B8
	public virtual IntPtr EndInvoke(IAsyncResult result); // 0x10005C98C
}

// Namespace: 
internal sealed class AdSystemOnSavesModuleReady : MulticastDelegate // TypeDefIndex: 4865
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005C070
	public virtual void Invoke(IntPtr listener); // 0x10005C080
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005C104
	public virtual void EndInvoke(IAsyncResult result); // 0x10005C1BC
}

// Namespace: 
internal sealed class AdSystemOnPlayerConnect : MulticastDelegate // TypeDefIndex: 4866
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B5B4
	public virtual void Invoke(IntPtr listener, string playerId); // 0x10005B5C4
	public virtual IAsyncResult BeginInvoke(IntPtr listener, string playerId, AsyncCallback callback, object object); // 0x10005B69C
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B760
}

// Namespace: 
internal sealed class AdSystemOnPlayerDisconnect : MulticastDelegate // TypeDefIndex: 4867
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B8C4
	public virtual void Invoke(IntPtr listener); // 0x10005B8D4
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005B958
	public virtual void EndInvoke(IAsyncResult result); // 0x10005BA10
}

// Namespace: 
internal sealed class AdSystemOnPlayerConnectionError : MulticastDelegate // TypeDefIndex: 4868
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005B76C
	public virtual void Invoke(IntPtr listener); // 0x10005B77C
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005B800
	public virtual void EndInvoke(IAsyncResult result); // 0x10005B8B8
}

// Namespace: 
internal sealed class AdSystemOnSavesConnectionError : MulticastDelegate // TypeDefIndex: 4869
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005BF18
	public virtual void Invoke(IntPtr listener); // 0x10005BF28
	public virtual IAsyncResult BeginInvoke(IntPtr listener, AsyncCallback callback, object object); // 0x10005BFAC
	public virtual void EndInvoke(IAsyncResult result); // 0x10005C064
}

// Namespace: 
internal sealed class AdSystemOnSavesConflict : MulticastDelegate // TypeDefIndex: 4870
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005BC74
	public virtual void Invoke(IntPtr listener, int conflictId, IntPtr conflictData, int cdsize, int conflictTimestamp, string conflictDeviceId); // 0x10005BC84
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int conflictId, IntPtr conflictData, int cdsize, int conflictTimestamp, string conflictDeviceId, AsyncCallback callback, object object); // 0x10005BDF8
	public virtual void EndInvoke(IAsyncResult result); // 0x10005BF0C
}

// Namespace: 
internal sealed class AdSystemOnSavesStateChange : MulticastDelegate // TypeDefIndex: 4871
{
	// Methods
	public void .ctor(object object, IntPtr method); // 0x10005C1C8
	public virtual void Invoke(IntPtr listener, int state); // 0x10005C1D8
	public virtual IAsyncResult BeginInvoke(IntPtr listener, int state, AsyncCallback callback, object object); // 0x10005C27C
	public virtual void EndInvoke(IAsyncResult result); // 0x10005C350
}

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 4872
{
	// Fields
	internal static $ArrayType$40 $$field-0; // 0x0
	internal static $ArrayType$20 $$field-1; // 0x28
	internal static $ArrayType$76 $$field-2; // 0x3C
	internal static $ArrayType$24 $$field-3; // 0x88
	internal static $ArrayType$24 $$field-4; // 0xA0
	internal static $ArrayType$144 $$field-5; // 0xB8
	internal static $ArrayType$144 $$field-6; // 0x148
	internal static $ArrayType$216 $$field-7; // 0x1D8
	internal static $ArrayType$96 $$field-8; // 0x2B0
	internal static $ArrayType$32 $$field-9; // 0x310
	internal static $ArrayType$32 $$field-10; // 0x330
	internal static $ArrayType$24 $$field-11; // 0x350

	// Methods
	public void .ctor(); // 0x100041C0C
}

// Namespace: 
private struct $ArrayType$40 // TypeDefIndex: 4873
{
}

// Namespace: 
private struct $ArrayType$20 // TypeDefIndex: 4874
{
}

// Namespace: 
private struct $ArrayType$76 // TypeDefIndex: 4875
{
}

// Namespace: 
private struct $ArrayType$24 // TypeDefIndex: 4876
{
}

// Namespace: 
private struct $ArrayType$144 // TypeDefIndex: 4877
{
}

// Namespace: 
private struct $ArrayType$216 // TypeDefIndex: 4878
{
}

// Namespace: 
private struct $ArrayType$96 // TypeDefIndex: 4879
{
}

// Namespace: 
private struct $ArrayType$32 // TypeDefIndex: 4880
{
}

// Namespace: 
internal class <Module> // TypeDefIndex: 4881
{
}

// Namespace: 
public class DeadTime : MonoBehaviour // TypeDefIndex: 4882
{
	// Fields
	public float deadTime; // 0x18

	// Methods
	public void .ctor(); // 0x1003529C8
	public override void Awake(); // 0x1003529D0
	public override void Main(); // 0x100352A5C
}

// Namespace: 
public class AmbientObscurance : PostEffectsBase // TypeDefIndex: 4883
{
	// Fields
	public float intensity; // 0x1C
	public float radius; // 0x20
	public int blurIterations; // 0x24
	public float blurFilterDistance; // 0x28
	public int downsample; // 0x2C
	public Texture2D rand; // 0x30
	public Shader aoShader; // 0x38
	private Material aoMaterial; // 0x40

	// Methods
	public void .ctor(); // 0x10034B174
	public override bool CheckResources(); // 0x10034B1B0
	public override void OnDisable(); // 0x10034B278
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034B328
	public override void Main(); // 0x10034B8BC
}

// Namespace: 
public sealed class AAMode : Enum // TypeDefIndex: 4884
{
	// Fields
	public int value__; // 0x10
	public const AAMode FXAA2 = 0; // 0x0
	public const AAMode FXAA3Console = 1; // 0x0
	public const AAMode FXAA1PresetA = 2; // 0x0
	public const AAMode FXAA1PresetB = 3; // 0x0
	public const AAMode NFAA = 4; // 0x0
	public const AAMode SSAA = 5; // 0x0
	public const AAMode DLAA = 6; // 0x0

}

// Namespace: 
public class AntialiasingAsPostEffect : PostEffectsBase // TypeDefIndex: 4885
{
	// Fields
	public AAMode mode; // 0x1C
	public bool showGeneratedNormals; // 0x20
	public float offsetScale; // 0x24
	public float blurRadius; // 0x28
	public float edgeThresholdMin; // 0x2C
	public float edgeThreshold; // 0x30
	public float edgeSharpness; // 0x34
	public bool dlaaSharp; // 0x38
	public Shader ssaaShader; // 0x40
	private Material ssaa; // 0x48
	public Shader dlaaShader; // 0x50
	private Material dlaa; // 0x58
	public Shader nfaaShader; // 0x60
	private Material nfaa; // 0x68
	public Shader shaderFXAAPreset2; // 0x70
	private Material materialFXAAPreset2; // 0x78
	public Shader shaderFXAAPreset3; // 0x80
	private Material materialFXAAPreset3; // 0x88
	public Shader shaderFXAAII; // 0x90
	private Material materialFXAAII; // 0x98
	public Shader shaderFXAAIII; // 0xA0
	private Material materialFXAAIII; // 0xA8

	// Methods
	public void .ctor(); // 0x10034B8C0
	public override Material CurrentAAMaterial(); // 0x10034B90C
	public override bool CheckResources(); // 0x10034B988
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034BBAC
	public override void Main(); // 0x10034C050
}

// Namespace: 
public class Bloom : PostEffectsBase // TypeDefIndex: 4886
{
	// Fields
	public TweakMode tweakMode; // 0x1C
	public BloomScreenBlendMode screenBlendMode; // 0x20
	public HDRBloomMode hdr; // 0x24
	private bool doHdr; // 0x28
	public float sepBlurSpread; // 0x2C
	public BloomQuality quality; // 0x30
	public float bloomIntensity; // 0x34
	public float bloomThreshhold; // 0x38
	public Color bloomThreshholdColor; // 0x3C
	public int bloomBlurIterations; // 0x4C
	public int hollywoodFlareBlurIterations; // 0x50
	public float flareRotation; // 0x54
	public LensFlareStyle lensflareMode; // 0x58
	public float hollyStretchWidth; // 0x5C
	public float lensflareIntensity; // 0x60
	public float lensflareThreshhold; // 0x64
	public float lensFlareSaturation; // 0x68
	public Color flareColorA; // 0x6C
	public Color flareColorB; // 0x7C
	public Color flareColorC; // 0x8C
	public Color flareColorD; // 0x9C
	public float blurWidth; // 0xAC
	public Texture2D lensFlareVignetteMask; // 0xB0
	public Shader lensFlareShader; // 0xB8
	private Material lensFlareMaterial; // 0xC0
	public Shader screenBlendShader; // 0xC8
	private Material screenBlend; // 0xD0
	public Shader blurAndFlaresShader; // 0xD8
	private Material blurAndFlaresMaterial; // 0xE0
	public Shader brightPassFilterShader; // 0xE8
	private Material brightPassFilterMaterial; // 0xF0

	// Methods
	public void .ctor(); // 0x10034C054
	public override bool CheckResources(); // 0x10034C1B0
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034C314
	private void AddTo(float intensity_, RenderTexture from, RenderTexture to); // 0x10034D514
	private void BlendFlares(RenderTexture from, RenderTexture to); // 0x10034D350
	private void BrightFilter(float thresh, RenderTexture from, RenderTexture to); // 0x10034D0A0
	private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to); // 0x10034CFD8
	private void Vignette(float amount, RenderTexture from, RenderTexture to); // 0x10034D16C
	public override void Main(); // 0x10034D5BC
}

// Namespace: 
public sealed class LensFlareStyle : Enum // TypeDefIndex: 4887
{
	// Fields
	public int value__; // 0x10
	public const LensFlareStyle Ghosting = 0; // 0x0
	public const LensFlareStyle Anamorphic = 1; // 0x0
	public const LensFlareStyle Combined = 2; // 0x0

}

// Namespace: 
public sealed class TweakMode : Enum // TypeDefIndex: 4888
{
	// Fields
	public int value__; // 0x10
	public const TweakMode Basic = 0; // 0x0
	public const TweakMode Complex = 1; // 0x0

}

// Namespace: 
public sealed class HDRBloomMode : Enum // TypeDefIndex: 4889
{
	// Fields
	public int value__; // 0x10
	public const HDRBloomMode Auto = 0; // 0x0
	public const HDRBloomMode On = 1; // 0x0
	public const HDRBloomMode Off = 2; // 0x0

}

// Namespace: 
public sealed class BloomScreenBlendMode : Enum // TypeDefIndex: 4890
{
	// Fields
	public int value__; // 0x10
	public const BloomScreenBlendMode Screen = 0; // 0x0
	public const BloomScreenBlendMode Add = 1; // 0x0

}

// Namespace: 
public sealed class BloomQuality : Enum // TypeDefIndex: 4891
{
	// Fields
	public int value__; // 0x10
	public const BloomQuality Cheap = 0; // 0x0
	public const BloomQuality High = 1; // 0x0

}

// Namespace: 
public sealed class LensflareStyle34 : Enum // TypeDefIndex: 4892
{
	// Fields
	public int value__; // 0x10
	public const LensflareStyle34 Ghosting = 0; // 0x0
	public const LensflareStyle34 Anamorphic = 1; // 0x0
	public const LensflareStyle34 Combined = 2; // 0x0

}

// Namespace: 
public sealed class TweakMode34 : Enum // TypeDefIndex: 4893
{
	// Fields
	public int value__; // 0x10
	public const TweakMode34 Basic = 0; // 0x0
	public const TweakMode34 Complex = 1; // 0x0

}

// Namespace: 
public sealed class HDRBloomMode : Enum // TypeDefIndex: 4894
{
	// Fields
	public int value__; // 0x10
	public const HDRBloomMode Auto = 0; // 0x0
	public const HDRBloomMode On = 1; // 0x0
	public const HDRBloomMode Off = 2; // 0x0

}

// Namespace: 
public sealed class BloomScreenBlendMode : Enum // TypeDefIndex: 4895
{
	// Fields
	public int value__; // 0x10
	public const BloomScreenBlendMode Screen = 0; // 0x0
	public const BloomScreenBlendMode Add = 1; // 0x0

}

// Namespace: 
public class BloomAndLensFlares : PostEffectsBase // TypeDefIndex: 4896
{
	// Fields
	public TweakMode34 tweakMode; // 0x1C
	public BloomScreenBlendMode screenBlendMode; // 0x20
	public HDRBloomMode hdr; // 0x24
	private bool doHdr; // 0x28
	public float sepBlurSpread; // 0x2C
	public float useSrcAlphaAsMask; // 0x30
	public float bloomIntensity; // 0x34
	public float bloomThreshhold; // 0x38
	public int bloomBlurIterations; // 0x3C
	public bool lensflares; // 0x40
	public int hollywoodFlareBlurIterations; // 0x44
	public LensflareStyle34 lensflareMode; // 0x48
	public float hollyStretchWidth; // 0x4C
	public float lensflareIntensity; // 0x50
	public float lensflareThreshhold; // 0x54
	public Color flareColorA; // 0x58
	public Color flareColorB; // 0x68
	public Color flareColorC; // 0x78
	public Color flareColorD; // 0x88
	public float blurWidth; // 0x98
	public Texture2D lensFlareVignetteMask; // 0xA0
	public Shader lensFlareShader; // 0xA8
	private Material lensFlareMaterial; // 0xB0
	public Shader vignetteShader; // 0xB8
	private Material vignetteMaterial; // 0xC0
	public Shader separableBlurShader; // 0xC8
	private Material separableBlurMaterial; // 0xD0
	public Shader addBrightStuffOneOneShader; // 0xD8
	private Material addBrightStuffBlendOneOneMaterial; // 0xE0
	public Shader screenBlendShader; // 0xE8
	private Material screenBlend; // 0xF0
	public Shader hollywoodFlaresShader; // 0xF8
	private Material hollywoodFlaresMaterial; // 0x100
	public Shader brightPassFilterShader; // 0x108
	private Material brightPassFilterMaterial; // 0x110

	// Methods
	public void .ctor(); // 0x10034D5C0
	public override bool CheckResources(); // 0x10034D708
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034D908
	private void AddTo(float intensity_, RenderTexture from, RenderTexture to); // 0x10034E714
	private void BlendFlares(RenderTexture from, RenderTexture to); // 0x10034E560
	private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to); // 0x10034E324
	private void Vignette(float amount, RenderTexture from, RenderTexture to); // 0x10034E448
	public override void Main(); // 0x10034E7A8
}

// Namespace: 
public class CameraMotionBlur : PostEffectsBase // TypeDefIndex: 4897
{
	// Fields
	public static int MAX_RADIUS; // 0x0
	public MotionBlurFilter filterType; // 0x1C
	public bool preview; // 0x20
	public Vector3 previewScale; // 0x24
	public float movementScale; // 0x30
	public float rotationScale; // 0x34
	public float maxVelocity; // 0x38
	public float minVelocity; // 0x3C
	public float velocityScale; // 0x40
	public float softZDistance; // 0x44
	public int velocityDownsample; // 0x48
	public LayerMask excludeLayers; // 0x4C
	private GameObject tmpCam; // 0x50
	public Shader shader; // 0x58
	public Shader dx11MotionBlurShader; // 0x60
	public Shader replacementClear; // 0x68
	private Material motionBlurMaterial; // 0x70
	private Material dx11MotionBlurMaterial; // 0x78
	public Texture2D noiseTexture; // 0x80
	public float jitter; // 0x88
	public bool showVelocity; // 0x8C
	public float showVelocityScale; // 0x90
	private Matrix4x4 currentViewProjMat; // 0x94
	private Matrix4x4 prevViewProjMat; // 0xD4
	private int prevFrameCount; // 0x114
	private bool wasActive; // 0x118
	private Vector3 prevFrameForward; // 0x11C
	private Vector3 prevFrameRight; // 0x128
	private Vector3 prevFrameUp; // 0x134
	private Vector3 prevFramePos; // 0x140

	// Methods
	public void .ctor(); // 0x10034E7AC
	private static void .cctor(); // 0x10034E88C
	private void CalculateViewProjection(); // 0x10034E8E0
	public override void Start(); // 0x10034EA54
	public override void OnEnable(); // 0x10034EAEC
	public override void OnDisable(); // 0x10034EB78
	public override bool CheckResources(); // 0x10034ECF4
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10034EE10
	public override void Remember(); // 0x100350424
	public override Camera GetTmpCam(); // 0x1003504F4
	public override void StartFrame(); // 0x1003508A8
	public override int divRoundUp(int x, int d); // 0x10035092C
	public override void Main(); // 0x10035093C
}

// Namespace: 
public sealed class MotionBlurFilter : Enum // TypeDefIndex: 4898
{
	// Fields
	public int value__; // 0x10
	public const MotionBlurFilter CameraMotion = 0; // 0x0
	public const MotionBlurFilter LocalBlur = 1; // 0x0
	public const MotionBlurFilter Reconstruction = 2; // 0x0
	public const MotionBlurFilter ReconstructionDX11 = 3; // 0x0
	public const MotionBlurFilter ReconstructionDisc = 4; // 0x0

}

// Namespace: 
public sealed class ColorCorrectionMode : Enum // TypeDefIndex: 4899
{
	// Fields
	public int value__; // 0x10
	public const ColorCorrectionMode Simple = 0; // 0x0
	public const ColorCorrectionMode Advanced = 1; // 0x0

}

// Namespace: 
public class ColorCorrectionCurves : PostEffectsBase // TypeDefIndex: 4900
{
	// Fields
	public AnimationCurve redChannel; // 0x20
	public AnimationCurve greenChannel; // 0x28
	public AnimationCurve blueChannel; // 0x30
	public bool useDepthCorrection; // 0x38
	public AnimationCurve zCurve; // 0x40
	public AnimationCurve depthRedChannel; // 0x48
	public AnimationCurve depthGreenChannel; // 0x50
	public AnimationCurve depthBlueChannel; // 0x58
	private Material ccMaterial; // 0x60
	private Material ccDepthMaterial; // 0x68
	private Material selectiveCcMaterial; // 0x70
	private Texture2D rgbChannelTex; // 0x78
	private Texture2D rgbDepthChannelTex; // 0x80
	private Texture2D zCurveTex; // 0x88
	public float saturation; // 0x90
	public bool selectiveCc; // 0x94
	public Color selectiveFromColor; // 0x98
	public Color selectiveToColor; // 0xA8
	public ColorCorrectionMode mode; // 0xB8
	public bool updateTextures; // 0xBC
	public Shader colorCorrectionCurvesShader; // 0xC0
	public Shader simpleColorCorrectionCurvesShader; // 0xC8
	public Shader colorCorrectionSelectiveShader; // 0xD0
	private bool updateTexturesOnStartup; // 0xD8

	// Methods
	public void .ctor(); // 0x100350940
	public override void Start(); // 0x1003509A0
	public override void Awake(); // 0x1003509CC
	public override bool CheckResources(); // 0x1003509D0
	public override void UpdateParameters(); // 0x100350CE8
	public override void UpdateTextures(); // 0x100351110
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10035115C
	public override void Main(); // 0x100351434
}

// Namespace: 
public class ColorCorrectionLut : PostEffectsBase // TypeDefIndex: 4901
{
	// Fields
	public Shader shader; // 0x20
	private Material material; // 0x28
	public Texture3D converted3DLut; // 0x30
	public string basedOnTempTex; // 0x38

	// Methods
	public void .ctor(); // 0x100351438
	public override bool CheckResources(); // 0x1003514B4
	public override void OnDisable(); // 0x10035157C
	public override void OnDestroy(); // 0x10035162C
	public override void SetIdentityLut(); // 0x1003516DC
	public override bool ValidDimensions(Texture2D tex2d); // 0x100351924
	public override void Convert(Texture2D temp2DTex, string path); // 0x100351A34
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100351E5C
	public override void Main(); // 0x100352064
}

// Namespace: 
public class ContrastEnhance : PostEffectsBase // TypeDefIndex: 4902
{
	// Fields
	public float intensity; // 0x1C
	public float threshhold; // 0x20
	private Material separableBlurMaterial; // 0x28
	private Material contrastCompositeMaterial; // 0x30
	public float blurSpread; // 0x38
	public Shader separableBlurShader; // 0x40
	public Shader contrastCompositeShader; // 0x48

	// Methods
	public void .ctor(); // 0x100352068
	public override bool CheckResources(); // 0x10035209C
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1003521A0
	public override void Main(); // 0x1003524F4
}

// Namespace: 
public class Crease : PostEffectsBase // TypeDefIndex: 4903
{
	// Fields
	public float intensity; // 0x1C
	public int softness; // 0x20
	public float spread; // 0x24
	public Shader blurShader; // 0x28
	private Material blurMaterial; // 0x30
	public Shader depthFetchShader; // 0x38
	private Material depthFetchMaterial; // 0x40
	public Shader creaseApplyShader; // 0x48
	private Material creaseApplyMaterial; // 0x50

	// Methods
	public void .ctor(); // 0x1003524F8
	public override bool CheckResources(); // 0x100352530
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100352660
	public override void Main(); // 0x1003529C4
}

// Namespace: 
public sealed class Dof34QualitySetting : Enum // TypeDefIndex: 4904
{
	// Fields
	public int value__; // 0x10
	public const Dof34QualitySetting OnlyBackground = 1; // 0x0
	public const Dof34QualitySetting BackgroundAndForeground = 2; // 0x0

}

// Namespace: 
public sealed class DofResolution : Enum // TypeDefIndex: 4905
{
	// Fields
	public int value__; // 0x10
	public const DofResolution High = 2; // 0x0
	public const DofResolution Medium = 3; // 0x0
	public const DofResolution Low = 4; // 0x0

}

// Namespace: 
public sealed class DofBlurriness : Enum // TypeDefIndex: 4906
{
	// Fields
	public int value__; // 0x10
	public const DofBlurriness Low = 1; // 0x0
	public const DofBlurriness High = 2; // 0x0
	public const DofBlurriness VeryHigh = 4; // 0x0

}

// Namespace: 
public sealed class BokehDestination : Enum // TypeDefIndex: 4907
{
	// Fields
	public int value__; // 0x10
	public const BokehDestination Background = 1; // 0x0
	public const BokehDestination Foreground = 2; // 0x0
	public const BokehDestination BackgroundAndForeground = 3; // 0x0

}

// Namespace: 
public class DepthOfField34 : PostEffectsBase // TypeDefIndex: 4908
{
	// Fields
	private static int SMOOTH_DOWNSAMPLE_PASS; // 0x0
	private static float BOKEH_EXTRA_BLUR; // 0x4
	public Dof34QualitySetting quality; // 0x1C
	public DofResolution resolution; // 0x20
	public bool simpleTweakMode; // 0x24
	public float focalPoint; // 0x28
	public float smoothness; // 0x2C
	public float focalZDistance; // 0x30
	public float focalZStartCurve; // 0x34
	public float focalZEndCurve; // 0x38
	private float focalStartCurve; // 0x3C
	private float focalEndCurve; // 0x40
	private float focalDistance01; // 0x44
	public Transform objectFocus; // 0x48
	public float focalSize; // 0x50
	public DofBlurriness bluriness; // 0x54
	public float maxBlurSpread; // 0x58
	public float foregroundBlurExtrude; // 0x5C
	public Shader dofBlurShader; // 0x60
	private Material dofBlurMaterial; // 0x68
	public Shader dofShader; // 0x70
	private Material dofMaterial; // 0x78
	public bool visualize; // 0x80
	public BokehDestination bokehDestination; // 0x84
	private float widthOverHeight; // 0x88
	private float oneOverBaseSize; // 0x8C
	public bool bokeh; // 0x90
	public bool bokehSupport; // 0x91
	public Shader bokehShader; // 0x98
	public Texture2D bokehTexture; // 0xA0
	public float bokehScale; // 0xA8
	public float bokehIntensity; // 0xAC
	public float bokehThreshholdContrast; // 0xB0
	public float bokehThreshholdLuminance; // 0xB4
	public int bokehDownsample; // 0xB8
	private Material bokehMaterial; // 0xC0
	private RenderTexture foregroundTexture; // 0xC8
	private RenderTexture mediumRezWorkTexture; // 0xD0
	private RenderTexture finalDefocus; // 0xD8
	private RenderTexture lowRezWorkTexture; // 0xE0
	private RenderTexture bokehSource; // 0xE8
	private RenderTexture bokehSource2; // 0xF0

	// Methods
	public void .ctor(); // 0x100352A60
	private static void .cctor(); // 0x100352B04
	public override void CreateMaterials(); // 0x100352B5C
	public override bool CheckResources(); // 0x100352CAC
	public override void OnDisable(); // 0x100352E64
	public override void OnEnable(); // 0x100353064
	public override float FocalDistance01(float worldDist); // 0x1003530F0
	public override int GetDividerBasedOnQuality(); // 0x100353274
	public override int GetLowResolutionDividerBasedOnQuality(int baseDivider); // 0x100353298
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1003532B8
	public override void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread); // 0x100353D38
	public override void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread); // 0x100353FB4
	public override void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp); // 0x100354250
	public override void Downsample(RenderTexture from, RenderTexture to); // 0x100354464
	public override void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget); // 0x100354584
	public override void ReleaseTextures(); // 0x100354C24
	public override void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider); // 0x100354E00
	public override void Main(); // 0x100355110
}

// Namespace: 
public class DepthOfFieldScatter : PostEffectsBase // TypeDefIndex: 4909
{
	// Fields
	public bool visualizeFocus; // 0x1B
	public float focalLength; // 0x1C
	public float focalSize; // 0x20
	public float aperture; // 0x24
	public Transform focalTransform; // 0x28
	public float maxBlurSize; // 0x30
	public bool highResolution; // 0x34
	public BlurType blurType; // 0x38
	public BlurSampleCount blurSampleCount; // 0x3C
	public bool nearBlur; // 0x40
	public float foregroundOverlap; // 0x44
	public Shader dofHdrShader; // 0x48
	private Material dofHdrMaterial; // 0x50
	public Shader dx11BokehShader; // 0x58
	private Material dx11bokehMaterial; // 0x60
	public float dx11BokehThreshhold; // 0x68
	public float dx11SpawnHeuristic; // 0x6C
	public Texture2D dx11BokehTexture; // 0x70
	public float dx11BokehScale; // 0x78
	public float dx11BokehIntensity; // 0x7C
	private float focalDistance01; // 0x80
	private ComputeBuffer cbDrawArgs; // 0x88
	private ComputeBuffer cbPoints; // 0x90
	private float internalBlurWidth; // 0x98

	// Methods
	public void .ctor(); // 0x100355114
	public override bool CheckResources(); // 0x10035518C
	public override void OnEnable(); // 0x1003552C0
	public override void OnDisable(); // 0x10035534C
	public override void ReleaseComputeResources(); // 0x100355480
	public override void CreateComputeResources(); // 0x1003554C4
	public override float FocalDistance01(float worldDist); // 0x100355678
	private void WriteCoc(RenderTexture fromTo, bool fgDilate); // 0x1003557FC
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100355AEC
	public override void Main(); // 0x100356FC8
}

// Namespace: 
public sealed class BlurType : Enum // TypeDefIndex: 4910
{
	// Fields
	public int value__; // 0x10
	public const BlurType DiscBlur = 0; // 0x0
	public const BlurType DX11 = 1; // 0x0

}

// Namespace: 
public sealed class BlurSampleCount : Enum // TypeDefIndex: 4911
{
	// Fields
	public int value__; // 0x10
	public const BlurSampleCount Low = 0; // 0x0
	public const BlurSampleCount Medium = 1; // 0x0
	public const BlurSampleCount High = 2; // 0x0

}

// Namespace: 
public sealed class EdgeDetectMode : Enum // TypeDefIndex: 4912
{
	// Fields
	public int value__; // 0x10
	public const EdgeDetectMode TriangleDepthNormals = 0; // 0x0
	public const EdgeDetectMode RobertsCrossDepthNormals = 1; // 0x0
	public const EdgeDetectMode SobelDepth = 2; // 0x0
	public const EdgeDetectMode SobelDepthThin = 3; // 0x0
	public const EdgeDetectMode TriangleLuminance = 4; // 0x0

}

// Namespace: 
public class EdgeDetectEffectNormals : PostEffectsBase // TypeDefIndex: 4913
{
	// Fields
	public EdgeDetectMode mode; // 0x1C
	public float sensitivityDepth; // 0x20
	public float sensitivityNormals; // 0x24
	public float lumThreshhold; // 0x28
	public float edgeExp; // 0x2C
	public float sampleDist; // 0x30
	public float edgesOnly; // 0x34
	public Color edgesOnlyBgColor; // 0x38
	public Shader edgeDetectShader; // 0x48
	private Material edgeDetectMaterial; // 0x50
	private EdgeDetectMode oldMode; // 0x58

	// Methods
	public void .ctor(); // 0x100356FCC
	public override bool CheckResources(); // 0x100357034
	public override void Start(); // 0x100357138
	public override void SetCameraFlag(); // 0x100357144
	public override void OnEnable(); // 0x1003571E4
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100357230
	public override void Main(); // 0x10035740C
}

// Namespace: 
public class Fisheye : PostEffectsBase // TypeDefIndex: 4914
{
	// Fields
	public float strengthX; // 0x1C
	public float strengthY; // 0x20
	public Shader fishEyeShader; // 0x28
	private Material fisheyeMaterial; // 0x30

	// Methods
	public void .ctor(); // 0x100357410
	public override bool CheckResources(); // 0x100357444
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10035750C
	public override void Main(); // 0x100357658
}

// Namespace: 
public class GlobalFog : PostEffectsBase // TypeDefIndex: 4915
{
	// Fields
	public FogMode fogMode; // 0x1C
	private float CAMERA_NEAR; // 0x20
	private float CAMERA_FAR; // 0x24
	private float CAMERA_FOV; // 0x28
	private float CAMERA_ASPECT_RATIO; // 0x2C
	public float startDistance; // 0x30
	public float globalDensity; // 0x34
	public float heightScale; // 0x38
	public float height; // 0x3C
	public Color globalFogColor; // 0x40
	public Shader fogShader; // 0x50
	private Material fogMaterial; // 0x58

	// Methods
	public void .ctor(); // 0x10035765C
	public override bool CheckResources(); // 0x1003576CC
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100357794
	public static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr); // 0x100357EDC
	public override void Main(); // 0x100358084
}

// Namespace: 
public sealed class FogMode : Enum // TypeDefIndex: 4916
{
	// Fields
	public int value__; // 0x10
	public const FogMode AbsoluteYAndDistance = 0; // 0x0
	public const FogMode AbsoluteY = 1; // 0x0
	public const FogMode Distance = 2; // 0x0
	public const FogMode RelativeYAndDistance = 3; // 0x0

}

// Namespace: 
public class NoiseAndGrain : PostEffectsBase // TypeDefIndex: 4917
{
	// Fields
	public float intensityMultiplier; // 0x1C
	public float generalIntensity; // 0x20
	public float blackIntensity; // 0x24
	public float whiteIntensity; // 0x28
	public float midGrey; // 0x2C
	public bool dx11Grain; // 0x30
	public float softness; // 0x34
	public bool monochrome; // 0x38
	public Vector3 intensities; // 0x3C
	public Vector3 tiling; // 0x48
	public float monochromeTiling; // 0x54
	public FilterMode filterMode; // 0x58
	public Texture2D noiseTexture; // 0x60
	public Shader noiseShader; // 0x68
	private Material noiseMaterial; // 0x70
	public Shader dx11NoiseShader; // 0x78
	private Material dx11NoiseMaterial; // 0x80
	private static float TILE_AMOUNT; // 0x0

	// Methods
	public void .ctor(); // 0x100358088
	private static void .cctor(); // 0x100358144
	public override bool CheckResources(); // 0x100358198
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x1003582A4
	public static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr); // 0x100358A60
	public override void Main(); // 0x100358E48
}

// Namespace: 
public class PostEffectsHelper : MonoBehaviour // TypeDefIndex: 4918
{
	// Methods
	public void .ctor(); // 0x100358E4C
	public override void Start(); // 0x100358E54
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100358E58
	public static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix); // 0x100358EC8
	public static void DrawBorder(RenderTexture dest, Material material); // 0x100359184
	public static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material); // 0x1003595A8
	public override void Main(); // 0x10035978C
}

// Namespace: 
public class Quads : MonoBehaviour // TypeDefIndex: 4919
{
	// Fields
	public static Mesh[] meshes; // 0x0
	public static int currentQuads; // 0x8

	// Methods
	public void .ctor(); // 0x100359790
	private static void .cctor(); // 0x100359798
	public static bool HasMeshes(); // 0x10035979C
	public static void Cleanup(); // 0x100352EC0
	public static Mesh[] GetMeshes(int totalWidth, int totalHeight); // 0x100354970
	public static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight); // 0x1003598C8
	public override void Main(); // 0x100359ECC
}

// Namespace: 
public class ScreenOverlay : PostEffectsBase // TypeDefIndex: 4920
{
	// Fields
	public OverlayBlendMode blendMode; // 0x1C
	public float intensity; // 0x20
	public Texture2D texture; // 0x28
	public Shader overlayShader; // 0x30
	private Material overlayMaterial; // 0x38

	// Methods
	public void .ctor(); // 0x100359ED0
	public override bool CheckResources(); // 0x100359F00
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x100359FC8
	public override void Main(); // 0x10035A11C
}

// Namespace: 
public sealed class OverlayBlendMode : Enum // TypeDefIndex: 4921
{
	// Fields
	public int value__; // 0x10
	public const OverlayBlendMode Additive = 0; // 0x0
	public const OverlayBlendMode ScreenBlend = 1; // 0x0
	public const OverlayBlendMode Multiply = 2; // 0x0
	public const OverlayBlendMode Overlay = 3; // 0x0
	public const OverlayBlendMode AlphaBlend = 4; // 0x0

}

// Namespace: 
public class TiltShiftHdr : PostEffectsBase // TypeDefIndex: 4922
{
	// Fields
	public TiltShiftMode mode; // 0x1C
	public TiltShiftQuality quality; // 0x20
	public float blurArea; // 0x24
	public float maxBlurSize; // 0x28
	public int downsample; // 0x2C
	public Shader tiltShiftShader; // 0x30
	private Material tiltShiftMaterial; // 0x38

	// Methods
	public void .ctor(); // 0x10035A120
	public override bool CheckResources(); // 0x10035A15C
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10035A224
	public override void Main(); // 0x10035A474
}

// Namespace: 
public sealed class TiltShiftMode : Enum // TypeDefIndex: 4923
{
	// Fields
	public int value__; // 0x10
	public const TiltShiftMode TiltShiftMode = 0; // 0x0
	public const TiltShiftMode IrisMode = 1; // 0x0

}

// Namespace: 
public sealed class TiltShiftQuality : Enum // TypeDefIndex: 4924
{
	// Fields
	public int value__; // 0x10
	public const TiltShiftQuality Preview = 0; // 0x0
	public const TiltShiftQuality Normal = 1; // 0x0
	public const TiltShiftQuality High = 2; // 0x0

}

// Namespace: 
public class Tonemapping : PostEffectsBase // TypeDefIndex: 4925
{
	// Fields
	public TonemapperType type; // 0x1C
	public AdaptiveTexSize adaptiveTextureSize; // 0x20
	public AnimationCurve remapCurve; // 0x28
	private Texture2D curveTex; // 0x30
	public float exposureAdjustment; // 0x38
	public float middleGrey; // 0x3C
	public float white; // 0x40
	public float adaptionSpeed; // 0x44
	public Shader tonemapper; // 0x48
	public bool validRenderTextureFormat; // 0x50
	private Material tonemapMaterial; // 0x58
	private RenderTexture rt; // 0x60
	private RenderTextureFormat rtFormat; // 0x68

	// Methods
	public void .ctor(); // 0x10035A478
	public override bool CheckResources(); // 0x10035A4D0
	public override float UpdateCurve(); // 0x10035A67C
	public override void OnDisable(); // 0x10035A8E4
	public override bool CreateInternalRenderTexture(); // 0x10035AA54
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10035AB50
	public override void Main(); // 0x10035B278
}

// Namespace: 
public sealed class TonemapperType : Enum // TypeDefIndex: 4926
{
	// Fields
	public int value__; // 0x10
	public const TonemapperType SimpleReinhard = 0; // 0x0
	public const TonemapperType UserCurve = 1; // 0x0
	public const TonemapperType Hable = 2; // 0x0
	public const TonemapperType Photographic = 3; // 0x0
	public const TonemapperType OptimizedHejiDawson = 4; // 0x0
	public const TonemapperType AdaptiveReinhard = 5; // 0x0
	public const TonemapperType AdaptiveReinhardAutoWhite = 6; // 0x0

}

// Namespace: 
public sealed class AdaptiveTexSize : Enum // TypeDefIndex: 4927
{
	// Fields
	public int value__; // 0x10
	public const AdaptiveTexSize Square16 = 16; // 0x0
	public const AdaptiveTexSize Square32 = 32; // 0x0
	public const AdaptiveTexSize Square64 = 64; // 0x0
	public const AdaptiveTexSize Square128 = 128; // 0x0
	public const AdaptiveTexSize Square256 = 256; // 0x0
	public const AdaptiveTexSize Square512 = 512; // 0x0
	public const AdaptiveTexSize Square1024 = 1024; // 0x0

}

// Namespace: 
public class Triangles : MonoBehaviour // TypeDefIndex: 4928
{
	// Fields
	public static Mesh[] meshes; // 0x0
	public static int currentTris; // 0x8

	// Methods
	public void .ctor(); // 0x10035B27C
	private static void .cctor(); // 0x10035B284
	public static bool HasMeshes(); // 0x10035B288
	public static void Cleanup(); // 0x10035B3B4
	public static Mesh[] GetMeshes(int totalWidth, int totalHeight); // 0x10035B558
	public static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight); // 0x10035B80C
	public override void Main(); // 0x10035BCB0
}

// Namespace: 
public class Vignetting : PostEffectsBase // TypeDefIndex: 4929
{
	// Fields
	public AberrationMode mode; // 0x1C
	public float intensity; // 0x20
	public float chromaticAberration; // 0x24
	public float axialAberration; // 0x28
	public float blur; // 0x2C
	public float blurSpread; // 0x30
	public float luminanceDependency; // 0x34
	public float blurDistance; // 0x38
	public Shader vignetteShader; // 0x40
	private Material vignetteMaterial; // 0x48
	public Shader separableBlurShader; // 0x50
	private Material separableBlurMaterial; // 0x58
	public Shader chromAberrationShader; // 0x60
	private Material chromAberrationMaterial; // 0x68

	// Methods
	public void .ctor(); // 0x10035BCB4
	public override bool CheckResources(); // 0x10035BD04
	public override void OnRenderImage(RenderTexture source, RenderTexture destination); // 0x10035BE34
	public override void Main(); // 0x10035C39C
}

// Namespace: 
public sealed class AberrationMode : Enum // TypeDefIndex: 4930
{
	// Fields
	public int value__; // 0x10
	public const AberrationMode Simple = 0; // 0x0
	public const AberrationMode Advanced = 1; // 0x0

}
